
earthsea.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init         0000001a  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         00006d70  80002020  80002020  00002420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .exception    00000200  80008e00  80008e00  00009200  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .fini         00000018  80009000  80009000  00009400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .rodata       000005c0  80009018  80009018  00009418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  8 .ctors        00000008  00000008  800095d8  00009c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .dtors        00000008  00000010  800095e0  00009c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .jcr          00000004  00000018  800095e8  00009c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .got          00000000  0000001c  800095ec  00009c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000520  0000001c  800095ec  00009c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          00003a6c  0000055c  0000055c  00000000  2**2
                  ALLOC
 14 .heap         00003038  00003fc8  00003fc8  00000000  2**0
                  ALLOC
 15 .comment      00000028  00000000  00000000  0000a13c  2**0
                  CONTENTS, READONLY
 16 .debug_aranges 00001028  00000000  00000000  0000a164  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_pubnames 00002532  00000000  00000000  0000b18c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_info   00028f68  00000000  00000000  0000d6be  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00004ced  00000000  00000000  00036626  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00012f18  00000000  00000000  0003b313  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_frame  00002ccc  00000000  00000000  0004e22c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    00008bac  00000000  00000000  00050ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    00007184  00000000  00000000  00059aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macinfo 010f65eb  00000000  00000000  00060c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .stack        00001000  00007000  00007000  00000000  2**0
                  ALLOC
 26 .flash_nvram  000187a4  80020000  80009b0c  0000a400  2**2
                  ALLOC
 27 .debug_ranges 00001840  00000000  00000000  01157213  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf ff e0 	sub	pc,pc,-32

Disassembly of section .init:

80002004 <_init>:
80002004:	eb cd 40 40 	pushm	r6,lr
80002008:	48 26       	lddpc	r6,80002010 <_init+0xc>
8000200a:	1e 26       	rsub	r6,pc
8000200c:	c0 48       	rjmp	80002014 <_init+0x10>
8000200e:	d7 03       	nop
80002010:	80 00       	ld.sh	r0,r0[0x0]
80002012:	1f ee       	ld.ub	lr,pc[0x6]
80002014:	c5 4c       	rcall	800020bc <frame_dummy>
80002016:	e0 a0 36 b3 	rcall	80008d7c <__do_global_ctors_aux>
8000201a:	e3 cd 80 40 	ldm	sp++,r6,pc

Disassembly of section .text:

80002020 <_stext>:
80002020:	30 07       	mov	r7,0
80002022:	e0 6a 80 00 	mov	r10,32768
80002026:	5b fa       	cp.w	r10,-1
80002028:	f4 0d 17 10 	movne	sp,r10
8000202c:	fe cb 8a 54 	sub	r11,pc,-30124
80002030:	30 8c       	mov	r12,8
80002032:	18 3b       	cp.w	r11,r12
80002034:	c0 70       	breq	80002042 <_stext+0x22>
80002036:	e0 6a 05 40 	mov	r10,1344
8000203a:	b7 09       	ld.d	r8,r11++
8000203c:	b9 28       	st.d	r12++,r8
8000203e:	14 3c       	cp.w	r12,r10
80002040:	cf d5       	brlt	8000203a <_stext+0x1a>
80002042:	e0 6a 3f c8 	mov	r10,16328
80002046:	e0 6c 05 40 	mov	r12,1344
8000204a:	30 08       	mov	r8,0
8000204c:	30 09       	mov	r9,0
8000204e:	b9 28       	st.d	r12++,r8
80002050:	14 3c       	cp.w	r12,r10
80002052:	cf e5       	brlt	8000204e <_stext+0x2e>
80002054:	e0 a0 34 a7 	rcall	800089a2 <_init_startup>
80002058:	fe cc 90 58 	sub	r12,pc,-28584
8000205c:	e0 a0 31 9e 	rcall	80008398 <atexit>
80002060:	cd 2f       	rcall	80002004 <_init>
80002062:	1a 9c       	mov	r12,sp
80002064:	30 0b       	mov	r11,0
80002066:	e0 a0 34 9f 	rcall	800089a4 <_init_argv>
8000206a:	5b fc       	cp.w	r12,-1
8000206c:	f9 bc 00 00 	moveq	r12,0
80002070:	f9 ba 00 00 	moveq	r10,0
80002074:	14 1d       	sub	sp,r10
80002076:	e0 a0 12 b7 	rcall	800045e4 <main>
8000207a:	e0 a0 31 97 	rcall	800083a8 <exit>
8000207e:	d7 03       	nop

80002080 <__do_global_dtors_aux>:
80002080:	d4 21       	pushm	r4-r7,lr
80002082:	e0 68 05 5c 	mov	r8,1372
80002086:	11 89       	ld.ub	r9,r8[0x0]
80002088:	30 08       	mov	r8,0
8000208a:	f0 09 18 00 	cp.b	r9,r8
8000208e:	c1 61       	brne	800020ba <__do_global_dtors_aux+0x3a>
80002090:	31 08       	mov	r8,16
80002092:	31 46       	mov	r6,20
80002094:	10 95       	mov	r5,r8
80002096:	10 16       	sub	r6,r8
80002098:	e0 67 05 60 	mov	r7,1376
8000209c:	a3 46       	asr	r6,0x2
8000209e:	20 16       	sub	r6,1
800020a0:	c0 68       	rjmp	800020ac <__do_global_dtors_aux+0x2c>
800020a2:	2f f8       	sub	r8,-1
800020a4:	8f 08       	st.w	r7[0x0],r8
800020a6:	ea 08 03 28 	ld.w	r8,r5[r8<<0x2]
800020aa:	5d 18       	icall	r8
800020ac:	6e 08       	ld.w	r8,r7[0x0]
800020ae:	0c 38       	cp.w	r8,r6
800020b0:	cf 93       	brcs	800020a2 <__do_global_dtors_aux+0x22>
800020b2:	30 19       	mov	r9,1
800020b4:	e0 68 05 5c 	mov	r8,1372
800020b8:	b0 89       	st.b	r8[0x0],r9
800020ba:	d8 22       	popm	r4-r7,pc

800020bc <frame_dummy>:
800020bc:	d4 01       	pushm	lr
800020be:	31 8c       	mov	r12,24
800020c0:	78 08       	ld.w	r8,r12[0x0]
800020c2:	58 08       	cp.w	r8,0
800020c4:	c0 50       	breq	800020ce <frame_dummy+0x12>
800020c6:	48 38       	lddpc	r8,800020d0 <frame_dummy+0x14>
800020c8:	58 08       	cp.w	r8,0
800020ca:	c0 20       	breq	800020ce <frame_dummy+0x12>
800020cc:	5d 18       	icall	r8
800020ce:	d8 02       	popm	pc
800020d0:	00 00       	add	r0,r0
	...

800020d4 <handler_None>:

// check the event queue
static void check_events(void);

// handler protos
static void handler_None(s32 data) { ;; }
800020d4:	5e fc       	retal	r12

800020d6 <clock>:
////////////////////////////////////////////////////////////////////////////////
// application clock code

void clock(u8 phase) {
;;
}
800020d6:	5e fc       	retal	r12

800020d8 <pattern_linearize>:
		// legato = 0;
	}
}


void pattern_linearize() {
800020d8:	d4 21       	pushm	r4-r7,lr
	u8 i, note, rest;

	note = es.p[p_select].e[0].interval;
800020da:	e0 68 3c 62 	mov	r8,15458
800020de:	e0 6a 0b 58 	mov	r10,2904
800020e2:	11 8c       	ld.ub	r12,r8[0x0]
800020e4:	e0 68 03 08 	mov	r8,776
	rest = es.p[p_select].e[1].interval;


	for(i=0;i<es.p[p_select].length+1;i++)
800020e8:	f8 08 02 48 	mul	r8,r12,r8


void pattern_linearize() {
	u8 i, note, rest;

	note = es.p[p_select].e[0].interval;
800020ec:	10 99       	mov	r9,r8
	rest = es.p[p_select].e[1].interval;


	for(i=0;i<es.p[p_select].length+1;i++)
800020ee:	f4 08 00 08 	add	r8,r10,r8
800020f2:	14 97       	mov	r7,r10


void pattern_linearize() {
	u8 i, note, rest;

	note = es.p[p_select].e[0].interval;
800020f4:	f0 ce fc 94 	sub	lr,r8,-876
	rest = es.p[p_select].e[1].interval;
800020f8:	f1 35 00 71 	ld.ub	r5,r8[113]
800020fc:	f1 36 00 77 	ld.ub	r6,r8[119]


	for(i=0;i<es.p[p_select].length+1;i++)
80002100:	30 08       	mov	r8,0
80002102:	c1 28       	rjmp	80002126 <pattern_linearize+0x4e>
		if(i%2)
80002104:	f0 0a 10 03 	mul	r10,r8,3
			es.p[p_select].e[i].interval = rest;
80002108:	e9 d8 c0 01 	bfextu	r4,r8,0x0,0x1
8000210c:	f2 0a 00 1b 	add	r11,r9,r10<<0x1
	note = es.p[p_select].e[0].interval;
	rest = es.p[p_select].e[1].interval;


	for(i=0;i<es.p[p_select].length+1;i++)
		if(i%2)
80002110:	ee 0b 00 0b 	add	r11,r7,r11
			es.p[p_select].e[i].interval = rest;
80002114:	58 04       	cp.w	r4,0
80002116:	c0 40       	breq	8000211e <pattern_linearize+0x46>
80002118:	f7 56 00 70 	st.h	r11[112],r6
		else
			es.p[p_select].e[i].interval = note;
8000211c:	c0 38       	rjmp	80002122 <pattern_linearize+0x4a>

	note = es.p[p_select].e[0].interval;
	rest = es.p[p_select].e[1].interval;


	for(i=0;i<es.p[p_select].length+1;i++)
8000211e:	f7 55 00 70 	st.h	r11[112],r5
80002122:	2f f8       	sub	r8,-1
80002124:	5c 58       	castu.b	r8
80002126:	1d 8b       	ld.ub	r11,lr[0x0]
80002128:	e0 6a 0b 58 	mov	r10,2904
		if(i%2)
			es.p[p_select].e[i].interval = rest;
		else
			es.p[p_select].e[i].interval = note;

	es.p[p_select].total_time = 0;
8000212c:	10 3b       	cp.w	r11,r8
		// legato = 0;
	}
}


void pattern_linearize() {
8000212e:	ce b4       	brge	80002104 <pattern_linearize+0x2c>
80002130:	30 08       	mov	r8,0
		if(i%2)
			es.p[p_select].e[i].interval = rest;
		else
			es.p[p_select].e[i].interval = note;

	es.p[p_select].total_time = 0;
80002132:	bc 18       	st.h	lr[0x2],r8
80002134:	f4 ce ff 90 	sub	lr,r10,-112
		// legato = 0;
	}
}


void pattern_linearize() {
80002138:	f2 c8 ff 90 	sub	r8,r9,-112
8000213c:	f6 0b 00 1b 	add	r11,r11,r11<<0x1
			es.p[p_select].e[i].interval = note;

	es.p[p_select].total_time = 0;

	for(i=0;i<es.p[p_select].length;i++) {
		es.p[p_select].total_time += es.p[p_select].e[i].interval;
80002140:	14 08       	add	r8,r10
80002142:	fc 0b 00 1b 	add	r11,lr,r11<<0x1
		// legato = 0;
	}
}


void pattern_linearize() {
80002146:	e0 6e 03 08 	mov	lr,776
			es.p[p_select].e[i].interval = note;

	es.p[p_select].total_time = 0;

	for(i=0;i<es.p[p_select].length;i++) {
		es.p[p_select].total_time += es.p[p_select].e[i].interval;
8000214a:	f6 09 00 09 	add	r9,r11,r9
8000214e:	f8 0e 03 4a 	mac	r10,r12,lr
80002152:	f4 ca fc 94 	sub	r10,r10,-876
80002156:	c0 78       	rjmp	80002164 <pattern_linearize+0x8c>
80002158:	90 0c       	ld.sh	r12,r8[0x0]
8000215a:	94 1b       	ld.sh	r11,r10[0x2]
8000215c:	2f a8       	sub	r8,-6
		else
			es.p[p_select].e[i].interval = note;

	es.p[p_select].total_time = 0;

	for(i=0;i<es.p[p_select].length;i++) {
8000215e:	f8 0b 00 0b 	add	r11,r12,r11
		// print_dbg(", ");
		// print_dbg_ulong(es.p[p_select].e[i].y);
		// print_dbg(") + ");
		// print_dbg_ulong(es.p[p_select].e[i].interval);
	}
 }
80002162:	b4 1b       	st.h	r10[0x2],r11
80002164:	12 38       	cp.w	r8,r9
80002166:	cf 91       	brne	80002158 <pattern_linearize+0x80>
80002168:	d8 22       	popm	r4-r7,pc
8000216a:	d7 03       	nop

8000216c <pattern_time_half>:

void pattern_time_half() {
8000216c:	d4 21       	pushm	r4-r7,lr
	u8 i;

	for(i=0;i<es.p[p_select].length+1;i++)
8000216e:	e0 68 3c 62 	mov	r8,15458
80002172:	e0 67 0b 58 	mov	r7,2904
80002176:	11 8c       	ld.ub	r12,r8[0x0]
80002178:	e0 69 03 08 	mov	r9,776
8000217c:	30 08       	mov	r8,0
8000217e:	f8 09 02 49 	mul	r9,r12,r9
80002182:	ee 09 00 0e 	add	lr,r7,r9
80002186:	fc ce fc 94 	sub	lr,lr,-876
			es.p[p_select].e[i].interval = es.p[p_select].e[i].interval / 2;
8000218a:	c0 d8       	rjmp	800021a4 <pattern_time_half+0x38>
 }

void pattern_time_half() {
	u8 i;

	for(i=0;i<es.p[p_select].length+1;i++)
8000218c:	f0 08 00 1a 	add	r10,r8,r8<<0x1
			es.p[p_select].e[i].interval = es.p[p_select].e[i].interval / 2;
80002190:	f1 d6 c0 08 	bfextu	r8,r6,0x0,0x8
80002194:	f2 0a 00 1a 	add	r10,r9,r10<<0x1
80002198:	ee 0a 00 0a 	add	r10,r7,r10
8000219c:	29 0a       	sub	r10,-112
8000219e:	94 8b       	ld.uh	r11,r10[0x0]
 }

void pattern_time_half() {
	u8 i;

	for(i=0;i<es.p[p_select].length+1;i++)
800021a0:	a1 9b       	lsr	r11,0x1
800021a2:	b4 0b       	st.h	r10[0x0],r11
800021a4:	f0 c6 ff ff 	sub	r6,r8,-1
800021a8:	1d 8b       	ld.ub	r11,lr[0x0]
800021aa:	e0 6a 0b 58 	mov	r10,2904
			es.p[p_select].e[i].interval = es.p[p_select].e[i].interval / 2;

	es.p[p_select].total_time = 0;
800021ae:	10 3b       	cp.w	r11,r8
		// print_dbg(") + ");
		// print_dbg_ulong(es.p[p_select].e[i].interval);
	}
 }

void pattern_time_half() {
800021b0:	ce e4       	brge	8000218c <pattern_time_half+0x20>
800021b2:	30 08       	mov	r8,0
	u8 i;

	for(i=0;i<es.p[p_select].length+1;i++)
			es.p[p_select].e[i].interval = es.p[p_select].e[i].interval / 2;

	es.p[p_select].total_time = 0;
800021b4:	bc 18       	st.h	lr[0x2],r8
800021b6:	f4 ce ff 90 	sub	lr,r10,-112
		// print_dbg(") + ");
		// print_dbg_ulong(es.p[p_select].e[i].interval);
	}
 }

void pattern_time_half() {
800021ba:	f2 c8 ff 90 	sub	r8,r9,-112
800021be:	f6 0b 00 1b 	add	r11,r11,r11<<0x1
			es.p[p_select].e[i].interval = es.p[p_select].e[i].interval / 2;

	es.p[p_select].total_time = 0;

	for(i=0;i<es.p[p_select].length;i++) {
		es.p[p_select].total_time += es.p[p_select].e[i].interval;
800021c2:	14 08       	add	r8,r10
800021c4:	fc 0b 00 1b 	add	r11,lr,r11<<0x1
		// print_dbg(") + ");
		// print_dbg_ulong(es.p[p_select].e[i].interval);
	}
 }

void pattern_time_half() {
800021c8:	e0 6e 03 08 	mov	lr,776
			es.p[p_select].e[i].interval = es.p[p_select].e[i].interval / 2;

	es.p[p_select].total_time = 0;

	for(i=0;i<es.p[p_select].length;i++) {
		es.p[p_select].total_time += es.p[p_select].e[i].interval;
800021cc:	f6 09 00 09 	add	r9,r11,r9
800021d0:	f8 0e 03 4a 	mac	r10,r12,lr
800021d4:	f4 ca fc 94 	sub	r10,r10,-876
800021d8:	c0 78       	rjmp	800021e6 <pattern_time_half+0x7a>
800021da:	90 0c       	ld.sh	r12,r8[0x0]
800021dc:	94 1b       	ld.sh	r11,r10[0x2]
800021de:	2f a8       	sub	r8,-6
	for(i=0;i<es.p[p_select].length+1;i++)
			es.p[p_select].e[i].interval = es.p[p_select].e[i].interval / 2;

	es.p[p_select].total_time = 0;

	for(i=0;i<es.p[p_select].length;i++) {
800021e0:	f8 0b 00 0b 	add	r11,r12,r11
		es.p[p_select].total_time += es.p[p_select].e[i].interval;
	}
}
800021e4:	b4 1b       	st.h	r10[0x2],r11
800021e6:	12 38       	cp.w	r8,r9
800021e8:	cf 91       	brne	800021da <pattern_time_half+0x6e>
800021ea:	d8 22       	popm	r4-r7,pc

800021ec <handler_MonomePoll>:
800021ec:	d4 01       	pushm	lr
800021ee:	33 08       	mov	r8,48
	adc_convert(&adc);
	reset_hys();
	timer_add(&adcTimer,61,&adcTimer_callback, NULL);
}

static void handler_MonomePoll(s32 data) { monome_read_serial(); }
800021f0:	70 08       	ld.w	r8,r8[0x0]
800021f2:	5d 18       	icall	r8
800021f4:	d8 02       	popm	pc
800021f6:	d7 03       	nop

800021f8 <handler_Front>:
800021f8:	e0 68 3c 4d 	mov	r8,15437


static void handler_Front(s32 data) {
	// print_dbg("\r\n //// FRONT HOLD");

	if(data == 0) {
800021fc:	58 0c       	cp.w	r12,0
		front_timer = 15;
800021fe:	c0 d1       	brne	80002218 <handler_Front+0x20>
80002200:	30 f9       	mov	r9,15
		if(preset_mode) preset_mode = 0;
80002202:	b0 89       	st.b	r8[0x0],r9
80002204:	e0 68 0b 32 	mov	r8,2866
80002208:	11 8a       	ld.ub	r10,r8[0x0]
8000220a:	f8 0a 18 00 	cp.b	r10,r12
8000220e:	c0 30       	breq	80002214 <handler_Front+0x1c>
		else preset_mode = 1;
80002210:	b0 8c       	st.b	r8[0x0],r12
80002212:	c0 58       	rjmp	8000221c <handler_Front+0x24>
	}
	else {
		front_timer = 0;
80002214:	30 19       	mov	r9,1
80002216:	c0 28       	rjmp	8000221a <handler_Front+0x22>
	}

	monomeFrameDirty++;
80002218:	30 09       	mov	r9,0
8000221a:	b0 89       	st.b	r8[0x0],r9
8000221c:	e0 68 07 90 	mov	r8,1936
}
80002220:	11 89       	ld.ub	r9,r8[0x0]
80002222:	2f f9       	sub	r9,-1
80002224:	b0 89       	st.b	r8[0x0],r9
80002226:	5e fc       	retal	r12

80002228 <flash_read>:
80002228:	d4 31       	pushm	r0-r7,lr
8000222a:	20 1d       	sub	sp,4
8000222c:	4c aa       	lddpc	r10,80002354 <flash_read+0x12c>
8000222e:	e0 68 0b 2c 	mov	r8,2860
	// print_dbg("\r\n read preset ");
	// print_dbg_ulong(preset_select);

	u8 i1,i2;

	p_select = flashy.es[preset_select].p_select;
80002232:	14 9c       	mov	r12,r10
80002234:	11 88       	ld.ub	r8,r8[0x0]
80002236:	e0 6b 30 ec 	mov	r11,12524
8000223a:	f0 0b 02 4b 	mul	r11,r8,r11
8000223e:	16 97       	mov	r7,r11
80002240:	f4 0b 00 0b 	add	r11,r10,r11
	shape_on = flashy.es[preset_select].shape_on;
	arp = flashy.es[preset_select].arp;
	port_time = flashy.es[preset_select].port_time;

	es.edge = flashy.es[preset_select].edge;
80002244:	77 1a       	ld.w	r10,r11[0x44]
	// print_dbg("\r\n read preset ");
	// print_dbg_ulong(preset_select);

	u8 i1,i2;

	p_select = flashy.es[preset_select].p_select;
80002246:	e0 69 0b 58 	mov	r9,2904
8000224a:	e0 65 3c 62 	mov	r5,15458
	shape_on = flashy.es[preset_select].shape_on;
	arp = flashy.es[preset_select].arp;
	port_time = flashy.es[preset_select].port_time;

	es.edge = flashy.es[preset_select].edge;
	es.edge_fixed_time = flashy.es[preset_select].edge_fixed_time;
8000224e:	93 0a       	st.w	r9[0x0],r10
	// print_dbg("\r\n read preset ");
	// print_dbg_ulong(preset_select);

	u8 i1,i2;

	p_select = flashy.es[preset_select].p_select;
80002250:	f6 ca ff b8 	sub	r10,r11,-72
	shape_on = flashy.es[preset_select].shape_on;
80002254:	94 0e       	ld.sh	lr,r10[0x0]
80002256:	15 a4       	ld.ub	r4,r10[0x2]
80002258:	aa 84       	st.b	r5[0x0],r4
	arp = flashy.es[preset_select].arp;
8000225a:	15 b5       	ld.ub	r5,r10[0x3]
8000225c:	e0 6a 3d 7d 	mov	r10,15741
	port_time = flashy.es[preset_select].port_time;
80002260:	b4 85       	st.b	r10[0x0],r5

	u8 i1,i2;

	p_select = flashy.es[preset_select].p_select;
	shape_on = flashy.es[preset_select].shape_on;
	arp = flashy.es[preset_select].arp;
80002262:	e0 6a 0b 33 	mov	r10,2867
	port_time = flashy.es[preset_select].port_time;
80002266:	2b 4b       	sub	r11,-76

	es.edge = flashy.es[preset_select].edge;
	es.edge_fixed_time = flashy.es[preset_select].edge_fixed_time;

	for(i1=0;i1<8;i1++) {
80002268:	b2 2e       	st.h	r9[0x4],lr
	u8 i1,i2;

	p_select = flashy.es[preset_select].p_select;
	shape_on = flashy.es[preset_select].shape_on;
	arp = flashy.es[preset_select].arp;
	port_time = flashy.es[preset_select].port_time;
8000226a:	96 1e       	ld.sh	lr,r11[0x2]

	es.edge = flashy.es[preset_select].edge;
	es.edge_fixed_time = flashy.es[preset_select].edge_fixed_time;
8000226c:	17 8b       	ld.ub	r11,r11[0x0]
8000226e:	b4 8b       	st.b	r10[0x0],r11
80002270:	e0 6a 3d 94 	mov	r10,15764

	for(i1=0;i1<8;i1++) {
		for(i2=0;i2<8;i2++) {
			es.cv[i1][i2] = flashy.es[preset_select].cv[i1][i2];
80002274:	12 96       	mov	r6,r9
80002276:	b4 0e       	st.h	r10[0x0],lr
			es.slew[i1][i2] = flashy.es[preset_select].slew[i1][i2];;
80002278:	f2 cb ff e4 	sub	r11,r9,-28
8000227c:	30 0a       	mov	r10,0
8000227e:	c0 e8       	rjmp	8000229a <flash_read+0x72>

	es.edge = flashy.es[preset_select].edge;
	es.edge_fixed_time = flashy.es[preset_select].edge_fixed_time;

	for(i1=0;i1<8;i1++) {
		for(i2=0;i2<8;i2++) {
80002280:	1d 14       	ld.sh	r4,lr++
80002282:	b2 04       	st.h	r9[0x0],r4
80002284:	0b 14       	ld.sh	r4,r5++
80002286:	f3 54 00 30 	st.h	r9[48],r4
	port_time = flashy.es[preset_select].port_time;

	es.edge = flashy.es[preset_select].edge;
	es.edge_fixed_time = flashy.es[preset_select].edge_fixed_time;

	for(i1=0;i1<8;i1++) {
8000228a:	2f e9       	sub	r9,-2
8000228c:	16 39       	cp.w	r9,r11
8000228e:	cf 91       	brne	80002280 <flash_read+0x58>
80002290:	2f fa       	sub	r10,-1
80002292:	f2 cb ff fa 	sub	r11,r9,-6
80002296:	58 8a       	cp.w	r10,8
80002298:	c1 00       	breq	800022b8 <flash_read+0x90>
8000229a:	f4 0a 00 1e 	add	lr,r10,r10<<0x1
8000229e:	a1 7e       	lsl	lr,0x1
800022a0:	fc c9 ff f4 	sub	r9,lr,-12
800022a4:	0e 0e       	add	lr,r7
800022a6:	0c 09       	add	r9,r6
800022a8:	fc c5 ff 80 	sub	r5,lr,-128
800022ac:	2b 0e       	sub	lr,-80
800022ae:	f8 05 00 05 	add	r5,r12,r5
800022b2:	f8 0e 00 0e 	add	lr,r12,lr
		es.p[i1].loop = flashy.es[preset_select].p[i1].loop;
		es.p[i1].x = flashy.es[preset_select].p[i1].x;
		es.p[i1].y = flashy.es[preset_select].p[i1].y;

		for(i2=0;i2<128;i2++) {
			es.p[i1].e[i2].shape = flashy.es[preset_select].p[i1].e[i2].shape;
800022b6:	ce 5b       	rjmp	80002280 <flash_read+0x58>
800022b8:	e0 6b 30 ec 	mov	r11,12524
	port_time = flashy.es[preset_select].port_time;

	es.edge = flashy.es[preset_select].edge;
	es.edge_fixed_time = flashy.es[preset_select].edge_fixed_time;

	for(i1=0;i1<8;i1++) {
800022bc:	e0 69 0b 58 	mov	r9,2904
800022c0:	b7 38       	mul	r8,r11
		es.p[i1].loop = flashy.es[preset_select].p[i1].loop;
		es.p[i1].x = flashy.es[preset_select].p[i1].x;
		es.p[i1].y = flashy.es[preset_select].p[i1].y;

		for(i2=0;i2<128;i2++) {
			es.p[i1].e[i2].shape = flashy.es[preset_select].p[i1].e[i2].shape;
800022c2:	4a 5a       	lddpc	r10,80002354 <flash_read+0x12c>
	port_time = flashy.es[preset_select].port_time;

	es.edge = flashy.es[preset_select].edge;
	es.edge_fixed_time = flashy.es[preset_select].edge_fixed_time;

	for(i1=0;i1<8;i1++) {
800022c4:	12 93       	mov	r3,r9
800022c6:	50 08       	stdsp	sp[0x0],r8
800022c8:	f2 cc fc 94 	sub	r12,r9,-876
800022cc:	f0 c8 fc 4c 	sub	r8,r8,-948
			es.slew[i1][i2] = flashy.es[preset_select].slew[i1][i2];;
		}
	}

	for(i1=0;i1<16;i1++) {
		es.p[i1].length = flashy.es[preset_select].p[i1].length;
800022d0:	14 94       	mov	r4,r10
800022d2:	f4 08 00 08 	add	r8,r10,r8
		es.p[i1].total_time = flashy.es[preset_select].p[i1].total_time;
800022d6:	f2 c9 fc 90 	sub	r9,r9,-880
		es.p[i1].loop = flashy.es[preset_select].p[i1].loop;
800022da:	30 0b       	mov	r11,0
800022dc:	f1 3a ff fc 	ld.ub	r10,r8[-4]
		es.p[i1].x = flashy.es[preset_select].p[i1].x;
800022e0:	b8 8a       	st.b	r12[0x0],r10
		es.p[i1].y = flashy.es[preset_select].p[i1].y;
800022e2:	f1 0a ff fe 	ld.sh	r10,r8[-2]

		for(i2=0;i2<128;i2++) {
			es.p[i1].e[i2].shape = flashy.es[preset_select].p[i1].e[i2].shape;
800022e6:	b8 1a       	st.h	r12[0x2],r10
	for(i1=0;i1<16;i1++) {
		es.p[i1].length = flashy.es[preset_select].p[i1].length;
		es.p[i1].total_time = flashy.es[preset_select].p[i1].total_time;
		es.p[i1].loop = flashy.es[preset_select].p[i1].loop;
		es.p[i1].x = flashy.es[preset_select].p[i1].x;
		es.p[i1].y = flashy.es[preset_select].p[i1].y;
800022e8:	11 8a       	ld.ub	r10,r8[0x0]

		for(i2=0;i2<128;i2++) {
			es.p[i1].e[i2].shape = flashy.es[preset_select].p[i1].e[i2].shape;
800022ea:	b2 8a       	st.b	r9[0x0],r10
800022ec:	11 9a       	ld.ub	r10,r8[0x1]
	for(i1=0;i1<16;i1++) {
		es.p[i1].length = flashy.es[preset_select].p[i1].length;
		es.p[i1].total_time = flashy.es[preset_select].p[i1].total_time;
		es.p[i1].loop = flashy.es[preset_select].p[i1].loop;
		es.p[i1].x = flashy.es[preset_select].p[i1].x;
		es.p[i1].y = flashy.es[preset_select].p[i1].y;
800022ee:	b2 9a       	st.b	r9[0x1],r10

		for(i2=0;i2<128;i2++) {
800022f0:	11 aa       	ld.ub	r10,r8[0x2]
			es.p[i1].e[i2].shape = flashy.es[preset_select].p[i1].e[i2].shape;
800022f2:	e0 6e 03 08 	mov	lr,776
800022f6:	b2 aa       	st.b	r9[0x2],r10
800022f8:	f6 0e 02 41 	mul	r1,r11,lr
800022fc:	30 0a       	mov	r10,0
800022fe:	38 02       	mov	r2,-128
80002300:	40 0e       	lddsp	lr,sp[0x0]
80002302:	f4 0a 00 16 	add	r6,r10,r10<<0x1
80002306:	e2 06 00 16 	add	r6,r1,r6<<0x1
8000230a:	ec 0e 00 05 	add	r5,r6,lr
8000230e:	e8 05 00 05 	add	r5,r4,r5
			es.p[i1].e[i2].x = flashy.es[preset_select].p[i1].e[i2].x;
			es.p[i1].e[i2].y = flashy.es[preset_select].p[i1].e[i2].y;
80002312:	ea c7 ff 50 	sub	r7,r5,-176
		es.p[i1].x = flashy.es[preset_select].p[i1].x;
		es.p[i1].y = flashy.es[preset_select].p[i1].y;

		for(i2=0;i2<128;i2++) {
			es.p[i1].e[i2].shape = flashy.es[preset_select].p[i1].e[i2].shape;
			es.p[i1].e[i2].x = flashy.es[preset_select].p[i1].e[i2].x;
80002316:	0f a0       	ld.ub	r0,r7[0x2]
		es.p[i1].loop = flashy.es[preset_select].p[i1].loop;
		es.p[i1].x = flashy.es[preset_select].p[i1].x;
		es.p[i1].y = flashy.es[preset_select].p[i1].y;

		for(i2=0;i2<128;i2++) {
			es.p[i1].e[i2].shape = flashy.es[preset_select].p[i1].e[i2].shape;
80002318:	e6 06 00 06 	add	r6,r3,r6
			es.p[i1].e[i2].x = flashy.es[preset_select].p[i1].e[i2].x;
			es.p[i1].e[i2].y = flashy.es[preset_select].p[i1].e[i2].y;
			es.p[i1].e[i2].interval = flashy.es[preset_select].p[i1].e[i2].interval;
8000231c:	ec ce ff 94 	sub	lr,r6,-108
80002320:	bc a0       	st.b	lr[0x2],r0
80002322:	0f 80       	ld.ub	r0,r7[0x0]
		es.p[i1].total_time = flashy.es[preset_select].p[i1].total_time;
		es.p[i1].loop = flashy.es[preset_select].p[i1].loop;
		es.p[i1].x = flashy.es[preset_select].p[i1].x;
		es.p[i1].y = flashy.es[preset_select].p[i1].y;

		for(i2=0;i2<128;i2++) {
80002324:	0f 97       	ld.ub	r7,r7[0x1]
80002326:	bc 80       	st.b	lr[0x0],r0
80002328:	bc 97       	st.b	lr[0x1],r7
8000232a:	eb 0e 00 b4 	ld.sh	lr,r5[180]
8000232e:	ed 5e 00 70 	st.h	r6[112],lr
80002332:	2f fa       	sub	r10,-1
80002334:	5c 5a       	castu.b	r10
80002336:	e4 0a 18 00 	cp.b	r10,r2
8000233a:	ce 31       	brne	80002300 <flash_read+0xd8>
			es.cv[i1][i2] = flashy.es[preset_select].cv[i1][i2];
			es.slew[i1][i2] = flashy.es[preset_select].slew[i1][i2];;
		}
	}

	for(i1=0;i1<16;i1++) {
8000233c:	2f fb       	sub	r11,-1
8000233e:	f8 cc fc f8 	sub	r12,r12,-776
			es.p[i1].e[i2].x = flashy.es[preset_select].p[i1].e[i2].x;
			es.p[i1].e[i2].y = flashy.es[preset_select].p[i1].e[i2].y;
			es.p[i1].e[i2].interval = flashy.es[preset_select].p[i1].e[i2].interval;
		}
	}
}
80002342:	f0 c8 fc f8 	sub	r8,r8,-776
80002346:	f2 c9 fc f8 	sub	r9,r9,-776
8000234a:	59 0b       	cp.w	r11,16
8000234c:	cc 81       	brne	800022dc <flash_read+0xb4>
8000234e:	2f fd       	sub	sp,-4
80002350:	d8 32       	popm	r0-r7,pc
80002352:	d7 03       	nop
80002354:	80 02       	ld.sh	r2,r0[0x0]
	...

80002358 <handler_ClockNormal>:
80002358:	d4 01       	pushm	lr
8000235a:	fe cc 93 2a 	sub	r12,pc,-27862
8000235e:	e0 a0 2b 2b 	rcall	800079b4 <print_dbg>


static void handler_ClockNormal(s32 data) {
	print_dbg("\r\nclock norm int");
	// clock_external = !gpio_get_pin_value(B09); 
}
80002362:	d8 02       	popm	pc

80002364 <rec_stop>:
80002364:	d4 31       	pushm	r0-r7,lr
80002366:	e0 68 3d 74 	mov	r8,15732
8000236a:	e0 69 3c 4e 	mov	r9,15438
	u8 i;

	// print_dbg("\r\nstopped rec");

	// set final length
	if(rec_timer) es.p[p_select].e[rec_position-1].interval = rec_timer-1;
8000236e:	90 0b       	ld.sh	r11,r8[0x0]
80002370:	e0 6a 3c 62 	mov	r10,15458
80002374:	e0 68 0b 58 	mov	r8,2904
80002378:	58 0b       	cp.w	r11,0
8000237a:	c1 10       	breq	8000239c <rec_stop+0x38>
8000237c:	15 8c       	ld.ub	r12,r10[0x0]
8000237e:	13 89       	ld.ub	r9,r9[0x0]
80002380:	20 1b       	sub	r11,1
80002382:	20 19       	sub	r9,1
80002384:	e0 6a 03 08 	mov	r10,776
80002388:	f2 09 00 19 	add	r9,r9,r9<<0x1
8000238c:	f8 0a 02 4a 	mul	r10,r12,r10
80002390:	f4 09 00 19 	add	r9,r10,r9<<0x1
	else es.p[p_select].e[rec_position-1].interval = 1;
80002394:	12 08       	add	r8,r9
80002396:	f1 5b 00 70 	st.h	r8[112],r11
8000239a:	c1 08       	rjmp	800023ba <rec_stop+0x56>
8000239c:	15 8b       	ld.ub	r11,r10[0x0]
8000239e:	13 89       	ld.ub	r9,r9[0x0]
800023a0:	e0 6a 03 08 	mov	r10,776
800023a4:	20 19       	sub	r9,1
800023a6:	f6 0a 02 4a 	mul	r10,r11,r10
800023aa:	f2 09 00 19 	add	r9,r9,r9<<0x1
800023ae:	f4 09 00 19 	add	r9,r10,r9<<0x1

	es.p[p_select].length = rec_position;

	es.p[p_select].total_time = 0;
800023b2:	12 08       	add	r8,r9

	// set final length
	if(rec_timer) es.p[p_select].e[rec_position-1].interval = rec_timer-1;
	else es.p[p_select].e[rec_position-1].interval = 1;

	es.p[p_select].length = rec_position;
800023b4:	30 19       	mov	r9,1
800023b6:	f1 59 00 70 	st.h	r8[112],r9
800023ba:	30 08       	mov	r8,0
800023bc:	e0 64 3c 62 	mov	r4,15458
800023c0:	e0 66 0b 58 	mov	r6,2904
800023c4:	09 89       	ld.ub	r9,r4[0x0]
800023c6:	e0 65 03 08 	mov	r5,776
800023ca:	e0 62 3c 4e 	mov	r2,15438

	es.p[p_select].total_time = 0;
800023ce:	ab 39       	mul	r9,r5

	es.p[p_select].x = 0;
800023d0:	05 8b       	ld.ub	r11,r2[0x0]
800023d2:	ec 09 00 09 	add	r9,r6,r9
	es.p[p_select].y = 0;
800023d6:	f2 ca fc 94 	sub	r10,r9,-876

	for(i=0;i<rec_position;i++) {
800023da:	b4 8b       	st.b	r10[0x0],r11
		es.p[p_select].total_time += es.p[p_select].e[i].interval;
800023dc:	b4 18       	st.h	r10[0x2],r8
800023de:	f2 c9 fc 90 	sub	r9,r9,-880
800023e2:	30 07       	mov	r7,0
800023e4:	b2 a8       	st.b	r9[0x2],r8
800023e6:	b2 98       	st.b	r9[0x1],r8
800023e8:	c4 f8       	rjmp	80002486 <rec_stop+0x122>
800023ea:	09 88       	ld.ub	r8,r4[0x0]
800023ec:	ab 38       	mul	r8,r5
800023ee:	e6 08 00 09 	add	r9,r3,r8
800023f2:	ec 09 00 09 	add	r9,r6,r9
800023f6:	ec 08 00 08 	add	r8,r6,r8
800023fa:	f3 0a 00 70 	ld.sh	r10,r9[112]

		print_dbg("\r\n");
800023fe:	f0 c8 fc 94 	sub	r8,r8,-876
		print_dbg_ulong(i);
80002402:	90 19       	ld.sh	r9,r8[0x2]
80002404:	f4 09 00 09 	add	r9,r10,r9
		print_dbg(" : ");
80002408:	b0 19       	st.h	r8[0x2],r9
8000240a:	e0 a0 2a d5 	rcall	800079b4 <print_dbg>
		print_dbg_ulong(es.p[p_select].e[i].shape);
8000240e:	0e 9c       	mov	r12,r7
80002410:	e0 a0 2a cc 	rcall	800079a8 <print_dbg_ulong>
80002414:	fe cc 93 cc 	sub	r12,pc,-27700
80002418:	e0 a0 2a ce 	rcall	800079b4 <print_dbg>
8000241c:	09 88       	ld.ub	r8,r4[0x0]
8000241e:	ab 38       	mul	r8,r5
		print_dbg(" @ (");
80002420:	e6 08 00 08 	add	r8,r3,r8
80002424:	ec 08 00 08 	add	r8,r6,r8
		print_dbg_ulong(es.p[p_select].e[i].x);
80002428:	f1 3c 00 6c 	ld.ub	r12,r8[108]
8000242c:	e0 a0 2a be 	rcall	800079a8 <print_dbg_ulong>
80002430:	fe cc 93 e4 	sub	r12,pc,-27676
80002434:	e0 a0 2a c0 	rcall	800079b4 <print_dbg>
80002438:	09 88       	ld.ub	r8,r4[0x0]
		print_dbg(", ");
8000243a:	ab 38       	mul	r8,r5
8000243c:	e6 08 00 08 	add	r8,r3,r8
		print_dbg_ulong(es.p[p_select].e[i].y);
80002440:	ec 08 00 08 	add	r8,r6,r8
80002444:	f1 3c 00 6d 	ld.ub	r12,r8[109]
80002448:	e0 a0 2a b0 	rcall	800079a8 <print_dbg_ulong>
8000244c:	fe cc 93 f8 	sub	r12,pc,-27656
80002450:	e0 a0 2a b2 	rcall	800079b4 <print_dbg>
		print_dbg(") + ");
80002454:	09 88       	ld.ub	r8,r4[0x0]
80002456:	ab 38       	mul	r8,r5
80002458:	e6 08 00 08 	add	r8,r3,r8
		print_dbg_ulong(es.p[p_select].e[i].interval);
8000245c:	ec 08 00 08 	add	r8,r6,r8
80002460:	f1 3c 00 6e 	ld.ub	r12,r8[110]
80002464:	e0 a0 2a a2 	rcall	800079a8 <print_dbg_ulong>
80002468:	fe cc 94 10 	sub	r12,pc,-27632
	es.p[p_select].total_time = 0;

	es.p[p_select].x = 0;
	es.p[p_select].y = 0;

	for(i=0;i<rec_position;i++) {
8000246c:	e0 a0 2a a4 	rcall	800079b4 <print_dbg>
		es.p[p_select].total_time += es.p[p_select].e[i].interval;
80002470:	09 88       	ld.ub	r8,r4[0x0]
80002472:	f0 05 03 43 	mac	r3,r8,r5
80002476:	ec 03 00 03 	add	r3,r6,r3
	es.p[p_select].total_time = 0;

	es.p[p_select].x = 0;
	es.p[p_select].y = 0;

	for(i=0;i<rec_position;i++) {
8000247a:	e7 1c 00 70 	ld.uh	r12,r3[112]
8000247e:	e0 a0 2a 95 	rcall	800079a8 <print_dbg_ulong>
	}

	// print_dbg("\r\ntotal time: ");
	// print_dbg_ulong(es.p[p_select].total_time);

	r_status = rOff;
80002482:	2f f7       	sub	r7,-1
80002484:	5c 57       	castu.b	r7
80002486:	ee 07 00 13 	add	r3,r7,r7<<0x1
}
8000248a:	fe cc 94 46 	sub	r12,pc,-27578
8000248e:	a1 73       	lsl	r3,0x1
80002490:	05 88       	ld.ub	r8,r2[0x0]
80002492:	ee 08 18 00 	cp.b	r8,r7
80002496:	fe 9b ff aa 	brhi	800023ea <rec_stop+0x86>
8000249a:	30 09       	mov	r9,0
8000249c:	e0 68 3d 78 	mov	r8,15736
800024a0:	91 09       	st.w	r8[0x0],r9
800024a2:	d8 32       	popm	r0-r7,pc

800024a4 <rec>:
800024a4:	d4 21       	pushm	r4-r7,lr
800024a6:	e0 67 3d 78 	mov	r7,15736
800024aa:	e0 6e 3c 62 	mov	lr,15458
800024ae:	6e 05       	ld.w	r5,r7[0x0]
800024b0:	e0 69 0b 58 	mov	r9,2904
800024b4:	e0 68 3c 4e 	mov	r8,15438
800024b8:	e0 66 3d 74 	mov	r6,15732

void rec(u8 shape, u8 x, u8 y) {
	if(r_status == rArm) {
 		es.p[p_select].e[0].shape = shape;
800024bc:	58 15       	cp.w	r5,1
800024be:	c1 01       	brne	800024de <rec+0x3a>
800024c0:	b0 85       	st.b	r8[0x0],r5

	r_status = rArm;
}

void rec_start() {
	rec_timer = 0;
800024c2:	e0 68 03 08 	mov	r8,776

void rec(u8 shape, u8 x, u8 y) {
	if(r_status == rArm) {
 		es.p[p_select].e[0].shape = shape;
		es.p[p_select].e[0].x = x;
		es.p[p_select].e[0].y = y;
800024c6:	1d 8e       	ld.ub	lr,lr[0x0]
	r_status = rOff;
}

void rec(u8 shape, u8 x, u8 y) {
	if(r_status == rArm) {
 		es.p[p_select].e[0].shape = shape;
800024c8:	fc 08 03 49 	mac	r9,lr,r8

	r_status = rArm;
}

void rec_start() {
	rec_timer = 0;
800024cc:	30 08       	mov	r8,0
	r_status = rRec;
800024ce:	29 49       	sub	r9,-108
800024d0:	b2 aa       	st.b	r9[0x2],r10
800024d2:	b2 8c       	st.b	r9[0x0],r12
		es.p[p_select].e[0].y = y;
		rec_position = 1;
		rec_start();
	}
	else {
		es.p[p_select].e[rec_position].shape = shape;
800024d4:	b2 9b       	st.b	r9[0x1],r11
800024d6:	ac 08       	st.h	r6[0x0],r8
800024d8:	30 28       	mov	r8,2
800024da:	8f 08       	st.w	r7[0x0],r8
800024dc:	d8 22       	popm	r4-r7,pc
800024de:	11 88       	ld.ub	r8,r8[0x0]
800024e0:	1d 85       	ld.ub	r5,lr[0x0]
800024e2:	f0 08 00 17 	add	r7,r8,r8<<0x1
800024e6:	e0 6e 03 08 	mov	lr,776
800024ea:	ea 0e 02 4e 	mul	lr,r5,lr
		es.p[p_select].e[rec_position].x = x;
		es.p[p_select].e[rec_position].y = y;
800024ee:	fc 07 00 17 	add	r7,lr,r7<<0x1
		rec_position = 1;
		rec_start();
	}
	else {
		es.p[p_select].e[rec_position].shape = shape;
		es.p[p_select].e[rec_position].x = x;
800024f2:	f2 07 00 07 	add	r7,r9,r7
800024f6:	29 47       	sub	r7,-108
		es.p[p_select].e[rec_position].y = y;
		if(rec_timer) es.p[p_select].e[rec_position-1].interval = rec_timer-1;
800024f8:	ae aa       	st.b	r7[0x2],r10
800024fa:	ae 8c       	st.b	r7[0x0],r12
800024fc:	ae 9b       	st.b	r7[0x1],r11
800024fe:	f0 ca 00 01 	sub	r10,r8,1
80002502:	8c 0b       	ld.sh	r11,r6[0x0]
80002504:	58 0b       	cp.w	r11,0
80002506:	c0 a0       	breq	8000251a <rec+0x76>
80002508:	f4 0a 00 1a 	add	r10,r10,r10<<0x1
8000250c:	20 1b       	sub	r11,1
8000250e:	fc 0a 00 1e 	add	lr,lr,r10<<0x1
		else es.p[p_select].e[rec_position-1].interval = 1;
80002512:	1c 09       	add	r9,lr
80002514:	f3 5b 00 70 	st.h	r9[112],r11
80002518:	c0 98       	rjmp	8000252a <rec+0x86>
8000251a:	f4 0a 00 1a 	add	r10,r10,r10<<0x1
8000251e:	fc 0a 00 1e 	add	lr,lr,r10<<0x1
		
		rec_position++;
80002522:	30 1a       	mov	r10,1
		rec_timer = 0;
80002524:	1c 09       	add	r9,lr
		es.p[p_select].e[rec_position].x = x;
		es.p[p_select].e[rec_position].y = y;
		if(rec_timer) es.p[p_select].e[rec_position-1].interval = rec_timer-1;
		else es.p[p_select].e[rec_position-1].interval = 1;
		
		rec_position++;
80002526:	f3 5a 00 70 	st.h	r9[112],r10
		rec_timer = 0;
8000252a:	e0 69 3c 4e 	mov	r9,15438
		if(rec_position == EVENTS_PER_PATTERN)
8000252e:	2f f8       	sub	r8,-1
80002530:	30 0a       	mov	r10,0
80002532:	b2 88       	st.b	r9[0x0],r8
			rec_stop();
80002534:	e0 69 3d 74 	mov	r9,15732
80002538:	b2 0a       	st.h	r9[0x0],r10
8000253a:	38 09       	mov	r9,-128
8000253c:	f2 08 18 00 	cp.b	r8,r9
80002540:	c0 21       	brne	80002544 <rec+0xa0>
80002542:	c1 1f       	rcall	80002364 <rec_stop>
80002544:	d8 22       	popm	r4-r7,pc
80002546:	d7 03       	nop

80002548 <stop>:
80002548:	d4 21       	pushm	r4-r7,lr
8000254a:	e0 68 3d 81 	mov	r8,15745
8000254e:	30 09       	mov	r9,0
80002550:	b0 89       	st.b	r8[0x0],r9
80002552:	e0 68 0b 58 	mov	r8,2904
	// print_dbg("\r\nPLAY");
}

void stop() {
	p_playing = 0;
	if(es.edge == eStandard) {
80002556:	70 07       	ld.w	r7,r8[0x0]
		gpio_clr_gpio_pin(B00);
80002558:	58 07       	cp.w	r7,0
8000255a:	c0 71       	brne	80002568 <stop+0x20>
8000255c:	32 0c       	mov	r12,32
		edge_state = 0;
8000255e:	e0 a0 1d 9e 	rcall	8000609a <gpio_clr_gpio_pin>
80002562:	e0 68 3c 44 	mov	r8,15428
80002566:	b0 07       	st.h	r8[0x0],r7
80002568:	d8 22       	popm	r4-r7,pc
8000256a:	d7 03       	nop

8000256c <rec_arm>:
8000256c:	d4 01       	pushm	lr
8000256e:	ce df       	rcall	80002548 <stop>
80002570:	30 19       	mov	r9,1
80002572:	e0 68 3d 78 	mov	r8,15736

void rec_arm() {
	stop();
	// print_dbg("\r\narm");

	r_status = rArm;
80002576:	91 09       	st.w	r8[0x0],r9
}
80002578:	d8 02       	popm	pc
8000257a:	d7 03       	nop

8000257c <flash_unfresh>:
8000257c:	d4 01       	pushm	lr
8000257e:	30 19       	mov	r9,1
80002580:	30 4a       	mov	r10,4
80002582:	32 2b       	mov	r11,34
  // flashc_memset((void *)nvram_data, 0x00, 8, sizeof(*nvram_data), true);
}

// write fresh status
void flash_unfresh(void) {
  flashc_memset8((void*)&(flashy.fresh), FIRSTRUN_KEY, 4, true);
80002584:	48 2c       	lddpc	r12,8000258c <flash_unfresh+0x10>
80002586:	e0 a0 1c cb 	rcall	80005f1c <flashc_memset8>
}
8000258a:	d8 02       	popm	pc
8000258c:	80 02       	ld.sh	r2,r0[0x0]
	...

80002590 <flash_write>:
80002590:	d4 21       	pushm	r4-r7,lr
80002592:	e0 6e 3d 7d 	mov	lr,15741

void flash_write(void) {
	// print_dbg("\r write preset ");
	// print_dbg_ulong(preset_select);

	es.shape_on = shape_on;
80002596:	1d 8e       	ld.ub	lr,lr[0x0]
80002598:	e0 68 0b 58 	mov	r8,2904
	es.p_select = p_select;
8000259c:	b0 fe       	st.b	r8[0x7],lr
8000259e:	e0 6e 3c 62 	mov	lr,15458
	es.arp = arp;
800025a2:	1d 8e       	ld.ub	lr,lr[0x0]
	es.port_time = port_time;

	flashc_memcpy((void *)&flashy.es[preset_select], &es, sizeof(es), true);
800025a4:	b0 ee       	st.b	r8[0x6],lr
800025a6:	e0 6e 0b 33 	mov	lr,2867
800025aa:	1d 8e       	ld.ub	lr,lr[0x0]
	// print_dbg("\r write preset ");
	// print_dbg_ulong(preset_select);

	es.shape_on = shape_on;
	es.p_select = p_select;
	es.arp = arp;
800025ac:	49 57       	lddpc	r7,80002600 <flash_write+0x70>
800025ae:	10 9b       	mov	r11,r8
	es.port_time = port_time;
800025b0:	e0 69 30 ec 	mov	r9,12524
800025b4:	f1 6e 00 08 	st.b	r8[8],lr

	flashc_memcpy((void *)&flashy.es[preset_select], &es, sizeof(es), true);
800025b8:	e0 6e 3d 94 	mov	lr,15764
800025bc:	9c 0e       	ld.sh	lr,lr[0x0]
800025be:	b0 5e       	st.h	r8[0xa],lr
800025c0:	ee c8 ff bc 	sub	r8,r7,-68
800025c4:	e0 66 0b 2c 	mov	r6,2860
800025c8:	12 9a       	mov	r10,r9
800025ca:	0d 8c       	ld.ub	r12,r6[0x0]
	flashc_memcpy((void *)&flashy.glyph[preset_select], &glyph, sizeof(glyph), true);
800025cc:	b3 3c       	mul	r12,r9
800025ce:	30 19       	mov	r9,1
800025d0:	f0 0c 00 0c 	add	r12,r8,r12
800025d4:	e0 a0 1c aa 	rcall	80005f28 <flashc_memcpy>
800025d8:	ee c8 ff fe 	sub	r8,r7,-2
800025dc:	0d 8c       	ld.ub	r12,r6[0x0]
800025de:	30 19       	mov	r9,1
	flashc_memset8((void*)&(flashy.preset_select), preset_select, 1, true);
800025e0:	30 8a       	mov	r10,8
800025e2:	e0 6b 3c 64 	mov	r11,15460
800025e6:	f0 0c 00 3c 	add	r12,r8,r12<<0x3
800025ea:	e0 a0 1c 9f 	rcall	80005f28 <flashc_memcpy>
}
800025ee:	30 19       	mov	r9,1
800025f0:	0d 8b       	ld.ub	r11,r6[0x0]
800025f2:	ee cc ff ff 	sub	r12,r7,-1
800025f6:	12 9a       	mov	r10,r9
800025f8:	e0 a0 1c 92 	rcall	80005f1c <flashc_memset8>
800025fc:	d8 22       	popm	r4-r7,pc
800025fe:	d7 03       	nop
80002600:	80 02       	ld.sh	r2,r0[0x0]
	...

80002604 <handler_SaveFlash>:
80002604:	d4 01       	pushm	lr
80002606:	cc 5f       	rcall	80002590 <flash_write>
80002608:	d8 02       	popm	pc
8000260a:	d7 03       	nop

8000260c <cvTimer_callback>:
8000260c:	d4 21       	pushm	r4-r7,lr
8000260e:	e0 69 0b 36 	mov	r9,2870
80002612:	e0 68 07 90 	mov	r8,1936
80002616:	f2 ca ff fa 	sub	r10,r9,-6
static softTimer_t adcTimer = { .next = NULL, .prev = NULL };
static softTimer_t monomePollTimer = { .next = NULL, .prev = NULL };
static softTimer_t monomeRefreshTimer  = { .next = NULL, .prev = NULL };


static void cvTimer_callback(void* o) { 
8000261a:	11 88       	ld.ub	r8,r8[0x0]
	u8 i;

	for(i=0;i<4;i++)
		if(aout[i].now != aout[i].target) {
8000261c:	f2 c7 ff e0 	sub	r7,r9,-32
			aout[i].now += (aout[i].target - aout[i].now) / aout[i].step;
			aout[i].step--;
			monomeFrameDirty++;
80002620:	92 0b       	ld.sh	r11,r9[0x0]
80002622:	92 9c       	ld.uh	r12,r9[0x2]
static void cvTimer_callback(void* o) { 
	u8 i;

	for(i=0;i<4;i++)
		if(aout[i].now != aout[i].target) {
			aout[i].now += (aout[i].target - aout[i].now) / aout[i].step;
80002624:	f0 ce ff ff 	sub	lr,r8,-1

static void cvTimer_callback(void* o) { 
	u8 i;

	for(i=0;i<4;i++)
		if(aout[i].now != aout[i].target) {
80002628:	f8 0b 01 05 	sub	r5,r12,r11
			aout[i].now += (aout[i].target - aout[i].now) / aout[i].step;
8000262c:	18 3b       	cp.w	r11,r12
8000262e:	c0 c0       	breq	80002646 <cvTimer_callback+0x3a>
80002630:	94 08       	ld.sh	r8,r10[0x0]
80002632:	ea 08 0c 04 	divs	r4,r5,r8
80002636:	e8 0b 00 0b 	add	r11,r4,r11
			aout[i].step--;
			monomeFrameDirty++;
8000263a:	b2 0b       	st.h	r9[0x0],r11
	u8 i;

	for(i=0;i<4;i++)
		if(aout[i].now != aout[i].target) {
			aout[i].now += (aout[i].target - aout[i].now) / aout[i].step;
			aout[i].step--;
8000263c:	f1 de c0 08 	bfextu	r8,lr,0x0,0x8
80002640:	94 0b       	ld.sh	r11,r10[0x0]
			monomeFrameDirty++;
80002642:	20 1b       	sub	r11,1
80002644:	b4 0b       	st.h	r10[0x0],r11


static void cvTimer_callback(void* o) { 
	u8 i;

	for(i=0;i<4;i++)
80002646:	2f 89       	sub	r9,-8
80002648:	2f 8a       	sub	r10,-8
8000264a:	0e 39       	cp.w	r9,r7
			aout[i].now += (aout[i].target - aout[i].now) / aout[i].step;
			aout[i].step--;
			monomeFrameDirty++;
		}

	spi_selectChip(SPI,DAC_SPI);
8000264c:	ce a1       	brne	80002620 <cvTimer_callback+0x14>


static void cvTimer_callback(void* o) { 
	u8 i;

	for(i=0;i<4;i++)
8000264e:	e0 69 07 90 	mov	r9,1936
			aout[i].now += (aout[i].target - aout[i].now) / aout[i].step;
			aout[i].step--;
			monomeFrameDirty++;
		}

	spi_selectChip(SPI,DAC_SPI);
80002652:	30 0b       	mov	r11,0
80002654:	b2 88       	st.b	r9[0x0],r8
80002656:	fe 7c 24 00 	mov	r12,-56320
	spi_write(SPI,0x31);
8000265a:	e0 a0 1e 1b 	rcall	80006290 <spi_selectChip>
8000265e:	33 1b       	mov	r11,49
80002660:	fe 7c 24 00 	mov	r12,-56320
	spi_write(SPI,aout[2].now>>4);
80002664:	e0 a0 1e a5 	rcall	800063ae <spi_write>
80002668:	fe 7c 24 00 	mov	r12,-56320
8000266c:	e0 67 0b 36 	mov	r7,2870
80002670:	ef 0b 00 10 	ld.sh	r11,r7[16]
	spi_write(SPI,aout[2].now<<4);
80002674:	f7 db c0 90 	bfextu	r11,r11,0x4,0x10
80002678:	e0 a0 1e 9b 	rcall	800063ae <spi_write>
8000267c:	ef 0b 00 10 	ld.sh	r11,r7[16]
80002680:	fe 7c 24 00 	mov	r12,-56320
80002684:	a5 6b       	lsl	r11,0x4
	spi_write(SPI,0x31);
80002686:	e2 1b ff f0 	andl	r11,0xfff0,COH
8000268a:	e0 a0 1e 92 	rcall	800063ae <spi_write>
8000268e:	33 1b       	mov	r11,49
	spi_write(SPI,aout[0].now>>4);
80002690:	fe 7c 24 00 	mov	r12,-56320
80002694:	e0 a0 1e 8d 	rcall	800063ae <spi_write>
80002698:	8e 0b       	ld.sh	r11,r7[0x0]
8000269a:	fe 7c 24 00 	mov	r12,-56320
	spi_write(SPI,aout[0].now<<4);
8000269e:	f7 db c0 90 	bfextu	r11,r11,0x4,0x10
800026a2:	e0 a0 1e 86 	rcall	800063ae <spi_write>
800026a6:	8e 0b       	ld.sh	r11,r7[0x0]
800026a8:	fe 7c 24 00 	mov	r12,-56320
800026ac:	a5 6b       	lsl	r11,0x4
	spi_unselectChip(SPI,DAC_SPI);
800026ae:	e2 1b ff f0 	andl	r11,0xfff0,COH
800026b2:	e0 a0 1e 7e 	rcall	800063ae <spi_write>
800026b6:	30 0b       	mov	r11,0

	spi_selectChip(SPI,DAC_SPI);
800026b8:	fe 7c 24 00 	mov	r12,-56320
800026bc:	e0 a0 1e 12 	rcall	800062e0 <spi_unselectChip>
800026c0:	30 0b       	mov	r11,0
	spi_write(SPI,0x38);
800026c2:	fe 7c 24 00 	mov	r12,-56320
800026c6:	e0 a0 1d e5 	rcall	80006290 <spi_selectChip>
800026ca:	33 8b       	mov	r11,56
	spi_write(SPI,aout[3].now>>4);
800026cc:	fe 7c 24 00 	mov	r12,-56320
800026d0:	e0 a0 1e 6f 	rcall	800063ae <spi_write>
800026d4:	ef 0b 00 18 	ld.sh	r11,r7[24]
800026d8:	fe 7c 24 00 	mov	r12,-56320
	spi_write(SPI,aout[3].now<<4);
800026dc:	f7 db c0 90 	bfextu	r11,r11,0x4,0x10
800026e0:	e0 a0 1e 67 	rcall	800063ae <spi_write>
800026e4:	ef 0b 00 18 	ld.sh	r11,r7[24]
800026e8:	fe 7c 24 00 	mov	r12,-56320
800026ec:	a5 6b       	lsl	r11,0x4
	spi_write(SPI,0x38);
800026ee:	e2 1b ff f0 	andl	r11,0xfff0,COH
800026f2:	e0 a0 1e 5e 	rcall	800063ae <spi_write>
800026f6:	33 8b       	mov	r11,56
	spi_write(SPI,aout[1].now>>4);
800026f8:	fe 7c 24 00 	mov	r12,-56320
800026fc:	e0 a0 1e 59 	rcall	800063ae <spi_write>
80002700:	8e 4b       	ld.sh	r11,r7[0x8]
80002702:	fe 7c 24 00 	mov	r12,-56320
	spi_write(SPI,aout[1].now<<4);
80002706:	f7 db c0 90 	bfextu	r11,r11,0x4,0x10
8000270a:	e0 a0 1e 52 	rcall	800063ae <spi_write>
8000270e:	8e 4b       	ld.sh	r11,r7[0x8]
80002710:	fe 7c 24 00 	mov	r12,-56320
80002714:	a5 6b       	lsl	r11,0x4
	spi_unselectChip(SPI,DAC_SPI);
80002716:	e2 1b ff f0 	andl	r11,0xfff0,COH
8000271a:	e0 a0 1e 4a 	rcall	800063ae <spi_write>
8000271e:	30 0b       	mov	r11,0
}
80002720:	fe 7c 24 00 	mov	r12,-56320
80002724:	e0 a0 1d de 	rcall	800062e0 <spi_unselectChip>
80002728:	d8 22       	popm	r4-r7,pc
8000272a:	d7 03       	nop

8000272c <timers_set_monome>:
8000272c:	d4 01       	pushm	lr
8000272e:	30 09       	mov	r9,0
80002730:	fe ca de 64 	sub	r10,pc,-8604
80002734:	31 4b       	mov	r11,20
80002736:	e0 6c 05 64 	mov	r12,1380

// monome: start polling
void timers_set_monome(void) {
	// print_dbg("\r\n setting monome timers");
	timer_add(&monomePollTimer, 20, &monome_poll_timer_callback, NULL );
	timer_add(&monomeRefreshTimer, 30, &monome_refresh_timer_callback, NULL );
8000273a:	e0 a0 18 1f 	rcall	80005778 <timer_add>
8000273e:	30 09       	mov	r9,0
80002740:	fe ca e1 a8 	sub	r10,pc,-7768
80002744:	31 eb       	mov	r11,30
}
80002746:	e0 6c 06 10 	mov	r12,1552
8000274a:	e0 a0 18 17 	rcall	80005778 <timer_add>
8000274e:	d8 02       	popm	pc

80002750 <shape>:
80002750:	d4 31       	pushm	r0-r7,lr
80002752:	e0 68 0b 33 	mov	r8,2867
80002756:	18 97       	mov	r7,r12
80002758:	16 96       	mov	r6,r11
8000275a:	14 94       	mov	r4,r10

	// print_dbg("\r\nfound shape: ");
	// print_dbg_ulong(s);

	// PATTERN PLAY MODE
	if(arp && r_status == rOff && s<5) {
8000275c:	11 85       	ld.ub	r5,r8[0x0]
8000275e:	58 05       	cp.w	r5,0
80002760:	c2 50       	breq	800027aa <shape+0x5a>
80002762:	30 48       	mov	r8,4
80002764:	f0 0c 18 00 	cp.b	r12,r8
80002768:	5f 89       	srls	r9
8000276a:	e0 68 3d 78 	mov	r8,15736
8000276e:	70 08       	ld.w	r8,r8[0x0]
80002770:	58 08       	cp.w	r8,0
80002772:	5f 08       	sreq	r8
80002774:	f3 e8 00 08 	and	r8,r9,r8
		es.p[p_select].x = x - es.p[p_select].e[0].x;
80002778:	c1 90       	breq	800027aa <shape+0x5a>
8000277a:	e0 68 3c 62 	mov	r8,15458
8000277e:	11 89       	ld.ub	r9,r8[0x0]
80002780:	e0 68 03 08 	mov	r8,776
80002784:	f2 08 02 48 	mul	r8,r9,r8
80002788:	e0 69 0b 58 	mov	r9,2904
8000278c:	f2 08 00 08 	add	r8,r9,r8
80002790:	f0 c9 ff 94 	sub	r9,r8,-108
80002794:	13 9a       	ld.ub	r10,r9[0x1]
80002796:	f6 0a 01 0a 	sub	r10,r11,r10
		es.p[p_select].y = y - es.p[p_select].e[0].y;
8000279a:	f0 c8 fc 90 	sub	r8,r8,-880
8000279e:	b0 9a       	st.b	r8[0x1],r10
800027a0:	08 9a       	mov	r10,r4
	}
	else if(s<5) {
800027a2:	13 a9       	ld.ub	r9,r9[0x2]
800027a4:	12 1a       	sub	r10,r9
800027a6:	b0 aa       	st.b	r8[0x2],r10
800027a8:	c6 38       	rjmp	8000286e <shape+0x11e>
800027aa:	30 48       	mov	r8,4
		// cv_pos = SCALES[0][x] + (7-y)*170;
		// cv_pos = SEMI[x+(7-y)*5];
		aout[3].target = SEMI[x+(7-y)*5];
800027ac:	f0 07 18 00 	cp.b	r7,r8
800027b0:	e0 8b 00 1e 	brhi	800027ec <shape+0x9c>
800027b4:	e8 08 11 07 	rsub	r8,r4,7
800027b8:	f0 08 00 28 	add	r8,r8,r8<<0x2
800027bc:	0c 08       	add	r8,r6
800027be:	e0 6a 3c 6c 	mov	r10,15468
800027c2:	fe c9 95 00 	sub	r9,pc,-27392
		// aout[3].target = TONE[x*scale[scale_x]+(7-y)*scale[scale_y]];

		if(port_active) {
800027c6:	f2 08 04 19 	ld.sh	r9,r9[r8<<0x1]
800027ca:	e0 68 0b 36 	mov	r8,2870
			aout[3].step = aout[3].slew >> 2;
800027ce:	f1 59 00 1a 	st.h	r8[26],r9
800027d2:	15 8b       	ld.ub	r11,r10[0x0]
800027d4:	30 0a       	mov	r10,0
800027d6:	f4 0b 18 00 	cp.b	r11,r10
			if(!aout[3].step)
				aout[3].now = aout[3].target;
		}
		else {
			aout[3].now = aout[3].target;
800027da:	c0 70       	breq	800027e8 <shape+0x98>
800027dc:	f1 1a 00 1c 	ld.uh	r10,r8[28]
		}
	}

	if(!arp && r_status == rOff && !port_active) {
800027e0:	a3 8a       	lsr	r10,0x2
800027e2:	f1 5a 00 1e 	st.h	r8[30],r10
800027e6:	c0 31       	brne	800027ec <shape+0x9c>
800027e8:	f1 59 00 18 	st.h	r8[24],r9
800027ec:	58 05       	cp.w	r5,0
800027ee:	c4 01       	brne	8000286e <shape+0x11e>
800027f0:	e0 68 3d 78 	mov	r8,15736

		spi_selectChip(SPI,DAC_SPI);
800027f4:	70 08       	ld.w	r8,r8[0x0]
800027f6:	58 08       	cp.w	r8,0
800027f8:	c3 b1       	brne	8000286e <shape+0x11e>
800027fa:	e0 68 3c 6c 	mov	r8,15468

		spi_write(SPI,0x38);	// update B
800027fe:	11 89       	ld.ub	r9,r8[0x0]
80002800:	ea 09 18 00 	cp.b	r9,r5
80002804:	c3 51       	brne	8000286e <shape+0x11e>
80002806:	0a 9b       	mov	r11,r5
		spi_write(SPI,aout[3].now>>4);
80002808:	fe 7c 24 00 	mov	r12,-56320
8000280c:	e0 a0 1d 42 	rcall	80006290 <spi_selectChip>
80002810:	33 8b       	mov	r11,56
80002812:	fe 7c 24 00 	mov	r12,-56320
80002816:	e0 a0 1d cc 	rcall	800063ae <spi_write>
		spi_write(SPI,aout[3].now<<4);
8000281a:	e0 63 0b 36 	mov	r3,2870
8000281e:	fe 7c 24 00 	mov	r12,-56320
80002822:	e7 0b 00 18 	ld.sh	r11,r3[24]
80002826:	f7 db c0 90 	bfextu	r11,r11,0x4,0x10
8000282a:	e0 a0 1d c2 	rcall	800063ae <spi_write>

		spi_write(SPI,0x80);	// update B
8000282e:	e7 0b 00 18 	ld.sh	r11,r3[24]
80002832:	fe 7c 24 00 	mov	r12,-56320
80002836:	a5 6b       	lsl	r11,0x4
		spi_write(SPI,0xff);
80002838:	e2 1b ff f0 	andl	r11,0xfff0,COH
8000283c:	e0 a0 1d b9 	rcall	800063ae <spi_write>
80002840:	e0 6b 00 80 	mov	r11,128
		spi_write(SPI,0xff);
80002844:	fe 7c 24 00 	mov	r12,-56320
80002848:	e0 a0 1d b3 	rcall	800063ae <spi_write>
8000284c:	e0 6b 00 ff 	mov	r11,255

		spi_unselectChip(SPI,DAC_SPI);
80002850:	fe 7c 24 00 	mov	r12,-56320
80002854:	e0 a0 1d ad 	rcall	800063ae <spi_write>
80002858:	e0 6b 00 ff 	mov	r11,255
	}

	if(s == 0)
8000285c:	fe 7c 24 00 	mov	r12,-56320
		singled = 1;
80002860:	e0 a0 1d a7 	rcall	800063ae <spi_write>
80002864:	0a 9b       	mov	r11,r5
80002866:	fe 7c 24 00 	mov	r12,-56320
8000286a:	e0 a0 1d 3b 	rcall	800062e0 <spi_unselectChip>
8000286e:	58 07       	cp.w	r7,0
80002870:	c0 41       	brne	80002878 <shape+0x128>
80002872:	30 19       	mov	r9,1
80002874:	c4 a8       	rjmp	80002908 <shape+0x1b8>
80002876:	d7 03       	nop
80002878:	e0 6b 3d 7d 	mov	r11,15741
8000287c:	ee c8 00 01 	sub	r8,r7,1
80002880:	17 89       	ld.ub	r9,r11[0x0]
80002882:	10 39       	cp.w	r9,r8
80002884:	c4 10       	breq	80002906 <shape+0x1b6>
80002886:	e0 69 0b 36 	mov	r9,2870
8000288a:	0e 9a       	mov	r10,r7
	else {
		if(shape_on != (s-1)) {
8000288c:	12 98       	mov	r8,r9
8000288e:	20 1a       	sub	r10,1
80002890:	2f c9       	sub	r9,-4
80002892:	5c 5a       	castu.b	r10
80002894:	f0 c3 ff e8 	sub	r3,r8,-24
			shape_on = s-1;
80002898:	b6 8a       	st.b	r11[0x0],r10
8000289a:	e0 65 0f 9f 	mov	r5,3999
8000289e:	f4 0a 00 1a 	add	r10,r10,r10<<0x1
800028a2:	e0 6b 0b 58 	mov	r11,2904
	}
}



static void shape(u8 s, u8 x, u8 y) {
800028a6:	a1 7a       	lsl	r10,0x1

	if(s == 0)
		singled = 1;
	else {
		if(shape_on != (s-1)) {
			shape_on = s-1;
800028a8:	fe cc 97 e6 	sub	r12,pc,-26650

			for(i=0;i<3;i++) {
				// don't change CV if above thresh
				if(es.slew[shape_on][i] < SLEW_CV_OFF_THRESH) {
800028ac:	2c 4a       	sub	r10,-60

	if(s == 0)
		singled = 1;
	else {
		if(shape_on != (s-1)) {
			shape_on = s-1;
800028ae:	16 0a       	add	r10,r11
800028b0:	94 0b       	ld.sh	r11,r10[0x0]
800028b2:	fd db c0 8c 	bfextu	lr,r11,0x4,0xc
				if(es.slew[shape_on][i] < SLEW_CV_OFF_THRESH) {
					aout[i].target = es.cv[shape_on][i];
				}

				aout[i].slew = es.slew[shape_on][i];
				aout[i].step = EXP[aout[i].slew >> 4];
800028b6:	ea 0b 19 00 	cp.h	r11,r5

	if(s == 0)
		singled = 1;
	else {
		if(shape_on != (s-1)) {
			shape_on = s-1;
800028ba:	e0 8b 00 05 	brhi	800028c4 <shape+0x174>
				if(es.slew[shape_on][i] < SLEW_CV_OFF_THRESH) {
					aout[i].target = es.cv[shape_on][i];
				}

				aout[i].slew = es.slew[shape_on][i];
				aout[i].step = EXP[aout[i].slew >> 4];
800028be:	f5 02 ff d0 	ld.sh	r2,r10[-48]
		if(shape_on != (s-1)) {
			shape_on = s-1;

			for(i=0;i<3;i++) {
				// don't change CV if above thresh
				if(es.slew[shape_on][i] < SLEW_CV_OFF_THRESH) {
800028c2:	b0 12       	st.h	r8[0x2],r2
800028c4:	b2 0b       	st.h	r9[0x0],r11
800028c6:	f8 0e 04 1b 	ld.sh	r11,r12[lr<<0x1]
					aout[i].target = es.cv[shape_on][i];
800028ca:	b2 1b       	st.h	r9[0x2],r11
800028cc:	58 0b       	cp.w	r11,0
800028ce:	c0 31       	brne	800028d4 <shape+0x184>
				}

				aout[i].slew = es.slew[shape_on][i];
800028d0:	90 1b       	ld.sh	r11,r8[0x2]
				aout[i].step = EXP[aout[i].slew >> 4];
800028d2:	b0 0b       	st.h	r8[0x0],r11
800028d4:	2f ea       	sub	r10,-2
800028d6:	2f 89       	sub	r9,-8
				if(!aout[i].step) 
800028d8:	2f 88       	sub	r8,-8
800028da:	06 38       	cp.w	r8,r3
					aout[i].now = aout[i].target;
800028dc:	ce a1       	brne	800028b0 <shape+0x160>
800028de:	e0 68 3d 84 	mov	r8,15748
800028e2:	30 09       	mov	r9,0
800028e4:	e0 6a 3c 50 	mov	r10,15440
		singled = 1;
	else {
		if(shape_on != (s-1)) {
			shape_on = s-1;

			for(i=0;i<3;i++) {
800028e8:	f1 69 00 0a 	st.b	r8[10],r9

void reset_hys() {
	u8 i1;

	for(i1=0;i1<3;i1++) {
		ain[i1].hys = 0;
800028ec:	b0 a9       	st.b	r8[0x2],r9
		ain[i1].latch = adc_last[i1] = adc[i1];
800028ee:	b0 e9       	st.b	r8[0x6],r9

void reset_hys() {
	u8 i1;

	for(i1=0;i1<3;i1++) {
		ain[i1].hys = 0;
800028f0:	94 2b       	ld.sh	r11,r10[0x4]
800028f2:	b0 4b       	st.h	r8[0x8],r11
800028f4:	e0 69 3c 58 	mov	r9,15448
		ain[i1].latch = adc_last[i1] = adc[i1];
800028f8:	b2 2b       	st.h	r9[0x4],r11
800028fa:	94 0b       	ld.sh	r11,r10[0x0]
800028fc:	b0 0b       	st.h	r8[0x0],r11
800028fe:	b2 0b       	st.h	r9[0x0],r11
80002900:	94 1a       	ld.sh	r10,r10[0x2]
80002902:	b0 2a       	st.h	r8[0x4],r10
80002904:	b2 1a       	st.h	r9[0x2],r10
80002906:	30 09       	mov	r9,0
80002908:	e0 68 3d 80 	mov	r8,15744
			}

			reset_hys();
		}

		singled = 0;
8000290c:	b0 89       	st.b	r8[0x0],r9
8000290e:	e0 65 0b 58 	mov	r5,2904
	}

	if(es.edge == eDrone) {
80002912:	6a 08       	ld.w	r8,r5[0x0]
80002914:	58 28       	cp.w	r8,2
80002916:	c2 11       	brne	80002958 <shape+0x208>
80002918:	e0 68 0b 2f 	mov	r8,2863
		if(root_x == x && root_y == y && edge_state) {
8000291c:	11 88       	ld.ub	r8,r8[0x0]
8000291e:	ec 08 18 00 	cp.b	r8,r6
80002922:	c1 31       	brne	80002948 <shape+0x1f8>
80002924:	e0 68 3d 7c 	mov	r8,15740
80002928:	11 88       	ld.ub	r8,r8[0x0]
8000292a:	e8 08 18 00 	cp.b	r8,r4
8000292e:	c0 d1       	brne	80002948 <shape+0x1f8>
80002930:	e0 65 3c 44 	mov	r5,15428
80002934:	30 03       	mov	r3,0
80002936:	8a 08       	ld.sh	r8,r5[0x0]
80002938:	e6 08 19 00 	cp.h	r8,r3
			gpio_clr_gpio_pin(B00);
8000293c:	c0 60       	breq	80002948 <shape+0x1f8>
8000293e:	32 0c       	mov	r12,32
			edge_state = 0;
80002940:	e0 a0 1b ad 	rcall	8000609a <gpio_clr_gpio_pin>
		}
		else {
			gpio_set_gpio_pin(B00);
80002944:	aa 03       	st.h	r5[0x0],r3
80002946:	c2 28       	rjmp	8000298a <shape+0x23a>
80002948:	32 0c       	mov	r12,32
			edge_state = 1;
8000294a:	e0 a0 1b 9b 	rcall	80006080 <gpio_set_gpio_pin>
8000294e:	30 19       	mov	r9,1
80002950:	e0 68 3c 44 	mov	r8,15428
80002954:	c1 a8       	rjmp	80002988 <shape+0x238>
80002956:	d7 03       	nop
80002958:	30 48       	mov	r8,4
8000295a:	f0 07 18 00 	cp.b	r7,r8
8000295e:	e0 8b 00 16 	brhi	8000298a <shape+0x23a>
80002962:	32 0c       	mov	r12,32
80002964:	e0 a0 1b 8e 	rcall	80006080 <gpio_set_gpio_pin>
80002968:	e0 68 3c 44 	mov	r8,15428
8000296c:	30 19       	mov	r9,1
8000296e:	b0 09       	st.h	r8[0x0],r9
80002970:	6a 08       	ld.w	r8,r5[0x0]
80002972:	58 18       	cp.w	r8,1
80002974:	c0 b1       	brne	8000298a <shape+0x23a>
80002976:	fe c8 98 b4 	sub	r8,pc,-26444
8000297a:	8a a9       	ld.uh	r9,r5[0x4]
8000297c:	f0 09 05 19 	ld.uh	r9,r8[r9<<0x1]
80002980:	e0 68 0b 22 	mov	r8,2850
		}
	}
	else if(s<5) {
80002984:	a3 89       	lsr	r9,0x2
80002986:	2f e9       	sub	r9,-2
80002988:	b0 09       	st.h	r8[0x0],r9
8000298a:	e0 68 0b 33 	mov	r8,2867
		gpio_set_gpio_pin(B00);
8000298e:	11 89       	ld.ub	r9,r8[0x0]
80002990:	30 08       	mov	r8,0
80002992:	f0 09 18 00 	cp.b	r9,r8
		edge_state = 1;
80002996:	c2 30       	breq	800029dc <shape+0x28c>
80002998:	30 49       	mov	r9,4

		if(es.edge == eFixed) {
8000299a:	f2 07 18 00 	cp.b	r7,r9
8000299e:	5f 8a       	srls	r10
			edge_counter = (EXP[es.edge_fixed_time]>>2) + 2;
800029a0:	e0 69 3d 78 	mov	r9,15736
800029a4:	72 09       	ld.w	r9,r9[0x0]
800029a6:	58 09       	cp.w	r9,0
800029a8:	5f 09       	sreq	r9
800029aa:	f5 e9 00 09 	and	r9,r10,r9
800029ae:	f0 09 18 00 	cp.b	r9,r8
			// print_dbg("\r\ntrig fixed: ");
			// print_dbg_ulong(edge_counter);
		}
	}

	if(arp && r_status == rOff && s<5 && !legato)
800029b2:	c1 50       	breq	800029dc <shape+0x28c>
800029b4:	e0 69 0b 24 	mov	r9,2852
800029b8:	13 89       	ld.ub	r9,r9[0x0]
800029ba:	f0 09 18 00 	cp.b	r9,r8
800029be:	c0 f1       	brne	800029dc <shape+0x28c>
800029c0:	e0 69 3d 72 	mov	r9,15730
800029c4:	30 08       	mov	r8,0
800029c6:	b2 08       	st.h	r9[0x0],r8
800029c8:	e0 69 3d 92 	mov	r9,15762
800029cc:	b2 88       	st.b	r9[0x0],r8
800029ce:	e0 69 3d 98 	mov	r9,15768
800029d2:	b2 08       	st.h	r9[0x0],r8
800029d4:	30 19       	mov	r9,1
800029d6:	e0 68 3d 81 	mov	r8,15745
800029da:	b0 89       	st.b	r8[0x0],r9
800029dc:	e0 68 07 90 	mov	r8,1936
			rec_stop();
	}
}

void play() {
	p_timer = 0;
800029e0:	e0 69 0b 2f 	mov	r9,2863
800029e4:	b2 86       	st.b	r9[0x0],r6
	p_play_pos = 0;
800029e6:	11 89       	ld.ub	r9,r8[0x0]
800029e8:	2f f9       	sub	r9,-1
	p_timer_total = 0;
800029ea:	b0 89       	st.b	r8[0x0],r9
800029ec:	e0 68 3d 7c 	mov	r8,15740
	p_playing = 1;
800029f0:	b0 84       	st.b	r8[0x0],r4
800029f2:	d8 32       	popm	r0-r7,pc

800029f4 <handler_MonomeGridKey>:
		play();

	root_x = x;
	root_y = y;

	monomeFrameDirty++;
800029f4:	d4 31       	pushm	r0-r7,lr
	}

	if(arp && r_status == rOff && s<5 && !legato)
		play();

	root_x = x;
800029f6:	20 2d       	sub	sp,8
800029f8:	fa c9 ff fb 	sub	r9,sp,-5
	root_y = y;

	monomeFrameDirty++;
800029fc:	fa ca ff fa 	sub	r10,sp,-6

	if(arp && r_status == rOff && s<5 && !legato)
		play();

	root_x = x;
	root_y = y;
80002a00:	fa cb ff f9 	sub	r11,sp,-7

	monomeFrameDirty++;
}
80002a04:	e0 a0 11 bc 	rcall	80004d7c <monome_grid_key_parse_event_data>
80002a08:	1b e8       	ld.ub	r8,sp[0x6]
80002a0a:	1b f7       	ld.ub	r7,sp[0x7]
80002a0c:	f0 0a 15 04 	lsl	r10,r8,0x4
80002a10:	0e 9e       	mov	lr,r7
80002a12:	0e 0a       	add	r10,r7
80002a14:	e0 69 3c 60 	mov	r9,15456
80002a18:	5c 5a       	castu.b	r10
80002a1a:	30 0b       	mov	r11,0
80002a1c:	1b dc       	ld.ub	r12,sp[0x5]
80002a1e:	f6 0c 18 00 	cp.b	r12,r11
80002a22:	c0 71       	brne	80002a30 <handler_MonomeGridKey+0x3c>
80002a24:	92 06       	ld.sh	r6,r9[0x0]
80002a26:	30 0b       	mov	r11,0
80002a28:	e0 6c 0a 00 	mov	r12,2560
80002a2c:	16 99       	mov	r9,r11
80002a2e:	c2 c8       	rjmp	80002a86 <handler_MonomeGridKey+0x92>
80002a30:	92 0b       	ld.sh	r11,r9[0x0]
80002a32:	f6 cc ff ff 	sub	r12,r11,-1
80002a36:	b2 0c       	st.h	r9[0x0],r12
80002a38:	e0 69 0a 00 	mov	r9,2560
80002a3c:	f2 0b 0b 0a 	st.b	r9[r11],r10
	//// TRACK LONG PRESSES
	index = y*16 + x;
	if(z) {
		held_keys[key_count] = index;
		key_count++;
		key_times[index] = 10;		//// THRESHOLD key hold time
80002a40:	e0 69 0a 20 	mov	r9,2592
		if(x == 0 && y == 7) key_times[index] = 3;
80002a44:	30 ab       	mov	r11,10
80002a46:	f2 0a 0b 0b 	st.b	r9[r10],r11
80002a4a:	58 07       	cp.w	r7,0
80002a4c:	e0 81 00 a0 	brne	80002b8c <handler_MonomeGridKey+0x198>
80002a50:	30 7b       	mov	r11,7
80002a52:	f6 08 18 00 	cp.b	r8,r11
80002a56:	e0 81 00 9b 	brne	80002b8c <handler_MonomeGridKey+0x198>
	} else {
		found = 0; // "found"
		for(i1 = 0; i1<key_count; i1++) {
80002a5a:	30 38       	mov	r8,3
80002a5c:	f2 0a 0b 08 	st.b	r9[r10],r8
			if(held_keys[i1] == index) 
80002a60:	c9 68       	rjmp	80002b8c <handler_MonomeGridKey+0x198>
80002a62:	f2 c5 ff ff 	sub	r5,r9,-1
80002a66:	f8 09 07 04 	ld.ub	r4,r12[r9]
				found++;
80002a6a:	f4 04 18 00 	cp.b	r4,r10
			if(found) 
80002a6e:	c0 31       	brne	80002a74 <handler_MonomeGridKey+0x80>
				held_keys[i1] = held_keys[i1+1];
80002a70:	2f fb       	sub	r11,-1
80002a72:	5c 5b       	castu.b	r11
80002a74:	58 0b       	cp.w	r11,0
80002a76:	c0 60       	breq	80002a82 <handler_MonomeGridKey+0x8e>
80002a78:	f8 09 00 04 	add	r4,r12,r9
		key_count++;
		key_times[index] = 10;		//// THRESHOLD key hold time
		if(x == 0 && y == 7) key_times[index] = 3;
	} else {
		found = 0; // "found"
		for(i1 = 0; i1<key_count; i1++) {
80002a7c:	09 94       	ld.ub	r4,r4[0x1]
80002a7e:	f8 09 0b 04 	st.b	r12[r9],r4
			if(held_keys[i1] == index) 
				found++;
			if(found) 
				held_keys[i1] = held_keys[i1+1];
		}
		key_count--;
80002a82:	f3 d5 c0 08 	bfextu	r9,r5,0x0,0x8
80002a86:	0c 39       	cp.w	r9,r6
80002a88:	ce d5       	brlt	80002a62 <handler_MonomeGridKey+0x6e>

		if(key_count < 1)
80002a8a:	ec cc 00 01 	sub	r12,r6,1
80002a8e:	e0 69 3c 60 	mov	r9,15456
80002a92:	b2 0c       	st.h	r9[0x0],r12
			key_count = 0;
80002a94:	30 0b       	mov	r11,0

		// FAST PRESS
		if(key_times[index] > 0) {
80002a96:	f6 0c 19 00 	cp.h	r12,r11
80002a9a:	e0 89 00 03 	brgt	80002aa0 <handler_MonomeGridKey+0xac>
80002a9e:	b2 0b       	st.h	r9[0x0],r11
80002aa0:	e0 69 0a 20 	mov	r9,2592

			// PRESET MODE FAST PRESS DETECT
			if(preset_mode == 1) {
80002aa4:	30 06       	mov	r6,0
80002aa6:	f2 0a 07 09 	ld.ub	r9,r9[r10]
80002aaa:	ec 09 18 00 	cp.b	r9,r6
80002aae:	c6 f0       	breq	80002b8c <handler_MonomeGridKey+0x198>
				if(x == 0 && y != preset_select) {
80002ab0:	e0 65 0b 32 	mov	r5,2866
80002ab4:	30 19       	mov	r9,1
80002ab6:	0b 8a       	ld.ub	r10,r5[0x0]
80002ab8:	f2 0a 18 00 	cp.b	r10,r9
80002abc:	c5 b1       	brne	80002b72 <handler_MonomeGridKey+0x17e>
					preset_select = y;
80002abe:	58 07       	cp.w	r7,0
80002ac0:	c5 41       	brne	80002b68 <handler_MonomeGridKey+0x174>
80002ac2:	e0 69 0b 2c 	mov	r9,2860
80002ac6:	13 8a       	ld.ub	r10,r9[0x0]
80002ac8:	f0 0a 18 00 	cp.b	r10,r8
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// application grid code

static void handler_MonomeGridKey(s32 data) { 
80002acc:	c1 20       	breq	80002af0 <handler_MonomeGridKey+0xfc>
			// PRESET MODE FAST PRESS DETECT
			if(preset_mode == 1) {
				if(x == 0 && y != preset_select) {
					preset_select = y;
					for(i1=0;i1<8;i1++)
						glyph[i1] = flashy.glyph[preset_select][i1];
80002ace:	b2 88       	st.b	r9[0x0],r8
80002ad0:	48 79       	lddpc	r9,80002aec <handler_MonomeGridKey+0xf8>

			// PRESET MODE FAST PRESS DETECT
			if(preset_mode == 1) {
				if(x == 0 && y != preset_select) {
					preset_select = y;
					for(i1=0;i1<8;i1++)
80002ad2:	f2 08 00 38 	add	r8,r9,r8<<0x3
80002ad6:	e0 69 3c 64 	mov	r9,15460
80002ada:	2f e8       	sub	r8,-2
80002adc:	f2 ca ff f8 	sub	r10,r9,-8
80002ae0:	11 3b       	ld.ub	r11,r8++
80002ae2:	12 cb       	st.b	r9++,r11
80002ae4:	14 39       	cp.w	r9,r10
80002ae6:	cf d1       	brne	80002ae0 <handler_MonomeGridKey+0xec>
80002ae8:	c4 08       	rjmp	80002b68 <handler_MonomeGridKey+0x174>
80002aea:	d7 03       	nop
80002aec:	80 02       	ld.sh	r2,r0[0x0]
80002aee:	00 00       	add	r0,r0
80002af0:	fe b0 fb 9c 	rcall	80002228 <flash_read>
80002af4:	aa 87       	st.b	r5[0x0],r7
80002af6:	e0 68 0b 36 	mov	r8,2870
						glyph[i1] = flashy.glyph[preset_select][i1];
				}
 				else if(x==0 && y == preset_select) {
					flash_read();
80002afa:	0e 9e       	mov	lr,r7
						aout[i1].target = aout[i1].now = es.cv[shape_on][i1];
						aout[i1].slew = es.slew[shape_on][i1];
						aout[i1].step = 0;
					}

					preset_mode = 0;
80002afc:	f1 5e 00 16 	st.h	r8[22],lr

					reset_hys();
					for(i1=0;i1<3;i1++) {
						aout[i1].target = aout[i1].now = es.cv[shape_on][i1];
						aout[i1].slew = es.slew[shape_on][i1];
						aout[i1].step = 0;
80002b00:	b0 3e       	st.h	r8[0x6],lr
80002b02:	b0 7e       	st.h	r8[0xe],lr
80002b04:	e0 69 3d 84 	mov	r9,15748
80002b08:	e0 6b 3c 50 	mov	r11,15440
void reset_hys() {
	u8 i1;

	for(i1=0;i1<3;i1++) {
		ain[i1].hys = 0;
		ain[i1].latch = adc_last[i1] = adc[i1];
80002b0c:	f3 66 00 0a 	st.b	r9[10],r6

void reset_hys() {
	u8 i1;

	for(i1=0;i1<3;i1++) {
		ain[i1].hys = 0;
80002b10:	b2 a7       	st.b	r9[0x2],r7
80002b12:	b2 e6       	st.b	r9[0x6],r6
80002b14:	96 2c       	ld.sh	r12,r11[0x4]
		ain[i1].latch = adc_last[i1] = adc[i1];
80002b16:	b2 4c       	st.h	r9[0x8],r12
80002b18:	e0 6a 3c 58 	mov	r10,15448
80002b1c:	b4 2c       	st.h	r10[0x4],r12
80002b1e:	96 0c       	ld.sh	r12,r11[0x0]
80002b20:	b2 0c       	st.h	r9[0x0],r12
80002b22:	b4 0c       	st.h	r10[0x0],r12
80002b24:	96 1b       	ld.sh	r11,r11[0x2]
80002b26:	b2 2b       	st.h	r9[0x4],r11
80002b28:	b4 1b       	st.h	r10[0x2],r11
 				else if(x==0 && y == preset_select) {
					flash_read();

					reset_hys();
					for(i1=0;i1<3;i1++) {
						aout[i1].target = aout[i1].now = es.cv[shape_on][i1];
80002b2a:	e0 6a 0b 58 	mov	r10,2904
80002b2e:	e0 69 3d 7d 	mov	r9,15741
80002b32:	13 89       	ld.ub	r9,r9[0x0]
80002b34:	f2 09 00 19 	add	r9,r9,r9<<0x1
						aout[i1].slew = es.slew[shape_on][i1];
80002b38:	f4 09 00 19 	add	r9,r10,r9<<0x1
80002b3c:	f3 0a 00 40 	ld.sh	r10,r9[64]
 				else if(x==0 && y == preset_select) {
					flash_read();

					reset_hys();
					for(i1=0;i1<3;i1++) {
						aout[i1].target = aout[i1].now = es.cv[shape_on][i1];
80002b40:	f1 5a 00 14 	st.h	r8[20],r10
80002b44:	92 6a       	ld.sh	r10,r9[0xc]
80002b46:	b0 1a       	st.h	r8[0x2],r10
80002b48:	b0 0a       	st.h	r8[0x0],r10
80002b4a:	92 7a       	ld.sh	r10,r9[0xe]
80002b4c:	b0 5a       	st.h	r8[0xa],r10
80002b4e:	b0 4a       	st.h	r8[0x8],r10
80002b50:	f3 0a 00 10 	ld.sh	r10,r9[16]
80002b54:	f1 5a 00 12 	st.h	r8[18],r10
						aout[i1].slew = es.slew[shape_on][i1];
80002b58:	f1 5a 00 10 	st.h	r8[16],r10
80002b5c:	f3 0a 00 3c 	ld.sh	r10,r9[60]
80002b60:	b0 2a       	st.h	r8[0x4],r10
80002b62:	f3 09 00 3e 	ld.sh	r9,r9[62]
					}

					preset_mode = 0;
				}

				monomeFrameDirty++;
80002b66:	b0 69       	st.h	r8[0xc],r9
80002b68:	e0 68 07 90 	mov	r8,1936
			}
			else {
				if(x == 0 && y == 7) {
80002b6c:	11 89       	ld.ub	r9,r8[0x0]
80002b6e:	2f f9       	sub	r9,-1
80002b70:	c0 d8       	rjmp	80002b8a <handler_MonomeGridKey+0x196>
80002b72:	58 07       	cp.w	r7,0
80002b74:	c0 c1       	brne	80002b8c <handler_MonomeGridKey+0x198>
80002b76:	30 7a       	mov	r10,7
					if(port_toggle)
80002b78:	f4 08 18 00 	cp.b	r8,r10
80002b7c:	c0 81       	brne	80002b8c <handler_MonomeGridKey+0x198>
80002b7e:	e0 68 3c 4c 	mov	r8,15436
						port_toggle = 1;
80002b82:	11 8a       	ld.ub	r10,r8[0x0]
	// print_dbg("\r\nmin y: ");
	// print_dbg_ulong(min_y);


	// PRESET SCREEN
	if(preset_mode) {
80002b84:	ec 0a 18 00 	cp.b	r10,r6
80002b88:	c0 20       	breq	80002b8c <handler_MonomeGridKey+0x198>
80002b8a:	b0 89       	st.b	r8[0x0],r9
80002b8c:	e0 68 0b 32 	mov	r8,2866
80002b90:	30 0a       	mov	r10,0
		// glyph magic
		if(z && x>7) {
80002b92:	11 8c       	ld.ub	r12,r8[0x0]
80002b94:	1b d8       	ld.ub	r8,sp[0x5]
80002b96:	f4 0c 18 00 	cp.b	r12,r10
80002b9a:	c1 f0       	breq	80002bd8 <handler_MonomeGridKey+0x1e4>
80002b9c:	f4 08 18 00 	cp.b	r8,r10
80002ba0:	e0 80 02 a1 	breq	800030e2 <handler_MonomeGridKey+0x6ee>
80002ba4:	1b f8       	ld.ub	r8,sp[0x7]
			glyph[y] ^= 1<<(x-8);
			monomeFrameDirty++;	
80002ba6:	30 79       	mov	r9,7

	// PRESET SCREEN
	if(preset_mode) {
		// glyph magic
		if(z && x>7) {
			glyph[y] ^= 1<<(x-8);
80002ba8:	f2 08 18 00 	cp.b	r8,r9
			monomeFrameDirty++;	
80002bac:	e0 88 02 9b 	brls	800030e2 <handler_MonomeGridKey+0x6ee>

	// PRESET SCREEN
	if(preset_mode) {
		// glyph magic
		if(z && x>7) {
			glyph[y] ^= 1<<(x-8);
80002bb0:	e0 6a 07 90 	mov	r10,1936
80002bb4:	f0 cc 00 08 	sub	r12,r8,8
			monomeFrameDirty++;	
80002bb8:	15 87       	ld.ub	r7,r10[0x0]

	// PRESET SCREEN
	if(preset_mode) {
		// glyph magic
		if(z && x>7) {
			glyph[y] ^= 1<<(x-8);
80002bba:	1b e8       	ld.ub	r8,sp[0x6]
80002bbc:	e0 69 3c 64 	mov	r9,15460
80002bc0:	2f f7       	sub	r7,-1
80002bc2:	f2 08 07 0b 	ld.ub	r11,r9[r8]
80002bc6:	b4 87       	st.b	r10[0x0],r7
80002bc8:	30 1a       	mov	r10,1
80002bca:	f4 0c 09 4a 	lsl	r10,r10,r12
80002bce:	16 5a       	eor	r10,r11
80002bd0:	f2 08 0b 0a 	st.b	r9[r8],r10
80002bd4:	e0 8f 02 87 	bral	800030e2 <handler_MonomeGridKey+0x6ee>
80002bd8:	1b ea       	ld.ub	r10,sp[0x6]
80002bda:	1b fb       	ld.ub	r11,sp[0x7]
80002bdc:	f4 07 15 04 	lsl	r7,r10,0x4
80002be0:	e0 66 3c 70 	mov	r6,15472
80002be4:	16 07       	add	r7,r11
80002be6:	ec 07 0b 08 	st.b	r6[r7],r8
80002bea:	58 0b       	cp.w	r11,0
80002bec:	e0 81 01 6e 	brne	80002ec8 <handler_MonomeGridKey+0x4d4>
80002bf0:	58 0a       	cp.w	r10,0
80002bf2:	c6 91       	brne	80002cc4 <handler_MonomeGridKey+0x2d0>
80002bf4:	58 08       	cp.w	r8,0
80002bf6:	e0 80 01 c2 	breq	80002f7a <handler_MonomeGridKey+0x586>
			monomeFrameDirty++;	
		}
	}
	// NOT PRESET
	else {
		key_map[y*16+x] = z;
80002bfa:	e0 67 3d 78 	mov	r7,15736
80002bfe:	6e 08       	ld.w	r8,r7[0x0]
80002c00:	58 08       	cp.w	r8,0
80002c02:	c2 c0       	breq	80002c5a <handler_MonomeGridKey+0x266>
80002c04:	e0 64 3d 72 	mov	r4,15730

		if(x == 0) {
80002c08:	e0 65 3d 92 	mov	r5,15762
80002c0c:	e0 63 3d 98 	mov	r3,15768
			// PLAY
 			if(y==0) {
80002c10:	e0 66 3d 81 	mov	r6,15745
				if(z) {
80002c14:	58 28       	cp.w	r8,2
80002c16:	c1 a1       	brne	80002c4a <handler_MonomeGridKey+0x256>
					if(r_status != rOff) {
80002c18:	50 0a       	stdsp	sp[0x0],r10
80002c1a:	fe b0 fb a5 	rcall	80002364 <rec_stop>
80002c1e:	40 0a       	lddsp	r10,sp[0x0]
80002c20:	30 18       	mov	r8,1
80002c22:	a6 0a       	st.h	r3[0x0],r10
80002c24:	8f 0a       	st.w	r7[0x0],r10
80002c26:	a8 0a       	st.h	r4[0x0],r10
						if(r_status == rRec) {
80002c28:	aa 8a       	st.b	r5[0x0],r10
80002c2a:	e0 69 3c 62 	mov	r9,15458
							rec_stop();
80002c2e:	ac 88       	st.b	r6[0x0],r8
80002c30:	13 8a       	ld.ub	r10,r9[0x0]
}

void play() {
	p_timer = 0;
	p_play_pos = 0;
	p_timer_total = 0;
80002c32:	e0 69 03 08 	mov	r9,776
80002c36:	f4 09 02 49 	mul	r9,r10,r9
			rec_stop();
	}
}

void play() {
	p_timer = 0;
80002c3a:	e0 6a 0b 58 	mov	r10,2904
 			if(y==0) {
				if(z) {
					if(r_status != rOff) {
						if(r_status == rRec) {
							rec_stop();
							es.p[p_select].loop = 1;
80002c3e:	f4 09 00 09 	add	r9,r10,r9
80002c42:	f3 68 03 70 	st.b	r9[880],r8
80002c46:	e0 8f 01 9a 	bral	80002f7a <handler_MonomeGridKey+0x586>
80002c4a:	30 18       	mov	r8,1
80002c4c:	a6 0a       	st.h	r3[0x0],r10
80002c4e:	8f 0a       	st.w	r7[0x0],r10
80002c50:	a8 0a       	st.h	r4[0x0],r10
80002c52:	aa 8a       	st.b	r5[0x0],r10
80002c54:	ac 88       	st.b	r6[0x0],r8
80002c56:	e0 8f 01 92 	bral	80002f7a <handler_MonomeGridKey+0x586>

void play() {
	p_timer = 0;
	p_play_pos = 0;
	p_timer_total = 0;
	p_playing = 1;
80002c5a:	e0 6a 3c 46 	mov	r10,15430
							es.p[p_select].loop = 1;
							r_status = rOff;
							play();
						}
						else {
							r_status = rOff;
80002c5e:	15 8a       	ld.ub	r10,r10[0x0]
			rec_stop();
	}
}

void play() {
	p_timer = 0;
80002c60:	f8 0a 18 00 	cp.b	r10,r12
	p_play_pos = 0;
	p_timer_total = 0;
	p_playing = 1;
80002c64:	c1 30       	breq	80002c8a <handler_MonomeGridKey+0x296>
80002c66:	e0 6a 3d 72 	mov	r10,15730
						else {
							r_status = rOff;
							play();
						}
					}
					else if(arm_key) {
80002c6a:	b4 08       	st.h	r10[0x0],r8
80002c6c:	e0 6a 3d 92 	mov	r10,15762
80002c70:	b4 88       	st.b	r10[0x0],r8
80002c72:	e0 6a 3d 98 	mov	r10,15768
			rec_stop();
	}
}

void play() {
	p_timer = 0;
80002c76:	b4 08       	st.h	r10[0x0],r8
	p_play_pos = 0;
80002c78:	e0 68 3d 81 	mov	r8,15745
	p_timer_total = 0;
80002c7c:	30 19       	mov	r9,1
80002c7e:	b0 89       	st.b	r8[0x0],r9
	p_playing = 1;
80002c80:	e0 68 3c 4f 	mov	r8,15439
80002c84:	b0 89       	st.b	r8[0x0],r9
							play();
						}
					}
					else if(arm_key) {
						play();
						selected = 1;
80002c86:	e0 8f 01 7a 	bral	80002f7a <handler_MonomeGridKey+0x586>
80002c8a:	e0 69 3c 48 	mov	r9,15432
					}
					else if(mode == mSelect) {
80002c8e:	72 0b       	ld.w	r11,r9[0x0]
80002c90:	58 3b       	cp.w	r11,3
80002c92:	c0 41       	brne	80002c9a <handler_MonomeGridKey+0x2a6>
80002c94:	30 48       	mov	r8,4
						mode = mBank;
80002c96:	e0 8f 01 71 	bral	80002f78 <handler_MonomeGridKey+0x584>
80002c9a:	e0 69 3d 81 	mov	r9,15745
					}
					else if(p_playing) {
80002c9e:	13 8b       	ld.ub	r11,r9[0x0]
80002ca0:	f4 0b 18 00 	cp.b	r11,r10
80002ca4:	c0 50       	breq	80002cae <handler_MonomeGridKey+0x2ba>
						stop();
80002ca6:	fe b0 fc 51 	rcall	80002548 <stop>
80002caa:	e0 8f 01 68 	bral	80002f7a <handler_MonomeGridKey+0x586>
			rec_stop();
	}
}

void play() {
	p_timer = 0;
80002cae:	e0 6a 3d 72 	mov	r10,15730
	p_play_pos = 0;
80002cb2:	b4 08       	st.h	r10[0x0],r8
80002cb4:	e0 6a 3d 92 	mov	r10,15762
	p_timer_total = 0;
80002cb8:	b4 88       	st.b	r10[0x0],r8
	p_playing = 1;
80002cba:	e0 6a 3d 98 	mov	r10,15768
						play();
					}
				}
			}
			// SELECT
			else if(y==1) {
80002cbe:	b4 08       	st.h	r10[0x0],r8
80002cc0:	30 18       	mov	r8,1
80002cc2:	c6 e8       	rjmp	80002d9e <handler_MonomeGridKey+0x3aa>
80002cc4:	30 16       	mov	r6,1
80002cc6:	ec 0a 18 00 	cp.b	r10,r6
				
				if(z && mode != mBank) {
80002cca:	c1 51       	brne	80002cf4 <handler_MonomeGridKey+0x300>
80002ccc:	e0 69 3c 48 	mov	r9,15432
80002cd0:	58 08       	cp.w	r8,0
					r_status = rOff;
80002cd2:	c0 90       	breq	80002ce4 <handler_MonomeGridKey+0x2f0>
80002cd4:	72 08       	ld.w	r8,r9[0x0]
					mode = mSelect;
80002cd6:	58 48       	cp.w	r8,4
80002cd8:	c0 a0       	breq	80002cec <handler_MonomeGridKey+0x2f8>
					// print_dbg("\r\nmode: select");
				}
				else if((z == 0 && mode != mBank) || (z && mode == mBank)) {
80002cda:	e0 68 3d 78 	mov	r8,15736
80002cde:	91 0b       	st.w	r8[0x0],r11
80002ce0:	30 38       	mov	r8,3
					mode = mNormal;
80002ce2:	c4 b9       	rjmp	80002f78 <handler_MonomeGridKey+0x584>
80002ce4:	72 08       	ld.w	r8,r9[0x0]
80002ce6:	58 48       	cp.w	r8,4
80002ce8:	e0 80 01 49 	breq	80002f7a <handler_MonomeGridKey+0x586>
80002cec:	30 09       	mov	r9,0
80002cee:	e0 68 3c 48 	mov	r8,15432
80002cf2:	c3 99       	rjmp	80002f64 <handler_MonomeGridKey+0x570>
80002cf4:	30 27       	mov	r7,2
80002cf6:	ee 0a 18 00 	cp.b	r10,r7
80002cfa:	c3 21       	brne	80002d5e <handler_MonomeGridKey+0x36a>
80002cfc:	e0 6a 3c 46 	mov	r10,15430
80002d00:	b4 88       	st.b	r10[0x0],r8
80002d02:	e0 67 3d 78 	mov	r7,15736
80002d06:	58 08       	cp.w	r8,0
80002d08:	c1 60       	breq	80002d34 <handler_MonomeGridKey+0x340>
80002d0a:	6e 08       	ld.w	r8,r7[0x0]
80002d0c:	58 08       	cp.w	r8,0
80002d0e:	c0 40       	breq	80002d16 <handler_MonomeGridKey+0x322>
80002d10:	58 18       	cp.w	r8,1
80002d12:	c0 51       	brne	80002d1c <handler_MonomeGridKey+0x328>
80002d14:	8f 0b       	st.w	r7[0x0],r11
80002d16:	e0 69 3c 4f 	mov	r9,15439
80002d1a:	c4 28       	rjmp	80002d9e <handler_MonomeGridKey+0x3aa>
					// print_dbg("\r\nmode: normal");
				}
			}
			// REC
			else if(y==2) {
80002d1c:	58 28       	cp.w	r8,2
80002d1e:	e0 81 01 2e 	brne	80002f7a <handler_MonomeGridKey+0x586>
80002d22:	50 0b       	stdsp	sp[0x0],r11
				arm_key = z;
80002d24:	fe b0 fb 20 	rcall	80002364 <rec_stop>
80002d28:	40 0b       	lddsp	r11,sp[0x0]
 				if(z) {
80002d2a:	e0 68 3c 4f 	mov	r8,15439
					if(r_status == rOff) {
80002d2e:	8f 0b       	st.w	r7[0x0],r11
80002d30:	b0 86       	st.b	r8[0x0],r6
80002d32:	c2 49       	rjmp	80002f7a <handler_MonomeGridKey+0x586>
						selected = 0;
					}
					else if(r_status == rArm) {
80002d34:	6e 07       	ld.w	r7,r7[0x0]
80002d36:	58 07       	cp.w	r7,0
						r_status = rOff;
80002d38:	e0 81 01 21 	brne	80002f7a <handler_MonomeGridKey+0x586>
						selected = 1;
80002d3c:	e0 68 3c 4f 	mov	r8,15439
						// print_dbg("\r\narm off");
					}
					else if(r_status == rRec) {
80002d40:	11 88       	ld.ub	r8,r8[0x0]
80002d42:	f8 08 18 00 	cp.b	r8,r12
						rec_stop();
80002d46:	e0 81 01 1a 	brne	80002f7a <handler_MonomeGridKey+0x586>
						r_status = rOff;
80002d4a:	fe b0 fc 11 	rcall	8000256c <rec_arm>
80002d4e:	e0 68 3c 48 	mov	r8,15432
						selected = 1;
80002d52:	70 09       	ld.w	r9,r8[0x0]
					}
				}
				else {
					if(r_status == rOff && !selected) {
80002d54:	58 49       	cp.w	r9,4
80002d56:	e0 81 01 12 	brne	80002f7a <handler_MonomeGridKey+0x586>
80002d5a:	91 07       	st.w	r8[0x0],r7
80002d5c:	c0 f9       	rjmp	80002f7a <handler_MonomeGridKey+0x586>
80002d5e:	30 39       	mov	r9,3
80002d60:	f2 0a 18 00 	cp.b	r10,r9
80002d64:	c1 11       	brne	80002d86 <handler_MonomeGridKey+0x392>
80002d66:	58 08       	cp.w	r8,0
						rec_arm();
80002d68:	e0 80 01 09 	breq	80002f7a <handler_MonomeGridKey+0x586>

						if(mode == mBank)
80002d6c:	e0 68 3c 62 	mov	r8,15458
80002d70:	11 89       	ld.ub	r9,r8[0x0]
80002d72:	e0 68 03 08 	mov	r8,776
							mode = mNormal;
80002d76:	b1 39       	mul	r9,r8
80002d78:	e0 68 0b 58 	mov	r8,2904
						// mode = mNormal;
					}
				}
			}
			// PATTERN loop
			else if(y==3) {
80002d7c:	f0 09 00 09 	add	r9,r8,r9
80002d80:	f2 c9 fc 90 	sub	r9,r9,-880
				if(z) {
80002d84:	c0 a8       	rjmp	80002d98 <handler_MonomeGridKey+0x3a4>
80002d86:	30 49       	mov	r9,4
					es.p[p_select].loop ^= 1;
80002d88:	f2 0a 18 00 	cp.b	r10,r9
80002d8c:	c0 b1       	brne	80002da2 <handler_MonomeGridKey+0x3ae>
80002d8e:	58 08       	cp.w	r8,0
80002d90:	e0 80 00 f5 	breq	80002f7a <handler_MonomeGridKey+0x586>
80002d94:	e0 69 0b 33 	mov	r9,2867
80002d98:	13 88       	ld.ub	r8,r9[0x0]
80002d9a:	ec 18 00 01 	eorl	r8,0x1
				}
				
			}
			// ARP mode
			else if(y==4) {
80002d9e:	b2 88       	st.b	r9[0x0],r8
80002da0:	ce d8       	rjmp	80002f7a <handler_MonomeGridKey+0x586>
80002da2:	30 59       	mov	r9,5
80002da4:	f2 0a 18 00 	cp.b	r10,r9
				if(z) {
80002da8:	c1 c1       	brne	80002de0 <handler_MonomeGridKey+0x3ec>
80002daa:	e0 69 3d 84 	mov	r9,15748
					arp ^= 1;
80002dae:	b2 ab       	st.b	r9[0x2],r11
80002db0:	f3 6c 00 0a 	st.b	r9[10],r12
80002db4:	b2 ec       	st.b	r9[0x6],r12
80002db6:	e0 6b 3c 50 	mov	r11,15440
				}
			}
			// MODE: EDGE
			else if(y==5) {
80002dba:	96 2c       	ld.sh	r12,r11[0x4]
80002dbc:	b2 4c       	st.h	r9[0x8],r12
80002dbe:	e0 6a 3c 58 	mov	r10,15448

void reset_hys() {
	u8 i1;

	for(i1=0;i1<3;i1++) {
		ain[i1].hys = 0;
80002dc2:	b4 2c       	st.h	r10[0x4],r12
80002dc4:	96 0c       	ld.sh	r12,r11[0x0]
80002dc6:	b2 0c       	st.h	r9[0x0],r12
80002dc8:	b4 0c       	st.h	r10[0x0],r12
		ain[i1].latch = adc_last[i1] = adc[i1];
80002dca:	96 1b       	ld.sh	r11,r11[0x2]
80002dcc:	b2 2b       	st.h	r9[0x4],r11
80002dce:	b4 1b       	st.h	r10[0x2],r11
80002dd0:	e0 69 3c 48 	mov	r9,15432
80002dd4:	58 08       	cp.w	r8,0
80002dd6:	e0 80 00 d1 	breq	80002f78 <handler_MonomeGridKey+0x584>
80002dda:	30 28       	mov	r8,2
80002ddc:	cc e8       	rjmp	80002f78 <handler_MonomeGridKey+0x584>
80002dde:	d7 03       	nop
80002de0:	30 79       	mov	r9,7
			}
			// MODE: EDGE
			else if(y==5) {
				reset_hys();

				if(z)
80002de2:	f2 0a 18 00 	cp.b	r10,r9
80002de6:	c5 31       	brne	80002e8c <handler_MonomeGridKey+0x498>
					mode = mEdge;
80002de8:	e0 69 3d 84 	mov	r9,15748
80002dec:	b2 ab       	st.b	r9[0x2],r11
80002dee:	f3 6c 00 0a 	st.b	r9[10],r12
80002df2:	b2 ec       	st.b	r9[0x6],r12
80002df4:	e0 6b 3c 50 	mov	r11,15440
80002df8:	96 2c       	ld.sh	r12,r11[0x4]
80002dfa:	b2 4c       	st.h	r9[0x8],r12
80002dfc:	e0 6a 3c 58 	mov	r10,15448
80002e00:	b4 2c       	st.h	r10[0x4],r12
80002e02:	96 0c       	ld.sh	r12,r11[0x0]
80002e04:	b2 0c       	st.h	r9[0x0],r12
80002e06:	b4 0c       	st.h	r10[0x0],r12
80002e08:	96 1b       	ld.sh	r11,r11[0x2]
80002e0a:	b2 2b       	st.h	r9[0x4],r11
80002e0c:	b4 1b       	st.h	r10[0x2],r11
80002e0e:	e0 69 3c 48 	mov	r9,15432
80002e12:	72 09       	ld.w	r9,r9[0x0]
80002e14:	58 29       	cp.w	r9,2
80002e16:	c0 61       	brne	80002e22 <handler_MonomeGridKey+0x42e>
80002e18:	30 09       	mov	r9,0
80002e1a:	e0 68 0b 58 	mov	r8,2904
				else
					mode = mNormal;
			}
			// PORT
			else if(y==7) {
80002e1e:	b0 29       	st.h	r8[0x4],r9
80002e20:	ca d8       	rjmp	80002f7a <handler_MonomeGridKey+0x586>
80002e22:	e0 69 3c 4c 	mov	r9,15436

void reset_hys() {
	u8 i1;

	for(i1=0;i1<3;i1++) {
		ain[i1].hys = 0;
80002e26:	58 08       	cp.w	r8,0
80002e28:	c2 00       	breq	80002e68 <handler_MonomeGridKey+0x474>
80002e2a:	13 8c       	ld.ub	r12,r9[0x0]
80002e2c:	30 18       	mov	r8,1
		ain[i1].latch = adc_last[i1] = adc[i1];
80002e2e:	e0 6a 0b 36 	mov	r10,2870
80002e32:	e0 6b 3c 6c 	mov	r11,15468
80002e36:	f0 0c 18 00 	cp.b	r12,r8
80002e3a:	c0 71       	brne	80002e48 <handler_MonomeGridKey+0x454>
80002e3c:	30 08       	mov	r8,0
80002e3e:	b2 88       	st.b	r9[0x0],r8
80002e40:	f5 58 00 1c 	st.h	r10[28],r8
			}
			// PORT
			else if(y==7) {
				reset_hys();

				if(mode == mEdge) {
80002e44:	b6 88       	st.b	r11[0x0],r8
80002e46:	c9 a8       	rjmp	80002f7a <handler_MonomeGridKey+0x586>
80002e48:	b6 88       	st.b	r11[0x0],r8
80002e4a:	30 2b       	mov	r11,2
					es.edge_fixed_time = 0;
80002e4c:	b2 8b       	st.b	r9[0x0],r11
80002e4e:	e0 69 3d 9a 	mov	r9,15770
80002e52:	b2 88       	st.b	r9[0x0],r8
80002e54:	e0 68 3d 94 	mov	r8,15764
				}
				else {
					if(z) {
80002e58:	90 89       	ld.uh	r9,r8[0x0]
						if(port_toggle == 1) {
80002e5a:	fe c8 9d 98 	sub	r8,pc,-25192
80002e5e:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80002e62:	f5 58 00 1c 	st.h	r10[28],r8
80002e66:	c8 a8       	rjmp	80002f7a <handler_MonomeGridKey+0x586>
							port_active = 0;
							aout[3].slew = 0;
80002e68:	e0 6a 3d 9a 	mov	r10,15770
80002e6c:	b4 88       	st.b	r10[0x0],r8
80002e6e:	13 8b       	ld.ub	r11,r9[0x0]
					es.edge_fixed_time = 0;
				}
				else {
					if(z) {
						if(port_toggle == 1) {
							port_active = 0;
80002e70:	30 2a       	mov	r10,2
80002e72:	f4 0b 18 00 	cp.b	r11,r10
							aout[3].slew = 0;
							port_toggle = 0;
						}
						else {
							port_toggle = 2;
80002e76:	e0 81 00 82 	brne	80002f7a <handler_MonomeGridKey+0x586>
							port_active = 1;
							port_edit = 1;
80002e7a:	b2 88       	st.b	r9[0x0],r8
80002e7c:	e0 69 3c 6c 	mov	r9,15468
							aout[3].slew = EXP[port_time];
80002e80:	b2 88       	st.b	r9[0x0],r8
80002e82:	e0 69 0b 36 	mov	r9,2870
80002e86:	f3 58 00 1c 	st.h	r9[28],r8
80002e8a:	c7 88       	rjmp	80002f7a <handler_MonomeGridKey+0x586>
80002e8c:	30 69       	mov	r9,6
						}
					}
					else {
						port_edit = 0;
80002e8e:	f2 0a 18 00 	cp.b	r10,r9
						if(port_toggle == 2) {
80002e92:	c7 41       	brne	80002f7a <handler_MonomeGridKey+0x586>
80002e94:	e0 69 3d 84 	mov	r9,15748
80002e98:	30 0a       	mov	r10,0
80002e9a:	e0 6b 3c 50 	mov	r11,15440
							port_active = 0;
							aout[3].slew = 0;
							port_toggle = 0;
80002e9e:	f3 6a 00 0a 	st.b	r9[10],r10
						}
					}
					else {
						port_edit = 0;
						if(port_toggle == 2) {
							port_active = 0;
80002ea2:	b2 aa       	st.b	r9[0x2],r10
							aout[3].slew = 0;
80002ea4:	b2 ea       	st.b	r9[0x6],r10
80002ea6:	96 2c       	ld.sh	r12,r11[0x4]
80002ea8:	b2 4c       	st.h	r9[0x8],r12
80002eaa:	e0 6a 3c 58 	mov	r10,15448
						}
					}
				}
			}
			// MODE: SLEW
			else if(y==6) {
80002eae:	b4 2c       	st.h	r10[0x4],r12
80002eb0:	96 0c       	ld.sh	r12,r11[0x0]
80002eb2:	b2 0c       	st.h	r9[0x0],r12

void reset_hys() {
	u8 i1;

	for(i1=0;i1<3;i1++) {
		ain[i1].hys = 0;
80002eb4:	b4 0c       	st.h	r10[0x0],r12
80002eb6:	96 1b       	ld.sh	r11,r11[0x2]
		ain[i1].latch = adc_last[i1] = adc[i1];
80002eb8:	b2 2b       	st.h	r9[0x4],r11

void reset_hys() {
	u8 i1;

	for(i1=0;i1<3;i1++) {
		ain[i1].hys = 0;
80002eba:	b4 1b       	st.h	r10[0x2],r11
80002ebc:	e0 69 3c 48 	mov	r9,15432
80002ec0:	58 08       	cp.w	r8,0
		ain[i1].latch = adc_last[i1] = adc[i1];
80002ec2:	c5 b0       	breq	80002f78 <handler_MonomeGridKey+0x584>
80002ec4:	c5 98       	rjmp	80002f76 <handler_MonomeGridKey+0x582>
80002ec6:	d7 03       	nop
80002ec8:	e0 69 3d 76 	mov	r9,15734
80002ecc:	58 08       	cp.w	r8,0
80002ece:	e0 80 00 d9 	breq	80003080 <handler_MonomeGridKey+0x68c>
80002ed2:	92 08       	ld.sh	r8,r9[0x0]
80002ed4:	2f f8       	sub	r8,-1
80002ed6:	b2 08       	st.h	r9[0x0],r8
			}
			// MODE: SLEW
			else if(y==6) {
				reset_hys();

				if(z)
80002ed8:	e0 68 3d 71 	mov	r8,15729
80002edc:	11 89       	ld.ub	r9,r8[0x0]
80002ede:	f6 09 18 00 	cp.b	r9,r11
80002ee2:	e0 88 00 03 	brls	80002ee8 <handler_MonomeGridKey+0x4f4>
80002ee6:	b0 8b       	st.b	r8[0x0],r11
80002ee8:	e0 68 0b 2e 	mov	r8,2862
80002eec:	11 89       	ld.ub	r9,r8[0x0]
80002eee:	f4 09 18 00 	cp.b	r9,r10
80002ef2:	e0 88 00 03 	brls	80002ef8 <handler_MonomeGridKey+0x504>
80002ef6:	b0 8a       	st.b	r8[0x0],r10
80002ef8:	e0 68 3d 96 	mov	r8,15766
80002efc:	30 09       	mov	r9,0
80002efe:	11 8c       	ld.ub	r12,r8[0x0]
80002f00:	f2 0c 18 00 	cp.b	r12,r9
80002f04:	c1 60       	breq	80002f30 <handler_MonomeGridKey+0x53c>
80002f06:	b0 89       	st.b	r8[0x0],r9
80002f08:	e0 6c 3c 50 	mov	r12,15440
80002f0c:	e0 68 3d 84 	mov	r8,15748
			}

			monomeFrameDirty++;
		}
		// NORMAL DETECTION
		else if(z) {
80002f10:	b0 a9       	st.b	r8[0x2],r9
80002f12:	b0 e9       	st.b	r8[0x6],r9
			shape_key_count++;
80002f14:	f1 69 00 0a 	st.b	r8[10],r9
80002f18:	98 27       	ld.sh	r7,r12[0x4]

			if(x < min_x) min_x = x;
80002f1a:	b0 47       	st.h	r8[0x8],r7
80002f1c:	e0 69 3c 58 	mov	r9,15448
80002f20:	b2 27       	st.h	r9[0x4],r7
80002f22:	98 07       	ld.sh	r7,r12[0x0]
80002f24:	b0 07       	st.h	r8[0x0],r7
80002f26:	b2 07       	st.h	r9[0x0],r7
			if(y < min_y) min_y = y;
80002f28:	98 1c       	ld.sh	r12,r12[0x2]
80002f2a:	b0 2c       	st.h	r8[0x4],r12
80002f2c:	0e 9e       	mov	lr,r7
80002f2e:	b2 1c       	st.h	r9[0x2],r12
80002f30:	e0 66 3c 48 	mov	r6,15432
80002f34:	6c 08       	ld.w	r8,r6[0x0]

			// all-edit breakout
			if(all_edit) {
80002f36:	58 28       	cp.w	r8,2
80002f38:	c2 61       	brne	80002f84 <handler_MonomeGridKey+0x590>
80002f3a:	e0 69 0b 2d 	mov	r9,2861
80002f3e:	30 0c       	mov	r12,0
80002f40:	b2 8c       	st.b	r9[0x0],r12
				reset_hys();
				all_edit = 0;
80002f42:	30 79       	mov	r9,7
void reset_hys() {
	u8 i1;

	for(i1=0;i1<3;i1++) {
		ain[i1].hys = 0;
		ain[i1].latch = adc_last[i1] = adc[i1];
80002f44:	f2 0a 18 00 	cp.b	r10,r9

void reset_hys() {
	u8 i1;

	for(i1=0;i1<3;i1++) {
		ain[i1].hys = 0;
80002f48:	c0 61       	brne	80002f54 <handler_MonomeGridKey+0x560>
80002f4a:	a5 6b       	lsl	r11,0x4
80002f4c:	e0 68 0b 58 	mov	r8,2904
		ain[i1].latch = adc_last[i1] = adc[i1];
80002f50:	b0 2b       	st.h	r8[0x4],r11
80002f52:	c1 48       	rjmp	80002f7a <handler_MonomeGridKey+0x586>
80002f54:	30 59       	mov	r9,5
80002f56:	f2 0b 18 00 	cp.b	r11,r9
80002f5a:	e0 8b 00 07 	brhi	80002f68 <handler_MonomeGridKey+0x574>
80002f5e:	30 09       	mov	r9,0
80002f60:	e0 68 0b 58 	mov	r8,2904
80002f64:	91 09       	st.w	r8[0x0],r9
				reset_hys();
				all_edit = 0;
			}

			// EDGE MODE
			if(mode == mEdge) {
80002f66:	c0 a8       	rjmp	80002f7a <handler_MonomeGridKey+0x586>
80002f68:	e0 69 0b 58 	mov	r9,2904
80002f6c:	30 aa       	mov	r10,10
				shape_counter = 0;
80002f6e:	f4 0b 18 00 	cp.b	r11,r10
80002f72:	e0 8b 00 03 	brhi	80002f78 <handler_MonomeGridKey+0x584>

				if(y==7) {
80002f76:	30 18       	mov	r8,1
80002f78:	93 08       	st.w	r9[0x0],r8
80002f7a:	e0 68 07 90 	mov	r8,1936
					es.edge_fixed_time = x*16;
80002f7e:	11 89       	ld.ub	r9,r8[0x0]
80002f80:	2f f9       	sub	r9,-1
80002f82:	ca f8       	rjmp	800030e0 <handler_MonomeGridKey+0x6ec>
				}
				else if(x < 6) es.edge = eStandard;
80002f84:	20 38       	sub	r8,3
80002f86:	58 18       	cp.w	r8,1
80002f88:	e0 8b 00 30 	brhi	80002fe8 <handler_MonomeGridKey+0x5f4>
80002f8c:	20 2b       	sub	r11,2
80002f8e:	30 38       	mov	r8,3
80002f90:	f0 0b 18 00 	cp.b	r11,r8
80002f94:	e0 8b 00 a7 	brhi	800030e2 <handler_MonomeGridKey+0x6ee>
				else if(x < 11) es.edge = eFixed;
80002f98:	30 17       	mov	r7,1
80002f9a:	ee 0a 18 00 	cp.b	r10,r7
80002f9e:	e0 88 00 a2 	brls	800030e2 <handler_MonomeGridKey+0x6ee>
80002fa2:	30 58       	mov	r8,5
				else es.edge = eDrone;
80002fa4:	f0 0a 18 00 	cp.b	r10,r8

				monomeFrameDirty++;
80002fa8:	e0 8b 00 9d 	brhi	800030e2 <handler_MonomeGridKey+0x6ee>
80002fac:	fe b0 fa ce 	rcall	80002548 <stop>
			}
			// SELECT
			else if(mode == mSelect || mode == mBank) {
80002fb0:	1b f8       	ld.ub	r8,sp[0x7]
80002fb2:	20 28       	sub	r8,2
80002fb4:	1b e9       	ld.ub	r9,sp[0x6]
				if(x>1 && x < 6 && y > 1 && y < 6) {
80002fb6:	20 29       	sub	r9,2
80002fb8:	f0 09 00 29 	add	r9,r8,r9<<0x2
80002fbc:	e0 68 3c 62 	mov	r8,15458
80002fc0:	b0 89       	st.b	r8[0x0],r9
80002fc2:	6c 08       	ld.w	r8,r6[0x0]
80002fc4:	58 48       	cp.w	r8,4
80002fc6:	e0 81 00 8e 	brne	800030e2 <handler_MonomeGridKey+0x6ee>
80002fca:	e0 69 3d 72 	mov	r9,15730
80002fce:	30 08       	mov	r8,0
80002fd0:	b2 08       	st.h	r9[0x0],r8
80002fd2:	e0 69 3d 92 	mov	r9,15762
					stop();
80002fd6:	b2 88       	st.b	r9[0x0],r8
80002fd8:	e0 69 3d 98 	mov	r9,15768
					p_select = (y-2)*4+(x-2);
80002fdc:	b2 08       	st.h	r9[0x0],r8
80002fde:	e0 68 3d 81 	mov	r8,15745
80002fe2:	b0 87       	st.b	r8[0x0],r7
80002fe4:	c7 f8       	rjmp	800030e2 <handler_MonomeGridKey+0x6ee>
80002fe6:	d7 03       	nop
80002fe8:	e0 68 0b 24 	mov	r8,2852
					if(mode == mBank)
80002fec:	11 89       	ld.ub	r9,r8[0x0]
80002fee:	30 08       	mov	r8,0
80002ff0:	f0 09 18 00 	cp.b	r9,r8
			rec_stop();
	}
}

void play() {
	p_timer = 0;
80002ff4:	c3 81       	brne	80003064 <handler_MonomeGridKey+0x670>
80002ff6:	e0 68 3c 60 	mov	r8,15456
	p_play_pos = 0;
80002ffa:	90 09       	ld.sh	r9,r8[0x0]
	p_timer_total = 0;
80002ffc:	30 18       	mov	r8,1
80002ffe:	f0 09 19 00 	cp.h	r9,r8
	p_playing = 1;
80003002:	c2 50       	breq	8000304c <handler_MonomeGridKey+0x658>
80003004:	e0 68 3d 70 	mov	r8,15728
80003008:	11 88       	ld.ub	r8,r8[0x0]
8000300a:	f6 08 01 08 	sub	r8,r11,r8
8000300e:	5c 48       	abs	r8
80003010:	58 28       	cp.w	r8,2
80003012:	e0 89 00 0b 	brgt	80003028 <handler_MonomeGridKey+0x634>
80003016:	e0 68 0b 31 	mov	r8,2865
8000301a:	11 88       	ld.ub	r8,r8[0x0]
8000301c:	f4 08 01 08 	sub	r8,r10,r8
80003020:	5c 48       	abs	r8
80003022:	58 28       	cp.w	r8,2
80003024:	e0 8a 00 14 	brle	8000304c <handler_MonomeGridKey+0x658>
80003028:	e0 68 0b 2d 	mov	r8,2861
8000302c:	30 09       	mov	r9,0
8000302e:	b0 89       	st.b	r8[0x0],r9
80003030:	e0 68 3d 78 	mov	r8,15736
80003034:	70 08       	ld.w	r8,r8[0x0]
80003036:	58 08       	cp.w	r8,0
80003038:	c0 40       	breq	80003040 <handler_MonomeGridKey+0x64c>
8000303a:	30 0c       	mov	r12,0
8000303c:	fe b0 fa 34 	rcall	800024a4 <rec>
80003040:	1b ea       	ld.ub	r10,sp[0x6]
80003042:	1b fb       	ld.ub	r11,sp[0x7]
80003044:	30 0c       	mov	r12,0
80003046:	fe b0 fb 85 	rcall	80002750 <shape>
8000304a:	c0 58       	rjmp	80003054 <handler_MonomeGridKey+0x660>
					// print_dbg("\r\nselected ");
					// print_dbg_ulong(p_select);
				}
			}
			// SHAPE DETECT
			else if(!legato) {
8000304c:	30 59       	mov	r9,5
8000304e:	e0 68 0b 2d 	mov	r8,2861
80003052:	b0 89       	st.b	r8[0x0],r9
80003054:	1b f9       	ld.ub	r9,sp[0x7]
80003056:	e0 68 3d 70 	mov	r8,15728
				if(key_count == 1) {
8000305a:	b0 89       	st.b	r8[0x0],r9
8000305c:	1b e9       	ld.ub	r9,sp[0x6]
8000305e:	e0 68 0b 31 	mov	r8,2865
80003062:	c3 f8       	rjmp	800030e0 <handler_MonomeGridKey+0x6ec>
					shape_counter = SHAPE_COUNT;
				}
				else if(abs(x - last_x) > 2 || abs(y - last_y) > 2) {
80003064:	e0 68 3d 78 	mov	r8,15736
80003068:	70 08       	ld.w	r8,r8[0x0]
8000306a:	58 08       	cp.w	r8,0
8000306c:	c0 40       	breq	80003074 <handler_MonomeGridKey+0x680>
8000306e:	30 0c       	mov	r12,0
80003070:	fe b0 fa 1a 	rcall	800024a4 <rec>
80003074:	1b ea       	ld.ub	r10,sp[0x6]
80003076:	1b fb       	ld.ub	r11,sp[0x7]
80003078:	30 0c       	mov	r12,0
8000307a:	fe b0 fb 6b 	rcall	80002750 <shape>
8000307e:	c3 28       	rjmp	800030e2 <handler_MonomeGridKey+0x6ee>
80003080:	92 0c       	ld.sh	r12,r9[0x0]
80003082:	e0 67 0b 2d 	mov	r7,2861
					shape_counter = 0;
80003086:	20 1c       	sub	r12,1
80003088:	ae 88       	st.b	r7[0x0],r8

					if(r_status != rOff) rec(0,x,y);
8000308a:	b2 0c       	st.h	r9[0x0],r12
8000308c:	10 97       	mov	r7,r8
8000308e:	f0 0c 19 00 	cp.h	r12,r8
80003092:	e0 89 00 28 	brgt	800030e2 <handler_MonomeGridKey+0x6ee>
80003096:	b2 08       	st.h	r9[0x0],r8
					shape(0,x,y);
80003098:	30 f9       	mov	r9,15
8000309a:	e0 68 3d 71 	mov	r8,15729
8000309e:	b0 89       	st.b	r8[0x0],r9
800030a0:	e0 68 0b 2e 	mov	r8,2862
				}
				else {
					shape_counter = 5;
800030a4:	30 79       	mov	r9,7
800030a6:	b0 89       	st.b	r8[0x0],r9
800030a8:	e0 68 0b 58 	mov	r8,2904
				}

				last_x = x;
800030ac:	70 08       	ld.w	r8,r8[0x0]
800030ae:	58 08       	cp.w	r8,0
				last_y = y;
800030b0:	c1 01       	brne	800030d0 <handler_MonomeGridKey+0x6dc>
800030b2:	e0 68 3d 78 	mov	r8,15736
			}
			// LEGATO
			else {
				if(r_status != rOff) rec(0,x,y);
800030b6:	70 08       	ld.w	r8,r8[0x0]
800030b8:	58 08       	cp.w	r8,0
800030ba:	c0 40       	breq	800030c2 <handler_MonomeGridKey+0x6ce>
800030bc:	36 4c       	mov	r12,100
800030be:	fe b0 f9 f3 	rcall	800024a4 <rec>
800030c2:	32 0c       	mov	r12,32
				shape(0,x,y);
800030c4:	e0 a0 17 eb 	rcall	8000609a <gpio_clr_gpio_pin>
800030c8:	30 09       	mov	r9,0
800030ca:	e0 68 3c 44 	mov	r8,15428
800030ce:	b0 09       	st.h	r8[0x0],r9
		}
		// key up
		else {
			shape_counter = 0;

			shape_key_count--;
800030d0:	e0 68 07 90 	mov	r8,1936
800030d4:	11 89       	ld.ub	r9,r8[0x0]
				shape(0,x,y);
			}
		}
		// key up
		else {
			shape_counter = 0;
800030d6:	2f f9       	sub	r9,-1

			shape_key_count--;
800030d8:	b0 89       	st.b	r8[0x0],r9

			if(shape_key_count < 1) {
800030da:	30 09       	mov	r9,0
800030dc:	e0 68 0b 24 	mov	r8,2852
800030e0:	b0 89       	st.b	r8[0x0],r9
800030e2:	2f ed       	sub	sp,-8
				shape_key_count = 0;
800030e4:	d8 32       	popm	r0-r7,pc

		 		min_x = 15;
800030e6:	d7 03       	nop

800030e8 <clockTimer_callback>:
800030e8:	d4 31       	pushm	r0-r7,lr
800030ea:	e0 68 0b 2d 	mov	r8,2861
				min_y = 7;
800030ee:	11 88       	ld.ub	r8,r8[0x0]
800030f0:	58 08       	cp.w	r8,0

				if(es.edge == eStandard) {
800030f2:	e0 80 01 09 	breq	80003304 <clockTimer_callback+0x21c>
800030f6:	30 19       	mov	r9,1
800030f8:	f2 08 18 00 	cp.b	r8,r9
					if(r_status != rOff)
800030fc:	e0 81 00 ff 	brne	800032fa <clockTimer_callback+0x212>
80003100:	e0 6a 3d 71 	mov	r10,15729
						rec(100,x,y);
80003104:	30 09       	mov	r9,0
80003106:	15 8b       	ld.ub	r11,r10[0x0]
					gpio_clr_gpio_pin(B00);
80003108:	e0 68 0b 2e 	mov	r8,2862
8000310c:	12 9a       	mov	r10,r9
					edge_state = 0;
8000310e:	11 88       	ld.ub	r8,r8[0x0]
80003110:	e0 64 3c 70 	mov	r4,15472
				}

				legato = 0;

				monomeFrameDirty++;
80003114:	f0 07 15 04 	lsl	r7,r8,0x4
80003118:	12 95       	mov	r5,r9
8000311a:	16 07       	add	r7,r11
						rec(100,x,y);
					gpio_clr_gpio_pin(B00);
					edge_state = 0;
				}

				legato = 0;
8000311c:	f2 08 00 0c 	add	r12,r9,r8
80003120:	58 fc       	cp.w	r12,15

				monomeFrameDirty++;
			}
 		}
	}
}
80003122:	e0 89 00 15 	brgt	8000314c <clockTimer_callback+0x64>
80003126:	ee 04 00 06 	add	r6,r7,r4
8000312a:	30 0c       	mov	r12,0
8000312c:	a1 7a       	lsl	r10,0x1
8000312e:	f8 0b 00 0e 	add	lr,r12,r11
80003132:	5c 8a       	casts.h	r10
80003134:	58 fe       	cp.w	lr,15
80003136:	e0 89 00 07 	brgt	80003144 <clockTimer_callback+0x5c>
8000313a:	0d 8e       	ld.ub	lr,r6[0x0]
8000313c:	ea 0e 18 00 	cp.b	lr,r5
80003140:	c0 20       	breq	80003144 <clockTimer_callback+0x5c>
80003142:	a1 aa       	sbr	r10,0x0
80003144:	2f fc       	sub	r12,-1
80003146:	2f f6       	sub	r6,-1
80003148:	58 3c       	cp.w	r12,3
8000314a:	cf 11       	brne	8000312c <clockTimer_callback+0x44>
8000314c:	2f f9       	sub	r9,-1
8000314e:	2f 07       	sub	r7,-16
80003150:	58 39       	cp.w	r9,3
80003152:	ce 51       	brne	8000311c <clockTimer_callback+0x34>
80003154:	fe c9 a0 b2 	sub	r9,pc,-24398
80003158:	30 07       	mov	r7,0
8000315a:	30 fc       	mov	r12,15
8000315c:	0e 9e       	mov	lr,r7
8000315e:	92 06       	ld.sh	r6,r9[0x0]
					if(key_map[(min_y+i1)*16+(min_x+i2)]) s |= 1;
				}
			// print_dbg("\r\nfound shape pattern: ");
			// print_dbg_ulong(s);

			for(i1=0;i1<15;i1++)
80003160:	2f fe       	sub	lr,-1
80003162:	f4 06 19 00 	cp.h	r6,r10
80003166:	c0 80       	breq	80003176 <clockTimer_callback+0x8e>
80003168:	ef de c0 08 	bfextu	r7,lr,0x0,0x8
				if(s == SHAPE_PATTERN[i1]) break;

			if(i1 < 9) {
8000316c:	2f e9       	sub	r9,-2
8000316e:	f8 07 18 00 	cp.b	r7,r12
80003172:	cf 51       	brne	8000315c <clockTimer_callback+0x74>
80003174:	ca 88       	rjmp	800032c4 <clockTimer_callback+0x1dc>
				if(r_status != rOff) 
80003176:	30 89       	mov	r9,8
80003178:	f2 07 18 00 	cp.b	r7,r9
8000317c:	e0 8b 00 20 	brhi	800031bc <clockTimer_callback+0xd4>
					rec(i1, min_x, min_y + SHAPE_OFF_Y[i1]);
80003180:	e0 69 3d 78 	mov	r9,15736
80003184:	72 09       	ld.w	r9,r9[0x0]
80003186:	58 09       	cp.w	r9,0
80003188:	c0 c0       	breq	800031a0 <clockTimer_callback+0xb8>
8000318a:	fe c9 a1 66 	sub	r9,pc,-24218
8000318e:	f2 07 07 09 	ld.ub	r9,r9[r7]
				shape(i1, min_x, min_y + SHAPE_OFF_Y[i1]);
80003192:	f2 08 00 08 	add	r8,r9,r8
80003196:	0e 9c       	mov	r12,r7
80003198:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8000319c:	fe b0 f9 84 	rcall	800024a4 <rec>
800031a0:	fe c8 a1 7c 	sub	r8,pc,-24196
800031a4:	f0 07 07 0a 	ld.ub	r10,r8[r7]
				legato = 1;
			}
			else if(i1 < 15) {
800031a8:	e0 68 0b 2e 	mov	r8,2862
800031ac:	11 88       	ld.ub	r8,r8[0x0]
800031ae:	0e 9c       	mov	r12,r7
800031b0:	10 0a       	add	r10,r8
				// MAGICS
				if(i1==9)
800031b2:	e0 68 3d 71 	mov	r8,15729
800031b6:	5c 5a       	castu.b	r10
800031b8:	11 8b       	ld.ub	r11,r8[0x0]
					all_edit = 1;
800031ba:	c9 a8       	rjmp	800032ee <clockTimer_callback+0x206>
800031bc:	30 ea       	mov	r10,14
800031be:	f4 07 18 00 	cp.b	r7,r10
				else if(i1==10)
800031c2:	e0 8b 00 81 	brhi	800032c4 <clockTimer_callback+0x1dc>
800031c6:	30 98       	mov	r8,9
					pattern_linearize();
800031c8:	f0 07 18 00 	cp.b	r7,r8
800031cc:	c0 51       	brne	800031d6 <clockTimer_callback+0xee>
				else if(i1==11)
800031ce:	30 19       	mov	r9,1
800031d0:	e0 68 3d 96 	mov	r8,15766
800031d4:	c9 28       	rjmp	800032f8 <clockTimer_callback+0x210>
					pattern_time_half();
800031d6:	30 a8       	mov	r8,10
800031d8:	f0 07 18 00 	cp.b	r7,r8
				else if(i1==12)
800031dc:	c0 41       	brne	800031e4 <clockTimer_callback+0xfc>
800031de:	fe b0 f7 7d 	rcall	800020d8 <pattern_linearize>
800031e2:	c8 c8       	rjmp	800032fa <clockTimer_callback+0x212>
800031e4:	30 b8       	mov	r8,11
}

void pattern_time_double() {
	u8 i;

	for(i=0;i<es.p[p_select].length+1;i++)
800031e6:	f0 07 18 00 	cp.b	r7,r8
800031ea:	c0 41       	brne	800031f2 <clockTimer_callback+0x10a>
800031ec:	fe b0 f7 c0 	rcall	8000216c <pattern_time_half>
800031f0:	c8 58       	rjmp	800032fa <clockTimer_callback+0x212>
800031f2:	30 c8       	mov	r8,12
800031f4:	0e 9e       	mov	lr,r7
800031f6:	f0 07 18 00 	cp.b	r7,r8
800031fa:	c4 11       	brne	8000327c <clockTimer_callback+0x194>
800031fc:	e0 68 3c 62 	mov	r8,15458
80003200:	e0 66 0b 58 	mov	r6,2904
80003204:	11 8c       	ld.ub	r12,r8[0x0]
80003206:	e0 69 03 08 	mov	r9,776
8000320a:	30 08       	mov	r8,0
8000320c:	f8 09 02 49 	mul	r9,r12,r9
80003210:	ec 09 00 07 	add	r7,r6,r9
80003214:	ee c7 fc 94 	sub	r7,r7,-876
80003218:	c0 e8       	rjmp	80003234 <clockTimer_callback+0x14c>
8000321a:	d7 03       	nop
8000321c:	f0 08 00 1a 	add	r10,r8,r8<<0x1
80003220:	f1 de c0 08 	bfextu	r8,lr,0x0,0x8
80003224:	f2 0a 00 1a 	add	r10,r9,r10<<0x1
80003228:	ec 0a 00 0a 	add	r10,r6,r10
8000322c:	29 0a       	sub	r10,-112
8000322e:	94 0b       	ld.sh	r11,r10[0x0]
80003230:	a1 7b       	lsl	r11,0x1
80003232:	b4 0b       	st.h	r10[0x0],r11
			es.p[p_select].e[i].interval = es.p[p_select].e[i].interval * 2;
80003234:	f0 ce ff ff 	sub	lr,r8,-1
}

void pattern_time_double() {
	u8 i;

	for(i=0;i<es.p[p_select].length+1;i++)
80003238:	0f 8b       	ld.ub	r11,r7[0x0]
8000323a:	e0 6a 0b 58 	mov	r10,2904
			es.p[p_select].e[i].interval = es.p[p_select].e[i].interval * 2;
8000323e:	10 3b       	cp.w	r11,r8
80003240:	ce e4       	brge	8000321c <clockTimer_callback+0x134>
80003242:	30 08       	mov	r8,0
80003244:	ae 18       	st.h	r7[0x2],r8
80003246:	f4 c7 ff 90 	sub	r7,r10,-112
8000324a:	f2 c8 ff 90 	sub	r8,r9,-112
}

void pattern_time_double() {
	u8 i;

	for(i=0;i<es.p[p_select].length+1;i++)
8000324e:	f6 0b 00 1b 	add	r11,r11,r11<<0x1
80003252:	14 08       	add	r8,r10
80003254:	ee 0b 00 1b 	add	r11,r7,r11<<0x1
			es.p[p_select].e[i].interval = es.p[p_select].e[i].interval * 2;

	es.p[p_select].total_time = 0;
80003258:	e0 67 03 08 	mov	r7,776
	spi_write(SPI,aout[1].now>>4);
	spi_write(SPI,aout[1].now<<4);
	spi_unselectChip(SPI,DAC_SPI);
}

static void clockTimer_callback(void* o) {  
8000325c:	f6 09 00 09 	add	r9,r11,r9
	u8 i;

	for(i=0;i<es.p[p_select].length+1;i++)
			es.p[p_select].e[i].interval = es.p[p_select].e[i].interval * 2;

	es.p[p_select].total_time = 0;
80003260:	f8 07 03 4a 	mac	r10,r12,r7
	spi_write(SPI,aout[1].now>>4);
	spi_write(SPI,aout[1].now<<4);
	spi_unselectChip(SPI,DAC_SPI);
}

static void clockTimer_callback(void* o) {  
80003264:	f4 ca fc 94 	sub	r10,r10,-876
	u8 i;

	for(i=0;i<es.p[p_select].length+1;i++)
			es.p[p_select].e[i].interval = es.p[p_select].e[i].interval * 2;

	es.p[p_select].total_time = 0;
80003268:	c0 78       	rjmp	80003276 <clockTimer_callback+0x18e>
	spi_write(SPI,aout[1].now>>4);
	spi_write(SPI,aout[1].now<<4);
	spi_unselectChip(SPI,DAC_SPI);
}

static void clockTimer_callback(void* o) {  
8000326a:	90 0c       	ld.sh	r12,r8[0x0]
8000326c:	94 1b       	ld.sh	r11,r10[0x2]
			es.p[p_select].e[i].interval = es.p[p_select].e[i].interval * 2;

	es.p[p_select].total_time = 0;

	for(i=0;i<es.p[p_select].length;i++) {
		es.p[p_select].total_time += es.p[p_select].e[i].interval;
8000326e:	2f a8       	sub	r8,-6
80003270:	f8 0b 00 0b 	add	r11,r12,r11
	spi_write(SPI,aout[1].now>>4);
	spi_write(SPI,aout[1].now<<4);
	spi_unselectChip(SPI,DAC_SPI);
}

static void clockTimer_callback(void* o) {  
80003274:	b4 1b       	st.h	r10[0x2],r11
			es.p[p_select].e[i].interval = es.p[p_select].e[i].interval * 2;

	es.p[p_select].total_time = 0;

	for(i=0;i<es.p[p_select].length;i++) {
		es.p[p_select].total_time += es.p[p_select].e[i].interval;
80003276:	12 38       	cp.w	r8,r9
80003278:	cf 91       	brne	8000326a <clockTimer_callback+0x182>
8000327a:	c4 08       	rjmp	800032fa <clockTimer_callback+0x212>
8000327c:	e0 68 3c 62 	mov	r8,15458
80003280:	30 d9       	mov	r9,13
80003282:	f2 07 18 00 	cp.b	r7,r9
80003286:	c0 a1       	brne	8000329a <clockTimer_callback+0x1b2>
80003288:	11 89       	ld.ub	r9,r8[0x0]
8000328a:	f4 09 18 00 	cp.b	r9,r10
	for(i=0;i<es.p[p_select].length+1;i++)
			es.p[p_select].e[i].interval = es.p[p_select].e[i].interval * 2;

	es.p[p_select].total_time = 0;

	for(i=0;i<es.p[p_select].length;i++) {
8000328e:	e0 8b 00 04 	brhi	80003296 <clockTimer_callback+0x1ae>
80003292:	2f f9       	sub	r9,-1
					pattern_linearize();
				else if(i1==11)
					pattern_time_half();
				else if(i1==12)
					pattern_time_double();
				else if(i1==13) {
80003294:	c0 98       	rjmp	800032a6 <clockTimer_callback+0x1be>
80003296:	30 09       	mov	r9,0
80003298:	c0 78       	rjmp	800032a6 <clockTimer_callback+0x1be>
8000329a:	11 89       	ld.ub	r9,r8[0x0]
					if(p_select<15)
8000329c:	58 09       	cp.w	r9,0
8000329e:	c0 30       	breq	800032a4 <clockTimer_callback+0x1bc>
800032a0:	20 19       	sub	r9,1
800032a2:	c0 28       	rjmp	800032a6 <clockTimer_callback+0x1be>
800032a4:	30 f9       	mov	r9,15
						p_select++;
800032a6:	b0 89       	st.b	r8[0x0],r9
800032a8:	e0 69 3d 72 	mov	r9,15730
					else
						p_select = 0;
800032ac:	30 08       	mov	r8,0
					play();
				}
				else if(i1==14) {
					if(p_select > 0)
800032ae:	b2 08       	st.h	r9[0x0],r8
800032b0:	e0 69 3d 92 	mov	r9,15762
						p_select--;
800032b4:	b2 88       	st.b	r9[0x0],r8
800032b6:	e0 69 3d 98 	mov	r9,15768
					else
						p_select = 15;
800032ba:	b2 08       	st.h	r9[0x0],r8
			rec_stop();
	}
}

void play() {
	p_timer = 0;
800032bc:	30 19       	mov	r9,1
800032be:	e0 68 3d 81 	mov	r8,15745
	p_play_pos = 0;
800032c2:	c1 b8       	rjmp	800032f8 <clockTimer_callback+0x210>
800032c4:	e0 68 3d 78 	mov	r8,15736
	p_timer_total = 0;
800032c8:	70 08       	ld.w	r8,r8[0x0]
	p_playing = 1;
800032ca:	58 08       	cp.w	r8,0
800032cc:	c0 a0       	breq	800032e0 <clockTimer_callback+0x1f8>
800032ce:	e0 68 0b 31 	mov	r8,2865
800032d2:	11 8a       	ld.ub	r10,r8[0x0]
800032d4:	e0 68 3d 70 	mov	r8,15728
800032d8:	30 0c       	mov	r12,0
800032da:	11 8b       	ld.ub	r11,r8[0x0]
800032dc:	fe b0 f8 e4 	rcall	800024a4 <rec>
800032e0:	e0 68 0b 31 	mov	r8,2865
800032e4:	30 0c       	mov	r12,0
800032e6:	11 8a       	ld.ub	r10,r8[0x0]
						p_select = 15;
					play();
				}
			}
			else {
				if(r_status != rOff)
800032e8:	e0 68 3d 70 	mov	r8,15728
800032ec:	11 8b       	ld.ub	r11,r8[0x0]
800032ee:	fe b0 fa 31 	rcall	80002750 <shape>
					rec(0,last_x,last_y);
800032f2:	30 19       	mov	r9,1
800032f4:	e0 68 0b 24 	mov	r8,2852
800032f8:	b0 89       	st.b	r8[0x0],r9
800032fa:	e0 68 0b 2d 	mov	r8,2861
				shape(0, last_x, last_y);
800032fe:	11 89       	ld.ub	r9,r8[0x0]
80003300:	20 19       	sub	r9,1
80003302:	b0 89       	st.b	r8[0x0],r9
80003304:	e0 68 0b 22 	mov	r8,2850
80003308:	90 08       	ld.sh	r8,r8[0x0]
8000330a:	58 08       	cp.w	r8,0
				legato = 1;
8000330c:	c1 60       	breq	80003338 <clockTimer_callback+0x250>
8000330e:	30 19       	mov	r9,1
80003310:	f2 08 19 00 	cp.h	r8,r9
			}
		}
		
		shape_counter--;
80003314:	c0 d1       	brne	8000332e <clockTimer_callback+0x246>
80003316:	32 0c       	mov	r12,32
80003318:	e0 a0 16 c1 	rcall	8000609a <gpio_clr_gpio_pin>
	}

	if(edge_counter) {
8000331c:	e0 68 07 90 	mov	r8,1936
80003320:	11 89       	ld.ub	r9,r8[0x0]
		if(edge_counter == 1) {
80003322:	2f f9       	sub	r9,-1
80003324:	b0 89       	st.b	r8[0x0],r9
80003326:	30 09       	mov	r9,0
80003328:	e0 68 3c 44 	mov	r8,15428
			gpio_clr_gpio_pin(B00);
8000332c:	b0 09       	st.h	r8[0x0],r9
8000332e:	e0 68 0b 22 	mov	r8,2850
			edge_state = 0;
			monomeFrameDirty++;
80003332:	90 09       	ld.sh	r9,r8[0x0]
80003334:	20 19       	sub	r9,1
80003336:	b0 09       	st.h	r8[0x0],r9
	}

	if(edge_counter) {
		if(edge_counter == 1) {
			gpio_clr_gpio_pin(B00);
			edge_state = 0;
80003338:	e0 68 3d 78 	mov	r8,15736
8000333c:	70 08       	ld.w	r8,r8[0x0]
			monomeFrameDirty++;
			// print_dbg("\r\ntrig done.");
		}

		edge_counter--;
8000333e:	58 28       	cp.w	r8,2
80003340:	c0 61       	brne	8000334c <clockTimer_callback+0x264>
80003342:	e0 68 3d 74 	mov	r8,15732
	}

	if(r_status == rRec) {
80003346:	90 09       	ld.sh	r9,r8[0x0]
80003348:	2f f9       	sub	r9,-1
8000334a:	b0 09       	st.h	r8[0x0],r9
8000334c:	e0 6b 3d 81 	mov	r11,15745
		rec_timer++;
80003350:	30 0c       	mov	r12,0
80003352:	17 88       	ld.ub	r8,r11[0x0]
80003354:	f8 08 18 00 	cp.b	r8,r12
	}

	if(p_playing) {
80003358:	e0 80 01 5e 	breq	80003614 <clockTimer_callback+0x52c>
8000335c:	e0 69 3d 72 	mov	r9,15730
80003360:	92 08       	ld.sh	r8,r9[0x0]
80003362:	58 08       	cp.w	r8,0
		if(p_timer == 0) {
80003364:	e0 81 01 4c 	brne	800035fc <clockTimer_callback+0x514>
80003368:	e0 69 3c 62 	mov	r9,15458
8000336c:	e0 66 0b 58 	mov	r6,2904

			if(p_play_pos == es.p[p_select].length && !es.p[p_select].loop) {
80003370:	13 8a       	ld.ub	r10,r9[0x0]
80003372:	e0 67 03 08 	mov	r7,776
80003376:	e0 69 3d 92 	mov	r9,15762
8000337a:	f4 07 02 47 	mul	r7,r10,r7
8000337e:	13 85       	ld.ub	r5,r9[0x0]
80003380:	ec 07 00 07 	add	r7,r6,r7
80003384:	ef 36 03 6c 	ld.ub	r6,r7[876]
80003388:	ec 05 18 00 	cp.b	r5,r6
8000338c:	c0 c1       	brne	800033a4 <clockTimer_callback+0x2bc>
8000338e:	ef 37 03 70 	ld.ub	r7,r7[880]
80003392:	f8 07 18 00 	cp.b	r7,r12
80003396:	c0 31       	brne	8000339c <clockTimer_callback+0x2b4>
				// print_dbg("\r\nPATTERN DONE");
				p_playing = 0;
80003398:	b6 88       	st.b	r11[0x0],r8
	}

	if(p_playing) {
		if(p_timer == 0) {

			if(p_play_pos == es.p[p_select].length && !es.p[p_select].loop) {
8000339a:	c3 39       	rjmp	80003600 <clockTimer_callback+0x518>
				p_playing = 0;
			}
			else {
				if(p_play_pos == es.p[p_select].length && es.p[p_select].loop) {
					// print_dbg("\r\nLOOP");
					p_play_pos = 0;
8000339c:	b2 88       	st.b	r9[0x0],r8
					p_timer_total = 0;
8000339e:	e0 69 3d 98 	mov	r9,15768
				}

				u8 i = p_play_pos;
				p_timer = es.p[p_select].e[i].interval;
800033a2:	b2 08       	st.h	r9[0x0],r8
800033a4:	e0 6b 03 08 	mov	r11,776
800033a8:	e0 68 0b 58 	mov	r8,2904
800033ac:	b7 3a       	mul	r10,r11
800033ae:	e0 69 3d 92 	mov	r9,15762
800033b2:	e0 6b 3d 72 	mov	r11,15730
800033b6:	13 89       	ld.ub	r9,r9[0x0]

				s8 x = es.p[p_select].e[i].x + es.p[p_select].x;
800033b8:	f2 09 00 19 	add	r9,r9,r9<<0x1
					p_play_pos = 0;
					p_timer_total = 0;
				}

				u8 i = p_play_pos;
				p_timer = es.p[p_select].e[i].interval;
800033bc:	f4 09 00 19 	add	r9,r10,r9<<0x1

				s8 x = es.p[p_select].e[i].x + es.p[p_select].x;
800033c0:	f0 0a 00 0a 	add	r10,r8,r10
					p_play_pos = 0;
					p_timer_total = 0;
				}

				u8 i = p_play_pos;
				p_timer = es.p[p_select].e[i].interval;
800033c4:	f0 09 00 09 	add	r9,r8,r9
800033c8:	f4 ca fc 90 	sub	r10,r10,-880

				s8 x = es.p[p_select].e[i].x + es.p[p_select].x;
				s8 y = es.p[p_select].e[i].y + es.p[p_select].y;
800033cc:	f3 0c 00 70 	ld.sh	r12,r9[112]
				}

				u8 i = p_play_pos;
				p_timer = es.p[p_select].e[i].interval;

				s8 x = es.p[p_select].e[i].x + es.p[p_select].x;
800033d0:	b6 0c       	st.h	r11[0x0],r12
800033d2:	29 49       	sub	r9,-108
				s8 y = es.p[p_select].e[i].y + es.p[p_select].y;
800033d4:	15 a4       	ld.ub	r4,r10[0x2]
	u8 i;

	// print_dbg("\r\nfound shape: ");
	// print_dbg_ulong(s);

	if(s == 100) {
800033d6:	13 86       	ld.ub	r6,r9[0x0]
800033d8:	13 9b       	ld.ub	r11,r9[0x1]
800033da:	15 93       	ld.ub	r3,r10[0x1]
800033dc:	13 a9       	ld.ub	r9,r9[0x2]
		if(es.edge == eStandard) {
800033de:	36 4a       	mov	r10,100
800033e0:	f4 06 18 00 	cp.b	r6,r10
800033e4:	c0 c1       	brne	800033fc <clockTimer_callback+0x314>
			gpio_clr_gpio_pin(B00);
800033e6:	70 07       	ld.w	r7,r8[0x0]
800033e8:	58 07       	cp.w	r7,0
800033ea:	e0 81 00 fd 	brne	800035e4 <clockTimer_callback+0x4fc>
			edge_state = 0;
800033ee:	32 0c       	mov	r12,32
800033f0:	e0 a0 16 55 	rcall	8000609a <gpio_clr_gpio_pin>
800033f4:	e0 68 3c 44 	mov	r8,15428
800033f8:	b0 07       	st.h	r8[0x0],r7
800033fa:	cf 58       	rjmp	800035e4 <clockTimer_callback+0x4fc>
800033fc:	30 78       	mov	r8,7
800033fe:	12 04       	add	r4,r9
80003400:	5c 64       	casts.b	r4
80003402:	e8 08 0d 44 	min	r4,r4,r8
80003406:	30 f8       	mov	r8,15
80003408:	30 05       	mov	r5,0
8000340a:	fe c9 a1 48 	sub	r9,pc,-24248
8000340e:	16 03       	add	r3,r11
80003410:	e8 05 0c 44 	max	r4,r4,r5
80003414:	5c 63       	casts.b	r3
80003416:	5c 54       	castu.b	r4
80003418:	e6 08 0d 43 	min	r3,r3,r8
8000341c:	e0 67 0b 36 	mov	r7,2870
80003420:	e6 05 0c 43 	max	r3,r3,r5
80003424:	e8 08 11 07 	rsub	r8,r4,7
80003428:	5c 53       	castu.b	r3
8000342a:	f0 08 00 28 	add	r8,r8,r8<<0x2
8000342e:	06 08       	add	r8,r3
80003430:	f2 08 04 18 	ld.sh	r8,r9[r8<<0x1]
80003434:	ef 58 00 1a 	st.h	r7[26],r8
80003438:	e0 69 3c 6c 	mov	r9,15468

				u8 i = p_play_pos;
				p_timer = es.p[p_select].e[i].interval;

				s8 x = es.p[p_select].e[i].x + es.p[p_select].x;
				s8 y = es.p[p_select].e[i].y + es.p[p_select].y;
8000343c:	13 8a       	ld.ub	r10,r9[0x0]
8000343e:	ea 0a 18 00 	cp.b	r10,r5
				// print_dbg(", ");
				// print_dbg_ulong(es.p[p_select].e[i].y);
				// print_dbg(")   NEXT: ");
				// print_dbg_ulong(es.p[p_select].e[i].interval);

				pattern_shape(es.p[p_select].e[i].shape, (u8)x, (u8)y);
80003442:	c0 a0       	breq	80003456 <clockTimer_callback+0x36e>
80003444:	ef 19 00 1c 	ld.uh	r9,r7[28]
80003448:	a3 89       	lsr	r9,0x2
		}
	}
	else {
		// cv_pos = SCALES[0][x] + (7-y)*170;

		aout[3].target = SEMI[x+(7-y)*5];
8000344a:	ef 59 00 1e 	st.h	r7[30],r9
				// print_dbg(", ");
				// print_dbg_ulong(es.p[p_select].e[i].y);
				// print_dbg(")   NEXT: ");
				// print_dbg_ulong(es.p[p_select].e[i].interval);

				pattern_shape(es.p[p_select].e[i].shape, (u8)x, (u8)y);
8000344e:	c3 81       	brne	800034be <clockTimer_callback+0x3d6>
80003450:	ef 58 00 18 	st.h	r7[24],r8
80003454:	c3 58       	rjmp	800034be <clockTimer_callback+0x3d6>
80003456:	ef 58 00 18 	st.h	r7[24],r8
		}
	}
	else {
		// cv_pos = SCALES[0][x] + (7-y)*170;

		aout[3].target = SEMI[x+(7-y)*5];
8000345a:	0a 9b       	mov	r11,r5
				// print_dbg(", ");
				// print_dbg_ulong(es.p[p_select].e[i].y);
				// print_dbg(")   NEXT: ");
				// print_dbg_ulong(es.p[p_select].e[i].interval);

				pattern_shape(es.p[p_select].e[i].shape, (u8)x, (u8)y);
8000345c:	fe 7c 24 00 	mov	r12,-56320
		}
	}
	else {
		// cv_pos = SCALES[0][x] + (7-y)*170;

		aout[3].target = SEMI[x+(7-y)*5];
80003460:	e0 a0 17 18 	rcall	80006290 <spi_selectChip>
				// print_dbg(", ");
				// print_dbg_ulong(es.p[p_select].e[i].y);
				// print_dbg(")   NEXT: ");
				// print_dbg_ulong(es.p[p_select].e[i].interval);

				pattern_shape(es.p[p_select].e[i].shape, (u8)x, (u8)y);
80003464:	33 8b       	mov	r11,56
		}
	}
	else {
		// cv_pos = SCALES[0][x] + (7-y)*170;

		aout[3].target = SEMI[x+(7-y)*5];
80003466:	fe 7c 24 00 	mov	r12,-56320
8000346a:	e0 a0 17 a2 	rcall	800063ae <spi_write>
8000346e:	ef 0b 00 18 	ld.sh	r11,r7[24]
80003472:	fe 7c 24 00 	mov	r12,-56320
		// aout[3].target = TONE[x*scale[scale_x]+(7-y)*scale[scale_y]];


		if(port_active) {
80003476:	f7 db c0 90 	bfextu	r11,r11,0x4,0x10
8000347a:	e0 a0 17 9a 	rcall	800063ae <spi_write>
			aout[3].step = aout[3].slew >> 2;
8000347e:	ef 0b 00 18 	ld.sh	r11,r7[24]
80003482:	fe 7c 24 00 	mov	r12,-56320
80003486:	a5 6b       	lsl	r11,0x4
			if(!aout[3].step)
80003488:	e2 1b ff f0 	andl	r11,0xfff0,COH
				aout[3].now = aout[3].target;
8000348c:	e0 a0 17 91 	rcall	800063ae <spi_write>
		}
		else {
			aout[3].now = aout[3].target;
80003490:	e0 6b 00 80 	mov	r11,128
		}

		if(!port_active) {
			spi_selectChip(SPI,DAC_SPI);
80003494:	fe 7c 24 00 	mov	r12,-56320
80003498:	e0 a0 17 8b 	rcall	800063ae <spi_write>
8000349c:	e0 6b 00 ff 	mov	r11,255

			spi_write(SPI,0x38);	// update B
800034a0:	fe 7c 24 00 	mov	r12,-56320
800034a4:	e0 a0 17 85 	rcall	800063ae <spi_write>
			spi_write(SPI,aout[3].now>>4);
800034a8:	e0 6b 00 ff 	mov	r11,255
800034ac:	fe 7c 24 00 	mov	r12,-56320
800034b0:	e0 a0 17 7f 	rcall	800063ae <spi_write>
800034b4:	0a 9b       	mov	r11,r5
800034b6:	fe 7c 24 00 	mov	r12,-56320
			spi_write(SPI,aout[3].now<<4);
800034ba:	e0 a0 17 13 	rcall	800062e0 <spi_unselectChip>
800034be:	58 06       	cp.w	r6,0
800034c0:	c0 41       	brne	800034c8 <clockTimer_callback+0x3e0>
800034c2:	30 19       	mov	r9,1
800034c4:	c4 a8       	rjmp	80003558 <clockTimer_callback+0x470>
800034c6:	d7 03       	nop
800034c8:	e0 6b 3d 7d 	mov	r11,15741

			spi_write(SPI,0x80);	// update B
800034cc:	ec c8 00 01 	sub	r8,r6,1
800034d0:	17 89       	ld.ub	r9,r11[0x0]
800034d2:	10 39       	cp.w	r9,r8
800034d4:	c4 10       	breq	80003556 <clockTimer_callback+0x46e>
			spi_write(SPI,0xff);
800034d6:	e0 69 0b 36 	mov	r9,2870
800034da:	ec ca 00 01 	sub	r10,r6,1
800034de:	12 98       	mov	r8,r9
800034e0:	5c 5a       	castu.b	r10
			spi_write(SPI,0xff);
800034e2:	2f c9       	sub	r9,-4
800034e4:	b6 8a       	st.b	r11[0x0],r10
800034e6:	f0 c5 ff e8 	sub	r5,r8,-24
800034ea:	f4 0a 00 1a 	add	r10,r10,r10<<0x1

			spi_unselectChip(SPI,DAC_SPI);
800034ee:	e0 6b 0b 58 	mov	r11,2904
800034f2:	a1 7a       	lsl	r10,0x1
800034f4:	e0 67 0f 9f 	mov	r7,3999
		}

		if(s == 0) {
800034f8:	2c 4a       	sub	r10,-60
800034fa:	fe cc a4 38 	sub	r12,pc,-23496
			singled = 1;
800034fe:	16 0a       	add	r10,r11
80003500:	94 0b       	ld.sh	r11,r10[0x0]
80003502:	fd db c0 8c 	bfextu	lr,r11,0x4,0xc
80003506:	ee 0b 19 00 	cp.h	r11,r7
8000350a:	e0 8b 00 05 	brhi	80003514 <clockTimer_callback+0x42c>
8000350e:	f5 02 ff d0 	ld.sh	r2,r10[-48]
80003512:	b0 12       	st.h	r8[0x2],r2
80003514:	b2 0b       	st.h	r9[0x0],r11
80003516:	f8 0e 04 1b 	ld.sh	r11,r12[lr<<0x1]
		}
		else {
			if(shape_on != (s-1)) {
8000351a:	b2 1b       	st.h	r9[0x2],r11
8000351c:	58 0b       	cp.w	r11,0
8000351e:	c0 31       	brne	80003524 <clockTimer_callback+0x43c>
80003520:	90 1b       	ld.sh	r11,r8[0x2]
80003522:	b0 0b       	st.h	r8[0x0],r11
				shape_on = s-1;
80003524:	2f ea       	sub	r10,-2
80003526:	2f 89       	sub	r9,-8
80003528:	2f 88       	sub	r8,-8
8000352a:	0a 38       	cp.w	r8,r5
8000352c:	ce a1       	brne	80003500 <clockTimer_callback+0x418>
8000352e:	e0 68 3d 84 	mov	r8,15748
	spi_write(SPI,aout[1].now>>4);
	spi_write(SPI,aout[1].now<<4);
	spi_unselectChip(SPI,DAC_SPI);
}

static void clockTimer_callback(void* o) {  
80003532:	30 09       	mov	r9,0
80003534:	e0 6a 3c 50 	mov	r10,15440
		if(s == 0) {
			singled = 1;
		}
		else {
			if(shape_on != (s-1)) {
				shape_on = s-1;
80003538:	f1 69 00 0a 	st.b	r8[10],r9
8000353c:	b0 a9       	st.b	r8[0x2],r9

				for(i=0;i<3;i++) {
					// don't change CV if above thresh
					if(es.slew[shape_on][i] < SLEW_CV_OFF_THRESH) {
8000353e:	b0 e9       	st.b	r8[0x6],r9
80003540:	94 2b       	ld.sh	r11,r10[0x4]
		if(s == 0) {
			singled = 1;
		}
		else {
			if(shape_on != (s-1)) {
				shape_on = s-1;
80003542:	b0 4b       	st.h	r8[0x8],r11
					if(es.slew[shape_on][i] < SLEW_CV_OFF_THRESH) {
						aout[i].target = es.cv[shape_on][i];
					}

					aout[i].slew = es.slew[shape_on][i];
					aout[i].step = EXP[aout[i].slew >> 4];
80003544:	e0 69 3c 58 	mov	r9,15448
			if(shape_on != (s-1)) {
				shape_on = s-1;

				for(i=0;i<3;i++) {
					// don't change CV if above thresh
					if(es.slew[shape_on][i] < SLEW_CV_OFF_THRESH) {
80003548:	b2 2b       	st.h	r9[0x4],r11
						aout[i].target = es.cv[shape_on][i];
					}

					aout[i].slew = es.slew[shape_on][i];
					aout[i].step = EXP[aout[i].slew >> 4];
8000354a:	94 0b       	ld.sh	r11,r10[0x0]
8000354c:	b0 0b       	st.h	r8[0x0],r11
			if(shape_on != (s-1)) {
				shape_on = s-1;

				for(i=0;i<3;i++) {
					// don't change CV if above thresh
					if(es.slew[shape_on][i] < SLEW_CV_OFF_THRESH) {
8000354e:	b2 0b       	st.h	r9[0x0],r11
80003550:	94 1a       	ld.sh	r10,r10[0x2]
80003552:	b0 2a       	st.h	r8[0x4],r10
80003554:	b2 1a       	st.h	r9[0x2],r10
						aout[i].target = es.cv[shape_on][i];
80003556:	30 09       	mov	r9,0
80003558:	e0 68 3d 80 	mov	r8,15744
					}

					aout[i].slew = es.slew[shape_on][i];
8000355c:	b0 89       	st.b	r8[0x0],r9
					aout[i].step = EXP[aout[i].slew >> 4];
8000355e:	e0 67 0b 58 	mov	r7,2904
80003562:	6e 08       	ld.w	r8,r7[0x0]
					if(!aout[i].step) 
80003564:	58 28       	cp.w	r8,2
80003566:	c2 01       	brne	800035a6 <clockTimer_callback+0x4be>
						aout[i].now = aout[i].target;
80003568:	e0 68 0b 2f 	mov	r8,2863
8000356c:	11 88       	ld.ub	r8,r8[0x0]
8000356e:	e6 08 18 00 	cp.b	r8,r3
		}
		else {
			if(shape_on != (s-1)) {
				shape_on = s-1;

				for(i=0;i<3;i++) {
80003572:	c1 31       	brne	80003598 <clockTimer_callback+0x4b0>
80003574:	e0 68 3d 7c 	mov	r8,15740

void reset_hys() {
	u8 i1;

	for(i1=0;i1<3;i1++) {
		ain[i1].hys = 0;
80003578:	11 88       	ld.ub	r8,r8[0x0]
		ain[i1].latch = adc_last[i1] = adc[i1];
8000357a:	e8 08 18 00 	cp.b	r8,r4

void reset_hys() {
	u8 i1;

	for(i1=0;i1<3;i1++) {
		ain[i1].hys = 0;
8000357e:	c0 d1       	brne	80003598 <clockTimer_callback+0x4b0>
80003580:	e0 67 3c 44 	mov	r7,15428
		ain[i1].latch = adc_last[i1] = adc[i1];
80003584:	30 06       	mov	r6,0
80003586:	8e 08       	ld.sh	r8,r7[0x0]
80003588:	ec 08 19 00 	cp.h	r8,r6
8000358c:	c0 60       	breq	80003598 <clockTimer_callback+0x4b0>
8000358e:	32 0c       	mov	r12,32
80003590:	e0 a0 15 85 	rcall	8000609a <gpio_clr_gpio_pin>
80003594:	ae 06       	st.h	r7[0x0],r6
80003596:	c2 18       	rjmp	800035d8 <clockTimer_callback+0x4f0>
				}

				reset_hys();
			}

			singled = 0;
80003598:	32 0c       	mov	r12,32
8000359a:	e0 a0 15 73 	rcall	80006080 <gpio_set_gpio_pin>
		}

		if(es.edge == eDrone) {
8000359e:	30 19       	mov	r9,1
800035a0:	e0 68 3c 44 	mov	r8,15428
800035a4:	c1 98       	rjmp	800035d6 <clockTimer_callback+0x4ee>
			if(root_x == x && root_y == y && edge_state) {
800035a6:	30 48       	mov	r8,4
800035a8:	f0 06 18 00 	cp.b	r6,r8
800035ac:	e0 8b 00 16 	brhi	800035d8 <clockTimer_callback+0x4f0>
800035b0:	32 0c       	mov	r12,32
800035b2:	e0 a0 15 67 	rcall	80006080 <gpio_set_gpio_pin>
800035b6:	e0 68 3c 44 	mov	r8,15428
800035ba:	30 19       	mov	r9,1
800035bc:	b0 09       	st.h	r8[0x0],r9
800035be:	6e 08       	ld.w	r8,r7[0x0]
800035c0:	58 18       	cp.w	r8,1
800035c2:	c0 b1       	brne	800035d8 <clockTimer_callback+0x4f0>
800035c4:	fe c8 a5 02 	sub	r8,pc,-23294
				gpio_clr_gpio_pin(B00);
800035c8:	8e a9       	ld.uh	r9,r7[0x4]
800035ca:	f0 09 05 19 	ld.uh	r9,r8[r9<<0x1]
				edge_state = 0;
800035ce:	e0 68 0b 22 	mov	r8,2850
			}
			else {
				gpio_set_gpio_pin(B00);
800035d2:	a3 89       	lsr	r9,0x2
800035d4:	2f e9       	sub	r9,-2
				edge_state = 1;
800035d6:	b0 09       	st.h	r8[0x0],r9
800035d8:	e0 68 0b 2f 	mov	r8,2863
			}
		}
		else if(s<5) {
800035dc:	b0 83       	st.b	r8[0x0],r3
800035de:	e0 68 3d 7c 	mov	r8,15740
800035e2:	b0 84       	st.b	r8[0x0],r4
800035e4:	e0 69 07 90 	mov	r9,1936
			gpio_set_gpio_pin(B00);
800035e8:	e0 68 3d 92 	mov	r8,15762
			edge_state = 1;
800035ec:	13 8a       	ld.ub	r10,r9[0x0]
800035ee:	2f fa       	sub	r10,-1
800035f0:	b2 8a       	st.b	r9[0x0],r10

			if(es.edge == eFixed) {
800035f2:	11 89       	ld.ub	r9,r8[0x0]
800035f4:	2f f9       	sub	r9,-1
800035f6:	b0 89       	st.b	r8[0x0],r9
				edge_counter = (EXP[es.edge_fixed_time]>>2) + 2;
800035f8:	c0 48       	rjmp	80003600 <clockTimer_callback+0x518>
800035fa:	d7 03       	nop
800035fc:	20 18       	sub	r8,1
800035fe:	b2 08       	st.h	r9[0x0],r8
80003600:	e0 69 3d 98 	mov	r9,15768
80003604:	e0 68 07 90 	mov	r8,1936
				// print_dbg("\r\ntrig fixed: ");
				// print_dbg_ulong(edge_counter);
			}
		}

		root_x = x;
80003608:	92 0a       	ld.sh	r10,r9[0x0]
8000360a:	2f fa       	sub	r10,-1
		root_y = y;
8000360c:	b2 0a       	st.h	r9[0x0],r10
8000360e:	11 89       	ld.ub	r9,r8[0x0]
	}

	monomeFrameDirty++;
80003610:	2f f9       	sub	r9,-1
				// print_dbg_ulong(es.p[p_select].e[i].interval);

				pattern_shape(es.p[p_select].e[i].shape, (u8)x, (u8)y);


				p_play_pos++;
80003612:	b0 89       	st.b	r8[0x0],r9

		root_x = x;
		root_y = y;
	}

	monomeFrameDirty++;
80003614:	e0 68 3d 78 	mov	r8,15736
80003618:	70 08       	ld.w	r8,r8[0x0]
				// print_dbg_ulong(es.p[p_select].e[i].interval);

				pattern_shape(es.p[p_select].e[i].shape, (u8)x, (u8)y);


				p_play_pos++;
8000361a:	58 28       	cp.w	r8,2
8000361c:	c0 e0       	breq	80003638 <clockTimer_callback+0x550>
8000361e:	e0 68 3d 96 	mov	r8,15766
80003622:	30 09       	mov	r9,0
80003624:	11 88       	ld.ub	r8,r8[0x0]
80003626:	f2 08 18 00 	cp.b	r8,r9
8000362a:	c0 71       	brne	80003638 <clockTimer_callback+0x550>
8000362c:	e0 69 0b 35 	mov	r9,2869
80003630:	13 89       	ld.ub	r9,r9[0x0]
80003632:	f0 09 18 00 	cp.b	r9,r8
80003636:	c2 11       	brne	80003678 <clockTimer_callback+0x590>
80003638:	e0 68 0b 25 	mov	r8,2853
8000363c:	11 89       	ld.ub	r9,r8[0x0]
8000363e:	2f f9       	sub	r9,-1
80003640:	b0 89       	st.b	r8[0x0],r9
80003642:	33 0a       	mov	r10,48
80003644:	f4 09 18 00 	cp.b	r9,r10
80003648:	c0 31       	brne	8000364e <clockTimer_callback+0x566>
8000364a:	30 09       	mov	r9,0
8000364c:	b0 89       	st.b	r8[0x0],r9
8000364e:	e0 68 0b 25 	mov	r8,2853
80003652:	11 89       	ld.ub	r9,r8[0x0]
80003654:	31 88       	mov	r8,24
80003656:	f0 09 18 00 	cp.b	r9,r8
8000365a:	5f 0a       	sreq	r10
8000365c:	30 08       	mov	r8,0
8000365e:	f0 09 18 00 	cp.b	r9,r8
80003662:	5f 09       	sreq	r9

			}
		}
		else p_timer--;
80003664:	f5 e9 10 09 	or	r9,r10,r9

		p_timer_total++;
80003668:	f0 09 18 00 	cp.b	r9,r8
8000366c:	c0 60       	breq	80003678 <clockTimer_callback+0x590>
8000366e:	e0 68 07 90 	mov	r8,1936

		monomeFrameDirty++;
80003672:	11 89       	ld.ub	r9,r8[0x0]
80003674:	2f f9       	sub	r9,-1
80003676:	b0 89       	st.b	r8[0x0],r9
	}

	if(r_status == rRec || all_edit || !VARI) {
80003678:	d8 32       	popm	r0-r7,pc
8000367a:	d7 03       	nop

8000367c <handler_MonomeRefresh>:
8000367c:	d4 21       	pushm	r4-r7,lr
8000367e:	e0 68 07 90 	mov	r8,1936
80003682:	11 89       	ld.ub	r9,r8[0x0]
80003684:	30 08       	mov	r8,0
80003686:	f0 09 18 00 	cp.b	r9,r8
8000368a:	c4 60       	breq	80003716 <handler_MonomeRefresh+0x9a>
8000368c:	e0 69 0b 32 	mov	r9,2866
80003690:	13 89       	ld.ub	r9,r9[0x0]
80003692:	f0 09 18 00 	cp.b	r9,r8
		blinker++;
80003696:	c0 61       	brne	800036a2 <handler_MonomeRefresh+0x26>
80003698:	e0 68 0b 28 	mov	r8,2856
8000369c:	70 08       	ld.w	r8,r8[0x0]
		if(blinker == 48)
8000369e:	5d 18       	icall	r8
800036a0:	c3 78       	rjmp	8000370e <handler_MonomeRefresh+0x92>
800036a2:	30 08       	mov	r8,0
800036a4:	e0 6c 3d e4 	mov	r12,15844
			blinker = 0;
800036a8:	10 9b       	mov	r11,r8
		if(blinker == 0 || blinker == 24)
800036aa:	38 0a       	mov	r10,-128
800036ac:	f8 08 0b 0b 	st.b	r12[r8],r11
800036b0:	e0 69 3d e4 	mov	r9,15844
800036b4:	2f f8       	sub	r8,-1
800036b6:	5c 58       	castu.b	r8
800036b8:	f4 08 18 00 	cp.b	r8,r10
800036bc:	cf 81       	brne	800036ac <handler_MonomeRefresh+0x30>
800036be:	30 b8       	mov	r8,11
800036c0:	e0 6a 0b 2c 	mov	r10,2860
800036c4:	15 8a       	ld.ub	r10,r10[0x0]
800036c6:	a5 6a       	lsl	r10,0x4
			monomeFrameDirty++;
800036c8:	10 9e       	mov	lr,r8
800036ca:	f2 0a 0b 08 	st.b	r9[r10],r8
800036ce:	12 97       	mov	r7,r9
800036d0:	e0 68 3c 64 	mov	r8,15460
800036d4:	30 8a       	mov	r10,8
800036d6:	f0 0a 00 0c 	add	r12,r8,r10
800036da:	c0 f8       	rjmp	800036f8 <handler_MonomeRefresh+0x7c>
800036dc:	ec 09 08 45 	asr	r5,r6,r9
800036e0:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
800036e4:	c0 20       	breq	800036e8 <handler_MonomeRefresh+0x6c>
800036e6:	b6 8e       	st.b	r11[0x0],lr
800036e8:	2f f9       	sub	r9,-1
800036ea:	2f fb       	sub	r11,-1

	monomeLedBuffer[preset_select * 16] = 11;

	for(i1=0;i1<8;i1++)
		for(i2=0;i2<8;i2++)
			if(glyph[i1] & (1<<i2))
800036ec:	58 89       	cp.w	r9,8
800036ee:	cf 71       	brne	800036dc <handler_MonomeRefresh+0x60>
800036f0:	2f f8       	sub	r8,-1
800036f2:	2f 0a       	sub	r10,-16
				monomeLedBuffer[i1*16+i2+8] = 11;

	monome_set_quadrant_flag(0);
800036f4:	18 38       	cp.w	r8,r12
800036f6:	c0 60       	breq	80003702 <handler_MonomeRefresh+0x86>
800036f8:	11 86       	ld.ub	r6,r8[0x0]
	monome_set_quadrant_flag(1);
800036fa:	f4 07 00 0b 	add	r11,r10,r7
800036fe:	30 09       	mov	r9,0
static void handler_MonomeRefresh(s32 data) {
	if(monomeFrameDirty) {
		if(preset_mode == 0) (*re)(); //refresh_mono();
		else refresh_preset();

		(*monome_refresh)();
80003700:	ce eb       	rjmp	800036dc <handler_MonomeRefresh+0x60>
80003702:	30 0c       	mov	r12,0
80003704:	e0 a0 0b 48 	rcall	80004d94 <monome_set_quadrant_flag>
80003708:	30 1c       	mov	r12,1
8000370a:	e0 a0 0b 45 	rcall	80004d94 <monome_set_quadrant_flag>
8000370e:	e0 68 3d d8 	mov	r8,15832
80003712:	70 08       	ld.w	r8,r8[0x0]
80003714:	5d 18       	icall	r8
80003716:	d8 22       	popm	r4-r7,pc

80003718 <refresh_mono>:
80003718:	d4 31       	pushm	r0-r7,lr
8000371a:	20 1d       	sub	sp,4
8000371c:	30 08       	mov	r8,0
8000371e:	e0 6c 3d e4 	mov	r12,15844
80003722:	10 9b       	mov	r11,r8
80003724:	38 0a       	mov	r10,-128
80003726:	f8 08 0b 0b 	st.b	r12[r8],r11
// application grid redraw without varibright
static void refresh_mono() {
	u8 i1, i2, i3;

	// CLEAR // FIXME: optimize? 
	for(i1=0;i1<128;i1++) monomeLedBuffer[i1] = 0;
8000372a:	e0 69 3d e4 	mov	r9,15844
8000372e:	2f f8       	sub	r8,-1
80003730:	5c 58       	castu.b	r8
80003732:	f4 08 18 00 	cp.b	r8,r10

	// REC STATUS
	if(r_status == rArm) monomeLedBuffer[32] = 15;
80003736:	cf 81       	brne	80003726 <refresh_mono+0xe>
80003738:	e0 68 3d 78 	mov	r8,15736
8000373c:	70 08       	ld.w	r8,r8[0x0]
8000373e:	58 18       	cp.w	r8,1
	else if(r_status == rRec) monomeLedBuffer[32] = 15 * (blinker < 24);
80003740:	c0 31       	brne	80003746 <refresh_mono+0x2e>
80003742:	30 f8       	mov	r8,15
80003744:	c0 d8       	rjmp	8000375e <refresh_mono+0x46>
80003746:	58 28       	cp.w	r8,2
80003748:	c0 d1       	brne	80003762 <refresh_mono+0x4a>
8000374a:	e0 68 0b 25 	mov	r8,2853
8000374e:	11 8a       	ld.ub	r10,r8[0x0]
80003750:	31 78       	mov	r8,23
80003752:	f0 0a 18 00 	cp.b	r10,r8
80003756:	f9 b8 08 0f 	movls	r8,15

	// LOOP and MODE 
	if(es.p[p_select].loop) monomeLedBuffer[48] = 15;
8000375a:	f9 b8 0b 00 	movhi	r8,0
8000375e:	f3 68 00 20 	st.b	r9[32],r8
80003762:	e0 6a 0b 58 	mov	r10,2904
80003766:	e0 68 3c 62 	mov	r8,15458
8000376a:	e0 69 03 08 	mov	r9,776
8000376e:	11 88       	ld.ub	r8,r8[0x0]
80003770:	f0 09 02 49 	mul	r9,r8,r9
80003774:	f4 09 00 09 	add	r9,r10,r9
80003778:	f3 3a 03 70 	ld.ub	r10,r9[880]
8000377c:	30 09       	mov	r9,0
8000377e:	f2 0a 18 00 	cp.b	r10,r9
	if(arp) monomeLedBuffer[64] = 15;
80003782:	c0 60       	breq	8000378e <refresh_mono+0x76>
80003784:	30 fa       	mov	r10,15
80003786:	e0 69 3d e4 	mov	r9,15844
8000378a:	f3 6a 00 30 	st.b	r9[48],r10
8000378e:	e0 69 0b 33 	mov	r9,2867

	// PATTERN PLAY MODE
	if(mode == mBank) monomeLedBuffer[16] = 15;
80003792:	13 8b       	ld.ub	r11,r9[0x0]
80003794:	58 0b       	cp.w	r11,0
80003796:	c0 60       	breq	800037a2 <refresh_mono+0x8a>
80003798:	30 fa       	mov	r10,15
8000379a:	e0 69 3d e4 	mov	r9,15844
8000379e:	f3 6a 00 40 	st.b	r9[64],r10

	// PATTERN INDICATION
	if(p_playing) {
800037a2:	e0 69 3c 48 	mov	r9,15432
800037a6:	72 0e       	ld.w	lr,r9[0x0]
800037a8:	58 4e       	cp.w	lr,4
800037aa:	c0 61       	brne	800037b6 <refresh_mono+0x9e>
800037ac:	30 fa       	mov	r10,15
		i2 = p_timer_total / (es.p[p_select].total_time / 16);
800037ae:	e0 69 3d e4 	mov	r9,15844
800037b2:	f3 6a 00 10 	st.b	r9[16],r10
800037b6:	e0 69 3d 81 	mov	r9,15745
800037ba:	e0 6a 0b 58 	mov	r10,2904
800037be:	13 89       	ld.ub	r9,r9[0x0]
800037c0:	30 0c       	mov	r12,0
800037c2:	f8 09 18 00 	cp.b	r9,r12
800037c6:	c1 e0       	breq	80003802 <refresh_mono+0xea>
800037c8:	e0 6c 03 08 	mov	r12,776

		for(i1=0;i1<16;i1++)
800037cc:	e0 69 3d 98 	mov	r9,15768
			if(i1 < i2) monomeLedBuffer[i1] = 15;
800037d0:	f0 0c 03 4a 	mac	r10,r8,r12
800037d4:	92 89       	ld.uh	r9,r9[0x0]

	// PATTERN INDICATION
	if(p_playing) {
		i2 = p_timer_total / (es.p[p_select].total_time / 16);

		for(i1=0;i1<16;i1++)
800037d6:	f5 17 03 6e 	ld.uh	r7,r10[878]
800037da:	a5 87       	lsr	r7,0x4
800037dc:	f2 07 0d 06 	divu	r6,r9,r7
800037e0:	e0 6a 3d e4 	mov	r10,15844
			if(i1 < i2) monomeLedBuffer[i1] = 15;
	}
	else if(es.p[p_select].length != 0) monomeLedBuffer[0] = 15;
800037e4:	5c 56       	castu.b	r6
800037e6:	30 09       	mov	r9,0
800037e8:	30 f7       	mov	r7,15
800037ea:	31 0c       	mov	r12,16
800037ec:	ec 09 18 00 	cp.b	r9,r6
800037f0:	c0 22       	brcc	800037f4 <refresh_mono+0xdc>
800037f2:	b4 87       	st.b	r10[0x0],r7
800037f4:	2f f9       	sub	r9,-1
800037f6:	2f fa       	sub	r10,-1
800037f8:	5c 59       	castu.b	r9
800037fa:	f8 09 18 00 	cp.b	r9,r12

	// PORT INDICATOR
	if(port_toggle) monomeLedBuffer[112] = 15;
800037fe:	cf 71       	brne	800037ec <refresh_mono+0xd4>
80003800:	c0 e8       	rjmp	8000381c <refresh_mono+0x104>
80003802:	e0 6c 03 08 	mov	r12,776
80003806:	f0 0c 03 4a 	mac	r10,r8,r12
8000380a:	f5 3a 03 6c 	ld.ub	r10,r10[876]
8000380e:	f2 0a 18 00 	cp.b	r10,r9

	// EDGE SELECT
	if(mode == mEdge) {
80003812:	c0 50       	breq	8000381c <refresh_mono+0x104>
		for(i1=0;i1<3;i1++) {
			for(i2=0;i2<4;i2++) {
				for(i3=0;i3<4;i3++) {
					if(((EDGE_GLYPH[i1][i2] >> i3) & 1)) {
						if(es.edge == i1)
80003814:	30 fa       	mov	r10,15
80003816:	e0 69 3d e4 	mov	r9,15844
							monomeLedBuffer[34 + (i1*5) + i2*16 + i3] = (blinker < 24) * 15;
8000381a:	b2 8a       	st.b	r9[0x0],r10
8000381c:	e0 69 3c 4c 	mov	r9,15436
80003820:	13 8a       	ld.ub	r10,r9[0x0]
80003822:	30 09       	mov	r9,0
80003824:	f2 0a 18 00 	cp.b	r10,r9
80003828:	c0 60       	breq	80003834 <refresh_mono+0x11c>
8000382a:	30 fa       	mov	r10,15
	// EDGE SELECT
	if(mode == mEdge) {
		for(i1=0;i1<3;i1++) {
			for(i2=0;i2<4;i2++) {
				for(i3=0;i3<4;i3++) {
					if(((EDGE_GLYPH[i1][i2] >> i3) & 1)) {
8000382c:	e0 69 3d e4 	mov	r9,15844
						if(es.edge == i1)
							monomeLedBuffer[34 + (i1*5) + i2*16 + i3] = (blinker < 24) * 15;
						else
							monomeLedBuffer[34 + (i1*5) + i2*16 + i3] = 15;
80003830:	f3 6a 00 70 	st.b	r9[112],r10
	// EDGE SELECT
	if(mode == mEdge) {
		for(i1=0;i1<3;i1++) {
			for(i2=0;i2<4;i2++) {
				for(i3=0;i3<4;i3++) {
					if(((EDGE_GLYPH[i1][i2] >> i3) & 1)) {
80003834:	58 2e       	cp.w	lr,2
80003836:	c4 d1       	brne	800038d0 <refresh_mono+0x1b8>
80003838:	e0 68 0b 58 	mov	r8,2904
8000383c:	70 05       	ld.w	r5,r8[0x0]
						if(es.edge == i1)
8000383e:	e0 68 0b 25 	mov	r8,2853
							monomeLedBuffer[34 + (i1*5) + i2*16 + i3] = (blinker < 24) * 15;
80003842:	11 88       	ld.ub	r8,r8[0x0]
80003844:	31 72       	mov	r2,23
80003846:	32 29       	mov	r9,34
80003848:	f0 02 18 00 	cp.b	r2,r8
8000384c:	f9 b2 02 0f 	movhs	r2,15
80003850:	f9 b2 03 00 	movlo	r2,0
80003854:	e0 64 3d e4 	mov	r4,15844
80003858:	30 08       	mov	r8,0
8000385a:	30 f3       	mov	r3,15
8000385c:	c2 18       	rjmp	8000389e <refresh_mono+0x186>
8000385e:	e2 0b 08 40 	asr	r0,r1,r11
80003862:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
80003866:	c0 60       	breq	80003872 <refresh_mono+0x15a>
80003868:	10 35       	cp.w	r5,r8
8000386a:	c0 31       	brne	80003870 <refresh_mono+0x158>
8000386c:	ac 82       	st.b	r6[0x0],r2
8000386e:	c0 28       	rjmp	80003872 <refresh_mono+0x15a>
						else
							monomeLedBuffer[34 + (i1*5) + i2*16 + i3] = 15;
80003870:	ae 83       	st.b	r7[0x0],r3
80003872:	2f fb       	sub	r11,-1
80003874:	2f f6       	sub	r6,-1
80003876:	2f f7       	sub	r7,-1

	// EDGE SELECT
	if(mode == mEdge) {
		for(i1=0;i1<3;i1++) {
			for(i2=0;i2<4;i2++) {
				for(i3=0;i3<4;i3++) {
80003878:	58 4b       	cp.w	r11,4
8000387a:	cf 21       	brne	8000385e <refresh_mono+0x146>
8000387c:	2f fe       	sub	lr,-1
8000387e:	2f 0a       	sub	r10,-16
80003880:	2f 0c       	sub	r12,-16
	if(port_toggle) monomeLedBuffer[112] = 15;

	// EDGE SELECT
	if(mode == mEdge) {
		for(i1=0;i1<3;i1++) {
			for(i2=0;i2<4;i2++) {
80003882:	40 0b       	lddsp	r11,sp[0x0]
80003884:	16 3a       	cp.w	r10,r11
80003886:	c0 80       	breq	80003896 <refresh_mono+0x17e>
				for(i3=0;i3<4;i3++) {
					if(((EDGE_GLYPH[i1][i2] >> i3) & 1)) {
80003888:	1d 81       	ld.ub	r1,lr[0x0]
8000388a:	f4 04 00 06 	add	r6,r10,r4
8000388e:	f8 04 00 07 	add	r7,r12,r4
80003892:	30 0b       	mov	r11,0
80003894:	ce 5b       	rjmp	8000385e <refresh_mono+0x146>
80003896:	2f f8       	sub	r8,-1
80003898:	2f b9       	sub	r9,-5
	// PORT INDICATOR
	if(port_toggle) monomeLedBuffer[112] = 15;

	// EDGE SELECT
	if(mode == mEdge) {
		for(i1=0;i1<3;i1++) {
8000389a:	58 38       	cp.w	r8,3
8000389c:	c0 b0       	breq	800038b2 <refresh_mono+0x19a>
8000389e:	f2 ca ff c0 	sub	r10,r9,-64
800038a2:	fe ce a8 8a 	sub	lr,pc,-22390
800038a6:	50 0a       	stdsp	sp[0x0],r10
800038a8:	fc 08 00 2e 	add	lr,lr,r8<<0x2
800038ac:	12 9c       	mov	r12,r9
800038ae:	12 9a       	mov	r10,r9
						// monomeLedBuffer[34 + (i1*5) + i2*16 + i3] = 4;
				}
			}
		}

		if(es.edge == eFixed) 
800038b0:	ce cb       	rjmp	80003888 <refresh_mono+0x170>
800038b2:	58 15       	cp.w	r5,1
800038b4:	e0 81 01 67 	brne	80003b82 <refresh_mono+0x46a>
			monomeLedBuffer[112 + (es.edge_fixed_time>>4)] = 15;
800038b8:	e0 69 3d e4 	mov	r9,15844
800038bc:	e0 68 0b 58 	mov	r8,2904
800038c0:	90 a8       	ld.uh	r8,r8[0x4]
800038c2:	a5 88       	lsr	r8,0x4
800038c4:	f2 08 00 08 	add	r8,r9,r8
800038c8:	30 f9       	mov	r9,15
	}
	// SELECT PATTERN
	else if(mode == mSelect || mode == mBank) {
800038ca:	f1 69 00 70 	st.b	r8[112],r9
800038ce:	c5 a9       	rjmp	80003b82 <refresh_mono+0x46a>
800038d0:	fc c9 00 03 	sub	r9,lr,3
		for(i1=0;i1<4;i1++)
800038d4:	58 19       	cp.w	r9,1

		if(es.edge == eFixed) 
			monomeLedBuffer[112 + (es.edge_fixed_time>>4)] = 15;
	}
	// SELECT PATTERN
	else if(mode == mSelect || mode == mBank) {
800038d6:	e0 8b 00 2d 	brhi	80003930 <refresh_mono+0x218>
		for(i1=0;i1<4;i1++)
800038da:	e0 6b 3d e4 	mov	r11,15844
			for(i2=0;i2<4;i2++)
				monomeLedBuffer[i1*16+i2+34] = 15;
800038de:	32 29       	mov	r9,34
800038e0:	f6 ce ff fc 	sub	lr,r11,-4
			monomeLedBuffer[112 + (es.edge_fixed_time>>4)] = 15;
	}
	// SELECT PATTERN
	else if(mode == mSelect || mode == mBank) {
		for(i1=0;i1<4;i1++)
			for(i2=0;i2<4;i2++)
800038e4:	30 fc       	mov	r12,15
800038e6:	c0 88       	rjmp	800038f6 <refresh_mono+0x1de>
		if(es.edge == eFixed) 
			monomeLedBuffer[112 + (es.edge_fixed_time>>4)] = 15;
	}
	// SELECT PATTERN
	else if(mode == mSelect || mode == mBank) {
		for(i1=0;i1<4;i1++)
800038e8:	14 cc       	st.b	r10++,r12
800038ea:	0e 3a       	cp.w	r10,r7
800038ec:	cf e1       	brne	800038e8 <refresh_mono+0x1d0>
800038ee:	2f 09       	sub	r9,-16
800038f0:	e0 49 00 62 	cp.w	r9,98
800038f4:	c0 60       	breq	80003900 <refresh_mono+0x1e8>
800038f6:	f2 0b 00 0a 	add	r10,r9,r11
			for(i2=0;i2<4;i2++)
				monomeLedBuffer[i1*16+i2+34] = 15;

		monomeLedBuffer[34 + (p_select%4) + (p_select / 4) * 16] = (blinker < 24) * 15;
800038fa:	f2 0e 00 07 	add	r7,r9,lr
800038fe:	cf 5b       	rjmp	800038e8 <refresh_mono+0x1d0>
80003900:	e0 69 0b 25 	mov	r9,2853
80003904:	13 8b       	ld.ub	r11,r9[0x0]
80003906:	f0 0a 16 02 	lsr	r10,r8,0x2
8000390a:	31 79       	mov	r9,23
8000390c:	a5 6a       	lsl	r10,0x4
8000390e:	f2 0b 18 00 	cp.b	r11,r9
80003912:	f9 b9 08 0f 	movls	r9,15
80003916:	f9 b9 0b 00 	movhi	r9,0
8000391a:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8000391e:	e0 6b 3d e4 	mov	r11,15844
80003922:	f6 0a 00 0a 	add	r10,r11,r10

	}
	// STATE	
	else {
		if(arp)
80003926:	f4 08 00 08 	add	r8,r10,r8
			monomeLedBuffer[(es.p[p_select].e[0].y + es.p[p_select].y) * 16 + es.p[p_select].x + es.p[p_select].e[0].x] = 15;
8000392a:	f1 69 00 22 	st.b	r8[34],r9
8000392e:	c3 59       	rjmp	80003b98 <refresh_mono+0x480>
80003930:	58 0b       	cp.w	r11,0
80003932:	c1 c0       	breq	8000396a <refresh_mono+0x252>
80003934:	e0 69 03 08 	mov	r9,776
80003938:	b3 38       	mul	r8,r9
8000393a:	e0 69 0b 58 	mov	r9,2904
8000393e:	f2 08 00 08 	add	r8,r9,r8
80003942:	f0 c9 fc 90 	sub	r9,r8,-880
80003946:	29 48       	sub	r8,-108
80003948:	f3 2b 00 02 	ld.sb	r11,r9[2]
8000394c:	11 aa       	ld.ub	r10,r8[0x2]
8000394e:	11 98       	ld.ub	r8,r8[0x1]
80003950:	f6 0a 00 0a 	add	r10,r11,r10
80003954:	e0 6b 3d e4 	mov	r11,15844
80003958:	a5 6a       	lsl	r10,0x4

		if(port_active)
8000395a:	f6 0a 00 0a 	add	r10,r11,r10
8000395e:	10 0a       	add	r10,r8
80003960:	f3 28 00 01 	ld.sb	r8,r9[1]
80003964:	30 f9       	mov	r9,15
			for(i1=0;i1<(port_time>>4)+1;i1++)
80003966:	f4 08 0b 09 	st.b	r10[r8],r9
8000396a:	e0 68 3c 6c 	mov	r8,15468
8000396e:	11 89       	ld.ub	r9,r8[0x0]
80003970:	30 08       	mov	r8,0
80003972:	f0 09 18 00 	cp.b	r9,r8
80003976:	c1 50       	breq	800039a0 <refresh_mono+0x288>
80003978:	e0 68 3d 94 	mov	r8,15764
8000397c:	e0 6a 3d e4 	mov	r10,15844
80003980:	90 8b       	ld.uh	r11,r8[0x0]
80003982:	30 f9       	mov	r9,15
80003984:	a5 8b       	lsr	r11,0x4
80003986:	30 08       	mov	r8,0
80003988:	c0 a8       	rjmp	8000399c <refresh_mono+0x284>
8000398a:	d7 03       	nop
8000398c:	f0 cc ff ff 	sub	r12,r8,-1
				monomeLedBuffer[i1 + 16] = 15;
80003990:	f4 08 00 08 	add	r8,r10,r8
80003994:	f1 69 00 10 	st.b	r8[16],r9
	else {
		if(arp)
			monomeLedBuffer[(es.p[p_select].e[0].y + es.p[p_select].y) * 16 + es.p[p_select].x + es.p[p_select].e[0].x] = 15;

		if(port_active)
			for(i1=0;i1<(port_time>>4)+1;i1++)
80003998:	f1 dc c0 08 	bfextu	r8,r12,0x0,0x8
8000399c:	10 3b       	cp.w	r11,r8
8000399e:	cf 74       	brge	8000398c <refresh_mono+0x274>
				monomeLedBuffer[i1 + 16] = 15;

		// SLEW INDICATORS
		if(mode == mSlew) {
800039a0:	58 1e       	cp.w	lr,1
800039a2:	c4 f1       	brne	80003a40 <refresh_mono+0x328>
			if(es.slew[shape_on][0] < SLEW_CV_OFF_THRESH) {
800039a4:	e0 68 3d 7d 	mov	r8,15741
800039a8:	e0 69 0b 58 	mov	r9,2904
800039ac:	11 88       	ld.ub	r8,r8[0x0]
800039ae:	f0 08 00 1a 	add	r10,r8,r8<<0x1
800039b2:	f2 0a 00 19 	add	r9,r9,r10<<0x1
800039b6:	f3 0a 00 3c 	ld.sh	r10,r9[60]
800039ba:	e0 69 0f 9f 	mov	r9,3999
800039be:	f2 0a 19 00 	cp.h	r10,r9
				// for(i1=0;i1<(aout[0].slew>>8);i1++)
					// monomeLedBuffer[80+i1] =  4;
				monomeLedBuffer[80+(aout[0].slew>>8)] =  15;
800039c2:	e0 8b 00 0c 	brhi	800039da <refresh_mono+0x2c2>
800039c6:	e0 6a 3d e4 	mov	r10,15844
800039ca:	e0 69 0b 36 	mov	r9,2870
800039ce:	13 c9       	ld.ub	r9,r9[0x4]
800039d0:	f4 09 00 09 	add	r9,r10,r9
			}

			if(es.slew[shape_on][1] < SLEW_CV_OFF_THRESH) {
800039d4:	30 fa       	mov	r10,15
800039d6:	f3 6a 00 50 	st.b	r9[80],r10
800039da:	f0 08 00 1a 	add	r10,r8,r8<<0x1
800039de:	e0 69 0b 58 	mov	r9,2904
800039e2:	f2 0a 00 19 	add	r9,r9,r10<<0x1
800039e6:	f3 0a 00 3e 	ld.sh	r10,r9[62]
800039ea:	e0 69 0f 9f 	mov	r9,3999
				// for(i1=0;i1<(aout[1].slew>>8);i1++)
					// monomeLedBuffer[96+i1] =  4;
				monomeLedBuffer[96+(aout[1].slew>>8)] =  15;
800039ee:	f2 0a 19 00 	cp.h	r10,r9
800039f2:	e0 8b 00 0d 	brhi	80003a0c <refresh_mono+0x2f4>
800039f6:	e0 6a 3d e4 	mov	r10,15844
800039fa:	e0 69 0b 36 	mov	r9,2870
			}

			if(es.slew[shape_on][2] < SLEW_CV_OFF_THRESH) {
800039fe:	f3 39 00 0c 	ld.ub	r9,r9[12]
80003a02:	f4 09 00 09 	add	r9,r10,r9
80003a06:	30 fa       	mov	r10,15
80003a08:	f3 6a 00 60 	st.b	r9[96],r10
80003a0c:	e0 69 0b 58 	mov	r9,2904
80003a10:	f0 08 00 18 	add	r8,r8,r8<<0x1
80003a14:	f2 08 00 18 	add	r8,r9,r8<<0x1
				// for(i1=0;i1<(aout[2].slew>>8);i1++)
					// monomeLedBuffer[112+i1] =  4;
				monomeLedBuffer[112+(aout[2].slew>>8)] =  15;
80003a18:	f1 09 00 40 	ld.sh	r9,r8[64]
80003a1c:	e0 68 0f 9f 	mov	r8,3999
80003a20:	f0 09 19 00 	cp.h	r9,r8
80003a24:	e0 8b 00 25 	brhi	80003a6e <refresh_mono+0x356>
80003a28:	e0 69 3d e4 	mov	r9,15844
		}
		// CV POSITIONS
		else {
			// for(i1=min(aout[0].target>>8,aout[0].now>>8);i1<max(aout[0].target>>8,aout[0].now>>8)+1;i1++)
				// monomeLedBuffer[80+i1] = 4;
			monomeLedBuffer[80+(aout[0].now>>8)] = 15;//4 + (es.slew[shape_on][0] < SLEW_CV_OFF_THRESH) * 3;
80003a2c:	e0 68 0b 36 	mov	r8,2870
80003a30:	f1 38 00 14 	ld.ub	r8,r8[20]
80003a34:	f2 08 00 08 	add	r8,r9,r8
80003a38:	30 f9       	mov	r9,15
80003a3a:	f1 69 00 70 	st.b	r8[112],r9


			// for(i1=min(aout[1].target>>8,aout[1].now>>8);i1<max(aout[1].target>>8,aout[1].now>>8)+1;i1++)
				// monomeLedBuffer[96+i1] = 4;
			monomeLedBuffer[96+(aout[1].now>>8)] = 15;//4 + (es.slew[shape_on][1] < SLEW_CV_OFF_THRESH) * 3;
80003a3e:	c1 88       	rjmp	80003a6e <refresh_mono+0x356>
80003a40:	e0 69 3d e4 	mov	r9,15844
80003a44:	e0 6a 0b 36 	mov	r10,2870
80003a48:	94 0b       	ld.sh	r11,r10[0x0]

			// for(i1=min(aout[2].target>>8,aout[2].now>>8);i1<max(aout[2].target>>8,aout[2].now>>8)+1;i1++)
				// monomeLedBuffer[112+i1] = 4;
			monomeLedBuffer[112+(aout[2].now>>8)] = 15;//4 + (es.slew[shape_on][2] < SLEW_CV_OFF_THRESH) * 3;
80003a4a:	a9 4b       	asr	r11,0x8
80003a4c:	f2 0b 00 0b 	add	r11,r9,r11
80003a50:	30 f8       	mov	r8,15
80003a52:	f7 68 00 50 	st.b	r11[80],r8
		}

		// if(!edge_state)
			// monomeLedBuffer[root_y*16+root_x] = 11;
		// else
			monomeLedBuffer[root_y*16+root_x] = 15;
80003a56:	94 4b       	ld.sh	r11,r10[0x8]
80003a58:	a9 4b       	asr	r11,0x8
80003a5a:	f2 0b 00 0b 	add	r11,r9,r11
80003a5e:	f7 68 00 60 	st.b	r11[96],r8
80003a62:	f5 0a 00 10 	ld.sh	r10,r10[16]
80003a66:	a9 4a       	asr	r10,0x8
80003a68:	14 09       	add	r9,r10
80003a6a:	f3 68 00 70 	st.b	r9[112],r8

		if(all_edit) {
80003a6e:	e0 68 3d 7c 	mov	r8,15740
80003a72:	11 8a       	ld.ub	r10,r8[0x0]
80003a74:	e0 68 0b 2f 	mov	r8,2863
			monomeLedBuffer[(root_y)*16+root_x] = 15 * (blinker < 24);
80003a78:	f4 07 15 04 	lsl	r7,r10,0x4
80003a7c:	11 89       	ld.ub	r9,r8[0x0]
80003a7e:	30 fb       	mov	r11,15
80003a80:	12 07       	add	r7,r9
80003a82:	e0 68 3d e4 	mov	r8,15844
80003a86:	f0 07 0b 0b 	st.b	r8[r7],r11
80003a8a:	e0 6c 3d 96 	mov	r12,15766
			monomeLedBuffer[(root_y-1)*16+root_x] = 15 * (blinker < 24);
80003a8e:	30 06       	mov	r6,0
80003a90:	19 8c       	ld.ub	r12,r12[0x0]
80003a92:	ec 0c 18 00 	cp.b	r12,r6
80003a96:	c1 70       	breq	80003ac4 <refresh_mono+0x3ac>
80003a98:	e0 6b 0b 25 	mov	r11,2853
			monomeLedBuffer[(root_y-1)*16+root_x+1] = 15 * (blinker < 24);
80003a9c:	31 7c       	mov	r12,23
80003a9e:	17 8b       	ld.ub	r11,r11[0x0]
80003aa0:	f6 0c 18 00 	cp.b	r12,r11
			monomeLedBuffer[(root_y)*16+root_x+1] = 15 * (blinker < 24);
		}
		else if(!singled) {
80003aa4:	f9 bb 02 0f 	movhs	r11,15
80003aa8:	f9 bb 03 00 	movlo	r11,0
			if(shape_on == 0) monomeLedBuffer[(root_y-1)*16+root_x] = 15;
80003aac:	f0 07 0b 0b 	st.b	r8[r7],r11
80003ab0:	20 1a       	sub	r10,1
80003ab2:	a5 6a       	lsl	r10,0x4
80003ab4:	f4 09 00 09 	add	r9,r10,r9
			else if(shape_on == 1) monomeLedBuffer[(root_y-1)*16+root_x+1] = 15;
80003ab8:	f0 09 0b 0b 	st.b	r8[r9],r11
80003abc:	f0 09 00 09 	add	r9,r8,r9
80003ac0:	b2 9b       	st.b	r9[0x1],r11
80003ac2:	c1 88       	rjmp	80003af2 <refresh_mono+0x3da>
			else if(shape_on == 2) monomeLedBuffer[(root_y)*16+root_x+1] = 15;
80003ac4:	e0 66 3d 80 	mov	r6,15744
80003ac8:	0d 86       	ld.ub	r6,r6[0x0]
80003aca:	f8 06 18 00 	cp.b	r6,r12
80003ace:	c6 d1       	brne	80003ba8 <refresh_mono+0x490>
			else if(shape_on == 3) monomeLedBuffer[(root_y+1)*16+root_x+1] = 15;
80003ad0:	e0 6c 3d 7d 	mov	r12,15741
80003ad4:	19 8c       	ld.ub	r12,r12[0x0]
80003ad6:	58 0c       	cp.w	r12,0
80003ad8:	c0 31       	brne	80003ade <refresh_mono+0x3c6>
80003ada:	20 1a       	sub	r10,1
80003adc:	c2 38       	rjmp	80003b22 <refresh_mono+0x40a>
80003ade:	30 16       	mov	r6,1
80003ae0:	ec 0c 18 00 	cp.b	r12,r6
80003ae4:	c0 31       	brne	80003aea <refresh_mono+0x3d2>
80003ae6:	20 1a       	sub	r10,1
80003ae8:	c0 c8       	rjmp	80003b00 <refresh_mono+0x3e8>
80003aea:	30 26       	mov	r6,2
80003aec:	ec 0c 18 00 	cp.b	r12,r6
80003af0:	c0 31       	brne	80003af6 <refresh_mono+0x3de>
80003af2:	0e 08       	add	r8,r7
80003af4:	c3 08       	rjmp	80003b54 <refresh_mono+0x43c>
80003af6:	30 36       	mov	r6,3
80003af8:	ec 0c 18 00 	cp.b	r12,r6
80003afc:	c0 81       	brne	80003b0c <refresh_mono+0x3f4>
80003afe:	2f fa       	sub	r10,-1
80003b00:	a5 6a       	lsl	r10,0x4
80003b02:	14 08       	add	r8,r10
80003b04:	f0 09 00 09 	add	r9,r8,r9
80003b08:	b2 9b       	st.b	r9[0x1],r11
80003b0a:	c4 f8       	rjmp	80003ba8 <refresh_mono+0x490>
			else if(shape_on == 4) { monomeLedBuffer[(root_y-1)*16+root_x] = 15; monomeLedBuffer[(root_y-2)*16+root_x] = 15; }
80003b0c:	30 46       	mov	r6,4
80003b0e:	ec 0c 18 00 	cp.b	r12,r6
80003b12:	c0 e1       	brne	80003b2e <refresh_mono+0x416>
80003b14:	f4 cc 00 01 	sub	r12,r10,1
80003b18:	20 2a       	sub	r10,2
80003b1a:	a5 6c       	lsl	r12,0x4
80003b1c:	12 0c       	add	r12,r9
80003b1e:	f0 0c 0b 0b 	st.b	r8[r12],r11
80003b22:	a5 6a       	lsl	r10,0x4
80003b24:	f4 09 00 09 	add	r9,r10,r9
80003b28:	f0 09 0b 0b 	st.b	r8[r9],r11
80003b2c:	c3 e8       	rjmp	80003ba8 <refresh_mono+0x490>
			else if(shape_on == 5) { monomeLedBuffer[(root_y-1)*16+root_x+1] = 15; monomeLedBuffer[(root_y-2)*16+root_x+2] = 15; }
80003b2e:	30 56       	mov	r6,5
80003b30:	ec 0c 18 00 	cp.b	r12,r6
80003b34:	c0 a1       	brne	80003b48 <refresh_mono+0x430>
80003b36:	f4 cc 00 01 	sub	r12,r10,1
80003b3a:	20 2a       	sub	r10,2
80003b3c:	a5 6c       	lsl	r12,0x4
80003b3e:	f0 0c 00 0c 	add	r12,r8,r12
80003b42:	12 0c       	add	r12,r9
80003b44:	b8 9b       	st.b	r12[0x1],r11
80003b46:	c1 88       	rjmp	80003b76 <refresh_mono+0x45e>
			else if(shape_on == 6) { monomeLedBuffer[(root_y)*16+root_x+1] = 15; monomeLedBuffer[(root_y)*16+root_x+2] = 15; }
80003b48:	30 66       	mov	r6,6
80003b4a:	ec 0c 18 00 	cp.b	r12,r6
80003b4e:	c0 51       	brne	80003b58 <refresh_mono+0x440>
80003b50:	0e 08       	add	r8,r7
80003b52:	b0 ab       	st.b	r8[0x2],r11
80003b54:	b0 9b       	st.b	r8[0x1],r11
80003b56:	c2 98       	rjmp	80003ba8 <refresh_mono+0x490>
			else if(shape_on == 7) { monomeLedBuffer[(root_y+1)*16+root_x+1] = 15; monomeLedBuffer[(root_y+2)*16+root_x+2] = 15; }
80003b58:	30 78       	mov	r8,7
80003b5a:	f0 0c 18 00 	cp.b	r12,r8
80003b5e:	c2 51       	brne	80003ba8 <refresh_mono+0x490>
80003b60:	f4 cc ff ff 	sub	r12,r10,-1
80003b64:	e0 68 3d e4 	mov	r8,15844
80003b68:	30 fb       	mov	r11,15
80003b6a:	a5 6c       	lsl	r12,0x4
80003b6c:	2f ea       	sub	r10,-2
80003b6e:	f0 0c 00 0c 	add	r12,r8,r12
80003b72:	12 0c       	add	r12,r9
80003b74:	b8 9b       	st.b	r12[0x1],r11
80003b76:	a5 6a       	lsl	r10,0x4
80003b78:	14 08       	add	r8,r10
80003b7a:	f0 09 00 09 	add	r9,r8,r9
80003b7e:	b2 ab       	st.b	r9[0x2],r11
		}
	}

	// MODIFIERS/MODE
	if(mode == mEdge) monomeLedBuffer[80] = 15;
80003b80:	c1 48       	rjmp	80003ba8 <refresh_mono+0x490>
80003b82:	30 f9       	mov	r9,15
80003b84:	e0 68 3d e4 	mov	r8,15844
80003b88:	f1 69 00 50 	st.b	r8[80],r9
	if(mode == mSlew) monomeLedBuffer[96] = 15;
80003b8c:	c0 68       	rjmp	80003b98 <refresh_mono+0x480>
80003b8e:	30 f9       	mov	r9,15
80003b90:	e0 68 3d e4 	mov	r8,15844

	monome_set_quadrant_flag(0);
80003b94:	f1 69 00 60 	st.b	r8[96],r9
	monome_set_quadrant_flag(1);
80003b98:	30 0c       	mov	r12,0
80003b9a:	e0 a0 08 fd 	rcall	80004d94 <monome_set_quadrant_flag>
}
80003b9e:	30 1c       	mov	r12,1
80003ba0:	e0 a0 08 fa 	rcall	80004d94 <monome_set_quadrant_flag>
		}
	}

	// MODIFIERS/MODE
	if(mode == mEdge) monomeLedBuffer[80] = 15;
	if(mode == mSlew) monomeLedBuffer[96] = 15;
80003ba4:	2f fd       	sub	sp,-4
80003ba6:	d8 32       	popm	r0-r7,pc
80003ba8:	58 1e       	cp.w	lr,1
80003baa:	cf 20       	breq	80003b8e <refresh_mono+0x476>
80003bac:	cf 6b       	rjmp	80003b98 <refresh_mono+0x480>
80003bae:	d7 03       	nop

80003bb0 <refresh>:



////////////////////////////////////////////////////////////////////////////////
// application grid redraw
static void refresh() {
80003bb0:	d4 31       	pushm	r0-r7,lr
80003bb2:	30 08       	mov	r8,0
	u8 i1, i2, i3;

	// CLEAR // FIXME: optimize? 
	for(i1=0;i1<128;i1++) monomeLedBuffer[i1] = 0;
80003bb4:	e0 6c 3d e4 	mov	r12,15844
80003bb8:	10 9b       	mov	r11,r8
80003bba:	38 0a       	mov	r10,-128
80003bbc:	f8 08 0b 0b 	st.b	r12[r8],r11
80003bc0:	e0 69 3d e4 	mov	r9,15844
80003bc4:	2f f8       	sub	r8,-1
80003bc6:	5c 58       	castu.b	r8
80003bc8:	f4 08 18 00 	cp.b	r8,r10

	// REC STATUS
	if(r_status == rArm) monomeLedBuffer[32] = 7;
80003bcc:	cf 81       	brne	80003bbc <refresh+0xc>
80003bce:	e0 68 3d 78 	mov	r8,15736
80003bd2:	70 08       	ld.w	r8,r8[0x0]
80003bd4:	58 18       	cp.w	r8,1
	else if(r_status == rRec) monomeLedBuffer[32] = 11 + 4 * (blinker < 24);
80003bd6:	c0 31       	brne	80003bdc <refresh+0x2c>
80003bd8:	30 78       	mov	r8,7
80003bda:	c0 d8       	rjmp	80003bf4 <refresh+0x44>
80003bdc:	58 28       	cp.w	r8,2
80003bde:	c0 d1       	brne	80003bf8 <refresh+0x48>
80003be0:	e0 68 0b 25 	mov	r8,2853
80003be4:	11 8a       	ld.ub	r10,r8[0x0]
80003be6:	31 78       	mov	r8,23
80003be8:	f0 0a 18 00 	cp.b	r10,r8
80003bec:	f9 b8 08 0f 	movls	r8,15

	// LOOP and MODE 
	if(es.p[p_select].loop) monomeLedBuffer[48] = 11;
80003bf0:	f9 b8 0b 0b 	movhi	r8,11
80003bf4:	f3 68 00 20 	st.b	r9[32],r8
80003bf8:	e0 6a 0b 58 	mov	r10,2904
80003bfc:	e0 68 3c 62 	mov	r8,15458
80003c00:	e0 69 03 08 	mov	r9,776
80003c04:	11 88       	ld.ub	r8,r8[0x0]
80003c06:	f0 09 02 49 	mul	r9,r8,r9
80003c0a:	f4 09 00 09 	add	r9,r10,r9
80003c0e:	f3 3a 03 70 	ld.ub	r10,r9[880]
80003c12:	30 09       	mov	r9,0
80003c14:	f2 0a 18 00 	cp.b	r10,r9
	if(arp) monomeLedBuffer[64] = 11;
80003c18:	c0 60       	breq	80003c24 <refresh+0x74>
80003c1a:	30 ba       	mov	r10,11
80003c1c:	e0 69 3d e4 	mov	r9,15844
80003c20:	f3 6a 00 30 	st.b	r9[48],r10
80003c24:	e0 69 0b 33 	mov	r9,2867

	// PATTERN PLAY MODE
	if(mode == mBank) monomeLedBuffer[16] = 11;
80003c28:	13 8c       	ld.ub	r12,r9[0x0]
80003c2a:	58 0c       	cp.w	r12,0
80003c2c:	c0 60       	breq	80003c38 <refresh+0x88>
80003c2e:	30 ba       	mov	r10,11
80003c30:	e0 69 3d e4 	mov	r9,15844
80003c34:	f3 6a 00 40 	st.b	r9[64],r10

	// PATTERN INDICATION
	if(p_playing) {
80003c38:	e0 69 3c 48 	mov	r9,15432
80003c3c:	72 0a       	ld.w	r10,r9[0x0]
80003c3e:	58 4a       	cp.w	r10,4
80003c40:	c0 61       	brne	80003c4c <refresh+0x9c>
80003c42:	30 bb       	mov	r11,11
		i2 = p_timer_total / (es.p[p_select].total_time / 16);
80003c44:	e0 69 3d e4 	mov	r9,15844
80003c48:	f3 6b 00 10 	st.b	r9[16],r11
80003c4c:	e0 69 3d 81 	mov	r9,15745
80003c50:	e0 6b 0b 58 	mov	r11,2904
80003c54:	13 89       	ld.ub	r9,r9[0x0]
80003c56:	30 0e       	mov	lr,0
80003c58:	fc 09 18 00 	cp.b	r9,lr
80003c5c:	c1 f0       	breq	80003c9a <refresh+0xea>
80003c5e:	e0 6e 03 08 	mov	lr,776

		for(i1=0;i1<16;i1++)
80003c62:	e0 69 3d 98 	mov	r9,15768
			if(i1 < i2) monomeLedBuffer[i1] = 4;
80003c66:	f0 0e 03 4b 	mac	r11,r8,lr
80003c6a:	92 89       	ld.uh	r9,r9[0x0]

	// PATTERN INDICATION
	if(p_playing) {
		i2 = p_timer_total / (es.p[p_select].total_time / 16);

		for(i1=0;i1<16;i1++)
80003c6c:	f7 17 03 6e 	ld.uh	r7,r11[878]
80003c70:	a5 87       	lsr	r7,0x4
80003c72:	f2 07 0d 06 	divu	r6,r9,r7
80003c76:	e0 6b 3d e4 	mov	r11,15844
			if(i1 < i2) monomeLedBuffer[i1] = 4;

		monomeLedBuffer[0] = 15;
80003c7a:	5c 56       	castu.b	r6
	}
	else if(es.p[p_select].length != 0) monomeLedBuffer[0] = 4;
80003c7c:	30 09       	mov	r9,0
80003c7e:	30 47       	mov	r7,4
80003c80:	31 0e       	mov	lr,16
80003c82:	ec 09 18 00 	cp.b	r9,r6
80003c86:	c0 22       	brcc	80003c8a <refresh+0xda>
80003c88:	b6 87       	st.b	r11[0x0],r7
80003c8a:	2f f9       	sub	r9,-1
80003c8c:	2f fb       	sub	r11,-1
80003c8e:	5c 59       	castu.b	r9
80003c90:	fc 09 18 00 	cp.b	r9,lr

	// PORT INDICATOR
	if(port_toggle) monomeLedBuffer[112] = port_toggle * 4 + 3;
80003c94:	cf 71       	brne	80003c82 <refresh+0xd2>
80003c96:	30 fb       	mov	r11,15
80003c98:	c0 b8       	rjmp	80003cae <refresh+0xfe>
80003c9a:	e0 6e 03 08 	mov	lr,776
80003c9e:	f0 0e 03 4b 	mac	r11,r8,lr
80003ca2:	f7 3b 03 6c 	ld.ub	r11,r11[876]

	// EDGE SELECT
	if(mode == mEdge) {
80003ca6:	f2 0b 18 00 	cp.b	r11,r9
		for(i1=0;i1<3;i1++) {
			for(i2=0;i2<4;i2++) {
				for(i3=0;i3<4;i3++) {
					if(((EDGE_GLYPH[i1][i2] >> i3) & 1))
						monomeLedBuffer[34 + (i1*5) + i2*16 + i3] = 7 + (es.edge == i1) * 4;
80003caa:	c0 50       	breq	80003cb4 <refresh+0x104>
80003cac:	30 4b       	mov	r11,4
80003cae:	e0 69 3d e4 	mov	r9,15844
	// PORT INDICATOR
	if(port_toggle) monomeLedBuffer[112] = port_toggle * 4 + 3;

	// EDGE SELECT
	if(mode == mEdge) {
		for(i1=0;i1<3;i1++) {
80003cb2:	b2 8b       	st.b	r9[0x0],r11
			for(i2=0;i2<4;i2++) {
				for(i3=0;i3<4;i3++) {
					if(((EDGE_GLYPH[i1][i2] >> i3) & 1))
80003cb4:	e0 69 3c 4c 	mov	r9,15436
80003cb8:	13 89       	ld.ub	r9,r9[0x0]
80003cba:	58 09       	cp.w	r9,0
80003cbc:	c0 70       	breq	80003cca <refresh+0x11a>
80003cbe:	a3 69       	lsl	r9,0x2
80003cc0:	e0 6b 3d e4 	mov	r11,15844
						monomeLedBuffer[34 + (i1*5) + i2*16 + i3] = 7 + (es.edge == i1) * 4;
80003cc4:	2f d9       	sub	r9,-3
80003cc6:	f7 69 00 70 	st.b	r11[112],r9

	// EDGE SELECT
	if(mode == mEdge) {
		for(i1=0;i1<3;i1++) {
			for(i2=0;i2<4;i2++) {
				for(i3=0;i3<4;i3++) {
80003cca:	58 2a       	cp.w	r10,2
80003ccc:	c4 71       	brne	80003d5a <refresh+0x1aa>
80003cce:	e0 68 0b 58 	mov	r8,2904
	if(port_toggle) monomeLedBuffer[112] = port_toggle * 4 + 3;

	// EDGE SELECT
	if(mode == mEdge) {
		for(i1=0;i1<3;i1++) {
			for(i2=0;i2<4;i2++) {
80003cd2:	36 2b       	mov	r11,98
80003cd4:	70 07       	ld.w	r7,r8[0x0]
				for(i3=0;i3<4;i3++) {
					if(((EDGE_GLYPH[i1][i2] >> i3) & 1))
80003cd6:	30 09       	mov	r9,0
80003cd8:	fe c5 ac c0 	sub	r5,pc,-21312
80003cdc:	e0 66 3d e4 	mov	r6,15844
80003ce0:	c1 b8       	rjmp	80003d16 <refresh+0x166>
80003ce2:	e6 08 08 42 	asr	r2,r3,r8
80003ce6:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
80003cea:	c0 30       	breq	80003cf0 <refresh+0x140>
80003cec:	08 92       	mov	r2,r4
80003cee:	bc 84       	st.b	lr[0x0],r4
80003cf0:	2f f8       	sub	r8,-1
80003cf2:	2f fe       	sub	lr,-1
80003cf4:	58 48       	cp.w	r8,4
80003cf6:	cf 61       	brne	80003ce2 <refresh+0x132>
80003cf8:	2f fc       	sub	r12,-1
80003cfa:	2f 0a       	sub	r10,-16
80003cfc:	16 3a       	cp.w	r10,r11
80003cfe:	c0 70       	breq	80003d0c <refresh+0x15c>
80003d00:	19 83       	ld.ub	r3,r12[0x0]
80003d02:	f4 06 00 0e 	add	lr,r10,r6
80003d06:	30 08       	mov	r8,0
80003d08:	ce db       	rjmp	80003ce2 <refresh+0x132>
80003d0a:	d7 03       	nop
80003d0c:	2f f9       	sub	r9,-1
80003d0e:	f4 cb ff fb 	sub	r11,r10,-5
	// PORT INDICATOR
	if(port_toggle) monomeLedBuffer[112] = port_toggle * 4 + 3;

	// EDGE SELECT
	if(mode == mEdge) {
		for(i1=0;i1<3;i1++) {
80003d12:	58 39       	cp.w	r9,3
80003d14:	c0 b0       	breq	80003d2a <refresh+0x17a>
80003d16:	ea 09 00 2c 	add	r12,r5,r9<<0x2
80003d1a:	f6 ca 00 40 	sub	r10,r11,64
			for(i2=0;i2<4;i2++) {
				for(i3=0;i3<4;i3++) {
					if(((EDGE_GLYPH[i1][i2] >> i3) & 1))
						monomeLedBuffer[34 + (i1*5) + i2*16 + i3] = 7 + (es.edge == i1) * 4;
80003d1e:	12 37       	cp.w	r7,r9
80003d20:	f9 b4 01 07 	movne	r4,7
80003d24:	f9 b4 00 0b 	moveq	r4,11
80003d28:	ce cb       	rjmp	80003d00 <refresh+0x150>
						// monomeLedBuffer[34 + (i1*5) + i2*16 + i3] = 4;
				}
			}
		}

		if(es.edge == eFixed) {
80003d2a:	58 17       	cp.w	r7,1
80003d2c:	e0 81 02 87 	brne	8000423a <refresh+0x68a>
80003d30:	e0 69 3d e4 	mov	r9,15844



////////////////////////////////////////////////////////////////////////////////
// application grid redraw
static void refresh() {
80003d34:	f2 ca ff 80 	sub	r10,r9,-128
			}
		}

		if(es.edge == eFixed) {
			for(i1=0;i1<16;i1++) {
				monomeLedBuffer[112+i1] = 4;
80003d38:	29 09       	sub	r9,-112
				}
			}
		}

		if(es.edge == eFixed) {
			for(i1=0;i1<16;i1++) {
80003d3a:	12 c8       	st.b	r9++,r8
80003d3c:	14 39       	cp.w	r9,r10
				monomeLedBuffer[112+i1] = 4;
			}

			monomeLedBuffer[112 + (es.edge_fixed_time>>4)] = 11;
80003d3e:	cf e1       	brne	80003d3a <refresh+0x18a>
80003d40:	e0 69 3d e4 	mov	r9,15844
80003d44:	e0 68 0b 58 	mov	r8,2904
80003d48:	90 a8       	ld.uh	r8,r8[0x4]
80003d4a:	a5 88       	lsr	r8,0x4
80003d4c:	f2 08 00 08 	add	r8,r9,r8
80003d50:	30 b9       	mov	r9,11
80003d52:	f1 69 00 70 	st.b	r8[112],r9
		}
	}
	// SELECT PATTERN
	else if(mode == mSelect || mode == mBank) {
80003d56:	e0 8f 02 72 	bral	8000423a <refresh+0x68a>
80003d5a:	f4 c9 00 03 	sub	r9,r10,3
80003d5e:	58 19       	cp.w	r9,1
		for(i1=0;i1<4;i1++)
80003d60:	e0 8b 00 3c 	brhi	80003dd8 <refresh+0x228>
80003d64:	30 09       	mov	r9,0
80003d66:	e0 67 3d e4 	mov	r7,15844
80003d6a:	32 2b       	mov	r11,34
			for(i2=0;i2<4;i2++)
				if(es.p[i1*4+i2].length) monomeLedBuffer[i1*16+i2+34] = 7;
80003d6c:	e0 62 03 08 	mov	r2,776
80003d70:	ee c3 ff fc 	sub	r3,r7,-4
80003d74:	12 94       	mov	r4,r9
80003d76:	30 45       	mov	r5,4
80003d78:	30 76       	mov	r6,7
80003d7a:	c1 28       	rjmp	80003d9e <refresh+0x1ee>
80003d7c:	1d 80       	ld.ub	r0,lr[0x0]
80003d7e:	e8 00 18 00 	cp.b	r0,r4
				else monomeLedBuffer[i1*16+i2+34] = 4;
80003d82:	c0 30       	breq	80003d88 <refresh+0x1d8>
80003d84:	b4 86       	st.b	r10[0x0],r6
80003d86:	c0 28       	rjmp	80003d8a <refresh+0x1da>
80003d88:	b8 85       	st.b	r12[0x0],r5
		}
	}
	// SELECT PATTERN
	else if(mode == mSelect || mode == mBank) {
		for(i1=0;i1<4;i1++)
			for(i2=0;i2<4;i2++)
80003d8a:	fc ce fc f8 	sub	lr,lr,-776
80003d8e:	2f fa       	sub	r10,-1
80003d90:	2f fc       	sub	r12,-1
			monomeLedBuffer[112 + (es.edge_fixed_time>>4)] = 11;
		}
	}
	// SELECT PATTERN
	else if(mode == mSelect || mode == mBank) {
		for(i1=0;i1<4;i1++)
80003d92:	02 3a       	cp.w	r10,r1
80003d94:	cf 41       	brne	80003d7c <refresh+0x1cc>
80003d96:	2f c9       	sub	r9,-4
80003d98:	2f 0b       	sub	r11,-16
80003d9a:	59 09       	cp.w	r9,16
80003d9c:	c0 e0       	breq	80003db8 <refresh+0x208>
80003d9e:	e0 6a 0b 58 	mov	r10,2904
80003da2:	f2 02 02 4e 	mul	lr,r9,r2
80003da6:	f6 03 00 01 	add	r1,r11,r3
80003daa:	fc ce fc 94 	sub	lr,lr,-876
			for(i2=0;i2<4;i2++)
				if(es.p[i1*4+i2].length) monomeLedBuffer[i1*16+i2+34] = 7;
				else monomeLedBuffer[i1*16+i2+34] = 4;
				

		monomeLedBuffer[34 + (p_select%4) + (p_select / 4) * 16] = 15;
80003dae:	14 0e       	add	lr,r10
80003db0:	f6 07 00 0a 	add	r10,r11,r7
80003db4:	14 9c       	mov	r12,r10
80003db6:	ce 3b       	rjmp	80003d7c <refresh+0x1cc>
80003db8:	f0 09 16 02 	lsr	r9,r8,0x2
80003dbc:	e0 6a 3d e4 	mov	r10,15844
80003dc0:	a5 69       	lsl	r9,0x4
80003dc2:	f4 09 00 09 	add	r9,r10,r9
80003dc6:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80003dca:	f2 08 00 08 	add	r8,r9,r8

	}
	// STATE	
	else {
		if(arp)
80003dce:	30 f9       	mov	r9,15
			monomeLedBuffer[(es.p[p_select].e[0].y + es.p[p_select].y) * 16 + es.p[p_select].x + es.p[p_select].e[0].x] = 7;
80003dd0:	f1 69 00 22 	st.b	r8[34],r9
80003dd4:	e0 8f 02 3e 	bral	80004250 <refresh+0x6a0>
80003dd8:	58 0c       	cp.w	r12,0
80003dda:	c1 c0       	breq	80003e12 <refresh+0x262>
80003ddc:	e0 69 03 08 	mov	r9,776
80003de0:	b3 38       	mul	r8,r9
80003de2:	e0 69 0b 58 	mov	r9,2904
80003de6:	f2 08 00 08 	add	r8,r9,r8
80003dea:	f0 c9 fc 90 	sub	r9,r8,-880
80003dee:	29 48       	sub	r8,-108
80003df0:	f3 2c 00 02 	ld.sb	r12,r9[2]
80003df4:	11 ab       	ld.ub	r11,r8[0x2]
80003df6:	11 98       	ld.ub	r8,r8[0x1]
80003df8:	f8 0b 00 0b 	add	r11,r12,r11
80003dfc:	e0 6c 3d e4 	mov	r12,15844
80003e00:	a5 6b       	lsl	r11,0x4

		if(port_active)
80003e02:	f8 0b 00 0b 	add	r11,r12,r11
80003e06:	10 0b       	add	r11,r8
80003e08:	f3 28 00 01 	ld.sb	r8,r9[1]
80003e0c:	30 79       	mov	r9,7
			for(i1=0;i1<(port_time>>4)+1;i1++)
80003e0e:	f6 08 0b 09 	st.b	r11[r8],r9
80003e12:	e0 68 3c 6c 	mov	r8,15468
80003e16:	11 89       	ld.ub	r9,r8[0x0]
80003e18:	30 08       	mov	r8,0
80003e1a:	f0 09 18 00 	cp.b	r9,r8
80003e1e:	c1 40       	breq	80003e46 <refresh+0x296>
				monomeLedBuffer[i1 + 16] = 4;
80003e20:	e0 68 3d 94 	mov	r8,15764
80003e24:	e0 6b 3d e4 	mov	r11,15844
	else {
		if(arp)
			monomeLedBuffer[(es.p[p_select].e[0].y + es.p[p_select].y) * 16 + es.p[p_select].x + es.p[p_select].e[0].x] = 7;

		if(port_active)
			for(i1=0;i1<(port_time>>4)+1;i1++)
80003e28:	90 8c       	ld.uh	r12,r8[0x0]
80003e2a:	30 49       	mov	r9,4
80003e2c:	a5 8c       	lsr	r12,0x4
80003e2e:	30 08       	mov	r8,0
				monomeLedBuffer[i1 + 16] = 4;

		// SLEW INDICATORS
		if(mode == mSlew) {
80003e30:	c0 98       	rjmp	80003e42 <refresh+0x292>
80003e32:	f0 ce ff ff 	sub	lr,r8,-1
			if(es.slew[shape_on][0] < SLEW_CV_OFF_THRESH) {
80003e36:	f6 08 00 08 	add	r8,r11,r8
80003e3a:	f1 69 00 10 	st.b	r8[16],r9
80003e3e:	f1 de c0 08 	bfextu	r8,lr,0x0,0x8
80003e42:	10 3c       	cp.w	r12,r8
80003e44:	cf 74       	brge	80003e32 <refresh+0x282>
80003e46:	58 1a       	cp.w	r10,1
80003e48:	e0 81 00 80 	brne	80003f48 <refresh+0x398>
80003e4c:	e0 68 3d 7d 	mov	r8,15741
80003e50:	11 89       	ld.ub	r9,r8[0x0]
				for(i1=0;i1<(aout[0].slew>>8);i1++)
80003e52:	e0 68 0b 58 	mov	r8,2904
80003e56:	f2 09 00 1b 	add	r11,r9,r9<<0x1
80003e5a:	f0 0b 00 18 	add	r8,r8,r11<<0x1
					monomeLedBuffer[80+i1] =  4;
80003e5e:	f1 0b 00 3c 	ld.sh	r11,r8[60]
80003e62:	e0 68 0f 9f 	mov	r8,3999
80003e66:	f0 0b 19 00 	cp.h	r11,r8
80003e6a:	e0 8b 00 1c 	brhi	80003ea2 <refresh+0x2f2>
80003e6e:	e0 68 0b 36 	mov	r8,2870
80003e72:	30 0b       	mov	r11,0
80003e74:	11 cc       	ld.ub	r12,r8[0x4]
80003e76:	e0 67 3d e4 	mov	r7,15844
80003e7a:	5c 8c       	casts.h	r12
80003e7c:	30 4e       	mov	lr,4
80003e7e:	c0 78       	rjmp	80003e8c <refresh+0x2dc>
				monomeLedBuffer[i1 + 16] = 4;

		// SLEW INDICATORS
		if(mode == mSlew) {
			if(es.slew[shape_on][0] < SLEW_CV_OFF_THRESH) {
				for(i1=0;i1<(aout[0].slew>>8);i1++)
80003e80:	ee 0b 00 0b 	add	r11,r7,r11
80003e84:	f7 6e 00 50 	st.b	r11[80],lr
80003e88:	f7 d6 c0 08 	bfextu	r11,r6,0x0,0x8
80003e8c:	f6 c6 ff ff 	sub	r6,r11,-1
					monomeLedBuffer[80+i1] =  4;
				monomeLedBuffer[80+(aout[0].slew>>8)] =  11;
80003e90:	e0 68 3d e4 	mov	r8,15844
80003e94:	f8 0b 19 00 	cp.h	r11,r12
			}

			if(es.slew[shape_on][1] < SLEW_CV_OFF_THRESH) {
80003e98:	cf 43       	brcs	80003e80 <refresh+0x2d0>
80003e9a:	18 08       	add	r8,r12
80003e9c:	30 bb       	mov	r11,11
80003e9e:	f1 6b 00 50 	st.b	r8[80],r11
80003ea2:	f2 09 00 1b 	add	r11,r9,r9<<0x1
80003ea6:	e0 68 0b 58 	mov	r8,2904
80003eaa:	f0 0b 00 18 	add	r8,r8,r11<<0x1
80003eae:	f1 0b 00 3e 	ld.sh	r11,r8[62]
				for(i1=0;i1<(aout[1].slew>>8);i1++)
80003eb2:	e0 68 0f 9f 	mov	r8,3999
80003eb6:	f0 0b 19 00 	cp.h	r11,r8
80003eba:	e0 8b 00 1d 	brhi	80003ef4 <refresh+0x344>
					monomeLedBuffer[96+i1] =  4;
80003ebe:	e0 68 0b 36 	mov	r8,2870
80003ec2:	30 0b       	mov	r11,0
80003ec4:	f1 3c 00 0c 	ld.ub	r12,r8[12]
80003ec8:	e0 67 3d e4 	mov	r7,15844
					monomeLedBuffer[80+i1] =  4;
				monomeLedBuffer[80+(aout[0].slew>>8)] =  11;
			}

			if(es.slew[shape_on][1] < SLEW_CV_OFF_THRESH) {
				for(i1=0;i1<(aout[1].slew>>8);i1++)
80003ecc:	5c 8c       	casts.h	r12
80003ece:	30 4e       	mov	lr,4
80003ed0:	c0 78       	rjmp	80003ede <refresh+0x32e>
80003ed2:	ee 0b 00 0b 	add	r11,r7,r11
80003ed6:	f7 6e 00 60 	st.b	r11[96],lr
					monomeLedBuffer[96+i1] =  4;
				monomeLedBuffer[96+(aout[1].slew>>8)] =  11;
80003eda:	f7 d6 c0 08 	bfextu	r11,r6,0x0,0x8
80003ede:	f6 c6 ff ff 	sub	r6,r11,-1
			}

			if(es.slew[shape_on][2] < SLEW_CV_OFF_THRESH) {
80003ee2:	e0 68 3d e4 	mov	r8,15844
80003ee6:	f8 0b 19 00 	cp.h	r11,r12
80003eea:	cf 43       	brcs	80003ed2 <refresh+0x322>
80003eec:	18 08       	add	r8,r12
80003eee:	30 bb       	mov	r11,11
80003ef0:	f1 6b 00 60 	st.b	r8[96],r11
80003ef4:	e0 68 0b 58 	mov	r8,2904
80003ef8:	f2 09 00 19 	add	r9,r9,r9<<0x1
				for(i1=0;i1<(aout[2].slew>>8);i1++)
80003efc:	f0 09 00 19 	add	r9,r8,r9<<0x1
80003f00:	e0 68 0f 9f 	mov	r8,3999
80003f04:	f3 09 00 40 	ld.sh	r9,r9[64]
					monomeLedBuffer[112+i1] =  4;
80003f08:	f0 09 19 00 	cp.h	r9,r8
80003f0c:	e0 8b 00 ae 	brhi	80004068 <refresh+0x4b8>
80003f10:	e0 68 0b 36 	mov	r8,2870
					monomeLedBuffer[96+i1] =  4;
				monomeLedBuffer[96+(aout[1].slew>>8)] =  11;
			}

			if(es.slew[shape_on][2] < SLEW_CV_OFF_THRESH) {
				for(i1=0;i1<(aout[2].slew>>8);i1++)
80003f14:	30 09       	mov	r9,0
80003f16:	f1 3b 00 14 	ld.ub	r11,r8[20]
80003f1a:	e0 6e 3d e4 	mov	lr,15844
80003f1e:	5c 8b       	casts.h	r11
80003f20:	30 4c       	mov	r12,4
80003f22:	c0 78       	rjmp	80003f30 <refresh+0x380>
					monomeLedBuffer[112+i1] =  4;
				monomeLedBuffer[112+(aout[2].slew>>8)] =  11;
80003f24:	fc 09 00 09 	add	r9,lr,r9
80003f28:	f3 6c 00 70 	st.b	r9[112],r12
80003f2c:	f3 d7 c0 08 	bfextu	r9,r7,0x0,0x8
			}
		}
		// CV POSITIONS
		else {
			for(i1=min(aout[0].target>>8,aout[0].now>>8);i1<max(aout[0].target>>8,aout[0].now>>8)+1;i1++)
				monomeLedBuffer[80+i1] = 4;
80003f30:	f2 c7 ff ff 	sub	r7,r9,-1
80003f34:	e0 68 3d e4 	mov	r8,15844
				monomeLedBuffer[112+(aout[2].slew>>8)] =  11;
			}
		}
		// CV POSITIONS
		else {
			for(i1=min(aout[0].target>>8,aout[0].now>>8);i1<max(aout[0].target>>8,aout[0].now>>8)+1;i1++)
80003f38:	f6 09 19 00 	cp.h	r9,r11
80003f3c:	cf 43       	brcs	80003f24 <refresh+0x374>
80003f3e:	16 08       	add	r8,r11
80003f40:	30 b9       	mov	r9,11
80003f42:	f1 69 00 70 	st.b	r8[112],r9
80003f46:	c9 18       	rjmp	80004068 <refresh+0x4b8>
80003f48:	e0 68 0b 36 	mov	r8,2870
				monomeLedBuffer[80+i1] = 4;
80003f4c:	e0 6c 3d e4 	mov	r12,15844
80003f50:	90 09       	ld.sh	r9,r8[0x0]
				monomeLedBuffer[112+(aout[2].slew>>8)] =  11;
			}
		}
		// CV POSITIONS
		else {
			for(i1=min(aout[0].target>>8,aout[0].now>>8);i1<max(aout[0].target>>8,aout[0].now>>8)+1;i1++)
80003f52:	30 4b       	mov	r11,4
80003f54:	a9 49       	asr	r9,0x8
80003f56:	11 a8       	ld.ub	r8,r8[0x2]
80003f58:	f0 09 0c 4e 	max	lr,r8,r9
				monomeLedBuffer[80+i1] = 4;
			monomeLedBuffer[80+(aout[0].now>>8)] = 4 + (es.slew[shape_on][0] < SLEW_CV_OFF_THRESH) * 3;
80003f5c:	f0 09 0d 48 	min	r8,r8,r9


			for(i1=min(aout[1].target>>8,aout[1].now>>8);i1<max(aout[1].target>>8,aout[1].now>>8)+1;i1++)
				monomeLedBuffer[96+i1] = 4;
80003f60:	5c 58       	castu.b	r8
			for(i1=min(aout[0].target>>8,aout[0].now>>8);i1<max(aout[0].target>>8,aout[0].now>>8)+1;i1++)
				monomeLedBuffer[80+i1] = 4;
			monomeLedBuffer[80+(aout[0].now>>8)] = 4 + (es.slew[shape_on][0] < SLEW_CV_OFF_THRESH) * 3;


			for(i1=min(aout[1].target>>8,aout[1].now>>8);i1<max(aout[1].target>>8,aout[1].now>>8)+1;i1++)
80003f62:	c0 98       	rjmp	80003f74 <refresh+0x3c4>
		}
		// CV POSITIONS
		else {
			for(i1=min(aout[0].target>>8,aout[0].now>>8);i1<max(aout[0].target>>8,aout[0].now>>8)+1;i1++)
				monomeLedBuffer[80+i1] = 4;
			monomeLedBuffer[80+(aout[0].now>>8)] = 4 + (es.slew[shape_on][0] < SLEW_CV_OFF_THRESH) * 3;
80003f64:	f0 c7 ff ff 	sub	r7,r8,-1


			for(i1=min(aout[1].target>>8,aout[1].now>>8);i1<max(aout[1].target>>8,aout[1].now>>8)+1;i1++)
80003f68:	f8 08 00 08 	add	r8,r12,r8
		}
		// CV POSITIONS
		else {
			for(i1=min(aout[0].target>>8,aout[0].now>>8);i1<max(aout[0].target>>8,aout[0].now>>8)+1;i1++)
				monomeLedBuffer[80+i1] = 4;
			monomeLedBuffer[80+(aout[0].now>>8)] = 4 + (es.slew[shape_on][0] < SLEW_CV_OFF_THRESH) * 3;
80003f6c:	f1 6b 00 50 	st.b	r8[80],r11
80003f70:	f1 d7 c0 08 	bfextu	r8,r7,0x0,0x8
80003f74:	10 3e       	cp.w	lr,r8
80003f76:	cf 74       	brge	80003f64 <refresh+0x3b4>


			for(i1=min(aout[1].target>>8,aout[1].now>>8);i1<max(aout[1].target>>8,aout[1].now>>8)+1;i1++)
80003f78:	e0 68 3d e4 	mov	r8,15844
		}
		// CV POSITIONS
		else {
			for(i1=min(aout[0].target>>8,aout[0].now>>8);i1<max(aout[0].target>>8,aout[0].now>>8)+1;i1++)
				monomeLedBuffer[80+i1] = 4;
			monomeLedBuffer[80+(aout[0].now>>8)] = 4 + (es.slew[shape_on][0] < SLEW_CV_OFF_THRESH) * 3;
80003f7c:	f0 09 00 09 	add	r9,r8,r9


			for(i1=min(aout[1].target>>8,aout[1].now>>8);i1<max(aout[1].target>>8,aout[1].now>>8)+1;i1++)
80003f80:	10 96       	mov	r6,r8
		}
		// CV POSITIONS
		else {
			for(i1=min(aout[0].target>>8,aout[0].now>>8);i1<max(aout[0].target>>8,aout[0].now>>8)+1;i1++)
				monomeLedBuffer[80+i1] = 4;
			monomeLedBuffer[80+(aout[0].now>>8)] = 4 + (es.slew[shape_on][0] < SLEW_CV_OFF_THRESH) * 3;
80003f82:	e0 68 0b 36 	mov	r8,2870
80003f86:	e0 6e 0b 58 	mov	lr,2904
80003f8a:	f1 3c 00 0a 	ld.ub	r12,r8[10]
80003f8e:	90 4b       	ld.sh	r11,r8[0x8]
80003f90:	e0 68 3d 7d 	mov	r8,15741
80003f94:	11 88       	ld.ub	r8,r8[0x0]


			for(i1=min(aout[1].target>>8,aout[1].now>>8);i1<max(aout[1].target>>8,aout[1].now>>8)+1;i1++)
80003f96:	f0 08 00 17 	add	r7,r8,r8<<0x1
				monomeLedBuffer[96+i1] = 4;
80003f9a:	fc 07 00 1e 	add	lr,lr,r7<<0x1
			for(i1=min(aout[0].target>>8,aout[0].now>>8);i1<max(aout[0].target>>8,aout[0].now>>8)+1;i1++)
				monomeLedBuffer[80+i1] = 4;
			monomeLedBuffer[80+(aout[0].now>>8)] = 4 + (es.slew[shape_on][0] < SLEW_CV_OFF_THRESH) * 3;


			for(i1=min(aout[1].target>>8,aout[1].now>>8);i1<max(aout[1].target>>8,aout[1].now>>8)+1;i1++)
80003f9e:	a9 4b       	asr	r11,0x8
80003fa0:	fd 07 00 3c 	ld.sh	r7,lr[60]
80003fa4:	f8 0b 0c 45 	max	r5,r12,r11
80003fa8:	e0 6e 0f 9f 	mov	lr,3999
80003fac:	fc 07 19 00 	cp.h	r7,lr
80003fb0:	f9 be 08 07 	movls	lr,7
				monomeLedBuffer[96+i1] = 4;
80003fb4:	f9 be 0b 04 	movhi	lr,4
80003fb8:	f3 6e 00 50 	st.b	r9[80],lr
			for(i1=min(aout[0].target>>8,aout[0].now>>8);i1<max(aout[0].target>>8,aout[0].now>>8)+1;i1++)
				monomeLedBuffer[80+i1] = 4;
			monomeLedBuffer[80+(aout[0].now>>8)] = 4 + (es.slew[shape_on][0] < SLEW_CV_OFF_THRESH) * 3;


			for(i1=min(aout[1].target>>8,aout[1].now>>8);i1<max(aout[1].target>>8,aout[1].now>>8)+1;i1++)
80003fbc:	f8 0b 0d 49 	min	r9,r12,r11
80003fc0:	30 4c       	mov	r12,4
80003fc2:	5c 59       	castu.b	r9
				monomeLedBuffer[96+i1] = 4;
			monomeLedBuffer[96+(aout[1].now>>8)] = 4 + (es.slew[shape_on][1] < SLEW_CV_OFF_THRESH) * 3;
80003fc4:	c0 a8       	rjmp	80003fd8 <refresh+0x428>
80003fc6:	d7 03       	nop
80003fc8:	f2 ce ff ff 	sub	lr,r9,-1
80003fcc:	ec 09 00 09 	add	r9,r6,r9
80003fd0:	f3 6c 00 60 	st.b	r9[96],r12
80003fd4:	f3 de c0 08 	bfextu	r9,lr,0x0,0x8

			for(i1=min(aout[2].target>>8,aout[2].now>>8);i1<max(aout[2].target>>8,aout[2].now>>8)+1;i1++)
80003fd8:	12 35       	cp.w	r5,r9
80003fda:	cf 74       	brge	80003fc8 <refresh+0x418>
80003fdc:	e0 69 3d e4 	mov	r9,15844
80003fe0:	f0 08 00 17 	add	r7,r8,r8<<0x1
			monomeLedBuffer[80+(aout[0].now>>8)] = 4 + (es.slew[shape_on][0] < SLEW_CV_OFF_THRESH) * 3;


			for(i1=min(aout[1].target>>8,aout[1].now>>8);i1<max(aout[1].target>>8,aout[1].now>>8)+1;i1++)
				monomeLedBuffer[96+i1] = 4;
			monomeLedBuffer[96+(aout[1].now>>8)] = 4 + (es.slew[shape_on][1] < SLEW_CV_OFF_THRESH) * 3;
80003fe4:	f2 0b 00 0c 	add	r12,r9,r11

			for(i1=min(aout[2].target>>8,aout[2].now>>8);i1<max(aout[2].target>>8,aout[2].now>>8)+1;i1++)
80003fe8:	12 96       	mov	r6,r9
			monomeLedBuffer[80+(aout[0].now>>8)] = 4 + (es.slew[shape_on][0] < SLEW_CV_OFF_THRESH) * 3;


			for(i1=min(aout[1].target>>8,aout[1].now>>8);i1<max(aout[1].target>>8,aout[1].now>>8)+1;i1++)
				monomeLedBuffer[96+i1] = 4;
			monomeLedBuffer[96+(aout[1].now>>8)] = 4 + (es.slew[shape_on][1] < SLEW_CV_OFF_THRESH) * 3;
80003fea:	e0 6e 0b 58 	mov	lr,2904
80003fee:	e0 69 0b 36 	mov	r9,2870
80003ff2:	fc 07 00 1e 	add	lr,lr,r7<<0x1
80003ff6:	f3 0b 00 10 	ld.sh	r11,r9[16]
80003ffa:	f3 39 00 12 	ld.ub	r9,r9[18]

			for(i1=min(aout[2].target>>8,aout[2].now>>8);i1<max(aout[2].target>>8,aout[2].now>>8)+1;i1++)
80003ffe:	a9 4b       	asr	r11,0x8
80004000:	fd 07 00 3e 	ld.sh	r7,lr[62]
80004004:	f2 0b 0c 45 	max	r5,r9,r11
80004008:	e0 6e 0f 9f 	mov	lr,3999
8000400c:	fc 07 19 00 	cp.h	r7,lr
				monomeLedBuffer[112+i1] = 4;
80004010:	f9 be 08 07 	movls	lr,7
80004014:	f9 be 0b 04 	movhi	lr,4

			for(i1=min(aout[1].target>>8,aout[1].now>>8);i1<max(aout[1].target>>8,aout[1].now>>8)+1;i1++)
				monomeLedBuffer[96+i1] = 4;
			monomeLedBuffer[96+(aout[1].now>>8)] = 4 + (es.slew[shape_on][1] < SLEW_CV_OFF_THRESH) * 3;

			for(i1=min(aout[2].target>>8,aout[2].now>>8);i1<max(aout[2].target>>8,aout[2].now>>8)+1;i1++)
80004018:	f9 6e 00 60 	st.b	r12[96],lr
8000401c:	f2 0b 0d 4c 	min	r12,r9,r11
				monomeLedBuffer[112+i1] = 4;
			monomeLedBuffer[112+(aout[2].now>>8)] = 4 + (es.slew[shape_on][2] < SLEW_CV_OFF_THRESH) * 3;
80004020:	f3 dc c0 08 	bfextu	r9,r12,0x0,0x8
80004024:	30 4c       	mov	r12,4
80004026:	c0 98       	rjmp	80004038 <refresh+0x488>
80004028:	f2 ce ff ff 	sub	lr,r9,-1
8000402c:	ec 09 00 09 	add	r9,r6,r9
80004030:	f3 6c 00 70 	st.b	r9[112],r12
80004034:	f3 de c0 08 	bfextu	r9,lr,0x0,0x8
80004038:	12 35       	cp.w	r5,r9
8000403a:	cf 74       	brge	80004028 <refresh+0x478>
8000403c:	e0 69 0b 58 	mov	r9,2904
80004040:	f0 08 00 18 	add	r8,r8,r8<<0x1
80004044:	f2 08 00 18 	add	r8,r9,r8<<0x1
		}

		if(!edge_state)
80004048:	f1 09 00 40 	ld.sh	r9,r8[64]
8000404c:	e0 68 0f 9f 	mov	r8,3999
80004050:	f0 09 19 00 	cp.h	r9,r8
80004054:	f9 b8 08 07 	movls	r8,7
			monomeLedBuffer[root_y*16+root_x] = 11;
80004058:	f9 b8 0b 04 	movhi	r8,4
8000405c:	e0 69 3d e4 	mov	r9,15844
80004060:	f2 0b 00 0b 	add	r11,r9,r11
80004064:	f7 68 00 70 	st.b	r11[112],r8
		else
			monomeLedBuffer[root_y*16+root_x] = 15;
80004068:	e0 68 3c 44 	mov	r8,15428
8000406c:	e0 6b 3d 7c 	mov	r11,15740
80004070:	90 0e       	ld.sh	lr,r8[0x0]
80004072:	e0 69 0b 2f 	mov	r9,2863

		if(all_edit) {
80004076:	e0 68 3d e4 	mov	r8,15844
8000407a:	30 0c       	mov	r12,0
8000407c:	f8 0e 19 00 	cp.h	lr,r12
80004080:	c0 81       	brne	80004090 <refresh+0x4e0>
			monomeLedBuffer[(root_y)*16+root_x] = 7 + 4 * (blinker < 24);
80004082:	17 8c       	ld.ub	r12,r11[0x0]
80004084:	13 8b       	ld.ub	r11,r9[0x0]
80004086:	f8 09 15 04 	lsl	r9,r12,0x4
8000408a:	16 09       	add	r9,r11
8000408c:	30 bb       	mov	r11,11
8000408e:	c0 78       	rjmp	8000409c <refresh+0x4ec>
80004090:	17 8c       	ld.ub	r12,r11[0x0]
80004092:	13 8b       	ld.ub	r11,r9[0x0]
80004094:	f8 09 15 04 	lsl	r9,r12,0x4
80004098:	16 09       	add	r9,r11
8000409a:	30 fb       	mov	r11,15
8000409c:	f0 09 0b 0b 	st.b	r8[r9],r11
800040a0:	e0 68 3d 96 	mov	r8,15766
800040a4:	30 09       	mov	r9,0
800040a6:	11 88       	ld.ub	r8,r8[0x0]
			monomeLedBuffer[(root_y-1)*16+root_x] = 7 + 4 * (blinker < 24);
800040a8:	f2 08 18 00 	cp.b	r8,r9
800040ac:	c2 30       	breq	800040f2 <refresh+0x542>
800040ae:	e0 68 3d 7c 	mov	r8,15740
			monomeLedBuffer[(root_y-1)*16+root_x+1] = 7 + 4 * (blinker < 24);
800040b2:	11 8c       	ld.ub	r12,r8[0x0]
800040b4:	e0 68 0b 2f 	mov	r8,2863
			monomeLedBuffer[(root_y)*16+root_x+1] = 7 + 4 * (blinker < 24);
800040b8:	e0 69 3d e4 	mov	r9,15844
800040bc:	11 8e       	ld.ub	lr,r8[0x0]
		}
		else if(!singled) {
800040be:	f8 0b 15 04 	lsl	r11,r12,0x4
800040c2:	e0 68 0b 25 	mov	r8,2853
800040c6:	1c 0b       	add	r11,lr
800040c8:	11 88       	ld.ub	r8,r8[0x0]
			if(shape_on == 0) monomeLedBuffer[(root_y-1)*16+root_x] = 11;
800040ca:	31 77       	mov	r7,23
800040cc:	f0 07 18 00 	cp.b	r7,r8
800040d0:	f9 b8 02 0b 	movhs	r8,11
800040d4:	f9 b8 03 07 	movlo	r8,7
800040d8:	f2 0b 0b 08 	st.b	r9[r11],r8
800040dc:	20 1c       	sub	r12,1
800040de:	a5 6c       	lsl	r12,0x4
800040e0:	1c 0c       	add	r12,lr
800040e2:	f2 0c 0b 08 	st.b	r9[r12],r8
800040e6:	f2 0c 00 0c 	add	r12,r9,r12
			else if(shape_on == 1) monomeLedBuffer[(root_y-1)*16+root_x+1] = 11;
800040ea:	b8 98       	st.b	r12[0x1],r8
800040ec:	16 09       	add	r9,r11
800040ee:	b2 98       	st.b	r9[0x1],r8
800040f0:	cb 78       	rjmp	8000425e <refresh+0x6ae>
800040f2:	e0 69 3d 80 	mov	r9,15744
800040f6:	13 89       	ld.ub	r9,r9[0x0]
800040f8:	f0 09 18 00 	cp.b	r9,r8
800040fc:	e0 81 00 b1 	brne	8000425e <refresh+0x6ae>
80004100:	e0 68 3d 7d 	mov	r8,15741
80004104:	11 88       	ld.ub	r8,r8[0x0]
80004106:	58 08       	cp.w	r8,0
80004108:	c1 01       	brne	80004128 <refresh+0x578>
8000410a:	e0 69 0b 2f 	mov	r9,2863
8000410e:	13 89       	ld.ub	r9,r9[0x0]
80004110:	e0 68 3d 7c 	mov	r8,15740
80004114:	30 bb       	mov	r11,11
80004116:	11 88       	ld.ub	r8,r8[0x0]
80004118:	20 18       	sub	r8,1
8000411a:	a5 68       	lsl	r8,0x4
8000411c:	12 08       	add	r8,r9
8000411e:	e0 69 3d e4 	mov	r9,15844
80004122:	f2 08 0b 0b 	st.b	r9[r8],r11
80004126:	c9 c8       	rjmp	8000425e <refresh+0x6ae>
			else if(shape_on == 2) monomeLedBuffer[(root_y)*16+root_x+1] = 11;
80004128:	30 19       	mov	r9,1
8000412a:	f2 08 18 00 	cp.b	r8,r9
8000412e:	c0 91       	brne	80004140 <refresh+0x590>
80004130:	e0 68 0b 2f 	mov	r8,2863
80004134:	11 89       	ld.ub	r9,r8[0x0]
80004136:	e0 68 3d 7c 	mov	r8,15740
			else if(shape_on == 3) monomeLedBuffer[(root_y+1)*16+root_x+1] = 11;
8000413a:	11 88       	ld.ub	r8,r8[0x0]
8000413c:	20 18       	sub	r8,1
8000413e:	c1 78       	rjmp	8000416c <refresh+0x5bc>
80004140:	30 29       	mov	r9,2
80004142:	f2 08 18 00 	cp.b	r8,r9
80004146:	c0 81       	brne	80004156 <refresh+0x5a6>
80004148:	e0 68 0b 2f 	mov	r8,2863
8000414c:	11 89       	ld.ub	r9,r8[0x0]
8000414e:	e0 68 3d 7c 	mov	r8,15740
80004152:	11 88       	ld.ub	r8,r8[0x0]
80004154:	c0 c8       	rjmp	8000416c <refresh+0x5bc>
80004156:	30 39       	mov	r9,3
80004158:	f2 08 18 00 	cp.b	r8,r9
			else if(shape_on == 4) { monomeLedBuffer[(root_y-1)*16+root_x] = 11; monomeLedBuffer[(root_y-2)*16+root_x] = 11; }
8000415c:	c1 01       	brne	8000417c <refresh+0x5cc>
8000415e:	e0 68 0b 2f 	mov	r8,2863
80004162:	11 89       	ld.ub	r9,r8[0x0]
80004164:	e0 68 3d 7c 	mov	r8,15740
80004168:	11 88       	ld.ub	r8,r8[0x0]
8000416a:	2f f8       	sub	r8,-1
8000416c:	a5 68       	lsl	r8,0x4
8000416e:	e0 6b 3d e4 	mov	r11,15844
80004172:	f6 08 00 08 	add	r8,r11,r8
80004176:	12 08       	add	r8,r9
80004178:	30 b9       	mov	r9,11
8000417a:	c4 38       	rjmp	80004200 <refresh+0x650>
8000417c:	30 49       	mov	r9,4
8000417e:	f2 08 18 00 	cp.b	r8,r9
80004182:	c1 71       	brne	800041b0 <refresh+0x600>
80004184:	e0 6b 3d 7c 	mov	r11,15740
			else if(shape_on == 5) { monomeLedBuffer[(root_y-1)*16+root_x+1] = 11; monomeLedBuffer[(root_y-2)*16+root_x+2] = 11; }
80004188:	e0 68 3d e4 	mov	r8,15844
8000418c:	17 8c       	ld.ub	r12,r11[0x0]
8000418e:	30 b9       	mov	r9,11
80004190:	f8 ce 00 01 	sub	lr,r12,1
80004194:	e0 6b 0b 2f 	mov	r11,2863
80004198:	a5 6e       	lsl	lr,0x4
8000419a:	17 8b       	ld.ub	r11,r11[0x0]
8000419c:	16 0e       	add	lr,r11
8000419e:	f0 0e 0b 09 	st.b	r8[lr],r9
800041a2:	20 2c       	sub	r12,2
800041a4:	a5 6c       	lsl	r12,0x4
800041a6:	f8 0b 00 0b 	add	r11,r12,r11
800041aa:	f0 0b 0b 09 	st.b	r8[r11],r9
			else if(shape_on == 6) { monomeLedBuffer[(root_y)*16+root_x+1] = 11; monomeLedBuffer[(root_y)*16+root_x+2] = 11; }
800041ae:	c5 88       	rjmp	8000425e <refresh+0x6ae>
800041b0:	30 59       	mov	r9,5
800041b2:	f2 08 18 00 	cp.b	r8,r9
800041b6:	c1 31       	brne	800041dc <refresh+0x62c>
800041b8:	e0 69 3d 7c 	mov	r9,15740
800041bc:	e0 6b 3d e4 	mov	r11,15844
800041c0:	13 8c       	ld.ub	r12,r9[0x0]
800041c2:	30 b8       	mov	r8,11
800041c4:	f8 ce 00 01 	sub	lr,r12,1
800041c8:	e0 69 0b 2f 	mov	r9,2863
800041cc:	a5 6e       	lsl	lr,0x4
800041ce:	13 89       	ld.ub	r9,r9[0x0]
			else if(shape_on == 7) { monomeLedBuffer[(root_y+1)*16+root_x+1] = 11; monomeLedBuffer[(root_y+2)*16+root_x+2] = 11; }
800041d0:	f6 0e 00 0e 	add	lr,r11,lr
800041d4:	20 2c       	sub	r12,2
800041d6:	12 0e       	add	lr,r9
800041d8:	bc 98       	st.b	lr[0x1],r8
800041da:	c2 a8       	rjmp	8000422e <refresh+0x67e>
800041dc:	30 69       	mov	r9,6
800041de:	f2 08 18 00 	cp.b	r8,r9
800041e2:	c1 11       	brne	80004204 <refresh+0x654>
800041e4:	e0 6b 0b 2f 	mov	r11,2863
800041e8:	17 8b       	ld.ub	r11,r11[0x0]
800041ea:	30 b9       	mov	r9,11
800041ec:	e0 68 3d 7c 	mov	r8,15740
800041f0:	11 88       	ld.ub	r8,r8[0x0]
800041f2:	a5 68       	lsl	r8,0x4
800041f4:	16 08       	add	r8,r11
800041f6:	e0 6b 3d e4 	mov	r11,15844
800041fa:	f6 08 00 08 	add	r8,r11,r8
800041fe:	b0 a9       	st.b	r8[0x2],r9
		}
	}

	// MODIFIERS/MODE
	if(mode == mEdge) monomeLedBuffer[80] = 15;
80004200:	b0 99       	st.b	r8[0x1],r9
80004202:	c2 e8       	rjmp	8000425e <refresh+0x6ae>
80004204:	30 79       	mov	r9,7
80004206:	f2 08 18 00 	cp.b	r8,r9
	if(mode == mSlew) monomeLedBuffer[96] = 15;
8000420a:	c2 a1       	brne	8000425e <refresh+0x6ae>
8000420c:	e0 69 3d 7c 	mov	r9,15740
80004210:	e0 6b 3d e4 	mov	r11,15844

	monome_set_quadrant_flag(0);
80004214:	13 8c       	ld.ub	r12,r9[0x0]
80004216:	30 b8       	mov	r8,11
	monome_set_quadrant_flag(1);
80004218:	f8 ce ff ff 	sub	lr,r12,-1
8000421c:	e0 69 0b 2f 	mov	r9,2863
		}
	}

	// MODIFIERS/MODE
	if(mode == mEdge) monomeLedBuffer[80] = 15;
	if(mode == mSlew) monomeLedBuffer[96] = 15;
80004220:	a5 6e       	lsl	lr,0x4
80004222:	13 89       	ld.ub	r9,r9[0x0]
80004224:	f6 0e 00 0e 	add	lr,r11,lr
80004228:	2f ec       	sub	r12,-2
8000422a:	12 0e       	add	lr,r9
8000422c:	bc 98       	st.b	lr[0x1],r8
8000422e:	a5 6c       	lsl	r12,0x4
80004230:	18 0b       	add	r11,r12
80004232:	f6 09 00 09 	add	r9,r11,r9
80004236:	b2 a8       	st.b	r9[0x2],r8
80004238:	c1 38       	rjmp	8000425e <refresh+0x6ae>
8000423a:	30 f9       	mov	r9,15
8000423c:	e0 68 3d e4 	mov	r8,15844
80004240:	f1 69 00 50 	st.b	r8[80],r9
80004244:	c0 68       	rjmp	80004250 <refresh+0x6a0>
80004246:	30 f9       	mov	r9,15
80004248:	e0 68 3d e4 	mov	r8,15844
8000424c:	f1 69 00 60 	st.b	r8[96],r9
80004250:	30 0c       	mov	r12,0
80004252:	e0 a0 05 a1 	rcall	80004d94 <monome_set_quadrant_flag>
80004256:	30 1c       	mov	r12,1
80004258:	e0 a0 05 9e 	rcall	80004d94 <monome_set_quadrant_flag>
8000425c:	d8 32       	popm	r0-r7,pc
8000425e:	58 1a       	cp.w	r10,1
80004260:	cf 30       	breq	80004246 <refresh+0x696>
80004262:	cf 7b       	rjmp	80004250 <refresh+0x6a0>

80004264 <handler_MonomeConnect>:
	// event_t e = { .type = kEventMonomeDisconnect };
	// event_post(&e);
	timer_remove( &adcTimer );
}

static void handler_MonomeConnect(s32 data) {
80004264:	d4 21       	pushm	r4-r7,lr
	// print_dbg("\r\n// monome connect /////////////////"); 
	key_count = 0;
80004266:	30 09       	mov	r9,0
80004268:	e0 68 3c 60 	mov	r8,15456
	SIZE = monome_size_x();
8000426c:	b0 09       	st.h	r8[0x0],r9
8000426e:	e0 a0 05 9d 	rcall	80004da8 <monome_size_x>
	LENGTH = SIZE - 1;
80004272:	e0 68 0b 20 	mov	r8,2848
}

static void handler_MonomeConnect(s32 data) {
	// print_dbg("\r\n// monome connect /////////////////"); 
	key_count = 0;
	SIZE = monome_size_x();
80004276:	f8 c9 00 01 	sub	r9,r12,1
	LENGTH = SIZE - 1;
8000427a:	b0 8c       	st.b	r8[0x0],r12
	// print_dbg("\r monome size: ");
	// print_dbg_ulong(SIZE);
	VARI = monome_is_vari();
8000427c:	e0 68 0b 30 	mov	r8,2864
80004280:	b0 89       	st.b	r8[0x0],r9
80004282:	e0 a0 05 97 	rcall	80004db0 <monome_is_vari>
	// print_dbg("\r monome vari: ");
	// print_dbg_ulong(VARI);

	if(VARI) re = &refresh;
80004286:	e0 68 0b 35 	mov	r8,2869
8000428a:	b0 8c       	st.b	r8[0x0],r12
8000428c:	e0 68 0b 28 	mov	r8,2856
	else re = &refresh_mono;
80004290:	58 0c       	cp.w	r12,0
	
	shape_key_count = 0;
80004292:	c0 40       	breq	8000429a <handler_MonomeConnect+0x36>
80004294:	fe c9 06 e4 	sub	r9,pc,1764
	key_count = 0;
80004298:	c0 38       	rjmp	8000429e <handler_MonomeConnect+0x3a>
8000429a:	fe c9 0b 82 	sub	r9,pc,2946

	timers_set_monome();
8000429e:	91 09       	st.w	r8[0x0],r9

	monome_set_quadrant_flag(0);
800042a0:	e0 68 3d 76 	mov	r8,15734
800042a4:	30 07       	mov	r7,0
	monome_set_quadrant_flag(1);
800042a6:	b0 07       	st.h	r8[0x0],r7
800042a8:	e0 68 3c 60 	mov	r8,15456


	// turn on ADC polling, reset hysteresis
	adc_convert(&adc);
800042ac:	b0 07       	st.h	r8[0x0],r7
800042ae:	fe b0 f2 3f 	rcall	8000272c <timers_set_monome>
800042b2:	30 0c       	mov	r12,0
void reset_hys() {
	u8 i1;

	for(i1=0;i1<3;i1++) {
		ain[i1].hys = 0;
		ain[i1].latch = adc_last[i1] = adc[i1];
800042b4:	e0 a0 05 70 	rcall	80004d94 <monome_set_quadrant_flag>
800042b8:	30 1c       	mov	r12,1

void reset_hys() {
	u8 i1;

	for(i1=0;i1<3;i1++) {
		ain[i1].hys = 0;
800042ba:	e0 a0 05 6d 	rcall	80004d94 <monome_set_quadrant_flag>
800042be:	e0 66 3c 50 	mov	r6,15440
		ain[i1].latch = adc_last[i1] = adc[i1];
800042c2:	0c 9c       	mov	r12,r6
800042c4:	e0 a0 03 46 	rcall	80004950 <adc_convert>
800042c8:	8c 2a       	ld.sh	r10,r6[0x4]
800042ca:	e0 68 3d 84 	mov	r8,15748
800042ce:	b0 4a       	st.h	r8[0x8],r10
800042d0:	f1 67 00 0a 	st.b	r8[10],r7


	// turn on ADC polling, reset hysteresis
	adc_convert(&adc);
	reset_hys();
	timer_add(&adcTimer,61,&adcTimer_callback, NULL);
800042d4:	b0 a7       	st.b	r8[0x2],r7
800042d6:	b0 e7       	st.b	r8[0x6],r7
800042d8:	e0 69 3c 58 	mov	r9,15448
800042dc:	b2 2a       	st.h	r9[0x4],r10
}
800042de:	8c 0a       	ld.sh	r10,r6[0x0]
800042e0:	b0 0a       	st.h	r8[0x0],r10
800042e2:	b2 0a       	st.h	r9[0x0],r10
800042e4:	8c 1a       	ld.sh	r10,r6[0x2]
800042e6:	b0 2a       	st.h	r8[0x4],r10
800042e8:	b2 1a       	st.h	r9[0x2],r10
800042ea:	33 db       	mov	r11,61
800042ec:	30 09       	mov	r9,0
800042ee:	fe ca fe 42 	sub	r10,pc,-446
800042f2:	e0 6c 05 bc 	mov	r12,1468
800042f6:	e0 a0 0a 41 	rcall	80005778 <timer_add>
800042fa:	d8 22       	popm	r4-r7,pc

800042fc <handler_PollADC>:
800042fc:	d4 31       	pushm	r0-r7,lr
800042fe:	20 5d       	sub	sp,20
80004300:	e0 6c 3c 50 	mov	r12,15440
80004304:	e0 a0 03 26 	rcall	80004950 <adc_convert>
80004308:	e0 69 3d 9a 	mov	r9,15770
8000430c:	13 89       	ld.ub	r9,r9[0x0]
8000430e:	50 49       	stdsp	sp[0x10],r9
80004310:	e0 69 3d 96 	mov	r9,15766
80004314:	13 89       	ld.ub	r9,r9[0x0]
80004316:	50 39       	stdsp	sp[0xc],r9
80004318:	e0 69 3c 48 	mov	r9,15432
8000431c:	72 0c       	ld.w	r12,r9[0x0]
8000431e:	58 2c       	cp.w	r12,2
80004320:	5f 09       	sreq	r9
80004322:	50 29       	stdsp	sp[0x8],r9
80004324:	e0 69 3d 7d 	mov	r9,15741
80004328:	13 84       	ld.ub	r4,r9[0x0]
8000432a:	e0 69 3d 94 	mov	r9,15764
				es.cv[shape_on][i] = aout[i].target = (adc[i] + adc_last[i])>>1;
				aout[i].step = 5; // smooth out the input
			}
			else if(mode == mSlew)
				es.slew[shape_on][i] = aout[i].slew = (adc[i] + adc_last[i])>>1;
			else if(mode == mEdge && i == 0)
8000432e:	e0 68 0b 58 	mov	r8,2904
80004332:	e8 04 00 14 	add	r4,r4,r4<<0x1
80004336:	92 05       	ld.sh	r5,r9[0x0]
80004338:	a1 74       	lsl	r4,0x1
8000433a:	e0 69 07 90 	mov	r9,1936
8000433e:	e8 c3 ff c4 	sub	r3,r4,-60
80004342:	2f 44       	sub	r4,-12
80004344:	10 03       	add	r3,r8
80004346:	10 04       	add	r4,r8
80004348:	90 28       	ld.sh	r8,r8[0x4]
8000434a:	e0 6b 0b 36 	mov	r11,2870
	u8 i,n;

	adc_convert(&adc);

	for(i=0;i<3;i++) {
		if(ain[i].hys) {
8000434e:	13 86       	ld.ub	r6,r9[0x0]
80004350:	e0 6e 3d 84 	mov	lr,15748
80004354:	30 0a       	mov	r10,0
80004356:	50 18       	stdsp	sp[0x4],r8
			if(port_edit == 1) {
80004358:	2f ee       	sub	lr,-2
8000435a:	e0 69 3c 50 	mov	r9,15440
8000435e:	e0 68 3c 58 	mov	r8,15448
				if(i == 0) {
80004362:	2f ab       	sub	r11,-6
80004364:	14 97       	mov	r7,r10
80004366:	1d 82       	ld.ub	r2,lr[0x0]
80004368:	ee 02 18 00 	cp.b	r2,r7
					aout[3].slew = port_time = ((adc[i] + adc_last[i])>>1 >> 4);
8000436c:	c7 a0       	breq	80004460 <handler_PollADC+0x164>
8000436e:	40 42       	lddsp	r2,sp[0x10]
80004370:	30 11       	mov	r1,1
80004372:	e2 02 18 00 	cp.b	r2,r1
80004376:	c0 e1       	brne	80004392 <handler_PollADC+0x96>
80004378:	ee 0a 18 00 	cp.b	r10,r7
					// print_dbg("\r\nportamento: ");
					// print_dbg_ulong(port_time);
				}
			}
			else if(all_edit) {
8000437c:	c6 f1       	brne	8000445a <handler_PollADC+0x15e>
8000437e:	90 82       	ld.uh	r2,r8[0x0]
80004380:	92 85       	ld.uh	r5,r9[0x0]
				if(mode == mNormal) {
80004382:	e4 05 00 05 	add	r5,r2,r5
					for(n=0;n<8;n++)
						es.cv[n][i] = aout[i].target = (adc[i] + adc_last[i])>>1;
80004386:	e0 62 0b 36 	mov	r2,2870
8000438a:	a5 95       	lsr	r5,0x5
8000438c:	e5 55 00 1c 	st.h	r2[28],r5
80004390:	c6 58       	rjmp	8000445a <handler_PollADC+0x15e>
80004392:	40 31       	lddsp	r1,sp[0xc]
80004394:	58 01       	cp.w	r1,0
80004396:	c3 90       	breq	80004408 <handler_PollADC+0x10c>
80004398:	58 0c       	cp.w	r12,0
8000439a:	c1 c1       	brne	800043d2 <handler_PollADC+0xd6>
8000439c:	92 82       	ld.uh	r2,r9[0x0]
8000439e:	90 80       	ld.uh	r0,r8[0x0]
					// print_dbg_ulong(port_time);
				}
			}
			else if(all_edit) {
				if(mode == mNormal) {
					for(n=0;n<8;n++)
800043a0:	04 00       	add	r0,r2
800043a2:	e0 62 0b 58 	mov	r2,2904
800043a6:	f4 c1 ff fa 	sub	r1,r10,-6
800043aa:	e1 d0 b0 30 	bfexts	r0,r0,0x1,0x10
800043ae:	e4 01 00 11 	add	r1,r2,r1<<0x1
800043b2:	50 08       	stdsp	sp[0x0],r8
800043b4:	18 92       	mov	r2,r12
						es.cv[n][i] = aout[i].target = (adc[i] + adc_last[i])>>1;
					aout[i].step = 5; // smooth out the input
800043b6:	a2 00       	st.h	r1[0x0],r0
800043b8:	2f f2       	sub	r2,-1
				}
				else if(mode == mSlew) {
800043ba:	2f a1       	sub	r1,-6
800043bc:	5c 52       	castu.b	r2
					for(n=0;n<8;n++)
						es.slew[n][i] = aout[i].slew = (adc[i] + adc_last[i])>>1;
800043be:	30 88       	mov	r8,8
800043c0:	f0 02 18 00 	cp.b	r2,r8
800043c4:	cf 91       	brne	800043b6 <handler_PollADC+0xba>
800043c6:	40 08       	lddsp	r8,sp[0x0]
800043c8:	30 52       	mov	r2,5
800043ca:	f7 50 ff fc 	st.h	r11[-4],r0
800043ce:	b6 02       	st.h	r11[0x0],r2
800043d0:	c4 58       	rjmp	8000445a <handler_PollADC+0x15e>
800043d2:	58 1c       	cp.w	r12,1
800043d4:	c4 31       	brne	8000445a <handler_PollADC+0x15e>
800043d6:	92 82       	ld.uh	r2,r9[0x0]
					for(n=0;n<8;n++)
						es.cv[n][i] = aout[i].target = (adc[i] + adc_last[i])>>1;
					aout[i].step = 5; // smooth out the input
				}
				else if(mode == mSlew) {
					for(n=0;n<8;n++)
800043d8:	90 80       	ld.uh	r0,r8[0x0]
800043da:	04 00       	add	r0,r2
800043dc:	e0 62 0b 58 	mov	r2,2904
800043e0:	f4 c1 ff e2 	sub	r1,r10,-30
800043e4:	e1 d0 b0 30 	bfexts	r0,r0,0x1,0x10
800043e8:	e4 01 00 11 	add	r1,r2,r1<<0x1
800043ec:	50 08       	stdsp	sp[0x0],r8
						es.slew[n][i] = aout[i].slew = (adc[i] + adc_last[i])>>1;
				}
			}
			else if(mode == mNormal) {
800043ee:	30 02       	mov	r2,0
800043f0:	a2 00       	st.h	r1[0x0],r0
				es.cv[shape_on][i] = aout[i].target = (adc[i] + adc_last[i])>>1;
				aout[i].step = 5; // smooth out the input
800043f2:	2f f2       	sub	r2,-1
800043f4:	2f a1       	sub	r1,-6
					for(n=0;n<8;n++)
						es.slew[n][i] = aout[i].slew = (adc[i] + adc_last[i])>>1;
				}
			}
			else if(mode == mNormal) {
				es.cv[shape_on][i] = aout[i].target = (adc[i] + adc_last[i])>>1;
800043f6:	5c 52       	castu.b	r2
800043f8:	30 88       	mov	r8,8
800043fa:	f0 02 18 00 	cp.b	r2,r8
800043fe:	cf 91       	brne	800043f0 <handler_PollADC+0xf4>
80004400:	40 08       	lddsp	r8,sp[0x0]
80004402:	f7 50 ff fe 	st.h	r11[-2],r0
80004406:	c2 a8       	rjmp	8000445a <handler_PollADC+0x15e>
80004408:	58 0c       	cp.w	r12,0
				aout[i].step = 5; // smooth out the input
			}
			else if(mode == mSlew)
8000440a:	c0 d1       	brne	80004424 <handler_PollADC+0x128>
8000440c:	30 52       	mov	r2,5
				es.slew[shape_on][i] = aout[i].slew = (adc[i] + adc_last[i])>>1;
8000440e:	b6 02       	st.h	r11[0x0],r2
80004410:	90 81       	ld.uh	r1,r8[0x0]
80004412:	92 82       	ld.uh	r2,r9[0x0]
80004414:	e2 02 00 02 	add	r2,r1,r2
80004418:	e5 d2 b0 30 	bfexts	r2,r2,0x1,0x10
8000441c:	a8 02       	st.h	r4[0x0],r2
8000441e:	f7 52 ff fc 	st.h	r11[-4],r2
80004422:	c1 c8       	rjmp	8000445a <handler_PollADC+0x15e>
80004424:	58 1c       	cp.w	r12,1
80004426:	c0 b1       	brne	8000443c <handler_PollADC+0x140>
80004428:	90 81       	ld.uh	r1,r8[0x0]
8000442a:	92 82       	ld.uh	r2,r9[0x0]
8000442c:	e2 02 00 02 	add	r2,r1,r2
80004430:	e5 d2 b0 30 	bfexts	r2,r2,0x1,0x10
80004434:	a6 02       	st.h	r3[0x0],r2
80004436:	f7 52 ff fe 	st.h	r11[-2],r2
8000443a:	c1 08       	rjmp	8000445a <handler_PollADC+0x15e>
8000443c:	ee 0a 18 00 	cp.b	r10,r7
80004440:	5f 02       	sreq	r2
80004442:	40 21       	lddsp	r1,sp[0x8]
80004444:	e3 e2 00 02 	and	r2,r1,r2
80004448:	ee 02 18 00 	cp.b	r2,r7
8000444c:	c0 70       	breq	8000445a <handler_PollADC+0x15e>
8000444e:	90 81       	ld.uh	r1,r8[0x0]
80004450:	92 82       	ld.uh	r2,r9[0x0]
80004452:	e2 02 00 02 	add	r2,r1,r2
			else if(mode == mEdge && i == 0)
80004456:	a5 92       	lsr	r2,0x5
80004458:	50 12       	stdsp	sp[0x4],r2
8000445a:	2f f6       	sub	r6,-1
8000445c:	5c 56       	castu.b	r6
8000445e:	c1 08       	rjmp	8000447e <handler_PollADC+0x182>
80004460:	92 82       	ld.uh	r2,r9[0x0]
80004462:	90 81       	ld.uh	r1,r8[0x0]
80004464:	04 01       	add	r1,r2
				es.edge_fixed_time = ((adc[i] + adc_last[i])>>1 >> 4);
80004466:	fd 12 ff fe 	ld.uh	r2,lr[-2]
8000446a:	a1 51       	asr	r1,0x1
8000446c:	e2 02 01 02 	sub	r2,r1,r2
80004470:	5c 42       	abs	r2


			monomeFrameDirty++;
80004472:	e0 42 00 30 	cp.w	r2,48
80004476:	e0 8a 00 04 	brle	8000447e <handler_PollADC+0x182>
		}
		else if(abs(((adc[i] + adc_last[i])>>1) - ain[i].latch) > POT_HYSTERESIS)
8000447a:	30 12       	mov	r2,1
8000447c:	bc 82       	st.b	lr[0x0],r2
8000447e:	13 12       	ld.sh	r2,r9++
80004480:	10 b2       	st.h	r8++,r2
80004482:	2f fa       	sub	r10,-1
80004484:	2f ce       	sub	lr,-4
80004486:	2f e4       	sub	r4,-2
80004488:	2f 8b       	sub	r11,-8
8000448a:	2f e3       	sub	r3,-2
8000448c:	58 3a       	cp.w	r10,3
8000448e:	fe 91 ff 6c 	brne	80004366 <handler_PollADC+0x6a>
			ain[i].hys = 1;
80004492:	e0 68 3d 94 	mov	r8,15764

		adc_last[i] = adc[i];
80004496:	b0 05       	st.h	r8[0x0],r5
80004498:	e0 68 0b 58 	mov	r8,2904
8000449c:	40 11       	lddsp	r1,sp[0x4]
8000449e:	b0 21       	st.h	r8[0x4],r1
800044a0:	e0 68 07 90 	mov	r8,1936
static void handler_PollADC(s32 data) {
	u8 i,n;

	adc_convert(&adc);

	for(i=0;i<3;i++) {
800044a4:	b0 86       	st.b	r8[0x0],r6
800044a6:	2f bd       	sub	sp,-20
800044a8:	d8 32       	popm	r0-r7,pc
800044aa:	d7 03       	nop

800044ac <adcTimer_callback>:
800044ac:	d4 01       	pushm	lr
800044ae:	30 39       	mov	r9,3
800044b0:	e0 68 05 d4 	mov	r8,1492
800044b4:	91 09       	st.w	r8[0x0],r9
800044b6:	30 09       	mov	r9,0
	// print_dbg("\r\nadc:\t"); print_dbg_ulong((adc[0] + adc_last[0])>>1);
	// print_dbg("\t"); print_dbg_ulong((adc[1] + adc_last[1])>>1);
	// print_dbg("\t"); print_dbg_ulong((adc[2] + adc_last[2])>>1);
	// print_dbg("\t"); print_dbg_ulong((adc[3] + adc_last[3])>>1);

}
800044b8:	10 9c       	mov	r12,r8
800044ba:	91 19       	st.w	r8[0x4],r9
800044bc:	e0 a0 02 d8 	rcall	80004a6c <event_post>
800044c0:	d8 02       	popm	pc
800044c2:	d7 03       	nop

800044c4 <handler_KeyTimer>:
800044c4:	d4 31       	pushm	r0-r7,lr
800044c6:	20 2d       	sub	sp,8
}

static void handler_KeyTimer(s32 data) {
	static u16 i1;

	if(front_timer) {
800044c8:	e0 67 3c 4d 	mov	r7,15437
800044cc:	0f 88       	ld.ub	r8,r7[0x0]
800044ce:	58 08       	cp.w	r8,0
		if(front_timer == 1) {
800044d0:	c1 60       	breq	800044fc <handler_KeyTimer+0x38>
800044d2:	30 19       	mov	r9,1
800044d4:	f2 08 18 00 	cp.b	r8,r9
			static event_t e;
			e.type = kEventSaveFlash;
800044d8:	c1 01       	brne	800044f8 <handler_KeyTimer+0x34>
800044da:	e0 68 06 04 	mov	r8,1540
800044de:	30 59       	mov	r9,5
			event_post(&e);
800044e0:	10 9c       	mov	r12,r8
800044e2:	91 09       	st.w	r8[0x0],r9

			preset_mode = 0;
			front_timer--;
800044e4:	e0 a0 02 c4 	rcall	80004a6c <event_post>
		if(front_timer == 1) {
			static event_t e;
			e.type = kEventSaveFlash;
			event_post(&e);

			preset_mode = 0;
800044e8:	0f 88       	ld.ub	r8,r7[0x0]
			front_timer--;
800044ea:	20 18       	sub	r8,1
		if(front_timer == 1) {
			static event_t e;
			e.type = kEventSaveFlash;
			event_post(&e);

			preset_mode = 0;
800044ec:	30 09       	mov	r9,0
800044ee:	ae 88       	st.b	r7[0x0],r8
800044f0:	e0 68 0b 32 	mov	r8,2866
			front_timer--;
		}
		else front_timer--;
800044f4:	b0 89       	st.b	r8[0x0],r9
	}

	for(i1=0;i1<key_count;i1++) {
800044f6:	c0 38       	rjmp	800044fc <handler_KeyTimer+0x38>
800044f8:	20 18       	sub	r8,1
800044fa:	ae 88       	st.b	r7[0x0],r8
800044fc:	e0 68 06 0c 	mov	r8,1548
80004500:	30 09       	mov	r9,0
		if(key_times[held_keys[i1]])
80004502:	10 97       	mov	r7,r8
		if(--key_times[held_keys[i1]]==0) {
			if(preset_mode == 1) {
80004504:	b0 09       	st.h	r8[0x0],r9
80004506:	e0 65 0a 20 	mov	r5,2592
				if(held_keys[i1] % 16 == 0) {
					preset_select = held_keys[i1] / 16;
					// flash_write();
					static event_t e;
					e.type = kEventSaveFlash;
8000450a:	e0 69 3c 60 	mov	r9,15456
			front_timer--;
		}
		else front_timer--;
	}

	for(i1=0;i1<key_count;i1++) {
8000450e:	e0 68 0a 00 	mov	r8,2560
		if(key_times[held_keys[i1]])
80004512:	e0 66 0b 32 	mov	r6,2866
80004516:	30 10       	mov	r0,1
		if(--key_times[held_keys[i1]]==0) {
80004518:	e0 61 0b 2c 	mov	r1,2860
8000451c:	e0 62 05 dc 	mov	r2,1500
		}
		else front_timer--;
	}

	for(i1=0;i1<key_count;i1++) {
		if(key_times[held_keys[i1]])
80004520:	30 53       	mov	r3,5
		if(--key_times[held_keys[i1]]==0) {
80004522:	c2 98       	rjmp	80004574 <handler_KeyTimer+0xb0>
80004524:	f0 0a 07 0a 	ld.ub	r10,r8[r10]
80004528:	ea 0a 07 0c 	ld.ub	r12,r5[r10]
			if(preset_mode == 1) {
8000452c:	f8 cb 00 01 	sub	r11,r12,1
80004530:	5c 5b       	castu.b	r11
				if(held_keys[i1] % 16 == 0) {
80004532:	58 0c       	cp.w	r12,0
80004534:	c1 d0       	breq	8000456e <handler_KeyTimer+0xaa>
80004536:	ea 0a 0b 0b 	st.b	r5[r10],r11
					preset_select = held_keys[i1] / 16;
					// flash_write();
					static event_t e;
					e.type = kEventSaveFlash;
					event_post(&e);
8000453a:	58 0b       	cp.w	r11,0
	for(i1=0;i1<key_count;i1++) {
		if(key_times[held_keys[i1]])
		if(--key_times[held_keys[i1]]==0) {
			if(preset_mode == 1) {
				if(held_keys[i1] % 16 == 0) {
					preset_select = held_keys[i1] / 16;
8000453c:	c1 91       	brne	8000456e <handler_KeyTimer+0xaa>
					// flash_write();
					static event_t e;
					e.type = kEventSaveFlash;
					event_post(&e);
8000453e:	0d 8b       	ld.ub	r11,r6[0x0]
			if(preset_mode == 1) {
				if(held_keys[i1] % 16 == 0) {
					preset_select = held_keys[i1] / 16;
					// flash_write();
					static event_t e;
					e.type = kEventSaveFlash;
80004540:	e0 0b 18 00 	cp.b	r11,r0
					event_post(&e);
80004544:	c1 51       	brne	8000456e <handler_KeyTimer+0xaa>
80004546:	e9 da c0 04 	bfextu	r4,r10,0x0,0x4
					preset_mode = 0;
8000454a:	c1 21       	brne	8000456e <handler_KeyTimer+0xaa>
					monomeFrameDirty++;
8000454c:	a5 8a       	lsr	r10,0x4
8000454e:	50 19       	stdsp	sp[0x4],r9
80004550:	a2 8a       	st.b	r1[0x0],r10
80004552:	50 08       	stdsp	sp[0x0],r8
80004554:	85 03       	st.w	r2[0x0],r3
			front_timer--;
		}
		else front_timer--;
	}

	for(i1=0;i1<key_count;i1++) {
80004556:	e0 6c 05 dc 	mov	r12,1500
8000455a:	e0 a0 02 89 	rcall	80004a6c <event_post>
8000455e:	e0 6a 07 90 	mov	r10,1936
80004562:	ac 84       	st.b	r6[0x0],r4

			// print_dbg("\rlong press: "); 
			// print_dbg_ulong(held_keys[i1]);
		}
	}
}
80004564:	15 8b       	ld.ub	r11,r10[0x0]
80004566:	2f fb       	sub	r11,-1
80004568:	b4 8b       	st.b	r10[0x0],r11
8000456a:	40 08       	lddsp	r8,sp[0x0]
8000456c:	40 19       	lddsp	r9,sp[0x4]
8000456e:	8e 0a       	ld.sh	r10,r7[0x0]
80004570:	2f fa       	sub	r10,-1
80004572:	ae 0a       	st.h	r7[0x0],r10
80004574:	8e 8a       	ld.uh	r10,r7[0x0]
80004576:	92 0b       	ld.sh	r11,r9[0x0]
80004578:	16 3a       	cp.w	r10,r11
8000457a:	cd 55       	brlt	80004524 <handler_KeyTimer+0x60>
8000457c:	2f ed       	sub	sp,-8
8000457e:	d8 32       	popm	r0-r7,pc

80004580 <keyTimer_callback>:
80004580:	d4 01       	pushm	lr
80004582:	30 49       	mov	r9,4
80004584:	e0 68 05 9c 	mov	r8,1436
80004588:	91 09       	st.w	r8[0x0],r9
8000458a:	30 09       	mov	r9,0
8000458c:	10 9c       	mov	r12,r8
8000458e:	91 19       	st.w	r8[0x4],r9
80004590:	e0 a0 02 6e 	rcall	80004a6c <event_post>
static void keyTimer_callback(void* o) {  
	static event_t e;
	e.type = kEventKeyTimer;
	e.data = 0;
	event_post(&e);
}
80004594:	d8 02       	popm	pc
80004596:	d7 03       	nop

80004598 <monome_refresh_timer_callback>:
80004598:	d4 01       	pushm	lr
8000459a:	e0 68 07 90 	mov	r8,1936
	ftdi_read();
}

// monome refresh callback
static void monome_refresh_timer_callback(void* obj) {
	if(monomeFrameDirty > 0) {
8000459e:	11 89       	ld.ub	r9,r8[0x0]
800045a0:	30 08       	mov	r8,0
800045a2:	f0 09 18 00 	cp.b	r9,r8
		static event_t e;
		e.type = kEventMonomeRefresh;
800045a6:	c0 80       	breq	800045b6 <monome_refresh_timer_callback+0x1e>
800045a8:	e0 68 05 e4 	mov	r8,1508
800045ac:	30 c9       	mov	r9,12
		event_post(&e);
800045ae:	10 9c       	mov	r12,r8
800045b0:	91 09       	st.w	r8[0x0],r9
800045b2:	e0 a0 02 5d 	rcall	80004a6c <event_post>
800045b6:	d8 02       	popm	pc

800045b8 <timers_unset_monome>:
800045b8:	d4 01       	pushm	lr
800045ba:	e0 6c 05 64 	mov	r12,1380
800045be:	e0 a0 08 a7 	rcall	8000570c <timer_remove>

// monome stop polling
void timers_unset_monome(void) {
	// print_dbg("\r\n unsetting monome timers");
	timer_remove( &monomePollTimer );
	timer_remove( &monomeRefreshTimer ); 
800045c2:	e0 6c 06 10 	mov	r12,1552
}
800045c6:	e0 a0 08 a3 	rcall	8000570c <timer_remove>
800045ca:	d8 02       	popm	pc

800045cc <handler_FtdiDisconnect>:
800045cc:	d4 01       	pushm	lr
800045ce:	cf 5f       	rcall	800045b8 <timers_unset_monome>
800045d0:	e0 6c 05 bc 	mov	r12,1468
static void handler_FtdiConnect(s32 data) { ftdi_setup(); }
static void handler_FtdiDisconnect(s32 data) { 
	timers_unset_monome();
	// event_t e = { .type = kEventMonomeDisconnect };
	// event_post(&e);
	timer_remove( &adcTimer );
800045d4:	e0 a0 08 9c 	rcall	8000570c <timer_remove>
}
800045d8:	d8 02       	popm	pc
800045da:	d7 03       	nop

800045dc <handler_FtdiConnect>:
800045dc:	d4 01       	pushm	lr
800045de:	e0 a0 09 35 	rcall	80005848 <ftdi_setup>
800045e2:	d8 02       	popm	pc

800045e4 <main>:
800045e4:	d4 31       	pushm	r0-r7,lr
800045e6:	e0 a0 1d 6f 	rcall	800080c4 <sysclk_init>

int main(void)
{
	sysclk_init();

	init_dbg_rs232(FMCK_HZ);
800045ea:	e0 6c 87 00 	mov	r12,34560
800045ee:	ea 1c 03 93 	orh	r12,0x393
800045f2:	e0 a0 1a 03 	rcall	800079f8 <init_dbg_rs232>

	init_gpio();
800045f6:	e0 a0 02 f9 	rcall	80004be8 <init_gpio>
}


// assign event handlers
static inline void assign_main_event_handlers(void) {
	app_event_handlers[ kEventFront ]	= &handler_Front;
800045fa:	fe c9 24 02 	sub	r9,pc,9218
800045fe:	e0 68 3d 9c 	mov	r8,15772
	// app_event_handlers[ kEventTimer ]	= &handler_Timer;
	app_event_handlers[ kEventPollADC ]	= &handler_PollADC;
80004602:	91 19       	st.w	r8[0x4],r9
	app_event_handlers[ kEventKeyTimer ] = &handler_KeyTimer;
80004604:	fe c9 03 08 	sub	r9,pc,776
	app_event_handlers[ kEventSaveFlash ] = &handler_SaveFlash;
80004608:	91 39       	st.w	r8[0xc],r9
8000460a:	fe c9 01 46 	sub	r9,pc,326
	app_event_handlers[ kEventClockNormal ] = &handler_ClockNormal;
8000460e:	91 49       	st.w	r8[0x10],r9
	app_event_handlers[ kEventFtdiConnect ]	= &handler_FtdiConnect ;
80004610:	fe c9 20 0c 	sub	r9,pc,8204
	app_event_handlers[ kEventFtdiDisconnect ]	= &handler_FtdiDisconnect ;
80004614:	91 59       	st.w	r8[0x14],r9
80004616:	fe c9 22 be 	sub	r9,pc,8894
	app_event_handlers[ kEventMonomeConnect ]	= &handler_MonomeConnect ;
8000461a:	91 69       	st.w	r8[0x18],r9
	app_event_handlers[ kEventMonomeDisconnect ]	= &handler_None ;
8000461c:	fe c9 00 40 	sub	r9,pc,64
	app_event_handlers[ kEventMonomePoll ]	= &handler_MonomePoll ;
80004620:	91 79       	st.w	r8[0x1c],r9
80004622:	fe c9 00 56 	sub	r9,pc,86
	app_event_handlers[ kEventMonomeRefresh ]	= &handler_MonomeRefresh ;
80004626:	91 89       	st.w	r8[0x20],r9
	app_event_handlers[ kEventMonomeGridKey ]	= &handler_MonomeGridKey ;
80004628:	fe c9 03 c4 	sub	r9,pc,964

	init_dbg_rs232(FMCK_HZ);

	init_gpio();
	assign_main_event_handlers();
	init_events();
8000462c:	91 99       	st.w	r8[0x24],r9
8000462e:	fe c9 25 5a 	sub	r9,pc,9562
	init_tc();
80004632:	91 a9       	st.w	r8[0x28],r9
	init_spi();
80004634:	fe c9 24 48 	sub	r9,pc,9288
	init_adc();
80004638:	91 b9       	st.w	r8[0x2c],r9
8000463a:	fe c9 0f be 	sub	r9,pc,4030

	irq_initialize_vectors();
8000463e:	91 c9       	st.w	r8[0x30],r9
	register_interrupts();
80004640:	fe c9 1c 4c 	sub	r9,pc,7244
	cpu_irq_enable();
80004644:	91 d9       	st.w	r8[0x34],r9

	init_usb_host();
80004646:	e0 a0 02 01 	rcall	80004a48 <init_events>
	init_monome();
8000464a:	e0 a0 02 b3 	rcall	80004bb0 <init_tc>


	print_dbg("\r\n\n// earthsea! //////////////////////////////// ");
8000464e:	e0 a0 02 61 	rcall	80004b10 <init_spi>
80004652:	c4 1d       	rcall	800048d4 <init_adc>
	print_dbg_ulong(sizeof(flashy));
80004654:	e0 a0 0d 9e 	rcall	80006190 <INTC_init_interrupts>
80004658:	e0 a0 02 f0 	rcall	80004c38 <register_interrupts>

	root_x = 15;
8000465c:	d5 03       	csrf	0x10
8000465e:	e0 a0 02 55 	rcall	80004b08 <init_usb_host>
	root_y = 0;
80004662:	e0 a0 03 83 	rcall	80004d68 <init_monome>
80004666:	fe cc b6 06 	sub	r12,pc,-18938
	min_x = 15;
8000466a:	e0 a0 19 a5 	rcall	800079b4 <print_dbg>
	min_y = 7;
8000466e:	e0 7c 87 a4 	mov	r12,100260
	singled = 1;
80004672:	e0 a0 19 9b 	rcall	800079a8 <print_dbg_ulong>
80004676:	e0 69 0b 2f 	mov	r9,2863

	r_status = rOff;
8000467a:	30 f8       	mov	r8,15

	gpio_clr_gpio_pin(B00);
8000467c:	b2 88       	st.b	r9[0x0],r8
	root_y = 0;
	min_x = 15;
	min_y = 7;
	singled = 1;

	r_status = rOff;
8000467e:	e0 69 3d 7c 	mov	r9,15740

	gpio_clr_gpio_pin(B00);
80004682:	30 0a       	mov	r10,0

	monomeFrameDirty++;
80004684:	b2 8a       	st.b	r9[0x0],r10
80004686:	e0 69 3d 71 	mov	r9,15729
8000468a:	b2 88       	st.b	r9[0x0],r8


	u8 i1, i2;

	if(flash_is_fresh()) {
8000468c:	e0 68 0b 2e 	mov	r8,2862
80004690:	30 79       	mov	r9,7
80004692:	b0 89       	st.b	r8[0x0],r9
80004694:	e0 68 3d 80 	mov	r8,15744
80004698:	30 19       	mov	r9,1
		print_dbg("\r\nfirst run.");
8000469a:	b0 89       	st.b	r8[0x0],r9
8000469c:	e0 68 3d 78 	mov	r8,15736
		flash_unfresh();
800046a0:	30 07       	mov	r7,0
800046a2:	32 0c       	mov	r12,32

		flashc_memset8((void*)&(flashy.preset_select), 0, 1, true);
800046a4:	91 07       	st.w	r8[0x0],r7
800046a6:	e0 a0 0c fa 	rcall	8000609a <gpio_clr_gpio_pin>
800046aa:	e0 68 07 90 	mov	r8,1936
800046ae:	11 89       	ld.ub	r9,r8[0x0]
800046b0:	2f f9       	sub	r9,-1

		// clear out some reasonable defaults
 		es.edge = eStandard;
		es.edge_fixed_time = 10;
800046b2:	b0 89       	st.b	r8[0x0],r9
		flash_unfresh();

		flashc_memset8((void*)&(flashy.preset_select), 0, 1, true);

		// clear out some reasonable defaults
 		es.edge = eStandard;
800046b4:	49 06       	lddpc	r6,800046f4 <main+0x110>
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// main

int main(void)
800046b6:	32 28       	mov	r8,34
		flash_unfresh();

		flashc_memset8((void*)&(flashy.preset_select), 0, 1, true);

		// clear out some reasonable defaults
 		es.edge = eStandard;
800046b8:	0d 89       	ld.ub	r9,r6[0x0]
		es.edge_fixed_time = 10;
800046ba:	f0 09 18 00 	cp.b	r9,r8
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// main

int main(void)
800046be:	c6 10       	breq	80004780 <main+0x19c>
		flashc_memset8((void*)&(flashy.preset_select), 0, 1, true);

		// clear out some reasonable defaults
 		es.edge = eStandard;
		es.edge_fixed_time = 10;
		es.port_time = 20;
800046c0:	fe cc b6 2c 	sub	r12,pc,-18900
800046c4:	e0 a0 19 78 	rcall	800079b4 <print_dbg>

		for(i1=0;i1<8;i1++) {
			for(i2=0;i2<8;i2++) {
				es.cv[i1][i2] = 0;
800046c8:	fe b0 ef 5a 	rcall	8000257c <flash_unfresh>
800046cc:	30 19       	mov	r9,1
800046ce:	0e 9b       	mov	r11,r7
800046d0:	12 9a       	mov	r10,r9
800046d2:	ec cc ff ff 	sub	r12,r6,-1
800046d6:	e0 a0 0c 23 	rcall	80005f1c <flashc_memset8>
800046da:	30 aa       	mov	r10,10
800046dc:	e0 68 0b 58 	mov	r8,2904
800046e0:	0e 99       	mov	r9,r7
800046e2:	91 07       	st.w	r8[0x0],r7
800046e4:	b0 2a       	st.h	r8[0x4],r10
800046e6:	f0 cc ff e4 	sub	r12,r8,-28
800046ea:	31 4a       	mov	r10,20
800046ec:	10 97       	mov	r7,r8
800046ee:	b0 5a       	st.h	r8[0xa],r10
800046f0:	12 9b       	mov	r11,r9
800046f2:	c0 e8       	rjmp	8000470e <main+0x12a>
800046f4:	80 02       	ld.sh	r2,r0[0x0]
800046f6:	00 00       	add	r0,r0
800046f8:	b4 0b       	st.h	r10[0x0],r11
800046fa:	f5 5b 00 30 	st.h	r10[48],r11
800046fe:	2f ea       	sub	r10,-2
80004700:	18 3a       	cp.w	r10,r12
80004702:	cf b1       	brne	800046f8 <main+0x114>
80004704:	2f f9       	sub	r9,-1
80004706:	f4 cc ff fa 	sub	r12,r10,-6
8000470a:	58 89       	cp.w	r9,8
8000470c:	c0 70       	breq	8000471a <main+0x136>
8000470e:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80004712:	a1 7a       	lsl	r10,0x1
80004714:	2f 4a       	sub	r10,-12
80004716:	0e 0a       	add	r10,r7
80004718:	cf 0b       	rjmp	800046f8 <main+0x114>
8000471a:	f0 ca cc 14 	sub	r10,r8,-13292
8000471e:	16 99       	mov	r9,r11
80004720:	e0 68 0b 58 	mov	r8,2904
80004724:	f0 c8 fc 94 	sub	r8,r8,-876
80004728:	b0 8b       	st.b	r8[0x0],r11
8000472a:	b0 19       	st.h	r8[0x2],r9
8000472c:	b0 c9       	st.b	r8[0x4],r9
8000472e:	f0 c8 fc f8 	sub	r8,r8,-776
80004732:	14 38       	cp.w	r8,r10
80004734:	cf a1       	brne	80004728 <main+0x144>
80004736:	49 26       	lddpc	r6,8000477c <main+0x198>
80004738:	30 07       	mov	r7,0
8000473a:	ec c5 ff fe 	sub	r5,r6,-2
8000473e:	30 14       	mov	r4,1
80004740:	2b c6       	sub	r6,-68
80004742:	e0 63 3c 64 	mov	r3,15460
80004746:	30 19       	mov	r9,1
80004748:	e0 6a 30 ec 	mov	r10,12524
8000474c:	e0 6b 0b 58 	mov	r11,2904
80004750:	0c 9c       	mov	r12,r6
80004752:	e0 a0 0b eb 	rcall	80005f28 <flashc_memcpy>
80004756:	e8 07 09 48 	lsl	r8,r4,r7
8000475a:	0a 9c       	mov	r12,r5
8000475c:	e6 07 0b 08 	st.b	r3[r7],r8
80004760:	ec c6 cf 14 	sub	r6,r6,-12524
80004764:	2f f7       	sub	r7,-1
80004766:	2f 85       	sub	r5,-8
80004768:	30 19       	mov	r9,1
8000476a:	30 8a       	mov	r10,8
8000476c:	e0 6b 3c 64 	mov	r11,15460
				es.slew[i1][i2] = 0;
80004770:	e0 a0 0b dc 	rcall	80005f28 <flashc_memcpy>
 		es.edge = eStandard;
		es.edge_fixed_time = 10;
		es.port_time = 20;

		for(i1=0;i1<8;i1++) {
			for(i2=0;i2<8;i2++) {
80004774:	58 87       	cp.w	r7,8
80004776:	ce 81       	brne	80004746 <main+0x162>
80004778:	c5 08       	rjmp	80004818 <main+0x234>
8000477a:	d7 03       	nop
8000477c:	80 02       	ld.sh	r2,r0[0x0]
		// clear out some reasonable defaults
 		es.edge = eStandard;
		es.edge_fixed_time = 10;
		es.port_time = 20;

		for(i1=0;i1<8;i1++) {
8000477e:	00 00       	add	r0,r0
80004780:	0d 98       	ld.ub	r8,r6[0x1]
80004782:	e0 67 0b 2c 	mov	r7,2860
80004786:	ae 88       	st.b	r7[0x0],r8
80004788:	fe b0 ed 50 	rcall	80002228 <flash_read>
8000478c:	0f 88       	ld.ub	r8,r7[0x0]
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// main

int main(void)
8000478e:	ec 08 00 36 	add	r6,r6,r8<<0x3
			}
		}

		for(i1=0;i1<16;i1++) {
			es.p[i1].length = 0;
			es.p[i1].total_time = 0;
80004792:	e0 68 3c 64 	mov	r8,15460
		// clear out some reasonable defaults
 		es.edge = eStandard;
		es.edge_fixed_time = 10;
		es.port_time = 20;

		for(i1=0;i1<8;i1++) {
80004796:	2f e6       	sub	r6,-2
80004798:	f0 c9 ff f8 	sub	r9,r8,-8
			}
		}

		for(i1=0;i1<16;i1++) {
			es.p[i1].length = 0;
			es.p[i1].total_time = 0;
8000479c:	0d 3a       	ld.ub	r10,r6++
			es.p[i1].loop = 0;
8000479e:	10 ca       	st.b	r8++,r10
800047a0:	12 38       	cp.w	r8,r9
800047a2:	cf d1       	brne	8000479c <main+0x1b8>
				es.cv[i1][i2] = 0;
				es.slew[i1][i2] = 0;
			}
		}

		for(i1=0;i1<16;i1++) {
800047a4:	e0 69 3d 84 	mov	r9,15748
800047a8:	30 0a       	mov	r10,0
800047aa:	e0 6b 3c 50 	mov	r11,15440
800047ae:	f3 6a 00 0a 	st.b	r9[10],r10
800047b2:	b2 aa       	st.b	r9[0x2],r10
		}

		// save all presets, clear glyphs
		for(i1=0;i1<8;i1++) {
			flashc_memcpy((void *)&flashy.es[i1], &es, sizeof(es), true);
			glyph[i1] = (1<<i1);
800047b4:	b2 ea       	st.b	r9[0x6],r10
			es.p[i1].loop = 0;
		}

		// save all presets, clear glyphs
		for(i1=0;i1<8;i1++) {
			flashc_memcpy((void *)&flashy.es[i1], &es, sizeof(es), true);
800047b6:	96 2c       	ld.sh	r12,r11[0x4]
800047b8:	b2 4c       	st.h	r9[0x8],r12
800047ba:	e0 6a 3c 58 	mov	r10,15448
800047be:	b4 2c       	st.h	r10[0x4],r12
800047c0:	e0 68 0b 36 	mov	r8,2870
			glyph[i1] = (1<<i1);
800047c4:	30 0c       	mov	r12,0
800047c6:	f1 5c 00 16 	st.h	r8[22],r12
800047ca:	b0 3c       	st.h	r8[0x6],r12
800047cc:	b0 7c       	st.h	r8[0xe],r12
			flashc_memcpy((void *)&flashy.glyph[i1], &glyph, sizeof(glyph), true);
800047ce:	96 0c       	ld.sh	r12,r11[0x0]
800047d0:	b2 0c       	st.h	r9[0x0],r12
800047d2:	b4 0c       	st.h	r10[0x0],r12
800047d4:	96 1b       	ld.sh	r11,r11[0x2]
800047d6:	b2 2b       	st.h	r9[0x4],r11
800047d8:	b4 1b       	st.h	r10[0x2],r11
800047da:	e0 6a 0b 58 	mov	r10,2904
800047de:	e0 69 3d 7d 	mov	r9,15741
			es.p[i1].total_time = 0;
			es.p[i1].loop = 0;
		}

		// save all presets, clear glyphs
		for(i1=0;i1<8;i1++) {
800047e2:	13 89       	ld.ub	r9,r9[0x0]
800047e4:	f2 09 00 19 	add	r9,r9,r9<<0x1
800047e8:	f4 09 00 19 	add	r9,r10,r9<<0x1
800047ec:	f3 0a 00 40 	ld.sh	r10,r9[64]
800047f0:	f1 5a 00 14 	st.h	r8[20],r10
800047f4:	92 6a       	ld.sh	r10,r9[0xc]
800047f6:	b0 1a       	st.h	r8[0x2],r10

	}
	else {
		// load from flash at startup
		
		preset_select = flashy.preset_select;
800047f8:	b0 0a       	st.h	r8[0x0],r10
800047fa:	92 7a       	ld.sh	r10,r9[0xe]
800047fc:	b0 5a       	st.h	r8[0xa],r10
		flash_read();
800047fe:	b0 4a       	st.h	r8[0x8],r10
80004800:	f3 0a 00 10 	ld.sh	r10,r9[16]
80004804:	f1 5a 00 12 	st.h	r8[18],r10
80004808:	f1 5a 00 10 	st.h	r8[16],r10
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// main

int main(void)
8000480c:	f3 0a 00 3c 	ld.sh	r10,r9[60]
		// load from flash at startup
		
		preset_select = flashy.preset_select;
		flash_read();
		for(i1=0;i1<8;i1++)
			glyph[i1] = flashy.glyph[preset_select][i1];
80004810:	b0 2a       	st.h	r8[0x4],r10
80004812:	f3 09 00 3e 	ld.sh	r9,r9[62]
	else {
		// load from flash at startup
		
		preset_select = flashy.preset_select;
		flash_read();
		for(i1=0;i1<8;i1++)
80004816:	b0 69       	st.h	r8[0xc],r9

void reset_hys() {
	u8 i1;

	for(i1=0;i1<3;i1++) {
		ain[i1].hys = 0;
80004818:	30 f9       	mov	r9,15
8000481a:	e0 68 0b 30 	mov	r8,2864
8000481e:	b0 89       	st.b	r8[0x0],r9
80004820:	31 09       	mov	r9,16
80004822:	e0 68 0b 20 	mov	r8,2848
		ain[i1].latch = adc_last[i1] = adc[i1];
80004826:	b0 89       	st.b	r8[0x0],r9
80004828:	fe c9 0c 78 	sub	r9,pc,3192
8000482c:	e0 68 0b 28 	mov	r8,2856

		reset_hys();
		for(i1=0;i1<3;i1++) {
			aout[i1].target = aout[i1].now = es.cv[shape_on][i1];
			aout[i1].slew = es.slew[shape_on][i1];
			aout[i1].step = 0;
80004830:	91 09       	st.w	r8[0x0],r9
80004832:	31 c8       	mov	r8,28
80004834:	fe c9 27 5e 	sub	r9,pc,10078
80004838:	30 0b       	mov	r11,0
void reset_hys() {
	u8 i1;

	for(i1=0;i1<3;i1++) {
		ain[i1].hys = 0;
		ain[i1].latch = adc_last[i1] = adc[i1];
8000483a:	91 09       	st.w	r8[0x0],r9
8000483c:	fe 7c 24 00 	mov	r12,-56320
80004840:	e0 a0 0d 28 	rcall	80006290 <spi_selectChip>
80004844:	e0 6b 00 80 	mov	r11,128
		for(i1=0;i1<8;i1++)
			glyph[i1] = flashy.glyph[preset_select][i1];

		reset_hys();
		for(i1=0;i1<3;i1++) {
			aout[i1].target = aout[i1].now = es.cv[shape_on][i1];
80004848:	fe 7c 24 00 	mov	r12,-56320
8000484c:	e0 a0 0d b1 	rcall	800063ae <spi_write>
80004850:	e0 6b 00 ff 	mov	r11,255
			aout[i1].slew = es.slew[shape_on][i1];
80004854:	fe 7c 24 00 	mov	r12,-56320
80004858:	e0 a0 0d ab 	rcall	800063ae <spi_write>
		for(i1=0;i1<8;i1++)
			glyph[i1] = flashy.glyph[preset_select][i1];

		reset_hys();
		for(i1=0;i1<3;i1++) {
			aout[i1].target = aout[i1].now = es.cv[shape_on][i1];
8000485c:	e0 6b 00 ff 	mov	r11,255
80004860:	fe 7c 24 00 	mov	r12,-56320
80004864:	e0 a0 0d a5 	rcall	800063ae <spi_write>
80004868:	30 0b       	mov	r11,0
8000486a:	fe 7c 24 00 	mov	r12,-56320
8000486e:	e0 a0 0d 39 	rcall	800062e0 <spi_unselectChip>
80004872:	30 09       	mov	r9,0
			aout[i1].slew = es.slew[shape_on][i1];
80004874:	fe ca 17 8c 	sub	r10,pc,6028
80004878:	30 6b       	mov	r11,6
8000487a:	e0 6c 05 ec 	mov	r12,1516
8000487e:	e0 a0 07 7d 	rcall	80005778 <timer_add>
			aout[i1].step = 0;
		}
	}


	LENGTH = 15;
80004882:	30 09       	mov	r9,0
80004884:	fe ca 22 78 	sub	r10,pc,8824
	SIZE = 16;
80004888:	30 5b       	mov	r11,5
8000488a:	e0 6c 05 a4 	mov	r12,1444

	re = &refresh;
8000488e:	e0 a0 07 75 	rcall	80005778 <timer_add>

	clock_pulse = &clock;
80004892:	30 09       	mov	r9,0
80004894:	fe ca 03 14 	sub	r10,pc,788
80004898:	33 3b       	mov	r11,51
	// clock_external = !gpio_get_pin_value(B09);

	// setup daisy chain for two dacs
	spi_selectChip(SPI,DAC_SPI);
8000489a:	e0 6c 05 7c 	mov	r12,1404
8000489e:	e0 a0 07 6d 	rcall	80005778 <timer_add>
	spi_write(SPI,0x80);
800048a2:	e0 69 27 10 	mov	r9,10000
800048a6:	e0 68 3d 90 	mov	r8,15760
800048aa:	e0 67 05 94 	mov	r7,1428
	spi_write(SPI,0xff);
800048ae:	b0 09       	st.h	r8[0x0],r9
800048b0:	e0 66 3d 9c 	mov	r6,15772
800048b4:	c0 28       	rjmp	800048b8 <main+0x2d4>
800048b6:	d7 03       	nop
800048b8:	e0 6c 05 94 	mov	r12,1428
	spi_write(SPI,0xff);
800048bc:	c0 0d       	rcall	80004abc <event_next>
800048be:	cf d0       	breq	800048b8 <main+0x2d4>
800048c0:	6e 08       	ld.w	r8,r7[0x0]
800048c2:	6e 1c       	ld.w	r12,r7[0x4]
800048c4:	ec 08 03 28 	ld.w	r8,r6[r8<<0x2]
	spi_unselectChip(SPI,DAC_SPI);
800048c8:	5d 18       	icall	r8
800048ca:	cf 7b       	rjmp	800048b8 <main+0x2d4>

800048cc <monome_poll_timer_callback>:
800048cc:	d4 01       	pushm	lr
800048ce:	e0 a0 07 df 	rcall	8000588c <ftdi_read>

	timer_add(&clockTimer,6,&clockTimer_callback, NULL);
800048d2:	d8 02       	popm	pc

800048d4 <init_adc>:
  (*dst)[3] = val & 0xfff;

}

// setup ad7923
void init_adc(void) {
800048d4:	d4 21       	pushm	r4-r7,lr
  u16 cmd;

  // at powerup, the part wants a dummy conversion with DIN high
  spi_selectChip(SPI, ADC_SPI);
800048d6:	30 1b       	mov	r11,1
800048d8:	fe 7c 24 00 	mov	r12,-56320
800048dc:	e0 a0 0c da 	rcall	80006290 <spi_selectChip>
  spi_write(SPI, 0xffff);
800048e0:	e0 6b ff ff 	mov	r11,65535
800048e4:	fe 7c 24 00 	mov	r12,-56320
800048e8:	e0 a0 0d 63 	rcall	800063ae <spi_write>
  spi_unselectChip(SPI, ADC_SPI);
800048ec:	30 1b       	mov	r11,1
800048ee:	fe 7c 24 00 	mov	r12,-56320
800048f2:	e0 a0 0c f7 	rcall	800062e0 <spi_unselectChip>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800048f6:	e1 b7 00 42 	mfsr	r7,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800048fa:	ee 78 42 40 	mov	r8,1000000
800048fe:	30 09       	mov	r9,0
80004900:	e0 6a e5 3f 	mov	r10,58687
80004904:	ea 1a 11 f0 	orh	r10,0x11f0
80004908:	30 0b       	mov	r11,0
8000490a:	e0 a0 1c 03 	rcall	80008110 <__avr32_udiv64>
8000490e:	ee 0a 00 0a 	add	r10,r7,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004912:	e1 b8 00 42 	mfsr	r8,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004916:	14 37       	cp.w	r7,r10
80004918:	e0 88 00 05 	brls	80004922 <init_adc+0x4e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000491c:	0e 38       	cp.w	r8,r7
8000491e:	cf a2       	brcc	80004912 <init_adc+0x3e>
80004920:	c0 38       	rjmp	80004926 <init_adc+0x52>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004922:	0e 38       	cp.w	r8,r7
80004924:	c0 43       	brcs	8000492c <init_adc+0x58>
80004926:	14 38       	cp.w	r8,r10
80004928:	fe 98 ff f5 	brls	80004912 <init_adc+0x3e>
  // wait for powerup time (5us in datasheet)
  delay_us(5);
  
  // write base configuration
  cmd = AD7923_CMD_BASE << 4;
  spi_selectChip(SPI, ADC_SPI );
8000492c:	30 1b       	mov	r11,1
8000492e:	fe 7c 24 00 	mov	r12,-56320
80004932:	e0 a0 0c af 	rcall	80006290 <spi_selectChip>
  spi_write(SPI, cmd );
80004936:	e0 6b 83 10 	mov	r11,33552
8000493a:	fe 7c 24 00 	mov	r12,-56320
8000493e:	e0 a0 0d 38 	rcall	800063ae <spi_write>
  spi_unselectChip(SPI, ADC_SPI );
80004942:	30 1b       	mov	r11,1
80004944:	fe 7c 24 00 	mov	r12,-56320
80004948:	e0 a0 0c cc 	rcall	800062e0 <spi_unselectChip>

}
8000494c:	d8 22       	popm	r4-r7,pc
8000494e:	d7 03       	nop

80004950 <adc_convert>:
80004950:	d4 21       	pushm	r4-r7,lr
80004952:	20 1d       	sub	sp,4
80004954:	30 1b       	mov	r11,1
80004956:	18 97       	mov	r7,r12
80004958:	fe 7c 24 00 	mov	r12,-56320
8000495c:	e0 a0 0c 9a 	rcall	80006290 <spi_selectChip>

  // data into AD7923 is a left-justified 12-bit value in a 16-bit word
  // so, always lshift the command before sending
  cmd = ( AD7923_CMD_BASE ) << 4;
  spi_selectChip(SPI, ADC_SPI);
  spi_write(SPI, cmd);
80004960:	e0 6b 83 10 	mov	r11,33552
80004964:	fe 7c 24 00 	mov	r12,-56320
80004968:	e0 a0 0d 23 	rcall	800063ae <spi_write>
  spi_unselectChip(SPI, ADC_SPI);
8000496c:	30 1b       	mov	r11,1
8000496e:	fe 7c 24 00 	mov	r12,-56320
80004972:	e0 a0 0c b7 	rcall	800062e0 <spi_unselectChip>

  // get channel 0, setup channel 1
  cmd = ( AD7923_CMD_BASE | AD7923_CTL_ADD0 ) << 4;
  spi_selectChip(SPI, ADC_SPI);
80004976:	30 1b       	mov	r11,1
80004978:	fe 7c 24 00 	mov	r12,-56320
8000497c:	e0 a0 0c 8a 	rcall	80006290 <spi_selectChip>
  spi_write(SPI, cmd);
80004980:	e0 6b 87 10 	mov	r11,34576
80004984:	fe 7c 24 00 	mov	r12,-56320
80004988:	e0 a0 0d 13 	rcall	800063ae <spi_write>
  spi_read(SPI, &val);
8000498c:	fa c6 ff fe 	sub	r6,sp,-2
80004990:	fe 7c 24 00 	mov	r12,-56320
80004994:	0c 9b       	mov	r11,r6
80004996:	e0 a0 0d 1a 	rcall	800063ca <spi_read>
  spi_unselectChip(SPI, ADC_SPI);
8000499a:	30 1b       	mov	r11,1
8000499c:	fe 7c 24 00 	mov	r12,-56320
800049a0:	e0 a0 0c a0 	rcall	800062e0 <spi_unselectChip>
  (*dst)[0] = val & 0xfff; 
800049a4:	9a 18       	ld.sh	r8,sp[0x2]
800049a6:	f1 d8 c0 0c 	bfextu	r8,r8,0x0,0xc

  // get channel 1, setup channel 2
  cmd = ( AD7923_CMD_BASE | AD7923_CTL_ADD1 ) << 4;
  spi_selectChip(SPI, ADC_SPI);
800049aa:	30 1b       	mov	r11,1
  cmd = ( AD7923_CMD_BASE | AD7923_CTL_ADD0 ) << 4;
  spi_selectChip(SPI, ADC_SPI);
  spi_write(SPI, cmd);
  spi_read(SPI, &val);
  spi_unselectChip(SPI, ADC_SPI);
  (*dst)[0] = val & 0xfff; 
800049ac:	ae 08       	st.h	r7[0x0],r8

  // get channel 1, setup channel 2
  cmd = ( AD7923_CMD_BASE | AD7923_CTL_ADD1 ) << 4;
  spi_selectChip(SPI, ADC_SPI);
800049ae:	fe 7c 24 00 	mov	r12,-56320
800049b2:	e0 a0 0c 6f 	rcall	80006290 <spi_selectChip>
  spi_write(SPI, cmd);
800049b6:	e0 6b 8b 10 	mov	r11,35600
800049ba:	fe 7c 24 00 	mov	r12,-56320
800049be:	e0 a0 0c f8 	rcall	800063ae <spi_write>
  spi_read(SPI, &val);
800049c2:	0c 9b       	mov	r11,r6
800049c4:	fe 7c 24 00 	mov	r12,-56320
800049c8:	e0 a0 0d 01 	rcall	800063ca <spi_read>
  spi_unselectChip(SPI, ADC_SPI);
800049cc:	30 1b       	mov	r11,1
800049ce:	fe 7c 24 00 	mov	r12,-56320
800049d2:	e0 a0 0c 87 	rcall	800062e0 <spi_unselectChip>
  (*dst)[1] = val & 0xfff;
800049d6:	9a 18       	ld.sh	r8,sp[0x2]
800049d8:	f1 d8 c0 0c 	bfextu	r8,r8,0x0,0xc

  // get channel 2, setup channel 3
  cmd = ( AD7923_CMD_BASE | AD7923_CTL_ADD1 | AD7923_CTL_ADD0 ) << 4;
  spi_selectChip(SPI, ADC_SPI);
800049dc:	30 1b       	mov	r11,1
  cmd = ( AD7923_CMD_BASE | AD7923_CTL_ADD1 ) << 4;
  spi_selectChip(SPI, ADC_SPI);
  spi_write(SPI, cmd);
  spi_read(SPI, &val);
  spi_unselectChip(SPI, ADC_SPI);
  (*dst)[1] = val & 0xfff;
800049de:	ae 18       	st.h	r7[0x2],r8

  // get channel 2, setup channel 3
  cmd = ( AD7923_CMD_BASE | AD7923_CTL_ADD1 | AD7923_CTL_ADD0 ) << 4;
  spi_selectChip(SPI, ADC_SPI);
800049e0:	fe 7c 24 00 	mov	r12,-56320
800049e4:	e0 a0 0c 56 	rcall	80006290 <spi_selectChip>
  spi_write(SPI, cmd);
800049e8:	e0 6b 8f 10 	mov	r11,36624
800049ec:	fe 7c 24 00 	mov	r12,-56320
800049f0:	e0 a0 0c df 	rcall	800063ae <spi_write>
  spi_read(SPI, &val);
800049f4:	0c 9b       	mov	r11,r6
800049f6:	fe 7c 24 00 	mov	r12,-56320
800049fa:	e0 a0 0c e8 	rcall	800063ca <spi_read>
  spi_unselectChip(SPI, ADC_SPI);
800049fe:	30 1b       	mov	r11,1
80004a00:	fe 7c 24 00 	mov	r12,-56320
80004a04:	e0 a0 0c 6e 	rcall	800062e0 <spi_unselectChip>
  (*dst)[2] = val & 0xfff;
80004a08:	9a 18       	ld.sh	r8,sp[0x2]
80004a0a:	f1 d8 c0 0c 	bfextu	r8,r8,0x0,0xc

  // get channel 3, dummy write
  cmd = ( AD7923_CMD_BASE ) << 4;
  spi_selectChip(SPI, ADC_SPI);
80004a0e:	30 1b       	mov	r11,1
  cmd = ( AD7923_CMD_BASE | AD7923_CTL_ADD1 | AD7923_CTL_ADD0 ) << 4;
  spi_selectChip(SPI, ADC_SPI);
  spi_write(SPI, cmd);
  spi_read(SPI, &val);
  spi_unselectChip(SPI, ADC_SPI);
  (*dst)[2] = val & 0xfff;
80004a10:	ae 28       	st.h	r7[0x4],r8

  // get channel 3, dummy write
  cmd = ( AD7923_CMD_BASE ) << 4;
  spi_selectChip(SPI, ADC_SPI);
80004a12:	fe 7c 24 00 	mov	r12,-56320
80004a16:	e0 a0 0c 3d 	rcall	80006290 <spi_selectChip>
  spi_write(SPI, cmd);
80004a1a:	e0 6b 83 10 	mov	r11,33552
80004a1e:	fe 7c 24 00 	mov	r12,-56320
80004a22:	e0 a0 0c c6 	rcall	800063ae <spi_write>
  spi_read(SPI, &val);
80004a26:	0c 9b       	mov	r11,r6
80004a28:	fe 7c 24 00 	mov	r12,-56320
80004a2c:	e0 a0 0c cf 	rcall	800063ca <spi_read>
  spi_unselectChip(SPI, ADC_SPI);
80004a30:	30 1b       	mov	r11,1
80004a32:	fe 7c 24 00 	mov	r12,-56320
80004a36:	e0 a0 0c 55 	rcall	800062e0 <spi_unselectChip>
  (*dst)[3] = val & 0xfff;
80004a3a:	9a 18       	ld.sh	r8,sp[0x2]
80004a3c:	f1 d8 c0 0c 	bfextu	r8,r8,0x0,0xc
80004a40:	ae 38       	st.h	r7[0x6],r8

}
80004a42:	2f fd       	sub	sp,-4
80004a44:	d8 22       	popm	r4-r7,pc
80004a46:	d7 03       	nop

80004a48 <init_events>:
// initializes (or re-initializes)  the system event queue.
 void init_events( void ) {
  int k;
  
  // set queue (circular list) to empty
  putIdx = 0;
80004a48:	e0 6a 06 28 	mov	r10,1576
80004a4c:	30 08       	mov	r8,0
  getIdx = 0;
80004a4e:	95 08       	st.w	r10[0x0],r8

  // zero out the event records
  for ( k = 0; k < MAX_EVENTS; k++ ) {
    sysEvents[ k ].type = 0;
80004a50:	e0 6a 06 2c 	mov	r10,1580
 void init_events( void ) {
  int k;
  
  // set queue (circular list) to empty
  putIdx = 0;
  getIdx = 0;
80004a54:	10 99       	mov	r9,r8

// The system event queue is a circular array of event records.
 static event_t sysEvents[ MAX_EVENTS ];

// initializes (or re-initializes)  the system event queue.
 void init_events( void ) {
80004a56:	95 08       	st.w	r10[0x0],r8
80004a58:	e0 68 06 30 	mov	r8,1584
  getIdx = 0;

  // zero out the event records
  for ( k = 0; k < MAX_EVENTS; k++ ) {
    sysEvents[ k ].type = 0;
    sysEvents[ k ].data = 0;
80004a5c:	f0 ca fe c0 	sub	r10,r8,-320
  // set queue (circular list) to empty
  putIdx = 0;
  getIdx = 0;

  // zero out the event records
  for ( k = 0; k < MAX_EVENTS; k++ ) {
80004a60:	91 09       	st.w	r8[0x0],r9
80004a62:	91 19       	st.w	r8[0x4],r9
    sysEvents[ k ].type = 0;
    sysEvents[ k ].data = 0;
  }
}
80004a64:	2f 88       	sub	r8,-8
80004a66:	14 38       	cp.w	r8,r10
80004a68:	cf c1       	brne	80004a60 <init_events+0x18>
80004a6a:	5e fc       	retal	r12

80004a6c <event_post>:
80004a6c:	d4 01       	pushm	lr
80004a6e:	d3 43       	ssrf	0x14
80004a70:	e0 68 06 28 	mov	r8,1576

  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);
  
  // increment write idx, posbily wrapping
  saveIndex = putIdx;
  INCR_EVENT_INDEX( putIdx );
80004a74:	70 0a       	ld.w	r10,r8[0x0]
80004a76:	f4 c9 ff ff 	sub	r9,r10,-1
80004a7a:	91 09       	st.w	r8[0x0],r9
80004a7c:	e0 49 00 28 	cp.w	r9,40
80004a80:	c0 31       	brne	80004a86 <event_post+0x1a>
80004a82:	30 09       	mov	r9,0
  if ( putIdx != getIdx  ) {
80004a84:	91 09       	st.w	r8[0x0],r9
80004a86:	e0 68 06 2c 	mov	r8,1580
80004a8a:	e0 69 06 28 	mov	r9,1576
80004a8e:	70 0b       	ld.w	r11,r8[0x0]
    sysEvents[ putIdx ].type = e->type;
80004a90:	72 08       	ld.w	r8,r9[0x0]
80004a92:	16 38       	cp.w	r8,r11
80004a94:	c0 c0       	breq	80004aac <event_post+0x40>
80004a96:	e0 69 06 30 	mov	r9,1584
    sysEvents[ putIdx ].data = e->data;
80004a9a:	78 0a       	ld.w	r10,r12[0x0]
80004a9c:	f2 08 09 3a 	st.w	r9[r8<<0x3],r10
80004aa0:	f2 08 00 38 	add	r8,r9,r8<<0x3
    status = true;
  } else {
    // idx wrapped, so queue is full, restore idx
    putIdx = saveIndex;
    print_dbg("\r\n event queue full!");
80004aa4:	78 19       	ld.w	r9,r12[0x4]
    sysEvents[ putIdx ].type = e->type;
    sysEvents[ putIdx ].data = e->data;
    status = true;
  } else {
    // idx wrapped, so queue is full, restore idx
    putIdx = saveIndex;
80004aa6:	30 1c       	mov	r12,1
    print_dbg("\r\n event queue full!");
80004aa8:	91 19       	st.w	r8[0x4],r9
80004aaa:	c0 78       	rjmp	80004ab8 <event_post+0x4c>
80004aac:	fe cc b7 68 	sub	r12,pc,-18584
  } 

  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
  return status;
80004ab0:	93 0a       	st.w	r9[0x0],r10
80004ab2:	e0 a0 17 81 	rcall	800079b4 <print_dbg>
80004ab6:	30 0c       	mov	r12,0
80004ab8:	d5 43       	csrf	0x14
80004aba:	d8 02       	popm	pc

80004abc <event_next>:
80004abc:	18 98       	mov	r8,r12
80004abe:	d3 43       	ssrf	0x14
80004ac0:	e0 6a 06 28 	mov	r10,1576
80004ac4:	e0 69 06 2c 	mov	r9,1580
u8 event_next( event_t *e ) {
  u8 status;
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);
  
  // if pointers are equal, the queue is empty... don't allow idx's to wrap!
  if ( getIdx != putIdx ) {
80004ac8:	74 0b       	ld.w	r11,r10[0x0]
80004aca:	72 0a       	ld.w	r10,r9[0x0]
    INCR_EVENT_INDEX( getIdx );
80004acc:	16 3a       	cp.w	r10,r11
80004ace:	c1 60       	breq	80004afa <event_next+0x3e>
80004ad0:	2f fa       	sub	r10,-1
80004ad2:	93 0a       	st.w	r9[0x0],r10
80004ad4:	e0 4a 00 28 	cp.w	r10,40
80004ad8:	c0 31       	brne	80004ade <event_next+0x22>
    e->type = sysEvents[ getIdx ].type;
80004ada:	30 0a       	mov	r10,0
80004adc:	93 0a       	st.w	r9[0x0],r10
80004ade:	e0 69 06 30 	mov	r9,1584
    e->data = sysEvents[ getIdx ].data;
80004ae2:	e0 6a 06 2c 	mov	r10,1580
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);
  
  // if pointers are equal, the queue is empty... don't allow idx's to wrap!
  if ( getIdx != putIdx ) {
    INCR_EVENT_INDEX( getIdx );
    e->type = sysEvents[ getIdx ].type;
80004ae6:	74 0a       	ld.w	r10,r10[0x0]
    e->data = sysEvents[ getIdx ].data;
80004ae8:	f2 0a 00 3b 	add	r11,r9,r10<<0x3
80004aec:	f2 0a 03 39 	ld.w	r9,r9[r10<<0x3]
80004af0:	30 1c       	mov	r12,1
    status = true;
  } else {
    e->type  = 0xff;
    e->data = 0;
80004af2:	91 09       	st.w	r8[0x0],r9
    INCR_EVENT_INDEX( getIdx );
    e->type = sysEvents[ getIdx ].type;
    e->data = sysEvents[ getIdx ].data;
    status = true;
  } else {
    e->type  = 0xff;
80004af4:	76 19       	ld.w	r9,r11[0x4]
80004af6:	91 19       	st.w	r8[0x4],r9
    e->data = 0;
80004af8:	c0 68       	rjmp	80004b04 <event_next+0x48>
    INCR_EVENT_INDEX( getIdx );
    e->type = sysEvents[ getIdx ].type;
    e->data = sysEvents[ getIdx ].data;
    status = true;
  } else {
    e->type  = 0xff;
80004afa:	30 0c       	mov	r12,0
    e->data = 0;
    status = false;
  }

  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
80004afc:	e0 69 00 ff 	mov	r9,255
  return status;
}
80004b00:	91 1c       	st.w	r8[0x4],r12
80004b02:	91 09       	st.w	r8[0x0],r9
80004b04:	d5 43       	csrf	0x14
80004b06:	5e fc       	retal	r12

80004b08 <init_usb_host>:
  gpio_enable_module(TWI_GPIO_MAP, sizeof(TWI_GPIO_MAP) / sizeof(TWI_GPIO_MAP[0]));
}
*/

// initialize USB host stack
void init_usb_host (void) {
80004b08:	d4 01       	pushm	lr
  uhc_start();
80004b0a:	e0 a0 17 d3 	rcall	80007ab0 <uhc_start>
}
80004b0e:	d8 02       	popm	pc

80004b10 <init_spi>:
80004b10:	d4 21       	pushm	r4-r7,lr
80004b12:	20 4d       	sub	sp,16
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80004b14:	30 5b       	mov	r11,5
80004b16:	30 2c       	mov	r12,2
80004b18:	e0 a0 1a 62 	rcall	80007fdc <sysclk_priv_enable_module>
    {SPI_NPCS0_PIN,  SPI_NPCS0_FUNCTION },
    {SPI_NPCS1_PIN,  SPI_NPCS1_FUNCTION },
  };

  // Assign GPIO to SPI.
  gpio_enable_module(SPI_GPIO_MAP, sizeof(SPI_GPIO_MAP) / sizeof(SPI_GPIO_MAP[0]));
80004b1c:	30 5b       	mov	r11,5
80004b1e:	fe cc b7 a6 	sub	r12,pc,-18522
80004b22:	e0 a0 0a 89 	rcall	80006034 <gpio_enable_module>
    .trans_delay = 0,
    .spck_delay = 0,
    .stay_act = 1,
    .spi_mode = 1,
    .modfdis = 1
  };
80004b26:	fe c8 b7 be 	sub	r8,pc,-18498
80004b2a:	f0 ea 00 08 	ld.d	r10,r8[8]
80004b2e:	fa eb 00 08 	st.d	sp[8],r10
80004b32:	f0 e8 00 00 	ld.d	r8,r8[0]
80004b36:	1a 97       	mov	r7,sp


  // Initialize as master.
  spi_initMaster(SPI, &spiOptions);
80004b38:	fa e9 00 00 	st.d	sp[0],r8
80004b3c:	1a 9b       	mov	r11,sp
80004b3e:	fe 7c 24 00 	mov	r12,-56320
  // Set SPI selection mode: variable_ps, pcs_decode, delay.
  spi_selectionMode(SPI, 0, 0, 0);
80004b42:	e0 a0 0b 73 	rcall	80006228 <spi_initMaster>
80004b46:	30 09       	mov	r9,0
80004b48:	fe 7c 24 00 	mov	r12,-56320
80004b4c:	12 9a       	mov	r10,r9
80004b4e:	12 9b       	mov	r11,r9
  // Enable SPI module.
  spi_enable(SPI);
80004b50:	e0 a0 0b 8b 	rcall	80006266 <spi_selectionMode>
80004b54:	fe 7c 24 00 	mov	r12,-56320

  // spi_setupChipReg( SPI, &spiOptions, FPBA_HZ );
  spi_setupChipReg(SPI, &spiOptions, sysclk_get_pba_hz() );
80004b58:	e0 a0 0c 28 	rcall	800063a8 <spi_enable>
80004b5c:	e0 66 87 00 	mov	r6,34560
80004b60:	ea 16 03 93 	orh	r6,0x393
80004b64:	1a 9b       	mov	r11,sp
80004b66:	0c 9a       	mov	r10,r6
80004b68:	fe 7c 24 00 	mov	r12,-56320
  // add ADC chip register
  spiOptions.reg          = ADC_SPI;
  spiOptions.baudrate     = 20000000;
  spiOptions.bits         = 16;
  spiOptions.spi_mode     = 2;
  spiOptions.spck_delay   = 0;
80004b6c:	e0 a0 0b ce 	rcall	80006308 <spi_setupChipReg>
  spiOptions.trans_delay  = 5;
  spiOptions.stay_act     = 0;
  spiOptions.modfdis      = 0;
80004b70:	30 08       	mov	r8,0
  // add ADC chip register
  spiOptions.reg          = ADC_SPI;
  spiOptions.baudrate     = 20000000;
  spiOptions.bits         = 16;
  spiOptions.spi_mode     = 2;
  spiOptions.spck_delay   = 0;
80004b72:	fb 68 00 0d 	st.b	sp[13],r8
  spiOptions.trans_delay  = 5;
  spiOptions.stay_act     = 0;
80004b76:	fb 68 00 09 	st.b	sp[9],r8
  // spi_setupChipReg( SPI, &spiOptions, FPBA_HZ );
  spi_setupChipReg(SPI, &spiOptions, sysclk_get_pba_hz() );


  // add ADC chip register
  spiOptions.reg          = ADC_SPI;
80004b7a:	fb 68 00 0b 	st.b	sp[11],r8
  spiOptions.baudrate     = 20000000;
80004b7e:	30 18       	mov	r8,1
80004b80:	ba 88       	st.b	sp[0x0],r8
80004b82:	e0 68 2d 00 	mov	r8,11520
80004b86:	ea 18 01 31 	orh	r8,0x131
  spiOptions.bits         = 16;
80004b8a:	50 18       	stdsp	sp[0x4],r8
80004b8c:	31 08       	mov	r8,16
  spiOptions.spi_mode     = 2;
80004b8e:	fb 68 00 08 	st.b	sp[8],r8
80004b92:	30 28       	mov	r8,2
  spiOptions.spck_delay   = 0;
  spiOptions.trans_delay  = 5;
80004b94:	fb 68 00 0c 	st.b	sp[12],r8
  spiOptions.stay_act     = 0;
  spiOptions.modfdis      = 0;

  spi_setupChipReg( SPI, &spiOptions, FPBA_HZ );
80004b98:	30 58       	mov	r8,5
  spiOptions.reg          = ADC_SPI;
  spiOptions.baudrate     = 20000000;
  spiOptions.bits         = 16;
  spiOptions.spi_mode     = 2;
  spiOptions.spck_delay   = 0;
  spiOptions.trans_delay  = 5;
80004b9a:	0c 9a       	mov	r10,r6
80004b9c:	1a 9b       	mov	r11,sp
  spiOptions.stay_act     = 0;
  spiOptions.modfdis      = 0;

  spi_setupChipReg( SPI, &spiOptions, FPBA_HZ );
80004b9e:	fb 68 00 0a 	st.b	sp[10],r8
80004ba2:	fe 7c 24 00 	mov	r12,-56320

  // spi_enable(SPI);
 }
80004ba6:	e0 a0 0b b1 	rcall	80006308 <spi_setupChipReg>
80004baa:	2f cd       	sub	sp,-16
80004bac:	d8 22       	popm	r4-r7,pc
80004bae:	d7 03       	nop

80004bb0 <init_tc>:
80004bb0:	d4 01       	pushm	lr
80004bb2:	fe cb b8 52 	sub	r11,pc,-18350
80004bb6:	fe 7c 38 00 	mov	r12,-51200
80004bba:	e0 a0 0c 19 	rcall	800063ec <tc_init_waveform>
80004bbe:	e0 6a 01 d4 	mov	r10,468
80004bc2:	30 0b       	mov	r11,0
80004bc4:	fe 7c 38 00 	mov	r12,-51200
80004bc8:	e0 a0 0c 74 	rcall	800064b0 <tc_write_rc>
  // so RC = fPBA / 128 / 1000
  //  tc_write_rc(tc, APP_TC_CHANNEL, (FPBA_HZ / 128000));
  tc_write_rc(tc, APP_TC_CHANNEL, (FPBA_HZ / 128000));

  // configure the timer interrupt
  tc_configure_interrupts(tc, APP_TC_CHANNEL, &tc_interrupt);
80004bcc:	30 0b       	mov	r11,0
80004bce:	fe ca b8 72 	sub	r10,pc,-18318
80004bd2:	fe 7c 38 00 	mov	r12,-51200
  // Start the timer/counter.
  tc_start(tc, APP_TC_CHANNEL);
80004bd6:	e0 a0 0c 87 	rcall	800064e4 <tc_configure_interrupts>
80004bda:	30 0b       	mov	r11,0
80004bdc:	fe 7c 38 00 	mov	r12,-51200
}
80004be0:	e0 a0 0c 56 	rcall	8000648c <tc_start>
80004be4:	d8 02       	popm	pc
80004be6:	d7 03       	nop

80004be8 <init_gpio>:
80004be8:	d4 01       	pushm	lr
80004bea:	32 0c       	mov	r12,32
80004bec:	e0 a0 0a 34 	rcall	80006054 <gpio_enable_gpio_pin>
80004bf0:	32 1c       	mov	r12,33
80004bf2:	e0 a0 0a 31 	rcall	80006054 <gpio_enable_gpio_pin>
80004bf6:	32 2c       	mov	r12,34
80004bf8:	e0 a0 0a 2e 	rcall	80006054 <gpio_enable_gpio_pin>

extern void init_gpio(void) {
    gpio_enable_gpio_pin(B00);
    gpio_enable_gpio_pin(B01);
    gpio_enable_gpio_pin(B02);
    gpio_enable_gpio_pin(B03);
80004bfc:	32 3c       	mov	r12,35
80004bfe:	e0 a0 0a 2b 	rcall	80006054 <gpio_enable_gpio_pin>
    gpio_enable_gpio_pin(B04);
80004c02:	32 4c       	mov	r12,36
80004c04:	e0 a0 0a 28 	rcall	80006054 <gpio_enable_gpio_pin>
    gpio_enable_gpio_pin(B05);
80004c08:	32 5c       	mov	r12,37
80004c0a:	e0 a0 0a 25 	rcall	80006054 <gpio_enable_gpio_pin>
    gpio_enable_gpio_pin(B06);
80004c0e:	32 6c       	mov	r12,38
80004c10:	e0 a0 0a 22 	rcall	80006054 <gpio_enable_gpio_pin>
    gpio_enable_gpio_pin(B07);
80004c14:	32 7c       	mov	r12,39
80004c16:	e0 a0 0a 1f 	rcall	80006054 <gpio_enable_gpio_pin>
    gpio_enable_gpio_pin(B08);
80004c1a:	32 8c       	mov	r12,40
80004c1c:	e0 a0 0a 1c 	rcall	80006054 <gpio_enable_gpio_pin>
    gpio_enable_gpio_pin(B09);
80004c20:	32 9c       	mov	r12,41
80004c22:	e0 a0 0a 19 	rcall	80006054 <gpio_enable_gpio_pin>
    gpio_enable_gpio_pin(B10);
80004c26:	32 ac       	mov	r12,42
80004c28:	e0 a0 0a 16 	rcall	80006054 <gpio_enable_gpio_pin>
    gpio_enable_gpio_pin(NMI);
80004c2c:	30 dc       	mov	r12,13
80004c2e:	e0 a0 0a 13 	rcall	80006054 <gpio_enable_gpio_pin>
}
80004c32:	d8 02       	popm	pc

80004c34 <clock_null>:
#include "timers.h"
#include "types.h"

//#define UI_IRQ_PRIORITY AVR32_INTC_INT2

void clock_null(u8 phase) {;;}
80004c34:	5e fc       	retal	r12
80004c36:	d7 03       	nop

80004c38 <register_interrupts>:

//-----------------------------
//---- external function definitions

// register interrupts
void register_interrupts(void) {
80004c38:	d4 01       	pushm	lr
  // enable interrupts on GPIO inputs
  gpio_enable_pin_interrupt( NMI, GPIO_PIN_CHANGE);
80004c3a:	30 0b       	mov	r11,0
80004c3c:	30 dc       	mov	r12,13
80004c3e:	e0 a0 0a 3b 	rcall	800060b4 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( B08, GPIO_PIN_CHANGE);
80004c42:	30 0b       	mov	r11,0
80004c44:	32 8c       	mov	r12,40
80004c46:	e0 a0 0a 37 	rcall	800060b4 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( B09,	GPIO_PIN_CHANGE);
80004c4a:	30 0b       	mov	r11,0
80004c4c:	32 9c       	mov	r12,41
80004c4e:	e0 a0 0a 33 	rcall	800060b4 <gpio_enable_pin_interrupt>


  // PA08 - PA15
  INTC_register_interrupt( &irq_port0_line1, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PA08 / 8), UI_IRQ_PRIORITY);
80004c52:	30 2a       	mov	r10,2
80004c54:	34 1b       	mov	r11,65
80004c56:	fe cc ff 7e 	sub	r12,pc,-130
80004c5a:	e0 a0 0a 65 	rcall	80006124 <INTC_register_interrupt>

  // PB08 - PB15
  INTC_register_interrupt( &irq_port1_line1, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PB08 / 8), UI_IRQ_PRIORITY);
80004c5e:	30 2a       	mov	r10,2
80004c60:	34 5b       	mov	r11,69
80004c62:	fe cc ff 5e 	sub	r12,pc,-162

  // register TC interrupt
  INTC_register_interrupt(&irq_tc, APP_TC_IRQ, UI_IRQ_PRIORITY);
80004c66:	e0 a0 0a 5f 	rcall	80006124 <INTC_register_interrupt>
80004c6a:	30 2a       	mov	r10,2
80004c6c:	e0 6b 01 c0 	mov	r11,448
80004c70:	fe cc ff f4 	sub	r12,pc,-12

  // register uart interrupt
  // INTC_register_interrupt(&irq_usart, AVR32_USART0_IRQ, UI_IRQ_PRIORITY);
}
80004c74:	e0 a0 0a 58 	rcall	80006124 <INTC_register_interrupt>
80004c78:	d8 02       	popm	pc
80004c7a:	d7 03       	nop

80004c7c <irq_tc>:
80004c7c:	eb cd 40 c0 	pushm	r6-r7,lr
80004c80:	e0 68 07 84 	mov	r8,1924
80004c84:	30 1a       	mov	r10,1
80004c86:	f0 e6 00 00 	ld.d	r6,r8[0]


// timer irq
__attribute__((__interrupt__))
static void irq_tc(void) {
  tcTicks++;
80004c8a:	30 0b       	mov	r11,0
80004c8c:	ec 0a 00 0a 	add	r10,r6,r10
80004c90:	ee 0b 00 4b 	adc	r11,r7,r11
80004c94:	f0 eb 00 00 	st.d	r8[0],r10
  // overflow control
  if(tcTicks > tcMax) { 
80004c98:	e0 69 07 80 	mov	r9,1920
80004c9c:	f0 ea 00 00 	ld.d	r10,r8[0]
80004ca0:	e0 66 ff ff 	mov	r6,65535
80004ca4:	ea 16 7f ff 	orh	r6,0x7fff
80004ca8:	30 07       	mov	r7,0
80004caa:	0c 3a       	cp.w	r10,r6
80004cac:	ee 0b 13 00 	cpc	r11,r7
    tcTicks = 0;
80004cb0:	e0 88 00 08 	brls	80004cc0 <irq_tc+0x44>
80004cb4:	30 0a       	mov	r10,0
80004cb6:	30 0b       	mov	r11,0
    tcOverflow = 1;
80004cb8:	f0 eb 00 00 	st.d	r8[0],r10
  } else {
    tcOverflow = 0;
80004cbc:	30 18       	mov	r8,1
80004cbe:	c0 28       	rjmp	80004cc2 <irq_tc+0x46>
  }
  process_timers();
80004cc0:	30 08       	mov	r8,0
80004cc2:	b2 88       	st.b	r9[0x0],r8
  // clear interrupt flag by reading timer SR
  tc_read_sr(APP_TC, APP_TC_CHANNEL);
80004cc4:	e0 a0 05 00 	rcall	800056c4 <process_timers>
80004cc8:	30 0b       	mov	r11,0
80004cca:	fe 7c 38 00 	mov	r12,-51200
}
80004cce:	e0 a0 0b e8 	rcall	8000649e <tc_read_sr>
80004cd2:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80004cd6:	d6 03       	rete

80004cd8 <irq_port0_line1>:
80004cd8:	eb cd 40 80 	pushm	r7,lr
80004cdc:	30 dc       	mov	r12,13
80004cde:	e0 a0 0a 0c 	rcall	800060f6 <gpio_get_pin_interrupt_flag>
80004ce2:	c0 e0       	breq	80004cfe <irq_port0_line1+0x26>

// interrupt handler for PA08-PA15
__attribute__((__interrupt__))
static void irq_port0_line1(void) {
    if(gpio_get_pin_interrupt_flag(NMI)) {
      gpio_clear_pin_interrupt_flag(NMI);
80004ce4:	30 dc       	mov	r12,13
80004ce6:	e0 a0 0a 14 	rcall	8000610e <gpio_clear_pin_interrupt_flag>
      // print_dbg("\r\n ### NMI ### ");
      static event_t e;
      e.type = kEventFront;
80004cea:	30 18       	mov	r8,1
80004cec:	e0 67 07 78 	mov	r7,1912
80004cf0:	30 dc       	mov	r12,13
      e.data = gpio_get_pin_value(NMI);
80004cf2:	8f 08       	st.w	r7[0x0],r8
80004cf4:	e0 a0 09 bb 	rcall	8000606a <gpio_get_pin_value>
      event_post(&e);
80004cf8:	8f 1c       	st.w	r7[0x4],r12
80004cfa:	0e 9c       	mov	r12,r7
80004cfc:	cb 8e       	rcall	80004a6c <event_post>
    }
}
80004cfe:	e3 cd 40 80 	ldm	sp++,r7,lr
80004d02:	d6 03       	rete

80004d04 <irq_port1_line1>:
80004d04:	eb cd 40 80 	pushm	r7,lr
80004d08:	32 9c       	mov	r12,41
80004d0a:	e0 a0 09 f6 	rcall	800060f6 <gpio_get_pin_interrupt_flag>
80004d0e:	c1 20       	breq	80004d32 <irq_port1_line1+0x2e>
80004d10:	30 68       	mov	r8,6
80004d12:	e0 67 07 70 	mov	r7,1904
80004d16:	32 9c       	mov	r12,41
    // clock norm
    if(gpio_get_pin_interrupt_flag(B09)) {

      static event_t e;
      e.type = kEventClockNormal;
      e.data = !gpio_get_pin_value(B09);
80004d18:	8f 08       	st.w	r7[0x0],r8
80004d1a:	e0 a0 09 a8 	rcall	8000606a <gpio_get_pin_value>
80004d1e:	18 98       	mov	r8,r12
80004d20:	ec 18 00 01 	eorl	r8,0x1
      event_post(&e);
80004d24:	5c 58       	castu.b	r8
    // clock norm
    if(gpio_get_pin_interrupt_flag(B09)) {

      static event_t e;
      e.type = kEventClockNormal;
      e.data = !gpio_get_pin_value(B09);
80004d26:	0e 9c       	mov	r12,r7
      event_post(&e);
80004d28:	8f 18       	st.w	r7[0x4],r8
80004d2a:	ca 1e       	rcall	80004a6c <event_post>

      gpio_clear_pin_interrupt_flag(B09);
80004d2c:	32 9c       	mov	r12,41
80004d2e:	e0 a0 09 f0 	rcall	8000610e <gpio_clear_pin_interrupt_flag>
    }

    // clock in
    if(gpio_get_pin_interrupt_flag(B08)) {
80004d32:	32 8c       	mov	r12,40
80004d34:	e0 a0 09 e1 	rcall	800060f6 <gpio_get_pin_interrupt_flag>
80004d38:	c1 30       	breq	80004d5e <irq_port1_line1+0x5a>
      // CLOCK BOUNCY WITHOUT THESE PRINTS
      print_dbg("\rclk: ");
80004d3a:	fe cc b9 9a 	sub	r12,pc,-18022
80004d3e:	e0 a0 16 3b 	rcall	800079b4 <print_dbg>
      print_dbg_ulong(gpio_get_pin_value(B08));
80004d42:	32 8c       	mov	r12,40
80004d44:	e0 a0 09 93 	rcall	8000606a <gpio_get_pin_value>
80004d48:	e0 a0 16 30 	rcall	800079a8 <print_dbg_ulong>
      (*clock_pulse)(gpio_get_pin_value(B08));
80004d4c:	31 c8       	mov	r8,28
80004d4e:	32 8c       	mov	r12,40
80004d50:	70 07       	ld.w	r7,r8[0x0]
80004d52:	e0 a0 09 8c 	rcall	8000606a <gpio_get_pin_value>
      gpio_clear_pin_interrupt_flag(B08);
80004d56:	5d 17       	icall	r7
80004d58:	32 8c       	mov	r12,40
80004d5a:	e0 a0 09 da 	rcall	8000610e <gpio_clear_pin_interrupt_flag>
    }
}
80004d5e:	e3 cd 40 80 	ldm	sp++,r7,lr
80004d62:	d6 03       	rete

80004d64 <read_serial_dummy>:
  u8 vari; // is variable brightness, true/false
} monomeDesc;


//// dummy functions
static void read_serial_dummy(void) { return; }
80004d64:	5e fc       	retal	r12
80004d66:	d7 03       	nop

80004d68 <init_monome>:

//================================================
//----- extern function definitions

// init
void init_monome(void) {
80004d68:	e0 68 3d e4 	mov	r8,15844
80004d6c:	30 0a       	mov	r10,0
80004d6e:	f0 c9 ff 00 	sub	r9,r8,-256
  u32 i;
  for(i=0; i<MONOME_MAX_LED_BYTES; i++) {
80004d72:	10 ca       	st.b	r8++,r10
80004d74:	12 38       	cp.w	r8,r9
    monomeLedBuffer[i] = 0;
  }
  //  print_dbg("\r\n finished monome class init");
}
80004d76:	cf e1       	brne	80004d72 <init_monome+0xa>
80004d78:	5e fc       	retal	r12
80004d7a:	d7 03       	nop

80004d7c <monome_grid_key_parse_event_data>:

  ev.type = kEventMonomeGridKey;
  event_post(&ev);
}

void monome_grid_key_parse_event_data(u32 data, u8* x, u8* y, u8* val) {
80004d7c:	20 1d       	sub	sp,4
  u8* bdata = (u8*)(&data);
  *x = bdata[0];
80004d7e:	f8 08 16 18 	lsr	r8,r12,0x18
80004d82:	b6 88       	st.b	r11[0x0],r8
  *y = bdata[1];
80004d84:	f1 dc c2 08 	bfextu	r8,r12,0x10,0x8
80004d88:	b4 88       	st.b	r10[0x0],r8
  *val = bdata[2];
80004d8a:	f9 dc c1 08 	bfextu	r12,r12,0x8,0x8
80004d8e:	b2 8c       	st.b	r9[0x0],r12
}
80004d90:	2f fd       	sub	sp,-4
80004d92:	5e fc       	retal	r12

80004d94 <monome_set_quadrant_flag>:
  /* print_dbg_hex(monomeFrameDirty); */
}

// set given quadrant dirty flag
extern void monome_set_quadrant_flag(u8 q) {
  monomeFrameDirty |= (1 << q);
80004d94:	e0 68 07 90 	mov	r8,1936
80004d98:	30 19       	mov	r9,1
80004d9a:	11 8a       	ld.ub	r10,r8[0x0]
80004d9c:	f2 0c 09 49 	lsl	r9,r9,r12
80004da0:	14 49       	or	r9,r10
}
80004da2:	b0 89       	st.b	r8[0x0],r9
80004da4:	5e fc       	retal	r12
80004da6:	d7 03       	nop

80004da8 <monome_size_x>:
  monomeLedBuffer[monome_xy_idx(x,y)] ^= 0xff;
  monome_calc_quadrant_flag(x, y);  
}


u8 monome_size_x(void) { return mdesc.cols; }
80004da8:	32 08       	mov	r8,32
80004daa:	f1 3c 00 08 	ld.ub	r12,r8[8]
80004dae:	5e fc       	retal	r12

80004db0 <monome_is_vari>:
80004db0:	32 08       	mov	r8,32
80004db2:	f1 3c 00 0c 	ld.ub	r12,r8[12]
u8 monome_size_y(void) {  return mdesc.rows; }
u8 monome_is_vari(void) {  return mdesc.vari; }
80004db6:	5e fc       	retal	r12

80004db8 <set_intense_mext>:
80004db8:	5e fc       	retal	r12
80004dba:	d7 03       	nop

80004dbc <monome_grid_refresh>:
  }
  return 0;
}

// check dirty flags and refresh leds
void monome_grid_refresh(void) {
80004dbc:	d4 01       	pushm	lr
  // may need to wait after each quad until tx transfer is complete
  u8 busy = ftdi_tx_busy();
80004dbe:	e0 a0 05 41 	rcall	80005840 <ftdi_tx_busy>

  // check quad 0
  if( monomeFrameDirty & 0b0001 ) {
80004dc2:	e0 68 07 90 	mov	r8,1936
80004dc6:	11 88       	ld.ub	r8,r8[0x0]
80004dc8:	ed b8 00 00 	bld	r8,0x0
80004dcc:	c0 40       	breq	80004dd4 <monome_grid_refresh+0x18>
    while( busy ) { busy = ftdi_tx_busy(); }
80004dce:	c1 38       	rjmp	80004df4 <monome_grid_refresh+0x38>
80004dd0:	e0 a0 05 38 	rcall	80005840 <ftdi_tx_busy>
80004dd4:	58 0c       	cp.w	r12,0
    (*monome_grid_map)(0, 0, monomeLedBuffer);
80004dd6:	cf d1       	brne	80004dd0 <monome_grid_refresh+0x14>
80004dd8:	18 9b       	mov	r11,r12
80004dda:	e0 68 3d dc 	mov	r8,15836
80004dde:	e0 6a 3d e4 	mov	r10,15844
    monomeFrameDirty &= 0b1110;
80004de2:	70 08       	ld.w	r8,r8[0x0]
80004de4:	5d 18       	icall	r8
80004de6:	e0 69 07 90 	mov	r9,1936
80004dea:	30 1c       	mov	r12,1
    busy = 1;
  }
  // check quad 1
  if( monomeFrameDirty & 0b0010 ) {
80004dec:	13 88       	ld.ub	r8,r9[0x0]
80004dee:	e2 18 00 0e 	andl	r8,0xe,COH
80004df2:	b2 88       	st.b	r9[0x0],r8
80004df4:	e0 68 07 90 	mov	r8,1936
    if ( mdesc.cols > 7 ) {
80004df8:	11 88       	ld.ub	r8,r8[0x0]
80004dfa:	ed b8 00 01 	bld	r8,0x1
80004dfe:	c1 e1       	brne	80004e3a <monome_grid_refresh+0x7e>
80004e00:	32 08       	mov	r8,32
80004e02:	f1 39 00 08 	ld.ub	r9,r8[8]
80004e06:	30 78       	mov	r8,7
      while( busy ) { busy = ftdi_tx_busy(); }
80004e08:	f0 09 18 00 	cp.b	r9,r8
80004e0c:	e0 8b 00 05 	brhi	80004e16 <monome_grid_refresh+0x5a>
      (*monome_grid_map)(8, 0, monomeLedBuffer + 8);
80004e10:	c1 58       	rjmp	80004e3a <monome_grid_refresh+0x7e>
80004e12:	e0 a0 05 17 	rcall	80005840 <ftdi_tx_busy>
80004e16:	58 0c       	cp.w	r12,0
80004e18:	cf d1       	brne	80004e12 <monome_grid_refresh+0x56>
80004e1a:	18 9b       	mov	r11,r12
80004e1c:	e0 68 3d dc 	mov	r8,15836
      monomeFrameDirty &= 0b1101;
80004e20:	30 8c       	mov	r12,8
80004e22:	70 08       	ld.w	r8,r8[0x0]
80004e24:	e0 6a 3d e4 	mov	r10,15844
80004e28:	2f 8a       	sub	r10,-8
      busy = 1;
    }
  }
  // check quad 2
  if( monomeFrameDirty &  0b0100 ) { 
80004e2a:	5d 18       	icall	r8
80004e2c:	e0 69 07 90 	mov	r9,1936
80004e30:	30 1c       	mov	r12,1
80004e32:	13 88       	ld.ub	r8,r9[0x0]
    if( mdesc.rows > 7 ) {
80004e34:	e2 18 00 0d 	andl	r8,0xd,COH
80004e38:	b2 88       	st.b	r9[0x0],r8
80004e3a:	e0 68 07 90 	mov	r8,1936
80004e3e:	11 88       	ld.ub	r8,r8[0x0]
80004e40:	ed b8 00 02 	bld	r8,0x2
80004e44:	c1 d1       	brne	80004e7e <monome_grid_refresh+0xc2>
      while( busy ) { busy = ftdi_tx_busy(); }
80004e46:	32 08       	mov	r8,32
80004e48:	f1 39 00 09 	ld.ub	r9,r8[9]
80004e4c:	30 78       	mov	r8,7
      (*monome_grid_map)(0, 8, monomeLedBuffer + 128);
80004e4e:	f0 09 18 00 	cp.b	r9,r8
80004e52:	e0 8b 00 05 	brhi	80004e5c <monome_grid_refresh+0xa0>
80004e56:	c1 48       	rjmp	80004e7e <monome_grid_refresh+0xc2>
80004e58:	e0 a0 04 f4 	rcall	80005840 <ftdi_tx_busy>
      monomeFrameDirty &= 0b1011;
80004e5c:	58 0c       	cp.w	r12,0
80004e5e:	cf d1       	brne	80004e58 <monome_grid_refresh+0x9c>
80004e60:	e0 68 3d dc 	mov	r8,15836
80004e64:	e0 6a 3d e4 	mov	r10,15844
      busy = 1;
    }
  }
  // check quad 3
  if( monomeFrameDirty & 0b1000 ) {
80004e68:	70 08       	ld.w	r8,r8[0x0]
80004e6a:	28 0a       	sub	r10,-128
80004e6c:	30 8b       	mov	r11,8
80004e6e:	5d 18       	icall	r8
    if( (mdesc.rows > 7) && (mdesc.cols > 7) )  {
80004e70:	e0 69 07 90 	mov	r9,1936
80004e74:	30 1c       	mov	r12,1
80004e76:	13 88       	ld.ub	r8,r9[0x0]
80004e78:	e2 18 00 0b 	andl	r8,0xb,COH
80004e7c:	b2 88       	st.b	r9[0x0],r8
80004e7e:	e0 68 07 90 	mov	r8,1936
80004e82:	11 88       	ld.ub	r8,r8[0x0]
80004e84:	ed b8 00 03 	bld	r8,0x3
80004e88:	c2 81       	brne	80004ed8 <monome_grid_refresh+0x11c>
80004e8a:	32 09       	mov	r9,32
80004e8c:	30 78       	mov	r8,7
      while( busy ) { busy = ftdi_tx_busy(); }
80004e8e:	f3 3a 00 09 	ld.ub	r10,r9[9]
80004e92:	f0 0a 18 00 	cp.b	r10,r8
      (*monome_grid_map)(8, 8, monomeLedBuffer + 136);
80004e96:	e0 88 00 21 	brls	80004ed8 <monome_grid_refresh+0x11c>
80004e9a:	f3 39 00 08 	ld.ub	r9,r9[8]
80004e9e:	f0 09 18 00 	cp.b	r9,r8
80004ea2:	e0 8b 00 05 	brhi	80004eac <monome_grid_refresh+0xf0>
      monomeFrameDirty &= 0b0111;
80004ea6:	c1 98       	rjmp	80004ed8 <monome_grid_refresh+0x11c>
80004ea8:	e0 a0 04 cc 	rcall	80005840 <ftdi_tx_busy>
80004eac:	58 0c       	cp.w	r12,0
80004eae:	cf d1       	brne	80004ea8 <monome_grid_refresh+0xec>
80004eb0:	30 8b       	mov	r11,8
80004eb2:	e0 68 3d dc 	mov	r8,15836
      busy = 1;
    }
  }
  while( busy ) { busy = ftdi_tx_busy(); }
80004eb6:	16 9c       	mov	r12,r11
80004eb8:	70 08       	ld.w	r8,r8[0x0]
80004eba:	e0 6a 3d e4 	mov	r10,15844
}
80004ebe:	f4 ca ff 78 	sub	r10,r10,-136
80004ec2:	5d 18       	icall	r8
80004ec4:	e0 68 07 90 	mov	r8,1936
80004ec8:	30 1c       	mov	r12,1
80004eca:	11 89       	ld.ub	r9,r8[0x0]
80004ecc:	f3 d9 c0 03 	bfextu	r9,r9,0x0,0x3
80004ed0:	b0 89       	st.b	r8[0x0],r9
80004ed2:	c0 38       	rjmp	80004ed8 <monome_grid_refresh+0x11c>
80004ed4:	e0 a0 04 b6 	rcall	80005840 <ftdi_tx_busy>
80004ed8:	58 0c       	cp.w	r12,0
80004eda:	cf d1       	brne	80004ed4 <monome_grid_refresh+0x118>
80004edc:	d8 02       	popm	pc
80004ede:	d7 03       	nop

80004ee0 <monome_arc_refresh>:


// check flags and refresh arc
void monome_arc_refresh(void) {
80004ee0:	d4 31       	pushm	r0-r7,lr
  // may need to wait after each quad until tx transfer is complete
  u8 busy = ftdi_tx_busy();
80004ee2:	30 07       	mov	r7,0
  u8 i;

  for(i=0;i<mdesc.encs;i++) {
80004ee4:	32 01       	mov	r1,32


// check flags and refresh arc
void monome_arc_refresh(void) {
  // may need to wait after each quad until tx transfer is complete
  u8 busy = ftdi_tx_busy();
80004ee6:	e0 a0 04 ad 	rcall	80005840 <ftdi_tx_busy>
  u8 i;

  for(i=0;i<mdesc.encs;i++) {
    if(monomeFrameDirty & (1<<i)) {
80004eea:	e0 66 07 90 	mov	r6,1936
      if(i==1) print_dbg("\r\nsecond");
      while(busy) { busy = ftdi_tx_busy(); }
      (*monome_ring_map)(i, monomeLedBuffer + (i<<6));
80004eee:	30 12       	mov	r2,1
80004ef0:	e0 63 3d e0 	mov	r3,15840


// check flags and refresh arc
void monome_arc_refresh(void) {
  // may need to wait after each quad until tx transfer is complete
  u8 busy = ftdi_tx_busy();
80004ef4:	e0 64 3d e4 	mov	r4,15844
  u8 i;

  for(i=0;i<mdesc.encs;i++) {
    if(monomeFrameDirty & (1<<i)) {
80004ef8:	30 15       	mov	r5,1
80004efa:	18 90       	mov	r0,r12
80004efc:	c2 48       	rjmp	80004f44 <monome_arc_refresh+0x64>
80004efe:	0d 88       	ld.ub	r8,r6[0x0]
80004f00:	f0 07 08 48 	asr	r8,r8,r7
      if(i==1) print_dbg("\r\nsecond");
80004f04:	ed b8 00 00 	bld	r8,0x0
80004f08:	c1 c1       	brne	80004f40 <monome_arc_refresh+0x60>
80004f0a:	e4 07 18 00 	cp.b	r7,r2
80004f0e:	c0 91       	brne	80004f20 <monome_arc_refresh+0x40>
80004f10:	fe cc bb 50 	sub	r12,pc,-17584
      while(busy) { busy = ftdi_tx_busy(); }
80004f14:	e0 a0 15 50 	rcall	800079b4 <print_dbg>
80004f18:	c0 48       	rjmp	80004f20 <monome_arc_refresh+0x40>
80004f1a:	e0 a0 04 93 	rcall	80005840 <ftdi_tx_busy>
      (*monome_ring_map)(i, monomeLedBuffer + (i<<6));
80004f1e:	18 90       	mov	r0,r12
80004f20:	58 00       	cp.w	r0,0
80004f22:	cf c1       	brne	80004f1a <monome_arc_refresh+0x3a>
80004f24:	66 08       	ld.w	r8,r3[0x0]
80004f26:	ee 0b 15 06 	lsl	r11,r7,0x6
      monomeFrameDirty &= ~(1<<i);
80004f2a:	0e 9c       	mov	r12,r7
80004f2c:	e8 0b 00 0b 	add	r11,r4,r11
80004f30:	5d 18       	icall	r8
80004f32:	0d 89       	ld.ub	r9,r6[0x0]
80004f34:	ea 07 09 48 	lsl	r8,r5,r7
void monome_arc_refresh(void) {
  // may need to wait after each quad until tx transfer is complete
  u8 busy = ftdi_tx_busy();
  u8 i;

  for(i=0;i<mdesc.encs;i++) {
80004f38:	30 10       	mov	r0,1
80004f3a:	5c d8       	com	r8
80004f3c:	12 68       	and	r8,r9
80004f3e:	ac 88       	st.b	r6[0x0],r8
80004f40:	2f f7       	sub	r7,-1
80004f42:	5c 57       	castu.b	r7
80004f44:	e3 38 00 0a 	ld.ub	r8,r1[10]
80004f48:	ee 08 18 00 	cp.b	r8,r7
      monomeFrameDirty &= ~(1<<i);
      busy = 1;
    }
  }

  while( busy ) { busy = ftdi_tx_busy(); }
80004f4c:	fe 9b ff d9 	brhi	80004efe <monome_arc_refresh+0x1e>
80004f50:	c0 48       	rjmp	80004f58 <monome_arc_refresh+0x78>
80004f52:	e0 a0 04 77 	rcall	80005840 <ftdi_tx_busy>
}
80004f56:	18 90       	mov	r0,r12
80004f58:	58 00       	cp.w	r0,0
80004f5a:	cf c1       	brne	80004f52 <monome_arc_refresh+0x72>
80004f5c:	d8 32       	popm	r0-r7,pc
80004f5e:	d7 03       	nop

80004f60 <set_intense_series>:
80004f60:	d4 01       	pushm	lr
80004f62:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
80004f66:	ea 18 ff ff 	orh	r8,0xffff
80004f6a:	e8 18 ff a0 	orl	r8,0xffa0
80004f6e:	e0 6c 07 94 	mov	r12,1940
80004f72:	30 1b       	mov	r11,1
			b (brightness) = 0-15 (4 bits)
encode:		byte 0 = ((id) << 4) | b = 160 + b
*/
  txBuf[0] = 0xa0;
  txBuf[0] |= (v & 0x0f);
  ftdi_write(txBuf, 1);
80004f74:	b8 88       	st.b	r12[0x0],r8
80004f76:	e0 a0 04 a1 	rcall	800058b8 <ftdi_write>
}
80004f7a:	d8 02       	popm	pc

80004f7c <ring_map_mext>:
80004f7c:	d4 01       	pushm	lr
80004f7e:	e0 68 07 94 	mov	r8,1940
80004f82:	39 2a       	mov	r10,-110
  //  static u8 tx[11] = { 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  static u8* ptx;
  static u8 i;

  txBuf[0] = 0x92;
  txBuf[1] = n;
80004f84:	b0 9c       	st.b	r8[0x1],r12
80004f86:	f0 c9 ff fe 	sub	r9,r8,-2
  
  ptx = txBuf + 2;
  
  // smash 64 LEDs together, nibbles
  for(i=0; i<32; i++) {
80004f8a:	b0 8a       	st.b	r8[0x0],r10
  //  static u8 tx[11] = { 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  static u8* ptx;
  static u8 i;

  txBuf[0] = 0x92;
  txBuf[1] = n;
80004f8c:	31 fc       	mov	r12,31
  
  ptx = txBuf + 2;
  
  // smash 64 LEDs together, nibbles
  for(i=0; i<32; i++) {
80004f8e:	30 08       	mov	r8,0
    *ptx = *data << 4;
80004f90:	c0 b8       	rjmp	80004fa6 <ring_map_mext+0x2a>
80004f92:	17 8a       	ld.ub	r10,r11[0x0]
80004f94:	a5 6a       	lsl	r10,0x4
80004f96:	5c 5a       	castu.b	r10

/* static void grid_map_level_mext(u8 x, u8 y, const u8* data) { */
/*   // TODO */
/* } */

static void ring_map_mext(u8 n, u8* data) {
80004f98:	b2 8a       	st.b	r9[0x0],r10
  
  // smash 64 LEDs together, nibbles
  for(i=0; i<32; i++) {
    *ptx = *data << 4;
    data++;
    *ptx |= *data;
80004f9a:	2f f8       	sub	r8,-1

/* static void grid_map_level_mext(u8 x, u8 y, const u8* data) { */
/*   // TODO */
/* } */

static void ring_map_mext(u8 n, u8* data) {
80004f9c:	17 9e       	ld.ub	lr,r11[0x1]
  
  // smash 64 LEDs together, nibbles
  for(i=0; i<32; i++) {
    *ptx = *data << 4;
    data++;
    *ptx |= *data;
80004f9e:	5c 58       	castu.b	r8

/* static void grid_map_level_mext(u8 x, u8 y, const u8* data) { */
/*   // TODO */
/* } */

static void ring_map_mext(u8 n, u8* data) {
80004fa0:	1c 4a       	or	r10,lr
  
  // smash 64 LEDs together, nibbles
  for(i=0; i<32; i++) {
    *ptx = *data << 4;
    data++;
    *ptx |= *data;
80004fa2:	2f eb       	sub	r11,-2
  txBuf[1] = n;
  
  ptx = txBuf + 2;
  
  // smash 64 LEDs together, nibbles
  for(i=0; i<32; i++) {
80004fa4:	12 ca       	st.b	r9++,r10
80004fa6:	f8 08 18 00 	cp.b	r8,r12
80004faa:	fe 98 ff f4 	brls	80004f92 <ring_map_mext+0x16>
80004fae:	e0 6a 07 ec 	mov	r10,2028
    *ptx |= *data;
    data++;
    ptx++;
  }

  ftdi_write(txBuf, 32 + 2);
80004fb2:	95 09       	st.w	r10[0x0],r9
  txBuf[1] = n;
  
  ptx = txBuf + 2;
  
  // smash 64 LEDs together, nibbles
  for(i=0; i<32; i++) {
80004fb4:	e0 69 07 f1 	mov	r9,2033
    *ptx |= *data;
    data++;
    ptx++;
  }

  ftdi_write(txBuf, 32 + 2);
80004fb8:	32 2b       	mov	r11,34
80004fba:	b2 88       	st.b	r9[0x0],r8
}
80004fbc:	e0 6c 07 94 	mov	r12,1940
80004fc0:	e0 a0 04 7c 	rcall	800058b8 <ftdi_write>
80004fc4:	d8 02       	popm	pc
80004fc6:	d7 03       	nop

80004fc8 <grid_map_mext>:
80004fc8:	d4 21       	pushm	r4-r7,lr
80004fca:	e0 68 07 94 	mov	r8,1940
80004fce:	b0 9c       	st.b	r8[0x1],r12
static void grid_map_mext( u8 x, u8 y, const u8* data ) {
  //  static u8 tx[11] = { 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  static u8* ptx;
  static u8 i, j;

  txBuf[0] = 0x1A;  
80004fd0:	b0 ab       	st.b	r8[0x2],r11
  txBuf[1] = x;
  txBuf[2] = y;
  
  ptx = txBuf + 3;
80004fd2:	31 ac       	mov	r12,26
80004fd4:	f0 cb ff fd 	sub	r11,r8,-3
80004fd8:	b0 8c       	st.b	r8[0x0],r12
80004fda:	e0 68 07 fc 	mov	r8,2044
80004fde:	91 0b       	st.w	r8[0x0],r11
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
80004fe0:	e0 68 07 e8 	mov	r8,2024

  txBuf[0] = 0x1A;  
  txBuf[1] = x;
  txBuf[2] = y;
  
  ptx = txBuf + 3;
80004fe4:	16 99       	mov	r9,r11
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
80004fe6:	30 76       	mov	r6,7
80004fe8:	11 8b       	ld.ub	r11,r8[0x0]
80004fea:	30 08       	mov	r8,0
80004fec:	c1 38       	rjmp	80005012 <grid_map_mext+0x4a>
    // *ptx = 0;
    for(j=0; j<4; j++) {
      // binary value of data byte to bitfield of tx byte
      // *ptx |= ((*data > 0) << j);
      *ptx = (*data) << 4;
80004fee:	12 9e       	mov	lr,r9
80004ff0:	14 9c       	mov	r12,r10
80004ff2:	30 0b       	mov	r11,0
80004ff4:	19 87       	ld.ub	r7,r12[0x0]
      data++;
      *ptx |= *data;
80004ff6:	a5 67       	lsl	r7,0x4
80004ff8:	5c 57       	castu.b	r7
80004ffa:	bc 87       	st.b	lr[0x0],r7
// this will hopefully help optimize operator routines,
// which cannot be called less often than refresh/tx, and are therefore prioritized.
////////////////////////////////////////////////
// HACKED to always do var-bright update
////////////////////////////////////////////////
static void grid_map_mext( u8 x, u8 y, const u8* data ) {
80004ffc:	19 95       	ld.ub	r5,r12[0x1]
80004ffe:	0a 47       	or	r7,r5
  ptx = txBuf + 3;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    // *ptx = 0;
    for(j=0; j<4; j++) {
80005000:	1c c7       	st.b	lr++,r7
80005002:	2f ec       	sub	r12,-2
// this will hopefully help optimize operator routines,
// which cannot be called less often than refresh/tx, and are therefore prioritized.
////////////////////////////////////////////////
// HACKED to always do var-bright update
////////////////////////////////////////////////
static void grid_map_mext( u8 x, u8 y, const u8* data ) {
80005004:	2f fb       	sub	r11,-1
80005006:	58 4b       	cp.w	r11,4
80005008:	cf 61       	brne	80004ff4 <grid_map_mext+0x2c>
8000500a:	2f f8       	sub	r8,-1
  txBuf[2] = y;
  
  ptx = txBuf + 3;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
8000500c:	2f 0a       	sub	r10,-16
8000500e:	5c 58       	castu.b	r8
80005010:	2f c9       	sub	r9,-4
80005012:	ec 08 18 00 	cp.b	r8,r6
80005016:	fe 98 ff ec 	brls	80004fee <grid_map_mext+0x26>
8000501a:	e0 6a 07 e8 	mov	r10,2024
      ptx++;
    }
    data += MONOME_QUAD_LEDS; // skip the rest of the row to get back in target quad
    // ptx++;
  }
  ftdi_write(txBuf, 32 + 3);
8000501e:	b4 8b       	st.b	r10[0x0],r11
  txBuf[2] = y;
  
  ptx = txBuf + 3;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
80005020:	e0 6a 07 fc 	mov	r10,2044
      ptx++;
    }
    data += MONOME_QUAD_LEDS; // skip the rest of the row to get back in target quad
    // ptx++;
  }
  ftdi_write(txBuf, 32 + 3);
80005024:	95 09       	st.w	r10[0x0],r9
80005026:	e0 69 07 e7 	mov	r9,2023
}
8000502a:	32 3b       	mov	r11,35
8000502c:	b2 88       	st.b	r9[0x0],r8
8000502e:	e0 6c 07 94 	mov	r12,1940
80005032:	e0 a0 04 43 	rcall	800058b8 <ftdi_write>
80005036:	d8 22       	popm	r4-r7,pc

80005038 <grid_map_series>:
80005038:	d4 21       	pushm	r4-r7,lr
8000503a:	30 78       	mov	r8,7
8000503c:	f0 0c 18 00 	cp.b	r12,r8
  static u8 * ptx;
  static u8 i, j;
  // command (upper nibble)
  txBuf[0] = 0x80;
  // quadrant index (lower nibble, 0-3)
  txBuf[0] |= ( (x > 7) | ((y > 7) << 1) );
80005040:	5f b9       	srhi	r9
80005042:	f6 08 18 00 	cp.b	r8,r11
80005046:	f9 bb 03 02 	movlo	r11,2
8000504a:	f9 bb 02 00 	movhs	r11,0
8000504e:	ea 19 ff ff 	orh	r9,0xffff
80005052:	e8 19 ff 80 	orl	r9,0xff80
80005056:	16 49       	or	r9,r11
80005058:	e0 6c 07 94 	mov	r12,1940
8000505c:	18 c9       	st.b	r12++,r9
8000505e:	e0 69 07 f0 	mov	r9,2032
  // pointer to tx data
  ptx = txBuf + 1;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
80005062:	13 8b       	ld.ub	r11,r9[0x0]

  // pointer to tx data
  ptx = txBuf + 1;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
80005064:	30 09       	mov	r9,0
    *ptx = 0;
80005066:	12 9e       	mov	lr,r9
    // print_dbg_hex(txBuf[(i*2) + 1]);
  }
  ftdi_write(txBuf, 16);
}

static void grid_map_series(u8 x, u8 y, const u8* data) {
80005068:	c1 98       	rjmp	8000509a <grid_map_series+0x62>
8000506a:	b8 8e       	st.b	r12[0x0],lr
8000506c:	f4 c7 ff f8 	sub	r7,r10,-8
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > VB_CUTOFF) << j);
80005070:	14 9b       	mov	r11,r10
80005072:	c0 a8       	rjmp	80005086 <grid_map_series+0x4e>
80005074:	17 35       	ld.ub	r5,r11++
80005076:	f0 05 18 00 	cp.b	r5,r8
8000507a:	5f b5       	srhi	r5
8000507c:	ea 06 09 46 	lsl	r6,r5,r6
80005080:	19 85       	ld.ub	r5,r12[0x0]
      ++data;
80005082:	0a 46       	or	r6,r5
80005084:	b8 86       	st.b	r12[0x0],r6
80005086:	f6 0a 01 06 	sub	r6,r11,r10
  ptx = txBuf + 1;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
8000508a:	5c 56       	castu.b	r6
8000508c:	0e 3b       	cp.w	r11,r7
8000508e:	cf 31       	brne	80005074 <grid_map_series+0x3c>
80005090:	2f f9       	sub	r9,-1
80005092:	2f 0a       	sub	r10,-16
80005094:	5c 59       	castu.b	r9

  // pointer to tx data
  ptx = txBuf + 1;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
80005096:	2f fc       	sub	r12,-1
80005098:	30 8b       	mov	r11,8
8000509a:	f0 09 18 00 	cp.b	r9,r8
8000509e:	fe 98 ff e6 	brls	8000506a <grid_map_series+0x32>
800050a2:	e0 68 07 8c 	mov	r8,1932
800050a6:	91 0c       	st.w	r8[0x0],r12
    // print_dbg_hex(*ptx);

    data += MONOME_QUAD_LEDS; // skip the rest of the row to get back in target quad
    ++ptx;
  }
  ftdi_write(txBuf, MONOME_QUAD_LEDS + 1);  
800050a8:	e0 68 07 f0 	mov	r8,2032
800050ac:	b0 8b       	st.b	r8[0x0],r11
800050ae:	e0 68 07 e6 	mov	r8,2022
}
800050b2:	30 9b       	mov	r11,9
800050b4:	b0 89       	st.b	r8[0x0],r9
800050b6:	e0 6c 07 94 	mov	r12,1940
800050ba:	e0 a0 03 ff 	rcall	800058b8 <ftdi_write>
800050be:	d8 22       	popm	r4-r7,pc

800050c0 <grid_map_40h>:
800050c0:	d4 21       	pushm	r4-r7,lr
800050c2:	30 08       	mov	r8,0
800050c4:	18 4b       	or	r11,r12
800050c6:	f0 0b 18 00 	cp.b	r11,r8

static void grid_map_40h(u8 x, u8 y, const u8* data) {
  // print_dbg("\n\r=== grid_map_40h ===");
  static u8 i, j;
  // ignore all but first quadrant -- do any devices larger than 8x8 speak 40h?
  if (x != 0 || y != 0) {
800050ca:	c3 a1       	brne	8000513e <grid_map_40h+0x7e>
800050cc:	e0 68 07 e4 	mov	r8,2020
800050d0:	30 77       	mov	r7,7
800050d2:	11 8b       	ld.ub	r11,r8[0x0]
800050d4:	e0 69 07 94 	mov	r9,1940
    return;
  }
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
800050d8:	30 08       	mov	r8,0
    // led row command + row number
    txBuf[(i*2)] = 0x70 + i;
800050da:	10 9e       	mov	lr,r8
800050dc:	c2 28       	rjmp	80005120 <grid_map_40h+0x60>
800050de:	f0 0c 15 01 	lsl	r12,r8,0x1
800050e2:	f0 cb ff 90 	sub	r11,r8,-112
  }
  ftdi_write(txBuf, 32 + 3);
}


static void grid_map_40h(u8 x, u8 y, const u8* data) {
800050e6:	f2 0c 0b 0b 	st.b	r9[r12],r11
    return;
  }
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    // led row command + row number
    txBuf[(i*2)] = 0x70 + i;
    txBuf[(i*2)+1] = 0;
800050ea:	f4 c6 ff f8 	sub	r6,r10,-8
800050ee:	2f fc       	sub	r12,-1
800050f0:	14 9b       	mov	r11,r10
    // print_dbg("\r\n * data bytes: ");
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
800050f2:	f2 0c 0b 0e 	st.b	r9[r12],lr
      // set row bit if led should be on
      // print_dbg("0x");
      // print_dbg_hex(*data);
      // print_dbg(" ");
      txBuf[(i*2)+1] |= ((*data > 0) << j);
800050f6:	c0 c8       	rjmp	8000510e <grid_map_40h+0x4e>
800050f8:	17 34       	ld.ub	r4,r11++
800050fa:	fc 04 18 00 	cp.b	r4,lr
800050fe:	5f 14       	srne	r4
80005100:	e8 05 09 45 	lsl	r5,r4,r5
80005104:	f2 0c 07 04 	ld.ub	r4,r9[r12]
80005108:	08 45       	or	r5,r4
      // advance data to next bit
      ++data;
8000510a:	f2 0c 0b 05 	st.b	r9[r12],r5
8000510e:	f6 0a 01 05 	sub	r5,r11,r10
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    // led row command + row number
    txBuf[(i*2)] = 0x70 + i;
    txBuf[(i*2)+1] = 0;
    // print_dbg("\r\n * data bytes: ");
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
80005112:	5c 55       	castu.b	r5
80005114:	0c 3b       	cp.w	r11,r6
80005116:	cf 11       	brne	800050f8 <grid_map_40h+0x38>
80005118:	2f f8       	sub	r8,-1
8000511a:	2f 0a       	sub	r10,-16
  static u8 i, j;
  // ignore all but first quadrant -- do any devices larger than 8x8 speak 40h?
  if (x != 0 || y != 0) {
    return;
  }
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
8000511c:	5c 58       	castu.b	r8
8000511e:	30 8b       	mov	r11,8
80005120:	ee 08 18 00 	cp.b	r8,r7
80005124:	fe 98 ff dd 	brls	800050de <grid_map_40h+0x1e>
80005128:	e0 69 07 e4 	mov	r9,2020
8000512c:	b2 8b       	st.b	r9[0x0],r11
    // print_dbg("\n\r 40h: send led_row command: ");
    // print_dbg_hex(txBuf[i*2]);
    // print_dbg(" row data: 0x");
    // print_dbg_hex(txBuf[(i*2) + 1]);
  }
  ftdi_write(txBuf, 16);
8000512e:	e0 69 07 dc 	mov	r9,2012
80005132:	31 0b       	mov	r11,16
80005134:	b2 88       	st.b	r9[0x0],r8
80005136:	e0 6c 07 94 	mov	r12,1940
8000513a:	e0 a0 03 bf 	rcall	800058b8 <ftdi_write>
8000513e:	d8 22       	popm	r4-r7,pc

80005140 <read_serial_series>:
80005140:	d4 31       	pushm	r0-r7,lr
80005142:	e0 a0 03 73 	rcall	80005828 <ftdi_rx_buf>
80005146:	e0 65 07 f4 	mov	r5,2036
}

static void read_serial_series(void) {
  u8* prx = ftdi_rx_buf();
  u8 i;
  rxBytes = ftdi_rx_bytes();
8000514a:	18 94       	mov	r4,r12
8000514c:	18 97       	mov	r7,r12
8000514e:	e0 63 08 00 	mov	r3,2048
  *h = *pdata;
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
80005152:	e0 a0 03 6f 	rcall	80005830 <ftdi_rx_bytes>
  /* print_dbg("; y: 0x"); */
  /* print_dbg_hex(y); */
  /* print_dbg("; z: 0x"); */
  /* print_dbg_hex(val); */

  ev.type = kEventMonomeGridKey;
80005156:	ea c6 ff fc 	sub	r6,r5,-4
  // print_dbg_hex(prx[0]);
  // print_dbg(" , 0x");
  // print_dbg_hex(prx[1]);
  // print_dbg(" ]");
  i = 0;
  while(i < rxBytes) {
8000515a:	30 d2       	mov	r2,13
    /* print_dbg(" ; z : 0x"); */
    /* print_dbg_hex(	 ((prx[0] & 0xf0) == 0) ); */
    
    // process consecutive pairs of bytes
    monome_grid_key_write_event( ((prx[1] & 0xf0) >> 4) ,
				 prx[1] & 0xf,
8000515c:	a6 8c       	st.b	r3[0x0],r12
8000515e:	c1 28       	rjmp	80005182 <read_serial_series+0x42>

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
  data[1] = y;
80005160:	0f 99       	ld.ub	r9,r7[0x1]
80005162:	0f 88       	ld.ub	r8,r7[0x0]
    /* print_dbg(" ; z : 0x"); */
    /* print_dbg_hex(	 ((prx[0] & 0xf0) == 0) ); */
    
    // process consecutive pairs of bytes
    monome_grid_key_write_event( ((prx[1] & 0xf0) >> 4) ,
				 prx[1] & 0xf,
80005164:	f5 d9 c0 04 	bfextu	r10,r9,0x0,0x4

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
  data[1] = y;
80005168:	e2 18 00 f0 	andl	r8,0xf0,COH
  data[2] = val;
8000516c:	ac 9a       	st.b	r6[0x1],r10
  /* print_dbg("; y: 0x"); */
  /* print_dbg_hex(y); */
  /* print_dbg("; z: 0x"); */
  /* print_dbg_hex(val); */

  ev.type = kEventMonomeGridKey;
8000516e:	5f 08       	sreq	r8
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
80005170:	ac a8       	st.b	r6[0x2],r8
    monome_grid_key_write_event( ((prx[1] & 0xf0) >> 4) ,
				 prx[1] & 0xf,
				 ((prx[0] & 0xf0) == 0)
				 );
    i += 2;
    prx += 2;
80005172:	8b 02       	st.w	r5[0x0],r2
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
80005174:	a5 89       	lsr	r9,0x4
  /* print_dbg_hex(y); */
  /* print_dbg("; z: 0x"); */
  /* print_dbg_hex(val); */

  ev.type = kEventMonomeGridKey;
  event_post(&ev);
80005176:	2f e7       	sub	r7,-2
80005178:	ac 89       	st.b	r6[0x0],r9
8000517a:	e0 6c 07 f4 	mov	r12,2036
  // print_dbg_hex(prx[0]);
  // print_dbg(" , 0x");
  // print_dbg_hex(prx[1]);
  // print_dbg(" ]");
  i = 0;
  while(i < rxBytes) {
8000517e:	fe b0 fc 77 	rcall	80004a6c <event_post>
80005182:	0e 99       	mov	r9,r7
80005184:	07 88       	ld.ub	r8,r3[0x0]
80005186:	08 19       	sub	r9,r4
				 );
    i += 2;
    prx += 2;
  }

}
80005188:	f0 09 18 00 	cp.b	r9,r8
8000518c:	ce a3       	brcs	80005160 <read_serial_series+0x20>
8000518e:	d8 32       	popm	r0-r7,pc

80005190 <read_serial_40h>:
80005190:	d4 31       	pushm	r0-r7,lr
80005192:	e0 a0 03 4b 	rcall	80005828 <ftdi_rx_buf>
80005196:	e0 65 07 f4 	mov	r5,2036
8000519a:	18 94       	mov	r4,r12
8000519c:	18 97       	mov	r7,r12
8000519e:	e0 63 08 00 	mov	r3,2048
  *h = *pdata;
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
800051a2:	e0 a0 03 47 	rcall	80005830 <ftdi_rx_bytes>
  /* print_dbg("; y: 0x"); */
  /* print_dbg_hex(y); */
  /* print_dbg("; z: 0x"); */
  /* print_dbg_hex(val); */

  ev.type = kEventMonomeGridKey;
800051a6:	ea c6 ff fc 	sub	r6,r5,-4
  // print_dbg_hex(prx[0]);
  // print_dbg(" , 0x");
  // print_dbg_hex(prx[1]);
  // print_dbg(" ]");
  i = 0;
  while(i < rxBytes) {
800051aa:	30 d2       	mov	r2,13
    // print_dbg_hex(prx[1] & 0xf);
    // print_dbg(" ; z : 0x");
    // print_dbg_hex(   ((prx[0] & 0xf) != 0) );

    // press event
    if ((prx[0] & 0xf0) == 0) {
800051ac:	a6 8c       	st.b	r3[0x0],r12
800051ae:	c1 68       	rjmp	800051da <read_serial_40h+0x4a>
800051b0:	0f 88       	ld.ub	r8,r7[0x0]
800051b2:	10 99       	mov	r9,r8
800051b4:	e2 19 00 f0 	andl	r9,0xf0,COH
// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
  data[1] = y;
  data[2] = val;
800051b8:	c1 01       	brne	800051d8 <read_serial_40h+0x48>
800051ba:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800051be:	5f 19       	srne	r9

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
  data[1] = y;
800051c0:	0f 98       	ld.ub	r8,r7[0x1]
800051c2:	ac a9       	st.b	r6[0x2],r9
800051c4:	f3 d8 c0 04 	bfextu	r9,r8,0x0,0x4
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
800051c8:	ac 99       	st.b	r6[0x1],r9
  /* print_dbg_hex(y); */
  /* print_dbg("; z: 0x"); */
  /* print_dbg_hex(val); */

  ev.type = kEventMonomeGridKey;
  event_post(&ev);
800051ca:	8b 02       	st.w	r5[0x0],r2
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
800051cc:	a5 88       	lsr	r8,0x4
  /* print_dbg_hex(y); */
  /* print_dbg("; z: 0x"); */
  /* print_dbg_hex(val); */

  ev.type = kEventMonomeGridKey;
  event_post(&ev);
800051ce:	e0 6c 07 f4 	mov	r12,2036
        ((prx[0] & 0xf) != 0)
      );
    }
    
    i += 2;
    prx += 2;
800051d2:	ac 88       	st.b	r6[0x0],r8
  // print_dbg_hex(prx[0]);
  // print_dbg(" , 0x");
  // print_dbg_hex(prx[1]);
  // print_dbg(" ]");
  i = 0;
  while(i < rxBytes) {
800051d4:	fe b0 fc 4c 	rcall	80004a6c <event_post>
800051d8:	2f e7       	sub	r7,-2
800051da:	0e 99       	mov	r9,r7
800051dc:	07 88       	ld.ub	r8,r3[0x0]
800051de:	08 19       	sub	r9,r4
    }
    
    i += 2;
    prx += 2;
  }
}
800051e0:	f0 09 18 00 	cp.b	r9,r8
800051e4:	ce 63       	brcs	800051b0 <read_serial_40h+0x20>
800051e6:	d8 32       	popm	r0-r7,pc

800051e8 <read_serial_mext>:
800051e8:	d4 31       	pushm	r0-r7,lr
800051ea:	e0 67 08 00 	mov	r7,2048
800051ee:	e0 a0 03 21 	rcall	80005830 <ftdi_rx_bytes>
800051f2:	ae 8c       	st.b	r7[0x0],r12
800051f4:	c5 e0       	breq	800052b0 <read_serial_mext+0xc8>
800051f6:	e0 68 07 e5 	mov	r8,2021
  static u8* prx; // pointer to rx buf
  static u8 com;
  
  rxBytes = ftdi_rx_bytes();
  if( rxBytes ) {
    nbp = 0;
800051fa:	30 09       	mov	r9,0
  // TODO
}

// ring encoder
static inline void monome_ring_enc_write_event( u8 n, u8 val) {
  u8* data = (u8*)(&(ev.data));
800051fc:	10 96       	mov	r6,r8
  static u8 com;
  
  rxBytes = ftdi_rx_bytes();
  if( rxBytes ) {
    nbp = 0;
    prx = ftdi_rx_buf();
800051fe:	b0 89       	st.b	r8[0x0],r9
80005200:	e0 64 07 f4 	mov	r4,2036
80005204:	e0 a0 03 12 	rcall	80005828 <ftdi_rx_buf>
  // TODO
}

// ring encoder
static inline void monome_ring_enc_write_event( u8 n, u8 val) {
  u8* data = (u8*)(&(ev.data));
80005208:	e0 60 07 dd 	mov	r0,2013
   // print_dbg("\r\n monome.c wrote event; n: 0x"); 
   // print_dbg_hex(n); 
   // print_dbg("; d: 0x"); 
   // print_dbg_hex(val); 

  ev.type = kEventMonomeRingEnc;
8000520c:	e0 67 07 e0 	mov	r7,2016
  static u8 com;
  
  rxBytes = ftdi_rx_bytes();
  if( rxBytes ) {
    nbp = 0;
    prx = ftdi_rx_buf();
80005210:	35 03       	mov	r3,80
    while(nbp < rxBytes) {
80005212:	e8 c5 ff fc 	sub	r5,r4,-4
      com = (u8)(*(prx++));
      nbp++;
80005216:	30 e1       	mov	r1,14
80005218:	35 12       	mov	r2,81
  rxBytes = ftdi_rx_bytes();
  if( rxBytes ) {
    nbp = 0;
    prx = ftdi_rx_buf();
    while(nbp < rxBytes) {
      com = (u8)(*(prx++));
8000521a:	8f 0c       	st.w	r7[0x0],r12
8000521c:	c4 28       	rjmp	800052a0 <read_serial_mext+0xb8>
      nbp++;
8000521e:	2f f8       	sub	r8,-1
  rxBytes = ftdi_rx_bytes();
  if( rxBytes ) {
    nbp = 0;
    prx = ftdi_rx_buf();
    while(nbp < rxBytes) {
      com = (u8)(*(prx++));
80005220:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
      nbp++;
      switch(com) {
80005224:	6e 08       	ld.w	r8,r7[0x0]
80005226:	11 39       	ld.ub	r9,r8++
80005228:	ac 8a       	st.b	r6[0x0],r10
8000522a:	a0 89       	st.b	r0[0x0],r9
8000522c:	8f 08       	st.w	r7[0x0],r8
8000522e:	e6 09 18 00 	cp.b	r9,r3
80005232:	c2 30       	breq	80005278 <read_serial_mext+0x90>
80005234:	e0 8b 00 0b 	brhi	8000524a <read_serial_mext+0x62>
80005238:	32 0a       	mov	r10,32
8000523a:	f4 09 18 00 	cp.b	r9,r10
8000523e:	c0 e0       	breq	8000525a <read_serial_mext+0x72>
80005240:	32 1a       	mov	r10,33
80005242:	f4 09 18 00 	cp.b	r9,r10
80005246:	c3 51       	brne	800052b0 <read_serial_mext+0xc8>
80005248:	c0 f8       	rjmp	80005266 <read_serial_mext+0x7e>
8000524a:	e4 09 18 00 	cp.b	r9,r2
8000524e:	c2 20       	breq	80005292 <read_serial_mext+0xaa>
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
80005250:	35 2b       	mov	r11,82
    while(nbp < rxBytes) {
      com = (u8)(*(prx++));
      nbp++;
      switch(com) {
      case 0x20: // grid key up
      	monome_grid_key_write_event( *prx, *(prx+1), 0);
80005252:	f6 09 18 00 	cp.b	r9,r11

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
  data[1] = y;
80005256:	c2 d1       	brne	800052b0 <read_serial_mext+0xc8>
  data[2] = val;
80005258:	c2 08       	rjmp	80005298 <read_serial_mext+0xb0>
8000525a:	11 89       	ld.ub	r9,r8[0x0]
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
8000525c:	11 98       	ld.ub	r8,r8[0x1]
      	monome_grid_key_write_event( *prx, *(prx+1), 0);
      	nbp += 2;
      	prx += 2;
      	break;
      case 0x21: // grid key down
      	monome_grid_key_write_event( *prx, *(prx+1), 1);
8000525e:	aa 89       	st.b	r5[0x0],r9
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
80005260:	aa 98       	st.b	r5[0x1],r8
  data[1] = y;
80005262:	30 08       	mov	r8,0
  data[2] = val;
80005264:	c0 68       	rjmp	80005270 <read_serial_mext+0x88>
80005266:	11 89       	ld.ub	r9,r8[0x0]
  /* print_dbg("; y: 0x"); */
  /* print_dbg_hex(y); */
  /* print_dbg("; z: 0x"); */
  /* print_dbg_hex(val); */

  ev.type = kEventMonomeGridKey;
80005268:	11 98       	ld.ub	r8,r8[0x1]
8000526a:	aa 89       	st.b	r5[0x0],r9
8000526c:	aa 98       	st.b	r5[0x1],r8
}

// ring encoder
static inline void monome_ring_enc_write_event( u8 n, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = n;
8000526e:	30 18       	mov	r8,1
      	monome_grid_key_write_event( *prx, *(prx+1), 1);
      	nbp += 2;
      	prx += 2;
      	break;
    	case 0x50: // ring delta
      	monome_ring_enc_write_event( *prx, *(prx+1));
80005270:	aa a8       	st.b	r5[0x2],r8
}

// ring encoder
static inline void monome_ring_enc_write_event( u8 n, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = n;
80005272:	30 d8       	mov	r8,13
  data[1] = val;
80005274:	89 08       	st.w	r4[0x0],r8
   // print_dbg("\r\n monome.c wrote event; n: 0x"); 
   // print_dbg_hex(n); 
   // print_dbg("; d: 0x"); 
   // print_dbg_hex(val); 

  ev.type = kEventMonomeRingEnc;
80005276:	c0 68       	rjmp	80005282 <read_serial_mext+0x9a>
  event_post(&ev);
80005278:	11 89       	ld.ub	r9,r8[0x0]
8000527a:	11 98       	ld.ub	r8,r8[0x1]
8000527c:	aa 89       	st.b	r5[0x0],r9
      	nbp += 2;
      	prx += 2;
      	break;
    	case 0x50: // ring delta
      	monome_ring_enc_write_event( *prx, *(prx+1));
      	nbp += 2;
8000527e:	aa 98       	st.b	r5[0x1],r8
80005280:	89 01       	st.w	r4[0x0],r1
80005282:	e0 6c 07 f4 	mov	r12,2036
      	prx += 2;
      	break;
      case 0x51 : // ring key up
      	monome_ring_key_write_event( *prx++, 0);
      	prx++;
80005286:	fe b0 fb f3 	rcall	80004a6c <event_post>
      	break;
8000528a:	0d 88       	ld.ub	r8,r6[0x0]
      case 0x52 : // ring key down
      	monome_ring_key_write_event( *prx++, 1);
8000528c:	2f e8       	sub	r8,-2
      	nbp++;
8000528e:	ac 88       	st.b	r6[0x0],r8
      case 0x51 : // ring key up
      	monome_ring_key_write_event( *prx++, 0);
      	prx++;
      	break;
      case 0x52 : // ring key down
      	monome_ring_key_write_event( *prx++, 1);
80005290:	6e 08       	ld.w	r8,r7[0x0]
      	nbp++;
80005292:	2f e8       	sub	r8,-2
  
  rxBytes = ftdi_rx_bytes();
  if( rxBytes ) {
    nbp = 0;
    prx = ftdi_rx_buf();
    while(nbp < rxBytes) {
80005294:	8f 08       	st.w	r7[0x0],r8
80005296:	c0 58       	rjmp	800052a0 <read_serial_mext+0xb8>
80005298:	2f f8       	sub	r8,-1
8000529a:	2f fa       	sub	r10,-1
8000529c:	8f 08       	st.w	r7[0x0],r8
8000529e:	ac 8a       	st.b	r6[0x0],r10
800052a0:	e0 6a 08 00 	mov	r10,2048
800052a4:	0d 88       	ld.ub	r8,r6[0x0]
800052a6:	15 89       	ld.ub	r9,r10[0x0]
800052a8:	f0 09 18 00 	cp.b	r9,r8
800052ac:	fe 9b ff b9 	brhi	8000521e <read_serial_mext+0x36>
800052b0:	d8 32       	popm	r0-r7,pc
800052b2:	d7 03       	nop

800052b4 <monome_connect_write_event>:
800052b4:	d4 01       	pushm	lr
800052b6:	32 09       	mov	r9,32
800052b8:	f3 3b 00 09 	ld.ub	r11,r9[9]
800052bc:	e0 68 07 f4 	mov	r8,2036
800052c0:	f0 ca ff fb 	sub	r10,r8,-5
  // print_dbg_ulong(mdesc.cols);
  // print_dbg(" rows: ");
  // print_dbg_ulong(mdesc.rows);

  ev.type = kEventMonomeConnect;
  ev.type = kEventMonomeConnect;
800052c4:	b4 9b       	st.b	r10[0x1],r11
  *data++ = (u8)(mdesc.device); 	// device (8bits)
  *data++ = mdesc.cols;		// width / count
  *data++ = mdesc.rows;		// height / resolution
  //  *data = 0; 		// unused
  event_post(&ev);
800052c6:	30 9b       	mov	r11,9
  // print_dbg_ulong(mdesc.cols);
  // print_dbg(" rows: ");
  // print_dbg_ulong(mdesc.rows);

  ev.type = kEventMonomeConnect;
  ev.type = kEventMonomeConnect;
800052c8:	10 9c       	mov	r12,r8
  *data++ = (u8)(mdesc.device); 	// device (8bits)
800052ca:	91 0b       	st.w	r8[0x0],r11
800052cc:	72 1b       	ld.w	r11,r9[0x4]
  *data++ = mdesc.cols;		// width / count
800052ce:	b0 cb       	st.b	r8[0x4],r11
800052d0:	f3 38 00 08 	ld.ub	r8,r9[8]
  *data++ = mdesc.rows;		// height / resolution
  //  *data = 0; 		// unused
  event_post(&ev);
800052d4:	b4 88       	st.b	r10[0x0],r8
800052d6:	fe b0 fb cb 	rcall	80004a6c <event_post>
}
800052da:	d8 02       	popm	pc

800052dc <setup_series>:
800052dc:	d4 01       	pushm	lr
800052de:	30 1a       	mov	r10,1
800052e0:	32 08       	mov	r8,32
800052e2:	f1 6a 00 0b 	st.b	r8[11],r10
800052e6:	91 0a       	st.w	r8[0x0],r10
//----  function pointer arrays

// read serial and spawn events
static const read_serial_t readSerialFuncs[eProtocolNumProtocols] = {
  &read_serial_40h,
  &read_serial_series,
800052e8:	33 0a       	mov	r10,48

// setup series device
static void setup_series(u8 cols, u8 rows) {
  // print_dbg("\r\n setup series device");
  mdesc.protocol = eProtocolSeries;
  mdesc.device = eDeviceGrid;
800052ea:	30 09       	mov	r9,0
  mdesc.cols = cols;
800052ec:	f1 6c 00 08 	st.b	r8[8],r12
  mdesc.rows = rows;
800052f0:	f1 6b 00 09 	st.b	r8[9],r11

// setup series device
static void setup_series(u8 cols, u8 rows) {
  // print_dbg("\r\n setup series device");
  mdesc.protocol = eProtocolSeries;
  mdesc.device = eDeviceGrid;
800052f4:	91 19       	st.w	r8[0x4],r9
  mdesc.cols = cols;
  mdesc.rows = rows;
  mdesc.vari = 0;
800052f6:	f1 69 00 0c 	st.b	r8[12],r9
//----  function pointer arrays

// read serial and spawn events
static const read_serial_t readSerialFuncs[eProtocolNumProtocols] = {
  &read_serial_40h,
  &read_serial_series,
800052fa:	fe cb 01 ba 	sub	r11,pc,442
800052fe:	fe c8 02 c6 	sub	r8,pc,710
// set function pointers
static inline void set_funcs(void) {
  // print_dbg("\r\n setting monome functions, protocol idx: ");
  // print_dbg_ulong(mdesc.protocol);
  monome_read_serial = readSerialFuncs[mdesc.protocol];
  monome_grid_map = gridMapFuncs[mdesc.protocol];
80005302:	95 0b       	st.w	r10[0x0],r11
  monome_grid_level_map = gridMapFuncs[mdesc.protocol];
80005304:	e0 6a 3d dc 	mov	r10,15836
  monome_ring_map = ringMapFuncs[mdesc.protocol];
80005308:	95 08       	st.w	r10[0x0],r8
8000530a:	e0 6a 3e e8 	mov	r10,16104
};

// set intensity
static const set_intense_t intenseFuncs[eProtocolNumProtocols] = {
  NULL, // unsupported
  &set_intense_series,
8000530e:	95 08       	st.w	r10[0x0],r8
80005310:	e0 68 3d e0 	mov	r8,15840
  &ring_map_mext,
};

// grid vs arc refresh
static const refresh_t refreshFuncs[eProtocolNumProtocols] = {
  &monome_grid_refresh,
80005314:	91 09       	st.w	r8[0x0],r9
80005316:	fe c9 03 b6 	sub	r9,pc,950
  mdesc.cols = cols;
  mdesc.rows = rows;
  mdesc.vari = 0;
  mdesc.tilt = 1;
  set_funcs();
  monome_connect_write_event();
8000531a:	e0 68 3e e4 	mov	r8,16100
  //  monomeConnect = 1;
  //  test_draw();
}
8000531e:	91 09       	st.w	r8[0x0],r9
80005320:	fe c9 05 64 	sub	r9,pc,1380
80005324:	e0 68 3d d8 	mov	r8,15832
80005328:	91 09       	st.w	r8[0x0],r9
8000532a:	cc 5f       	rcall	800052b4 <monome_connect_write_event>
8000532c:	d8 02       	popm	pc
8000532e:	d7 03       	nop

80005330 <check_monome_device_desc>:
80005330:	d4 31       	pushm	r0-r7,lr
80005332:	20 5d       	sub	sp,20
80005334:	14 96       	mov	r6,r10
80005336:	1a 97       	mov	r7,sp
80005338:	fa c9 ff fa 	sub	r9,sp,-6
8000533c:	1a 98       	mov	r8,sp
8000533e:	19 8a       	ld.ub	r10,r12[0x0]
80005340:	2f ec       	sub	r12,-2
80005342:	10 ca       	st.b	r8++,r10
80005344:	12 38       	cp.w	r8,r9
80005346:	cf c1       	brne	8000533e <check_monome_device_desc+0xe>
80005348:	30 08       	mov	r8,0
8000534a:	30 6a       	mov	r10,6
8000534c:	ba e8       	st.b	sp[0x6],r8
8000534e:	fe cb bf 82 	sub	r11,pc,-16510
  // manufacturer
  for(i=0; i<MONOME_MANSTR_LEN; i++) {
    buf[i] = mstr[i*2];
  }
  buf[i] = 0;
  matchMan = ( strncmp(buf, "monome", MONOME_MANSTR_LEN) == 0 );
80005352:	1a 9c       	mov	r12,sp
80005354:	e0 a0 1b 14 	rcall	8000897c <strncmp>
  }
  //  print_dbg("\r\n finished monome class init");
}

// determine if FTDI string descriptors match monome device pattern
u8 check_monome_device_desc(char* mstr, char* pstr, char* sstr) { 
80005358:	ee c8 ff f7 	sub	r8,r7,-9
  /* print_dbg("\r\n manstring: "); */
  /* print_dbg(buf); */
 
  // serial number string
  for(i=0; i<MONOME_SERSTR_LEN; i++) {
    buf[i] = sstr[i*2];
8000535c:	18 94       	mov	r4,r12
8000535e:	0d 89       	ld.ub	r9,r6[0x0]
80005360:	2f e6       	sub	r6,-2
  matchMan = ( strncmp(buf, "monome", MONOME_MANSTR_LEN) == 0 );
  /* print_dbg("\r\n manstring: "); */
  /* print_dbg(buf); */
 
  // serial number string
  for(i=0; i<MONOME_SERSTR_LEN; i++) {
80005362:	0e c9       	st.b	r7++,r9
80005364:	10 37       	cp.w	r7,r8
    buf[i] = sstr[i*2];
  }
  buf[i] = 0;
80005366:	cf c1       	brne	8000535e <check_monome_device_desc+0x2e>
80005368:	30 05       	mov	r5,0
8000536a:	fb 65 00 09 	st.b	sp[9],r5
  /* print_dbg("\r\n serial string: "); */
  /* print_dbg(buf); */
  if(matchMan == 0) {
8000536e:	58 04       	cp.w	r4,0
    // didn't match the manufacturer string, but check the serial for DIYs
    if( strncmp(buf, "a40h", 4) == 0) {
80005370:	c1 40       	breq	80005398 <check_monome_device_desc+0x68>
80005372:	30 4a       	mov	r10,4
80005374:	fe cb bf a0 	sub	r11,pc,-16480
80005378:	1a 9c       	mov	r12,sp
8000537a:	e0 a0 1b 01 	rcall	8000897c <strncmp>
8000537e:	18 99       	mov	r9,r12
      // this is probably an arduinome      
      mdesc.protocol = eProtocol40h;
80005380:	e0 81 01 81 	brne	80005682 <check_monome_device_desc+0x352>
      mdesc.device = eDeviceGrid;
80005384:	32 08       	mov	r8,32
      mdesc.cols = 8;
80005386:	91 09       	st.w	r8[0x0],r9
      mdesc.rows = 8;
80005388:	91 19       	st.w	r8[0x4],r9
8000538a:	30 89       	mov	r9,8
    // didn't match the manufacturer string, but check the serial for DIYs
    if( strncmp(buf, "a40h", 4) == 0) {
      // this is probably an arduinome      
      mdesc.protocol = eProtocol40h;
      mdesc.device = eDeviceGrid;
      mdesc.cols = 8;
8000538c:	f1 69 00 09 	st.b	r8[9],r9
    // if we got here, serial number didn't match series or 40h patterns.
    // so this is probably an extended-protocol device.
    // we need to query for device attributes
    return setup_mext();
  }
  return 0;
80005390:	f1 69 00 08 	st.b	r8[8],r9
    } else {
      // not a monome
      return 0;
    }
  } else { // matched manufctrr string
    if(buf[0] != 'm') {
80005394:	e0 8f 01 78 	bral	80005684 <check_monome_device_desc+0x354>
80005398:	36 d8       	mov	r8,109
8000539a:	1b 89       	ld.ub	r9,sp[0x0]
8000539c:	f0 09 18 00 	cp.b	r9,r8
      // not a monome, somehow. shouldn't happen
      return 0;
    }
    if(buf[3] == 'h') {
800053a0:	e0 81 01 71 	brne	80005682 <check_monome_device_desc+0x352>
800053a4:	36 88       	mov	r8,104
800053a6:	1b b9       	ld.ub	r9,sp[0x3]
800053a8:	f0 09 18 00 	cp.b	r9,r8
// setup

// setup 40h-protocol device
static void setup_40h(u8 cols, u8 rows) {
  // print_dbg("\r\n setup 40h device");
  mdesc.protocol = eProtocol40h;
800053ac:	c2 01       	brne	800053ec <check_monome_device_desc+0xbc>
  mdesc.device = eDeviceGrid;
  mdesc.cols = 8;
  mdesc.rows = 8;
800053ae:	30 89       	mov	r9,8
800053b0:	32 08       	mov	r8,32
// setup 40h-protocol device
static void setup_40h(u8 cols, u8 rows) {
  // print_dbg("\r\n setup 40h device");
  mdesc.protocol = eProtocol40h;
  mdesc.device = eDeviceGrid;
  mdesc.cols = 8;
800053b2:	f1 69 00 09 	st.b	r8[9],r9

//----  function pointer arrays

// read serial and spawn events
static const read_serial_t readSerialFuncs[eProtocolNumProtocols] = {
  &read_serial_40h,
800053b6:	f1 69 00 08 	st.b	r8[8],r9
  // print_dbg("\r\n setup 40h device");
  mdesc.protocol = eProtocol40h;
  mdesc.device = eDeviceGrid;
  mdesc.cols = 8;
  mdesc.rows = 8;
  mdesc.vari = 0;
800053ba:	33 09       	mov	r9,48
// setup

// setup 40h-protocol device
static void setup_40h(u8 cols, u8 rows) {
  // print_dbg("\r\n setup 40h device");
  mdesc.protocol = eProtocol40h;
800053bc:	f1 64 00 0c 	st.b	r8[12],r4

//----  function pointer arrays

// read serial and spawn events
static const read_serial_t readSerialFuncs[eProtocolNumProtocols] = {
  &read_serial_40h,
800053c0:	91 04       	st.w	r8[0x0],r4
/*   &grid_led_mext, */
/* }; */

// grid/map
static const grid_map_t gridMapFuncs[eProtocolNumProtocols] = {
  &grid_map_40h,
800053c2:	91 14       	st.w	r8[0x4],r4

//----  function pointer arrays

// read serial and spawn events
static const read_serial_t readSerialFuncs[eProtocolNumProtocols] = {
  &read_serial_40h,
800053c4:	fe ca 02 34 	sub	r10,pc,564
// set function pointers
static inline void set_funcs(void) {
  // print_dbg("\r\n setting monome functions, protocol idx: ");
  // print_dbg_ulong(mdesc.protocol);
  monome_read_serial = readSerialFuncs[mdesc.protocol];
  monome_grid_map = gridMapFuncs[mdesc.protocol];
800053c8:	fe c8 03 08 	sub	r8,pc,776
  monome_grid_level_map = gridMapFuncs[mdesc.protocol];
800053cc:	93 0a       	st.w	r9[0x0],r10
  monome_ring_map = ringMapFuncs[mdesc.protocol];
800053ce:	e0 69 3d dc 	mov	r9,15836
800053d2:	93 08       	st.w	r9[0x0],r8
  monome_set_intense = intenseFuncs[mdesc.protocol];
800053d4:	e0 69 3e e8 	mov	r9,16104
800053d8:	93 08       	st.w	r9[0x0],r8
    if(buf[3] == 'h') {
      // this is a 40h
      setup_40h(8, 8);
      return 1;
    }
    if( strncmp(buf, "m64-", 4) == 0 ) {
800053da:	e0 68 3d e0 	mov	r8,15840
800053de:	fe c9 06 22 	sub	r9,pc,1570
800053e2:	91 04       	st.w	r8[0x0],r4
800053e4:	e0 68 3e e4 	mov	r8,16100
      // series 64
      setup_series(8, 8);
800053e8:	91 04       	st.w	r8[0x0],r4
800053ea:	c4 69       	rjmp	80005676 <check_monome_device_desc+0x346>
      return 1;
    }
    if( strncmp(buf, "m128-", 5) == 0 ) {
800053ec:	1a 97       	mov	r7,sp
800053ee:	30 4a       	mov	r10,4
800053f0:	fe cb c0 14 	sub	r11,pc,-16364
800053f4:	1a 9c       	mov	r12,sp
800053f6:	e0 a0 1a c3 	rcall	8000897c <strncmp>
      // series 128
      setup_series(16, 8);
800053fa:	c0 31       	brne	80005400 <check_monome_device_desc+0xd0>
800053fc:	30 8b       	mov	r11,8
      return 1;
    }
    if( strncmp(buf, "m256-", 5) == 0 ) {
800053fe:	c1 38       	rjmp	80005424 <check_monome_device_desc+0xf4>
80005400:	30 5a       	mov	r10,5
80005402:	fe cb c0 1e 	sub	r11,pc,-16354
80005406:	1a 9c       	mov	r12,sp
80005408:	e0 a0 1a ba 	rcall	8000897c <strncmp>
      // series 256
      setup_series(16, 16);
8000540c:	c0 41       	brne	80005414 <check_monome_device_desc+0xe4>
8000540e:	30 8b       	mov	r11,8
80005410:	31 0c       	mov	r12,16
80005412:	c0 a8       	rjmp	80005426 <check_monome_device_desc+0xf6>
  u8* prx;
  u8 w = 0;
  u8 busy;

  // print_dbg("\r\n setup mext device");
  mdesc.protocol = eProtocolMext;
80005414:	1a 9c       	mov	r12,sp
80005416:	30 5a       	mov	r10,5
80005418:	fe cb c0 2c 	sub	r11,pc,-16340

  mdesc.vari = 1;
8000541c:	e0 a0 1a b0 	rcall	8000897c <strncmp>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80005420:	c0 51       	brne	8000542a <check_monome_device_desc+0xfa>
80005422:	31 0b       	mov	r11,16
80005424:	16 9c       	mov	r12,r11
80005426:	c5 bf       	rcall	800052dc <setup_series>
80005428:	c2 b9       	rjmp	8000567e <check_monome_device_desc+0x34e>

  rxBytes = 0;
8000542a:	30 29       	mov	r9,2
8000542c:	32 08       	mov	r8,32
8000542e:	91 09       	st.w	r8[0x0],r9

  if(rxBytes != 6 ){
    print_dbg("\r\n got unexpected byte count in response to mext setup request;\r\n");
    print_dbg_ulong(*prx);
    
    for(;rxBytes != 0; rxBytes--) {
80005430:	30 19       	mov	r9,1
80005432:	f1 69 00 0c 	st.b	r8[12],r9
}

// setup extended device, return success /failure of query
static u8 setup_mext(void) {
  u8* prx;
  u8 w = 0;
80005436:	08 99       	mov	r9,r4
80005438:	e0 68 87 00 	mov	r8,34560
8000543c:	ea 18 03 93 	orh	r8,0x393
80005440:	e0 67 08 00 	mov	r7,2048
80005444:	08 96       	mov	r6,r4

  mdesc.vari = 1;

  rxBytes = 0;

  while(rxBytes != 6) {
80005446:	ae 85       	st.b	r7[0x0],r5
80005448:	0a 93       	mov	r3,r5
8000544a:	e0 6a 03 e7 	mov	r10,999
8000544e:	fa c5 ff ec 	sub	r5,sp,-20
80005452:	30 0b       	mov	r11,0
80005454:	0a f4       	st.b	--r5,r4
80005456:	f0 0a 00 0a 	add	r10,r8,r10
8000545a:	f2 0b 00 4b 	adc	r11,r9,r11
8000545e:	30 64       	mov	r4,6
80005460:	e0 68 03 e8 	mov	r8,1000
80005464:	30 09       	mov	r9,0
80005466:	e0 a0 16 55 	rcall	80008110 <__avr32_udiv64>
8000546a:	14 92       	mov	r2,r10
8000546c:	c4 f8       	rjmp	8000550a <check_monome_device_desc+0x1da>
8000546e:	d7 03       	nop
80005470:	e1 b8 00 42 	mfsr	r8,0x108
80005474:	f0 02 00 0a 	add	r10,r8,r2
80005478:	e1 b9 00 42 	mfsr	r9,0x108
8000547c:	14 38       	cp.w	r8,r10
8000547e:	e0 88 00 05 	brls	80005488 <check_monome_device_desc+0x158>
80005482:	10 39       	cp.w	r9,r8
80005484:	cf a2       	brcc	80005478 <check_monome_device_desc+0x148>
80005486:	c0 48       	rjmp	8000548e <check_monome_device_desc+0x15e>
80005488:	10 39       	cp.w	r9,r8
8000548a:	e0 83 00 ff 	brlo	80005688 <check_monome_device_desc+0x358>
8000548e:	14 39       	cp.w	r9,r10
80005490:	e0 8b 00 fc 	brhi	80005688 <check_monome_device_desc+0x358>
80005494:	cf 2b       	rjmp	80005478 <check_monome_device_desc+0x148>
80005496:	e1 b9 00 42 	mfsr	r9,0x108
8000549a:	14 38       	cp.w	r8,r10
8000549c:	e0 88 00 05 	brls	800054a6 <check_monome_device_desc+0x176>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800054a0:	10 39       	cp.w	r9,r8
800054a2:	cf a2       	brcc	80005496 <check_monome_device_desc+0x166>
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800054a4:	c0 48       	rjmp	800054ac <check_monome_device_desc+0x17c>
800054a6:	10 39       	cp.w	r9,r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800054a8:	e0 83 00 f8 	brlo	80005698 <check_monome_device_desc+0x368>
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800054ac:	14 39       	cp.w	r9,r10
800054ae:	e0 8b 00 f5 	brhi	80005698 <check_monome_device_desc+0x368>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800054b2:	cf 2b       	rjmp	80005496 <check_monome_device_desc+0x166>
800054b4:	e1 b9 00 42 	mfsr	r9,0x108
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800054b8:	14 38       	cp.w	r8,r10
800054ba:	e0 88 00 05 	brls	800054c4 <check_monome_device_desc+0x194>
800054be:	10 39       	cp.w	r9,r8
800054c0:	cf a2       	brcc	800054b4 <check_monome_device_desc+0x184>
800054c2:	c0 38       	rjmp	800054c8 <check_monome_device_desc+0x198>
800054c4:	10 39       	cp.w	r9,r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800054c6:	c0 43       	brcs	800054ce <check_monome_device_desc+0x19e>
800054c8:	14 39       	cp.w	r9,r10
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800054ca:	fe 98 ff f5 	brls	800054b4 <check_monome_device_desc+0x184>
800054ce:	cb 5d       	rcall	80005838 <ftdi_rx_busy>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800054d0:	cf f1       	brne	800054ce <check_monome_device_desc+0x19e>
800054d2:	ca fd       	rcall	80005830 <ftdi_rx_bytes>
800054d4:	ae 8c       	st.b	r7[0x0],r12
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800054d6:	e8 0c 18 00 	cp.b	r12,r4
800054da:	c1 80       	breq	8000550a <check_monome_device_desc+0x1da>
800054dc:	fe cc c0 e8 	sub	r12,pc,-16152
800054e0:	e0 a0 12 6a 	rcall	800079b4 <print_dbg>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800054e4:	0d 8c       	ld.ub	r12,r6[0x0]
800054e6:	e0 a0 12 61 	rcall	800079a8 <print_dbg_ulong>
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800054ea:	c0 c8       	rjmp	80005502 <check_monome_device_desc+0x1d2>
800054ec:	2f f6       	sub	r6,-1
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800054ee:	0d 8c       	ld.ub	r12,r6[0x0]
800054f0:	e0 a0 12 5c 	rcall	800079a8 <print_dbg_ulong>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800054f4:	fe cc c4 64 	sub	r12,pc,-15260
800054f8:	e0 a0 12 5e 	rcall	800079b4 <print_dbg>
800054fc:	0f 88       	ld.ub	r8,r7[0x0]

  // print_dbg("\r\n setup request ftdi read; waiting...");

  //  while(ftdi_rx_busy()) {;;}
  while(busy) {
    busy = ftdi_rx_busy();
800054fe:	20 18       	sub	r8,1
80005500:	ae 88       	st.b	r7[0x0],r8
  busy = 1;

  // print_dbg("\r\n setup request ftdi read; waiting...");

  //  while(ftdi_rx_busy()) {;;}
  while(busy) {
80005502:	0f 88       	ld.ub	r8,r7[0x0]
    busy = ftdi_rx_busy();
    // print_dbg("\r\n waiting for transfer complete; busy flag: ");
    // print_dbg_ulong(busy);
    
  }
  rxBytes = ftdi_rx_bytes();
80005504:	e6 08 18 00 	cp.b	r8,r3
80005508:	cf 21       	brne	800054ec <check_monome_device_desc+0x1bc>

  // print_dbg(" done waiting. bytes read: ");
  // print_dbg_ulong(rxBytes);

  if(rxBytes != 6 ){
8000550a:	0f 88       	ld.ub	r8,r7[0x0]
8000550c:	e8 08 18 00 	cp.b	r8,r4
    print_dbg("\r\n got unexpected byte count in response to mext setup request;\r\n");
80005510:	cb 01       	brne	80005470 <check_monome_device_desc+0x140>
80005512:	c8 bd       	rcall	80005828 <ftdi_rx_buf>
80005514:	30 1a       	mov	r10,1
    print_dbg_ulong(*prx);
80005516:	f8 c7 ff ff 	sub	r7,r12,-1
8000551a:	0f 8c       	ld.ub	r12,r7[0x0]
8000551c:	f4 0c 18 00 	cp.b	r12,r10
    
    for(;rxBytes != 0; rxBytes--) {
      print_dbg_ulong(*(++prx));
80005520:	c2 41       	brne	80005568 <check_monome_device_desc+0x238>
80005522:	32 08       	mov	r8,32
80005524:	30 0c       	mov	r12,0
      print_dbg(" ");
80005526:	91 1c       	st.w	r8[0x4],r12
80005528:	0f 99       	ld.ub	r9,r7[0x1]
8000552a:	f4 09 18 00 	cp.b	r9,r10

  if(rxBytes != 6 ){
    print_dbg("\r\n got unexpected byte count in response to mext setup request;\r\n");
    print_dbg_ulong(*prx);
    
    for(;rxBytes != 0; rxBytes--) {
8000552e:	c0 31       	brne	80005534 <check_monome_device_desc+0x204>
80005530:	30 89       	mov	r9,8
80005532:	c1 28       	rjmp	80005556 <check_monome_device_desc+0x226>
80005534:	30 2a       	mov	r10,2
80005536:	f4 09 18 00 	cp.b	r9,r10

  mdesc.vari = 1;

  rxBytes = 0;

  while(rxBytes != 6) {
8000553a:	c0 81       	brne	8000554a <check_monome_device_desc+0x21a>
8000553c:	30 89       	mov	r9,8
8000553e:	f1 69 00 09 	st.b	r8[9],r9

    // return 0;
    }
  }
  
  prx = ftdi_rx_buf();
80005542:	31 09       	mov	r9,16
80005544:	f1 69 00 08 	st.b	r8[8],r9
  prx++; // 1st returned byte is 0
80005548:	c0 b8       	rjmp	8000555e <check_monome_device_desc+0x22e>
8000554a:	30 4a       	mov	r10,4
  if(*prx == 1) {
8000554c:	f4 09 18 00 	cp.b	r9,r10
80005550:	e0 81 00 9a 	brne	80005684 <check_monome_device_desc+0x354>
    mdesc.device = eDeviceGrid;
80005554:	31 09       	mov	r9,16
80005556:	f1 69 00 08 	st.b	r8[8],r9
    prx++;
    if(*prx == 1) {
8000555a:	f1 69 00 09 	st.b	r8[9],r9
8000555e:	30 19       	mov	r9,1
80005560:	32 08       	mov	r8,32
      // print_dbg("\r\n monome 64");
      mdesc.rows = 8;
80005562:	f1 69 00 0b 	st.b	r8[11],r9
      mdesc.cols = 8;
    }
    else if(*prx == 2) {
80005566:	c1 d8       	rjmp	800055a0 <check_monome_device_desc+0x270>
80005568:	2f f7       	sub	r7,-1
8000556a:	30 58       	mov	r8,5
8000556c:	f0 0c 18 00 	cp.b	r12,r8
      // print_dbg("\r\n monome 128");
      mdesc.rows = 8;
80005570:	c0 f1       	brne	8000558e <check_monome_device_desc+0x25e>
80005572:	30 19       	mov	r9,1
      mdesc.cols = 16;
80005574:	32 08       	mov	r8,32
80005576:	91 19       	st.w	r8[0x4],r9
80005578:	0f 89       	ld.ub	r9,r7[0x0]
8000557a:	fe cc c1 42 	sub	r12,pc,-16062
    }
    else if(*prx == 4) {
8000557e:	f1 69 00 0a 	st.b	r8[10],r9
80005582:	e0 a0 12 19 	rcall	800079b4 <print_dbg>
      // print_dbg("\r\n monome 256");
      mdesc.rows = 16; 
80005586:	0f 8c       	ld.ub	r12,r7[0x0]
      mdesc.cols = 16;
80005588:	e0 a0 12 10 	rcall	800079a8 <print_dbg_ulong>
      mdesc.rows = 8;
      mdesc.cols = 16;
    }
    else if(*prx == 4) {
      // print_dbg("\r\n monome 256");
      mdesc.rows = 16; 
8000558c:	c0 a8       	rjmp	800055a0 <check_monome_device_desc+0x270>
8000558e:	e0 a0 11 ef 	rcall	8000796c <print_dbg_hex>
      mdesc.cols = 16;
    }
    else {
      return 0; // bail
    }		
    mdesc.tilt = 1;
80005592:	0f 8c       	ld.ub	r12,r7[0x0]
80005594:	e0 a0 11 ec 	rcall	8000796c <print_dbg_hex>
80005598:	0f 9c       	ld.ub	r12,r7[0x1]
8000559a:	e0 a0 11 e9 	rcall	8000796c <print_dbg_hex>
  }
  else if(*prx == 5) {
8000559e:	c7 28       	rjmp	80005682 <check_monome_device_desc+0x352>
800055a0:	30 18       	mov	r8,1
800055a2:	fb 68 00 13 	st.b	sp[19],r8
    mdesc.device = eDeviceArc;
800055a6:	e1 b8 00 42 	mfsr	r8,0x108
    mdesc.encs = *(++prx);
800055aa:	f0 02 00 0a 	add	r10,r8,r2
800055ae:	e1 b9 00 42 	mfsr	r9,0x108
    print_dbg("\r\n monome arc ");
800055b2:	14 38       	cp.w	r8,r10
800055b4:	e0 88 00 05 	brls	800055be <check_monome_device_desc+0x28e>
    print_dbg_ulong(*prx);
800055b8:	10 39       	cp.w	r9,r8
800055ba:	cf a2       	brcc	800055ae <check_monome_device_desc+0x27e>
800055bc:	c0 38       	rjmp	800055c2 <check_monome_device_desc+0x292>
  } else {
    print_dbg_hex(*prx);
800055be:	10 39       	cp.w	r9,r8
800055c0:	c7 23       	brcs	800056a4 <check_monome_device_desc+0x374>
    print_dbg_hex(*(++prx));
800055c2:	14 39       	cp.w	r9,r10
800055c4:	e0 8b 00 70 	brhi	800056a4 <check_monome_device_desc+0x374>
    print_dbg_hex(*(++prx));
800055c8:	cf 3b       	rjmp	800055ae <check_monome_device_desc+0x27e>
800055ca:	e1 b9 00 42 	mfsr	r9,0x108
800055ce:	14 38       	cp.w	r8,r10
    return 0; // bail
  }

  // get id
  w = 1;
800055d0:	e0 88 00 05 	brls	800055da <check_monome_device_desc+0x2aa>
800055d4:	10 39       	cp.w	r9,r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800055d6:	cf a2       	brcc	800055ca <check_monome_device_desc+0x29a>
800055d8:	c0 38       	rjmp	800055de <check_monome_device_desc+0x2ae>
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800055da:	10 39       	cp.w	r9,r8
800055dc:	c6 d3       	brcs	800056b6 <check_monome_device_desc+0x386>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800055de:	14 39       	cp.w	r9,r10
800055e0:	e0 8b 00 6b 	brhi	800056b6 <check_monome_device_desc+0x386>
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800055e4:	cf 3b       	rjmp	800055ca <check_monome_device_desc+0x29a>
800055e6:	e1 b9 00 42 	mfsr	r9,0x108
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800055ea:	04 38       	cp.w	r8,r2
800055ec:	e0 88 00 06 	brls	800055f8 <check_monome_device_desc+0x2c8>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800055f0:	10 39       	cp.w	r9,r8
800055f2:	cf a2       	brcc	800055e6 <check_monome_device_desc+0x2b6>
800055f4:	c0 48       	rjmp	800055fc <check_monome_device_desc+0x2cc>
800055f6:	d7 03       	nop
800055f8:	10 39       	cp.w	r9,r8
800055fa:	c0 43       	brcs	80005602 <check_monome_device_desc+0x2d2>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800055fc:	04 39       	cp.w	r9,r2
800055fe:	fe 98 ff f4 	brls	800055e6 <check_monome_device_desc+0x2b6>
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005602:	c1 bd       	rcall	80005838 <ftdi_rx_busy>
80005604:	18 97       	mov	r7,r12
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005606:	cf e1       	brne	80005602 <check_monome_device_desc+0x2d2>
80005608:	c1 4d       	rcall	80005830 <ftdi_rx_bytes>
8000560a:	e0 68 08 00 	mov	r8,2048
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000560e:	b0 8c       	st.b	r8[0x0],r12
80005610:	c0 cd       	rcall	80005828 <ftdi_rx_buf>
80005612:	36 b8       	mov	r8,107
80005614:	19 a9       	ld.ub	r9,r12[0x2]
80005616:	f0 09 18 00 	cp.b	r9,r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000561a:	c0 41       	brne	80005622 <check_monome_device_desc+0x2f2>
8000561c:	32 08       	mov	r8,32
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000561e:	f1 67 00 0c 	st.b	r8[12],r7
80005622:	fe c9 c2 7a 	sub	r9,pc,-15750
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005626:	32 08       	mov	r8,32
80005628:	70 1a       	ld.w	r10,r8[0x4]
8000562a:	70 08       	ld.w	r8,r8[0x0]
8000562c:	f2 08 03 2b 	ld.w	r11,r9[r8<<0x2]
80005630:	33 09       	mov	r9,48
80005632:	93 0b       	st.w	r9[0x0],r11
80005634:	e0 6b 3d dc 	mov	r11,15836
80005638:	fe c9 c1 d8 	sub	r9,pc,-15912
8000563c:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
80005640:	97 09       	st.w	r11[0x0],r9
80005642:	e0 6b 3e e8 	mov	r11,16104
80005646:	97 09       	st.w	r11[0x0],r9
80005648:	fe c9 c2 94 	sub	r9,pc,-15724
8000564c:	f2 08 03 2b 	ld.w	r11,r9[r8<<0x2]
80005650:	e0 69 3d e0 	mov	r9,15840
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005654:	93 0b       	st.w	r9[0x0],r11
80005656:	fe c9 c2 0e 	sub	r9,pc,-15858
8000565a:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
  delay_ms(1);
  ftdi_read();
  delay_ms(1);
  busy = 1;
  while(busy) {
    busy = ftdi_rx_busy();
8000565e:	e0 68 3e e4 	mov	r8,16100
80005662:	58 1a       	cp.w	r10,1
  ftdi_write(&w, 1);
  delay_ms(1);
  ftdi_read();
  delay_ms(1);
  busy = 1;
  while(busy) {
80005664:	f9 ba 01 00 	movne	r10,0
    busy = ftdi_rx_busy();
  }
  rxBytes = ftdi_rx_bytes();
80005668:	f9 ba 00 04 	moveq	r10,4
8000566c:	91 09       	st.w	r8[0x0],r9
  prx = ftdi_rx_buf();
8000566e:	fe c8 c2 1a 	sub	r8,pc,-15846
  if(*(prx+2) == 'k')
80005672:	f0 0a 03 09 	ld.w	r9,r8[r10]
80005676:	e0 68 3d d8 	mov	r8,15832
8000567a:	91 09       	st.w	r8[0x0],r9
      mdesc.vari = 0;
8000567c:	c1 ce       	rcall	800052b4 <monome_connect_write_event>
8000567e:	30 1c       	mov	r12,1
80005680:	c0 28       	rjmp	80005684 <check_monome_device_desc+0x354>

// set function pointers
static inline void set_funcs(void) {
  // print_dbg("\r\n setting monome functions, protocol idx: ");
  // print_dbg_ulong(mdesc.protocol);
  monome_read_serial = readSerialFuncs[mdesc.protocol];
80005682:	30 0c       	mov	r12,0
80005684:	2f bd       	sub	sp,-20
  monome_grid_map = gridMapFuncs[mdesc.protocol];
  monome_grid_level_map = gridMapFuncs[mdesc.protocol];
  monome_ring_map = ringMapFuncs[mdesc.protocol];
  monome_set_intense = intenseFuncs[mdesc.protocol];
  monome_refresh = refreshFuncs[mdesc.device == eDeviceArc];   // toggle on grid vs arc
80005686:	d8 32       	popm	r0-r7,pc

// set function pointers
static inline void set_funcs(void) {
  // print_dbg("\r\n setting monome functions, protocol idx: ");
  // print_dbg_ulong(mdesc.protocol);
  monome_read_serial = readSerialFuncs[mdesc.protocol];
80005688:	30 1b       	mov	r11,1
8000568a:	0a 9c       	mov	r12,r5
8000568c:	c1 6d       	rcall	800058b8 <ftdi_write>
8000568e:	e1 b8 00 42 	mfsr	r8,0x108
  monome_grid_map = gridMapFuncs[mdesc.protocol];
80005692:	f0 02 00 0a 	add	r10,r8,r2
80005696:	c0 0b       	rjmp	80005496 <check_monome_device_desc+0x166>
80005698:	cf ac       	rcall	8000588c <ftdi_read>
8000569a:	e1 b8 00 42 	mfsr	r8,0x108
  monome_grid_level_map = gridMapFuncs[mdesc.protocol];
8000569e:	f0 02 00 0a 	add	r10,r8,r2
  monome_ring_map = ringMapFuncs[mdesc.protocol];
800056a2:	c0 9b       	rjmp	800054b4 <check_monome_device_desc+0x184>
800056a4:	30 1b       	mov	r11,1
800056a6:	fa cc ff ed 	sub	r12,sp,-19
  monome_set_intense = intenseFuncs[mdesc.protocol];
800056aa:	c0 7d       	rcall	800058b8 <ftdi_write>
800056ac:	e1 b8 00 42 	mfsr	r8,0x108
800056b0:	f0 02 00 0a 	add	r10,r8,r2
  monome_refresh = refreshFuncs[mdesc.device == eDeviceArc];   // toggle on grid vs arc
800056b4:	c8 bb       	rjmp	800055ca <check_monome_device_desc+0x29a>
800056b6:	ce bc       	rcall	8000588c <ftdi_read>
800056b8:	e1 b8 00 42 	mfsr	r8,0x108
  // print_dbg_ulong(mdesc.protocol);
  monome_read_serial = readSerialFuncs[mdesc.protocol];
  monome_grid_map = gridMapFuncs[mdesc.protocol];
  monome_grid_level_map = gridMapFuncs[mdesc.protocol];
  monome_ring_map = ringMapFuncs[mdesc.protocol];
  monome_set_intense = intenseFuncs[mdesc.protocol];
800056bc:	f0 02 00 02 	add	r2,r8,r2
  monome_refresh = refreshFuncs[mdesc.device == eDeviceArc];   // toggle on grid vs arc
800056c0:	c9 3b       	rjmp	800055e6 <check_monome_device_desc+0x2b6>
800056c2:	d7 03       	nop

800056c4 <process_timers>:
   tail = NULL;
   num = 0;
}

// process the timer list, presumably from TC interrupt
void process_timers( void ) {
800056c4:	d4 21       	pushm	r4-r7,lr
  u32 i;
  volatile softTimer_t* t = head;
800056c6:	e0 68 08 04 	mov	r8,2052

  //  print_dbg("\r\n processing timers. head: 0x");
  //  print_dbg_hex((u32)head);

  // ... important...  
  if ( (head == NULL) || (tail == NULL) || (num == 0) ) { 
800056ca:	70 07       	ld.w	r7,r8[0x0]
800056cc:	58 07       	cp.w	r7,0
800056ce:	c1 d0       	breq	80005708 <process_timers+0x44>
800056d0:	e0 68 08 0c 	mov	r8,2060
800056d4:	70 08       	ld.w	r8,r8[0x0]
800056d6:	58 08       	cp.w	r8,0
800056d8:	c1 80       	breq	80005708 <process_timers+0x44>
800056da:	e0 65 08 08 	mov	r5,2056
800056de:	6a 08       	ld.w	r8,r5[0x0]
800056e0:	58 08       	cp.w	r8,0
    //    print_dbg("\r\n processing empty timer list");
    return; 
  }

  for(i = 0; i<num; ++i) {
    --(t->ticksRemain);
800056e2:	c1 30       	breq	80005708 <process_timers+0x44>
800056e4:	30 06       	mov	r6,0
800056e6:	c0 e8       	rjmp	80005702 <process_timers+0x3e>
  if ( (head == NULL) || (tail == NULL) || (num == 0) ) { 
    //    print_dbg("\r\n processing empty timer list");
    return; 
  }

  for(i = 0; i<num; ++i) {
800056e8:	6e 08       	ld.w	r8,r7[0x0]
    --(t->ticksRemain);
    if(t->ticksRemain == 0) {
800056ea:	20 18       	sub	r8,1
800056ec:	8f 08       	st.w	r7[0x0],r8
800056ee:	2f f6       	sub	r6,-1
      (*(t->callback))(t->caller);   
800056f0:	6e 08       	ld.w	r8,r7[0x0]
800056f2:	58 08       	cp.w	r8,0
800056f4:	c0 61       	brne	80005700 <process_timers+0x3c>
      t->ticksRemain = t->ticks;
800056f6:	6e 28       	ld.w	r8,r7[0x8]
800056f8:	6e 5c       	ld.w	r12,r7[0x14]
      //      print_dbg("\r\n triggered timer callback @ 0x");
      //      print_dbg_hex((u32)t);
    }
    t = t->next;
800056fa:	5d 18       	icall	r8
  if ( (head == NULL) || (tail == NULL) || (num == 0) ) { 
    //    print_dbg("\r\n processing empty timer list");
    return; 
  }

  for(i = 0; i<num; ++i) {
800056fc:	6e 18       	ld.w	r8,r7[0x4]
800056fe:	8f 08       	st.w	r7[0x0],r8
80005700:	6e 37       	ld.w	r7,r7[0xc]
80005702:	6a 08       	ld.w	r8,r5[0x0]
80005704:	10 36       	cp.w	r6,r8
80005706:	cf 13       	brcs	800056e8 <process_timers+0x24>
80005708:	d8 22       	popm	r4-r7,pc
8000570a:	d7 03       	nop

8000570c <timer_remove>:
8000570c:	d3 43       	ssrf	0x14
8000570e:	78 38       	ld.w	r8,r12[0xc]
  // disable timer interrupts
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);


  // not linked
  if( (t->next == NULL) || (t->prev == NULL)) { return 0; }
80005710:	58 08       	cp.w	r8,0
80005712:	c3 20       	breq	80005776 <timer_remove+0x6a>
80005714:	78 48       	ld.w	r8,r12[0x10]
80005716:	58 08       	cp.w	r8,0
80005718:	c2 f0       	breq	80005776 <timer_remove+0x6a>

  // check head
  if(t == head) { 
8000571a:	e0 69 08 04 	mov	r9,2052
8000571e:	72 08       	ld.w	r8,r9[0x0]
80005720:	10 3c       	cp.w	r12,r8
    found = 1;
    head = t->next;
80005722:	c0 31       	brne	80005728 <timer_remove+0x1c>
80005724:	78 38       	ld.w	r8,r12[0xc]
  }
  // check tail
  else if(t == tail) { 
80005726:	c0 b8       	rjmp	8000573c <timer_remove+0x30>
80005728:	e0 69 08 0c 	mov	r9,2060
8000572c:	72 0a       	ld.w	r10,r9[0x0]
8000572e:	14 3c       	cp.w	r12,r10
    found = 1;
    tail = t->prev; 
  } else {
    // search 
    pt = head;
    for(i=0; i<num; ++i) {
80005730:	c0 50       	breq	8000573a <timer_remove+0x2e>
80005732:	30 09       	mov	r9,0
    head = t->next;
  }
  // check tail
  else if(t == tail) { 
    found = 1;
    tail = t->prev; 
80005734:	e0 6a 08 08 	mov	r10,2056
80005738:	c0 88       	rjmp	80005748 <timer_remove+0x3c>
  } else {
    // search 
    pt = head;
    for(i=0; i<num; ++i) {
      if(pt == t) {
8000573a:	78 48       	ld.w	r8,r12[0x10]
8000573c:	93 08       	st.w	r9[0x0],r8
	// found it
	found = 1;
	break;
      }
      pt = pt->next;
8000573e:	c0 a8       	rjmp	80005752 <timer_remove+0x46>
    found = 1;
    tail = t->prev; 
  } else {
    // search 
    pt = head;
    for(i=0; i<num; ++i) {
80005740:	18 38       	cp.w	r8,r12
80005742:	c0 80       	breq	80005752 <timer_remove+0x46>
80005744:	70 38       	ld.w	r8,r8[0xc]
80005746:	2f f9       	sub	r9,-1
80005748:	74 0b       	ld.w	r11,r10[0x0]
8000574a:	16 39       	cp.w	r9,r11
      pt = pt->next;
    }
  }
  if(found) {
    // unlink and decrement
    (t->next)->prev = t->prev;
8000574c:	cf a3       	brcs	80005740 <timer_remove+0x34>
8000574e:	30 0c       	mov	r12,0
80005750:	c1 18       	rjmp	80005772 <timer_remove+0x66>
    (t->prev)->next = t->next;
80005752:	78 38       	ld.w	r8,r12[0xc]
80005754:	78 49       	ld.w	r9,r12[0x10]
80005756:	91 49       	st.w	r8[0x10],r9
    t->next = t->prev = 0;
80005758:	78 48       	ld.w	r8,r12[0x10]
8000575a:	78 39       	ld.w	r9,r12[0xc]
8000575c:	91 39       	st.w	r8[0xc],r9
8000575e:	30 08       	mov	r8,0
    --num;
80005760:	99 48       	st.w	r12[0x10],r8
80005762:	78 48       	ld.w	r8,r12[0x10]
80005764:	99 38       	st.w	r12[0xc],r8
80005766:	e0 68 08 08 	mov	r8,2056
  }

  // enable timer interrupts
  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
8000576a:	30 1c       	mov	r12,1
  return found;
8000576c:	70 09       	ld.w	r9,r8[0x0]
8000576e:	20 19       	sub	r9,1
80005770:	91 09       	st.w	r8[0x0],r9
80005772:	d5 43       	csrf	0x14
80005774:	5e fc       	retal	r12
80005776:	5e fd       	retal	0

80005778 <timer_add>:
80005778:	d4 21       	pushm	r4-r7,lr
8000577a:	d3 43       	ssrf	0x14
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);

  // print_dbg("\r\n timer_add, @ 0x");
  // print_dbg_hex((u32)t);

  if(t->prev == NULL || t->next == NULL) {
8000577c:	78 48       	ld.w	r8,r12[0x10]
8000577e:	58 08       	cp.w	r8,0
80005780:	c0 60       	breq	8000578c <timer_add+0x14>
80005782:	78 38       	ld.w	r8,r12[0xc]
80005784:	58 08       	cp.w	r8,0
80005786:	c0 30       	breq	8000578c <timer_add+0x14>
80005788:	30 0c       	mov	r12,0
8000578a:	c2 a8       	rjmp	800057de <timer_add+0x66>
    // print_dbg(" ; timer is unlinked ");
    // is list empty?
    if( (head == NULL) || (tail == NULL)) {
8000578c:	e0 68 08 04 	mov	r8,2052
80005790:	70 08       	ld.w	r8,r8[0x0]
80005792:	58 08       	cp.w	r8,0
80005794:	c0 60       	breq	800057a0 <timer_add+0x28>
80005796:	e0 67 08 0c 	mov	r7,2060
8000579a:	6e 0e       	ld.w	lr,r7[0x0]
      // print_dbg(" ; list was empty ");
      head = tail = t;
8000579c:	58 0e       	cp.w	lr,0
8000579e:	c0 e1       	brne	800057ba <timer_add+0x42>
800057a0:	e0 68 08 0c 	mov	r8,2060
      t->next = t->prev = t;
800057a4:	91 0c       	st.w	r8[0x0],r12
800057a6:	e0 68 08 04 	mov	r8,2052
800057aa:	91 0c       	st.w	r8[0x0],r12
      num = 1;
800057ac:	99 4c       	st.w	r12[0x10],r12
800057ae:	78 48       	ld.w	r8,r12[0x10]
      // print_dbg(" ; added timer as sole element ");

    } else {
      // list not empty, add to tail
      tail->next = t;
800057b0:	30 1e       	mov	lr,1
      head->prev = t;
800057b2:	99 38       	st.w	r12[0xc],r8
      t->prev = tail;
800057b4:	e0 68 08 08 	mov	r8,2056
      t->next = head;
      tail = t;
800057b8:	c0 a8       	rjmp	800057cc <timer_add+0x54>
      ++num; 
800057ba:	9d 3c       	st.w	lr[0xc],r12
800057bc:	91 4c       	st.w	r8[0x10],r12
800057be:	99 4e       	st.w	r12[0x10],lr
800057c0:	99 38       	st.w	r12[0xc],r8

    } 
    t->callback = callback; 
800057c2:	8f 0c       	st.w	r7[0x0],r12
    t->caller = obj;
800057c4:	e0 68 08 08 	mov	r8,2056
    if(ticks < 1) { ticks = 1; }
800057c8:	70 0e       	ld.w	lr,r8[0x0]
800057ca:	2f fe       	sub	lr,-1
    t->ticksRemain = ticks;
800057cc:	91 0e       	st.w	r8[0x0],lr
    t->ticks = ticks;
800057ce:	99 2a       	st.w	r12[0x8],r10
800057d0:	99 59       	st.w	r12[0x14],r9
    // print_dbg(" ; timer was already linked, aborting ");
    ret = 0;
  }

  // enable timer interrupts
  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
800057d2:	58 0b       	cp.w	r11,0
  return ret;
}
800057d4:	f9 bb 00 01 	moveq	r11,1
800057d8:	99 0b       	st.w	r12[0x0],r11
800057da:	99 1b       	st.w	r12[0x4],r11
800057dc:	30 1c       	mov	r12,1
800057de:	d5 43       	csrf	0x14
800057e0:	d8 22       	popm	r4-r7,pc
800057e2:	d7 03       	nop

800057e4 <usb_mode_change>:
   */

// usb mode change callback
void usb_mode_change(bool b_host_mode) {
  // print_dbg("\r\n mode change (ignore) ");
}
800057e4:	5e fc       	retal	r12

800057e6 <usb_vbus_change>:
 
// usb Vbus change callback
void usb_vbus_change(bool b_vbus_present) {
  // print_dbg("\r\n usb vbus change, new status: ");
  // print_dbg_ulong(b_vbus_present);
}
800057e6:	5e fc       	retal	r12

800057e8 <usb_vbus_error>:

// usb vbus error callback
void usb_vbus_error(void) {
  // print_dbg("\r\n ******************* usb vbus error");

}
800057e8:	5e fc       	retal	r12

800057ea <usb_connection>:
void usb_connection(uhc_device_t *dev, bool b_present) {
    // print_dbg("\r\n usb device connection: ");
    // print_dbg_hex(dev);
    // print_dbg(" , ");
    // print_dbg_ulong(b_present);
}
800057ea:	5e fc       	retal	r12

800057ec <usb_wakeup>:

// usb wakeup callback
void usb_wakeup(void) {
    // print_dbg("\r\n usb wakeup");
}
800057ec:	5e fc       	retal	r12

800057ee <usb_sof>:

// usb start-of-frame callback
void usb_sof(void) {
     // print_dbg("\r\n usb sof");
}
800057ee:	5e fc       	retal	r12

800057f0 <usb_enum>:
  // print_dbg("\r\n usb enumerated: ");
  // print_dbg_hex(dev);
  // print_dbg(" , ");
  // print_dbg_hex(status);

}
800057f0:	5e fc       	retal	r12
800057f2:	d7 03       	nop

800057f4 <ftdi_rx_done>:
//------- static functions

static void ftdi_rx_done(  usb_add_t add,
			   usb_ep_t ep,
			   uhd_trans_status_t stat,
			   iram_size_t nb) {
800057f4:	d4 01       	pushm	lr
  status = stat;
800057f6:	e0 68 08 64 	mov	r8,2148
  rxBusy = 0;
800057fa:	91 0a       	st.w	r8[0x0],r10
  rxBytes = nb - FTDI_STATUS_BYTES;
800057fc:	e0 68 08 54 	mov	r8,2132
static void ftdi_rx_done(  usb_add_t add,
			   usb_ep_t ep,
			   uhd_trans_status_t stat,
			   iram_size_t nb) {
  status = stat;
  rxBusy = 0;
80005800:	20 29       	sub	r9,2
  rxBytes = nb - FTDI_STATUS_BYTES;
80005802:	30 0a       	mov	r10,0
80005804:	b0 8a       	st.b	r8[0x0],r10
  /* print_dbg_ulong(nb); */
  /* print_dbg(" ; status bytes: 0x"); */
  /* print_dbg_hex(rxBuf[0]); */
  /* print_dbg(" 0x"); */
  /* print_dbg_hex(rxBuf[1]); */			    
  if(rxBytes) {
80005806:	e0 68 08 58 	mov	r8,2136
    // check for monome events
    //    if(monome_read_serial != NULL) { 
      (*monome_read_serial)(); 
8000580a:	91 09       	st.w	r8[0x0],r9
8000580c:	58 09       	cp.w	r9,0
8000580e:	c0 40       	breq	80005816 <ftdi_rx_done+0x22>
80005810:	33 08       	mov	r8,48
80005812:	70 08       	ld.w	r8,r8[0x0]
80005814:	5d 18       	icall	r8
80005816:	d8 02       	popm	pc

80005818 <ftdi_tx_done>:
80005818:	e0 68 08 64 	mov	r8,2148
8000581c:	30 09       	mov	r9,0
8000581e:	91 0a       	st.w	r8[0x0],r10
80005820:	e0 68 08 10 	mov	r8,2064
  if (status != UHD_TRANS_NOERROR) {
    // print_dbg("\r\n ftdi tx error");
    return;
  }
  
}
80005824:	b0 89       	st.b	r8[0x0],r9
80005826:	5e fc       	retal	r12

80005828 <ftdi_rx_buf>:
80005828:	e0 6c 08 14 	mov	r12,2068


// rx buffer (no status bytes)
extern u8* ftdi_rx_buf() {
  return rxBuf + 2;
}
8000582c:	2f ec       	sub	r12,-2
8000582e:	5e fc       	retal	r12

80005830 <ftdi_rx_bytes>:
80005830:	e0 68 08 58 	mov	r8,2136

// number of bytes from last rx trasnfer
extern volatile u8 ftdi_rx_bytes() {
  return rxBytes;
}
80005834:	11 bc       	ld.ub	r12,r8[0x3]
80005836:	5e fc       	retal	r12

80005838 <ftdi_rx_busy>:
80005838:	e0 68 08 54 	mov	r8,2132

// busy flags
extern volatile u8 ftdi_rx_busy() {
  return rxBusy;
}
8000583c:	11 8c       	ld.ub	r12,r8[0x0]
8000583e:	5e fc       	retal	r12

80005840 <ftdi_tx_busy>:
80005840:	e0 68 08 10 	mov	r8,2064

extern volatile u8 ftdi_tx_busy() {
  return txBusy;
}
80005844:	11 8c       	ld.ub	r12,r8[0x0]
80005846:	5e fc       	retal	r12

80005848 <ftdi_setup>:
80005848:	d4 01       	pushm	lr
8000584a:	20 3d       	sub	sp,12
  char * serstr;
  //  u8 matchMonome;
  // print_dbg("\r\n FTDI setup routine");

  // get string data...
  ftdi_get_strings(&manstr, &prodstr, &serstr);  
8000584c:	1a 9a       	mov	r10,sp
8000584e:	fa cb ff fc 	sub	r11,sp,-4
80005852:	fa cc ff f8 	sub	r12,sp,-8
80005856:	c5 bc       	rcall	8000590c <ftdi_get_strings>
80005858:	40 0a       	lddsp	r10,sp[0x0]
  // print the strings
  // print_unicode_string(manstr, FTDI_STRING_MAX_LEN);
  //  print_unicode_string(prodstr, FTDI_STRING_MAX_LEN);
  //  print_unicode_string(serstr, FTDI_STRING_MAX_LEN);
  //// query if this is a monome device
  check_monome_device_desc(manstr, prodstr, serstr);
8000585a:	40 1b       	lddsp	r11,sp[0x4]
8000585c:	40 2c       	lddsp	r12,sp[0x8]
8000585e:	fe b0 fd 69 	rcall	80005330 <check_monome_device_desc>
80005862:	30 19       	mov	r9,1
  //// TODO: other protocols??

  // set connection flag
  ftdiConnect = 1;
80005864:	e0 68 08 11 	mov	r8,2065
80005868:	b0 89       	st.b	r8[0x0],r9
}
8000586a:	2f dd       	sub	sp,-12
8000586c:	d8 02       	popm	pc
8000586e:	d7 03       	nop

80005870 <ftdi_change>:
80005870:	d4 01       	pushm	lr
80005872:	e0 68 08 5c 	mov	r8,2140
80005876:	58 0b       	cp.w	r11,0
80005878:	c0 30       	breq	8000587e <ftdi_change+0xe>
8000587a:	30 79       	mov	r9,7
void ftdi_change(uhc_device_t* dev, u8 plug) {
  // print_dbg("\r\n changed FTDI connection status");
  if(plug) { 
    e.type = kEventFtdiConnect; 
  } else {
    e.type = kEventFtdiDisconnect;
8000587c:	c0 28       	rjmp	80005880 <ftdi_change+0x10>
8000587e:	30 89       	mov	r9,8
  }
  // posting an event so the main loop can respond
  event_post(&e); 
80005880:	91 09       	st.w	r8[0x0],r9
80005882:	e0 6c 08 5c 	mov	r12,2140
}
80005886:	fe b0 f8 f3 	rcall	80004a6c <event_post>
8000588a:	d8 02       	popm	pc

8000588c <ftdi_read>:
8000588c:	d4 01       	pushm	lr
8000588e:	30 09       	mov	r9,0
    // print_dbg("\r\n error requesting ftdi output pipe");
  }
}
    
void ftdi_read(void) {
  rxBytes = 0;
80005890:	e0 68 08 58 	mov	r8,2136
  rxBusy = true;
80005894:	91 09       	st.w	r8[0x0],r9
80005896:	30 19       	mov	r9,1
  if (!uhi_ftdi_in_run((u8*)rxBuf,
80005898:	e0 68 08 54 	mov	r8,2132
8000589c:	fe ca 00 a8 	sub	r10,pc,168
800058a0:	b0 89       	st.b	r8[0x0],r9
800058a2:	34 0b       	mov	r11,64
800058a4:	e0 6c 08 14 	mov	r12,2068
		       FTDI_RX_BUF_SIZE, &ftdi_rx_done)) {
    print_dbg("\r\n ftdi rx transfer error");
800058a8:	cb 2c       	rcall	80005a0c <uhi_ftdi_in_run>
800058aa:	c0 51       	brne	800058b4 <ftdi_read+0x28>
800058ac:	fe cc c4 40 	sub	r12,pc,-15296
800058b0:	e0 a0 10 82 	rcall	800079b4 <print_dbg>
800058b4:	d8 02       	popm	pc
800058b6:	d7 03       	nop

800058b8 <ftdi_write>:
800058b8:	d4 01       	pushm	lr
800058ba:	30 19       	mov	r9,1
800058bc:	e0 68 08 10 	mov	r8,2064
800058c0:	fe ca 00 a8 	sub	r10,pc,168
800058c4:	b0 89       	st.b	r8[0x0],r9
800058c6:	c9 1c       	rcall	800059e8 <uhi_ftdi_out_run>
800058c8:	d8 02       	popm	pc
800058ca:	d7 03       	nop

800058cc <ctl_req_end>:
		uhd_trans_status_t status,
		uint16_t payload_trans) {
  // last transfer ok?
  //  print_dbg("\r\n ctl request end, status: ");
  //  print_dbg_hex((u32)status);
  ctlReadBusy = 0;
800058cc:	30 09       	mov	r9,0
800058ce:	e0 68 08 70 	mov	r8,2160
}
800058d2:	b0 89       	st.b	r8[0x0],r9
800058d4:	5e fc       	retal	r12
800058d6:	d7 03       	nop

800058d8 <send_ctl_request>:

// send control request
static u8 send_ctl_request(u8 reqtype, u8 reqnum, 
			   u8* data, u16 size,
			     u16 index, u16 val, 
			     uhd_callback_setup_end_t callbackEnd) {
800058d8:	d4 21       	pushm	r4-r7,lr
800058da:	20 2d       	sub	sp,8
  /* } */

  req.bmRequestType = reqtype;
  req.bRequest = reqnum;
  req.wValue = (val);
  req.wIndex = (index);
800058dc:	ba 28       	st.h	sp[0x4],r8

// send control request
static u8 send_ctl_request(u8 reqtype, u8 reqnum, 
			   u8* data, u16 size,
			     u16 index, u16 val, 
			     uhd_callback_setup_end_t callbackEnd) {
800058de:	fa c4 ff e4 	sub	r4,sp,-28
800058e2:	68 18       	ld.w	r8,r4[0x4]
  /* if (uhi_ftdi_dev.dev != dev) { */
  /*   return;  // No interface to enable */
  /* } */

  req.bmRequestType = reqtype;
  req.bRequest = reqnum;
800058e4:	ba 9b       	st.b	sp[0x1],r11
 
  /* if (uhi_ftdi_dev.dev != dev) { */
  /*   return;  // No interface to enable */
  /* } */

  req.bmRequestType = reqtype;
800058e6:	ba 8c       	st.b	sp[0x0],r12
  req.bRequest = reqnum;
  req.wValue = (val);
  req.wIndex = (index);
  req.wLength = (size);
  return uhd_setup_request(
800058e8:	1a d8       	st.w	--sp,r8

// send control request
static u8 send_ctl_request(u8 reqtype, u8 reqnum, 
			   u8* data, u16 size,
			     u16 index, u16 val, 
			     uhd_callback_setup_end_t callbackEnd) {
800058ea:	68 08       	ld.w	r8,r4[0x0]
  /*   return;  // No interface to enable */
  /* } */

  req.bmRequestType = reqtype;
  req.bRequest = reqnum;
  req.wValue = (val);
800058ec:	ba 38       	st.h	sp[0x6],r8
  req.wIndex = (index);
  req.wLength = (size);
  return uhd_setup_request(
800058ee:	e0 68 08 68 	mov	r8,2152

  req.bmRequestType = reqtype;
  req.bRequest = reqnum;
  req.wValue = (val);
  req.wIndex = (index);
  req.wLength = (size);
800058f2:	70 08       	ld.w	r8,r8[0x0]
  return uhd_setup_request(
800058f4:	ba 59       	st.h	sp[0xa],r9
800058f6:	fa cb ff fc 	sub	r11,sp,-4
800058fa:	5c 79       	castu.h	r9
800058fc:	f1 3c 00 12 	ld.ub	r12,r8[18]
80005900:	30 08       	mov	r8,0
80005902:	e0 a0 0a 41 	rcall	80006d84 <uhd_setup_request>
			   data,
			   size,
			   NULL,
			   callbackEnd
			   );
}
80005906:	2f fd       	sub	sp,-4
80005908:	2f ed       	sub	sp,-8
8000590a:	d8 22       	popm	r4-r7,pc

8000590c <ftdi_get_strings>:
8000590c:	d4 21       	pushm	r4-r7,lr
8000590e:	30 18       	mov	r8,1
80005910:	e0 67 08 70 	mov	r7,2160

  // get manufacturer string
  ctlReadBusy = 1;
  //  print_dbg("\r\n sending ctl request for manufacturer string, index : ");
  //  print_dbg_hex(uhi_ftdi_dev.dev->dev_desc.iManufacturer);
  if(!(send_ctl_request(
80005914:	ae 88       	st.b	r7[0x0],r8
80005916:	fe c8 00 4a 	sub	r8,pc,74
8000591a:	1a d8       	st.w	--sp,r8
8000591c:	e0 68 08 68 	mov	r8,2152
80005920:	70 08       	ld.w	r8,r8[0x0]
80005922:	f1 38 00 0e 	ld.ub	r8,r8[14]
80005926:	e8 18 03 00 	orl	r8,0x300
  //  print_dbg_hex((u32)status);
  ctlReadBusy = 0;
}

// read eeprom
void ftdi_get_strings(char** pManufacturer, char** pProduct, char** pSerial) {
8000592a:	18 96       	mov	r6,r12

  // get manufacturer string
  ctlReadBusy = 1;
  //  print_dbg("\r\n sending ctl request for manufacturer string, index : ");
  //  print_dbg_hex(uhi_ftdi_dev.dev->dev_desc.iManufacturer);
  if(!(send_ctl_request(
8000592c:	1a d8       	st.w	--sp,r8
8000592e:	16 95       	mov	r5,r11
80005930:	14 94       	mov	r4,r10
80005932:	e0 68 04 09 	mov	r8,1033
80005936:	34 09       	mov	r9,64
80005938:	e0 6a 3e ec 	mov	r10,16108
8000593c:	30 6b       	mov	r11,6
8000593e:	e0 6c 00 80 	mov	r12,128
80005942:	cc bf       	rcall	800058d8 <send_ctl_request>
       )) {
    // print_dbg("\r\n control request for string descriptor failed");
    return;
  }
  // wait for transfer end
  while(ctlReadBusy) { ;; } 
80005944:	2f ed       	sub	sp,-8
80005946:	58 0c       	cp.w	r12,0
80005948:	c4 e0       	breq	800059e4 <ftdi_get_strings+0xd8>
8000594a:	0e 98       	mov	r8,r7
8000594c:	e0 67 08 70 	mov	r7,2160

  // get product string
  ctlReadBusy = 1;
80005950:	11 89       	ld.ub	r9,r8[0x0]
  //  print_dbg("\r\n sending ctl request for product string, index : ");
  //  print_dbg_ulong( uhi_ftdi_dev.dev->dev_desc.iProduct);
  if(!(send_ctl_request(
80005952:	58 09       	cp.w	r9,0
80005954:	cf c1       	brne	8000594c <ftdi_get_strings+0x40>
80005956:	30 18       	mov	r8,1
80005958:	ae 88       	st.b	r7[0x0],r8
8000595a:	fe c8 00 8e 	sub	r8,pc,142
8000595e:	1a d8       	st.w	--sp,r8
80005960:	e0 68 08 68 	mov	r8,2152
80005964:	70 08       	ld.w	r8,r8[0x0]
80005966:	f1 38 00 0f 	ld.ub	r8,r8[15]
8000596a:	e8 18 03 00 	orl	r8,0x300
8000596e:	34 09       	mov	r9,64
80005970:	1a d8       	st.w	--sp,r8
80005972:	e0 6a 3f 6c 	mov	r10,16236
80005976:	e0 68 04 09 	mov	r8,1033
8000597a:	30 6b       	mov	r11,6
       )) {
    // print_dbg("\r\n control request for string descriptor failed");
    return;
  }
  // wait for transfer end
  while(ctlReadBusy) { ;; } 
8000597c:	e0 6c 00 80 	mov	r12,128
80005980:	ca cf       	rcall	800058d8 <send_ctl_request>
80005982:	2f ed       	sub	sp,-8
80005984:	58 0c       	cp.w	r12,0

  // get serial string
  ctlReadBusy = 1;
80005986:	c2 f0       	breq	800059e4 <ftdi_get_strings+0xd8>
80005988:	0e 98       	mov	r8,r7
  // print_dbg("\r\n sending ctl request for serial string : ");
  if(!(send_ctl_request(
8000598a:	e0 67 08 70 	mov	r7,2160
8000598e:	11 89       	ld.ub	r9,r8[0x0]
80005990:	58 09       	cp.w	r9,0
80005992:	cf c1       	brne	8000598a <ftdi_get_strings+0x7e>
80005994:	30 18       	mov	r8,1
80005996:	ae 88       	st.b	r7[0x0],r8
80005998:	fe c8 00 cc 	sub	r8,pc,204
8000599c:	1a d8       	st.w	--sp,r8
8000599e:	e0 68 08 68 	mov	r8,2152
800059a2:	70 08       	ld.w	r8,r8[0x0]
800059a4:	f1 38 00 10 	ld.ub	r8,r8[16]
800059a8:	e8 18 03 00 	orl	r8,0x300
800059ac:	34 09       	mov	r9,64
800059ae:	1a d8       	st.w	--sp,r8
800059b0:	e0 6a 3f 2c 	mov	r10,16172
       )) {
    // print_dbg("\r\n control request for string descriptor failed");
    return;
  }
  // wait for transfer end
  while(ctlReadBusy) { ;; }
800059b4:	e0 68 04 09 	mov	r8,1033
800059b8:	30 6b       	mov	r11,6

  //  print_dbg("\r\n requested all string descriptors.");
  *pManufacturer = manufacturer_string + FTDI_STRING_DESC_OFFSET;
800059ba:	e0 6c 00 80 	mov	r12,128
800059be:	c8 df       	rcall	800058d8 <send_ctl_request>
  *pProduct = product_string + FTDI_STRING_DESC_OFFSET;
800059c0:	2f ed       	sub	sp,-8
800059c2:	58 0c       	cp.w	r12,0
800059c4:	c1 00       	breq	800059e4 <ftdi_get_strings+0xd8>
  *pSerial = serial_string + FTDI_STRING_DESC_OFFSET;
800059c6:	0f 88       	ld.ub	r8,r7[0x0]
800059c8:	58 08       	cp.w	r8,0
800059ca:	cf e1       	brne	800059c6 <ftdi_get_strings+0xba>
800059cc:	e0 68 3e ec 	mov	r8,16108
800059d0:	2f e8       	sub	r8,-2
800059d2:	8d 08       	st.w	r6[0x0],r8
800059d4:	e0 68 3f 6c 	mov	r8,16236
800059d8:	2f e8       	sub	r8,-2
800059da:	8b 08       	st.w	r5[0x0],r8
800059dc:	e0 68 3f 2c 	mov	r8,16172
800059e0:	2f e8       	sub	r8,-2
800059e2:	89 08       	st.w	r4[0x0],r8
800059e4:	d8 22       	popm	r4-r7,pc
800059e6:	d7 03       	nop

800059e8 <uhi_ftdi_out_run>:
800059e8:	d4 01       	pushm	lr
800059ea:	1a da       	st.w	--sp,r10
}

// run the output endpoint (bulk)
bool uhi_ftdi_out_run(uint8_t * buf, iram_size_t buf_size,
		      uhd_callback_trans_t callback) {
  return uhd_ep_run(uhi_ftdi_dev.dev->address,
800059ec:	16 98       	mov	r8,r11
800059ee:	18 99       	mov	r9,r12
800059f0:	e0 6a 08 68 	mov	r10,2152
800059f4:	e0 6c 4e 20 	mov	r12,20000
800059f8:	15 db       	ld.ub	r11,r10[0x5]
800059fa:	74 0a       	ld.w	r10,r10[0x0]
800059fc:	1a dc       	st.w	--sp,r12
800059fe:	f5 3c 00 12 	ld.ub	r12,r10[18]
80005a02:	30 1a       	mov	r10,1
80005a04:	e0 a0 08 f6 	rcall	80006bf0 <uhd_ep_run>
		    uhi_ftdi_dev.ep_out, true, buf, buf_size,
		    UHI_FTDI_TIMEOUT, callback);
}
80005a08:	2f ed       	sub	sp,-8
80005a0a:	d8 02       	popm	pc

80005a0c <uhi_ftdi_in_run>:
80005a0c:	d4 01       	pushm	lr
80005a0e:	1a da       	st.w	--sp,r10
80005a10:	16 98       	mov	r8,r11
80005a12:	18 99       	mov	r9,r12
}

// run the input endpoint (bulk)
bool uhi_ftdi_in_run(uint8_t * buf, iram_size_t buf_size,
		     uhd_callback_trans_t callback) {
  return uhd_ep_run(uhi_ftdi_dev.dev->address,
80005a14:	e0 6a 08 68 	mov	r10,2152
80005a18:	e0 6c 4e 20 	mov	r12,20000
80005a1c:	15 cb       	ld.ub	r11,r10[0x4]
80005a1e:	74 0a       	ld.w	r10,r10[0x0]
80005a20:	1a dc       	st.w	--sp,r12
80005a22:	f5 3c 00 12 	ld.ub	r12,r10[18]
80005a26:	30 0a       	mov	r10,0
80005a28:	e0 a0 08 e4 	rcall	80006bf0 <uhd_ep_run>
		    uhi_ftdi_dev.ep_in, false, buf, buf_size,
		    UHI_FTDI_TIMEOUT, callback);
}
80005a2c:	2f ed       	sub	sp,-8
80005a2e:	d8 02       	popm	pc

80005a30 <uhi_ftdi_uninstall>:
80005a30:	d4 01       	pushm	lr
80005a32:	e0 68 08 68 	mov	r8,2152
80005a36:	70 0a       	ld.w	r10,r8[0x0]

  ftdi_change(dev, true);  
}

void uhi_ftdi_uninstall(uhc_device_t* dev) {
  if (uhi_ftdi_dev.dev != dev) {
80005a38:	18 3a       	cp.w	r10,r12
    return; // Device not enabled in this interface
  }
  uhi_ftdi_dev.dev = NULL;
80005a3a:	c0 41       	brne	80005a42 <uhi_ftdi_uninstall+0x12>
80005a3c:	30 0b       	mov	r11,0
  Assert(uhi_ftdi_dev.report!=NULL);
  ftdi_change(dev, false);  
80005a3e:	91 0b       	st.w	r8[0x0],r11
80005a40:	c1 8f       	rcall	80005870 <ftdi_change>
80005a42:	d8 02       	popm	pc

80005a44 <uhi_ftdi_enable>:
80005a44:	d4 21       	pushm	r4-r7,lr
80005a46:	e0 68 08 68 	mov	r8,2152
80005a4a:	70 06       	ld.w	r6,r8[0x0]
  return UHC_ENUM_UNSUPPORTED; // No interface supported
}

void uhi_ftdi_enable(uhc_device_t* dev) {

  if (uhi_ftdi_dev.dev != dev) {
80005a4c:	18 36       	cp.w	r6,r12
  }
  /// bit mode (not bitbang? )
  /// todo: what do these mean???
  // val : ff
  // indx : 1
  send_ctl_request(FTDI_DEVICE_OUT_REQTYPE, 
80005a4e:	c3 e1       	brne	80005aca <uhi_ftdi_enable+0x86>
80005a50:	e0 68 00 ff 	mov	r8,255
80005a54:	30 07       	mov	r7,0
80005a56:	30 bb       	mov	r11,11
80005a58:	1a d7       	st.w	--sp,r7
80005a5a:	0e 99       	mov	r9,r7
80005a5c:	1a d8       	st.w	--sp,r8
80005a5e:	0e 9a       	mov	r10,r7
80005a60:	30 18       	mov	r8,1
80005a62:	34 0c       	mov	r12,64
80005a64:	c3 af       	rcall	800058d8 <send_ctl_request>
		   NULL);
  /// line property
  /// todo: what do these mean???
  // index 1
  // val : 8
  send_ctl_request(FTDI_DEVICE_OUT_REQTYPE, 
80005a66:	30 88       	mov	r8,8
80005a68:	1a d7       	st.w	--sp,r7
80005a6a:	0e 99       	mov	r9,r7
80005a6c:	1a d8       	st.w	--sp,r8
80005a6e:	0e 9a       	mov	r10,r7
80005a70:	30 18       	mov	r8,1
80005a72:	30 4b       	mov	r11,4
80005a74:	34 0c       	mov	r12,64
80005a76:	c3 1f       	rcall	800058d8 <send_ctl_request>
80005a78:	e0 69 c0 36 	mov	r9,49206
  /// baud rate
  // rq : 3
  // value: 26 (baudrate: 115200)
  // value: 49206 (baudrate : 57600)
  // index: 0
  send_ctl_request(FTDI_DEVICE_OUT_REQTYPE, 
80005a7c:	1a d7       	st.w	--sp,r7
80005a7e:	0e 98       	mov	r8,r7
80005a80:	1a d9       	st.w	--sp,r9
80005a82:	0e 9a       	mov	r10,r7
80005a84:	0e 99       	mov	r9,r7
80005a86:	30 3b       	mov	r11,3
80005a88:	34 0c       	mov	r12,64
80005a8a:	c2 7f       	rcall	800058d8 <send_ctl_request>
80005a8c:	e0 68 03 e8 	mov	r8,1000
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80005a90:	30 09       	mov	r9,0
80005a92:	e0 6a 7b e7 	mov	r10,31719
80005a96:	ea 1a cb 41 	orh	r10,0xcb41
80005a9a:	30 2b       	mov	r11,2
80005a9c:	e0 a0 13 3a 	rcall	80008110 <__avr32_udiv64>
80005aa0:	e1 b8 00 42 	mfsr	r8,0x108
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005aa4:	f0 0a 00 0a 	add	r10,r8,r10
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005aa8:	2f ad       	sub	sp,-24
80005aaa:	e1 b9 00 42 	mfsr	r9,0x108
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005aae:	14 38       	cp.w	r8,r10
80005ab0:	e0 88 00 05 	brls	80005aba <uhi_ftdi_enable+0x76>
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005ab4:	10 39       	cp.w	r9,r8
80005ab6:	cf a2       	brcc	80005aaa <uhi_ftdi_enable+0x66>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005ab8:	c0 38       	rjmp	80005abe <uhi_ftdi_enable+0x7a>
80005aba:	10 39       	cp.w	r9,r8
80005abc:	c0 43       	brcs	80005ac4 <uhi_ftdi_enable+0x80>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005abe:	14 39       	cp.w	r9,r10
80005ac0:	fe 98 ff f5 	brls	80005aaa <uhi_ftdi_enable+0x66>
80005ac4:	0c 9c       	mov	r12,r6
80005ac6:	30 1b       	mov	r11,1
		   0, 49206,
		   NULL);

  delay_ms(200);

  ftdi_change(dev, true);  
80005ac8:	cd 4e       	rcall	80005870 <ftdi_change>
80005aca:	d8 22       	popm	r4-r7,pc

80005acc <uhi_ftdi_install>:
80005acc:	d4 31       	pushm	r0-r7,lr
80005ace:	20 1d       	sub	sp,4
80005ad0:	e0 63 08 68 	mov	r3,2152
80005ad4:	18 96       	mov	r6,r12
80005ad6:	66 05       	ld.w	r5,r3[0x0]
80005ad8:	58 05       	cp.w	r5,0
80005ada:	c0 30       	breq	80005ae0 <uhi_ftdi_install+0x14>
80005adc:	30 5c       	mov	r12,5
80005ade:	c6 58       	rjmp	80005ba8 <uhi_ftdi_install+0xdc>
80005ae0:	98 d9       	ld.uh	r9,r12[0xa]
80005ae2:	f2 0a 16 08 	lsr	r10,r9,0x8

  // check vid/pid
  vid = le16_to_cpu(dev->dev_desc.idVendor);
  pid = le16_to_cpu(dev->dev_desc.idProduct);

  if( (vid == FTDI_VID) && (pid == FTDI_PID) ) {
80005ae6:	f5 e9 10 89 	or	r9,r10,r9<<0x8
80005aea:	e0 6a 60 01 	mov	r10,24577
80005aee:	98 c8       	ld.uh	r8,r12[0x8]
80005af0:	f4 09 19 00 	cp.h	r9,r10
80005af4:	5f 09       	sreq	r9
80005af6:	f0 0a 16 08 	lsr	r10,r8,0x8
80005afa:	f5 e8 10 88 	or	r8,r10,r8<<0x8
80005afe:	e0 6a 04 03 	mov	r10,1027
80005b02:	f4 08 19 00 	cp.h	r8,r10
80005b06:	5f 08       	sreq	r8
80005b08:	10 69       	and	r9,r8
80005b0a:	ea 09 18 00 	cp.b	r9,r5
    ;; // this is an FTDI device, so continue
  } else {
    return UHC_ENUM_UNSUPPORTED;
  }

  conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
80005b0e:	c4 c0       	breq	80005ba6 <uhi_ftdi_install+0xda>
80005b10:	78 68       	ld.w	r8,r12[0x18]
  ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
80005b12:	11 a4       	ld.ub	r4,r8[0x2]
    ;; // this is an FTDI device, so continue
  } else {
    return UHC_ENUM_UNSUPPORTED;
  }

  conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
80005b14:	10 97       	mov	r7,r8
80005b16:	11 b8       	ld.ub	r8,r8[0x3]
80005b18:	f1 e4 10 84 	or	r4,r8,r4<<0x8
80005b1c:	e8 08 16 08 	lsr	r8,r4,0x8
80005b20:	30 40       	mov	r0,4
80005b22:	f1 e4 10 84 	or	r4,r8,r4<<0x8
80005b26:	3f f1       	mov	r1,-1
    case USB_DT_INTERFACE:
      if ((ptr_iface->bInterfaceClass == FTDI_CLASS)
	  && (ptr_iface->bInterfaceProtocol == FTDI_PROTOCOL) ) {
	// print_dbg("\r\n class/protocol matches FTDI. ");
	b_iface_supported = true;
	uhi_ftdi_dev.ep_in = 0;
80005b28:	5c 84       	casts.h	r4
  conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
  ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
  b_iface_supported = false;

  while(conf_desc_lgt) {
    switch (ptr_iface->bDescriptorType) {
80005b2a:	0a 92       	mov	r2,r5

  conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
  ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
  b_iface_supported = false;

  while(conf_desc_lgt) {
80005b2c:	30 58       	mov	r8,5
    switch (ptr_iface->bDescriptorType) {
80005b2e:	c3 38       	rjmp	80005b94 <uhi_ftdi_install+0xc8>
80005b30:	0f 99       	ld.ub	r9,r7[0x1]
80005b32:	e0 09 18 00 	cp.b	r9,r0
80005b36:	c0 50       	breq	80005b40 <uhi_ftdi_install+0x74>
80005b38:	f0 09 18 00 	cp.b	r9,r8
80005b3c:	c2 81       	brne	80005b8c <uhi_ftdi_install+0xc0>

    case USB_DT_INTERFACE:
      if ((ptr_iface->bInterfaceClass == FTDI_CLASS)
80005b3e:	c0 d8       	rjmp	80005b58 <uhi_ftdi_install+0x8c>
80005b40:	0f d9       	ld.ub	r9,r7[0x5]
80005b42:	e2 09 18 00 	cp.b	r9,r1
	  && (ptr_iface->bInterfaceProtocol == FTDI_PROTOCOL) ) {
80005b46:	c2 21       	brne	80005b8a <uhi_ftdi_install+0xbe>
80005b48:	0f f9       	ld.ub	r9,r7[0x7]
80005b4a:	e2 09 18 00 	cp.b	r9,r1
	// print_dbg("\r\n class/protocol matches FTDI. ");
	b_iface_supported = true;
	uhi_ftdi_dev.ep_in = 0;
80005b4e:	c1 e1       	brne	80005b8a <uhi_ftdi_install+0xbe>
	uhi_ftdi_dev.ep_out = 0;
80005b50:	a6 c2       	st.b	r3[0x4],r2
80005b52:	a6 d2       	st.b	r3[0x5],r2

  while(conf_desc_lgt) {
    switch (ptr_iface->bDescriptorType) {

    case USB_DT_INTERFACE:
      if ((ptr_iface->bInterfaceClass == FTDI_CLASS)
80005b54:	30 15       	mov	r5,1
	b_iface_supported = false;
      }
      break;

    case USB_DT_ENDPOINT:
      if (!b_iface_supported) {
80005b56:	c1 b8       	rjmp	80005b8c <uhi_ftdi_install+0xc0>
80005b58:	58 05       	cp.w	r5,0
	break;
      }
      if (!uhd_ep_alloc(dev->address, (usb_ep_desc_t*)ptr_iface)) {
80005b5a:	c1 90       	breq	80005b8c <uhi_ftdi_install+0xc0>
80005b5c:	ed 3c 00 12 	ld.ub	r12,r6[18]
80005b60:	0e 9b       	mov	r11,r7
80005b62:	50 08       	stdsp	sp[0x0],r8
80005b64:	e0 a0 09 9e 	rcall	80006ea0 <uhd_ep_alloc>
80005b68:	40 08       	lddsp	r8,sp[0x0]
80005b6a:	c0 31       	brne	80005b70 <uhi_ftdi_install+0xa4>
80005b6c:	30 4c       	mov	r12,4
	// print_dbg("\r\n endpoint allocation failed");
	return UHC_ENUM_HARDWARE_LIMIT;
      }

      switch(((usb_ep_desc_t*)ptr_iface)->bmAttributes & USB_EP_TYPE_MASK) {
80005b6e:	c1 d8       	rjmp	80005ba8 <uhi_ftdi_install+0xdc>
80005b70:	0f b9       	ld.ub	r9,r7[0x3]
80005b72:	f3 d9 c0 02 	bfextu	r9,r9,0x0,0x2
80005b76:	58 29       	cp.w	r9,2
      case USB_EP_TYPE_BULK:
	//	print_dbg("\r\n allocating bulk endpoint: ");
	if (((usb_ep_desc_t*)ptr_iface)->bEndpointAddress & USB_EP_DIR_IN) {
80005b78:	c0 a1       	brne	80005b8c <uhi_ftdi_install+0xc0>
80005b7a:	0f a9       	ld.ub	r9,r7[0x2]
80005b7c:	e4 09 18 00 	cp.b	r9,r2
	  uhi_ftdi_dev.ep_in = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
80005b80:	c0 34       	brge	80005b86 <uhi_ftdi_install+0xba>
80005b82:	a6 c9       	st.b	r3[0x4],r9
	} else {
	  uhi_ftdi_dev.ep_out = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
80005b84:	c0 48       	rjmp	80005b8c <uhi_ftdi_install+0xc0>
80005b86:	a6 d9       	st.b	r3[0x5],r9
80005b88:	c0 28       	rjmp	80005b8c <uhi_ftdi_install+0xc0>
    default:
      // print_dbg("\r\n ignoring descriptor in ftdi device enumeration");
      break;
    }
    Assert(conf_desc_lgt>=ptr_iface->bLength);
    conf_desc_lgt -= ptr_iface->bLength;
80005b8a:	30 05       	mov	r5,0
80005b8c:	0f 89       	ld.ub	r9,r7[0x0]
    ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
80005b8e:	12 14       	sub	r4,r9
    default:
      // print_dbg("\r\n ignoring descriptor in ftdi device enumeration");
      break;
    }
    Assert(conf_desc_lgt>=ptr_iface->bLength);
    conf_desc_lgt -= ptr_iface->bLength;
80005b90:	12 07       	add	r7,r9

  conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
  ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
  b_iface_supported = false;

  while(conf_desc_lgt) {
80005b92:	5c 84       	casts.h	r4
80005b94:	58 04       	cp.w	r4,0
    Assert(conf_desc_lgt>=ptr_iface->bLength);
    conf_desc_lgt -= ptr_iface->bLength;
    ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
  }

  if (b_iface_supported) {
80005b96:	cc d1       	brne	80005b30 <uhi_ftdi_install+0x64>
80005b98:	58 05       	cp.w	r5,0
    uhi_ftdi_dev.dev = dev;
80005b9a:	c0 60       	breq	80005ba6 <uhi_ftdi_install+0xda>
80005b9c:	e0 68 08 68 	mov	r8,2152
    // print_dbg("\r\n completed FTDI device install");
    return UHC_ENUM_SUCCESS;
80005ba0:	08 9c       	mov	r12,r4
80005ba2:	91 06       	st.w	r8[0x0],r6
  }
  return UHC_ENUM_UNSUPPORTED; // No interface supported
}
80005ba4:	c0 28       	rjmp	80005ba8 <uhi_ftdi_install+0xdc>
80005ba6:	30 1c       	mov	r12,1
80005ba8:	2f fd       	sub	sp,-4
80005baa:	d8 32       	popm	r0-r7,pc

80005bac <flashc_set_bus_freq>:
}


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
80005bac:	e0 68 8a 3f 	mov	r8,35391
80005bb0:	ea 18 01 f7 	orh	r8,0x1f7
80005bb4:	10 3c       	cp.w	r12,r8
80005bb6:	e0 88 00 07 	brls	80005bc4 <flashc_set_bus_freq+0x18>
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80005bba:	fe 68 14 00 	mov	r8,-125952
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80005bbe:	30 1a       	mov	r10,1
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80005bc0:	70 09       	ld.w	r9,r8[0x0]
80005bc2:	c0 58       	rjmp	80005bcc <flashc_set_bus_freq+0x20>
80005bc4:	fe 68 14 00 	mov	r8,-125952
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80005bc8:	30 0a       	mov	r10,0
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80005bca:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80005bcc:	f3 da d0 c1 	bfins	r9,r10,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80005bd0:	91 09       	st.w	r8[0x0],r9
80005bd2:	5e fc       	retal	r12

80005bd4 <flashc_default_wait_until_ready>:
//! @{


bool flashc_is_ready(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
80005bd4:	fe 69 14 00 	mov	r9,-125952
}


void flashc_default_wait_until_ready(void)
{
	while (!flashc_is_ready());
80005bd8:	30 08       	mov	r8,0
//! @{


bool flashc_is_ready(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
80005bda:	72 2a       	ld.w	r10,r9[0x8]
}


void flashc_default_wait_until_ready(void)
{
	while (!flashc_is_ready());
80005bdc:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80005be0:	f0 0a 18 00 	cp.b	r10,r8
80005be4:	cf b0       	breq	80005bda <flashc_default_wait_until_ready+0x6>
}
80005be6:	5e fc       	retal	r12

80005be8 <flashc_issue_command>:
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
80005be8:	d4 21       	pushm	r4-r7,lr
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80005bea:	33 48       	mov	r8,52
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
80005bec:	18 97       	mov	r7,r12
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80005bee:	70 08       	ld.w	r8,r8[0x0]
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
80005bf0:	16 96       	mov	r6,r11
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80005bf2:	5d 18       	icall	r8
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
80005bf4:	fe 68 14 00 	mov	r8,-125952
80005bf8:	70 18       	ld.w	r8,r8[0x4]
	u_avr32_flashc_fcmd.FCMD.cmd = command;
80005bfa:	f1 d7 d0 06 	bfins	r8,r7,0x0,0x6
	if (page_number >= 0) {
80005bfe:	58 06       	cp.w	r6,0
80005c00:	c0 35       	brlt	80005c06 <flashc_issue_command+0x1e>
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
80005c02:	f1 d6 d1 10 	bfins	r8,r6,0x8,0x10
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
80005c06:	fe 69 14 00 	mov	r9,-125952
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
	u_avr32_flashc_fcmd.FCMD.cmd = command;
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
80005c0a:	3a 5a       	mov	r10,-91
80005c0c:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
80005c10:	93 18       	st.w	r9[0x4],r8
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
80005c12:	72 28       	ld.w	r8,r9[0x8]
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
80005c14:	e0 69 08 74 	mov	r9,2164
80005c18:	e2 18 00 0c 	andl	r8,0xc,COH
	flashc_wait_until_ready();
80005c1c:	93 08       	st.w	r9[0x0],r8
80005c1e:	33 48       	mov	r8,52
80005c20:	70 08       	ld.w	r8,r8[0x0]
}
80005c22:	5d 18       	icall	r8
80005c24:	d8 22       	popm	r4-r7,pc
80005c26:	d7 03       	nop

80005c28 <flashc_clear_page_buffer>:
80005c28:	d4 01       	pushm	lr
80005c2a:	3f fb       	mov	r11,-1
//! @{


void flashc_clear_page_buffer(void)
{
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_CPB, -1);
80005c2c:	30 3c       	mov	r12,3
80005c2e:	cd df       	rcall	80005be8 <flashc_issue_command>
80005c30:	d8 02       	popm	pc
}
80005c32:	d7 03       	nop

80005c34 <flashc_quick_page_read>:
80005c34:	d4 01       	pushm	lr
80005c36:	18 9b       	mov	r11,r12
}


bool flashc_quick_page_read(int page_number)
{
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPR, page_number);
80005c38:	30 cc       	mov	r12,12
80005c3a:	cd 7f       	rcall	80005be8 <flashc_issue_command>
80005c3c:	fe 68 14 00 	mov	r8,-125952
}


bool flashc_is_page_erased(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_QPRR_MASK) != 0);
80005c40:	70 2c       	ld.w	r12,r8[0x8]
80005c42:	f9 dc c0 a1 	bfextu	r12,r12,0x5,0x1

bool flashc_quick_page_read(int page_number)
{
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPR, page_number);
	return flashc_is_page_erased();
}
80005c46:	d8 02       	popm	pc

80005c48 <flashc_erase_page>:
80005c48:	d4 21       	pushm	r4-r7,lr
80005c4a:	16 97       	mov	r7,r11
80005c4c:	18 9b       	mov	r11,r12
80005c4e:	30 2c       	mov	r12,2

bool flashc_erase_page(int page_number, bool check)
{
	bool page_erased = true;

	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EP, page_number);
80005c50:	cc cf       	rcall	80005be8 <flashc_issue_command>
80005c52:	58 07       	cp.w	r7,0
	if (check) {
80005c54:	c0 21       	brne	80005c58 <flashc_erase_page+0x10>
80005c56:	da 2a       	popm	r4-r7,pc,r12=1
80005c58:	e0 67 08 74 	mov	r7,2164
		unsigned int error_status = flashc_error_status;
		page_erased = flashc_quick_page_read(-1);
80005c5c:	3f fc       	mov	r12,-1
{
	bool page_erased = true;

	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EP, page_number);
	if (check) {
		unsigned int error_status = flashc_error_status;
80005c5e:	6e 06       	ld.w	r6,r7[0x0]
		page_erased = flashc_quick_page_read(-1);
80005c60:	ce af       	rcall	80005c34 <flashc_quick_page_read>
80005c62:	6e 08       	ld.w	r8,r7[0x0]
		flashc_error_status |= error_status;
80005c64:	f1 e6 10 06 	or	r6,r8,r6
80005c68:	8f 06       	st.w	r7[0x0],r6
80005c6a:	d8 22       	popm	r4-r7,pc

80005c6c <flashc_write_page>:
	}
	return page_erased;
}
80005c6c:	d4 01       	pushm	lr
80005c6e:	18 9b       	mov	r11,r12
80005c70:	30 1c       	mov	r12,1
80005c72:	cb bf       	rcall	80005be8 <flashc_issue_command>
80005c74:	d8 02       	popm	pc
80005c76:	d7 03       	nop

80005c78 <flashc_quick_user_page_read>:
80005c78:	d4 01       	pushm	lr
80005c7a:	30 fc       	mov	r12,15
}


bool flashc_quick_user_page_read(void)
{
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPRUP, -1);
80005c7c:	3f fb       	mov	r11,-1
80005c7e:	cb 5f       	rcall	80005be8 <flashc_issue_command>
80005c80:	fe 68 14 00 	mov	r8,-125952
}


bool flashc_is_page_erased(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_QPRR_MASK) != 0);
80005c84:	70 2c       	ld.w	r12,r8[0x8]
80005c86:	f9 dc c0 a1 	bfextu	r12,r12,0x5,0x1

bool flashc_quick_user_page_read(void)
{
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPRUP, -1);
	return flashc_is_page_erased();
}
80005c8a:	d8 02       	popm	pc

80005c8c <flashc_erase_user_page>:
80005c8c:	d4 21       	pushm	r4-r7,lr
80005c8e:	3f fb       	mov	r11,-1
80005c90:	18 97       	mov	r7,r12
80005c92:	30 ec       	mov	r12,14


bool flashc_erase_user_page(bool check)
{
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EUP, -1);
80005c94:	ca af       	rcall	80005be8 <flashc_issue_command>
80005c96:	58 07       	cp.w	r7,0
	return (check) ? flashc_quick_user_page_read() : true;
80005c98:	c0 21       	brne	80005c9c <flashc_erase_user_page+0x10>
80005c9a:	da 2a       	popm	r4-r7,pc,r12=1
80005c9c:	ce ef       	rcall	80005c78 <flashc_quick_user_page_read>
80005c9e:	d8 22       	popm	r4-r7,pc

80005ca0 <flashc_write_user_page>:
80005ca0:	d4 01       	pushm	lr
}
80005ca2:	3f fb       	mov	r11,-1
80005ca4:	30 dc       	mov	r12,13
80005ca6:	ca 1f       	rcall	80005be8 <flashc_issue_command>
80005ca8:	d8 02       	popm	pc
80005caa:	d7 03       	nop

80005cac <flashc_memset64>:


void flashc_write_user_page(void)
{
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WUP, -1);
}
80005cac:	d4 31       	pushm	r0-r7,lr
80005cae:	21 2d       	sub	sp,72
	return flashc_memset64(dst, src | (uint64_t)src << 32, nbytes, erase);
}


volatile void *flashc_memset64(volatile void *dst, uint64_t src, size_t nbytes, bool erase)
{
80005cb0:	50 58       	stdsp	sp[0x14],r8
80005cb2:	12 96       	mov	r6,r9
	// Use aggregated pointers to have several alignments available for a same address.
	UnionCVPtr flash_array_end;
	UnionVPtr dest;
	Union64 source = {0};
80005cb4:	30 08       	mov	r8,0
80005cb6:	30 09       	mov	r9,0
	return flashc_memset64(dst, src | (uint64_t)src << 32, nbytes, erase);
}


volatile void *flashc_memset64(volatile void *dst, uint64_t src, size_t nbytes, bool erase)
{
80005cb8:	18 97       	mov	r7,r12
	// Use aggregated pointers to have several alignments available for a same address.
	UnionCVPtr flash_array_end;
	UnionVPtr dest;
	Union64 source = {0};
80005cba:	fa e9 00 38 	st.d	sp[56],r8
	return flashc_memset64(dst, src | (uint64_t)src << 32, nbytes, erase);
}


volatile void *flashc_memset64(volatile void *dst, uint64_t src, size_t nbytes, bool erase)
{
80005cbe:	14 94       	mov	r4,r10
80005cc0:	16 95       	mov	r5,r11
		256,
		384,
		512,
		768,
		1024,
	};
80005cc2:	31 0a       	mov	r10,16
80005cc4:	fe cb c8 3e 	sub	r11,pc,-14274
80005cc8:	fa cc ff e0 	sub	r12,sp,-32
80005ccc:	e0 a0 15 a2 	rcall	80008810 <memcpy>
	return ((unsigned int)FLASH_SIZE[(AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FSZ_MASK)
80005cd0:	fe 68 14 00 	mov	r8,-125952
	UnionVPtr tmp;
	unsigned int error_status = 0;
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
80005cd4:	fa cb ff b8 	sub	r11,sp,-72
80005cd8:	70 28       	ld.w	r8,r8[0x8]
80005cda:	f1 d8 c1 a3 	bfextu	r8,r8,0xd,0x3
80005cde:	f6 08 00 18 	add	r8,r11,r8<<0x1
80005ce2:	f1 13 ff d8 	ld.uh	r3,r8[-40]
80005ce6:	30 08       	mov	r8,0
80005ce8:	ea 18 80 00 	orh	r8,0x8000
	dest.u8ptr = dst;
80005cec:	ab 63       	lsl	r3,0xa
	UnionVPtr tmp;
	unsigned int error_status = 0;
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
80005cee:	51 17       	stdsp	sp[0x44],r7
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
80005cf0:	10 03       	add	r3,r8
80005cf2:	ee c8 ff f9 	sub	r8,r7,-7
80005cf6:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
80005cfa:	c1 38       	rjmp	80005d20 <flashc_memset64+0x74>
80005cfc:	f0 c9 00 01 	sub	r9,r8,1
		source.u8[i] = src;
80005d00:	fa ca ff b8 	sub	r10,sp,-72
80005d04:	f4 08 00 08 	add	r8,r10,r8
		src >>= 8;
80005d08:	ea 0a 16 08 	lsr	r10,r5,0x8
	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
		source.u8[i] = src;
80005d0c:	f1 64 ff f0 	st.b	r8[-16],r4

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
80005d10:	f1 d9 c0 03 	bfextu	r8,r9,0x0,0x3
		source.u8[i] = src;
		src >>= 8;
80005d14:	e8 09 16 08 	lsr	r9,r4,0x8
80005d18:	f3 e5 11 89 	or	r9,r9,r5<<0x18
80005d1c:	14 95       	mov	r5,r10
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
80005d1e:	12 94       	mov	r4,r9
80005d20:	58 04       	cp.w	r4,0
80005d22:	5c 25       	cpc	r5
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
		source.u8[i] = src;
		src >>= 8;
	}
	dest_end.u8ptr = dest.u8ptr + nbytes;
80005d24:	ce c1       	brne	80005cfc <flashc_memset64+0x50>
80005d26:	ee 06 00 06 	add	r6,r7,r6

	// If destination is outside flash, go to next flash page if any.
	if (dest.u8ptr < AVR32_FLASH) {
80005d2a:	e0 69 ff ff 	mov	r9,65535
80005d2e:	ea 19 7f ff 	orh	r9,0x7fff
80005d32:	12 37       	cp.w	r7,r9
80005d34:	e0 8b 00 06 	brhi	80005d40 <flashc_memset64+0x94>
		dest.u8ptr = AVR32_FLASH;
80005d38:	30 08       	mov	r8,0
80005d3a:	ea 18 80 00 	orh	r8,0x8000
	} else if (flash_array_end.u8ptr <= dest.u8ptr && dest.u8ptr < AVR32_FLASHC_USER_PAGE) {
80005d3e:	c0 e8       	rjmp	80005d5a <flashc_memset64+0xae>
80005d40:	0e 33       	cp.w	r3,r7
80005d42:	e0 8b 00 0d 	brhi	80005d5c <flashc_memset64+0xb0>
80005d46:	e0 68 ff ff 	mov	r8,65535
80005d4a:	ea 18 80 7f 	orh	r8,0x807f
80005d4e:	10 37       	cp.w	r7,r8
80005d50:	e0 8b 00 06 	brhi	80005d5c <flashc_memset64+0xb0>
		dest.u8ptr = AVR32_FLASHC_USER_PAGE;
80005d54:	30 08       	mov	r8,0
80005d56:	ea 18 80 80 	orh	r8,0x8080
	}

	// If end of destination is outside flash, move it to the end of the previous flash page if any.
	if (dest_end.u8ptr > AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE) {
80005d5a:	51 18       	stdsp	sp[0x44],r8
80005d5c:	e0 61 02 00 	mov	r1,512
80005d60:	ea 11 80 80 	orh	r1,0x8080
80005d64:	02 36       	cp.w	r6,r1
80005d66:	e0 88 00 04 	brls	80005d6e <flashc_memset64+0xc2>
80005d6a:	02 96       	mov	r6,r1
		dest_end.u8ptr = AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE;
	} else if (AVR32_FLASHC_USER_PAGE >= dest_end.u8ptr && dest_end.u8ptr > flash_array_end.u8ptr) {
80005d6c:	c0 a8       	rjmp	80005d80 <flashc_memset64+0xd4>
80005d6e:	30 00       	mov	r0,0
80005d70:	ea 10 80 80 	orh	r0,0x8080
80005d74:	00 36       	cp.w	r6,r0
80005d76:	e0 8b 00 05 	brhi	80005d80 <flashc_memset64+0xd4>
80005d7a:	06 36       	cp.w	r6,r3
80005d7c:	e6 06 17 b0 	movhi	r6,r3
		// Determine if the current destination page has an incomplete end.
		incomplete_flash_page_end = (Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
				Align_down((uint32_t)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;
80005d80:	fa ea 00 38 	ld.d	r10,sp[56]
			// pages that have already been written to.
			{
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
80005d84:	e5 d6 c0 03 	bfextu	r2,r6,0x0,0x3
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
80005d88:	0c 91       	mov	r1,r6
80005d8a:	ec 02 01 08 	sub	r8,r6,r2
		// Determine if the current destination page has an incomplete end.
		incomplete_flash_page_end = (Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
				Align_down((uint32_t)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;
80005d8e:	fa eb 00 04 	st.d	sp[4],r10
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
			*dest.u64ptr++ = source.u64;
		}

		// If the current destination page has an incomplete end...
		if (incomplete_flash_page_end) {
80005d92:	2f 88       	sub	r8,-8
	}

	// Align each end of destination pointer with its natural boundary.
	dest_end.u16ptr = (uint16_t *)Align_down((uint32_t)dest_end.u8ptr, sizeof(uint16_t));
	dest_end.u32ptr = (uint32_t *)Align_down((uint32_t)dest_end.u16ptr, sizeof(uint32_t));
	dest_end.u64ptr = (uint64_t *)Align_down((uint32_t)dest_end.u32ptr, sizeof(uint64_t));
80005d94:	0c 9a       	mov	r10,r6
80005d96:	e0 11 ff f8 	andl	r1,0xfff8
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
			*dest.u64ptr++ = source.u64;
		}

		// If the current destination page has an incomplete end...
		if (incomplete_flash_page_end) {
80005d9a:	e0 1a fe 00 	andl	r10,0xfe00
		// Determine if the current destination page has an incomplete end.
		incomplete_flash_page_end = (Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
				Align_down((uint32_t)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;
80005d9e:	50 78       	stdsp	sp[0x1c],r8
80005da0:	30 05       	mov	r5,0
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
			*dest.u64ptr++ = source.u64;
		}

		// If the current destination page has an incomplete end...
		if (incomplete_flash_page_end) {
80005da2:	e0 64 08 74 	mov	r4,2164
	dest_end.u64ptr = (uint64_t *)Align_down((uint32_t)dest_end.u32ptr, sizeof(uint64_t));

	// While end of destination is not reached...
	while (dest.u8ptr < dest_end.u8ptr) {
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
80005da6:	50 6a       	stdsp	sp[0x18],r10
80005da8:	c9 d8       	rjmp	80005ee2 <flashc_memset64+0x236>
		// Determine if the current destination page has an incomplete end.
		incomplete_flash_page_end = (Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
				Align_down((uint32_t)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;
80005daa:	c3 ff       	rcall	80005c28 <flashc_clear_page_buffer>
80005dac:	fa e8 00 04 	ld.d	r8,sp[4]
80005db0:	fa e9 00 30 	st.d	sp[48],r8
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Determine where the source data will end in the current flash page.
		flash_page_source_end.u64ptr =
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
80005db4:	68 08       	ld.w	r8,r4[0x0]

	// While end of destination is not reached...
	while (dest.u8ptr < dest_end.u8ptr) {
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;
80005db6:	00 99       	mov	r9,r0

		// Determine where the source data will end in the current flash page.
		flash_page_source_end.u64ptr =
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
80005db8:	10 45       	or	r5,r8
80005dba:	e0 19 fe 00 	andl	r9,0xfe00

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;

		// If destination does not point to the beginning of the current flash page...
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
80005dbe:	f1 d0 c0 09 	bfextu	r8,r0,0x0,0x9
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Determine where the source data will end in the current flash page.
		flash_page_source_end.u64ptr =
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
80005dc2:	f2 cc fe 00 	sub	r12,r9,-512
80005dc6:	e2 0c 0d 4c 	min	r12,r1,r12

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;

		// If destination does not point to the beginning of the current flash page...
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
80005dca:	58 08       	cp.w	r8,0
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
80005dcc:	c3 20       	breq	80005e30 <flashc_memset64+0x184>
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
80005dce:	00 9a       	mov	r10,r0
80005dd0:	51 09       	stdsp	sp[0x40],r9
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
80005dd2:	12 9b       	mov	r11,r9
80005dd4:	e0 1a ff f8 	andl	r10,0xfff8
80005dd8:	0c 9e       	mov	lr,r6
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
80005dda:	50 07       	stdsp	sp[0x0],r7
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
					tmp.u64ptr++) {
				*tmp.u64ptr = *tmp.u64ptr;
80005ddc:	c0 58       	rjmp	80005de6 <flashc_memset64+0x13a>
80005dde:	f0 e6 00 00 	ld.d	r6,r8[0]
80005de2:	f0 e7 00 00 	st.d	r8[0],r6
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
80005de6:	16 98       	mov	r8,r11
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
80005de8:	2f 8b       	sub	r11,-8
80005dea:	14 38       	cp.w	r8,r10
80005dec:	cf 93       	brcs	80005dde <flashc_memset64+0x132>
80005dee:	51 08       	stdsp	sp[0x40],r8
80005df0:	1c 96       	mov	r6,lr
					tmp.u64ptr++) {
				*tmp.u64ptr = *tmp.u64ptr;
			}

			// If destination is not 64-bit aligned...
			if (!Test_align((uint32_t)dest.u8ptr, sizeof(uint64_t))) {
80005df2:	40 07       	lddsp	r7,sp[0x0]
80005df4:	e1 d0 c0 03 	bfextu	r0,r0,0x0,0x3
80005df8:	c1 c0       	breq	80005e30 <flashc_memset64+0x184>
80005dfa:	30 0b       	mov	r11,0
80005dfc:	50 39       	stdsp	sp[0xc],r9
80005dfe:	f0 0b 00 0e 	add	lr,r8,r11
				// flash page data.
				// This is required by the hardware, even if page erase is not
				// requested, in order to be able to write successfully to erased parts
				// of flash pages that have already been written to.
				for (i = 0; i < Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)); i++) {
					flash_dword.u8[i] = *tmp.u8ptr++;
80005e02:	fa c9 ff d0 	sub	r9,sp,-48
80005e06:	1d 8e       	ld.ub	lr,lr[0x0]
80005e08:	f2 0b 0b 0e 	st.b	r9[r11],lr
				// Fill the beginning of the flash double-word buffer with the current
				// flash page data.
				// This is required by the hardware, even if page erase is not
				// requested, in order to be able to write successfully to erased parts
				// of flash pages that have already been written to.
				for (i = 0; i < Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)); i++) {
80005e0c:	2f fb       	sub	r11,-1
80005e0e:	00 3b       	cp.w	r11,r0
80005e10:	cf 71       	brne	80005dfe <flashc_memset64+0x152>
					flash_dword.u8[i] = *tmp.u8ptr++;
				}

				// Align the destination pointer with its 64-bit boundary.
				dest.u64ptr = (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
80005e12:	16 08       	add	r8,r11
				// Fill the beginning of the flash double-word buffer with the current
				// flash page data.
				// This is required by the hardware, even if page erase is not
				// requested, in order to be able to write successfully to erased parts
				// of flash pages that have already been written to.
				for (i = 0; i < Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)); i++) {
80005e14:	51 1a       	stdsp	sp[0x44],r10
80005e16:	51 08       	stdsp	sp[0x40],r8

				// Align the destination pointer with its 64-bit boundary.
				dest.u64ptr = (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));

				// If the current destination double-word is not the last one...
				if (dest.u64ptr < dest_end.u64ptr) {
80005e18:	40 39       	lddsp	r9,sp[0xc]
80005e1a:	02 3a       	cp.w	r10,r1
					// Write the flash double-word buffer to the page buffer and reinitialize it.
					*dest.u64ptr++ = flash_dword.u64;
80005e1c:	c0 a2       	brcc	80005e30 <flashc_memset64+0x184>
80005e1e:	14 98       	mov	r8,r10
80005e20:	fa ea 00 30 	ld.d	r10,sp[48]
					flash_dword.u64 = source.u64;
80005e24:	b1 2a       	st.d	r8++,r10
80005e26:	fa ea 00 04 	ld.d	r10,sp[4]
80005e2a:	51 18       	stdsp	sp[0x44],r8
80005e2c:	fa eb 00 30 	st.d	sp[48],r10
				}
			}
		}

		// Write the source data to the page buffer with 64-bit alignment.
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
80005e30:	41 18       	lddsp	r8,sp[0x44]
80005e32:	02 9e       	mov	lr,r1
80005e34:	10 1c       	sub	r12,r8
80005e36:	10 9b       	mov	r11,r8
80005e38:	a3 5c       	asr	r12,0x3
80005e3a:	18 9a       	mov	r10,r12
80005e3c:	c0 68       	rjmp	80005e48 <flashc_memset64+0x19c>
80005e3e:	d7 03       	nop
80005e40:	fa e0 00 04 	ld.d	r0,sp[4]
80005e44:	20 1a       	sub	r10,1
80005e46:	b7 20       	st.d	r11++,r0
80005e48:	58 0a       	cp.w	r10,0
80005e4a:	cf b1       	brne	80005e40 <flashc_memset64+0x194>
			*dest.u64ptr++ = source.u64;
80005e4c:	f0 0c 00 3c 	add	r12,r8,r12<<0x3
				}
			}
		}

		// Write the source data to the page buffer with 64-bit alignment.
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
80005e50:	51 1c       	stdsp	sp[0x44],r12
			*dest.u64ptr++ = source.u64;
80005e52:	1c 91       	mov	r1,lr
				}
			}
		}

		// Write the source data to the page buffer with 64-bit alignment.
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
80005e54:	40 60       	lddsp	r0,sp[0x18]
80005e56:	00 39       	cp.w	r9,r0
80005e58:	c2 13       	brcs	80005e9a <flashc_memset64+0x1ee>
80005e5a:	51 06       	stdsp	sp[0x40],r6
80005e5c:	58 02       	cp.w	r2,0
80005e5e:	c1 10       	breq	80005e80 <flashc_memset64+0x1d4>
			*dest.u64ptr++ = source.u64;
		}

		// If the current destination page has an incomplete end...
		if (incomplete_flash_page_end) {
80005e60:	fa c8 ff d0 	sub	r8,sp,-48
80005e64:	0c 99       	mov	r9,r6
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			{
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;
80005e66:	04 08       	add	r8,r2

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
80005e68:	fa ca ff c8 	sub	r10,sp,-56
80005e6c:	13 3b       	ld.ub	r11,r9++
80005e6e:	10 cb       	st.b	r8++,r11
80005e70:	14 38       	cp.w	r8,r10
80005e72:	cf d1       	brne	80005e6c <flashc_memset64+0x1c0>
{
	return flashc_memset64(dst, src | (uint64_t)src << 32, nbytes, erase);
}


volatile void *flashc_memset64(volatile void *dst, uint64_t src, size_t nbytes, bool erase)
80005e74:	40 7b       	lddsp	r11,sp[0x1c]
80005e76:	51 0b       	stdsp	sp[0x40],r11

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
						flash_dword.u8[i] = *tmp.u8ptr++;
80005e78:	fa e8 00 30 	ld.d	r8,sp[48]
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
80005e7c:	b9 28       	st.d	r12++,r8
80005e7e:	51 1c       	stdsp	sp[0x44],r12
80005e80:	41 08       	lddsp	r8,sp[0x40]
80005e82:	c0 58       	rjmp	80005e8c <flashc_memset64+0x1e0>
						flash_dword.u8[i] = *tmp.u8ptr++;

					// Write the flash double-word buffer to the page buffer.
					*dest.u64ptr++ = flash_dword.u64;
80005e84:	f2 ea 00 00 	ld.d	r10,r9[0]
80005e88:	f2 eb 00 00 	st.d	r9[0],r10
80005e8c:	10 99       	mov	r9,r8
80005e8e:	f5 d8 c0 09 	bfextu	r10,r8,0x0,0x9
				}

				// Fill the end of the page buffer with the current flash page data.
				for (; !Test_align((uint32_t)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++) {
					*tmp.u64ptr = *tmp.u64ptr;
80005e92:	2f 88       	sub	r8,-8
80005e94:	58 0a       	cp.w	r10,0
80005e96:	cf 71       	brne	80005e84 <flashc_memset64+0x1d8>
80005e98:	51 09       	stdsp	sp[0x40],r9
					// Write the flash double-word buffer to the page buffer.
					*dest.u64ptr++ = flash_dword.u64;
				}

				// Fill the end of the page buffer with the current flash page data.
				for (; !Test_align((uint32_t)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++) {
80005e9a:	41 10       	lddsp	r0,sp[0x44]
80005e9c:	30 0a       	mov	r10,0
80005e9e:	ea 1a 80 80 	orh	r10,0x8080
80005ea2:	14 30       	cp.w	r0,r10
80005ea4:	e0 8b 00 15 	brhi	80005ece <flashc_memset64+0x222>
				}
			}
		}

		// If the current flash page is in the flash array...
		if (dest.u8ptr <= AVR32_FLASHC_USER_PAGE) {
80005ea8:	40 59       	lddsp	r9,sp[0x14]
80005eaa:	58 09       	cp.w	r9,0
80005eac:	c0 60       	breq	80005eb8 <flashc_memset64+0x20c>
80005eae:	30 0b       	mov	r11,0
80005eb0:	3f fc       	mov	r12,-1
80005eb2:	cc be       	rcall	80005c48 <flashc_erase_page>
			// Erase the current page if requested and write it from the page buffer.
			if (erase) {
80005eb4:	68 08       	ld.w	r8,r4[0x0]
80005eb6:	10 45       	or	r5,r8
80005eb8:	3f fc       	mov	r12,-1
				flashc_erase_page(-1, false);
80005eba:	cd 9e       	rcall	80005c6c <flashc_write_page>
80005ebc:	68 08       	ld.w	r8,r4[0x0]
80005ebe:	10 45       	or	r5,r8
80005ec0:	06 30       	cp.w	r0,r3
				error_status |= flashc_error_status;
80005ec2:	c1 03       	brcs	80005ee2 <flashc_memset64+0x236>
80005ec4:	30 08       	mov	r8,0
			}
			flashc_write_page(-1);
80005ec6:	ea 18 80 80 	orh	r8,0x8080
80005eca:	51 18       	stdsp	sp[0x44],r8
			error_status |= flashc_error_status;
80005ecc:	c0 b8       	rjmp	80005ee2 <flashc_memset64+0x236>
80005ece:	40 58       	lddsp	r8,sp[0x14]

			// If the end of the flash array is reached, go to the User page.
			if (dest.u8ptr >= flash_array_end.u8ptr) {
80005ed0:	58 08       	cp.w	r8,0
80005ed2:	c0 50       	breq	80005edc <flashc_memset64+0x230>
				dest.u8ptr = AVR32_FLASHC_USER_PAGE;
80005ed4:	30 0c       	mov	r12,0
80005ed6:	cd be       	rcall	80005c8c <flashc_erase_user_page>
80005ed8:	68 08       	ld.w	r8,r4[0x0]
80005eda:	10 45       	or	r5,r8
80005edc:	ce 2e       	rcall	80005ca0 <flashc_write_user_page>
			}
		} else {
			// Erase the User page if requested and write it from the page buffer.
			if (erase) {
80005ede:	68 08       	ld.w	r8,r4[0x0]
80005ee0:	10 45       	or	r5,r8
80005ee2:	41 10       	lddsp	r0,sp[0x44]
				flashc_erase_user_page(false);
80005ee4:	0c 30       	cp.w	r0,r6
80005ee6:	fe 93 ff 62 	brlo	80005daa <flashc_memset64+0xfe>
				error_status |= flashc_error_status;
80005eea:	e0 68 08 74 	mov	r8,2164
			}
			flashc_write_user_page();
80005eee:	0e 9c       	mov	r12,r7
80005ef0:	91 05       	st.w	r8[0x0],r5
			error_status |= flashc_error_status;
80005ef2:	2e ed       	sub	sp,-72
80005ef4:	d8 32       	popm	r0-r7,pc
	dest_end.u16ptr = (uint16_t *)Align_down((uint32_t)dest_end.u8ptr, sizeof(uint16_t));
	dest_end.u32ptr = (uint32_t *)Align_down((uint32_t)dest_end.u16ptr, sizeof(uint32_t));
	dest_end.u64ptr = (uint64_t *)Align_down((uint32_t)dest_end.u32ptr, sizeof(uint64_t));

	// While end of destination is not reached...
	while (dest.u8ptr < dest_end.u8ptr) {
80005ef6:	d7 03       	nop

80005ef8 <flashc_memset32>:
80005ef8:	d4 21       	pushm	r4-r7,lr
80005efa:	30 0e       	mov	lr,0
80005efc:	16 96       	mov	r6,r11
			error_status |= flashc_error_status;
		}
	}

	// Update the FLASHC error status.
	flashc_error_status = error_status;
80005efe:	1c 97       	mov	r7,lr

	// Return the initial destination pointer as the standard memset function does.
	return dst;
}
80005f00:	12 98       	mov	r8,r9
			error_status |= flashc_error_status;
		}
	}

	// Update the FLASHC error status.
	flashc_error_status = error_status;
80005f02:	0c 9b       	mov	r11,r6

	// Return the initial destination pointer as the standard memset function does.
	return dst;
}
80005f04:	14 99       	mov	r9,r10
80005f06:	0e 4b       	or	r11,r7
80005f08:	0e 9a       	mov	r10,r7
80005f0a:	0c 4a       	or	r10,r6
80005f0c:	cd 0e       	rcall	80005cac <flashc_memset64>
80005f0e:	d8 22       	popm	r4-r7,pc

80005f10 <flashc_memset16>:
80005f10:	d4 01       	pushm	lr
80005f12:	f7 db d2 10 	bfins	r11,r11,0x10,0x10
80005f16:	cf 1f       	rcall	80005ef8 <flashc_memset32>
80005f18:	d8 02       	popm	pc
80005f1a:	d7 03       	nop

80005f1c <flashc_memset8>:


volatile void *flashc_memset16(volatile void *dst, uint16_t src, size_t nbytes, bool erase)
{
	return flashc_memset32(dst, src | (uint32_t)src << 16, nbytes, erase);
}
80005f1c:	d4 01       	pushm	lr
80005f1e:	f7 eb 10 8b 	or	r11,r11,r11<<0x8
}


volatile void *flashc_memset8(volatile void *dst, uint8_t src, size_t nbytes, bool erase)
{
	return flashc_memset16(dst, src | (uint16_t)src << 8, nbytes, erase);
80005f22:	5c 7b       	castu.h	r11
80005f24:	cf 6f       	rcall	80005f10 <flashc_memset16>
80005f26:	d8 02       	popm	pc

80005f28 <flashc_memcpy>:
}
80005f28:	d4 31       	pushm	r0-r7,lr
80005f2a:	20 4d       	sub	sp,16
80005f2c:	e0 6e ff ff 	mov	lr,65535
	Assert( (((uint8_t *)dst >= AVR32_FLASH)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASH + flashc_get_flash_size())))
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;
80005f30:	ea 1e 80 7f 	orh	lr,0x807f

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));
80005f34:	18 94       	mov	r4,r12
	Assert( (((uint8_t *)dst >= AVR32_FLASH)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASH + flashc_get_flash_size())))
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;
80005f36:	1c 3c       	cp.w	r12,lr
80005f38:	5f b5       	srhi	r5
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
80005f3a:	18 97       	mov	r7,r12
	Union64 flash_dword;
	uint8_t i;
	bool b_user_page;
	unsigned int error_status = 0;
	uint8_t* flash_add;
	uint8_t* dest_add=(uint8_t*)dst;
80005f3c:	18 92       	mov	r2,r12
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
80005f3e:	14 96       	mov	r6,r10
	// Return the initial destination pointer as the standard memset function does.
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
80005f40:	fa cc ff f0 	sub	r12,sp,-16
{
80005f44:	50 19       	stdsp	sp[0x4],r9
	uint8_t i;
	bool b_user_page;
	unsigned int error_status = 0;
	uint8_t* flash_add;
	uint8_t* dest_add=(uint8_t*)dst;
	const uint8_t* src_buf=(const uint8_t*)src;
80005f46:	16 90       	mov	r0,r11
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));
80005f48:	30 01       	mov	r1,0
80005f4a:	e0 14 fe 00 	andl	r4,0xfe00
80005f4e:	e0 63 08 74 	mov	r3,2164

	while (nbytes) {
80005f52:	50 0c       	stdsp	sp[0x0],r12
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
80005f54:	c4 08       	rjmp	80005fd4 <flashc_memcpy+0xac>
80005f56:	c6 9e       	rcall	80005c28 <flashc_clear_page_buffer>
		error_status |= flashc_error_status;
80005f58:	66 08       	ld.w	r8,r3[0x0]
80005f5a:	e8 cb fe 00 	sub	r11,r4,-512
80005f5e:	10 41       	or	r1,r8
80005f60:	16 9c       	mov	r12,r11
80005f62:	08 98       	mov	r8,r4

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;
80005f64:	f0 ea 00 00 	ld.d	r10,r8[0]
80005f68:	fa c9 ff f8 	sub	r9,sp,-8
80005f6c:	fa eb 00 08 	st.d	sp[8],r10
	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));

	while (nbytes) {
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;
80005f70:	10 9a       	mov	r10,r8

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;
80005f72:	18 9b       	mov	r11,r12

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
80005f74:	04 3a       	cp.w	r10,r2
80005f76:	5f 0e       	sreq	lr
80005f78:	58 06       	cp.w	r6,0
80005f7a:	5f 1c       	srne	r12
80005f7c:	fd ec 00 0c 	and	r12,lr,r12
80005f80:	30 0e       	mov	lr,0
80005f82:	fc 0c 18 00 	cp.b	r12,lr
80005f86:	c0 50       	breq	80005f90 <flashc_memcpy+0x68>
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
80005f88:	01 3c       	ld.ub	r12,r0++
	// Return the initial destination pointer as the standard memset function does.
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
80005f8a:	2f f2       	sub	r2,-1
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
					dest_add++;
					nbytes--;
80005f8c:	20 16       	sub	r6,1

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
80005f8e:	b2 8c       	st.b	r9[0x0],r12
					dest_add++;
					nbytes--;
				}
				flash_add++;
80005f90:	2f fa       	sub	r10,-1
80005f92:	2f f9       	sub	r9,-1
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
80005f94:	40 0c       	lddsp	r12,sp[0x0]
80005f96:	18 39       	cp.w	r9,r12
80005f98:	ce e1       	brne	80005f74 <flashc_memcpy+0x4c>
80005f9a:	16 9c       	mov	r12,r11
				}
				flash_add++;
			}

			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
80005f9c:	fa ea 00 08 	ld.d	r10,sp[8]
80005fa0:	b1 2a       	st.d	r8++,r10
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
80005fa2:	18 38       	cp.w	r8,r12
80005fa4:	ce 01       	brne	80005f64 <flashc_memcpy+0x3c>
80005fa6:	e8 c4 fe 00 	sub	r4,r4,-512
			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
		}

		// Erase the current page if requested and write it from the page buffer.
		if (erase) {
80005faa:	40 1a       	lddsp	r10,sp[0x4]
80005fac:	58 0a       	cp.w	r10,0
80005fae:	c0 b0       	breq	80005fc4 <flashc_memcpy+0x9c>
			(b_user_page)? flashc_erase_user_page(false) : flashc_erase_page(-1, false);
80005fb0:	58 05       	cp.w	r5,0
80005fb2:	c0 40       	breq	80005fba <flashc_memcpy+0x92>
80005fb4:	30 0c       	mov	r12,0
80005fb6:	c6 be       	rcall	80005c8c <flashc_erase_user_page>
80005fb8:	c0 48       	rjmp	80005fc0 <flashc_memcpy+0x98>
80005fba:	0a 9b       	mov	r11,r5
80005fbc:	3f fc       	mov	r12,-1
80005fbe:	c4 5e       	rcall	80005c48 <flashc_erase_page>
80005fc0:	66 08       	ld.w	r8,r3[0x0]
80005fc2:	10 41       	or	r1,r8
			error_status |= flashc_error_status;
80005fc4:	58 05       	cp.w	r5,0
80005fc6:	c0 30       	breq	80005fcc <flashc_memcpy+0xa4>
		}

		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
80005fc8:	c6 ce       	rcall	80005ca0 <flashc_write_user_page>
80005fca:	c0 38       	rjmp	80005fd0 <flashc_memcpy+0xa8>
80005fcc:	3f fc       	mov	r12,-1
80005fce:	c4 fe       	rcall	80005c6c <flashc_write_page>
80005fd0:	66 08       	ld.w	r8,r3[0x0]
80005fd2:	10 41       	or	r1,r8
80005fd4:	58 06       	cp.w	r6,0
80005fd6:	cc 01       	brne	80005f56 <flashc_memcpy+0x2e>
		error_status |= flashc_error_status;
80005fd8:	e0 68 08 74 	mov	r8,2164

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));

	while (nbytes) {
80005fdc:	0e 9c       	mov	r12,r7
80005fde:	91 01       	st.w	r8[0x0],r1
		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
		error_status |= flashc_error_status;
	}
	// Update the FLASHC error status.
	flashc_error_status = error_status;
80005fe0:	2f cd       	sub	sp,-16

	// Return the initial destination pointer as the standard memcpy function does.
	return dst;
}
80005fe2:	d8 32       	popm	r0-r7,pc

80005fe4 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80005fe4:	f8 08 16 05 	lsr	r8,r12,0x5
80005fe8:	a9 68       	lsl	r8,0x8
80005fea:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
80005fee:	58 1b       	cp.w	r11,1
80005ff0:	c0 d0       	breq	8000600a <gpio_enable_module_pin+0x26>
80005ff2:	c0 63       	brcs	80005ffe <gpio_enable_module_pin+0x1a>
80005ff4:	58 2b       	cp.w	r11,2
80005ff6:	c0 f0       	breq	80006014 <gpio_enable_module_pin+0x30>
80005ff8:	58 3b       	cp.w	r11,3
80005ffa:	c1 20       	breq	8000601e <gpio_enable_module_pin+0x3a>
80005ffc:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80005ffe:	30 19       	mov	r9,1
80006000:	f2 0c 09 49 	lsl	r9,r9,r12
80006004:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80006006:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80006008:	c1 08       	rjmp	80006028 <gpio_enable_module_pin+0x44>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000600a:	f6 0c 09 4b 	lsl	r11,r11,r12
8000600e:	91 5b       	st.w	r8[0x14],r11
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80006010:	91 ab       	st.w	r8[0x28],r11
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80006012:	c0 b8       	rjmp	80006028 <gpio_enable_module_pin+0x44>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80006014:	30 19       	mov	r9,1
80006016:	f2 0c 09 49 	lsl	r9,r9,r12
8000601a:	91 69       	st.w	r8[0x18],r9
8000601c:	c0 58       	rjmp	80006026 <gpio_enable_module_pin+0x42>
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000601e:	30 19       	mov	r9,1
80006020:	f2 0c 09 49 	lsl	r9,r9,r12
80006024:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80006026:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80006028:	30 19       	mov	r9,1
8000602a:	f2 0c 09 4c 	lsl	r12,r9,r12
8000602e:	91 2c       	st.w	r8[0x8],r12
80006030:	5e fd       	retal	0
80006032:	d7 03       	nop

80006034 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80006034:	d4 21       	pushm	r4-r7,lr
80006036:	30 07       	mov	r7,0
80006038:	18 96       	mov	r6,r12
8000603a:	16 94       	mov	r4,r11
8000603c:	0e 95       	mov	r5,r7
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
8000603e:	c0 78       	rjmp	8000604c <gpio_enable_module+0x18>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80006040:	6c 1b       	ld.w	r11,r6[0x4]
80006042:	6c 0c       	ld.w	r12,r6[0x0]
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80006044:	2f f7       	sub	r7,-1
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
80006046:	2f 86       	sub	r6,-8
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80006048:	cc ef       	rcall	80005fe4 <gpio_enable_module_pin>
8000604a:	18 45       	or	r5,r12
8000604c:	08 37       	cp.w	r7,r4
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
8000604e:	cf 93       	brcs	80006040 <gpio_enable_module+0xc>
80006050:	0a 9c       	mov	r12,r5
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
80006052:	d8 22       	popm	r4-r7,pc

80006054 <gpio_enable_gpio_pin>:
80006054:	30 18       	mov	r8,1
80006056:	f0 0c 09 48 	lsl	r8,r8,r12
8000605a:	a5 9c       	lsr	r12,0x5
 *            AVR32_PWM_3_PIN for PWM channel 3 can also be used to release
 *            module pins for GPIO.
 */
void gpio_enable_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000605c:	a9 6c       	lsl	r12,0x8
8000605e:	e0 2c f0 00 	sub	r12,61440
	
	gpio_port->oderc = 1 << (pin & 0x1F);
80006062:	f9 48 00 48 	st.w	r12[72],r8
	gpio_port->gpers = 1 << (pin & 0x1F);
80006066:	99 18       	st.w	r12[0x4],r8
}
80006068:	5e fc       	retal	r12

8000606a <gpio_get_pin_value>:
 *
 * \return The pin value.
 */
bool gpio_get_pin_value(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000606a:	f8 08 16 05 	lsr	r8,r12,0x5
8000606e:	a9 68       	lsl	r8,0x8
80006070:	e0 28 f0 00 	sub	r8,61440
	
	return (gpio_port->pvr >> (pin & 0x1F)) & 1;
80006074:	71 88       	ld.w	r8,r8[0x60]
80006076:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
8000607a:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
8000607e:	5e fc       	retal	r12

80006080 <gpio_set_gpio_pin>:
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80006080:	30 18       	mov	r8,1
80006082:	f0 0c 09 48 	lsl	r8,r8,r12
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80006086:	a5 9c       	lsr	r12,0x5
80006088:	a9 6c       	lsl	r12,0x8
8000608a:	e0 2c f0 00 	sub	r12,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
8000608e:	f9 48 00 54 	st.w	r12[84],r8
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
80006092:	f9 48 00 44 	st.w	r12[68],r8
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80006096:	99 18       	st.w	r12[0x4],r8
}
80006098:	5e fc       	retal	r12

8000609a <gpio_clr_gpio_pin>:
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
8000609a:	30 18       	mov	r8,1
8000609c:	f0 0c 09 48 	lsl	r8,r8,r12
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800060a0:	a5 9c       	lsr	r12,0x5
800060a2:	a9 6c       	lsl	r12,0x8
800060a4:	e0 2c f0 00 	sub	r12,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
800060a8:	f9 48 00 58 	st.w	r12[88],r8
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
800060ac:	f9 48 00 44 	st.w	r12[68],r8
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
800060b0:	99 18       	st.w	r12[0x4],r8
}
800060b2:	5e fc       	retal	r12

800060b4 <gpio_enable_pin_interrupt>:
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
800060b4:	30 1a       	mov	r10,1
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800060b6:	f8 08 16 05 	lsr	r8,r12,0x5

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
800060ba:	f4 0c 09 49 	lsl	r9,r10,r12
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800060be:	a9 68       	lsl	r8,0x8
800060c0:	e0 28 f0 00 	sub	r8,61440

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
800060c4:	f1 49 00 c4 	st.w	r8[196],r9
static uint32_t gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Configure the edge detector. */
	switch (mode) {
800060c8:	14 3b       	cp.w	r11,r10
800060ca:	c0 80       	breq	800060da <gpio_enable_pin_interrupt+0x26>
800060cc:	c0 43       	brcs	800060d4 <gpio_enable_pin_interrupt+0x20>
800060ce:	58 2b       	cp.w	r11,2
800060d0:	c0 f1       	brne	800060ee <gpio_enable_pin_interrupt+0x3a>
800060d2:	c0 98       	rjmp	800060e4 <gpio_enable_pin_interrupt+0x30>
	case GPIO_PIN_CHANGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
800060d4:	f1 49 00 a8 	st.w	r8[168],r9
800060d8:	c0 38       	rjmp	800060de <gpio_enable_pin_interrupt+0x2a>
		gpio_port->imr1c = 1 << (pin & 0x1F);
		break;

	case GPIO_RISING_EDGE:
		gpio_port->imr0s = 1 << (pin & 0x1F);
800060da:	f1 49 00 a4 	st.w	r8[164],r9
		gpio_port->imr1c = 1 << (pin & 0x1F);
800060de:	f1 49 00 b8 	st.w	r8[184],r9
800060e2:	c0 78       	rjmp	800060f0 <gpio_enable_pin_interrupt+0x3c>
		break;

	case GPIO_FALLING_EDGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
800060e4:	f1 49 00 a8 	st.w	r8[168],r9
		gpio_port->imr1s = 1 << (pin & 0x1F);
800060e8:	f1 49 00 b4 	st.w	r8[180],r9
800060ec:	c0 28       	rjmp	800060f0 <gpio_enable_pin_interrupt+0x3c>
800060ee:	5e fa       	retal	r10
	if (GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode)) {
		return(GPIO_INVALID_ARGUMENT);
	}

	/* Enable interrupt. */
	gpio_port->iers = 1 << (pin & 0x1F);
800060f0:	f1 49 00 94 	st.w	r8[148],r9
800060f4:	5e fd       	retal	0

800060f6 <gpio_get_pin_interrupt_flag>:
 *
 * \return The pin interrupt flag.
 */
bool gpio_get_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800060f6:	f8 08 16 05 	lsr	r8,r12,0x5
800060fa:	a9 68       	lsl	r8,0x8
800060fc:	e0 28 f0 00 	sub	r8,61440
	
	return (gpio_port->ifr >> (pin & 0x1F)) & 1;
80006100:	f0 f8 00 d0 	ld.w	r8,r8[208]
80006104:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
80006108:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
8000610c:	5e fc       	retal	r12

8000610e <gpio_clear_pin_interrupt_flag>:
	gpio_port->ifrc = 1 << (pin & 0x1F);

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
8000610e:	30 18       	mov	r8,1
80006110:	f0 0c 09 48 	lsl	r8,r8,r12
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80006114:	a5 9c       	lsr	r12,0x5
80006116:	a9 6c       	lsl	r12,0x8
80006118:	e0 2c f0 00 	sub	r12,61440
	gpio_port->ifrc = 1 << (pin & 0x1F);

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
8000611c:	f9 48 00 d8 	st.w	r12[216],r8
#endif
}
80006120:	5e fc       	retal	r12

80006122 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80006122:	c0 08       	rjmp	80006122 <_unhandled_interrupt>

80006124 <INTC_register_interrupt>:

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80006124:	f3 db c0 05 	bfextu	r9,r11,0x0,0x5
80006128:	fe c8 cc 90 	sub	r8,pc,-13168
8000612c:	a5 9b       	lsr	r11,0x5
8000612e:	f0 0b 00 38 	add	r8,r8,r11<<0x3
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80006132:	70 18       	ld.w	r8,r8[0x4]
80006134:	f0 09 09 2c 	st.w	r8[r9<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80006138:	58 0a       	cp.w	r10,0
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000613a:	c0 c1       	brne	80006152 <INTC_register_interrupt+0x2e>
8000613c:	fe 78 08 00 	mov	r8,-63488
80006140:	fe c9 d3 40 	sub	r9,pc,-11456
80006144:	fe ca d2 40 	sub	r10,pc,-11712
80006148:	f4 09 01 09 	sub	r9,r10,r9
	} else if (int_level == AVR32_INTC_INT1) {
8000614c:	f0 0b 09 29 	st.w	r8[r11<<0x2],r9
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80006150:	5e fc       	retal	r12
80006152:	58 1a       	cp.w	r10,1
80006154:	c0 91       	brne	80006166 <INTC_register_interrupt+0x42>
80006156:	fe c8 d3 56 	sub	r8,pc,-11434
8000615a:	fe c9 d2 48 	sub	r9,pc,-11704
	} else if (int_level == AVR32_INTC_INT2) {
8000615e:	f2 08 01 08 	sub	r8,r9,r8
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80006162:	bf a8       	sbr	r8,0x1e
80006164:	c1 18       	rjmp	80006186 <INTC_register_interrupt+0x62>
80006166:	fe c8 d3 66 	sub	r8,pc,-11418
8000616a:	58 2a       	cp.w	r10,2
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
8000616c:	c0 71       	brne	8000617a <INTC_register_interrupt+0x56>
8000616e:	fe c9 d2 4e 	sub	r9,pc,-11698
80006172:	f2 08 01 08 	sub	r8,r9,r8
80006176:	bf b8       	sbr	r8,0x1f
80006178:	c0 78       	rjmp	80006186 <INTC_register_interrupt+0x62>
8000617a:	fe c9 d2 4c 	sub	r9,pc,-11700
8000617e:	f2 08 01 08 	sub	r8,r9,r8
80006182:	ea 18 c0 00 	orh	r8,0xc000
80006186:	fe 79 08 00 	mov	r9,-63488
8000618a:	f2 0b 09 28 	st.w	r9[r11<<0x2],r8
8000618e:	5e fc       	retal	r12

80006190 <INTC_init_interrupts>:
80006190:	d4 21       	pushm	r4-r7,lr
80006192:	fe c8 d3 92 	sub	r8,pc,-11374
80006196:	e3 b8 00 01 	mtsr	0x4,r8
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
8000619a:	fe ce d2 96 	sub	lr,pc,-11626
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000619e:	fe c9 cd 06 	sub	r9,pc,-13050

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800061a2:	10 1e       	sub	lr,r8
800061a4:	fe cc 00 82 	sub	r12,pc,130
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
800061a8:	30 08       	mov	r8,0
800061aa:	fe 7b 08 00 	mov	r11,-63488
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
800061ae:	c0 e8       	rjmp	800061ca <INTC_init_interrupts+0x3a>
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
800061b0:	72 16       	ld.w	r6,r9[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800061b2:	ec 0a 00 26 	add	r6,r6,r10<<0x2

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800061b6:	2f fa       	sub	r10,-1
800061b8:	8d 0c       	st.w	r6[0x0],r12
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800061ba:	0e 3a       	cp.w	r10,r7
800061bc:	cf a3       	brcs	800061b0 <INTC_init_interrupts+0x20>
800061be:	f6 08 09 2e 	st.w	r11[r8<<0x2],lr
800061c2:	2f 89       	sub	r9,-8
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800061c4:	2f f8       	sub	r8,-1
800061c6:	59 28       	cp.w	r8,18
800061c8:	c0 40       	breq	800061d0 <INTC_init_interrupts+0x40>
800061ca:	30 0a       	mov	r10,0
800061cc:	72 07       	ld.w	r7,r9[0x0]
800061ce:	cf 6b       	rjmp	800061ba <INTC_init_interrupts+0x2a>
800061d0:	d8 22       	popm	r4-r7,pc
800061d2:	d7 03       	nop

800061d4 <_get_interrupt_handler>:
800061d4:	e0 68 00 83 	mov	r8,131
800061d8:	fe 79 08 00 	mov	r9,-63488
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
800061dc:	f0 0c 01 0c 	sub	r12,r8,r12
800061e0:	f2 0c 03 28 	ld.w	r8,r9[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
800061e4:	f0 ca ff c0 	sub	r10,r8,-64
800061e8:	f2 0a 03 2c 	ld.w	r12,r9[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800061ec:	58 0c       	cp.w	r12,0
800061ee:	5e 0c       	reteq	r12
		? _int_handler_table[int_grp]._int_line_handler_table[32
800061f0:	fe c9 cd 58 	sub	r9,pc,-12968
800061f4:	f8 0c 12 00 	clz	r12,r12
800061f8:	f2 08 00 38 	add	r8,r9,r8<<0x3
800061fc:	f8 0c 11 1f 	rsub	r12,r12,31
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80006200:	70 18       	ld.w	r8,r8[0x4]
80006202:	f0 0c 03 2c 	ld.w	r12,r8[r12<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80006206:	5e fc       	retal	r12

80006208 <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
80006208:	f8 c8 00 01 	sub	r8,r12,1
8000620c:	f0 0b 00 0b 	add	r11,r8,r11
80006210:	f6 0c 0d 0a 	divu	r10,r11,r12
80006214:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
80006216:	f4 c8 00 01 	sub	r8,r10,1
8000621a:	e0 48 00 fe 	cp.w	r8,254
8000621e:	e0 88 00 03 	brls	80006224 <getBaudDiv+0x1c>
80006222:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
80006224:	5c 8c       	casts.h	r12
}
80006226:	5e fc       	retal	r12

80006228 <spi_initMaster>:
	return SPI_OK;
}

spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
80006228:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
8000622a:	30 18       	mov	r8,1
	return SPI_OK;
}

spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
8000622c:	18 99       	mov	r9,r12
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
8000622e:	f7 3a 00 0d 	ld.ub	r10,r11[13]
80006232:	f0 0a 18 00 	cp.b	r10,r8
80006236:	e0 88 00 04 	brls	8000623e <spi_initMaster+0x16>
8000623a:	30 2c       	mov	r12,2
8000623c:	d8 02       	popm	pc

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
	u_avr32_spi_mr.MR.mstr = 1;
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
	u_avr32_spi_mr.MR.llb = 0;
8000623e:	30 0a       	mov	r10,0
	if (options->modfdis > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
80006240:	e0 68 00 80 	mov	r8,128
80006244:	99 08       	st.w	r12[0x0],r8

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
	u_avr32_spi_mr.MR.mstr = 1;
80006246:	30 1e       	mov	lr,1

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
80006248:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.mstr = 1;
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
8000624a:	f7 3b 00 0d 	ld.ub	r11,r11[13]
	u_avr32_spi_mr.MR.llb = 0;
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
	spi->mr = u_avr32_spi_mr.mr;
8000624e:	14 9c       	mov	r12,r10
	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
	u_avr32_spi_mr.MR.mstr = 1;
80006250:	f1 de d0 01 	bfins	r8,lr,0x0,0x1
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
80006254:	f1 db d0 81 	bfins	r8,r11,0x4,0x1
	u_avr32_spi_mr.MR.llb = 0;
80006258:	f1 da d0 e1 	bfins	r8,r10,0x7,0x1
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
8000625c:	30 fa       	mov	r10,15
8000625e:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
	spi->mr = u_avr32_spi_mr.mr;
80006262:	93 18       	st.w	r9[0x4],r8

	return SPI_OK;
}
80006264:	d8 02       	popm	pc

80006266 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
80006266:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
80006268:	30 18       	mov	r8,1
8000626a:	f0 0b 18 00 	cp.b	r11,r8
8000626e:	5f be       	srhi	lr
80006270:	f0 0a 18 00 	cp.b	r10,r8
80006274:	5f b8       	srhi	r8
80006276:	1c 48       	or	r8,lr
80006278:	c0 30       	breq	8000627e <spi_selectionMode+0x18>
8000627a:	30 2c       	mov	r12,2
8000627c:	d8 02       	popm	pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
8000627e:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
80006280:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80006284:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
80006288:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
8000628c:	99 18       	st.w	r12[0x4],r8
8000628e:	d8 0a       	popm	pc,r12=0

80006290 <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80006290:	78 19       	ld.w	r9,r12[0x4]

	return SPI_OK;
}

spi_status_t spi_selectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80006292:	18 98       	mov	r8,r12
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80006294:	ea 19 00 0f 	orh	r9,0xf
80006298:	99 19       	st.w	r12[0x4],r9

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
8000629a:	78 1c       	ld.w	r12,r12[0x4]
8000629c:	e2 1c 00 04 	andl	r12,0x4,COH
800062a0:	c1 00       	breq	800062c0 <spi_selectChip+0x30>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
800062a2:	30 e9       	mov	r9,14
800062a4:	f2 0b 18 00 	cp.b	r11,r9
800062a8:	e0 8b 00 1a 	brhi	800062dc <spi_selectChip+0x4c>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
800062ac:	70 19       	ld.w	r9,r8[0x4]
800062ae:	b1 6b       	lsl	r11,0x10
800062b0:	30 0c       	mov	r12,0
800062b2:	ea 1b ff f0 	orh	r11,0xfff0
800062b6:	e8 1b ff ff 	orl	r11,0xffff
800062ba:	12 6b       	and	r11,r9
800062bc:	91 1b       	st.w	r8[0x4],r11
800062be:	5e fc       	retal	r12
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
800062c0:	30 39       	mov	r9,3
800062c2:	f2 0b 18 00 	cp.b	r11,r9
800062c6:	e0 8b 00 0b 	brhi	800062dc <spi_selectChip+0x4c>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
800062ca:	70 19       	ld.w	r9,r8[0x4]
800062cc:	2f 0b       	sub	r11,-16
800062ce:	30 1a       	mov	r10,1
800062d0:	f4 0b 09 4b 	lsl	r11,r10,r11
800062d4:	5c db       	com	r11
800062d6:	12 6b       	and	r11,r9
800062d8:	91 1b       	st.w	r8[0x4],r11
800062da:	5e fc       	retal	r12
800062dc:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
800062de:	5e fc       	retal	r12

800062e0 <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
800062e0:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
800062e4:	c0 58       	rjmp	800062ee <spi_unselectChip+0xe>
		if (!timeout--) {
800062e6:	58 08       	cp.w	r8,0
800062e8:	c0 21       	brne	800062ec <spi_unselectChip+0xc>
800062ea:	5e ff       	retal	1
800062ec:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
800062ee:	78 49       	ld.w	r9,r12[0x10]
800062f0:	ed b9 00 09 	bld	r9,0x9
800062f4:	cf 91       	brne	800062e6 <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
800062f6:	78 18       	ld.w	r8,r12[0x4]
800062f8:	ea 18 00 0f 	orh	r8,0xf
800062fc:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
800062fe:	30 08       	mov	r8,0
80006300:	ea 18 01 00 	orh	r8,0x100
80006304:	99 08       	st.w	r12[0x0],r8
80006306:	5e fd       	retal	0

80006308 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
80006308:	d4 31       	pushm	r0-r7,lr
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
8000630a:	30 32       	mov	r2,3
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
8000630c:	16 97       	mov	r7,r11
8000630e:	18 96       	mov	r6,r12
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80006310:	f7 34 00 0c 	ld.ub	r4,r11[12]
80006314:	e4 04 18 00 	cp.b	r4,r2
80006318:	e0 8b 00 46 	brhi	800063a4 <spi_setupChipReg+0x9c>
			options->stay_act > 1 ||
8000631c:	f7 31 00 0b 	ld.ub	r1,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80006320:	30 15       	mov	r5,1
80006322:	ea 01 18 00 	cp.b	r1,r5
80006326:	e0 8b 00 3f 	brhi	800063a4 <spi_setupChipReg+0x9c>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
8000632a:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
8000632e:	30 78       	mov	r8,7
80006330:	f0 03 18 00 	cp.b	r3,r8
80006334:	e0 88 00 38 	brls	800063a4 <spi_setupChipReg+0x9c>
80006338:	31 08       	mov	r8,16
8000633a:	f0 03 18 00 	cp.b	r3,r8
8000633e:	e0 8b 00 33 	brhi	800063a4 <spi_setupChipReg+0x9c>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
80006342:	14 9b       	mov	r11,r10
80006344:	6e 1c       	ld.w	r12,r7[0x4]
80006346:	c6 1f       	rcall	80006208 <getBaudDiv>
80006348:	c2 e5       	brlt	800063a4 <spi_setupChipReg+0x9c>

	if (baudDiv < 0) {
8000634a:	08 9a       	mov	r10,r4
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
8000634c:	ec 1a 00 01 	eorl	r10,0x1
80006350:	30 08       	mov	r8,0
	if (baudDiv < 0) {
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
80006352:	a1 94       	lsr	r4,0x1
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
80006354:	f1 d4 d0 01 	bfins	r8,r4,0x0,0x1
80006358:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
8000635c:	ef 3a 00 09 	ld.ub	r10,r7[9]
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80006360:	20 83       	sub	r3,8
	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80006362:	f1 d1 d0 61 	bfins	r8,r1,0x3,0x1

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80006366:	0f 89       	ld.ub	r9,r7[0x0]
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;

	switch (options->reg) {
80006368:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
8000636c:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
80006370:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80006374:	ef 3a 00 0a 	ld.ub	r10,r7[10]
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80006378:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
8000637c:	ea 09 18 00 	cp.b	r9,r5

	switch (options->reg) {
80006380:	c0 c0       	breq	80006398 <spi_setupChipReg+0x90>
80006382:	c0 93       	brcs	80006394 <spi_setupChipReg+0x8c>
80006384:	30 2a       	mov	r10,2
80006386:	f4 09 18 00 	cp.b	r9,r10
8000638a:	c0 90       	breq	8000639c <spi_setupChipReg+0x94>
8000638c:	e4 09 18 00 	cp.b	r9,r2
80006390:	c0 a1       	brne	800063a4 <spi_setupChipReg+0x9c>
80006392:	c0 78       	rjmp	800063a0 <spi_setupChipReg+0x98>
80006394:	8d c8       	st.w	r6[0x30],r8
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
80006396:	c0 68       	rjmp	800063a2 <spi_setupChipReg+0x9a>
80006398:	8d d8       	st.w	r6[0x34],r8
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
8000639a:	c0 48       	rjmp	800063a2 <spi_setupChipReg+0x9a>
8000639c:	8d e8       	st.w	r6[0x38],r8
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
8000639e:	c0 28       	rjmp	800063a2 <spi_setupChipReg+0x9a>
800063a0:	8d f8       	st.w	r6[0x3c],r8
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
800063a2:	d8 3a       	popm	r0-r7,pc,r12=0
800063a4:	30 2c       	mov	r12,2
		break;
800063a6:	d8 32       	popm	r0-r7,pc

800063a8 <spi_enable>:
		}
	}
#endif

	return SPI_OK;
}
800063a8:	30 18       	mov	r8,1
800063aa:	99 08       	st.w	r12[0x0],r8
800063ac:	5e fc       	retal	r12

800063ae <spi_write>:
800063ae:	e0 68 3a 98 	mov	r8,15000

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
800063b2:	c0 58       	rjmp	800063bc <spi_write+0xe>
		if (!timeout--) {
800063b4:	58 08       	cp.w	r8,0
800063b6:	c0 21       	brne	800063ba <spi_write+0xc>
800063b8:	5e ff       	retal	1
800063ba:	20 18       	sub	r8,1

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
800063bc:	78 49       	ld.w	r9,r12[0x10]
800063be:	ed b9 00 01 	bld	r9,0x1
800063c2:	cf 91       	brne	800063b4 <spi_write+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
800063c4:	5c 7b       	castu.h	r11
800063c6:	99 3b       	st.w	r12[0xc],r11
800063c8:	5e fd       	retal	0

800063ca <spi_read>:
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
800063ca:	e0 68 3a 98 	mov	r8,15000
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
800063ce:	c0 58       	rjmp	800063d8 <spi_read+0xe>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
800063d0:	58 08       	cp.w	r8,0
800063d2:	c0 21       	brne	800063d6 <spi_read+0xc>
800063d4:	5e ff       	retal	1
800063d6:	20 18       	sub	r8,1

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
800063d8:	78 49       	ld.w	r9,r12[0x10]
800063da:	e2 19 02 01 	andl	r9,0x201,COH
800063de:	e0 49 02 01 	cp.w	r9,513
800063e2:	cf 71       	brne	800063d0 <spi_read+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
800063e4:	78 28       	ld.w	r8,r12[0x8]
800063e6:	30 0c       	mov	r12,0
800063e8:	b6 08       	st.h	r11[0x0],r8

	return SPI_OK;
}
800063ea:	5e fc       	retal	r12

800063ec <tc_init_waveform>:
  return 0;
}


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
800063ec:	d4 01       	pushm	lr
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
800063ee:	76 09       	ld.w	r9,r11[0x0]
800063f0:	58 29       	cp.w	r9,2
800063f2:	e0 88 00 03 	brls	800063f8 <tc_init_waveform+0xc>
800063f6:	dc 0a       	popm	pc,r12=-1
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
800063f8:	76 18       	ld.w	r8,r11[0x4]
800063fa:	a5 69       	lsl	r9,0x4
800063fc:	10 9e       	mov	lr,r8
800063fe:	e6 1e c0 00 	andh	lr,0xc000,COH
80006402:	f2 ca ff ff 	sub	r10,r9,-1
80006406:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
8000640a:	af b9       	sbr	r9,0xf
8000640c:	1c 49       	or	r9,lr
8000640e:	10 9e       	mov	lr,r8
80006410:	e6 1e 30 00 	andh	lr,0x3000,COH
80006414:	1c 49       	or	r9,lr
80006416:	10 9e       	mov	lr,r8
80006418:	e6 1e 0c 00 	andh	lr,0xc00,COH
8000641c:	1c 49       	or	r9,lr
8000641e:	10 9e       	mov	lr,r8
80006420:	e6 1e 03 00 	andh	lr,0x300,COH
80006424:	1c 49       	or	r9,lr
80006426:	10 9e       	mov	lr,r8
80006428:	e6 1e 00 c0 	andh	lr,0xc0,COH
8000642c:	1c 49       	or	r9,lr
8000642e:	10 9e       	mov	lr,r8
80006430:	e6 1e 00 30 	andh	lr,0x30,COH
80006434:	1c 49       	or	r9,lr
80006436:	10 9e       	mov	lr,r8
80006438:	e6 1e 00 0c 	andh	lr,0xc,COH
8000643c:	1c 49       	or	r9,lr
8000643e:	10 9e       	mov	lr,r8
80006440:	e6 1e 00 03 	andh	lr,0x3,COH
80006444:	1c 49       	or	r9,lr
80006446:	10 9e       	mov	lr,r8
80006448:	e2 1e 60 00 	andl	lr,0x6000,COH
8000644c:	1c 49       	or	r9,lr
8000644e:	10 9e       	mov	lr,r8
80006450:	e2 1e 10 00 	andl	lr,0x1000,COH
80006454:	1c 49       	or	r9,lr
80006456:	10 9e       	mov	lr,r8
80006458:	e2 1e 0c 00 	andl	lr,0xc00,COH
8000645c:	1c 49       	or	r9,lr
8000645e:	10 9e       	mov	lr,r8
80006460:	e2 1e 03 00 	andl	lr,0x300,COH
80006464:	1c 49       	or	r9,lr
80006466:	10 9e       	mov	lr,r8
80006468:	e2 1e 00 80 	andl	lr,0x80,COH
8000646c:	10 9b       	mov	r11,r8
8000646e:	1c 49       	or	r9,lr
80006470:	e2 1b 00 08 	andl	r11,0x8,COH
80006474:	10 9e       	mov	lr,r8
80006476:	e2 18 00 30 	andl	r8,0x30,COH
8000647a:	e2 1e 00 40 	andl	lr,0x40,COH
8000647e:	1c 49       	or	r9,lr
80006480:	f3 e8 10 08 	or	r8,r9,r8
80006484:	16 48       	or	r8,r11
80006486:	f8 0a 09 28 	st.w	r12[r10<<0x2],r8
8000648a:	d8 0a       	popm	pc,r12=0

8000648c <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
8000648c:	58 2b       	cp.w	r11,2
8000648e:	e0 88 00 03 	brls	80006494 <tc_start+0x8>
80006492:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
80006494:	a7 6b       	lsl	r11,0x6
80006496:	16 0c       	add	r12,r11
80006498:	30 58       	mov	r8,5
8000649a:	99 08       	st.w	r12[0x0],r8
8000649c:	5e fd       	retal	0

8000649e <tc_read_sr>:


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
8000649e:	58 2b       	cp.w	r11,2
800064a0:	e0 88 00 03 	brls	800064a6 <tc_read_sr+0x8>
800064a4:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  return tc->channel[channel].sr;
800064a6:	a7 6b       	lsl	r11,0x6
800064a8:	2e 0b       	sub	r11,-32
800064aa:	16 0c       	add	r12,r11
800064ac:	78 0c       	ld.w	r12,r12[0x0]
}
800064ae:	5e fc       	retal	r12

800064b0 <tc_write_rc>:


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800064b0:	58 2b       	cp.w	r11,2
800064b2:	e0 88 00 03 	brls	800064b8 <tc_write_rc+0x8>
800064b6:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
800064b8:	f6 08 15 04 	lsl	r8,r11,0x4
800064bc:	2f f8       	sub	r8,-1
800064be:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
800064c2:	ed b8 00 0f 	bld	r8,0xf
800064c6:	c0 c1       	brne	800064de <tc_write_rc+0x2e>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
800064c8:	a7 6b       	lsl	r11,0x6
800064ca:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
800064ce:	16 0c       	add	r12,r11
800064d0:	2e 4c       	sub	r12,-28
800064d2:	78 08       	ld.w	r8,r12[0x0]
800064d4:	e0 18 00 00 	andl	r8,0x0
800064d8:	f3 e8 10 08 	or	r8,r9,r8
800064dc:	99 08       	st.w	r12[0x0],r8

  return value;
800064de:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
}
800064e2:	5e fc       	retal	r12

800064e4 <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
800064e4:	d4 21       	pushm	r4-r7,lr
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
800064e6:	e1 b9 00 00 	mfsr	r9,0x0

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800064ea:	58 2b       	cp.w	r11,2
800064ec:	e0 88 00 03 	brls	800064f2 <tc_configure_interrupts+0xe>
800064f0:	dc 2a       	popm	r4-r7,pc,r12=-1
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
800064f2:	74 08       	ld.w	r8,r10[0x0]
800064f4:	10 9e       	mov	lr,r8
800064f6:	e2 1e 00 02 	andl	lr,0x2,COH
800064fa:	e2 18 00 fd 	andl	r8,0xfd,COH
800064fe:	1c 48       	or	r8,lr
80006500:	f6 0e 15 06 	lsl	lr,r11,0x6
80006504:	f8 0e 00 0e 	add	lr,r12,lr
80006508:	2d ce       	sub	lr,-36
8000650a:	9d 08       	st.w	lr[0x0],r8
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
8000650c:	ee 19 00 01 	eorh	r9,0x1
80006510:	f3 d9 c2 01 	bfextu	r9,r9,0x10,0x1
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
80006514:	c0 20       	breq	80006518 <tc_configure_interrupts+0x34>
80006516:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80006518:	74 08       	ld.w	r8,r10[0x0]
8000651a:	e0 67 00 80 	mov	r7,128
8000651e:	ed d8 c0 e1 	bfextu	r6,r8,0x7,0x1
80006522:	f9 b7 01 00 	movne	r7,0
80006526:	f5 d8 c0 01 	bfextu	r10,r8,0x0,0x1
8000652a:	ec 1a 00 01 	eorl	r10,0x1
8000652e:	ef ea 10 0a 	or	r10,r7,r10
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
80006532:	ef d8 c0 c1 	bfextu	r7,r8,0x6,0x1
80006536:	f9 b7 00 40 	moveq	r7,64
8000653a:	f9 b7 01 00 	movne	r7,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
8000653e:	0e 4a       	or	r10,r7
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
80006540:	ef d8 c0 a1 	bfextu	r7,r8,0x5,0x1
80006544:	f9 b7 00 20 	moveq	r7,32
80006548:	f9 b7 01 00 	movne	r7,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
8000654c:	0e 4a       	or	r10,r7
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
8000654e:	ef d8 c0 81 	bfextu	r7,r8,0x4,0x1
80006552:	f9 b7 00 10 	moveq	r7,16
80006556:	f9 b7 01 00 	movne	r7,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
8000655a:	0e 4a       	or	r10,r7
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
8000655c:	ef d8 c0 61 	bfextu	r7,r8,0x3,0x1
80006560:	f9 b7 00 08 	moveq	r7,8
80006564:	f9 b7 01 00 	movne	r7,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80006568:	0e 4a       	or	r10,r7
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
8000656a:	ef d8 c0 41 	bfextu	r7,r8,0x2,0x1
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
8000656e:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80006572:	58 07       	cp.w	r7,0
80006574:	f9 b7 00 04 	moveq	r7,4
80006578:	f9 b7 01 00 	movne	r7,0
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
8000657c:	58 08       	cp.w	r8,0
8000657e:	f9 b8 00 02 	moveq	r8,2
80006582:	f9 b8 01 00 	movne	r8,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80006586:	0e 4a       	or	r10,r7
80006588:	f5 e8 10 08 	or	r8,r10,r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
8000658c:	f6 0e 15 06 	lsl	lr,r11,0x6
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80006590:	a7 6b       	lsl	r11,0x6
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80006592:	2e 0e       	sub	lr,-32
80006594:	f8 0e 00 0e 	add	lr,r12,lr
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80006598:	16 0c       	add	r12,r11
8000659a:	2d 8c       	sub	r12,-40
8000659c:	99 08       	st.w	r12[0x0],r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
8000659e:	7c 08       	ld.w	r8,lr[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
800065a0:	58 09       	cp.w	r9,0
800065a2:	c0 31       	brne	800065a8 <tc_configure_interrupts+0xc4>
800065a4:	12 9c       	mov	r12,r9
800065a6:	d8 22       	popm	r4-r7,pc
800065a8:	d5 03       	csrf	0x10
800065aa:	d8 2a       	popm	r4-r7,pc,r12=0

800065ac <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
800065ac:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
800065ae:	f6 0e 15 04 	lsl	lr,r11,0x4
800065b2:	1c 3a       	cp.w	r10,lr
800065b4:	f9 be 02 10 	movhs	lr,16
800065b8:	f9 be 03 08 	movlo	lr,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
800065bc:	fc 0b 02 4b 	mul	r11,lr,r11
800065c0:	f6 08 16 01 	lsr	r8,r11,0x1
800065c4:	f0 0a 00 3a 	add	r10,r8,r10<<0x3
800065c8:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
800065cc:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
800065d0:	f2 c8 00 01 	sub	r8,r9,1
800065d4:	e0 48 ff fe 	cp.w	r8,65534
800065d8:	e0 88 00 03 	brls	800065de <usart_set_async_baudrate+0x32>
800065dc:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
800065de:	78 18       	ld.w	r8,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
800065e0:	e8 6b 00 00 	mov	r11,524288
800065e4:	e4 18 ff f7 	andh	r8,0xfff7
800065e8:	e0 18 fe cf 	andl	r8,0xfecf
800065ec:	59 0e       	cp.w	lr,16
800065ee:	f6 0e 17 10 	movne	lr,r11
800065f2:	f9 be 00 00 	moveq	lr,0
800065f6:	fd e8 10 08 	or	r8,lr,r8
800065fa:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
800065fc:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80006600:	f3 ea 11 09 	or	r9,r9,r10<<0x10
80006604:	99 89       	st.w	r12[0x20],r9
80006606:	d8 0a       	popm	pc,r12=0

80006608 <usart_write_line>:
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80006608:	c0 e8       	rjmp	80006624 <usart_write_line+0x1c>
8000660a:	e0 68 27 10 	mov	r8,10000
{
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
8000660e:	20 18       	sub	r8,1
80006610:	5b f8       	cp.w	r8,-1
80006612:	c0 80       	breq	80006622 <usart_write_line+0x1a>
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80006614:	78 59       	ld.w	r9,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80006616:	ed b9 00 01 	bld	r9,0x1
8000661a:	cf a1       	brne	8000660e <usart_write_line+0x6>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
8000661c:	f5 da c0 09 	bfextu	r10,r10,0x0,0x9
80006620:	99 7a       	st.w	r12[0x1c],r10


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
    usart_putchar(usart, *string++);
80006622:	2f fb       	sub	r11,-1
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80006624:	17 8a       	ld.ub	r10,r11[0x0]
80006626:	58 0a       	cp.w	r10,0
80006628:	cf 11       	brne	8000660a <usart_write_line+0x2>
    usart_putchar(usart, *string++);
}
8000662a:	5e fc       	retal	r12

8000662c <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
8000662c:	e1 b8 00 00 	mfsr	r8,0x0
80006630:	ee 18 00 01 	eorh	r8,0x1
80006634:	f1 d8 c2 01 	bfextu	r8,r8,0x10,0x1

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80006638:	c0 20       	breq	8000663c <usart_reset+0x10>
8000663a:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
8000663c:	3f f9       	mov	r9,-1
8000663e:	99 39       	st.w	r12[0xc],r9
  usart->csr;
80006640:	78 59       	ld.w	r9,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80006642:	58 08       	cp.w	r8,0
80006644:	c0 20       	breq	80006648 <usart_reset+0x1c>
80006646:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80006648:	30 08       	mov	r8,0
8000664a:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
8000664c:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
8000664e:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80006650:	ea 68 61 0c 	mov	r8,680204
80006654:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80006656:	5e fc       	retal	r12

80006658 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80006658:	d4 21       	pushm	r4-r7,lr
8000665a:	20 1d       	sub	sp,4
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8000665c:	50 0a       	stdsp	sp[0x0],r10
              AVR32_USART_CR_RTSDIS_MASK;
}


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8000665e:	16 96       	mov	r6,r11
80006660:	18 97       	mov	r7,r12
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80006662:	ce 5f       	rcall	8000662c <usart_reset>
80006664:	40 0a       	lddsp	r10,sp[0x0]

  // Check input values.
  if (!opt || // Null pointer.
80006666:	58 06       	cp.w	r6,0
80006668:	c5 40       	breq	80006710 <usart_init_rs232+0xb8>
8000666a:	0d c8       	ld.ub	r8,r6[0x4]
      opt->charlength < 5 || opt->charlength > 9 ||
8000666c:	30 49       	mov	r9,4
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000666e:	f2 08 18 00 	cp.b	r8,r9
80006672:	e0 88 00 4f 	brls	80006710 <usart_init_rs232+0xb8>
80006676:	30 95       	mov	r5,9
80006678:	ea 08 18 00 	cp.b	r8,r5
8000667c:	e0 8b 00 4a 	brhi	80006710 <usart_init_rs232+0xb8>
80006680:	0d d9       	ld.ub	r9,r6[0x5]
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80006682:	30 78       	mov	r8,7
80006684:	f0 09 18 00 	cp.b	r9,r8
80006688:	e0 8b 00 44 	brhi	80006710 <usart_init_rs232+0xb8>
8000668c:	8c 39       	ld.sh	r9,r6[0x6]
      opt->stopbits > 2 + 255 ||
8000668e:	e0 68 01 01 	mov	r8,257
80006692:	f0 09 19 00 	cp.h	r9,r8
80006696:	e0 8b 00 3d 	brhi	80006710 <usart_init_rs232+0xb8>
8000669a:	ed 39 00 08 	ld.ub	r9,r6[8]
      opt->channelmode > 3 ||
8000669e:	30 38       	mov	r8,3
800066a0:	f0 09 18 00 	cp.b	r9,r8
800066a4:	e0 8b 00 36 	brhi	80006710 <usart_init_rs232+0xb8>
800066a8:	6c 0b       	ld.w	r11,r6[0x0]
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
800066aa:	0e 9c       	mov	r12,r7
800066ac:	c8 0f       	rcall	800065ac <usart_set_async_baudrate>
800066ae:	58 1c       	cp.w	r12,1
800066b0:	c3 00       	breq	80006710 <usart_init_rs232+0xb8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800066b2:	0d c8       	ld.ub	r8,r6[0x4]
800066b4:	ea 08 18 00 	cp.b	r8,r5
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
800066b8:	c0 41       	brne	800066c0 <usart_init_rs232+0x68>
800066ba:	6e 18       	ld.w	r8,r7[0x4]
800066bc:	b1 b8       	sbr	r8,0x11
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
800066be:	c0 58       	rjmp	800066c8 <usart_init_rs232+0x70>
800066c0:	20 58       	sub	r8,5
800066c2:	6e 19       	ld.w	r9,r7[0x4]
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
800066c4:	f3 e8 10 68 	or	r8,r9,r8<<0x6
800066c8:	8f 18       	st.w	r7[0x4],r8
800066ca:	6e 19       	ld.w	r9,r7[0x4]
800066cc:	ed 3a 00 08 	ld.ub	r10,r6[8]
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
800066d0:	0d d8       	ld.ub	r8,r6[0x5]
800066d2:	a9 78       	lsl	r8,0x9
800066d4:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
800066d8:	12 48       	or	r8,r9
800066da:	8f 18       	st.w	r7[0x4],r8
800066dc:	30 29       	mov	r9,2
800066de:	8c 38       	ld.sh	r8,r6[0x6]
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
800066e0:	f2 08 19 00 	cp.h	r8,r9
800066e4:	e0 88 00 09 	brls	800066f6 <usart_init_rs232+0x9e>
800066e8:	6e 18       	ld.w	r8,r7[0x4]
800066ea:	ad b8       	sbr	r8,0xd
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
800066ec:	8f 18       	st.w	r7[0x4],r8
800066ee:	8c b8       	ld.uh	r8,r6[0x6]
800066f0:	20 28       	sub	r8,2
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
800066f2:	8f a8       	st.w	r7[0x28],r8
800066f4:	c0 68       	rjmp	80006700 <usart_init_rs232+0xa8>
800066f6:	6e 19       	ld.w	r9,r7[0x4]
800066f8:	5c 78       	castu.h	r8
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
800066fa:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
800066fe:	8f 18       	st.w	r7[0x4],r8
80006700:	6e 18       	ld.w	r8,r7[0x4]
80006702:	e0 18 ff f0 	andl	r8,0xfff0

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80006706:	8f 18       	st.w	r7[0x4],r8
80006708:	30 0c       	mov	r12,0
8000670a:	35 08       	mov	r8,80
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8000670c:	8f 08       	st.w	r7[0x0],r8
8000670e:	c0 28       	rjmp	80006712 <usart_init_rs232+0xba>
80006710:	30 1c       	mov	r12,1
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80006712:	2f fd       	sub	sp,-4
80006714:	d8 22       	popm	r4-r7,pc
}
80006716:	d7 03       	nop

80006718 <uhd_get_speed>:
	cpu_irq_restore(flags);
}

uhd_speed_t uhd_get_speed(void)
{
	switch (uhd_get_speed_mode()) {
80006718:	fe 68 08 04 	mov	r8,-129020
8000671c:	70 08       	ld.w	r8,r8[0x0]
8000671e:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
80006722:	58 38       	cp.w	r8,3
80006724:	c0 21       	brne	80006728 <uhd_get_speed+0x10>
80006726:	5e fd       	retal	0
80006728:	fe c9 d2 00 	sub	r9,pc,-11776
8000672c:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]

	default:
		Assert(false);
		return UHD_SPEED_LOW;
	}
}
80006730:	5e fc       	retal	r12
80006732:	d7 03       	nop

80006734 <uhd_send_reset>:
	return uhd_get_microsof_number();
}

void uhd_send_reset(uhd_callback_reset_t callback)
{
	uhd_reset_callback = callback;
80006734:	e0 69 09 20 	mov	r9,2336
	uhd_start_reset();
80006738:	93 0c       	st.w	r9[0x0],r12
8000673a:	fe 68 04 00 	mov	r8,-130048
8000673e:	70 09       	ld.w	r9,r8[0x0]
80006740:	a9 b9       	sbr	r9,0x9
}
80006742:	91 09       	st.w	r8[0x0],r9
80006744:	5e fc       	retal	r12
80006746:	d7 03       	nop

80006748 <uhd_suspend>:

void uhd_suspend(void)
{
80006748:	d4 01       	pushm	lr
	if (uhd_ctrl_request_timeout) {
8000674a:	e0 68 3f bc 	mov	r8,16316
8000674e:	90 08       	ld.sh	r8,r8[0x0]
80006750:	58 08       	cp.w	r8,0
		// Delay suspend after setup requests
		uhd_b_suspend_requested = true;
80006752:	c0 50       	breq	8000675c <uhd_suspend+0x14>
80006754:	30 19       	mov	r9,1
80006756:	e0 68 09 9f 	mov	r8,2463
		return;
8000675a:	c1 d8       	rjmp	80006794 <uhd_suspend+0x4c>
8000675c:	fe 69 05 c4 	mov	r9,-129596
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
		uhd_freeze_pipe(pipe);
80006760:	10 9a       	mov	r10,r8
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80006762:	e2 6c 00 00 	mov	r12,131072
		uhd_freeze_pipe(pipe);
80006766:	72 0b       	ld.w	r11,r9[0x0]
80006768:	93 cc       	st.w	r9[0x30],r12
{
	uhd_reset_callback = callback;
	uhd_start_reset();
}

void uhd_suspend(void)
8000676a:	f2 ce ff d0 	sub	lr,r9,-48
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
8000676e:	2f f8       	sub	r8,-1
		uhd_freeze_pipe(pipe);
80006770:	ee 1b 00 02 	eorh	r11,0x2
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80006774:	2f c9       	sub	r9,-4
80006776:	f7 db c2 21 	bfextu	r11,r11,0x11,0x1
8000677a:	f6 08 09 4b 	lsl	r11,r11,r8
8000677e:	f7 ea 10 0a 	or	r10,r11,r10
		uhd_b_suspend_requested = true;
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
80006782:	5c 5a       	castu.b	r10
80006784:	58 68       	cp.w	r8,6
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
		uhd_freeze_pipe(pipe);
	}
	// Wait three SOFs before entering in suspend state
	uhd_suspend_start = 3;
80006786:	cf 01       	brne	80006766 <uhd_suspend+0x1e>
		uhd_b_suspend_requested = true;
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
80006788:	e0 68 09 9d 	mov	r8,2461
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
		uhd_freeze_pipe(pipe);
	}
	// Wait three SOFs before entering in suspend state
	uhd_suspend_start = 3;
8000678c:	30 39       	mov	r9,3
8000678e:	b0 8a       	st.b	r8[0x0],r10
80006790:	e0 68 09 9c 	mov	r8,2460
80006794:	b0 89       	st.b	r8[0x0],r9
80006796:	d8 02       	popm	pc

80006798 <uhd_ctrl_phase_data_out>:
80006798:	d4 21       	pushm	r4-r7,lr
8000679a:	e0 68 3f b0 	mov	r8,16304
8000679e:	e0 6b 3f ac 	mov	r11,16300
	uint8_t *ptr_ep_data;
	uint8_t ep_ctrl_size;

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_OUT;

	if (uhd_ctrl_nb_trans == uhd_ctrl_request_first->req.wLength) {
800067a2:	70 0a       	ld.w	r10,r8[0x0]
static void uhd_ctrl_phase_data_out(void)
{
	uint8_t *ptr_ep_data;
	uint8_t ep_ctrl_size;

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_OUT;
800067a4:	30 19       	mov	r9,1

	if (uhd_ctrl_nb_trans == uhd_ctrl_request_first->req.wLength) {
800067a6:	e0 68 3f b4 	mov	r8,16308
800067aa:	97 09       	st.w	r11[0x0],r9
800067ac:	90 0c       	ld.sh	r12,r8[0x0]
800067ae:	15 fe       	ld.ub	lr,r10[0x7]
800067b0:	f5 38 00 08 	ld.ub	r8,r10[8]
800067b4:	f1 ee 10 88 	or	r8,r8,lr<<0x8
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_IN);
800067b8:	f0 0c 19 00 	cp.h	r12,r8
800067bc:	c1 91       	brne	800067ee <uhd_ctrl_phase_data_out+0x56>
800067be:	fe 6a 05 00 	mov	r10,-129792
800067c2:	74 08       	ld.w	r8,r10[0x0]
800067c4:	e0 18 fc ff 	andl	r8,0xfcff
	uhd_ack_in_received(0);
800067c8:	a9 a8       	sbr	r8,0x8
800067ca:	95 08       	st.w	r10[0x0],r8
	uhd_ack_short_packet(0);
800067cc:	fe 68 05 60 	mov	r8,-129696
800067d0:	91 09       	st.w	r8[0x0],r9
	uhd_enable_in_received_interrupt(0);
800067d2:	e0 6a 00 80 	mov	r10,128
800067d6:	91 0a       	st.w	r8[0x0],r10
	uhd_ack_fifocon(0);
800067d8:	fe 68 05 f0 	mov	r8,-129552
800067dc:	91 09       	st.w	r8[0x0],r9
800067de:	e0 69 40 00 	mov	r9,16384
 * \internal
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
800067e2:	fe 68 06 20 	mov	r8,-129504
800067e6:	91 09       	st.w	r8[0x0],r9
		// End of DATA phase
		uhd_ctrl_phase_zlp_in();
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
800067e8:	30 39       	mov	r9,3
800067ea:	97 09       	st.w	r11[0x0],r9
800067ec:	c7 a8       	rjmp	800068e0 <uhd_ctrl_phase_data_out+0x148>
800067ee:	f5 09 00 10 	ld.sh	r9,r10[16]
800067f2:	30 08       	mov	r8,0
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
				|| !uhd_ctrl_request_first->callback_run(
800067f4:	f0 09 19 00 	cp.h	r9,r8
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
800067f8:	c2 91       	brne	8000684a <uhd_ctrl_phase_data_out+0xb2>
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
800067fa:	74 58       	ld.w	r8,r10[0x14]
800067fc:	58 08       	cp.w	r8,0
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
800067fe:	c0 b0       	breq	80006814 <uhd_ctrl_phase_data_out+0x7c>
80006800:	fe 69 04 24 	mov	r9,-130012
80006804:	f4 cb ff f4 	sub	r11,r10,-12
80006808:	72 0c       	ld.w	r12,r9[0x0]
8000680a:	2f 0a       	sub	r10,-16
8000680c:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_IN);
80006810:	5d 18       	icall	r8
80006812:	c1 c1       	brne	8000684a <uhd_ctrl_phase_data_out+0xb2>
80006814:	fe 69 05 00 	mov	r9,-129792
80006818:	72 08       	ld.w	r8,r9[0x0]
8000681a:	e0 18 fc ff 	andl	r8,0xfcff
	uhd_ack_in_received(0);
8000681e:	a9 a8       	sbr	r8,0x8
80006820:	93 08       	st.w	r9[0x0],r8
80006822:	fe 69 05 60 	mov	r9,-129696
	uhd_ack_short_packet(0);
80006826:	30 18       	mov	r8,1
80006828:	93 08       	st.w	r9[0x0],r8
	uhd_enable_in_received_interrupt(0);
8000682a:	e0 6a 00 80 	mov	r10,128
8000682e:	93 0a       	st.w	r9[0x0],r10
	uhd_ack_fifocon(0);
80006830:	fe 69 05 f0 	mov	r9,-129552
80006834:	93 08       	st.w	r9[0x0],r8
80006836:	e0 69 40 00 	mov	r9,16384
 * \internal
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
8000683a:	fe 68 06 20 	mov	r8,-129504
8000683e:	91 09       	st.w	r8[0x0],r9
80006840:	30 3a       	mov	r10,3
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
80006842:	e0 69 3f ac 	mov	r9,16300
80006846:	93 0a       	st.w	r9[0x0],r10
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
80006848:	c4 c8       	rjmp	800068e0 <uhd_ctrl_phase_data_out+0x148>
8000684a:	fe 69 05 00 	mov	r9,-129792
8000684e:	72 06       	ld.w	r6,r9[0x0]
80006850:	72 08       	ld.w	r8,r9[0x0]
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
80006852:	e0 18 fc ff 	andl	r8,0xfcff
80006856:	a9 b8       	sbr	r8,0x9
80006858:	93 08       	st.w	r9[0x0],r8
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
8000685a:	30 88       	mov	r8,8
8000685c:	30 29       	mov	r9,2
8000685e:	ed d6 c0 83 	bfextu	r6,r6,0x4,0x3
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
80006862:	30 0a       	mov	r10,0

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
80006864:	ea 1a d0 00 	orh	r10,0xd000
	ep_ctrl_size = uhd_get_pipe_size(0);
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
80006868:	f0 06 09 46 	lsl	r6,r8,r6
8000686c:	e0 6e 3f b0 	mov	lr,16304
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
80006870:	fe 68 05 60 	mov	r8,-129696
80006874:	5c 56       	castu.b	r6
			&& ep_ctrl_size && uhd_ctrl_request_first->payload_size) {
		*ptr_ep_data++ = *uhd_ctrl_request_first->payload++;
80006876:	91 09       	st.w	r8[0x0],r9
80006878:	30 0c       	mov	r12,0
8000687a:	e0 69 3f b4 	mov	r9,16308
		uhd_ctrl_nb_trans++;
8000687e:	30 07       	mov	r7,0
80006880:	c0 e8       	rjmp	8000689c <uhd_ctrl_phase_data_out+0x104>
80006882:	70 3b       	ld.w	r11,r8[0xc]
		ep_ctrl_size--;
		uhd_ctrl_request_first->payload_size--;
80006884:	17 35       	ld.ub	r5,r11++
80006886:	14 c5       	st.b	r10++,r5
80006888:	91 3b       	st.w	r8[0xc],r11
8000688a:	92 08       	ld.sh	r8,r9[0x0]
8000688c:	2f f8       	sub	r8,-1
8000688e:	b2 08       	st.h	r9[0x0],r8

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
80006890:	7c 08       	ld.w	r8,lr[0x0]
80006892:	f1 0b 00 10 	ld.sh	r11,r8[16]
80006896:	20 1b       	sub	r11,1
80006898:	f1 5b 00 10 	st.h	r8[16],r11
8000689c:	92 05       	ld.sh	r5,r9[0x0]
8000689e:	7c 08       	ld.w	r8,lr[0x0]
800068a0:	11 f4       	ld.ub	r4,r8[0x7]
800068a2:	f1 3b 00 08 	ld.ub	r11,r8[8]
800068a6:	f7 e4 10 8b 	or	r11,r11,r4<<0x8
800068aa:	f6 05 19 00 	cp.h	r5,r11
800068ae:	5f 3b       	srlo	r11
800068b0:	ec 0a 01 05 	sub	r5,r6,r10
800068b4:	f8 05 18 00 	cp.b	r5,r12
			&& ep_ctrl_size && uhd_ctrl_request_first->payload_size) {
800068b8:	5f 15       	srne	r5
800068ba:	eb eb 00 0b 	and	r11,r5,r11
800068be:	f8 0b 18 00 	cp.b	r11,r12
		*ptr_ep_data++ = *uhd_ctrl_request_first->payload++;
		uhd_ctrl_nb_trans++;
		ep_ctrl_size--;
		uhd_ctrl_request_first->payload_size--;
	}
	uhd_enable_out_ready_interrupt(0);
800068c2:	c0 60       	breq	800068ce <uhd_ctrl_phase_data_out+0x136>
800068c4:	f1 0b 00 10 	ld.sh	r11,r8[16]
800068c8:	ee 0b 19 00 	cp.h	r11,r7
	uhd_ack_fifocon(0);
800068cc:	cd b1       	brne	80006882 <uhd_ctrl_phase_data_out+0xea>
800068ce:	30 29       	mov	r9,2
800068d0:	fe 68 05 f0 	mov	r8,-129552
	uhd_unfreeze_pipe(0);
800068d4:	91 09       	st.w	r8[0x0],r9
800068d6:	fe 68 06 20 	mov	r8,-129504
800068da:	e0 69 40 00 	mov	r9,16384
800068de:	91 09       	st.w	r8[0x0],r9
800068e0:	e2 69 00 00 	mov	r9,131072
800068e4:	91 09       	st.w	r8[0x0],r9
800068e6:	d8 22       	popm	r4-r7,pc

800068e8 <uhd_get_pipe>:
 * \param endp  Endpoint number
 *
 * \return Pipe number
 */
static uint8_t uhd_get_pipe(usb_add_t add, usb_ep_t endp)
{
800068e8:	d4 31       	pushm	r0-r7,lr
800068ea:	fe 6a 05 00 	mov	r10,-129792
800068ee:	18 98       	mov	r8,r12
800068f0:	30 09       	mov	r9,0
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
800068f2:	fe 64 00 00 	mov	r4,-131072
800068f6:	30 15       	mov	r5,1
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
800068f8:	37 f6       	mov	r6,127
			continue;
		}
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
800068fa:	e0 67 00 80 	mov	r7,128
{
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
800068fe:	e8 f2 04 1c 	ld.w	r2,r4[1052]
 * \param endp  Endpoint number
 *
 * \return Pipe number
 */
static uint8_t uhd_get_pipe(usb_add_t add, usb_ep_t endp)
{
80006902:	f9 d9 c0 08 	bfextu	r12,r9,0x0,0x8
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80006906:	ea 09 09 41 	lsl	r1,r5,r9
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
8000690a:	18 9e       	mov	lr,r12
			continue;
		}
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
8000690c:	f8 c3 ff ff 	sub	r3,r12,-1
	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80006910:	e2 1e 00 fc 	andl	lr,0xfc,COH
{
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80006914:	e3 e2 00 02 	and	r2,r1,r2
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80006918:	e0 3e fb dc 	sub	lr,130012
{
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
8000691c:	58 02       	cp.w	r2,0
8000691e:	c1 d0       	breq	80006958 <uhd_get_pipe+0x70>
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80006920:	7c 02       	ld.w	r2,lr[0x0]
80006922:	fd d9 c0 02 	bfextu	lr,r9,0x0,0x2
80006926:	a3 7e       	lsl	lr,0x3
80006928:	ec 0e 09 4e 	lsl	lr,r6,lr
8000692c:	1c 62       	and	r2,lr
8000692e:	5c 9e       	brev	lr
80006930:	fc 0e 12 00 	clz	lr,lr
80006934:	e4 0e 0a 4e 	lsr	lr,r2,lr
80006938:	1c 38       	cp.w	r8,lr
8000693a:	c0 f1       	brne	80006958 <uhd_get_pipe+0x70>
			continue;
		}
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
8000693c:	74 02       	ld.w	r2,r10[0x0]
8000693e:	74 0e       	ld.w	lr,r10[0x0]
80006940:	e5 d2 c2 04 	bfextu	r2,r2,0x10,0x4
80006944:	fd de c1 02 	bfextu	lr,lr,0x8,0x2
80006948:	58 1e       	cp.w	lr,1
8000694a:	ee 0e 17 00 	moveq	lr,r7
8000694e:	f9 be 01 00 	movne	lr,0
80006952:	04 4e       	or	lr,r2
80006954:	1c 3b       	cp.w	r11,lr
80006956:	c0 70       	breq	80006964 <uhd_get_pipe+0x7c>
80006958:	f9 d3 c0 08 	bfextu	r12,r3,0x0,0x8
8000695c:	2f f9       	sub	r9,-1
8000695e:	2f ca       	sub	r10,-4
static uint8_t uhd_get_pipe(usb_add_t add, usb_ep_t endp)
{
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
80006960:	58 79       	cp.w	r9,7
80006962:	cc e1       	brne	800068fe <uhd_get_pipe+0x16>
			continue;
		}
		break;
	}
	return pipe;
}
80006964:	d8 32       	popm	r0-r7,pc
80006966:	d7 03       	nop

80006968 <uhd_pipe_finish_job>:
 *
 * \param pipe   Pipe number
 * \param status Status of the transfer
 */
static void uhd_pipe_finish_job(uint8_t pipe, uhd_trans_status_t status)
{
80006968:	d4 21       	pushm	r4-r7,lr
	uhd_pipe_job_t *ptr_job;

	// Get job corresponding at endpoint
	ptr_job = &uhd_pipe_job[pipe - 1];
8000696a:	e0 68 09 24 	mov	r8,2340
8000696e:	f8 c9 00 01 	sub	r9,r12,1
80006972:	16 9a       	mov	r10,r11
80006974:	f2 09 00 29 	add	r9,r9,r9<<0x2
80006978:	f0 09 00 29 	add	r9,r8,r9<<0x2
	if (ptr_job->busy == false) {
8000697c:	72 08       	ld.w	r8,r9[0x0]
8000697e:	58 08       	cp.w	r8,0
		return; // No job running
	}
	ptr_job->busy = false;
80006980:	c2 f4       	brge	800069de <uhd_pipe_finish_job+0x76>
80006982:	30 0b       	mov	r11,0
80006984:	f1 db d3 e1 	bfins	r8,r11,0x1f,0x1
	if (NULL == ptr_job->call_end) {
80006988:	93 08       	st.w	r9[0x0],r8
8000698a:	72 48       	ld.w	r8,r9[0x10]
8000698c:	58 08       	cp.w	r8,0
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
			uhd_get_pipe_endpoint_address(pipe),
8000698e:	c2 80       	breq	800069de <uhd_pipe_finish_job+0x76>
80006990:	f8 0e 15 02 	lsl	lr,r12,0x2
80006994:	e0 3e fb 00 	sub	lr,129792
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_end) {
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
80006998:	ef dc c0 02 	bfextu	r7,r12,0x0,0x2
8000699c:	7c 06       	ld.w	r6,lr[0x0]
8000699e:	e2 1c 03 fc 	andl	r12,0x3fc,COH
800069a2:	7c 0b       	ld.w	r11,lr[0x0]
800069a4:	e0 3c fb dc 	sub	r12,130012
800069a8:	fd d6 c2 04 	bfextu	lr,r6,0x10,0x4
800069ac:	a3 77       	lsl	r7,0x3
800069ae:	f7 db c1 02 	bfextu	r11,r11,0x8,0x2
800069b2:	e0 66 00 80 	mov	r6,128
800069b6:	58 1b       	cp.w	r11,1
800069b8:	ec 0b 17 00 	moveq	r11,r6
800069bc:	f9 bb 01 00 	movne	r11,0
800069c0:	1c 4b       	or	r11,lr
800069c2:	78 0e       	ld.w	lr,r12[0x0]
800069c4:	37 fc       	mov	r12,127
800069c6:	f8 07 09 4c 	lsl	r12,r12,r7
800069ca:	f9 ee 00 0e 	and	lr,r12,lr
800069ce:	72 39       	ld.w	r9,r9[0xc]
800069d0:	5c 9c       	brev	r12
800069d2:	f8 0c 12 00 	clz	r12,r12
800069d6:	fc 0c 0a 4c 	lsr	r12,lr,r12
800069da:	5c 5c       	castu.b	r12
800069dc:	5d 18       	icall	r8
800069de:	d8 22       	popm	r4-r7,pc

800069e0 <uhd_ep_abort_pipe>:
800069e0:	d4 01       	pushm	lr
800069e2:	fe 68 00 00 	mov	r8,-131072
 * \param status Reason of abort
 */
static void uhd_ep_abort_pipe(uint8_t pipe, uhd_trans_status_t status)
{
	// Stop transfer
	uhd_reset_pipe(pipe);
800069e6:	e0 7a 00 00 	mov	r10,65536
800069ea:	f0 fe 04 1c 	ld.w	lr,r8[1052]
800069ee:	f4 0c 09 4a 	lsl	r10,r10,r12
800069f2:	f5 ee 10 0e 	or	lr,r10,lr
800069f6:	5c da       	com	r10
800069f8:	f1 4e 04 1c 	st.w	r8[1052],lr
800069fc:	f0 fe 04 1c 	ld.w	lr,r8[1052]
80006a00:	1c 6a       	and	r10,lr
80006a02:	f1 4a 04 1c 	st.w	r8[1052],r10

	// Autoswitch bank and interrupts has been reseted, then re-enable it
	uhd_enable_pipe_bank_autoswitch(pipe);
80006a06:	f8 08 15 02 	lsl	r8,r12,0x2
80006a0a:	fe 6a 05 00 	mov	r10,-129792
80006a0e:	f0 0a 00 0e 	add	lr,r8,r10
80006a12:	7c 0a       	ld.w	r10,lr[0x0]
80006a14:	ab aa       	sbr	r10,0xa
80006a16:	9d 0a       	st.w	lr[0x0],r10
	uhd_enable_stall_interrupt(pipe);
80006a18:	fe 6e 05 f0 	mov	lr,-129552
80006a1c:	f0 0e 00 0a 	add	r10,r8,lr
80006a20:	34 0e       	mov	lr,64
80006a22:	95 0e       	st.w	r10[0x0],lr
	uhd_enable_pipe_error_interrupt(pipe);

	uhd_disable_out_ready_interrupt(pipe);
80006a24:	e0 38 f9 e0 	sub	r8,129504
	uhd_reset_pipe(pipe);

	// Autoswitch bank and interrupts has been reseted, then re-enable it
	uhd_enable_pipe_bank_autoswitch(pipe);
	uhd_enable_stall_interrupt(pipe);
	uhd_enable_pipe_error_interrupt(pipe);
80006a28:	30 8e       	mov	lr,8
80006a2a:	95 0e       	st.w	r10[0x0],lr

	uhd_disable_out_ready_interrupt(pipe);
	uhd_pipe_dma_set_control(pipe, 0);
80006a2c:	30 09       	mov	r9,0
	// Autoswitch bank and interrupts has been reseted, then re-enable it
	uhd_enable_pipe_bank_autoswitch(pipe);
	uhd_enable_stall_interrupt(pipe);
	uhd_enable_pipe_error_interrupt(pipe);

	uhd_disable_out_ready_interrupt(pipe);
80006a2e:	30 2a       	mov	r10,2
80006a30:	91 0a       	st.w	r8[0x0],r10
	uhd_pipe_dma_set_control(pipe, 0);
80006a32:	f8 08 15 04 	lsl	r8,r12,0x4
80006a36:	e0 38 f9 00 	sub	r8,129280
80006a3a:	91 29       	st.w	r8[0x8],r9
	uhd_pipe_finish_job(pipe, status);
80006a3c:	c9 6f       	rcall	80006968 <uhd_pipe_finish_job>
80006a3e:	d8 02       	popm	pc

80006a40 <uhd_pipe_trans_complet>:
}
80006a40:	d4 31       	pushm	r0-r7,lr
80006a42:	e0 69 09 24 	mov	r9,2340
80006a46:	f8 c8 00 01 	sub	r8,r12,1
	iram_size_t max_trans;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &uhd_pipe_job[pipe - 1];
80006a4a:	f0 08 00 28 	add	r8,r8,r8<<0x2
80006a4e:	f2 08 00 28 	add	r8,r9,r8<<0x2

	if (!ptr_job->busy) {
80006a52:	70 09       	ld.w	r9,r8[0x0]
80006a54:	58 09       	cp.w	r9,0
80006a56:	e0 84 00 cb 	brge	80006bec <uhd_pipe_trans_complet+0x1ac>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
80006a5a:	70 3e       	ld.w	lr,r8[0xc]
80006a5c:	70 2a       	ld.w	r10,r8[0x8]
80006a5e:	14 3e       	cp.w	lr,r10
80006a60:	e0 80 00 9e 	breq	80006b9c <uhd_pipe_trans_complet+0x15c>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
		max_trans = UHD_PIPE_MAX_TRANS;
		if (uhd_is_pipe_in(pipe)) {
80006a64:	fe 6b 05 00 	mov	r11,-129792
80006a68:	f8 07 15 02 	lsl	r7,r12,0x2
80006a6c:	ee 0b 00 09 	add	r9,r7,r11
80006a70:	72 0b       	ld.w	r11,r9[0x0]
80006a72:	f7 db c1 02 	bfextu	r11,r11,0x8,0x2
80006a76:	58 1b       	cp.w	r11,1
			// 256 is the maximum of IN requests via UPINRQ
			if ((256L*uhd_get_pipe_size(pipe))<UHD_PIPE_MAX_TRANS) {
80006a78:	c1 51       	brne	80006aa2 <uhd_pipe_trans_complet+0x62>
80006a7a:	72 0b       	ld.w	r11,r9[0x0]
80006a7c:	30 86       	mov	r6,8
80006a7e:	f7 db c0 83 	bfextu	r11,r11,0x4,0x3
80006a82:	ec 0b 09 4b 	lsl	r11,r6,r11
80006a86:	f6 06 09 4b 	lsl	r11,r11,r6
80006a8a:	e0 4b ff ff 	cp.w	r11,65535
80006a8e:	e0 89 00 0a 	brgt	80006aa2 <uhd_pipe_trans_complet+0x62>
				 max_trans = 256L * uhd_get_pipe_size(pipe);
80006a92:	72 0b       	ld.w	r11,r9[0x0]
80006a94:	f7 db c0 83 	bfextu	r11,r11,0x4,0x3
80006a98:	ec 0b 09 4b 	lsl	r11,r6,r11
80006a9c:	f6 06 09 4b 	lsl	r11,r11,r6
80006aa0:	c0 38       	rjmp	80006aa6 <uhd_pipe_trans_complet+0x66>
80006aa2:	e0 7b 00 00 	mov	r11,65536
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
80006aa6:	1c 1a       	sub	r10,lr
80006aa8:	14 3b       	cp.w	r11,r10
80006aaa:	f6 0a 17 80 	movls	r10,r11
			// The USB hardware supports a maximum
			// transfer size of UHD_PIPE_MAX_TRANS Bytes
			next_trans = max_trans;
		}

		if (next_trans == UHD_PIPE_MAX_TRANS) {
80006aae:	e0 5a 00 00 	cp.w	r10,65536
80006ab2:	c0 31       	brne	80006ab8 <uhd_pipe_trans_complet+0x78>
80006ab4:	30 0b       	mov	r11,0
			// Set 0 to transfer the maximum
			uhd_dma_ctrl = (0 <<
					AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		} else {
			uhd_dma_ctrl = (next_trans <<
80006ab6:	c0 38       	rjmp	80006abc <uhd_pipe_trans_complet+0x7c>
80006ab8:	f4 0b 15 10 	lsl	r11,r10,0x10
					AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		}

		if (uhd_is_pipe_out(pipe)) {
80006abc:	72 0e       	ld.w	lr,r9[0x0]
80006abe:	fd de c1 02 	bfextu	lr,lr,0x8,0x2
80006ac2:	58 2e       	cp.w	lr,2
			if (0 != next_trans % uhd_get_pipe_size(pipe)) {
80006ac4:	c1 21       	brne	80006ae8 <uhd_pipe_trans_complet+0xa8>
80006ac6:	72 0e       	ld.w	lr,r9[0x0]
80006ac8:	30 86       	mov	r6,8
80006aca:	fd de c0 83 	bfextu	lr,lr,0x4,0x3
80006ace:	ec 0e 09 4e 	lsl	lr,r6,lr
80006ad2:	20 1e       	sub	lr,1
80006ad4:	f5 ee 00 0e 	and	lr,r10,lr
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
80006ad8:	c1 80       	breq	80006b08 <uhd_pipe_trans_complet+0xc8>
		if (uhd_is_pipe_out(pipe)) {
			if (0 != next_trans % uhd_get_pipe_size(pipe)) {
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_DMAEND_EN_MASK;
80006ada:	70 0e       	ld.w	lr,r8[0x0]
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
80006adc:	0c 4b       	or	r11,r6
80006ade:	30 06       	mov	r6,0
80006ae0:	fd d6 d3 c1 	bfins	lr,r6,0x1e,0x1
80006ae4:	91 0e       	st.w	r8[0x0],lr
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != uhd_get_pipe_type(pipe))
80006ae6:	c1 18       	rjmp	80006b08 <uhd_pipe_trans_complet+0xc8>
80006ae8:	72 0e       	ld.w	lr,r9[0x0]
80006aea:	fd de c1 82 	bfextu	lr,lr,0xc,0x2
80006aee:	58 1e       	cp.w	lr,1
					|| (next_trans <= uhd_get_pipe_size(pipe))) {
80006af0:	c0 a1       	brne	80006b04 <uhd_pipe_trans_complet+0xc4>
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != uhd_get_pipe_type(pipe))
80006af2:	72 0e       	ld.w	lr,r9[0x0]
80006af4:	30 86       	mov	r6,8
80006af6:	fd de c0 83 	bfextu	lr,lr,0x4,0x3
80006afa:	ec 0e 09 4e 	lsl	lr,r6,lr
80006afe:	1c 3a       	cp.w	r10,lr
80006b00:	e0 8b 00 04 	brhi	80006b08 <uhd_pipe_trans_complet+0xc8>
					|| (next_trans <= uhd_get_pipe_size(pipe))) {
				// Enable short packet reception
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_EOT_IRQ_EN_MASK
80006b04:	e8 1b 00 14 	orl	r11,0x14
						| AVR32_USBB_UHDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		uhd_pipe_dma_set_addr(pipe, (U32) &ptr_job->buf[ptr_job->nb_trans]);
80006b08:	70 3e       	ld.w	lr,r8[0xc]
80006b0a:	70 16       	ld.w	r6,r8[0x4]
80006b0c:	1c 06       	add	r6,lr
80006b0e:	f8 0e 15 04 	lsl	lr,r12,0x4
80006b12:	e0 3e f9 00 	sub	lr,129280

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80006b16:	9d 16       	st.w	lr[0x4],r6
80006b18:	e1 b5 00 00 	mfsr	r5,0x0
				AVR32_USBB_UHDMA1_CONTROL_CH_EN_MASK;

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if( !(uhd_pipe_dma_get_status(pipe)
80006b1c:	d3 03       	ssrf	0x10
80006b1e:	7c 36       	ld.w	r6,lr[0xc]
80006b20:	e2 16 00 10 	andl	r6,0x10,COH
				& AVR32_USBB_UHDMA1_STATUS_EOT_STA_MASK)) {
			if (uhd_is_pipe_in(pipe)) {
80006b24:	c3 61       	brne	80006b90 <uhd_pipe_trans_complet+0x150>
80006b26:	72 0c       	ld.w	r12,r9[0x0]
80006b28:	f9 dc c1 02 	bfextu	r12,r12,0x8,0x2
80006b2c:	58 1c       	cp.w	r12,1
				uhd_in_request_number(pipe,
80006b2e:	c1 c1       	brne	80006b66 <uhd_pipe_trans_complet+0x126>
80006b30:	fe 6c 06 50 	mov	r12,-129456
80006b34:	ee 0c 00 06 	add	r6,r7,r12
80006b38:	6c 0c       	ld.w	r12,r6[0x0]
80006b3a:	72 03       	ld.w	r3,r9[0x0]
80006b3c:	e0 1c ff 00 	andl	r12,0xff00
80006b40:	72 04       	ld.w	r4,r9[0x0]
80006b42:	f3 d3 c0 83 	bfextu	r9,r3,0x4,0x3
80006b46:	e9 d4 c0 83 	bfextu	r4,r4,0x4,0x3
80006b4a:	30 83       	mov	r3,8
80006b4c:	2f d4       	sub	r4,-3
80006b4e:	e6 09 09 49 	lsl	r9,r3,r9
80006b52:	20 19       	sub	r9,1
80006b54:	14 09       	add	r9,r10
80006b56:	f2 04 0a 49 	lsr	r9,r9,r4
80006b5a:	20 19       	sub	r9,1
80006b5c:	f3 d9 c0 08 	bfextu	r9,r9,0x0,0x8
80006b60:	f3 ec 10 0c 	or	r12,r9,r12
						(next_trans+uhd_get_pipe_size(pipe)-1)/uhd_get_pipe_size(pipe));
			}
			uhd_disable_bank_interrupt(pipe);
80006b64:	8d 0c       	st.w	r6[0x0],r12
80006b66:	e0 37 f9 e0 	sub	r7,129504
80006b6a:	e0 69 10 00 	mov	r9,4096
			uhd_unfreeze_pipe(pipe);
80006b6e:	8f 09       	st.w	r7[0x0],r9
80006b70:	e2 69 00 00 	mov	r9,131072
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		uhd_pipe_dma_set_addr(pipe, (U32) &ptr_job->buf[ptr_job->nb_trans]);
		uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
80006b74:	8f 09       	st.w	r7[0x0],r9
80006b76:	e8 1b 00 21 	orl	r11,0x21
						(next_trans+uhd_get_pipe_size(pipe)-1)/uhd_get_pipe_size(pipe));
			}
			uhd_disable_bank_interrupt(pipe);
			uhd_unfreeze_pipe(pipe);
			uhd_pipe_dma_set_control(pipe, uhd_dma_ctrl);
			ptr_job->nb_trans += next_trans;
80006b7a:	9d 2b       	st.w	lr[0x8],r11
80006b7c:	70 39       	ld.w	r9,r8[0xc]
80006b7e:	f2 0a 00 0a 	add	r10,r9,r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80006b82:	91 3a       	st.w	r8[0xc],r10
80006b84:	e6 15 00 01 	andh	r5,0x1,COH
      cpu_irq_enable();
80006b88:	c0 21       	brne	80006b8c <uhd_pipe_trans_complet+0x14c>
			cpu_irq_restore(flags);
			return;
80006b8a:	d5 03       	csrf	0x10
80006b8c:	d8 32       	popm	r0-r7,pc
80006b8e:	d7 03       	nop
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80006b90:	e6 15 00 01 	andh	r5,0x1,COH
80006b94:	c0 21       	brne	80006b98 <uhd_pipe_trans_complet+0x158>
      cpu_irq_enable();
80006b96:	d5 03       	csrf	0x10
		}
		cpu_irq_restore(flags);
		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->nb_trans;
80006b98:	70 39       	ld.w	r9,r8[0xc]
80006b9a:	91 29       	st.w	r8[0x8],r9
	}
	if (uhd_is_pipe_out(pipe)) {
80006b9c:	f8 09 15 02 	lsl	r9,r12,0x2
80006ba0:	fe 6b 05 00 	mov	r11,-129792
80006ba4:	f2 0b 00 0a 	add	r10,r9,r11
80006ba8:	74 0a       	ld.w	r10,r10[0x0]
80006baa:	f5 da c1 02 	bfextu	r10,r10,0x8,0x2
80006bae:	58 2a       	cp.w	r10,2
80006bb0:	c1 c1       	brne	80006be8 <uhd_pipe_trans_complet+0x1a8>
		if (ptr_job->b_shortpacket) {
80006bb2:	70 08       	ld.w	r8,r8[0x0]
80006bb4:	ed b8 00 1e 	bld	r8,0x1e
80006bb8:	c1 81       	brne	80006be8 <uhd_pipe_trans_complet+0x1a8>
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			uhd_ack_out_ready(pipe);
80006bba:	fe 6c 05 60 	mov	r12,-129696
80006bbe:	f2 0c 00 08 	add	r8,r9,r12
80006bc2:	91 0a       	st.w	r8[0x0],r10
			if (Is_uhd_write_enabled(pipe)) {
80006bc4:	fe 6b 05 30 	mov	r11,-129744
80006bc8:	f2 0b 00 08 	add	r8,r9,r11
80006bcc:	70 08       	ld.w	r8,r8[0x0]
80006bce:	ed b8 00 10 	bld	r8,0x10
80006bd2:	c0 61       	brne	80006bde <uhd_pipe_trans_complet+0x19e>
				// Force interrupt in case of pipe already free
				uhd_raise_out_ready(pipe);
80006bd4:	fe 6c 05 90 	mov	r12,-129648
80006bd8:	f2 0c 00 08 	add	r8,r9,r12
80006bdc:	91 0a       	st.w	r8[0x0],r10
			}
			uhd_enable_out_ready_interrupt(pipe);
80006bde:	e0 39 fa 10 	sub	r9,129552
80006be2:	30 28       	mov	r8,2
80006be4:	93 08       	st.w	r9[0x0],r8
			return;
80006be6:	d8 32       	popm	r0-r7,pc
		}
	}
	// Call callback to signal end of transfer
	uhd_pipe_finish_job(pipe, UHD_TRANS_NOERROR);
80006be8:	30 0b       	mov	r11,0
80006bea:	cb fe       	rcall	80006968 <uhd_pipe_finish_job>
80006bec:	d8 32       	popm	r0-r7,pc
80006bee:	d7 03       	nop

80006bf0 <uhd_ep_run>:
80006bf0:	d4 31       	pushm	r0-r7,lr
80006bf2:	fa c4 ff dc 	sub	r4,sp,-36
		bool b_shortpacket,
		uint8_t *buf,
		iram_size_t buf_size,
		uint16_t timeout,
		uhd_callback_trans_t callback)
{
80006bf6:	10 95       	mov	r5,r8
80006bf8:	68 13       	ld.w	r3,r4[0x4]
80006bfa:	14 97       	mov	r7,r10
80006bfc:	12 96       	mov	r6,r9
80006bfe:	68 04       	ld.w	r4,r4[0x0]
	irqflags_t flags;
	uint8_t pipe;
	uhd_pipe_job_t *ptr_job;

	pipe = uhd_get_pipe(add,endp);
80006c00:	c7 4e       	rcall	800068e8 <uhd_get_pipe>
80006c02:	30 78       	mov	r8,7
	if (pipe == AVR32_USBB_EPT_NUM) {
80006c04:	f0 0c 18 00 	cp.b	r12,r8
80006c08:	c1 60       	breq	80006c34 <uhd_ep_run+0x44>
80006c0a:	e0 69 09 24 	mov	r9,2340
		return false; // pipe not found
	}

	// Get job about pipe
	ptr_job = &uhd_pipe_job[pipe-1];
80006c0e:	f8 c8 00 01 	sub	r8,r12,1
80006c12:	f0 08 00 28 	add	r8,r8,r8<<0x2
80006c16:	f2 08 00 28 	add	r8,r9,r8<<0x2

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80006c1a:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80006c1e:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
80006c20:	70 0b       	ld.w	r11,r8[0x0]
80006c22:	e6 19 00 01 	andh	r9,0x1,COH
80006c26:	16 9a       	mov	r10,r11
80006c28:	e6 1a 80 00 	andh	r10,0x8000,COH
80006c2c:	c0 50       	breq	80006c36 <uhd_ep_run+0x46>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80006c2e:	58 09       	cp.w	r9,0
80006c30:	c0 21       	brne	80006c34 <uhd_ep_run+0x44>
      cpu_irq_enable();
80006c32:	d5 03       	csrf	0x10
   }

	barrier();
80006c34:	d8 3a       	popm	r0-r7,pc,r12=0
		cpu_irq_restore(flags);
		return false; // Job already on going
	}
	ptr_job->busy = true;
80006c36:	30 1e       	mov	lr,1
80006c38:	f7 de d3 e1 	bfins	r11,lr,0x1f,0x1
80006c3c:	91 0b       	st.w	r8[0x0],r11

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
	ptr_job->buf_size = buf_size;
	ptr_job->nb_trans = 0;
	ptr_job->timeout = timeout;
80006c3e:	b0 14       	st.h	r8[0x2],r4
	ptr_job->busy = true;

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
	ptr_job->buf_size = buf_size;
	ptr_job->nb_trans = 0;
80006c40:	91 3a       	st.w	r8[0xc],r10
	ptr_job->timeout = timeout;
	ptr_job->b_shortpacket = b_shortpacket;
	ptr_job->call_end = callback;
80006c42:	91 43       	st.w	r8[0x10],r3
	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
	ptr_job->buf_size = buf_size;
	ptr_job->nb_trans = 0;
	ptr_job->timeout = timeout;
	ptr_job->b_shortpacket = b_shortpacket;
80006c44:	70 0a       	ld.w	r10,r8[0x0]
		return false; // Job already on going
	}
	ptr_job->busy = true;

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
80006c46:	91 16       	st.w	r8[0x4],r6
	ptr_job->buf_size = buf_size;
	ptr_job->nb_trans = 0;
	ptr_job->timeout = timeout;
	ptr_job->b_shortpacket = b_shortpacket;
80006c48:	f5 d7 d3 c1 	bfins	r10,r7,0x1e,0x1
	}
	ptr_job->busy = true;

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
	ptr_job->buf_size = buf_size;
80006c4c:	91 25       	st.w	r8[0x8],r5
	ptr_job->nb_trans = 0;
	ptr_job->timeout = timeout;
	ptr_job->b_shortpacket = b_shortpacket;
80006c4e:	91 0a       	st.w	r8[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80006c50:	58 09       	cp.w	r9,0
80006c52:	c0 21       	brne	80006c56 <uhd_ep_run+0x66>
      cpu_irq_enable();
80006c54:	d5 03       	csrf	0x10
	ptr_job->call_end = callback;
	cpu_irq_restore(flags);

	// Request first transfer
	uhd_pipe_trans_complet(pipe);
80006c56:	cf 5e       	rcall	80006a40 <uhd_pipe_trans_complet>
80006c58:	da 3a       	popm	r0-r7,pc,r12=1
80006c5a:	d7 03       	nop

80006c5c <uhd_ctrl_request_end>:
80006c5c:	d4 21       	pushm	r4-r7,lr
80006c5e:	30 09       	mov	r9,0
80006c60:	e0 68 3f bc 	mov	r8,16316
80006c64:	18 95       	mov	r5,r12
80006c66:	b0 09       	st.h	r8[0x0],r9
	bool b_new_request;

	uhd_ctrl_request_timeout = 0;

	// Remove request from the control request list
	callback_end = uhd_ctrl_request_first->callback_end;
80006c68:	e0 69 3f b0 	mov	r9,16304

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80006c6c:	72 0c       	ld.w	r12,r9[0x0]
80006c6e:	78 66       	ld.w	r6,r12[0x18]
	cpu_irq_disable();
80006c70:	e1 b8 00 00 	mfsr	r8,0x0
	request_to_free = uhd_ctrl_request_first;
	flags = cpu_irq_save();
	uhd_ctrl_request_first = uhd_ctrl_request_first->next_request;
80006c74:	d3 03       	ssrf	0x10
80006c76:	72 0a       	ld.w	r10,r9[0x0]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80006c78:	74 77       	ld.w	r7,r10[0x1c]
80006c7a:	93 07       	st.w	r9[0x0],r7
80006c7c:	ed b8 00 10 	bld	r8,0x10
	b_new_request = (uhd_ctrl_request_first != NULL);
	cpu_irq_restore(flags);
	free(request_to_free);
80006c80:	c0 20       	breq	80006c84 <uhd_ctrl_request_end+0x28>
80006c82:	d5 03       	csrf	0x10

	// Call callback
	if (callback_end != NULL) {
80006c84:	e0 a0 0b a2 	rcall	800083c8 <free>
		callback_end(uhd_get_configured_address(0), status, uhd_ctrl_nb_trans);
80006c88:	58 06       	cp.w	r6,0
80006c8a:	c0 b0       	breq	80006ca0 <uhd_ctrl_request_end+0x44>
80006c8c:	fe 68 04 24 	mov	r8,-130012
80006c90:	70 0c       	ld.w	r12,r8[0x0]
80006c92:	e0 68 3f b4 	mov	r8,16308
80006c96:	0a 9b       	mov	r11,r5
80006c98:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
	}

	// If a setup request is pending and no started by previous callback
	if (b_new_request) {
80006c9c:	90 8a       	ld.uh	r10,r8[0x0]
		uhd_ctrl_phase_setup();
80006c9e:	5d 16       	icall	r6
80006ca0:	58 07       	cp.w	r7,0
	}
	if (uhd_b_suspend_requested) {
80006ca2:	c0 20       	breq	80006ca6 <uhd_ctrl_request_end+0x4a>
80006ca4:	c0 cc       	rcall	80006cbc <uhd_ctrl_phase_setup>
80006ca6:	e0 68 09 9f 	mov	r8,2463
80006caa:	30 09       	mov	r9,0
80006cac:	11 8a       	ld.ub	r10,r8[0x0]
		// A suspend request has been delay after all setup request
		uhd_b_suspend_requested = false;
80006cae:	f2 0a 18 00 	cp.b	r10,r9
		uhd_suspend();
80006cb2:	c0 40       	breq	80006cba <uhd_ctrl_request_end+0x5e>
80006cb4:	b0 89       	st.b	r8[0x0],r9
80006cb6:	fe b0 fd 49 	rcall	80006748 <uhd_suspend>
80006cba:	d8 22       	popm	r4-r7,pc

80006cbc <uhd_ctrl_phase_setup>:
80006cbc:	d4 21       	pushm	r4-r7,lr
80006cbe:	20 2d       	sub	sp,8
80006cc0:	e0 68 3f ac 	mov	r8,16300
80006cc4:	30 06       	mov	r6,0
80006cc6:	91 06       	st.w	r8[0x0],r6
80006cc8:	e0 68 3f b0 	mov	r8,16304
80006ccc:	30 8a       	mov	r10,8
80006cce:	70 07       	ld.w	r7,r8[0x0]
80006cd0:	1a 9c       	mov	r12,sp
80006cd2:	ee cb ff ff 	sub	r11,r7,-1

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
	uhd_ctrl_nb_trans = 0;
80006cd6:	e0 a0 0d 9d 	rcall	80008810 <memcpy>
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
80006cda:	e0 68 3f b4 	mov	r8,16308
		uint64_t value64;
	} setup;
	volatile uint64_t *ptr_ep_data;

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));
80006cde:	b0 06       	st.h	r8[0x0],r6
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
80006ce0:	fe 68 00 00 	mov	r8,-131072

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
80006ce4:	40 09       	lddsp	r9,sp[0x0]
80006ce6:	f0 fc 04 1c 	ld.w	r12,r8[1052]
80006cea:	f7 d9 c0 10 	bfextu	r11,r9,0x0,0x10
80006cee:	f6 06 16 08 	lsr	r6,r11,0x8
80006cf2:	ed eb 10 8b 	or	r11,r6,r11<<0x8
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
80006cf6:	40 18       	lddsp	r8,sp[0x4]
80006cf8:	f3 db d0 10 	bfins	r9,r11,0x0,0x10
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
80006cfc:	f0 0a 16 10 	lsr	r10,r8,0x10
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
80006d00:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80006d04:	f4 0b 16 08 	lsr	r11,r10,0x8
80006d08:	f7 ea 10 8a 	or	r10,r11,r10<<0x8
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
80006d0c:	f1 da d2 10 	bfins	r8,r10,0x10,0x10
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
80006d10:	ed d8 b0 10 	bfexts	r6,r8,0x0,0x10
			(uhd_ctrl_request_first->add != uhd_get_configured_address(0))) {
80006d14:	58 0c       	cp.w	r12,0
80006d16:	c0 90       	breq	80006d28 <uhd_ctrl_phase_setup+0x6c>
80006d18:	fe 6a 04 24 	mov	r10,-130012
80006d1c:	74 0a       	ld.w	r10,r10[0x0]
80006d1e:	0f 8b       	ld.ub	r11,r7[0x0]
80006d20:	f5 da c0 07 	bfextu	r10,r10,0x0,0x7
		uhd_ctrl_request_end(UHD_TRANS_DISCONNECT);
80006d24:	14 3b       	cp.w	r11,r10
80006d26:	c0 40       	breq	80006d2e <uhd_ctrl_phase_setup+0x72>
		return; // Endpoint not valid
80006d28:	30 1c       	mov	r12,1
	}
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_SETUP);
80006d2a:	c9 9f       	rcall	80006c5c <uhd_ctrl_request_end>
80006d2c:	c2 a8       	rjmp	80006d80 <uhd_ctrl_phase_setup+0xc4>
80006d2e:	fe 6b 05 00 	mov	r11,-129792
80006d32:	76 0a       	ld.w	r10,r11[0x0]
80006d34:	e0 1a fc ff 	andl	r10,0xfcff
	uhd_ack_setup_ready(0);
80006d38:	97 0a       	st.w	r11[0x0],r10
80006d3a:	30 4c       	mov	r12,4
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
80006d3c:	fe 6a 05 60 	mov	r10,-129696
	}
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_SETUP);
	uhd_ack_setup_ready(0);
80006d40:	ef d6 c0 10 	bfextu	r7,r6,0x0,0x10
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
80006d44:	95 0c       	st.w	r10[0x0],r12
80006d46:	12 9b       	mov	r11,r9
80006d48:	ee 09 16 08 	lsr	r9,r7,0x8
80006d4c:	f3 e7 10 87 	or	r7,r9,r7<<0x8
	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_SETUP);
	uhd_ack_setup_ready(0);
	Assert(sizeof(setup) == sizeof(uint64_t));
	ptr_ep_data = (volatile uint64_t *)&uhd_get_pipe_fifo_access(0, 64);
	*ptr_ep_data = setup.value64;
80006d50:	f1 d7 d0 10 	bfins	r8,r7,0x0,0x10
80006d54:	10 9a       	mov	r10,r8
80006d56:	30 08       	mov	r8,0
80006d58:	ea 18 d0 00 	orh	r8,0xd000

	uhd_ctrl_request_timeout = 5000;
80006d5c:	f0 eb 00 00 	st.d	r8[0],r10
80006d60:	e0 69 13 88 	mov	r9,5000
	uhd_enable_setup_ready_interrupt(0);
80006d64:	e0 68 3f bc 	mov	r8,16316
80006d68:	b0 09       	st.h	r8[0x0],r9
	uhd_ack_fifocon(0);
80006d6a:	fe 68 05 f0 	mov	r8,-129552
80006d6e:	91 0c       	st.w	r8[0x0],r12
80006d70:	e0 69 40 00 	mov	r9,16384
	uhd_unfreeze_pipe(0);
80006d74:	fe 68 06 20 	mov	r8,-129504
80006d78:	91 09       	st.w	r8[0x0],r9
}
80006d7a:	e2 69 00 00 	mov	r9,131072
80006d7e:	91 09       	st.w	r8[0x0],r9
80006d80:	2f ed       	sub	sp,-8
80006d82:	d8 22       	popm	r4-r7,pc

80006d84 <uhd_setup_request>:
80006d84:	d4 31       	pushm	r0-r7,lr
80006d86:	20 1d       	sub	sp,4
80006d88:	18 97       	mov	r7,r12
80006d8a:	50 0b       	stdsp	sp[0x0],r11
80006d8c:	14 92       	mov	r2,r10
80006d8e:	12 96       	mov	r6,r9
80006d90:	10 93       	mov	r3,r8
80006d92:	40 a4       	lddsp	r4,sp[0x28]
80006d94:	32 0c       	mov	r12,32
80006d96:	e0 a0 0b 21 	rcall	800083d8 <malloc>
	irqflags_t flags;
	struct uhd_ctrl_request_t *request;
	bool b_start_request = false;

	request = malloc( sizeof(struct uhd_ctrl_request_t) );
	if (request == NULL) {
80006d9a:	40 0b       	lddsp	r11,sp[0x0]
{
	irqflags_t flags;
	struct uhd_ctrl_request_t *request;
	bool b_start_request = false;

	request = malloc( sizeof(struct uhd_ctrl_request_t) );
80006d9c:	18 95       	mov	r5,r12
	if (request == NULL) {
80006d9e:	c2 60       	breq	80006dea <uhd_setup_request+0x66>
		Assert(false);
		return false;
	}

	// Fill structure
	request->add = (uint8_t) add;
80006da0:	18 c7       	st.b	r12++,r7
	memcpy(&request->req, req, sizeof(usb_setup_req_t));
80006da2:	30 8a       	mov	r10,8
80006da4:	e0 a0 0d 36 	rcall	80008810 <memcpy>
	request->payload = payload;
	request->payload_size = payload_size;
	request->callback_run = callback_run;
	request->callback_end = callback_end;
	request->next_request = NULL;
80006da8:	30 08       	mov	r8,0
	}

	// Fill structure
	request->add = (uint8_t) add;
	memcpy(&request->req, req, sizeof(usb_setup_req_t));
	request->payload = payload;
80006daa:	8b 32       	st.w	r5[0xc],r2
	request->payload_size = payload_size;
80006dac:	eb 56 00 10 	st.h	r5[16],r6
	request->callback_run = callback_run;
80006db0:	8b 53       	st.w	r5[0x14],r3
	request->callback_end = callback_end;
80006db2:	8b 64       	st.w	r5[0x18],r4
	request->next_request = NULL;
80006db4:	8b 78       	st.w	r5[0x1c],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80006db6:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80006dba:	d3 03       	ssrf	0x10

	// Add this request in the queue
	flags = cpu_irq_save();
	if (uhd_ctrl_request_first == NULL) {
80006dbc:	e0 69 3f b0 	mov	r9,16304
80006dc0:	72 0b       	ld.w	r11,r9[0x0]
80006dc2:	58 0b       	cp.w	r11,0
		uhd_ctrl_request_first = request;
80006dc4:	c0 41       	brne	80006dcc <uhd_setup_request+0x48>
80006dc6:	93 05       	st.w	r9[0x0],r5
80006dc8:	30 18       	mov	r8,1
		b_start_request = true;
	} else {
		uhd_ctrl_request_last->next_request = request;
80006dca:	c0 58       	rjmp	80006dd4 <uhd_setup_request+0x50>
80006dcc:	e0 69 3f b8 	mov	r9,16312
	}
	uhd_ctrl_request_last = request;
80006dd0:	72 09       	ld.w	r9,r9[0x0]
80006dd2:	93 75       	st.w	r9[0x1c],r5
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80006dd4:	e0 69 3f b8 	mov	r9,16312
80006dd8:	93 05       	st.w	r9[0x0],r5
      cpu_irq_enable();
80006dda:	ed ba 00 10 	bld	r10,0x10
	cpu_irq_restore(flags);

	if (b_start_request) {
80006dde:	c0 20       	breq	80006de2 <uhd_setup_request+0x5e>
		// Start immediately request
		uhd_ctrl_phase_setup();
80006de0:	d5 03       	csrf	0x10
80006de2:	58 08       	cp.w	r8,0
80006de4:	c0 20       	breq	80006de8 <uhd_setup_request+0x64>
	}
	return true;
}
80006de6:	c6 bf       	rcall	80006cbc <uhd_ctrl_phase_setup>
80006de8:	30 1c       	mov	r12,1
80006dea:	2f fd       	sub	sp,-4
80006dec:	d8 32       	popm	r0-r7,pc
80006dee:	d7 03       	nop

80006df0 <uhd_ep_free>:
80006df0:	d4 31       	pushm	r0-r7,lr
80006df2:	fe 66 05 00 	mov	r6,-129792
80006df6:	18 90       	mov	r0,r12
80006df8:	16 94       	mov	r4,r11
80006dfa:	30 07       	mov	r7,0
80006dfc:	fe 65 00 00 	mov	r5,-131072
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80006e00:	30 11       	mov	r1,1
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80006e02:	37 f2       	mov	r2,127
			continue;
		}
		if (endp != 0xFF) {
80006e04:	3f f3       	mov	r3,-1
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80006e06:	ea fb 04 1c 	ld.w	r11,r5[1052]
	return false;
}


void uhd_ep_free(usb_add_t add, usb_ep_t endp)
{
80006e0a:	0e 99       	mov	r9,r7
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80006e0c:	e2 07 09 4a 	lsl	r10,r1,r7
	return false;
}


void uhd_ep_free(usb_add_t add, usb_ep_t endp)
{
80006e10:	5c 59       	castu.b	r9
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80006e12:	f5 eb 00 0b 	and	r11,r10,r11
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80006e16:	12 98       	mov	r8,r9
80006e18:	e2 18 00 fc 	andl	r8,0xfc,COH
80006e1c:	e0 38 fb dc 	sub	r8,130012
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80006e20:	58 0b       	cp.w	r11,0
80006e22:	c3 90       	breq	80006e94 <uhd_ep_free+0xa4>
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80006e24:	70 0b       	ld.w	r11,r8[0x0]
80006e26:	f1 d7 c0 02 	bfextu	r8,r7,0x0,0x2
80006e2a:	a3 78       	lsl	r8,0x3
80006e2c:	e4 08 09 48 	lsl	r8,r2,r8
80006e30:	10 6b       	and	r11,r8
80006e32:	5c 98       	brev	r8
80006e34:	f0 08 12 00 	clz	r8,r8
80006e38:	f6 08 0a 48 	lsr	r8,r11,r8
80006e3c:	10 30       	cp.w	r0,r8
80006e3e:	c2 b1       	brne	80006e94 <uhd_ep_free+0xa4>
			if (endp != uhd_get_pipe_endpoint_address(pipe)) {
				continue; // Mismatch
			}
		}
		// Unalloc pipe
		uhd_disable_pipe(pipe);
80006e40:	5c da       	com	r10
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
			continue;
		}
		if (endp != 0xFF) {
80006e42:	e6 04 18 00 	cp.b	r4,r3
80006e46:	c1 10       	breq	80006e68 <uhd_ep_free+0x78>
			// Disable specific endpoint number
			if (endp != uhd_get_pipe_endpoint_address(pipe)) {
80006e48:	6c 0b       	ld.w	r11,r6[0x0]
80006e4a:	6c 08       	ld.w	r8,r6[0x0]
80006e4c:	f7 db c2 04 	bfextu	r11,r11,0x10,0x4
80006e50:	f1 d8 c1 02 	bfextu	r8,r8,0x8,0x2
80006e54:	e0 6c 00 80 	mov	r12,128
80006e58:	58 18       	cp.w	r8,1
80006e5a:	f8 08 17 00 	moveq	r8,r12
80006e5e:	f9 b8 01 00 	movne	r8,0
80006e62:	16 48       	or	r8,r11
80006e64:	10 34       	cp.w	r4,r8
80006e66:	c1 71       	brne	80006e94 <uhd_ep_free+0xa4>
				continue; // Mismatch
			}
		}
		// Unalloc pipe
		uhd_disable_pipe(pipe);
80006e68:	ea f8 04 1c 	ld.w	r8,r5[1052]
80006e6c:	10 6a       	and	r10,r8
80006e6e:	eb 4a 04 1c 	st.w	r5[1052],r10
		uhd_unallocate_memory(pipe);
80006e72:	6c 08       	ld.w	r8,r6[0x0]
80006e74:	a1 d8       	cbr	r8,0x1
80006e76:	8d 08       	st.w	r6[0x0],r8

		// Stop transfer on this pipe
#ifndef USB_HOST_HUB_SUPPORT
		if (pipe == 0) {
80006e78:	58 09       	cp.w	r9,0
80006e7a:	c0 91       	brne	80006e8c <uhd_ep_free+0x9c>
			// Endpoint control
			if (uhd_ctrl_request_timeout) {
80006e7c:	e0 69 3f bc 	mov	r9,16316
80006e80:	92 08       	ld.sh	r8,r9[0x0]
80006e82:	58 08       	cp.w	r8,0
				uhd_ctrl_request_end(UHD_TRANS_DISCONNECT);
80006e84:	c0 80       	breq	80006e94 <uhd_ep_free+0xa4>
80006e86:	30 1c       	mov	r12,1
80006e88:	ce ae       	rcall	80006c5c <uhd_ctrl_request_end>
80006e8a:	c0 58       	rjmp	80006e94 <uhd_ep_free+0xa4>
			}
			continue;
		}
#endif
		// Endpoint interrupt, bulk or isochronous
		uhd_ep_abort_pipe(pipe, UHD_TRANS_DISCONNECT);
80006e8c:	0e 9c       	mov	r12,r7
80006e8e:	30 1b       	mov	r11,1
80006e90:	fe b0 fd a8 	rcall	800069e0 <uhd_ep_abort_pipe>
80006e94:	2f f7       	sub	r7,-1
80006e96:	2f c6       	sub	r6,-4
		}
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
80006e98:	58 77       	cp.w	r7,7
80006e9a:	cb 61       	brne	80006e06 <uhd_ep_free+0x16>
		}
#endif
		// Endpoint interrupt, bulk or isochronous
		uhd_ep_abort_pipe(pipe, UHD_TRANS_DISCONNECT);
	}
}
80006e9c:	d8 32       	popm	r0-r7,pc
80006e9e:	d7 03       	nop

80006ea0 <uhd_ep_alloc>:
80006ea0:	d4 31       	pushm	r0-r7,lr
80006ea2:	30 08       	mov	r8,0
80006ea4:	fe 65 00 00 	mov	r5,-131072
80006ea8:	30 16       	mov	r6,1
80006eaa:	ea f7 04 1c 	ld.w	r7,r5[1052]
	uhd_enable_pipe_interrupt(0);
	return true;
}

bool uhd_ep_alloc(usb_add_t add, usb_ep_desc_t * ep_desc)
{
80006eae:	f0 c9 ff ff 	sub	r9,r8,-1
	uint8_t ep_dir;
	uint8_t ep_interval;
	uint8_t bank;

	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (Is_uhd_pipe_enabled(pipe)) {
80006eb2:	fe 6e 00 00 	mov	lr,-131072
	uhd_enable_pipe_error_interrupt(0);
	uhd_enable_pipe_interrupt(0);
	return true;
}

bool uhd_ep_alloc(usb_add_t add, usb_ep_desc_t * ep_desc)
80006eb6:	2f f8       	sub	r8,-1
{
80006eb8:	5c 59       	castu.b	r9
	uint8_t ep_dir;
	uint8_t ep_interval;
	uint8_t bank;

	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (Is_uhd_pipe_enabled(pipe)) {
80006eba:	ec 08 09 4a 	lsl	r10,r6,r8
80006ebe:	f5 e7 00 07 	and	r7,r10,r7
80006ec2:	c0 40       	breq	80006eca <uhd_ep_alloc+0x2a>
	uint8_t ep_type;
	uint8_t ep_dir;
	uint8_t ep_interval;
	uint8_t bank;

	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
80006ec4:	58 68       	cp.w	r8,6
80006ec6:	cf 21       	brne	80006eaa <uhd_ep_alloc+0xa>
80006ec8:	c9 a8       	rjmp	80006ffc <uhd_ep_alloc+0x15c>
		if (Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		uhd_enable_pipe(pipe);
80006eca:	fc f6 04 1c 	ld.w	r6,lr[1052]
80006ece:	f5 e6 10 06 	or	r6,r10,r6
80006ed2:	fd 46 04 1c 	st.w	lr[1052],r6
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
				AVR32_USBB_UPCFG0_PTOKEN_IN:
				AVR32_USBB_UPCFG0_PTOKEN_OUT,
		ep_type = ep_desc->bmAttributes&USB_EP_TYPE_MASK;
		// Bank choice
		switch(ep_type) {
80006ed6:	30 25       	mov	r5,2
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		uhd_enable_pipe(pipe);
		ep_addr = ep_desc->bEndpointAddress & USB_EP_ADDR_MASK;
80006ed8:	17 a6       	ld.ub	r6,r11[0x2]
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
				AVR32_USBB_UPCFG0_PTOKEN_IN:
				AVR32_USBB_UPCFG0_PTOKEN_OUT,
		ep_type = ep_desc->bmAttributes&USB_EP_TYPE_MASK;
80006eda:	17 be       	ld.ub	lr,r11[0x3]
		if (Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		uhd_enable_pipe(pipe);
		ep_addr = ep_desc->bEndpointAddress & USB_EP_ADDR_MASK;
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
80006edc:	ec 07 18 00 	cp.b	r7,r6
80006ee0:	f9 b3 09 01 	movgt	r3,1
80006ee4:	f9 b3 0a 02 	movle	r3,2
				AVR32_USBB_UPCFG0_PTOKEN_IN:
				AVR32_USBB_UPCFG0_PTOKEN_OUT,
		ep_type = ep_desc->bmAttributes&USB_EP_TYPE_MASK;
80006ee8:	fd de c0 02 	bfextu	lr,lr,0x0,0x2
		// Bank choice
		switch(ep_type) {
80006eec:	ea 0e 18 00 	cp.b	lr,r5
80006ef0:	c0 d0       	breq	80006f0a <uhd_ep_alloc+0x6a>
80006ef2:	30 35       	mov	r5,3
80006ef4:	ea 0e 18 00 	cp.b	lr,r5
80006ef8:	c0 70       	breq	80006f06 <uhd_ep_alloc+0x66>
80006efa:	30 17       	mov	r7,1
80006efc:	ee 0e 18 00 	cp.b	lr,r7
80006f00:	c7 e1       	brne	80006ffc <uhd_ep_alloc+0x15c>
		case USB_EP_TYPE_ISOCHRONOUS:
			bank = UHD_ISOCHRONOUS_NB_BANK;
			ep_interval = ep_desc->bInterval;
80006f02:	17 e5       	ld.ub	r5,r11[0x6]
80006f04:	c0 48       	rjmp	80006f0c <uhd_ep_alloc+0x6c>
			break;
		case USB_EP_TYPE_INTERRUPT:
			bank = UHD_INTERRUPT_NB_BANK;
			ep_interval = ep_desc->bInterval;
80006f06:	17 e5       	ld.ub	r5,r11[0x6]
80006f08:	c0 38       	rjmp	80006f0e <uhd_ep_alloc+0x6e>
80006f0a:	0e 95       	mov	r5,r7
80006f0c:	30 17       	mov	r7,1
		default:
			Assert(false);
			return false;
		}

		uhd_configure_pipe(pipe, ep_interval, ep_addr, ep_type, ep_dir,
80006f0e:	17 d4       	ld.ub	r4,r11[0x5]
80006f10:	ed d6 c0 04 	bfextu	r6,r6,0x0,0x4
80006f14:	ad 6e       	lsl	lr,0xc
80006f16:	17 cb       	ld.ub	r11,r11[0x4]
80006f18:	fd e6 11 0e 	or	lr,lr,r6<<0x10
80006f1c:	e9 eb 10 8b 	or	r11,r4,r11<<0x8
80006f20:	ab ae       	sbr	lr,0xa
80006f22:	fe 64 05 00 	mov	r4,-129792
80006f26:	fd e3 10 8e 	or	lr,lr,r3<<0x8
80006f2a:	ee 06 15 02 	lsl	r6,r7,0x2
80006f2e:	fd e5 11 85 	or	r5,lr,r5<<0x18
80006f32:	f6 07 16 08 	lsr	r7,r11,0x8
80006f36:	f2 0e 15 02 	lsl	lr,r9,0x2
80006f3a:	ef eb 10 87 	or	r7,r7,r11<<0x8
80006f3e:	e0 63 04 00 	mov	r3,1024
80006f42:	fc 04 00 0b 	add	r11,lr,r4
80006f46:	5c 77       	castu.h	r7
80006f48:	30 84       	mov	r4,8
80006f4a:	ee 04 0c 47 	max	r7,r7,r4
80006f4e:	ee 03 0d 47 	min	r7,r7,r3
80006f52:	a1 77       	lsl	r7,0x1
80006f54:	20 17       	sub	r7,1
80006f56:	ee 07 12 00 	clz	r7,r7
80006f5a:	ee 07 11 1c 	rsub	r7,r7,28
80006f5e:	e2 16 00 0c 	andl	r6,0xc,COH
80006f62:	eb e7 10 45 	or	r5,r5,r7<<0x4
				le16_to_cpu(ep_desc->wMaxPacketSize),
				bank, AVR32_USBB_UPCFG0_AUTOSW_MASK);
		uhd_allocate_memory(pipe);
		if (!Is_uhd_pipe_configured(pipe)) {
80006f66:	fe 67 05 30 	mov	r7,-129744
		default:
			Assert(false);
			return false;
		}

		uhd_configure_pipe(pipe, ep_interval, ep_addr, ep_type, ep_dir,
80006f6a:	eb e6 10 06 	or	r6,r5,r6
80006f6e:	97 06       	st.w	r11[0x0],r6
				le16_to_cpu(ep_desc->wMaxPacketSize),
				bank, AVR32_USBB_UPCFG0_AUTOSW_MASK);
		uhd_allocate_memory(pipe);
		if (!Is_uhd_pipe_configured(pipe)) {
80006f70:	fc 07 00 06 	add	r6,lr,r7
		}

		uhd_configure_pipe(pipe, ep_interval, ep_addr, ep_type, ep_dir,
				le16_to_cpu(ep_desc->wMaxPacketSize),
				bank, AVR32_USBB_UPCFG0_AUTOSW_MASK);
		uhd_allocate_memory(pipe);
80006f74:	76 07       	ld.w	r7,r11[0x0]
80006f76:	a1 b7       	sbr	r7,0x1
80006f78:	97 07       	st.w	r11[0x0],r7
		if (!Is_uhd_pipe_configured(pipe)) {
80006f7a:	6c 0b       	ld.w	r11,r6[0x0]
80006f7c:	e6 1b 00 04 	andh	r11,0x4,COH
80006f80:	c0 b1       	brne	80006f96 <uhd_ep_alloc+0xf6>
			uhd_disable_pipe(pipe);
80006f82:	fe 68 00 00 	mov	r8,-131072
80006f86:	5c da       	com	r10
80006f88:	f0 f9 04 1c 	ld.w	r9,r8[1052]
80006f8c:	16 9c       	mov	r12,r11
80006f8e:	12 6a       	and	r10,r9
80006f90:	f1 4a 04 1c 	st.w	r8[1052],r10
			return false;
80006f94:	d8 32       	popm	r0-r7,pc
		}
		uhd_configure_address(pipe, add);
80006f96:	37 f6       	mov	r6,127
80006f98:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
80006f9c:	e2 19 00 fc 	andl	r9,0xfc,COH
80006fa0:	a3 7b       	lsl	r11,0x3
80006fa2:	e0 39 fb dc 	sub	r9,130012
80006fa6:	ec 0b 09 4b 	lsl	r11,r6,r11
80006faa:	72 07       	ld.w	r7,r9[0x0]
80006fac:	16 96       	mov	r6,r11
80006fae:	5c 96       	brev	r6
80006fb0:	ec 06 12 00 	clz	r6,r6
80006fb4:	16 87       	andn	r7,r11
80006fb6:	f8 06 09 4c 	lsl	r12,r12,r6
80006fba:	f9 eb 00 0b 	and	r11,r12,r11
80006fbe:	0e 4b       	or	r11,r7
80006fc0:	93 0b       	st.w	r9[0x0],r11
		uhd_enable_pipe(pipe);
80006fc2:	fe 69 00 00 	mov	r9,-131072
80006fc6:	f2 fb 04 1c 	ld.w	r11,r9[1052]
80006fca:	16 4a       	or	r10,r11
80006fcc:	f3 4a 04 1c 	st.w	r9[1052],r10

		// Enable endpoint interrupts
		uhd_enable_pipe_dma_interrupt(pipe);
80006fd0:	30 0b       	mov	r11,0
80006fd2:	ea 1b 02 00 	orh	r11,0x200
80006fd6:	f0 ca 00 01 	sub	r10,r8,1
80006fda:	f6 0a 09 4a 	lsl	r10,r11,r10
80006fde:	f3 4a 04 18 	st.w	r9[1048],r10
		uhd_enable_stall_interrupt(pipe);
80006fe2:	e0 3e fa 10 	sub	lr,129552
80006fe6:	34 0a       	mov	r10,64
80006fe8:	9d 0a       	st.w	lr[0x0],r10
		uhd_enable_pipe_error_interrupt(pipe);
80006fea:	9d 04       	st.w	lr[0x0],r4
		uhd_enable_pipe_interrupt(pipe);
80006fec:	e0 6a 01 00 	mov	r10,256
80006ff0:	30 1c       	mov	r12,1
80006ff2:	f4 08 09 48 	lsl	r8,r10,r8
80006ff6:	f3 48 04 18 	st.w	r9[1048],r8
		return true;
80006ffa:	d8 32       	popm	r0-r7,pc
80006ffc:	d8 3a       	popm	r0-r7,pc,r12=0

80006ffe <uhd_ep0_alloc>:
	uhd_send_resume();
	uhd_sleep_mode(UHD_STATE_IDLE);
}

bool uhd_ep0_alloc(usb_add_t add, uint8_t ep_size)
{
80006ffe:	d4 01       	pushm	lr
	if (ep_size < 8) {
80007000:	30 78       	mov	r8,7
80007002:	f0 0b 18 00 	cp.b	r11,r8
80007006:	e0 8b 00 03 	brhi	8000700c <uhd_ep0_alloc+0xe>
8000700a:	d8 0a       	popm	pc,r12=0
#error TODO Add USB address in a list
		return true;
	}
#endif

	uhd_enable_pipe(0);
8000700c:	fe 68 00 00 	mov	r8,-131072
80007010:	f0 f9 04 1c 	ld.w	r9,r8[1052]
80007014:	a1 a9       	sbr	r9,0x0
80007016:	f1 49 04 1c 	st.w	r8[1052],r9
	uhd_configure_pipe(0, // Pipe 0
8000701a:	30 8e       	mov	lr,8
8000701c:	fe 69 05 00 	mov	r9,-129792
80007020:	f6 0e 0c 4b 	max	r11,r11,lr
80007024:	e0 6a 04 00 	mov	r10,1024
80007028:	f6 0a 0d 4a 	min	r10,r11,r10
8000702c:	a1 7a       	lsl	r10,0x1
8000702e:	20 1a       	sub	r10,1
80007030:	f4 0a 12 00 	clz	r10,r10
80007034:	f4 0a 11 1c 	rsub	r10,r10,28
80007038:	a5 6a       	lsl	r10,0x4
8000703a:	93 0a       	st.w	r9[0x0],r10
#else
			ep_size,
#endif
			AVR32_USBB_UECFG0_EPBK_SINGLE, 0);

	uhd_allocate_memory(0);
8000703c:	72 0a       	ld.w	r10,r9[0x0]
8000703e:	a1 ba       	sbr	r10,0x1
80007040:	93 0a       	st.w	r9[0x0],r10
	if (!Is_uhd_pipe_configured(0)) {
80007042:	fe 69 05 30 	mov	r9,-129744
80007046:	72 09       	ld.w	r9,r9[0x0]
80007048:	e6 19 00 04 	andh	r9,0x4,COH
8000704c:	c0 81       	brne	8000705c <uhd_ep0_alloc+0x5e>
		uhd_disable_pipe(0);
8000704e:	12 9c       	mov	r12,r9
80007050:	f0 f9 04 1c 	ld.w	r9,r8[1052]
80007054:	a1 c9       	cbr	r9,0x0
80007056:	f1 49 04 1c 	st.w	r8[1052],r9
		return false;
8000705a:	d8 02       	popm	pc
	}
	uhd_configure_address(0, add);
8000705c:	fe 6a 04 24 	mov	r10,-130012
80007060:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80007064:	74 09       	ld.w	r9,r10[0x0]
80007066:	e0 19 ff 80 	andl	r9,0xff80
8000706a:	f9 e9 10 09 	or	r9,r12,r9
8000706e:	95 09       	st.w	r10[0x0],r9

	// Always enable stall and error interrupts of control endpoint
	uhd_enable_stall_interrupt(0);
80007070:	fe 69 05 f0 	mov	r9,-129552
80007074:	34 0a       	mov	r10,64
80007076:	93 0a       	st.w	r9[0x0],r10
	uhd_enable_pipe_error_interrupt(0);
80007078:	93 0e       	st.w	r9[0x0],lr
	uhd_enable_pipe_interrupt(0);
8000707a:	30 1c       	mov	r12,1
8000707c:	e0 69 01 00 	mov	r9,256
80007080:	f1 49 04 18 	st.w	r8[1048],r9
	return true;
}
80007084:	d8 02       	popm	pc
80007086:	d7 03       	nop

80007088 <otg_dual_disable>:
# endif
}


void otg_dual_disable(void)
{
80007088:	d4 01       	pushm	lr
	if (!otg_initialized) {
8000708a:	e0 6a 09 1c 	mov	r10,2332
8000708e:	30 0b       	mov	r11,0
80007090:	15 88       	ld.ub	r8,r10[0x0]
80007092:	f6 08 18 00 	cp.b	r8,r11
		return; // Dual role not initialized
	}
	otg_initialized = false;

	// Do not authorize asynchronous USB interrupts
	AVR32_PM.AWEN.usb_waken = 0;
80007096:	c1 b0       	breq	800070cc <otg_dual_disable+0x44>
80007098:	fe 78 0c 00 	mov	r8,-62464
8000709c:	30 0c       	mov	r12,0
8000709e:	f0 f9 01 44 	ld.w	r9,r8[324]
800070a2:	f3 dc d0 01 	bfins	r9,r12,0x0,0x1
800070a6:	f1 49 01 44 	st.w	r8[324],r9
	otg_unfreeze_clock();
800070aa:	fe 68 08 00 	mov	r8,-129024
800070ae:	70 09       	ld.w	r9,r8[0x0]
800070b0:	af c9       	cbr	r9,0xe
# ifdef USB_ID
	otg_disable_id_interrupt();
800070b2:	91 09       	st.w	r8[0x0],r9
800070b4:	70 09       	ld.w	r9,r8[0x0]
800070b6:	a1 c9       	cbr	r9,0x0
# endif
	otg_disable();
800070b8:	91 09       	st.w	r8[0x0],r9
800070ba:	70 09       	ld.w	r9,r8[0x0]
800070bc:	af d9       	cbr	r9,0xf
void otg_dual_disable(void)
{
	if (!otg_initialized) {
		return; // Dual role not initialized
	}
	otg_initialized = false;
800070be:	91 09       	st.w	r8[0x0],r9
	otg_unfreeze_clock();
# ifdef USB_ID
	otg_disable_id_interrupt();
# endif
	otg_disable();
	otg_disable_pad();
800070c0:	b4 8b       	st.b	r10[0x0],r11
800070c2:	70 09       	ld.w	r9,r8[0x0]
800070c4:	ad c9       	cbr	r9,0xc
	sysclk_disable_usb();
800070c6:	91 09       	st.w	r8[0x0],r9
800070c8:	e0 a0 07 7e 	rcall	80007fc4 <sysclk_disable_usb>
800070cc:	d8 02       	popm	pc
800070ce:	d7 03       	nop

800070d0 <uhd_disable>:
800070d0:	d4 21       	pushm	r4-r7,lr
800070d2:	fe 69 08 04 	mov	r9,-129020
	cpu_irq_restore(flags);
}


void uhd_disable(bool b_id_stop)
{
800070d6:	18 96       	mov	r6,r12
	irqflags_t flags;

	// Check USB clock ready after a potential sleep mode < IDLE
	while (!Is_otg_clock_usable());
800070d8:	72 08       	ld.w	r8,r9[0x0]
800070da:	ed b8 00 0e 	bld	r8,0xe
800070de:	cf d1       	brne	800070d8 <uhd_disable+0x8>
	otg_unfreeze_clock();
800070e0:	fe 67 08 00 	mov	r7,-129024
800070e4:	6e 08       	ld.w	r8,r7[0x0]
800070e6:	af c8       	cbr	r8,0xe
800070e8:	8f 08       	st.w	r7[0x0],r8

	// Disable Vbus change and error interrupts
	Clr_bits(AVR32_USBB.usbcon, AVR32_USBB_USBCON_VBUSTE_MASK
800070ea:	fe 68 00 00 	mov	r8,-131072
800070ee:	f0 f9 08 00 	ld.w	r9,r8[2048]
800070f2:	e0 19 ff f5 	andl	r9,0xfff5
800070f6:	f1 49 08 00 	st.w	r8[2048],r9
			| AVR32_USBB_USBCON_VBERRE_MASK);

	// Disable main control interrupt
	// (Connection, disconnection, SOF and reset)
	AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_DCONNIEC_MASK
800070fa:	37 f9       	mov	r9,127
800070fc:	f1 49 04 14 	st.w	r8[1044],r9
			| AVR32_USBB_UHINTECLR_HSOFIEC_MASK
			| AVR32_USBB_UHINTECLR_RSTIEC_MASK
			| AVR32_USBB_UHINTECLR_HWUPIEC_MASK
			| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
			| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
	uhd_disable_sof();
80007100:	fe 69 04 00 	mov	r9,-130048
80007104:	72 08       	ld.w	r8,r9[0x0]
80007106:	a9 c8       	cbr	r8,0x8
80007108:	93 08       	st.w	r9[0x0],r8
	uhd_disable_vbus();
8000710a:	fe 68 08 08 	mov	r8,-129016
8000710e:	e0 69 02 00 	mov	r9,512
	uhc_notify_connection(false);
80007112:	30 0c       	mov	r12,0
			| AVR32_USBB_UHINTECLR_RSTIEC_MASK
			| AVR32_USBB_UHINTECLR_HWUPIEC_MASK
			| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
			| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
	uhd_disable_sof();
	uhd_disable_vbus();
80007114:	91 09       	st.w	r8[0x0],r9
	uhc_notify_connection(false);
80007116:	e0 a0 06 f3 	rcall	80007efc <uhc_notify_connection>
	otg_freeze_clock();
8000711a:	6e 08       	ld.w	r8,r7[0x0]
8000711c:	af a8       	sbr	r8,0xe
8000711e:	8f 08       	st.w	r7[0x0],r8

#ifdef USB_ID
	uhd_sleep_mode(UHD_STATE_WAIT_ID_HOST);
	if (!b_id_stop) {
80007120:	58 06       	cp.w	r6,0
80007122:	c0 90       	breq	80007134 <uhd_disable+0x64>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80007124:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
80007128:	d3 03       	ssrf	0x10
		return; // No need to disable host, it is done automatically by hardware
	}
#endif

	flags = cpu_irq_save();
	otg_dual_disable();
8000712a:	ca ff       	rcall	80007088 <otg_dual_disable>
8000712c:	e6 17 00 01 	andh	r7,0x1,COH
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80007130:	c0 21       	brne	80007134 <uhd_disable+0x64>
80007132:	d5 03       	csrf	0x10
      cpu_irq_enable();
80007134:	d8 22       	popm	r4-r7,pc
   }

	barrier();
80007136:	d7 03       	nop

80007138 <otg_dual_enable>:
80007138:	d4 21       	pushm	r4-r7,lr
8000713a:	e0 68 09 1c 	mov	r8,2332
8000713e:	30 09       	mov	r9,0
	otg_data_memory_barrier();
}

bool otg_dual_enable(void)
{
	if (otg_initialized) {
80007140:	11 8a       	ld.ub	r10,r8[0x0]
80007142:	f2 0a 18 00 	cp.b	r10,r9
80007146:	c0 20       	breq	8000714a <otg_dual_enable+0x12>
		return false; // Dual role already initialized
	}
	otg_initialized = true;
80007148:	d8 2a       	popm	r4-r7,pc,r12=0
8000714a:	30 19       	mov	r9,1

	//* Enable USB hardware clock
	sysclk_enable_usb();
8000714c:	b0 89       	st.b	r8[0x0],r9
8000714e:	e0 a0 07 d3 	rcall	800080f4 <sysclk_enable_usb>

	//* Link USB interrupt on OTG interrupt in dual role
	irq_register_handler(otg_interrupt, AVR32_USBB_IRQ, UHD_USB_INT_LEVEL);
80007152:	30 0a       	mov	r10,0
80007154:	e0 6b 02 20 	mov	r11,544
80007158:	fe cc fe c8 	sub	r12,pc,-312
 *  AVR32_PM_AWEN_xxxxWEN_MASK in the part-specific header file under
 *  "toolchain folder"/avr32/inc(lude)/avr32/)
 */
__always_inline static void pm_asyn_wake_up_enable(unsigned long awen_mask)
{
  AVR32_PM.awen |= awen_mask;
8000715c:	fe b0 f7 e4 	rcall	80006124 <INTC_register_interrupt>
80007160:	fe 79 0c 00 	mov	r9,-62464
80007164:	f2 f8 01 44 	ld.w	r8,r9[324]
80007168:	a1 a8       	sbr	r8,0x0
	pm_asyn_wake_up_enable(AVR32_PM_AWEN_USB_WAKEN_MASK);

# ifdef USB_ID
	// By default USBB is already configured with ID pin enable
	// The USBB must be enabled to provide interrupt
	otg_input_id_pin();
8000716a:	f3 48 01 44 	st.w	r9[324],r8
8000716e:	fe 78 10 00 	mov	r8,-61440
80007172:	30 09       	mov	r9,0
80007174:	ea 19 04 00 	orh	r9,0x400
80007178:	91 69       	st.w	r8[0x18],r9
8000717a:	91 a9       	st.w	r8[0x28],r9
8000717c:	91 29       	st.w	r8[0x8],r9
	otg_unfreeze_clock();
8000717e:	f1 49 00 74 	st.w	r8[116],r9
80007182:	fe 68 08 00 	mov	r8,-129024
80007186:	70 09       	ld.w	r9,r8[0x0]
	otg_enable();
80007188:	af c9       	cbr	r9,0xe
8000718a:	91 09       	st.w	r8[0x0],r9
8000718c:	70 09       	ld.w	r9,r8[0x0]
	otg_enable_id_interrupt();
8000718e:	af b9       	sbr	r9,0xf
80007190:	91 09       	st.w	r8[0x0],r9
80007192:	70 09       	ld.w	r9,r8[0x0]
	otg_ack_id_transition();
80007194:	a1 a9       	sbr	r9,0x0
80007196:	91 09       	st.w	r8[0x0],r9
80007198:	30 17       	mov	r7,1
8000719a:	fe 69 08 08 	mov	r9,-129016
	otg_freeze_clock();
8000719e:	93 07       	st.w	r9[0x0],r7
800071a0:	70 09       	ld.w	r9,r8[0x0]
	if (Is_otg_id_device()) {
800071a2:	af a9       	sbr	r9,0xe
800071a4:	91 09       	st.w	r8[0x0],r9
800071a6:	fe 68 08 04 	mov	r8,-129020
800071aa:	70 08       	ld.w	r8,r8[0x0]
800071ac:	ed b8 00 0a 	bld	r8,0xa
		uhd_sleep_mode(UHD_STATE_WAIT_ID_HOST);
		UHC_MODE_CHANGE(false);
800071b0:	c0 61       	brne	800071bc <otg_dual_enable+0x84>
800071b2:	30 0c       	mov	r12,0
800071b4:	fe b0 f3 18 	rcall	800057e4 <usb_mode_change>
		udc_start();
	} else {
		UHC_MODE_CHANGE(true);
800071b8:	0e 9c       	mov	r12,r7
800071ba:	d8 22       	popm	r4-r7,pc
800071bc:	0e 9c       	mov	r12,r7
		uhc_start();
800071be:	fe b0 f3 13 	rcall	800057e4 <usb_mode_change>
800071c2:	e0 a0 04 77 	rcall	80007ab0 <uhc_start>
	return true;  // ID pin management has been enabled
# else
	uhd_sleep_mode(UHD_STATE_OFF);
	return false; // ID pin management has not been enabled
# endif
}
800071c6:	0e 9c       	mov	r12,r7
800071c8:	d8 22       	popm	r4-r7,pc
800071ca:	d7 03       	nop

800071cc <uhd_enable>:
800071cc:	d4 21       	pushm	r4-r7,lr
800071ce:	e1 b7 00 00 	mfsr	r7,0x0
800071d2:	d3 03       	ssrf	0x10
800071d4:	cb 2f       	rcall	80007138 <otg_dual_enable>
800071d6:	c5 71       	brne	80007284 <uhd_enable+0xb8>
800071d8:	fe 6b 08 04 	mov	r11,-129020
800071dc:	76 09       	ld.w	r9,r11[0x0]
800071de:	e2 19 04 00 	andl	r9,0x400,COH
		return;
	}

#ifdef USB_ID
	// Check that the host mode is selected by ID pin
	if (!Is_otg_id_host()) {
800071e2:	c5 11       	brne	80007284 <uhd_enable+0xb8>
800071e4:	fe 78 10 00 	mov	r8,-61440
	otg_force_host_mode();
#endif

	// Enable USB hardware
#ifdef USB_VBOF
	uhd_output_vbof_pin();
800071e8:	30 0a       	mov	r10,0
800071ea:	ea 1a 08 00 	orh	r10,0x800
800071ee:	91 6a       	st.w	r8[0x18],r10
800071f0:	91 aa       	st.w	r8[0x28],r10
800071f2:	91 2a       	st.w	r8[0x8],r10
800071f4:	f1 4a 00 88 	st.w	r8[136],r10
800071f8:	f1 4a 00 78 	st.w	r8[120],r10
800071fc:	fe 68 08 00 	mov	r8,-129024
# if USB_VBOF_ACTIVE_LEVEL == HIGH
	uhd_set_vbof_active_high();
# else // USB_VBOF_ACTIVE_LEVEL == LOW
	uhd_set_vbof_active_low();
80007200:	70 0a       	ld.w	r10,r8[0x0]
80007202:	ad ba       	sbr	r10,0xd
80007204:	91 0a       	st.w	r8[0x0],r10
80007206:	70 0a       	ld.w	r10,r8[0x0]
# endif
#endif
	otg_enable_pad();
80007208:	ad aa       	sbr	r10,0xc
8000720a:	91 0a       	st.w	r8[0x0],r10
8000720c:	70 0a       	ld.w	r10,r8[0x0]
	otg_enable();
8000720e:	af ba       	sbr	r10,0xf
80007210:	91 0a       	st.w	r8[0x0],r10
80007212:	e0 6a 3f bc 	mov	r10,16316

	uhd_ctrl_request_first = NULL;
	uhd_ctrl_request_last = NULL;
	uhd_ctrl_request_timeout = 0;
80007216:	b4 09       	st.h	r10[0x0],r9
	uhd_suspend_start = 0;
	uhd_resume_start = 0;
	uhd_b_suspend_requested = false;

	otg_unfreeze_clock();
80007218:	70 0a       	ld.w	r10,r8[0x0]
8000721a:	af ca       	cbr	r10,0xe
8000721c:	91 0a       	st.w	r8[0x0],r10
	uhd_disable_high_speed_mode();
#  endif
#endif

	// Clear all interrupts that may have been set by a previous host mode
	AVR32_USBB.uhintclr = AVR32_USBB_UHINTCLR_DCONNIC_MASK
8000721e:	37 fa       	mov	r10,127
80007220:	fe 68 00 00 	mov	r8,-131072
80007224:	f1 4a 04 08 	st.w	r8[1032],r10
			| AVR32_USBB_UHINTCLR_DDISCIC_MASK | AVR32_USBB_UHINTCLR_HSOFIC_MASK
			| AVR32_USBB_UHINTCLR_HWUPIC_MASK | AVR32_USBB_UHINTCLR_RSMEDIC_MASK
			| AVR32_USBB_UHINTCLR_RSTIC_MASK | AVR32_USBB_UHINTCLR_RXRSMIC_MASK;
	otg_ack_vbus_transition();
80007228:	fe 6a 08 08 	mov	r10,-129016
8000722c:	30 2c       	mov	r12,2
8000722e:	95 0c       	st.w	r10[0x0],r12

	// Enable Vbus change and error interrupts
	// Disable automatic Vbus control after Vbus error
	Set_bits(AVR32_USBB.usbcon, AVR32_USBB_USBCON_VBUSHWC_MASK
80007230:	f0 fa 08 00 	ld.w	r10,r8[2048]
80007234:	e8 1a 01 0a 	orl	r10,0x10a
80007238:	f1 4a 08 00 	st.w	r8[2048],r10
# endif
#endif
	otg_enable_pad();
	otg_enable();

	uhd_ctrl_request_first = NULL;
8000723c:	e0 6a 3f b0 	mov	r10,16304
80007240:	12 98       	mov	r8,r9
	uhd_ctrl_request_last = NULL;
80007242:	95 09       	st.w	r10[0x0],r9
80007244:	e0 6a 3f b8 	mov	r10,16312
	uhd_ctrl_request_timeout = 0;
	uhd_suspend_start = 0;
80007248:	95 09       	st.w	r10[0x0],r9
	uhd_resume_start = 0;
8000724a:	e0 69 09 9c 	mov	r9,2460
	uhd_b_suspend_requested = false;
8000724e:	b2 88       	st.b	r9[0x0],r8
80007250:	e0 69 09 9e 	mov	r9,2462
	// Enable Vbus change and error interrupts
	// Disable automatic Vbus control after Vbus error
	Set_bits(AVR32_USBB.usbcon, AVR32_USBB_USBCON_VBUSHWC_MASK
			|AVR32_USBB_USBCON_VBUSTE_MASK
			|AVR32_USBB_USBCON_VBERRE_MASK);
	uhd_enable_vbus();
80007254:	b2 88       	st.b	r9[0x0],r8
80007256:	e0 69 09 9f 	mov	r9,2463
8000725a:	b2 88       	st.b	r9[0x0],r8

	// Force Vbus interrupt when Vbus is always high
	// This is possible due to a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
8000725c:	e0 68 02 00 	mov	r8,512
80007260:	fe 69 08 0c 	mov	r9,-129012
		otg_raise_vbus_transition();
80007264:	93 08       	st.w	r9[0x0],r8
	}

	// Enable main control interrupt
	// Connection, SOF and reset
	AVR32_USBB.uhinteset = AVR32_USBB_UHINTESET_DCONNIES_MASK
80007266:	76 08       	ld.w	r8,r11[0x0]
80007268:	ed b8 00 0b 	bld	r8,0xb
8000726c:	c0 21       	brne	80007270 <uhd_enable+0xa4>
8000726e:	93 0c       	st.w	r9[0x0],r12
			| AVR32_USBB_UHINTESET_HSOFIES_MASK
			| AVR32_USBB_UHINTESET_RSTIES_MASK;

	otg_freeze_clock();
80007270:	32 59       	mov	r9,37
80007272:	fe 68 00 00 	mov	r8,-131072
80007276:	f1 49 04 18 	st.w	r8[1048],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000727a:	fe 69 08 00 	mov	r9,-129024
8000727e:	72 08       	ld.w	r8,r9[0x0]
      cpu_irq_enable();
80007280:	af a8       	sbr	r8,0xe
   }

	barrier();
80007282:	93 08       	st.w	r9[0x0],r8
80007284:	e6 17 00 01 	andh	r7,0x1,COH
80007288:	c0 21       	brne	8000728c <uhd_enable+0xc0>
8000728a:	d5 03       	csrf	0x10
8000728c:	d8 22       	popm	r4-r7,pc
8000728e:	d7 03       	nop

80007290 <otg_interrupt>:
80007290:	d4 31       	pushm	r0-r7,lr
80007292:	fe 68 08 04 	mov	r8,-129020
80007296:	70 09       	ld.w	r9,r8[0x0]
80007298:	ed b9 00 00 	bld	r9,0x0
8000729c:	c2 51       	brne	800072e6 <otg_interrupt+0x56>
8000729e:	70 09       	ld.w	r9,r8[0x0]
{
	bool b_mode_device;

#ifdef USB_ID
	if (Is_otg_id_transition()) {
		while (!Is_otg_clock_usable());
800072a0:	ed b9 00 0e 	bld	r9,0xe
800072a4:	cf d1       	brne	8000729e <otg_interrupt+0xe>
		otg_unfreeze_clock();
800072a6:	fe 68 08 00 	mov	r8,-129024
800072aa:	70 09       	ld.w	r9,r8[0x0]
800072ac:	af c9       	cbr	r9,0xe
800072ae:	91 09       	st.w	r8[0x0],r9
		otg_ack_id_transition();
800072b0:	30 1c       	mov	r12,1
800072b2:	fe 69 08 08 	mov	r9,-129016
800072b6:	93 0c       	st.w	r9[0x0],r12
		otg_freeze_clock();
800072b8:	70 09       	ld.w	r9,r8[0x0]
800072ba:	af a9       	sbr	r9,0xe
800072bc:	91 09       	st.w	r8[0x0],r9
		if (Is_otg_id_device()) {
800072be:	fe 68 08 04 	mov	r8,-129020
800072c2:	70 08       	ld.w	r8,r8[0x0]
800072c4:	ed b8 00 0a 	bld	r8,0xa
800072c8:	c0 91       	brne	800072da <otg_interrupt+0x4a>
			uhc_stop(false);
800072ca:	30 0c       	mov	r12,0
800072cc:	e0 a0 03 ee 	rcall	80007aa8 <uhc_stop>
			UHC_MODE_CHANGE(false);
800072d0:	30 0c       	mov	r12,0
800072d2:	fe b0 f2 89 	rcall	800057e4 <usb_mode_change>
800072d6:	e0 8f 03 2e 	bral	80007932 <otg_interrupt+0x6a2>
			udc_start();
		} else {
			udc_stop();
			UHC_MODE_CHANGE(true);
800072da:	fe b0 f2 85 	rcall	800057e4 <usb_mode_change>
			uhc_start();
800072de:	e0 a0 03 e9 	rcall	80007ab0 <uhc_start>
800072e2:	e0 8f 03 28 	bral	80007932 <otg_interrupt+0x6a2>
		}
		return;
	}
	b_mode_device = Is_otg_id_device();
800072e6:	70 08       	ld.w	r8,r8[0x0]
#else
	b_mode_device = Is_otg_device_mode_forced();
#endif

	// Redirection to host or device interrupt
	if (b_mode_device) {
800072e8:	ed b8 00 0a 	bld	r8,0xa
800072ec:	e0 80 03 1f 	breq	8000792a <otg_interrupt+0x69a>
static void uhd_interrupt(void)
{
	uint8_t pipe_int;

	// Manage SOF interrupt
	if (Is_uhd_sof()) {
800072f0:	fe 6a 04 04 	mov	r10,-130044
800072f4:	74 08       	ld.w	r8,r10[0x0]
800072f6:	ed b8 00 05 	bld	r8,0x5
800072fa:	e0 81 00 83 	brne	80007400 <otg_interrupt+0x170>
		uhd_ack_sof();
800072fe:	32 09       	mov	r9,32
80007300:	fe 68 04 08 	mov	r8,-130040
80007304:	91 09       	st.w	r8[0x0],r9
			return;
		}
	}

	// Manage a delay to enter in suspend
	if (uhd_suspend_start) {
80007306:	e0 69 09 9c 	mov	r9,2460
8000730a:	13 88       	ld.ub	r8,r9[0x0]
8000730c:	58 08       	cp.w	r8,0
		if (--uhd_suspend_start == 0) {
8000730e:	c2 80       	breq	8000735e <otg_interrupt+0xce>
80007310:	20 18       	sub	r8,1
80007312:	5c 58       	castu.b	r8
80007314:	b2 88       	st.b	r9[0x0],r8
80007316:	c0 80       	breq	80007326 <otg_interrupt+0x96>
80007318:	e0 8f 03 09 	bral	8000792a <otg_interrupt+0x69a>
#ifdef AVR32_USBB_USBSTA_SPEED_HIGH // If UTMI
			while (115<uhd_get_frame_position()) {
#else
			while (185<uhd_get_frame_position()) {
#endif
				if (Is_uhd_disconnection()) {
8000731c:	74 08       	ld.w	r8,r10[0x0]
8000731e:	ed b8 00 01 	bld	r8,0x1
80007322:	c0 41       	brne	8000732a <otg_interrupt+0x9a>
			// then wait end of SOF generation
			// to be sure that disable SOF has been accepted
#ifdef AVR32_USBB_USBSTA_SPEED_HIGH // If UTMI
			while (115<uhd_get_frame_position()) {
#else
			while (185<uhd_get_frame_position()) {
80007324:	c0 a8       	rjmp	80007338 <otg_interrupt+0xa8>
80007326:	fe 69 04 20 	mov	r9,-130016
8000732a:	72 08       	ld.w	r8,r9[0x0]
8000732c:	f1 d8 c2 08 	bfextu	r8,r8,0x10,0x8
80007330:	e0 48 00 b9 	cp.w	r8,185
80007334:	fe 9b ff f4 	brhi	8000731c <otg_interrupt+0x8c>
#endif
				if (Is_uhd_disconnection()) {
					break;
				}
			}
			uhd_disable_sof();
80007338:	fe 69 04 00 	mov	r9,-130048
8000733c:	72 08       	ld.w	r8,r9[0x0]
8000733e:	a9 c8       	cbr	r8,0x8

			// Ack previous wakeup and resumes interrupts
			AVR32_USBB.uhintclr = AVR32_USBB_UHINTCLR_HWUPIC_MASK
80007340:	93 08       	st.w	r9[0x0],r8
80007342:	fe 68 00 00 	mov	r8,-131072
80007346:	35 89       	mov	r9,88
80007348:	f1 49 04 08 	st.w	r8[1032],r9
					|AVR32_USBB_UHINTCLR_RSMEDIC_MASK
					|AVR32_USBB_UHINTCLR_RXRSMIC_MASK;

			// Enable wakeup/resumes interrupts
			AVR32_USBB.uhinteset = AVR32_USBB_UHINTESET_HWUPIES_MASK
8000734c:	f1 49 04 18 	st.w	r8[1048],r9
					|AVR32_USBB_UHINTESET_RSMEDIES_MASK
					|AVR32_USBB_UHINTESET_RXRSMIES_MASK;

			otg_freeze_clock();
80007350:	fe 69 08 00 	mov	r9,-129024
80007354:	72 08       	ld.w	r8,r9[0x0]
80007356:	af a8       	sbr	r8,0xe
80007358:	93 08       	st.w	r9[0x0],r8
8000735a:	e0 8f 02 e8 	bral	8000792a <otg_interrupt+0x69a>
			uhd_sleep_mode(UHD_STATE_SUSPEND);
		}
		return; // Abort SOF events
	}
	// Manage a delay to exit of suspend
	if (uhd_resume_start) {
8000735e:	e0 69 09 9e 	mov	r9,2462
80007362:	13 88       	ld.ub	r8,r9[0x0]
		if (--uhd_resume_start == 0) {
80007364:	58 08       	cp.w	r8,0
80007366:	c1 b0       	breq	8000739c <otg_interrupt+0x10c>
80007368:	20 18       	sub	r8,1
8000736a:	5c 58       	castu.b	r8
8000736c:	b2 88       	st.b	r9[0x0],r8
8000736e:	e0 81 02 de 	brne	8000792a <otg_interrupt+0x69a>
			// Restore pipes unfreezed
			for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
80007372:	fe 69 06 24 	mov	r9,-129500
					uhd_unfreeze_pipe(pipe);
80007376:	e0 6b 09 9d 	mov	r11,2461
	// Manage a delay to exit of suspend
	if (uhd_resume_start) {
		if (--uhd_resume_start == 0) {
			// Restore pipes unfreezed
			for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
8000737a:	e2 6a 00 00 	mov	r10,131072
8000737e:	2f f8       	sub	r8,-1
80007380:	17 8c       	ld.ub	r12,r11[0x0]
80007382:	f8 08 08 4c 	asr	r12,r12,r8
					uhd_unfreeze_pipe(pipe);
80007386:	ed bc 00 00 	bld	r12,0x0
	}
	// Manage a delay to exit of suspend
	if (uhd_resume_start) {
		if (--uhd_resume_start == 0) {
			// Restore pipes unfreezed
			for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
8000738a:	c0 21       	brne	8000738e <otg_interrupt+0xfe>
8000738c:	93 0a       	st.w	r9[0x0],r10
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
					uhd_unfreeze_pipe(pipe);
				}
			}
			uhc_notify_resume();
8000738e:	2f c9       	sub	r9,-4
80007390:	58 68       	cp.w	r8,6
80007392:	cf 61       	brne	8000737e <otg_interrupt+0xee>
80007394:	e0 a0 03 9c 	rcall	80007acc <uhc_notify_resume>
		}
		return; // Abort SOF events
	}
	// Manage the timeout on endpoint control transfer
	if (uhd_ctrl_request_timeout) {
80007398:	e0 8f 02 c9 	bral	8000792a <otg_interrupt+0x69a>
8000739c:	e0 68 3f bc 	mov	r8,16316
		// Setup request on-going
		if (--uhd_ctrl_request_timeout == 0) {
800073a0:	90 09       	ld.sh	r9,r8[0x0]
800073a2:	58 09       	cp.w	r9,0
800073a4:	c0 f0       	breq	800073c2 <otg_interrupt+0x132>
800073a6:	90 09       	ld.sh	r9,r8[0x0]
800073a8:	20 19       	sub	r9,1
			// Stop request
			uhd_freeze_pipe(0);
800073aa:	b0 09       	st.h	r8[0x0],r9
800073ac:	90 08       	ld.sh	r8,r8[0x0]
800073ae:	58 08       	cp.w	r8,0
800073b0:	c0 91       	brne	800073c2 <otg_interrupt+0x132>
			uhd_ctrl_request_end(UHD_TRANS_TIMEOUT);
800073b2:	e2 69 00 00 	mov	r9,131072
800073b6:	fe 68 05 f0 	mov	r8,-129552
800073ba:	30 7c       	mov	r12,7
800073bc:	91 09       	st.w	r8[0x0],r9
	}
	// Manage the timeouts on endpoint transfer
	uhd_pipe_job_t *ptr_job;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		ptr_job = &uhd_pipe_job[pipe-1];
		if (ptr_job->busy == true) {
800073be:	fe b0 fc 4f 	rcall	80006c5c <uhd_ctrl_request_end>
800073c2:	e0 67 09 24 	mov	r7,2340
			if (ptr_job->timeout) {
				// Timeout enabled on this job
				if (--ptr_job->timeout == 0) {
800073c6:	30 06       	mov	r6,0
800073c8:	6e 08       	ld.w	r8,r7[0x0]
800073ca:	58 08       	cp.w	r8,0
	// Manage the timeouts on endpoint transfer
	uhd_pipe_job_t *ptr_job;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		ptr_job = &uhd_pipe_job[pipe-1];
		if (ptr_job->busy == true) {
			if (ptr_job->timeout) {
800073cc:	c0 f4       	brge	800073ea <otg_interrupt+0x15a>
800073ce:	8e 19       	ld.sh	r9,r7[0x2]
				// Timeout enabled on this job
				if (--ptr_job->timeout == 0) {
800073d0:	f2 c8 00 01 	sub	r8,r9,1
800073d4:	5c 88       	casts.h	r8
					// Abort job
					uhd_ep_abort_pipe(pipe,UHD_TRANS_TIMEOUT);
800073d6:	58 09       	cp.w	r9,0
800073d8:	c0 90       	breq	800073ea <otg_interrupt+0x15a>
800073da:	ae 18       	st.h	r7[0x2],r8
800073dc:	58 08       	cp.w	r8,0
800073de:	c0 61       	brne	800073ea <otg_interrupt+0x15a>
800073e0:	ec cc ff ff 	sub	r12,r6,-1
			uhd_ctrl_request_end(UHD_TRANS_TIMEOUT);
		}
	}
	// Manage the timeouts on endpoint transfer
	uhd_pipe_job_t *ptr_job;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
800073e4:	30 7b       	mov	r11,7
800073e6:	fe b0 fa fd 	rcall	800069e0 <uhd_ep_abort_pipe>
				}
			}
		}
	}
	// Notify the UHC
	uhc_notify_sof(false);
800073ea:	2f f6       	sub	r6,-1
800073ec:	2e c7       	sub	r7,-20

	// Notify the user application
	UHC_SOF_EVENT();
800073ee:	58 66       	cp.w	r6,6
800073f0:	ce c1       	brne	800073c8 <otg_interrupt+0x138>
800073f2:	30 0c       	mov	r12,0
800073f4:	e0 a0 03 1c 	rcall	80007a2c <uhc_notify_sof>
800073f8:	fe b0 f1 fb 	rcall	800057ee <usb_sof>
800073fc:	e0 8f 02 97 	bral	8000792a <otg_interrupt+0x69a>
80007400:	fe 69 00 00 	mov	r9,-131072
80007404:	f2 fc 04 04 	ld.w	r12,r9[1028]
80007408:	f2 f8 04 10 	ld.w	r8,r9[1040]
8000740c:	a9 8c       	lsr	r12,0x8
8000740e:	f9 e8 02 8c 	and	r12,r12,r8>>0x8
80007412:	a7 bc       	sbr	r12,0x7
80007414:	5c 9c       	brev	r12
80007416:	f8 0c 12 00 	clz	r12,r12
8000741a:	e0 81 01 1d 	brne	80007654 <otg_interrupt+0x3c4>
8000741e:	30 78       	mov	r8,7
80007420:	f3 48 06 20 	st.w	r9[1568],r8
80007424:	fe 68 05 30 	mov	r8,-129744
80007428:	70 09       	ld.w	r9,r8[0x0]
8000742a:	ed b9 00 02 	bld	r9,0x2
		uhd_sof_interrupt();
		return;
	}

	// Manage pipe interrupts
	pipe_int = uhd_get_interrupt_pipe_number();
8000742e:	c4 71       	brne	800074bc <otg_interrupt+0x22c>
80007430:	fe 6b 05 f0 	mov	r11,-129552
80007434:	e2 6a 00 00 	mov	r10,131072
80007438:	97 0a       	st.w	r11[0x0],r10
8000743a:	30 49       	mov	r9,4
8000743c:	fe 68 05 60 	mov	r8,-129696
80007440:	91 09       	st.w	r8[0x0],r9
80007442:	18 9e       	mov	lr,r12
80007444:	e0 69 3f b0 	mov	r9,16304
	if (pipe_int == 0) {
80007448:	72 09       	ld.w	r9,r9[0x0]
{
	// A setup request is on-going
	Assert(uhd_ctrl_request_timeout!=0);

	// Disable setup, IN and OUT interrupts of control endpoint
	AVR32_USBB.upcon0clr = AVR32_USBB_UPCON0CLR_TXSTPEC_MASK
8000744a:	13 97       	ld.ub	r7,r9[0x1]
8000744c:	f8 07 18 00 	cp.b	r7,r12
			| AVR32_USBB_UPCON0CLR_RXINEC_MASK
			| AVR32_USBB_UPCON0CLR_TXOUTEC_MASK;

	// Search event on control endpoint
	if (Is_uhd_setup_ready(0)) {
80007450:	c1 64       	brge	8000747c <otg_interrupt+0x1ec>
80007452:	fe 6c 05 00 	mov	r12,-129792
80007456:	78 09       	ld.w	r9,r12[0x0]
80007458:	e0 19 fc ff 	andl	r9,0xfcff
		// SETUP packet sent
		uhd_freeze_pipe(0);
8000745c:	a9 a9       	sbr	r9,0x8
8000745e:	99 09       	st.w	r12[0x0],r9
80007460:	30 19       	mov	r9,1
80007462:	91 09       	st.w	r8[0x0],r9
80007464:	e0 6c 00 80 	mov	r12,128
		uhd_ack_setup_ready(0);
80007468:	91 0c       	st.w	r8[0x0],r12
8000746a:	97 09       	st.w	r11[0x0],r9
8000746c:	fe 68 06 20 	mov	r8,-129504
		Assert(uhd_ctrl_request_phase == UHD_CTRL_REQ_PHASE_SETUP);

		// Start DATA phase
		if ((uhd_ctrl_request_first->req.bmRequestType & USB_REQ_DIR_MASK)
80007470:	e0 69 40 00 	mov	r9,16384
80007474:	91 09       	st.w	r8[0x0],r9
80007476:	91 0a       	st.w	r8[0x0],r10
80007478:	30 29       	mov	r9,2
8000747a:	c1 e8       	rjmp	800074b6 <otg_interrupt+0x226>
 * \brief Starts the DATA IN phase on control endpoint
 */
static void uhd_ctrl_phase_data_in_start(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_IN;
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_IN);
8000747c:	f3 3e 00 08 	ld.ub	lr,r9[8]
80007480:	13 f9       	ld.ub	r9,r9[0x7]
80007482:	fd e9 10 89 	or	r9,lr,r9<<0x8
80007486:	f8 09 19 00 	cp.h	r9,r12
	uhd_ack_in_received(0);
8000748a:	e0 81 00 bf 	brne	80007608 <otg_interrupt+0x378>
	uhd_ack_short_packet(0);
8000748e:	fe 6c 05 00 	mov	r12,-129792
80007492:	78 09       	ld.w	r9,r12[0x0]
	uhd_enable_in_received_interrupt(0);
80007494:	e0 19 fc ff 	andl	r9,0xfcff
	uhd_ack_fifocon(0);
80007498:	a9 a9       	sbr	r9,0x8
8000749a:	99 09       	st.w	r12[0x0],r9
8000749c:	30 19       	mov	r9,1
8000749e:	91 09       	st.w	r8[0x0],r9
	uhd_unfreeze_pipe(0);
800074a0:	e0 6c 00 80 	mov	r12,128
 * \internal
 * \brief Starts the DATA IN phase on control endpoint
 */
static void uhd_ctrl_phase_data_in_start(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_IN;
800074a4:	91 0c       	st.w	r8[0x0],r12
		// Start DATA phase
		if ((uhd_ctrl_request_first->req.bmRequestType & USB_REQ_DIR_MASK)
				== USB_REQ_DIR_IN ) {
			uhd_ctrl_phase_data_in_start();
		} else {
			if (uhd_ctrl_request_first->req.wLength) {
800074a6:	97 09       	st.w	r11[0x0],r9
800074a8:	fe 68 06 20 	mov	r8,-129504
800074ac:	e0 69 40 00 	mov	r9,16384
800074b0:	91 09       	st.w	r8[0x0],r9
800074b2:	91 0a       	st.w	r8[0x0],r10
800074b4:	30 39       	mov	r9,3
800074b6:	e0 68 3f ac 	mov	r8,16300
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_IN);
800074ba:	c6 c9       	rjmp	80007792 <otg_interrupt+0x502>
800074bc:	70 0c       	ld.w	r12,r8[0x0]
800074be:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800074c2:	e0 80 00 8d 	breq	800075dc <otg_interrupt+0x34c>
	uhd_ack_in_received(0);
800074c6:	fe 69 05 c0 	mov	r9,-129600
	uhd_ack_short_packet(0);
800074ca:	72 08       	ld.w	r8,r9[0x0]
800074cc:	ed b8 00 11 	bld	r8,0x11
	uhd_enable_in_received_interrupt(0);
800074d0:	cf d1       	brne	800074ca <otg_interrupt+0x23a>
	uhd_ack_fifocon(0);
800074d2:	fe 68 05 60 	mov	r8,-129696
800074d6:	30 19       	mov	r9,1
800074d8:	91 09       	st.w	r8[0x0],r9
800074da:	e0 68 3f ac 	mov	r8,16300
 * \internal
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
800074de:	70 08       	ld.w	r8,r8[0x0]
800074e0:	58 28       	cp.w	r8,2
800074e2:	c0 50       	breq	800074ec <otg_interrupt+0x25c>
				uhd_ctrl_phase_zlp_in();
			}
		}
		return;
	}
	if (Is_uhd_in_received(0)) {
800074e4:	58 38       	cp.w	r8,3
800074e6:	e0 81 02 22 	brne	8000792a <otg_interrupt+0x69a>
800074ea:	c7 78       	rjmp	800075d8 <otg_interrupt+0x348>
800074ec:	fe 68 05 30 	mov	r8,-129744
		// In case of low USB speed and with a high CPU frequency,
		// a ACK from host can be always running on USB line
		// then wait end of ACK on IN pipe.
		while(!Is_uhd_pipe_frozen(0));
800074f0:	30 02       	mov	r2,0
800074f2:	ea 12 d0 00 	orh	r2,0xd000
800074f6:	70 06       	ld.w	r6,r8[0x0]
800074f8:	e0 63 3f b0 	mov	r3,16304

		// IN packet received
		uhd_ack_in_received(0);
800074fc:	70 00       	ld.w	r0,r8[0x0]
800074fe:	ed d6 c2 88 	bfextu	r6,r6,0x14,0x8
		switch(uhd_ctrl_request_phase) {
80007502:	30 07       	mov	r7,0
80007504:	30 04       	mov	r4,0
80007506:	e0 65 3f b4 	mov	r5,16308
8000750a:	fe 61 04 24 	mov	r1,-130012
8000750e:	c1 08       	rjmp	8000752e <otg_interrupt+0x29e>
80007510:	05 39       	ld.ub	r9,r2++
	bool b_short_packet;
	uint8_t *ptr_ep_data;
	uint8_t nb_byte_received;

	// Get information to read data
	nb_byte_received = uhd_byte_count(0);
80007512:	74 38       	ld.w	r8,r10[0xc]
80007514:	10 c9       	st.b	r8++,r9
	//! In HUB mode, the control pipe is always configured to 64B
	//! thus the short packet flag must be computed
	b_short_packet = (nb_byte_received != uhd_get_pipe_size(0));
	uhd_ack_short_packet(0);
#else
	b_short_packet = Is_uhd_short_packet(0);
80007516:	95 38       	st.w	r10[0xc],r8
80007518:	8a 08       	ld.sh	r8,r5[0x0]
8000751a:	2f f8       	sub	r8,-1
	bool b_short_packet;
	uint8_t *ptr_ep_data;
	uint8_t nb_byte_received;

	// Get information to read data
	nb_byte_received = uhd_byte_count(0);
8000751c:	aa 08       	st.h	r5[0x0],r8
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
8000751e:	ed de c0 08 	bfextu	r6,lr,0x0,0x8
	bool b_short_packet;
	uint8_t *ptr_ep_data;
	uint8_t nb_byte_received;

	// Get information to read data
	nb_byte_received = uhd_byte_count(0);
80007522:	66 08       	ld.w	r8,r3[0x0]
80007524:	f1 09 00 10 	ld.sh	r9,r8[16]
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
80007528:	20 19       	sub	r9,1
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
		uhd_ctrl_nb_trans++;
8000752a:	f1 59 00 10 	st.h	r8[16],r9

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
8000752e:	66 0a       	ld.w	r10,r3[0x0]
80007530:	ee 06 18 00 	cp.b	r6,r7

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
80007534:	5f 18       	srne	r8
80007536:	f5 09 00 10 	ld.sh	r9,r10[16]
		uhd_ctrl_nb_trans++;
8000753a:	ec ce 00 01 	sub	lr,r6,1
8000753e:	e8 09 19 00 	cp.h	r9,r4
		uhd_ctrl_request_first->payload_size--;
		nb_byte_received--;
80007542:	5f 1c       	srne	r12
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
		uhd_ctrl_nb_trans++;
		uhd_ctrl_request_first->payload_size--;
80007544:	f4 cb ff f4 	sub	r11,r10,-12
80007548:	f1 ec 00 0c 	and	r12,r8,r12
8000754c:	ee 0c 18 00 	cp.b	r12,r7
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
80007550:	ce 01       	brne	80007510 <otg_interrupt+0x280>
80007552:	e8 09 19 00 	cp.h	r9,r4
80007556:	5f 09       	sreq	r9
80007558:	12 68       	and	r8,r9
8000755a:	ee 08 18 00 	cp.b	r8,r7
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
		uhd_ctrl_nb_trans++;
		uhd_ctrl_request_first->payload_size--;
		nb_byte_received--;
8000755e:	c0 b0       	breq	80007574 <otg_interrupt+0x2e4>
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
80007560:	74 58       	ld.w	r8,r10[0x14]
80007562:	58 08       	cp.w	r8,0
80007564:	c1 60       	breq	80007590 <otg_interrupt+0x300>
		nb_byte_received--;
	}

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
80007566:	62 0c       	ld.w	r12,r1[0x0]
80007568:	2f 0a       	sub	r10,-16
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
8000756a:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
8000756e:	5d 18       	icall	r8
80007570:	cd f1       	brne	8000752e <otg_interrupt+0x29e>
80007572:	c0 f8       	rjmp	80007590 <otg_interrupt+0x300>
		uhd_ctrl_nb_trans++;
		uhd_ctrl_request_first->payload_size--;
		nb_byte_received--;
	}

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
80007574:	f5 38 00 08 	ld.ub	r8,r10[8]
80007578:	e0 69 3f b4 	mov	r9,16308
8000757c:	15 fa       	ld.ub	r10,r10[0x7]
8000757e:	92 09       	ld.sh	r9,r9[0x0]
80007580:	f1 ea 10 88 	or	r8,r8,r10<<0x8
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
80007584:	f0 09 19 00 	cp.h	r9,r8
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
80007588:	c0 40       	breq	80007590 <otg_interrupt+0x300>
		nb_byte_received--;
	}

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
8000758a:	e2 10 00 80 	andl	r0,0x80,COH
8000758e:	c1 90       	breq	800075c0 <otg_interrupt+0x330>
80007590:	fe 69 05 00 	mov	r9,-129792
80007594:	72 08       	ld.w	r8,r9[0x0]
80007596:	e0 18 fc ff 	andl	r8,0xfcff
8000759a:	a9 b8       	sbr	r8,0x9
8000759c:	93 08       	st.w	r9[0x0],r8
8000759e:	30 28       	mov	r8,2
800075a0:	fe 69 05 60 	mov	r9,-129696
		// thus the data load can restart.
		goto uhd_ctrl_receiv_in_read_data;
	}

	// Test short packet
	if ((uhd_ctrl_nb_trans == uhd_ctrl_request_first->req.wLength)
800075a4:	93 08       	st.w	r9[0x0],r8
800075a6:	fe 69 05 f0 	mov	r9,-129552
800075aa:	93 08       	st.w	r9[0x0],r8
800075ac:	e0 69 40 00 	mov	r9,16384
800075b0:	fe 68 06 20 	mov	r8,-129504
800075b4:	91 09       	st.w	r8[0x0],r9
800075b6:	30 4a       	mov	r10,4
800075b8:	e0 69 3f ac 	mov	r9,16300
800075bc:	93 0a       	st.w	r9[0x0],r10
 * \brief Starts the ZLP OUT phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_out(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_OUT;
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
800075be:	c0 a8       	rjmp	800075d2 <otg_interrupt+0x342>
800075c0:	30 19       	mov	r9,1
800075c2:	fe 68 05 f0 	mov	r8,-129552
800075c6:	91 09       	st.w	r8[0x0],r9
800075c8:	fe 68 06 20 	mov	r8,-129504
	uhd_ack_out_ready(0);
800075cc:	e0 69 40 00 	mov	r9,16384
800075d0:	91 09       	st.w	r8[0x0],r9
800075d2:	e2 69 00 00 	mov	r9,131072
	uhd_enable_out_ready_interrupt(0);
800075d6:	cd e8       	rjmp	80007792 <otg_interrupt+0x502>
800075d8:	30 0c       	mov	r12,0
	uhd_ack_fifocon(0);
800075da:	c3 a8       	rjmp	8000764e <otg_interrupt+0x3be>
800075dc:	70 09       	ld.w	r9,r8[0x0]
800075de:	ed b9 00 01 	bld	r9,0x1
800075e2:	c1 71       	brne	80007610 <otg_interrupt+0x380>
 * \internal
 * \brief Starts the ZLP OUT phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_out(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_OUT;
800075e4:	e2 69 00 00 	mov	r9,131072
800075e8:	fe 68 05 f0 	mov	r8,-129552
		uhd_ctrl_phase_zlp_out();
		return;
	}

	// Send a new IN packet request
	uhd_enable_in_received_interrupt(0);
800075ec:	91 09       	st.w	r8[0x0],r9
800075ee:	fe 68 05 60 	mov	r8,-129696
800075f2:	30 29       	mov	r9,2
	uhd_ack_fifocon(0);
800075f4:	91 09       	st.w	r8[0x0],r9
800075f6:	e0 68 3f ac 	mov	r8,16300
800075fa:	70 08       	ld.w	r8,r8[0x0]
800075fc:	58 18       	cp.w	r8,1
	uhd_unfreeze_pipe(0);
800075fe:	c0 50       	breq	80007608 <otg_interrupt+0x378>
80007600:	58 48       	cp.w	r8,4
80007602:	e0 81 01 94 	brne	8000792a <otg_interrupt+0x69a>
		switch(uhd_ctrl_request_phase) {
		case UHD_CTRL_REQ_PHASE_DATA_IN:
			uhd_ctrl_phase_data_in();
			break;
		case UHD_CTRL_REQ_PHASE_ZLP_IN:
			uhd_ctrl_request_end(UHD_TRANS_NOERROR);
80007606:	c2 48       	rjmp	8000764e <otg_interrupt+0x3be>
			Assert(false);
			break;
		}
		return;
	}
	if (Is_uhd_out_ready(0)) {
80007608:	fe b0 f8 c8 	rcall	80006798 <uhd_ctrl_phase_data_out>
8000760c:	e0 8f 01 8f 	bral	8000792a <otg_interrupt+0x69a>
		// OUT packet sent
		uhd_freeze_pipe(0);
80007610:	70 09       	ld.w	r9,r8[0x0]
80007612:	e2 19 00 40 	andl	r9,0x40,COH
80007616:	c0 70       	breq	80007624 <otg_interrupt+0x394>
80007618:	34 09       	mov	r9,64
		uhd_ack_out_ready(0);
8000761a:	fe 68 05 60 	mov	r8,-129696
8000761e:	30 4c       	mov	r12,4
80007620:	91 09       	st.w	r8[0x0],r9
		switch(uhd_ctrl_request_phase) {
80007622:	c1 68       	rjmp	8000764e <otg_interrupt+0x3be>
80007624:	70 08       	ld.w	r8,r8[0x0]
80007626:	ed b8 00 03 	bld	r8,0x3
8000762a:	e0 81 01 80 	brne	8000792a <otg_interrupt+0x69a>
8000762e:	fe 6a 06 80 	mov	r10,-129408
		case UHD_CTRL_REQ_PHASE_DATA_OUT:
			uhd_ctrl_phase_data_out();
80007632:	74 08       	ld.w	r8,r10[0x0]
80007634:	95 09       	st.w	r10[0x0],r9
80007636:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
			Assert(false);
			break;
		}
		return;
	}
	if (Is_uhd_stall(0)) {
8000763a:	20 18       	sub	r8,1
8000763c:	58 28       	cp.w	r8,2
8000763e:	e0 88 00 04 	brls	80007646 <otg_interrupt+0x3b6>
		// Stall Handshake received
		uhd_ack_stall(0);
80007642:	30 6c       	mov	r12,6
80007644:	c0 58       	rjmp	8000764e <otg_interrupt+0x3be>
80007646:	fe c9 e1 12 	sub	r9,pc,-7918
8000764a:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		uhd_ctrl_request_end(UHD_TRANS_STALL);
		return;
	}
	if (Is_uhd_pipe_error(0)) {
8000764e:	fe b0 fb 07 	rcall	80006c5c <uhd_ctrl_request_end>
80007652:	c6 c9       	rjmp	8000792a <otg_interrupt+0x69a>
80007654:	30 78       	mov	r8,7
80007656:	f0 0c 18 00 	cp.b	r12,r8
 *
 * \return UHD transfer error
 */
static uhd_trans_status_t uhd_pipe_get_error(uint8_t pipe)
{
	uint32_t error = uhd_error_status(pipe) &
8000765a:	c6 60       	breq	80007726 <otg_interrupt+0x496>
8000765c:	f8 08 15 02 	lsl	r8,r12,0x2
			(AVR32_USBB_UPERR0_DATATGL_MASK |
			AVR32_USBB_UPERR0_TIMEOUT_MASK |
			AVR32_USBB_UPERR0_PID_MASK |
			AVR32_USBB_UPERR0_DATAPID_MASK);
	uhd_ack_all_errors(pipe);
80007660:	fe 6b 05 c0 	mov	r11,-129600
80007664:	f0 0b 00 0a 	add	r10,r8,r11
80007668:	74 09       	ld.w	r9,r10[0x0]
8000766a:	ed b9 00 0c 	bld	r9,0xc
8000766e:	c1 11       	brne	80007690 <otg_interrupt+0x400>
80007670:	fe 6b 05 30 	mov	r11,-129744
80007674:	f0 0b 00 09 	add	r9,r8,r11
		uhd_ctrl_request_end(UHD_TRANS_STALL);
		return;
	}
	if (Is_uhd_pipe_error(0)) {
		// Get and ack error
		uhd_ctrl_request_end(uhd_pipe_get_error(0));
80007678:	72 0b       	ld.w	r11,r9[0x0]
8000767a:	f7 db c1 82 	bfextu	r11,r11,0xc,0x2
	if (pipe_int == 0) {
		// Interrupt acked by control endpoint managed
		uhd_ctrl_interrupt();
		return;
	}
	if (pipe_int != AVR32_USBB_EPT_NUM) {
8000767e:	c0 91       	brne	80007690 <otg_interrupt+0x400>
80007680:	e0 38 f9 e0 	sub	r8,129504
 *
 * \param pipe  Pipe number
 */
static void uhd_pipe_interrupt(uint8_t pipe)
{
	if (Is_uhd_bank_interrupt_enabled(pipe) && (0==uhd_nb_busy_bank(pipe))) {
80007684:	e0 69 10 00 	mov	r9,4096
80007688:	91 09       	st.w	r8[0x0],r9
8000768a:	fe b0 f9 6f 	rcall	80006968 <uhd_pipe_finish_job>
8000768e:	c4 e9       	rjmp	8000792a <otg_interrupt+0x69a>
80007690:	74 09       	ld.w	r9,r10[0x0]
80007692:	ed b9 00 01 	bld	r9,0x1
80007696:	c1 b1       	brne	800076cc <otg_interrupt+0x43c>
80007698:	fe 6a 05 30 	mov	r10,-129744
8000769c:	f0 0a 00 09 	add	r9,r8,r10
800076a0:	72 09       	ld.w	r9,r9[0x0]
800076a2:	ed b9 00 01 	bld	r9,0x1
800076a6:	c1 31       	brne	800076cc <otg_interrupt+0x43c>
		uhd_disable_bank_interrupt(pipe);
800076a8:	30 2a       	mov	r10,2
800076aa:	fe 6c 06 20 	mov	r12,-129504
800076ae:	f0 0c 00 09 	add	r9,r8,r12
		uhd_pipe_finish_job(pipe, UHD_TRANS_NOERROR);
800076b2:	93 0a       	st.w	r9[0x0],r10
800076b4:	fe 6c 05 60 	mov	r12,-129696
800076b8:	f0 0c 00 0b 	add	r11,r8,r12
800076bc:	97 0a       	st.w	r11[0x0],r10
800076be:	e0 6a 40 00 	mov	r10,16384
800076c2:	93 0a       	st.w	r9[0x0],r10
800076c4:	e2 6a 00 00 	mov	r10,131072
800076c8:	93 0a       	st.w	r9[0x0],r10
800076ca:	c6 08       	rjmp	8000778a <otg_interrupt+0x4fa>
800076cc:	fe 6b 05 30 	mov	r11,-129744
		return;
	}
	if (Is_uhd_out_ready_interrupt_enabled(pipe) && Is_uhd_out_ready(pipe)) {
800076d0:	f0 0b 00 0a 	add	r10,r8,r11
800076d4:	74 09       	ld.w	r9,r10[0x0]
800076d6:	e2 19 00 40 	andl	r9,0x40,COH
800076da:	c0 e0       	breq	800076f6 <otg_interrupt+0x466>
800076dc:	fe 6a 05 60 	mov	r10,-129696
800076e0:	f0 0a 00 09 	add	r9,r8,r10
800076e4:	34 0a       	mov	r10,64
800076e6:	93 0a       	st.w	r9[0x0],r10
		uhd_disable_out_ready_interrupt(pipe);
800076e8:	e0 38 fa 10 	sub	r8,129552
800076ec:	e4 69 00 00 	mov	r9,262144
800076f0:	30 4b       	mov	r11,4
800076f2:	91 09       	st.w	r8[0x0],r9
		// One bank is free then send a ZLP
		uhd_ack_out_ready(pipe);
800076f4:	c1 68       	rjmp	80007720 <otg_interrupt+0x490>
800076f6:	74 0a       	ld.w	r10,r10[0x0]
800076f8:	ed ba 00 03 	bld	r10,0x3
800076fc:	e0 81 01 17 	brne	8000792a <otg_interrupt+0x69a>
		uhd_ack_fifocon(pipe);
80007700:	e0 38 f9 80 	sub	r8,129408
		uhd_unfreeze_pipe(pipe);
80007704:	70 0a       	ld.w	r10,r8[0x0]
80007706:	91 09       	st.w	r8[0x0],r9
80007708:	f1 da c0 04 	bfextu	r8,r10,0x0,0x4
		uhd_enable_bank_interrupt(pipe);
		return;
	}
	if (Is_uhd_stall(pipe)) {
8000770c:	20 18       	sub	r8,1
8000770e:	58 28       	cp.w	r8,2
80007710:	e0 88 00 04 	brls	80007718 <otg_interrupt+0x488>
80007714:	30 6b       	mov	r11,6
80007716:	c0 58       	rjmp	80007720 <otg_interrupt+0x490>
80007718:	fe c9 e1 e4 	sub	r9,pc,-7708
		uhd_ack_stall(pipe);
8000771c:	f2 08 03 2b 	ld.w	r11,r9[r8<<0x2]
80007720:	fe b0 f9 60 	rcall	800069e0 <uhd_ep_abort_pipe>
80007724:	c0 39       	rjmp	8000792a <otg_interrupt+0x69a>
80007726:	f2 fc 04 04 	ld.w	r12,r9[1028]
		uhd_reset_data_toggle(pipe);
8000772a:	f2 fb 04 10 	ld.w	r11,r9[1040]
8000772e:	b9 9c       	lsr	r12,0x19
		uhd_ep_abort_pipe(pipe, UHD_TRANS_STALL);
80007730:	f9 eb 03 9c 	and	r12,r12,r11>>0x19
		uhd_enable_bank_interrupt(pipe);
		return;
	}
	if (Is_uhd_stall(pipe)) {
		uhd_ack_stall(pipe);
		uhd_reset_data_toggle(pipe);
80007734:	a7 ac       	sbr	r12,0x6
		uhd_ep_abort_pipe(pipe, UHD_TRANS_STALL);
		return;
	}
	if (Is_uhd_pipe_error(pipe)) {
80007736:	5c 9c       	brev	r12
80007738:	f8 0c 12 00 	clz	r12,r12
8000773c:	2f fc       	sub	r12,-1
8000773e:	f0 0c 18 00 	cp.b	r12,r8
 *
 * \return UHD transfer error
 */
static uhd_trans_status_t uhd_pipe_get_error(uint8_t pipe)
{
	uint32_t error = uhd_error_status(pipe) &
80007742:	c4 10       	breq	800077c4 <otg_interrupt+0x534>
80007744:	f8 08 15 04 	lsl	r8,r12,0x4
			(AVR32_USBB_UPERR0_DATATGL_MASK |
			AVR32_USBB_UPERR0_TIMEOUT_MASK |
			AVR32_USBB_UPERR0_PID_MASK |
			AVR32_USBB_UPERR0_DATAPID_MASK);
	uhd_ack_all_errors(pipe);
80007748:	e0 38 f9 00 	sub	r8,129280
8000774c:	70 39       	ld.w	r9,r8[0xc]
8000774e:	ed b9 00 00 	bld	r9,0x0
80007752:	e0 80 00 ec 	breq	8000792a <otg_interrupt+0x69a>
80007756:	70 39       	ld.w	r9,r8[0xc]
80007758:	b1 89       	lsr	r9,0x10
8000775a:	c0 d0       	breq	80007774 <otg_interrupt+0x4e4>
8000775c:	e0 6a 09 24 	mov	r10,2340
		uhd_ep_abort_pipe(pipe, UHD_TRANS_STALL);
		return;
	}
	if (Is_uhd_pipe_error(pipe)) {
		// Get and ack error
		uhd_ep_abort_pipe(pipe, uhd_pipe_get_error(pipe));
80007760:	f8 c8 00 01 	sub	r8,r12,1
	if (pipe_int != AVR32_USBB_EPT_NUM) {
		// Interrupt acked by bulk/interrupt/isochronous endpoint
		uhd_pipe_interrupt(pipe_int);
		return;
	}
	pipe_int = uhd_get_pipe_dma_interrupt_number();
80007764:	f0 08 00 28 	add	r8,r8,r8<<0x2
80007768:	f4 08 00 28 	add	r8,r10,r8<<0x2
8000776c:	70 3a       	ld.w	r10,r8[0xc]
8000776e:	12 1a       	sub	r10,r9
80007770:	91 2a       	st.w	r8[0x8],r10
80007772:	91 3a       	st.w	r8[0xc],r10
80007774:	f8 08 15 02 	lsl	r8,r12,0x2
80007778:	fe 6b 05 00 	mov	r11,-129792
	if (pipe_int != AVR32_USBB_EPT_NUM) {
8000777c:	f0 0b 00 0a 	add	r10,r8,r11
80007780:	74 0a       	ld.w	r10,r10[0x0]
static void uhd_pipe_interrupt_dma(uint8_t pipe)
{
	uhd_pipe_job_t *ptr_job;
	uint32_t nb_remaining;

	if (uhd_pipe_dma_get_status(pipe)
80007782:	f5 da c1 02 	bfextu	r10,r10,0x8,0x2
80007786:	58 2a       	cp.w	r10,2
80007788:	c0 71       	brne	80007796 <otg_interrupt+0x506>
8000778a:	e0 38 fa 10 	sub	r8,129552
8000778e:	e0 69 10 00 	mov	r9,4096
80007792:	91 09       	st.w	r8[0x0],r9
			& AVR32_USBB_UHDMA1_STATUS_CH_EN_MASK) {
		return; // Ignore EOT_STA interrupt
	}
	// Save number of data no transfered
	nb_remaining = (uhd_pipe_dma_get_status(pipe) &
80007794:	cc b8       	rjmp	8000792a <otg_interrupt+0x69a>
80007796:	fe 6a 05 c0 	mov	r10,-129600
			AVR32_USBB_UHDMA1_STATUS_CH_BYTE_CNT_MASK)
			>> AVR32_USBB_UHDMA1_STATUS_CH_BYTE_CNT_OFFSET;
	if (nb_remaining) {
		// Get job corresponding at endpoint
		ptr_job = &uhd_pipe_job[pipe - 1];
8000779a:	f0 0a 00 0b 	add	r11,r8,r10
8000779e:	76 0a       	ld.w	r10,r11[0x0]
800077a0:	ed ba 00 11 	bld	r10,0x11
800077a4:	c0 d0       	breq	800077be <otg_interrupt+0x52e>
800077a6:	58 09       	cp.w	r9,0

		// Transfer no complete (short packet or ZLP) then:
		// Update number of transfered data
		ptr_job->nb_trans -= nb_remaining;
800077a8:	c0 70       	breq	800077b6 <otg_interrupt+0x526>
800077aa:	e0 38 fa 10 	sub	r8,129552
800077ae:	e2 69 00 00 	mov	r9,131072

		// Set transfer complete to stop the transfer
		ptr_job->buf_size = ptr_job->nb_trans;
	}

	if (uhd_is_pipe_out(pipe)) {
800077b2:	91 09       	st.w	r8[0x0],r9
800077b4:	c0 58       	rjmp	800077be <otg_interrupt+0x52e>
800077b6:	76 08       	ld.w	r8,r11[0x0]
800077b8:	ed b8 00 11 	bld	r8,0x11
800077bc:	cf d1       	brne	800077b6 <otg_interrupt+0x526>
800077be:	fe b0 f9 41 	rcall	80006a40 <uhd_pipe_trans_complet>
800077c2:	cb 48       	rjmp	8000792a <otg_interrupt+0x69a>
800077c4:	74 08       	ld.w	r8,r10[0x0]
		// Wait that all banks are free to freeze clock of OUT endpoint
		// and call callback
		uhd_enable_bank_interrupt(pipe);
800077c6:	e2 18 00 04 	andl	r8,0x4,COH
800077ca:	c0 d0       	breq	800077e4 <otg_interrupt+0x554>
800077cc:	fe 68 04 08 	mov	r8,-130040
800077d0:	30 49       	mov	r9,4
	} else {
		if (!Is_uhd_pipe_frozen(pipe)) {
800077d2:	91 09       	st.w	r8[0x0],r9
800077d4:	e0 68 09 20 	mov	r8,2336
800077d8:	70 08       	ld.w	r8,r8[0x0]
800077da:	58 08       	cp.w	r8,0
800077dc:	e0 80 00 a7 	breq	8000792a <otg_interrupt+0x69a>
800077e0:	5d 18       	icall	r8
			// Pipe is not freeze in case of :
			// - incomplete transfer when the request number INRQ is not complete.
			// - low USB speed and with a high CPU frequency,
			// a ACK from host can be always running on USB line.

			if (nb_remaining) {
800077e2:	ca 48       	rjmp	8000792a <otg_interrupt+0x69a>
800077e4:	74 0a       	ld.w	r10,r10[0x0]
				// Freeze pipe in case of incomplete transfer
				uhd_freeze_pipe(pipe);
800077e6:	ed ba 00 01 	bld	r10,0x1
800077ea:	c2 31       	brne	80007830 <otg_interrupt+0x5a0>
800077ec:	fe 6a 04 10 	mov	r10,-130032
800077f0:	74 0a       	ld.w	r10,r10[0x0]
			} else {
				// Wait freeze in case of ASK on going
				while (!Is_uhd_pipe_frozen(pipe)) {
800077f2:	ed ba 00 01 	bld	r10,0x1
800077f6:	c1 d1       	brne	80007830 <otg_interrupt+0x5a0>
800077f8:	30 2a       	mov	r10,2
				}
			}
		}
		uhd_pipe_trans_complet(pipe);
800077fa:	fe 6b 04 08 	mov	r11,-130040
800077fe:	97 0a       	st.w	r11[0x0],r10
		// Interrupt DMA acked by bulk/interrupt/isochronous endpoint
		uhd_pipe_interrupt_dma(pipe_int);
		return;
	}
	// USB bus reset detection
	if (Is_uhd_reset_sent()) {
80007800:	fe 6b 04 14 	mov	r11,-130028
80007804:	97 0a       	st.w	r11[0x0],r10
80007806:	fe 6b 04 00 	mov	r11,-130048
		uhd_ack_reset_sent();
8000780a:	76 0a       	ld.w	r10,r11[0x0]
8000780c:	a9 da       	cbr	r10,0x9
8000780e:	97 0a       	st.w	r11[0x0],r10
		if (uhd_reset_callback != NULL) {
80007810:	35 8a       	mov	r10,88
80007812:	f3 4a 04 14 	st.w	r9[1044],r10
80007816:	fe 69 04 18 	mov	r9,-130024
			uhd_reset_callback();
8000781a:	30 1a       	mov	r10,1
8000781c:	93 0a       	st.w	r9[0x0],r10
		}
		return;
	}

	// Manage dis/connection event
	if (Is_uhd_disconnection() && Is_uhd_disconnection_int_enabled()) {
8000781e:	e0 69 09 9c 	mov	r9,2460
80007822:	10 9c       	mov	r12,r8
80007824:	b2 88       	st.b	r9[0x0],r8
80007826:	e0 69 09 9e 	mov	r9,2462
8000782a:	b2 88       	st.b	r9[0x0],r8
8000782c:	c2 58       	rjmp	80007876 <otg_interrupt+0x5e6>
8000782e:	d7 03       	nop
80007830:	fe 68 04 04 	mov	r8,-130044
		uhd_ack_disconnection();
80007834:	70 08       	ld.w	r8,r8[0x0]
80007836:	ed b8 00 00 	bld	r8,0x0
		uhd_disable_disconnection_int();
8000783a:	c2 11       	brne	8000787c <otg_interrupt+0x5ec>
8000783c:	fe 68 04 10 	mov	r8,-130032
		// Stop reset signal, in case of disconnection during reset
		uhd_stop_reset();
80007840:	70 08       	ld.w	r8,r8[0x0]
80007842:	ed b8 00 00 	bld	r8,0x0
80007846:	c1 b1       	brne	8000787c <otg_interrupt+0x5ec>
80007848:	fe 68 04 08 	mov	r8,-130040
		// Disable wakeup/resumes interrupts,
		// in case of disconnection during suspend mode
		AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_HWUPIEC_MASK
8000784c:	30 1c       	mov	r12,1
8000784e:	91 0c       	st.w	r8[0x0],r12
				| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
				| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
		uhd_sleep_mode(UHD_STATE_DISCONNECT);
		uhd_enable_connection_int();
80007850:	fe 68 04 14 	mov	r8,-130028
80007854:	91 0c       	st.w	r8[0x0],r12
80007856:	fe 68 04 18 	mov	r8,-130024
		uhd_suspend_start = 0;
		uhd_resume_start = 0;
		uhc_notify_connection(false);
8000785a:	30 29       	mov	r9,2
		AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_HWUPIEC_MASK
				| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
				| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
		uhd_sleep_mode(UHD_STATE_DISCONNECT);
		uhd_enable_connection_int();
		uhd_suspend_start = 0;
8000785c:	fe 6a 04 00 	mov	r10,-130048
		uhd_resume_start = 0;
80007860:	91 09       	st.w	r8[0x0],r9
80007862:	74 08       	ld.w	r8,r10[0x0]
80007864:	a9 a8       	sbr	r8,0x8
80007866:	95 08       	st.w	r10[0x0],r8
80007868:	e0 68 09 9c 	mov	r8,2460
8000786c:	30 09       	mov	r9,0
8000786e:	b0 89       	st.b	r8[0x0],r9
80007870:	e0 68 09 9e 	mov	r8,2462
80007874:	b0 89       	st.b	r8[0x0],r9
80007876:	e0 a0 03 43 	rcall	80007efc <uhc_notify_connection>
8000787a:	c5 88       	rjmp	8000792a <otg_interrupt+0x69a>
8000787c:	fe 69 08 04 	mov	r9,-129020
		uhc_notify_connection(false);
		return;
	}
	if (Is_uhd_connection() && Is_uhd_connection_int_enabled()) {
80007880:	72 08       	ld.w	r8,r9[0x0]
80007882:	ed b8 00 03 	bld	r8,0x3
80007886:	c0 81       	brne	80007896 <otg_interrupt+0x606>
80007888:	30 89       	mov	r9,8
8000788a:	fe 68 08 08 	mov	r8,-129016
8000788e:	91 09       	st.w	r8[0x0],r9
80007890:	fe b0 ef ac 	rcall	800057e8 <usb_vbus_error>
80007894:	c4 b8       	rjmp	8000792a <otg_interrupt+0x69a>
80007896:	72 08       	ld.w	r8,r9[0x0]
		uhd_ack_connection();
80007898:	ed b8 00 0e 	bld	r8,0xe
8000789c:	cf d1       	brne	80007896 <otg_interrupt+0x606>
8000789e:	fe 69 08 00 	mov	r9,-129024
		uhd_disable_connection_int();
800078a2:	72 08       	ld.w	r8,r9[0x0]
800078a4:	af c8       	cbr	r8,0xe
		uhd_enable_disconnection_int();
800078a6:	93 08       	st.w	r9[0x0],r8
800078a8:	fe 68 04 10 	mov	r8,-130032
		uhd_enable_sof();
800078ac:	70 08       	ld.w	r8,r8[0x0]
800078ae:	ed b8 00 06 	bld	r8,0x6
800078b2:	c2 51       	brne	800078fc <otg_interrupt+0x66c>
800078b4:	fe 68 04 04 	mov	r8,-130044
		uhd_sleep_mode(UHD_STATE_IDLE);
		uhd_suspend_start = 0;
800078b8:	70 09       	ld.w	r9,r8[0x0]
800078ba:	ed b9 00 06 	bld	r9,0x6
		uhd_resume_start = 0;
800078be:	c0 90       	breq	800078d0 <otg_interrupt+0x640>
800078c0:	70 09       	ld.w	r9,r8[0x0]
		uhc_notify_connection(true);
800078c2:	ed b9 00 03 	bld	r9,0x3
800078c6:	c0 50       	breq	800078d0 <otg_interrupt+0x640>
		return;
	}

	// Manage Vbus error
	if (Is_uhd_vbus_error_interrupt()) {
800078c8:	70 08       	ld.w	r8,r8[0x0]
800078ca:	ed b8 00 04 	bld	r8,0x4
800078ce:	c1 71       	brne	800078fc <otg_interrupt+0x66c>
800078d0:	35 89       	mov	r9,88
800078d2:	fe 68 00 00 	mov	r8,-131072
		uhd_ack_vbus_error_interrupt();
800078d6:	f1 49 04 14 	st.w	r8[1044],r9
800078da:	fe 6a 04 00 	mov	r10,-130048
		UHC_VBUS_ERROR();
800078de:	74 08       	ld.w	r8,r10[0x0]
800078e0:	a9 a8       	sbr	r8,0x8
		return;
	}

	// Check USB clock ready after asynchronous interrupt
	while (!Is_otg_clock_usable());
800078e2:	95 08       	st.w	r10[0x0],r8
800078e4:	fe 69 04 04 	mov	r9,-130044
800078e8:	72 08       	ld.w	r8,r9[0x0]
	otg_unfreeze_clock();
800078ea:	ed b8 00 03 	bld	r8,0x3
800078ee:	c0 20       	breq	800078f2 <otg_interrupt+0x662>
800078f0:	72 08       	ld.w	r8,r9[0x0]
800078f2:	33 29       	mov	r9,50

	if (Is_uhd_wakeup_interrupt_enabled() && (Is_uhd_wakeup() ||
800078f4:	e0 68 09 9e 	mov	r8,2462
800078f8:	b0 89       	st.b	r8[0x0],r9
800078fa:	c1 88       	rjmp	8000792a <otg_interrupt+0x69a>
800078fc:	fe 69 08 04 	mov	r9,-129020
80007900:	72 08       	ld.w	r8,r9[0x0]
80007902:	ed b8 00 01 	bld	r8,0x1
80007906:	c1 21       	brne	8000792a <otg_interrupt+0x69a>
80007908:	30 2a       	mov	r10,2
8000790a:	fe 68 08 08 	mov	r8,-129016
8000790e:	91 0a       	st.w	r8[0x0],r10
80007910:	72 0c       	ld.w	r12,r9[0x0]
80007912:	e2 1c 08 00 	andl	r12,0x800,COH
80007916:	c0 30       	breq	8000791c <otg_interrupt+0x68c>
80007918:	30 1c       	mov	r12,1
8000791a:	c0 68       	rjmp	80007926 <otg_interrupt+0x696>
			Is_uhd_downstream_resume() || Is_uhd_upstream_resume())) {
		// Disable wakeup/resumes interrupts
		AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_HWUPIEC_MASK
8000791c:	fe 69 08 00 	mov	r9,-129024
80007920:	72 08       	ld.w	r8,r9[0x0]
80007922:	af a8       	sbr	r8,0xe
80007924:	93 08       	st.w	r9[0x0],r8
				| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
				| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
		uhd_enable_sof();
80007926:	fe b0 ef 60 	rcall	800057e6 <usb_vbus_change>
8000792a:	fe 68 00 00 	mov	r8,-131072
8000792e:	f0 f8 08 18 	ld.w	r8,r8[2072]
		if ((!Is_uhd_downstream_resume())
80007932:	d4 32       	popm	r0-r7,lr
80007934:	d6 03       	rete
80007936:	d7 03       	nop

80007938 <print_hex>:
  print(usart, tmp);
}


void print_hex(volatile avr32_usart_t *usart, unsigned long n)
{
80007938:	d4 01       	pushm	lr
8000793a:	20 3d       	sub	sp,12
  char tmp[9];
  int i;

  // Convert the given number to an ASCII hexadecimal representation.
  tmp[8] = '\0';
8000793c:	30 08       	mov	r8,0
  // Transmit the resulting string with the given USART.
  print(usart, tmp);
}


void print_hex(volatile avr32_usart_t *usart, unsigned long n)
8000793e:	fa ca 00 01 	sub	r10,sp,1
{
  char tmp[9];
  int i;

  // Convert the given number to an ASCII hexadecimal representation.
  tmp[8] = '\0';
80007942:	fb 68 00 08 	st.b	sp[8],r8
  for (i = 7; i >= 0; i--)
  {
    tmp[i] = HEX_DIGITS[n & 0xF];
80007946:	fe c9 e3 f6 	sub	r9,pc,-7178
{
  char tmp[9];
  int i;

  // Convert the given number to an ASCII hexadecimal representation.
  tmp[8] = '\0';
8000794a:	fa c8 ff f9 	sub	r8,sp,-7
  for (i = 7; i >= 0; i--)
  {
    tmp[i] = HEX_DIGITS[n & 0xF];
8000794e:	fd db c0 04 	bfextu	lr,r11,0x0,0x4
80007952:	f2 0e 07 0e 	ld.ub	lr,r9[lr]
    n >>= 4;
80007956:	b0 8e       	st.b	r8[0x0],lr
80007958:	a5 8b       	lsr	r11,0x4
  char tmp[9];
  int i;

  // Convert the given number to an ASCII hexadecimal representation.
  tmp[8] = '\0';
  for (i = 7; i >= 0; i--)
8000795a:	20 18       	sub	r8,1
8000795c:	14 38       	cp.w	r8,r10


void print(volatile avr32_usart_t *usart, const char *str)
{
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
8000795e:	cf 81       	brne	8000794e <print_hex+0x16>
80007960:	1a 9b       	mov	r11,sp
80007962:	fe b0 f6 53 	rcall	80006608 <usart_write_line>
    n >>= 4;
  }

  // Transmit the resulting string with the given USART.
  print(usart, tmp);
}
80007966:	2f dd       	sub	sp,-12
80007968:	d8 02       	popm	pc
8000796a:	d7 03       	nop

8000796c <print_dbg_hex>:
8000796c:	d4 01       	pushm	lr
8000796e:	18 9b       	mov	r11,r12


void print_dbg_hex(unsigned long n)
{
  // Redirection to the debug USART.
  print_hex(DBG_USART, n);
80007970:	fe 7c 18 00 	mov	r12,-59392
80007974:	ce 2f       	rcall	80007938 <print_hex>
80007976:	d8 02       	popm	pc

80007978 <print_ulong>:
}
80007978:	d4 21       	pushm	r4-r7,lr
8000797a:	20 3d       	sub	sp,12
8000797c:	30 08       	mov	r8,0
8000797e:	1a 99       	mov	r9,sp
{
  char tmp[11];
  int i = sizeof(tmp) - 1;

  // Convert the given number to an ASCII decimal representation.
  tmp[i] = '\0';
80007980:	fb 68 00 0a 	st.b	sp[10],r8
80007984:	30 a8       	mov	r8,10
  do
  {
    tmp[--i] = '0' + n % 10;
80007986:	10 9a       	mov	r10,r8
80007988:	f6 0a 0d 06 	divu	r6,r11,r10
8000798c:	20 18       	sub	r8,1
8000798e:	0e 9b       	mov	r11,r7
80007990:	2d 0b       	sub	r11,-48
80007992:	f2 08 0b 0b 	st.b	r9[r8],r11
    n /= 10;
80007996:	0c 9b       	mov	r11,r6
  } while (n);
80007998:	58 06       	cp.w	r6,0
8000799a:	cf 71       	brne	80007988 <print_ulong+0x10>


void print(volatile avr32_usart_t *usart, const char *str)
{
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
8000799c:	f2 08 00 0b 	add	r11,r9,r8
800079a0:	fe b0 f6 34 	rcall	80006608 <usart_write_line>
    n /= 10;
  } while (n);

  // Transmit the resulting string with the given USART.
  print(usart, tmp + i);
}
800079a4:	2f dd       	sub	sp,-12
800079a6:	d8 22       	popm	r4-r7,pc

800079a8 <print_dbg_ulong>:
800079a8:	d4 01       	pushm	lr
800079aa:	18 9b       	mov	r11,r12


void print_dbg_ulong(unsigned long n)
{
  // Redirection to the debug USART.
  print_ulong(DBG_USART, n);
800079ac:	fe 7c 18 00 	mov	r12,-59392
800079b0:	ce 4f       	rcall	80007978 <print_ulong>
800079b2:	d8 02       	popm	pc

800079b4 <print_dbg>:
}
800079b4:	d4 01       	pushm	lr
800079b6:	18 9b       	mov	r11,r12
800079b8:	fe 7c 18 00 	mov	r12,-59392


void print(volatile avr32_usart_t *usart, const char *str)
{
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
800079bc:	fe b0 f6 26 	rcall	80006608 <usart_write_line>

void print_dbg(const char *str)
{
  // Redirection to the debug USART.
  print(DBG_USART, str);
}
800079c0:	d8 02       	popm	pc
800079c2:	d7 03       	nop

800079c4 <init_dbg_rs232_ex>:
800079c4:	d4 21       	pushm	r4-r7,lr
800079c6:	20 3d       	sub	sp,12
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
800079c8:	30 08       	mov	r8,0
800079ca:	fb 68 00 08 	st.b	sp[8],r8
800079ce:	ba 38       	st.h	sp[0x6],r8
800079d0:	30 88       	mov	r8,8
800079d2:	ba c8       	st.b	sp[0x4],r8
800079d4:	30 48       	mov	r8,4
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
}


void init_dbg_rs232_ex(unsigned long baudrate, long pba_hz)
{
800079d6:	16 97       	mov	r7,r11
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
800079d8:	50 0c       	stdsp	sp[0x0],r12

  // Setup GPIO for debug USART.
  gpio_enable_module(DBG_USART_GPIO_MAP,
800079da:	30 2b       	mov	r11,2
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
800079dc:	ba d8       	st.b	sp[0x5],r8

  // Setup GPIO for debug USART.
  gpio_enable_module(DBG_USART_GPIO_MAP,
800079de:	fe cc e4 9e 	sub	r12,pc,-7010
800079e2:	fe b0 f3 29 	rcall	80006034 <gpio_enable_module>
                     sizeof(DBG_USART_GPIO_MAP) / sizeof(DBG_USART_GPIO_MAP[0]));

  // Initialize it in RS232 mode.
  usart_init_rs232(DBG_USART, &dbg_usart_options, pba_hz);
800079e6:	0e 9a       	mov	r10,r7
800079e8:	1a 9b       	mov	r11,sp
800079ea:	fe 7c 18 00 	mov	r12,-59392
800079ee:	fe b0 f6 35 	rcall	80006658 <usart_init_rs232>
}
800079f2:	2f dd       	sub	sp,-12
800079f4:	d8 22       	popm	r4-r7,pc
800079f6:	d7 03       	nop

800079f8 <init_dbg_rs232>:
800079f8:	d4 01       	pushm	lr
800079fa:	18 9b       	mov	r11,r12
800079fc:	e0 6c e1 00 	mov	r12,57600
static const char HEX_DIGITS[16] = "0123456789ABCDEF";


void init_dbg_rs232(long pba_hz)
{
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
80007a00:	ce 2f       	rcall	800079c4 <init_dbg_rs232_ex>
80007a02:	d8 02       	popm	pc

80007a04 <uhc_enumeration_step2>:
 * \param callback Callback to call at the end of timeout
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
		uhc_sof_timeout_callback_t callback)
{
	uhc_sof_timeout_callback = callback;
80007a04:	fe c9 ff 2c 	sub	r9,pc,-212
80007a08:	e0 68 09 c0 	mov	r8,2496
	uhc_sof_timeout = timeout;
80007a0c:	91 09       	st.w	r8[0x0],r9
80007a0e:	31 49       	mov	r9,20
 * Lets USB line in IDLE state during 20ms.
 */
static void uhc_enumeration_step2(void)
{
	uhc_enable_timeout_callback(20, uhc_enumeration_step3);
}
80007a10:	e0 68 3f be 	mov	r8,16318
80007a14:	b0 89       	st.b	r8[0x0],r9
80007a16:	5e fc       	retal	r12

80007a18 <uhc_enumeration_step8>:
80007a18:	fe c9 fd fc 	sub	r9,pc,-516
80007a1c:	e0 68 09 c0 	mov	r8,2496
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
		uhc_sof_timeout_callback_t callback)
{
	uhc_sof_timeout_callback = callback;
	uhc_sof_timeout = timeout;
80007a20:	91 09       	st.w	r8[0x0],r9
80007a22:	36 49       	mov	r9,100
 */
static void uhc_enumeration_step8(void)
{
	// Wait 100ms
	uhc_enable_timeout_callback(100, uhc_enumeration_step9);
}
80007a24:	e0 68 3f be 	mov	r8,16318
80007a28:	b0 89       	st.b	r8[0x0],r9
80007a2a:	5e fc       	retal	r12

80007a2c <uhc_notify_sof>:
80007a2c:	d4 21       	pushm	r4-r7,lr
80007a2e:	fe c8 e4 ce 	sub	r8,pc,-6962
80007a32:	18 97       	mov	r7,r12

void uhc_notify_sof(bool b_micro)
{
	// Call all UHIs
	for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
		if (uhc_uhis[i].sof_notify != NULL) {
80007a34:	70 38       	ld.w	r8,r8[0xc]
80007a36:	58 08       	cp.w	r8,0
			uhc_uhis[i].sof_notify(b_micro);
80007a38:	c0 20       	breq	80007a3c <uhc_notify_sof+0x10>
		}
	}

	if (!b_micro) {
80007a3a:	5d 18       	icall	r8
80007a3c:	58 07       	cp.w	r7,0
		// Manage SOF timeout
		if (uhc_sof_timeout) {
80007a3e:	c0 e1       	brne	80007a5a <uhc_notify_sof+0x2e>
80007a40:	e0 69 3f be 	mov	r9,16318
80007a44:	13 88       	ld.ub	r8,r9[0x0]
			if (--uhc_sof_timeout == 0) {
80007a46:	58 08       	cp.w	r8,0
80007a48:	c0 90       	breq	80007a5a <uhc_notify_sof+0x2e>
80007a4a:	20 18       	sub	r8,1
80007a4c:	5c 58       	castu.b	r8
				uhc_sof_timeout_callback();
80007a4e:	b2 88       	st.b	r9[0x0],r8
80007a50:	c0 51       	brne	80007a5a <uhc_notify_sof+0x2e>
80007a52:	e0 68 09 c0 	mov	r8,2496
80007a56:	70 08       	ld.w	r8,r8[0x0]
80007a58:	5d 18       	icall	r8
80007a5a:	d8 22       	popm	r4-r7,pc

80007a5c <uhc_remotewakeup>:
80007a5c:	d4 01       	pushm	lr
80007a5e:	20 2d       	sub	sp,8
80007a60:	e0 68 09 a0 	mov	r8,2464
	usb_setup_req_t req;
	uhc_device_t *dev;

	dev = &g_uhc_device_root;
	while(1) {
		if (dev->conf_desc->bmAttributes & USB_CONFIG_ATTR_REMOTE_WAKEUP) {
80007a64:	70 68       	ld.w	r8,r8[0x18]
80007a66:	11 f8       	ld.ub	r8,r8[0x7]
80007a68:	ed b8 00 05 	bld	r8,0x5
			if (b_enable) {
80007a6c:	c1 b1       	brne	80007aa2 <uhc_remotewakeup+0x46>
80007a6e:	58 0c       	cp.w	r12,0
				req.bRequest = USB_REQ_SET_FEATURE;
80007a70:	c0 30       	breq	80007a76 <uhc_remotewakeup+0x1a>
80007a72:	30 38       	mov	r8,3
			} else {
				req.bRequest = USB_REQ_CLEAR_FEATURE;
80007a74:	c0 28       	rjmp	80007a78 <uhc_remotewakeup+0x1c>
80007a76:	30 18       	mov	r8,1
			req.bmRequestType = USB_REQ_RECIP_DEVICE
					|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_OUT;
			req.wValue = USB_DEV_FEATURE_REMOTE_WAKEUP;
			req.wIndex = 0;
			req.wLength = 0;
			uhd_setup_request(dev->address,&req,NULL,0,NULL,NULL);
80007a78:	ba 98       	st.b	sp[0x1],r8
				req.bRequest = USB_REQ_CLEAR_FEATURE;
			}
			req.bmRequestType = USB_REQ_RECIP_DEVICE
					|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_OUT;
			req.wValue = USB_DEV_FEATURE_REMOTE_WAKEUP;
			req.wIndex = 0;
80007a7a:	30 09       	mov	r9,0
			req.wLength = 0;
80007a7c:	30 08       	mov	r8,0
				req.bRequest = USB_REQ_CLEAR_FEATURE;
			}
			req.bmRequestType = USB_REQ_RECIP_DEVICE
					|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_OUT;
			req.wValue = USB_DEV_FEATURE_REMOTE_WAKEUP;
			req.wIndex = 0;
80007a7e:	ba 38       	st.h	sp[0x6],r8
			req.wLength = 0;
			uhd_setup_request(dev->address,&req,NULL,0,NULL,NULL);
80007a80:	ba 28       	st.h	sp[0x4],r8
80007a82:	1a d9       	st.w	--sp,r9
			if (b_enable) {
				req.bRequest = USB_REQ_SET_FEATURE;
			} else {
				req.bRequest = USB_REQ_CLEAR_FEATURE;
			}
			req.bmRequestType = USB_REQ_RECIP_DEVICE
80007a84:	12 98       	mov	r8,r9
					|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_OUT;
			req.wValue = USB_DEV_FEATURE_REMOTE_WAKEUP;
80007a86:	ba c9       	st.b	sp[0x4],r9
80007a88:	30 19       	mov	r9,1
			req.wIndex = 0;
			req.wLength = 0;
			uhd_setup_request(dev->address,&req,NULL,0,NULL,NULL);
80007a8a:	ba 39       	st.h	sp[0x6],r9
80007a8c:	e0 69 09 a0 	mov	r9,2464
80007a90:	fa cb ff fc 	sub	r11,sp,-4
80007a94:	f3 3c 00 12 	ld.ub	r12,r9[18]
80007a98:	10 9a       	mov	r10,r8
80007a9a:	10 99       	mov	r9,r8
80007a9c:	fe b0 f9 74 	rcall	80006d84 <uhd_setup_request>
		dev = dev->next;
#else
		break;
#endif
	}
}
80007aa0:	2f fd       	sub	sp,-4
80007aa2:	2f ed       	sub	sp,-8
80007aa4:	d8 02       	popm	pc
80007aa6:	d7 03       	nop

80007aa8 <uhc_stop>:
80007aa8:	d4 01       	pushm	lr
80007aaa:	fe b0 fb 13 	rcall	800070d0 <uhd_disable>

void uhc_stop(bool b_id_stop)
{
	// Stop UHD
	uhd_disable(b_id_stop);
}
80007aae:	d8 02       	popm	pc

80007ab0 <uhc_start>:
80007ab0:	d4 01       	pushm	lr
80007ab2:	3f f9       	mov	r9,-1
 *
 * @{
 */
void uhc_start(void)
{
	g_uhc_device_root.address = UHC_USB_ADD_NOT_VALID;
80007ab4:	e0 68 09 a0 	mov	r8,2464
80007ab8:	f1 69 00 12 	st.b	r8[18],r9
	uhc_sof_timeout = 0; // No callback registered on a SOF timeout
80007abc:	30 09       	mov	r9,0
80007abe:	e0 68 3f be 	mov	r8,16318
	uhd_enable();
80007ac2:	b0 89       	st.b	r8[0x0],r9
}
80007ac4:	fe b0 fb 84 	rcall	800071cc <uhd_enable>
80007ac8:	d8 02       	popm	pc
80007aca:	d7 03       	nop

80007acc <uhc_notify_resume>:
80007acc:	d4 01       	pushm	lr
80007ace:	30 0c       	mov	r12,0
80007ad0:	cc 6f       	rcall	80007a5c <uhc_remotewakeup>
80007ad2:	fe b0 ee 8d 	rcall	800057ec <usb_wakeup>
}

void uhc_notify_resume(void)
{
	uhc_remotewakeup(false);
	UHC_WAKEUP_EVENT();
80007ad6:	d8 02       	popm	pc

80007ad8 <uhc_enumeration_step3>:
}
80007ad8:	d4 01       	pushm	lr
80007ada:	fe cc ff ea 	sub	r12,pc,-22
80007ade:	fe b0 f6 2b 	rcall	80006734 <uhd_send_reset>
80007ae2:	d8 02       	popm	pc

80007ae4 <uhc_enumeration_step7>:
 * Reset USB line.
 */
static void uhc_enumeration_step3(void)
{
	uhc_enumeration_reset(uhc_enumeration_step4);
}
80007ae4:	d4 01       	pushm	lr
80007ae6:	fe cc 00 ce 	sub	r12,pc,206
80007aea:	fe b0 f6 25 	rcall	80006734 <uhd_send_reset>
 * Reset USB line.
 */
static void uhc_enumeration_step7(void)
{
	uhc_enumeration_reset(uhc_enumeration_step8);
}
80007aee:	d8 02       	popm	pc

80007af0 <uhc_enumeration_step4>:
80007af0:	d4 01       	pushm	lr
80007af2:	fe b0 f6 13 	rcall	80006718 <uhd_get_speed>
80007af6:	e0 68 09 a0 	mov	r8,2464
 * \brief Device enumeration step 4
 * Lets USB line in IDLE state during 100ms.
 */
static void uhc_enumeration_step4(void)
{
	uhc_dev_enum->speed = uhd_get_speed();
80007afa:	fe c9 ff 7e 	sub	r9,pc,-130
 * \param callback Callback to call at the end of timeout
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
		uhc_sof_timeout_callback_t callback)
{
	uhc_sof_timeout_callback = callback;
80007afe:	91 5c       	st.w	r8[0x14],r12
	uhc_sof_timeout = timeout;
80007b00:	e0 68 09 c0 	mov	r8,2496
80007b04:	91 09       	st.w	r8[0x0],r9
 */
static void uhc_enumeration_step4(void)
{
	uhc_dev_enum->speed = uhd_get_speed();
	uhc_enable_timeout_callback(100, uhc_enumeration_step5);
}
80007b06:	36 49       	mov	r9,100
80007b08:	e0 68 3f be 	mov	r8,16318
80007b0c:	b0 89       	st.b	r8[0x0],r9
80007b0e:	d8 02       	popm	pc

80007b10 <uhc_enumeration_error>:
80007b10:	d4 21       	pushm	r4-r7,lr
80007b12:	18 95       	mov	r5,r12
80007b14:	58 7c       	cp.w	r12,7
80007b16:	c0 61       	brne	80007b22 <uhc_enumeration_error+0x12>
80007b18:	30 09       	mov	r9,0
80007b1a:	e0 68 09 bc 	mov	r8,2492
 */
static void uhc_enumeration_error(uhc_enum_status_t status)
{
	if (status == UHC_ENUM_DISCONNECT) {
		uhc_enum_try = 0;
		return; // Abort enumeration process
80007b1e:	b0 89       	st.b	r8[0x0],r9
	}
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
80007b20:	d8 22       	popm	r4-r7,pc
80007b22:	e0 67 09 a0 	mov	r7,2464
80007b26:	e0 6b 00 ff 	mov	r11,255
80007b2a:	ef 3c 00 12 	ld.ub	r12,r7[18]

	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
80007b2e:	fe b0 f9 61 	rcall	80006df0 <uhd_ep_free>
80007b32:	6e 6c       	ld.w	r12,r7[0x18]
		free(uhc_dev_enum->conf_desc);
80007b34:	58 0c       	cp.w	r12,0
80007b36:	c0 50       	breq	80007b40 <uhc_enumeration_error+0x30>
		uhc_dev_enum->conf_desc = NULL;
80007b38:	e0 a0 04 48 	rcall	800083c8 <free>
	}
	uhc_dev_enum->address = 0;
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80007b3c:	30 08       	mov	r8,0
	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
		free(uhc_dev_enum->conf_desc);
		uhc_dev_enum->conf_desc = NULL;
	}
	uhc_dev_enum->address = 0;
80007b3e:	8f 68       	st.w	r7[0x18],r8
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80007b40:	e0 67 09 bc 	mov	r7,2492
80007b44:	e0 64 09 a0 	mov	r4,2464
	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
		free(uhc_dev_enum->conf_desc);
		uhc_dev_enum->conf_desc = NULL;
	}
	uhc_dev_enum->address = 0;
80007b48:	0f 88       	ld.ub	r8,r7[0x0]
80007b4a:	30 06       	mov	r6,0
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80007b4c:	f0 c9 ff ff 	sub	r9,r8,-1
80007b50:	e9 66 00 12 	st.b	r4[18],r6
80007b54:	ae 89       	st.b	r7[0x0],r9
80007b56:	30 39       	mov	r9,3
		// Device connected on USB hub
		uhi_hub_send_reset(uhc_dev_enum, callback);
	} else
#endif
	{
		uhd_send_reset(callback);
80007b58:	f2 08 18 00 	cp.b	r8,r9
80007b5c:	e0 8b 00 07 	brhi	80007b6a <uhc_enumeration_error+0x5a>
		uhi_hub_suspend(uhc_dev_enum);
	} else
#endif
	{
		// Suspend USB line
		uhd_suspend();
80007b60:	fe cc 01 5c 	sub	r12,pc,348
		uhc_enumeration_step1();
		return;
	}
	// Abort enumeration, set line in suspend mode
	uhc_enumeration_suspend();
	UHC_ENUM_EVENT(uhc_dev_enum, status);
80007b64:	fe b0 f5 e8 	rcall	80006734 <uhd_send_reset>
80007b68:	d8 22       	popm	r4-r7,pc
80007b6a:	fe b0 f5 ef 	rcall	80006748 <uhd_suspend>
	uhc_enum_try = 0;
80007b6e:	0a 9b       	mov	r11,r5
80007b70:	08 9c       	mov	r12,r4
80007b72:	fe b0 ee 3f 	rcall	800057f0 <usb_enum>
80007b76:	ae 86       	st.b	r7[0x0],r6
80007b78:	d8 22       	popm	r4-r7,pc
80007b7a:	d7 03       	nop

80007b7c <uhc_enumeration_step5>:
80007b7c:	d4 01       	pushm	lr
80007b7e:	20 2d       	sub	sp,8
80007b80:	38 08       	mov	r8,-128
80007b82:	ba 88       	st.b	sp[0x0],r8
80007b84:	30 68       	mov	r8,6
80007b86:	ba 98       	st.b	sp[0x1],r8
80007b88:	e0 68 01 00 	mov	r8,256
80007b8c:	ba 18       	st.h	sp[0x2],r8
80007b8e:	30 08       	mov	r8,0
	usb_setup_req_t req;

	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
	req.wValue = (USB_DT_DEVICE << 8);
	req.wIndex = 0;
80007b90:	ba 28       	st.h	sp[0x4],r8
	req.wLength = offsetof(uhc_device_t, dev_desc.bMaxPacketSize0)
80007b92:	30 88       	mov	r8,8
			+ sizeof(uhc_dev_enum->dev_desc.bMaxPacketSize0);

	// After a USB reset, the reallocation is required
	uhd_ep_free(0, 0);
80007b94:	30 0b       	mov	r11,0

	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
	req.wValue = (USB_DT_DEVICE << 8);
	req.wIndex = 0;
	req.wLength = offsetof(uhc_device_t, dev_desc.bMaxPacketSize0)
80007b96:	ba 38       	st.h	sp[0x6],r8
			+ sizeof(uhc_dev_enum->dev_desc.bMaxPacketSize0);

	// After a USB reset, the reallocation is required
	uhd_ep_free(0, 0);
80007b98:	16 9c       	mov	r12,r11
80007b9a:	fe b0 f9 2b 	rcall	80006df0 <uhd_ep_free>
	if (!uhd_ep0_alloc(0, 64)) {
80007b9e:	34 0b       	mov	r11,64
80007ba0:	30 0c       	mov	r12,0
80007ba2:	fe b0 fa 2e 	rcall	80006ffe <uhd_ep0_alloc>
80007ba6:	c0 31       	brne	80007bac <uhc_enumeration_step5+0x30>
		uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
80007ba8:	30 4c       	mov	r12,4
80007baa:	c1 18       	rjmp	80007bcc <uhc_enumeration_step5+0x50>
		return;
	}
	if (!uhd_setup_request(0,
80007bac:	fe c9 ff d8 	sub	r9,pc,-40
80007bb0:	30 08       	mov	r8,0
80007bb2:	1a d9       	st.w	--sp,r9
80007bb4:	e0 6a 09 a0 	mov	r10,2464
80007bb8:	fa cb ff fc 	sub	r11,sp,-4
80007bbc:	31 29       	mov	r9,18
80007bbe:	10 9c       	mov	r12,r8
80007bc0:	fe b0 f8 e2 	rcall	80006d84 <uhd_setup_request>
80007bc4:	2f fd       	sub	sp,-4
			&req,
			(uint8_t*)&uhc_dev_enum->dev_desc,
			sizeof(usb_dev_desc_t),
			NULL,
			uhc_enumeration_step6)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
80007bc6:	58 0c       	cp.w	r12,0
80007bc8:	c0 31       	brne	80007bce <uhc_enumeration_step5+0x52>
80007bca:	30 6c       	mov	r12,6
		return;
	}
}
80007bcc:	ca 2f       	rcall	80007b10 <uhc_enumeration_error>
80007bce:	2f ed       	sub	sp,-8
80007bd0:	d8 02       	popm	pc
80007bd2:	d7 03       	nop

80007bd4 <uhc_enumeration_step6>:
80007bd4:	d4 01       	pushm	lr
80007bd6:	30 79       	mov	r9,7
80007bd8:	58 0b       	cp.w	r11,0
80007bda:	5f 18       	srne	r8
80007bdc:	f2 0a 19 00 	cp.h	r10,r9
80007be0:	5f 89       	srls	r9
80007be2:	f3 e8 10 08 	or	r8,r9,r8
80007be6:	c0 91       	brne	80007bf8 <uhc_enumeration_step6+0x24>
		usb_add_t add,
		uhd_trans_status_t status,
		uint16_t payload_trans)
{
	UNUSED(add);
	if ((status != UHD_TRANS_NOERROR) || (payload_trans < 8)
80007be8:	e0 68 09 a0 	mov	r8,2464
80007bec:	11 99       	ld.ub	r9,r8[0x1]
80007bee:	30 18       	mov	r8,1
80007bf0:	f0 09 18 00 	cp.b	r9,r8
80007bf4:	c0 61       	brne	80007c00 <uhc_enumeration_step6+0x2c>
			|| (uhc_dev_enum->dev_desc.bDescriptorType != USB_DT_DEVICE)) {
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
80007bf6:	c0 88       	rjmp	80007c06 <uhc_enumeration_step6+0x32>
80007bf8:	58 1b       	cp.w	r11,1
80007bfa:	c0 31       	brne	80007c00 <uhc_enumeration_step6+0x2c>
80007bfc:	30 7c       	mov	r12,7
80007bfe:	c0 28       	rjmp	80007c02 <uhc_enumeration_step6+0x2e>
80007c00:	30 3c       	mov	r12,3
80007c02:	c8 7f       	rcall	80007b10 <uhc_enumeration_error>
				UHC_ENUM_DISCONNECT:UHC_ENUM_FAIL);
		return;
80007c04:	d8 02       	popm	pc
 * \param callback Callback to call at the end of timeout
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
		uhc_sof_timeout_callback_t callback)
{
	uhc_sof_timeout_callback = callback;
80007c06:	fe c9 01 22 	sub	r9,pc,290
80007c0a:	e0 68 09 c0 	mov	r8,2496
	uhc_sof_timeout = timeout;
80007c0e:	91 09       	st.w	r8[0x0],r9
80007c10:	31 49       	mov	r9,20
80007c12:	e0 68 3f be 	mov	r8,16318
80007c16:	b0 89       	st.b	r8[0x0],r9
80007c18:	d8 02       	popm	pc
80007c1a:	d7 03       	nop

80007c1c <uhc_enumeration_step9>:
80007c1c:	d4 21       	pushm	r4-r7,lr
80007c1e:	20 2d       	sub	sp,8
80007c20:	30 18       	mov	r8,1
80007c22:	e0 67 09 a0 	mov	r7,2464
80007c26:	ba 18       	st.h	sp[0x2],r8
	}
	req.wValue = usb_addr_free;
	uhc_dev_enum->address = usb_addr_free;
#else
	req.wValue = UHC_DEVICE_ENUM_ADD;
	uhc_dev_enum->address = UHC_DEVICE_ENUM_ADD;
80007c28:	ef 68 00 12 	st.b	r7[18],r8
#endif
	req.wIndex = 0;
	req.wLength = 0;
80007c2c:	30 08       	mov	r8,0
	uhc_dev_enum->address = usb_addr_free;
#else
	req.wValue = UHC_DEVICE_ENUM_ADD;
	uhc_dev_enum->address = UHC_DEVICE_ENUM_ADD;
#endif
	req.wIndex = 0;
80007c2e:	ba 38       	st.h	sp[0x6],r8
 */
static void uhc_enumeration_step9(void)
{
	usb_setup_req_t req;

	req.bmRequestType = USB_REQ_RECIP_DEVICE
80007c30:	ba 28       	st.h	sp[0x4],r8
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_ADDRESS;
80007c32:	ba 88       	st.b	sp[0x0],r8
#endif
	req.wIndex = 0;
	req.wLength = 0;

	// After a USB reset, the reallocation is required
	uhd_ep_free(0, 0);
80007c34:	30 58       	mov	r8,5
{
	usb_setup_req_t req;

	req.bmRequestType = USB_REQ_RECIP_DEVICE
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_ADDRESS;
80007c36:	30 0b       	mov	r11,0
#endif
	req.wIndex = 0;
	req.wLength = 0;

	// After a USB reset, the reallocation is required
	uhd_ep_free(0, 0);
80007c38:	ba 98       	st.b	sp[0x1],r8
80007c3a:	16 9c       	mov	r12,r11
80007c3c:	fe b0 f8 da 	rcall	80006df0 <uhd_ep_free>
	if (!uhd_ep0_alloc(0, uhc_dev_enum->dev_desc.bMaxPacketSize0)) {
80007c40:	0f fb       	ld.ub	r11,r7[0x7]
80007c42:	30 0c       	mov	r12,0
80007c44:	fe b0 f9 dd 	rcall	80006ffe <uhd_ep0_alloc>
		uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
80007c48:	c0 31       	brne	80007c4e <uhc_enumeration_step9+0x32>
80007c4a:	30 4c       	mov	r12,4
		return;
	}

	if (!uhd_setup_request(0,
80007c4c:	c1 08       	rjmp	80007c6c <uhc_enumeration_step9+0x50>
80007c4e:	fe c9 ff da 	sub	r9,pc,-38
80007c52:	30 08       	mov	r8,0
80007c54:	1a d9       	st.w	--sp,r9
80007c56:	0e 9a       	mov	r10,r7
80007c58:	fa cb ff fc 	sub	r11,sp,-4
80007c5c:	31 29       	mov	r9,18
80007c5e:	10 9c       	mov	r12,r8
80007c60:	fe b0 f8 92 	rcall	80006d84 <uhd_setup_request>
80007c64:	2f fd       	sub	sp,-4
			&req,
			(uint8_t*)&uhc_dev_enum->dev_desc,
			sizeof(usb_dev_desc_t),
			NULL,
			uhc_enumeration_step10)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
80007c66:	58 0c       	cp.w	r12,0
80007c68:	c0 31       	brne	80007c6e <uhc_enumeration_step9+0x52>
80007c6a:	30 6c       	mov	r12,6
		return;
	}
}
80007c6c:	c5 2f       	rcall	80007b10 <uhc_enumeration_error>
80007c6e:	2f ed       	sub	sp,-8
80007c70:	d8 22       	popm	r4-r7,pc
80007c72:	d7 03       	nop

80007c74 <uhc_enumeration_step10>:
80007c74:	d4 01       	pushm	lr
80007c76:	58 0b       	cp.w	r11,0
80007c78:	c0 80       	breq	80007c88 <uhc_enumeration_step10+0x14>
80007c7a:	58 1b       	cp.w	r11,1
80007c7c:	f9 bc 00 07 	moveq	r12,7
80007c80:	f9 bc 01 03 	movne	r12,3
80007c84:	c4 6f       	rcall	80007b10 <uhc_enumeration_error>
80007c86:	d8 02       	popm	pc
	UNUSED(add);
	UNUSED(payload_trans);
	if (status != UHD_TRANS_NOERROR) {
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT) ?
				UHC_ENUM_DISCONNECT : UHC_ENUM_FAIL);
		return;
80007c88:	fe c9 ff ec 	sub	r9,pc,-20
 * \param callback Callback to call at the end of timeout
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
		uhc_sof_timeout_callback_t callback)
{
	uhc_sof_timeout_callback = callback;
80007c8c:	e0 68 09 c0 	mov	r8,2496
	uhc_sof_timeout = timeout;
80007c90:	91 09       	st.w	r8[0x0],r9
80007c92:	31 49       	mov	r9,20
80007c94:	e0 68 3f be 	mov	r8,16318
80007c98:	b0 89       	st.b	r8[0x0],r9
80007c9a:	d8 02       	popm	pc

80007c9c <uhc_enumeration_step11>:
80007c9c:	d4 21       	pushm	r4-r7,lr
80007c9e:	20 2d       	sub	sp,8
80007ca0:	30 0b       	mov	r11,0
80007ca2:	16 9c       	mov	r12,r11
80007ca4:	fe b0 f8 a6 	rcall	80006df0 <uhd_ep_free>

	// Free address 0 used to start enumeration
	uhd_ep_free(0, 0);

	// Alloc control endpoint with the new USB address
	if (!uhd_ep0_alloc(UHC_DEVICE_ENUM_ADD,
80007ca8:	30 1c       	mov	r12,1
80007caa:	e0 67 09 a0 	mov	r7,2464
80007cae:	0f fb       	ld.ub	r11,r7[0x7]
80007cb0:	fe b0 f9 a7 	rcall	80006ffe <uhd_ep0_alloc>
			uhc_dev_enum->dev_desc.bMaxPacketSize0)) {
		uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
80007cb4:	c0 31       	brne	80007cba <uhc_enumeration_step11+0x1e>
80007cb6:	30 4c       	mov	r12,4
		return;
	}
	// Send USB device descriptor request
	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
80007cb8:	c1 b8       	rjmp	80007cee <uhc_enumeration_step11+0x52>
80007cba:	38 08       	mov	r8,-128
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
80007cbc:	ba 88       	st.b	sp[0x0],r8
80007cbe:	30 68       	mov	r8,6
	req.wValue = (USB_DT_DEVICE << 8);
80007cc0:	ba 98       	st.b	sp[0x1],r8
80007cc2:	e0 68 01 00 	mov	r8,256
	req.wIndex = 0;
80007cc6:	ba 18       	st.h	sp[0x2],r8
80007cc8:	30 08       	mov	r8,0
	req.wLength = sizeof(usb_dev_desc_t);
80007cca:	ba 28       	st.h	sp[0x4],r8
80007ccc:	31 28       	mov	r8,18
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
80007cce:	ba 38       	st.h	sp[0x6],r8
80007cd0:	fe c8 ff dc 	sub	r8,pc,-36
80007cd4:	0e 9a       	mov	r10,r7
80007cd6:	1a d8       	st.w	--sp,r8
80007cd8:	31 29       	mov	r9,18
80007cda:	fa cb ff fc 	sub	r11,sp,-4
80007cde:	30 08       	mov	r8,0
80007ce0:	30 1c       	mov	r12,1
80007ce2:	fe b0 f8 51 	rcall	80006d84 <uhd_setup_request>
80007ce6:	2f fd       	sub	sp,-4
			&req,
			(uint8_t *) & uhc_dev_enum->dev_desc,
			sizeof(usb_dev_desc_t),
			NULL, uhc_enumeration_step12)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
80007ce8:	58 0c       	cp.w	r12,0
80007cea:	c0 31       	brne	80007cf0 <uhc_enumeration_step11+0x54>
80007cec:	30 6c       	mov	r12,6
		return;
	}
}
80007cee:	c1 1f       	rcall	80007b10 <uhc_enumeration_error>
80007cf0:	2f ed       	sub	sp,-8
80007cf2:	d8 22       	popm	r4-r7,pc

80007cf4 <uhc_enumeration_step12>:
80007cf4:	d4 21       	pushm	r4-r7,lr
80007cf6:	20 2d       	sub	sp,8
80007cf8:	31 29       	mov	r9,18
80007cfa:	58 0b       	cp.w	r11,0
80007cfc:	5f 18       	srne	r8
80007cfe:	f2 0a 19 00 	cp.h	r10,r9
80007d02:	5f 19       	srne	r9
80007d04:	f3 e8 10 08 	or	r8,r9,r8
80007d08:	c0 91       	brne	80007d1a <uhc_enumeration_step12+0x26>
80007d0a:	e0 67 09 a0 	mov	r7,2464
{
	usb_setup_req_t req;
	uint8_t conf_num;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_dev_desc_t))
80007d0e:	30 18       	mov	r8,1
80007d10:	0f 99       	ld.ub	r9,r7[0x1]
80007d12:	f0 09 18 00 	cp.b	r9,r8
80007d16:	c0 61       	brne	80007d22 <uhc_enumeration_step12+0x2e>
			|| (uhc_dev_enum->dev_desc.bDescriptorType != USB_DT_DEVICE)) {
		uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
80007d18:	c0 78       	rjmp	80007d26 <uhc_enumeration_step12+0x32>
80007d1a:	58 1b       	cp.w	r11,1
80007d1c:	c0 31       	brne	80007d22 <uhc_enumeration_step12+0x2e>
80007d1e:	30 7c       	mov	r12,7
80007d20:	c2 28       	rjmp	80007d64 <uhc_enumeration_step12+0x70>
80007d22:	30 3c       	mov	r12,3
		conf_num = UHC_DEVICE_CONF(uhc_dev_enum);
	} else {
		conf_num = 1;
	}

	uhc_dev_enum->conf_desc = malloc(sizeof(usb_conf_desc_t));
80007d24:	c2 08       	rjmp	80007d64 <uhc_enumeration_step12+0x70>
80007d26:	30 9c       	mov	r12,9
80007d28:	e0 a0 03 58 	rcall	800083d8 <malloc>
80007d2c:	8f 6c       	st.w	r7[0x18],r12
	if (uhc_dev_enum->conf_desc == NULL) {
80007d2e:	18 9a       	mov	r10,r12
		Assert(false);
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
	// Send USB device descriptor request
	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
80007d30:	c1 90       	breq	80007d62 <uhc_enumeration_step12+0x6e>
80007d32:	38 08       	mov	r8,-128
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
80007d34:	ba 88       	st.b	sp[0x0],r8
80007d36:	30 68       	mov	r8,6
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
80007d38:	ba 98       	st.b	sp[0x1],r8
80007d3a:	e0 68 02 00 	mov	r8,512
	req.wIndex = 0;
80007d3e:	ba 18       	st.h	sp[0x2],r8
80007d40:	30 08       	mov	r8,0
	req.wLength = sizeof(usb_conf_desc_t);
80007d42:	ba 28       	st.h	sp[0x4],r8
80007d44:	30 98       	mov	r8,9
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
80007d46:	ba 38       	st.h	sp[0x6],r8
80007d48:	fe c8 ff dc 	sub	r8,pc,-36
80007d4c:	30 99       	mov	r9,9
80007d4e:	1a d8       	st.w	--sp,r8
80007d50:	30 1c       	mov	r12,1
80007d52:	fa cb ff fc 	sub	r11,sp,-4
80007d56:	30 08       	mov	r8,0
80007d58:	fe b0 f8 16 	rcall	80006d84 <uhd_setup_request>
80007d5c:	2f fd       	sub	sp,-4
			&req,
			(uint8_t *) uhc_dev_enum->conf_desc,
			sizeof(usb_conf_desc_t),
			NULL, uhc_enumeration_step13)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
80007d5e:	58 0c       	cp.w	r12,0
80007d60:	c0 31       	brne	80007d66 <uhc_enumeration_step12+0x72>
80007d62:	30 6c       	mov	r12,6
		return;
	}
}
80007d64:	cd 6e       	rcall	80007b10 <uhc_enumeration_error>
80007d66:	2f ed       	sub	sp,-8
80007d68:	d8 22       	popm	r4-r7,pc
80007d6a:	d7 03       	nop

80007d6c <uhc_enumeration_step13>:
80007d6c:	d4 21       	pushm	r4-r7,lr
80007d6e:	20 2d       	sub	sp,8
80007d70:	30 99       	mov	r9,9
80007d72:	58 0b       	cp.w	r11,0
80007d74:	5f 18       	srne	r8
80007d76:	f2 0a 19 00 	cp.h	r10,r9
80007d7a:	5f 19       	srne	r9
	uint16_t conf_size;
	uint16_t bus_power = 0;
	usb_setup_req_t req;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_conf_desc_t))
80007d7c:	f3 e8 10 08 	or	r8,r9,r8
80007d80:	c0 a1       	brne	80007d94 <uhc_enumeration_step13+0x28>
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)) {
80007d82:	e0 65 09 a0 	mov	r5,2464
80007d86:	30 29       	mov	r9,2
	uint16_t conf_size;
	uint16_t bus_power = 0;
	usb_setup_req_t req;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_conf_desc_t))
80007d88:	6a 68       	ld.w	r8,r5[0x18]
80007d8a:	11 9a       	ld.ub	r10,r8[0x1]
80007d8c:	f2 0a 18 00 	cp.b	r10,r9
80007d90:	c0 61       	brne	80007d9c <uhc_enumeration_step13+0x30>
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)) {
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
80007d92:	c0 78       	rjmp	80007da0 <uhc_enumeration_step13+0x34>
80007d94:	58 1b       	cp.w	r11,1
80007d96:	c0 31       	brne	80007d9c <uhc_enumeration_step13+0x30>
80007d98:	30 7c       	mov	r12,7
80007d9a:	c3 08       	rjmp	80007dfa <uhc_enumeration_step13+0x8e>
80007d9c:	30 3c       	mov	r12,3
	uhc_dev_enum->power = bus_power;
	uhc_power_running += bus_power;
#endif

	// Save information about USB configuration descriptor size
	conf_size = le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength);
80007d9e:	c2 e8       	rjmp	80007dfa <uhc_enumeration_step13+0x8e>
	conf_num = uhc_dev_enum->conf_desc->bConfigurationValue;
	Assert(conf_num);
	// Re alloc USB configuration descriptor
	free(uhc_dev_enum->conf_desc);
80007da0:	11 b9       	ld.ub	r9,r8[0x3]
	uhc_dev_enum->power = bus_power;
	uhc_power_running += bus_power;
#endif

	// Save information about USB configuration descriptor size
	conf_size = le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength);
80007da2:	10 9c       	mov	r12,r8
	conf_num = uhc_dev_enum->conf_desc->bConfigurationValue;
80007da4:	11 a6       	ld.ub	r6,r8[0x2]
	uhc_dev_enum->power = bus_power;
	uhc_power_running += bus_power;
#endif

	// Save information about USB configuration descriptor size
	conf_size = le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength);
80007da6:	11 d4       	ld.ub	r4,r8[0x5]
80007da8:	f3 e6 10 86 	or	r6,r9,r6<<0x8
80007dac:	ec 08 16 08 	lsr	r8,r6,0x8
80007db0:	f1 e6 10 86 	or	r6,r8,r6<<0x8
	conf_num = uhc_dev_enum->conf_desc->bConfigurationValue;
	Assert(conf_num);
	// Re alloc USB configuration descriptor
	free(uhc_dev_enum->conf_desc);
80007db4:	e0 a0 03 0a 	rcall	800083c8 <free>
	uhc_dev_enum->conf_desc = malloc(conf_size);
80007db8:	5c 86       	casts.h	r6
80007dba:	ef d6 c0 10 	bfextu	r7,r6,0x0,0x10
80007dbe:	0e 9c       	mov	r12,r7
80007dc0:	e0 a0 03 0c 	rcall	800083d8 <malloc>
80007dc4:	8b 6c       	st.w	r5[0x18],r12
	if (uhc_dev_enum->conf_desc == NULL) {
80007dc6:	18 9a       	mov	r10,r12
		Assert(false);
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
	// Send USB device descriptor request
	req.bmRequestType =
80007dc8:	c1 80       	breq	80007df8 <uhc_enumeration_step13+0x8c>
80007dca:	38 08       	mov	r8,-128
			USB_REQ_RECIP_DEVICE | USB_REQ_TYPE_STANDARD |
			USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
80007dcc:	ba 88       	st.b	sp[0x0],r8
80007dce:	30 68       	mov	r8,6
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
	req.wIndex = 0;
80007dd0:	ba 98       	st.b	sp[0x1],r8
80007dd2:	30 08       	mov	r8,0
	req.wLength = conf_size;
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
80007dd4:	ba 28       	st.h	sp[0x4],r8
			USB_REQ_RECIP_DEVICE | USB_REQ_TYPE_STANDARD |
			USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
	req.wIndex = 0;
	req.wLength = conf_size;
80007dd6:	fe c8 ff d6 	sub	r8,pc,-42
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
80007dda:	ba 36       	st.h	sp[0x6],r6
	// Send USB device descriptor request
	req.bmRequestType =
			USB_REQ_RECIP_DEVICE | USB_REQ_TYPE_STANDARD |
			USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
80007ddc:	20 14       	sub	r4,1
	req.wIndex = 0;
	req.wLength = conf_size;
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
80007dde:	0e 99       	mov	r9,r7
	// Send USB device descriptor request
	req.bmRequestType =
			USB_REQ_RECIP_DEVICE | USB_REQ_TYPE_STANDARD |
			USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
80007de0:	a9 b4       	sbr	r4,0x9
	req.wIndex = 0;
	req.wLength = conf_size;
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
80007de2:	30 1c       	mov	r12,1
80007de4:	ba 14       	st.h	sp[0x2],r4
80007de6:	1a d8       	st.w	--sp,r8
80007de8:	30 08       	mov	r8,0
80007dea:	fa cb ff fc 	sub	r11,sp,-4
80007dee:	fe b0 f7 cb 	rcall	80006d84 <uhd_setup_request>
80007df2:	2f fd       	sub	sp,-4
			&req,
			(uint8_t *) uhc_dev_enum->conf_desc,
			conf_size,
			NULL, uhc_enumeration_step14)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
80007df4:	58 0c       	cp.w	r12,0
80007df6:	c0 31       	brne	80007dfc <uhc_enumeration_step13+0x90>
80007df8:	30 6c       	mov	r12,6
		return;
	}
}
80007dfa:	c8 be       	rcall	80007b10 <uhc_enumeration_error>
80007dfc:	2f ed       	sub	sp,-8
80007dfe:	d8 22       	popm	r4-r7,pc

80007e00 <uhc_enumeration_step14>:
80007e00:	d4 21       	pushm	r4-r7,lr
80007e02:	20 2d       	sub	sp,8
80007e04:	30 89       	mov	r9,8
80007e06:	58 0b       	cp.w	r11,0
80007e08:	5f 18       	srne	r8
80007e0a:	f2 0a 19 00 	cp.h	r10,r9
80007e0e:	5f 89       	srls	r9
80007e10:	f3 e8 10 08 	or	r8,r9,r8
80007e14:	c1 e1       	brne	80007e50 <uhc_enumeration_step14+0x50>
80007e16:	e0 67 09 a0 	mov	r7,2464
	bool b_conf_supported = false;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR)
			|| (payload_trans < sizeof(usb_conf_desc_t))
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)
80007e1a:	30 29       	mov	r9,2
{
	usb_setup_req_t req;
	bool b_conf_supported = false;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR)
80007e1c:	6e 68       	ld.w	r8,r7[0x18]
80007e1e:	11 9b       	ld.ub	r11,r8[0x1]
80007e20:	f2 0b 18 00 	cp.b	r11,r9
			|| (payload_trans < sizeof(usb_conf_desc_t))
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)
			|| (payload_trans != le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength))) {
80007e24:	c1 a1       	brne	80007e58 <uhc_enumeration_step14+0x58>
80007e26:	11 b9       	ld.ub	r9,r8[0x3]
{
	usb_setup_req_t req;
	bool b_conf_supported = false;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR)
80007e28:	11 a8       	ld.ub	r8,r8[0x2]
80007e2a:	f3 e8 10 88 	or	r8,r9,r8<<0x8
80007e2e:	f0 09 16 08 	lsr	r9,r8,0x8
80007e32:	f3 e8 10 88 	or	r8,r9,r8<<0x8
80007e36:	f0 0a 19 00 	cp.h	r10,r8
				UHC_ENUM_DISCONNECT:UHC_ENUM_FAIL);
		return;
	}
	// Check if unless one USB interface is supported by UHIs
	for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
		switch (uhc_uhis[i].install(uhc_dev_enum)) {
80007e3a:	c0 f1       	brne	80007e58 <uhc_enumeration_step14+0x58>
80007e3c:	0e 9c       	mov	r12,r7
80007e3e:	fe c8 e8 de 	sub	r8,pc,-5922
80007e42:	70 08       	ld.w	r8,r8[0x0]
80007e44:	5d 18       	icall	r8
80007e46:	18 9b       	mov	r11,r12
80007e48:	c1 80       	breq	80007e78 <uhc_enumeration_step14+0x78>
80007e4a:	58 1c       	cp.w	r12,1

	if ((status != UHD_TRANS_NOERROR)
			|| (payload_trans < sizeof(usb_conf_desc_t))
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)
			|| (payload_trans != le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength))) {
		uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
80007e4c:	c0 81       	brne	80007e5c <uhc_enumeration_step14+0x5c>
80007e4e:	c0 f8       	rjmp	80007e6c <uhc_enumeration_step14+0x6c>
80007e50:	58 1b       	cp.w	r11,1
80007e52:	c0 31       	brne	80007e58 <uhc_enumeration_step14+0x58>
80007e54:	30 7c       	mov	r12,7
80007e56:	c2 88       	rjmp	80007ea6 <uhc_enumeration_step14+0xa6>
			break;

		default:
			// USB host hardware limitation
			// Free all endpoints
			uhd_ep_free(UHC_DEVICE_ENUM_ADD,0xFF);
80007e58:	30 3c       	mov	r12,3
80007e5a:	c2 68       	rjmp	80007ea6 <uhc_enumeration_step14+0xa6>
80007e5c:	e0 6b 00 ff 	mov	r11,255
80007e60:	30 1c       	mov	r12,1
			UHC_ENUM_EVENT(uhc_dev_enum,UHC_ENUM_HARDWARE_LIMIT);
80007e62:	fe b0 f7 c7 	rcall	80006df0 <uhd_ep_free>
80007e66:	0e 9c       	mov	r12,r7
			return;
		}
	}
	if (!b_conf_supported) {
		// No USB interface supported
		UHC_ENUM_EVENT(uhc_dev_enum, UHC_ENUM_UNSUPPORTED);
80007e68:	30 4b       	mov	r11,4
80007e6a:	c0 28       	rjmp	80007e6e <uhc_enumeration_step14+0x6e>
80007e6c:	0e 9c       	mov	r12,r7
		uhi_hub_suspend(uhc_dev_enum);
	} else
#endif
	{
		// Suspend USB line
		uhd_suspend();
80007e6e:	fe b0 ec c1 	rcall	800057f0 <usb_enum>
80007e72:	fe b0 f4 6b 	rcall	80006748 <uhd_suspend>
	}
	// Enable device configuration
	req.bmRequestType = USB_REQ_RECIP_DEVICE
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_CONFIGURATION;
	req.wValue = uhc_dev_enum->conf_desc->bConfigurationValue;
80007e76:	c1 98       	rjmp	80007ea8 <uhc_enumeration_step14+0xa8>
		return;
	}
	// Enable device configuration
	req.bmRequestType = USB_REQ_RECIP_DEVICE
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_CONFIGURATION;
80007e78:	ba 8c       	st.b	sp[0x0],r12
80007e7a:	6e 69       	ld.w	r9,r7[0x18]
	req.wValue = uhc_dev_enum->conf_desc->bConfigurationValue;
80007e7c:	30 9a       	mov	r10,9
80007e7e:	ba 9a       	st.b	sp[0x1],r10
	req.wIndex = 0;
	req.wLength = 0;
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
80007e80:	13 d9       	ld.ub	r9,r9[0x5]
	// Enable device configuration
	req.bmRequestType = USB_REQ_RECIP_DEVICE
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_CONFIGURATION;
	req.wValue = uhc_dev_enum->conf_desc->bConfigurationValue;
	req.wIndex = 0;
80007e82:	ba 19       	st.h	sp[0x2],r9
	req.wLength = 0;
80007e84:	fe c9 ff d8 	sub	r9,pc,-40
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
80007e88:	ba 2c       	st.h	sp[0x4],r12
80007e8a:	ba 3c       	st.h	sp[0x6],r12
80007e8c:	18 98       	mov	r8,r12
80007e8e:	1a d9       	st.w	--sp,r9
80007e90:	18 9a       	mov	r10,r12
80007e92:	18 99       	mov	r9,r12
80007e94:	fa cb ff fc 	sub	r11,sp,-4
80007e98:	30 1c       	mov	r12,1
80007e9a:	fe b0 f7 75 	rcall	80006d84 <uhd_setup_request>
			&req,
			NULL,
			0,
			NULL, uhc_enumeration_step15)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
80007e9e:	2f fd       	sub	sp,-4
80007ea0:	58 0c       	cp.w	r12,0
80007ea2:	c0 31       	brne	80007ea8 <uhc_enumeration_step14+0xa8>
		return;
	}
}
80007ea4:	30 6c       	mov	r12,6
80007ea6:	c3 5e       	rcall	80007b10 <uhc_enumeration_error>
80007ea8:	2f ed       	sub	sp,-8
80007eaa:	d8 22       	popm	r4-r7,pc

80007eac <uhc_enumeration_step15>:
80007eac:	d4 21       	pushm	r4-r7,lr
80007eae:	30 08       	mov	r8,0
80007eb0:	58 0b       	cp.w	r11,0
80007eb2:	5f 19       	srne	r9
80007eb4:	f0 0a 19 00 	cp.h	r10,r8
80007eb8:	5f 16       	srne	r6
80007eba:	16 97       	mov	r7,r11
80007ebc:	12 46       	or	r6,r9
80007ebe:	10 99       	mov	r9,r8
80007ec0:	fe c8 e9 60 	sub	r8,pc,-5792
80007ec4:	f2 06 18 00 	cp.b	r6,r9
		return;
	}

	// Enable all UHIs supported
	for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
		uhc_uhis[i].enable(uhc_dev_enum);
80007ec8:	c0 e1       	brne	80007ee4 <uhc_enumeration_step15+0x38>
80007eca:	70 18       	ld.w	r8,r8[0x4]
80007ecc:	e0 6c 09 a0 	mov	r12,2464
	uhc_dev_enum->lpm_desc = NULL;
#endif

	uhc_enum_try = 0;

	UHC_ENUM_EVENT(uhc_dev_enum, UHC_ENUM_SUCCESS);
80007ed0:	5d 18       	icall	r8
		return;
	}
	uhc_dev_enum->lpm_desc = NULL;
#endif

	uhc_enum_try = 0;
80007ed2:	e0 68 09 bc 	mov	r8,2492

	UHC_ENUM_EVENT(uhc_dev_enum, UHC_ENUM_SUCCESS);
80007ed6:	30 0b       	mov	r11,0
80007ed8:	b0 86       	st.b	r8[0x0],r6
80007eda:	e0 6c 09 a0 	mov	r12,2464
		uint16_t payload_trans)
{
	UNUSED(add);
	if ((status!=UHD_TRANS_NOERROR) || (payload_trans!=0)) {
		for(uint8_t i = 0; i < UHC_NB_UHI; i++) {
			uhc_uhis[i].uninstall(uhc_dev_enum);
80007ede:	fe b0 ec 89 	rcall	800057f0 <usb_enum>
		}
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
80007ee2:	d8 22       	popm	r4-r7,pc
80007ee4:	70 28       	ld.w	r8,r8[0x8]
80007ee6:	e0 6c 09 a0 	mov	r12,2464
80007eea:	5d 18       	icall	r8
80007eec:	58 17       	cp.w	r7,1
80007eee:	f9 bc 00 07 	moveq	r12,7
80007ef2:	f9 bc 01 03 	movne	r12,3
80007ef6:	c0 de       	rcall	80007b10 <uhc_enumeration_error>
80007ef8:	d8 22       	popm	r4-r7,pc
80007efa:	d7 03       	nop

80007efc <uhc_notify_connection>:
80007efc:	d4 21       	pushm	r4-r7,lr
80007efe:	e0 67 09 a0 	mov	r7,2464
80007f02:	18 96       	mov	r6,r12
80007f04:	58 0c       	cp.w	r12,0
80007f06:	c0 81       	brne	80007f16 <uhc_notify_connection+0x1a>

#ifdef USB_HOST_HUB_SUPPORT
		uhc_power_running = 0;
#endif
	} else {
		if (g_uhc_device_root.address == UHC_USB_ADD_NOT_VALID) {
80007f08:	ef 3c 00 12 	ld.ub	r12,r7[18]
80007f0c:	3f f5       	mov	r5,-1
80007f0e:	ea 0c 18 00 	cp.b	r12,r5
80007f12:	c1 31       	brne	80007f38 <uhc_notify_connection+0x3c>
	if (b_plug) {
		uhc_enum_try = 1;
#ifdef USB_HOST_HUB_SUPPORT
		uhc_dev_enum = dev;
#endif
		uhc_dev_enum->conf_desc = NULL;
80007f14:	d8 22       	popm	r4-r7,pc
 * \param dev      Information about device connected or disconnected
 */
static void uhc_connection_tree(bool b_plug, uhc_device_t* dev)
{
	if (b_plug) {
		uhc_enum_try = 1;
80007f16:	30 08       	mov	r8,0
#ifdef USB_HOST_HUB_SUPPORT
		uhc_dev_enum = dev;
#endif
		uhc_dev_enum->conf_desc = NULL;
		uhc_dev_enum->address = 0;
80007f18:	30 19       	mov	r9,1
80007f1a:	ef 68 00 12 	st.b	r7[18],r8
 * \param dev      Information about device connected or disconnected
 */
static void uhc_connection_tree(bool b_plug, uhc_device_t* dev)
{
	if (b_plug) {
		uhc_enum_try = 1;
80007f1e:	8f 68       	st.w	r7[0x18],r8
#ifdef USB_HOST_HUB_SUPPORT
		uhc_dev_enum = dev;
#endif
		uhc_dev_enum->conf_desc = NULL;
		uhc_dev_enum->address = 0;
		UHC_CONNECTION_EVENT(uhc_dev_enum, true);
80007f20:	e0 68 09 bc 	mov	r8,2492
80007f24:	0e 9c       	mov	r12,r7
80007f26:	b0 89       	st.b	r8[0x0],r9
80007f28:	30 1b       	mov	r11,1
		// Device connected on USB hub
		uhi_hub_send_reset(uhc_dev_enum, callback);
	} else
#endif
	{
		uhd_send_reset(callback);
80007f2a:	fe b0 ec 60 	rcall	800057ea <usb_connection>
80007f2e:	fe cc 05 2a 	sub	r12,pc,1322
		UHC_CONNECTION_EVENT(uhc_dev_enum, true);
		uhc_enumeration_step1();
	} else {
		if (uhc_dev_enum == dev) {
			// Eventually stop enumeration timeout on-going on this device
			uhc_sof_timeout = 0;
80007f32:	fe b0 f4 01 	rcall	80006734 <uhd_send_reset>
		}
		// Abort all transfers (endpoint control and other) and free pipe(s)
		uhd_ep_free(dev->address, 0xFF);
80007f36:	d8 22       	popm	r4-r7,pc
		UHC_CONNECTION_EVENT(uhc_dev_enum, true);
		uhc_enumeration_step1();
	} else {
		if (uhc_dev_enum == dev) {
			// Eventually stop enumeration timeout on-going on this device
			uhc_sof_timeout = 0;
80007f38:	e0 68 3f be 	mov	r8,16318
		}
		// Abort all transfers (endpoint control and other) and free pipe(s)
		uhd_ep_free(dev->address, 0xFF);
80007f3c:	e0 6b 00 ff 	mov	r11,255

		// Disable all USB interfaces (this includes HUB interface)
		for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
			uhc_uhis[i].uninstall(dev);
80007f40:	b0 86       	st.b	r8[0x0],r6
80007f42:	fe b0 f7 57 	rcall	80006df0 <uhd_ep_free>
		}

		UHC_CONNECTION_EVENT(dev, false);
80007f46:	0e 9c       	mov	r12,r7
80007f48:	fe c8 e9 e8 	sub	r8,pc,-5656
80007f4c:	70 28       	ld.w	r8,r8[0x8]
		dev->address = UHC_USB_ADD_NOT_VALID;
80007f4e:	5d 18       	icall	r8
80007f50:	0e 9c       	mov	r12,r7
		// Free USB configuration descriptor buffer
		if (dev->conf_desc != NULL) {
80007f52:	0c 9b       	mov	r11,r6
80007f54:	fe b0 ec 4b 	rcall	800057ea <usb_connection>
			free(dev->conf_desc);
80007f58:	ef 65 00 12 	st.b	r7[18],r5
80007f5c:	6e 6c       	ld.w	r12,r7[0x18]
80007f5e:	58 0c       	cp.w	r12,0
80007f60:	c0 30       	breq	80007f66 <uhc_notify_connection+0x6a>
80007f62:	e0 a0 02 33 	rcall	800083c8 <free>
80007f66:	d8 22       	popm	r4-r7,pc

80007f68 <sysclk_priv_disable_module>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80007f68:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80007f6c:	d3 03       	ssrf	0x10

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80007f6e:	fe 7a 0c 00 	mov	r10,-62464
80007f72:	75 58       	ld.w	r8,r10[0x54]
80007f74:	ed b8 00 06 	bld	r8,0x6
80007f78:	cf d1       	brne	80007f72 <sysclk_priv_disable_module+0xa>
		/* Do nothing */
	}

	/* Disable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
	mask &= ~(1U << module_index);
80007f7a:	30 18       	mov	r8,1
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Disable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80007f7c:	a3 6c       	lsl	r12,0x2
	mask &= ~(1U << module_index);
80007f7e:	f0 0b 09 4b 	lsl	r11,r8,r11
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Disable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80007f82:	e0 2c f3 f8 	sub	r12,62456
	mask &= ~(1U << module_index);
80007f86:	5c db       	com	r11
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Disable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80007f88:	78 08       	ld.w	r8,r12[0x0]
	mask &= ~(1U << module_index);
80007f8a:	10 6b       	and	r11,r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
80007f8c:	99 0b       	st.w	r12[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80007f8e:	ed b9 00 10 	bld	r9,0x10
80007f92:	c0 20       	breq	80007f96 <sysclk_priv_disable_module+0x2e>
      cpu_irq_enable();
80007f94:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
80007f96:	5e fc       	retal	r12

80007f98 <sysclk_disable_pbb_module>:
/**
 * \brief Disable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_disable_pbb_module(unsigned int index)
{
80007f98:	d4 21       	pushm	r4-r7,lr
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(AVR32_PM_CLK_GRP_PBB, index);
80007f9a:	18 9b       	mov	r11,r12
80007f9c:	30 3c       	mov	r12,3
80007f9e:	ce 5f       	rcall	80007f68 <sysclk_priv_disable_module>
80007fa0:	e1 b7 00 00 	mfsr	r7,0x0

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80007fa4:	d3 03       	ssrf	0x10
	cpu_irq_disable();
80007fa6:	e0 69 09 c4 	mov	r9,2500

	/* Disable the bridge if possible */
	flags = cpu_irq_save();

	sysclk_pbb_refcount--;
80007faa:	13 88       	ld.ub	r8,r9[0x0]
80007fac:	20 18       	sub	r8,1
80007fae:	5c 58       	castu.b	r8
80007fb0:	b2 88       	st.b	r9[0x0],r8
	if (!sysclk_pbb_refcount)
80007fb2:	c0 41       	brne	80007fba <sysclk_disable_pbb_module+0x22>
 * \brief Disable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(unsigned int index)
{
	sysclk_priv_disable_module(AVR32_PM_CLK_GRP_HSB, index);
80007fb4:	30 2b       	mov	r11,2
80007fb6:	30 1c       	mov	r12,1
80007fb8:	cd 8f       	rcall	80007f68 <sysclk_priv_disable_module>
80007fba:	e6 17 00 01 	andh	r7,0x1,COH
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80007fbe:	c0 21       	brne	80007fc2 <sysclk_disable_pbb_module+0x2a>
80007fc0:	d5 03       	csrf	0x10
      cpu_irq_enable();
80007fc2:	d8 22       	popm	r4-r7,pc

80007fc4 <sysclk_disable_usb>:
		sysclk_disable_hsb_module(SYSCLK_PBB_BRIDGE);

	cpu_irq_restore(flags);
}
80007fc4:	d4 01       	pushm	lr
80007fc6:	30 09       	mov	r9,0
80007fc8:	fe 78 0c 00 	mov	r8,-62464
80007fcc:	30 1c       	mov	r12,1
80007fce:	f1 49 00 6c 	st.w	r8[108],r9
80007fd2:	30 3b       	mov	r11,3
80007fd4:	cc af       	rcall	80007f68 <sysclk_priv_disable_module>
80007fd6:	30 1c       	mov	r12,1
 */
void sysclk_disable_usb(void)
{
	genclk_disable(AVR32_PM_GCLK_USBB);
	sysclk_disable_hsb_module(SYSCLK_USBB_DATA);
	sysclk_disable_pbb_module(SYSCLK_USBB_REGS);
80007fd8:	ce 0f       	rcall	80007f98 <sysclk_disable_pbb_module>
80007fda:	d8 02       	popm	pc

80007fdc <sysclk_priv_enable_module>:
80007fdc:	e1 b9 00 00 	mfsr	r9,0x0
}
80007fe0:	d3 03       	ssrf	0x10
80007fe2:	fe 7a 0c 00 	mov	r10,-62464
80007fe6:	75 58       	ld.w	r8,r10[0x54]

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80007fe8:	ed b8 00 06 	bld	r8,0x6
80007fec:	cf d1       	brne	80007fe6 <sysclk_priv_enable_module+0xa>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
	mask |= 1U << module_index;
80007fee:	30 18       	mov	r8,1
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80007ff0:	a3 6c       	lsl	r12,0x2
	mask |= 1U << module_index;
80007ff2:	f0 0b 09 4b 	lsl	r11,r8,r11
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80007ff6:	e0 2c f3 f8 	sub	r12,62456
80007ffa:	78 08       	ld.w	r8,r12[0x0]
	mask |= 1U << module_index;
80007ffc:	10 4b       	or	r11,r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
80007ffe:	99 0b       	st.w	r12[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80008000:	ed b9 00 10 	bld	r9,0x10
80008004:	c0 20       	breq	80008008 <sysclk_priv_enable_module+0x2c>
      cpu_irq_enable();
80008006:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
80008008:	5e fc       	retal	r12
8000800a:	d7 03       	nop

8000800c <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
8000800c:	d4 21       	pushm	r4-r7,lr
8000800e:	18 97       	mov	r7,r12

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80008010:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80008014:	d3 03       	ssrf	0x10
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (!sysclk_pbb_refcount)
80008016:	e0 68 09 c4 	mov	r8,2500
8000801a:	11 89       	ld.ub	r9,r8[0x0]
8000801c:	30 08       	mov	r8,0
8000801e:	f0 09 18 00 	cp.b	r9,r8
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80008022:	c0 41       	brne	8000802a <sysclk_enable_pbb_module+0x1e>
80008024:	30 2b       	mov	r11,2
80008026:	30 1c       	mov	r12,1
80008028:	cd af       	rcall	80007fdc <sysclk_priv_enable_module>
		sysclk_enable_hsb_module(SYSCLK_PBB_BRIDGE);
	sysclk_pbb_refcount++;
8000802a:	e0 68 09 c4 	mov	r8,2500
8000802e:	11 89       	ld.ub	r9,r8[0x0]
80008030:	2f f9       	sub	r9,-1
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80008032:	b0 89       	st.b	r8[0x0],r9
80008034:	e6 16 00 01 	andh	r6,0x1,COH
      cpu_irq_enable();
80008038:	c0 21       	brne	8000803c <sysclk_enable_pbb_module+0x30>

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
8000803a:	d5 03       	csrf	0x10
8000803c:	30 3c       	mov	r12,3
8000803e:	0e 9b       	mov	r11,r7
80008040:	cc ef       	rcall	80007fdc <sysclk_priv_enable_module>
}
80008042:	d8 22       	popm	r4-r7,pc

80008044 <T.62>:
80008044:	fe 78 0c 00 	mov	r8,-62464
80008048:	71 59       	ld.w	r9,r8[0x54]
8000804a:	ed b9 00 07 	bld	r9,0x7

static inline void pll_enable_source(enum pll_source src)
{
	switch (src) {
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
8000804e:	5e 0c       	reteq	r12

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80008050:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80008054:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
80008056:	e0 6a 03 07 	mov	r10,775
8000805a:	91 aa       	st.w	r8[0x28],r10
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
8000805c:	70 0a       	ld.w	r10,r8[0x0]
8000805e:	a3 aa       	sbr	r10,0x2
80008060:	91 0a       	st.w	r8[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80008062:	ed b9 00 10 	bld	r9,0x10
80008066:	c0 20       	breq	8000806a <T.62+0x26>
      cpu_irq_enable();
80008068:	d5 03       	csrf	0x10
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
8000806a:	fe 79 0c 00 	mov	r9,-62464
8000806e:	73 58       	ld.w	r8,r9[0x54]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
80008070:	ed b8 00 07 	bld	r8,0x7
80008074:	cf d1       	brne	8000806e <T.62+0x2a>
80008076:	5e fc       	retal	r12

80008078 <pll_enable_config_defaults>:
		break;
	}
}

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
80008078:	d4 21       	pushm	r4-r7,lr

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
8000807a:	fe 78 0c 00 	mov	r8,-62464
8000807e:	71 58       	ld.w	r8,r8[0x54]
80008080:	30 16       	mov	r6,1
		break;
	}
}

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
80008082:	18 97       	mov	r7,r12

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
80008084:	ec 0c 09 46 	lsl	r6,r6,r12
{
	struct pll_config pllcfg;

	pllcfg.ctrl = 0;	// HACK 8/4/14 (bc) to remove warning

	if (pll_is_locked(pll_id)) {
80008088:	ed e8 00 08 	and	r8,r6,r8
8000808c:	c1 b1       	brne	800080c2 <pll_enable_config_defaults+0x4a>
		return; // Pll already running
	}
	switch (pll_id) {
8000808e:	58 0c       	cp.w	r12,0
80008090:	c0 40       	breq	80008098 <pll_enable_config_defaults+0x20>
80008092:	58 1c       	cp.w	r12,1
80008094:	c0 d1       	brne	800080ae <pll_enable_config_defaults+0x36>
80008096:	c0 78       	rjmp	800080a4 <pll_enable_config_defaults+0x2c>
#ifdef CONFIG_PLL0_SOURCE
	case 0:
		pll_enable_source(CONFIG_PLL0_SOURCE);
80008098:	cd 6f       	rcall	80008044 <T.62>
8000809a:	e0 68 01 0c 	mov	r8,268
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert((mul > 2) && (mul <= 16));
	Assert((div > 0) && (div <= 15));

	cfg->ctrl |= ((mul - 1) << AVR32_PM_PLL0_PLLMUL)
8000809e:	ea 18 3f 09 	orh	r8,0x3f09
800080a2:	c0 68       	rjmp	800080ae <pll_enable_config_defaults+0x36>
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_init(&pllcfg,
				CONFIG_PLL0_SOURCE,
				CONFIG_PLL0_DIV,
				CONFIG_PLL0_MUL);
		break;
800080a4:	cd 0f       	rcall	80008044 <T.62>
#endif
#ifdef CONFIG_PLL1_SOURCE
	case 1:
		pll_enable_source(CONFIG_PLL1_SOURCE);
800080a6:	e0 68 01 0c 	mov	r8,268
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert((mul > 2) && (mul <= 16));
	Assert((div > 0) && (div <= 15));

	cfg->ctrl |= ((mul - 1) << AVR32_PM_PLL0_PLLMUL)
800080aa:	ea 18 3f 07 	orh	r8,0x3f07
800080ae:	a1 a8       	sbr	r8,0x0
800080b0:	2f 87       	sub	r7,-8
static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
800080b2:	fe 79 0c 00 	mov	r9,-62464
800080b6:	f2 07 09 28 	st.w	r9[r7<<0x2],r8
800080ba:	73 58       	ld.w	r8,r9[0x54]
800080bc:	ed e8 00 08 	and	r8,r6,r8
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
800080c0:	cf d0       	breq	800080ba <pll_enable_config_defaults+0x42>
800080c2:	d8 22       	popm	r4-r7,pc

800080c4 <sysclk_init>:
800080c4:	d4 01       	pushm	lr
800080c6:	30 0c       	mov	r12,0
800080c8:	cd 8f       	rcall	80008078 <pll_enable_config_defaults>
800080ca:	e0 6c 87 00 	mov	r12,34560

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
800080ce:	ea 1c 03 93 	orh	r12,0x393
800080d2:	fe b0 ed 6d 	rcall	80005bac <flashc_set_bus_freq>
800080d6:	e1 b9 00 00 	mfsr	r9,0x0

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800080da:	d3 03       	ssrf	0x10
	cpu_irq_disable();
800080dc:	fe 7a 0c 00 	mov	r10,-62464
	irqflags_t flags;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
800080e0:	74 08       	ld.w	r8,r10[0x0]
800080e2:	e0 18 ff fc 	andl	r8,0xfffc
800080e6:	a1 b8       	sbr	r8,0x1
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
800080e8:	95 08       	st.w	r10[0x0],r8
	AVR32_PM.mcctrl = mcctrl;
800080ea:	ed b9 00 10 	bld	r9,0x10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800080ee:	c0 20       	breq	800080f2 <sysclk_init+0x2e>
800080f0:	d5 03       	csrf	0x10
      cpu_irq_enable();
800080f2:	d8 02       	popm	pc

800080f4 <sysclk_enable_usb>:

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
800080f4:	d4 01       	pushm	lr
800080f6:	30 1c       	mov	r12,1
800080f8:	c8 af       	rcall	8000800c <sysclk_enable_pbb_module>
800080fa:	30 3b       	mov	r11,3
800080fc:	30 1c       	mov	r12,1
800080fe:	c6 ff       	rcall	80007fdc <sysclk_priv_enable_module>
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80008100:	30 1c       	mov	r12,1
80008102:	cb bf       	rcall	80008078 <pll_enable_config_defaults>
	}
#endif

#ifdef CONFIG_PLL1_SOURCE
	case GENCLK_SRC_PLL1: {
		pll_enable_config_defaults(1);
80008104:	30 79       	mov	r9,7
80008106:	fe 78 0c 00 	mov	r8,-62464
}

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
8000810a:	f1 49 00 6c 	st.w	r8[108],r9
8000810e:	d8 02       	popm	pc

80008110 <__avr32_udiv64>:
80008110:	d4 31       	pushm	r0-r7,lr
80008112:	1a 97       	mov	r7,sp
80008114:	20 2d       	sub	sp,8
80008116:	10 9c       	mov	r12,r8
80008118:	12 9e       	mov	lr,r9
8000811a:	14 93       	mov	r3,r10
8000811c:	58 09       	cp.w	r9,0
8000811e:	e0 81 00 cd 	brne	800082b8 <__avr32_udiv64+0x1a8>
80008122:	16 38       	cp.w	r8,r11
80008124:	e0 88 00 45 	brls	800081ae <__avr32_udiv64+0x9e>
80008128:	f0 08 12 00 	clz	r8,r8
8000812c:	c0 d0       	breq	80008146 <__avr32_udiv64+0x36>
8000812e:	f6 08 09 4b 	lsl	r11,r11,r8
80008132:	f0 09 11 20 	rsub	r9,r8,32
80008136:	f8 08 09 4c 	lsl	r12,r12,r8
8000813a:	f4 09 0a 49 	lsr	r9,r10,r9
8000813e:	f4 08 09 43 	lsl	r3,r10,r8
80008142:	f3 eb 10 0b 	or	r11,r9,r11
80008146:	f8 0e 16 10 	lsr	lr,r12,0x10
8000814a:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000814e:	f6 0e 0d 00 	divu	r0,r11,lr
80008152:	e6 0b 16 10 	lsr	r11,r3,0x10
80008156:	00 99       	mov	r9,r0
80008158:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000815c:	e0 0a 02 48 	mul	r8,r0,r10
80008160:	10 3b       	cp.w	r11,r8
80008162:	c0 d2       	brcc	8000817c <__avr32_udiv64+0x6c>
80008164:	20 19       	sub	r9,1
80008166:	18 0b       	add	r11,r12
80008168:	18 3b       	cp.w	r11,r12
8000816a:	c0 93       	brcs	8000817c <__avr32_udiv64+0x6c>
8000816c:	f2 c5 00 01 	sub	r5,r9,1
80008170:	f6 0c 00 06 	add	r6,r11,r12
80008174:	10 3b       	cp.w	r11,r8
80008176:	c0 32       	brcc	8000817c <__avr32_udiv64+0x6c>
80008178:	0a 99       	mov	r9,r5
8000817a:	0c 9b       	mov	r11,r6
8000817c:	f6 08 01 01 	sub	r1,r11,r8
80008180:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80008184:	e2 0e 0d 00 	divu	r0,r1,lr
80008188:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000818c:	00 98       	mov	r8,r0
8000818e:	e0 0a 02 4a 	mul	r10,r0,r10
80008192:	14 33       	cp.w	r3,r10
80008194:	c0 a2       	brcc	800081a8 <__avr32_udiv64+0x98>
80008196:	20 18       	sub	r8,1
80008198:	18 03       	add	r3,r12
8000819a:	18 33       	cp.w	r3,r12
8000819c:	c0 63       	brcs	800081a8 <__avr32_udiv64+0x98>
8000819e:	f0 cb 00 01 	sub	r11,r8,1
800081a2:	14 33       	cp.w	r3,r10
800081a4:	f6 08 17 30 	movlo	r8,r11
800081a8:	f1 e9 11 08 	or	r8,r8,r9<<0x10
800081ac:	ce c8       	rjmp	80008384 <__avr32_udiv64+0x274>
800081ae:	58 08       	cp.w	r8,0
800081b0:	c0 51       	brne	800081ba <__avr32_udiv64+0xaa>
800081b2:	30 19       	mov	r9,1
800081b4:	f2 08 0d 08 	divu	r8,r9,r8
800081b8:	10 9c       	mov	r12,r8
800081ba:	f8 06 12 00 	clz	r6,r12
800081be:	c0 41       	brne	800081c6 <__avr32_udiv64+0xb6>
800081c0:	18 1b       	sub	r11,r12
800081c2:	30 19       	mov	r9,1
800081c4:	c4 68       	rjmp	80008250 <__avr32_udiv64+0x140>
800081c6:	ec 01 11 20 	rsub	r1,r6,32
800081ca:	f4 01 0a 49 	lsr	r9,r10,r1
800081ce:	f8 06 09 4c 	lsl	r12,r12,r6
800081d2:	f6 06 09 48 	lsl	r8,r11,r6
800081d6:	f6 01 0a 41 	lsr	r1,r11,r1
800081da:	f3 e8 10 08 	or	r8,r9,r8
800081de:	f8 03 16 10 	lsr	r3,r12,0x10
800081e2:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
800081e6:	e2 03 0d 00 	divu	r0,r1,r3
800081ea:	f0 0b 16 10 	lsr	r11,r8,0x10
800081ee:	00 9e       	mov	lr,r0
800081f0:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800081f4:	e0 05 02 49 	mul	r9,r0,r5
800081f8:	12 3b       	cp.w	r11,r9
800081fa:	c0 d2       	brcc	80008214 <__avr32_udiv64+0x104>
800081fc:	20 1e       	sub	lr,1
800081fe:	18 0b       	add	r11,r12
80008200:	18 3b       	cp.w	r11,r12
80008202:	c0 93       	brcs	80008214 <__avr32_udiv64+0x104>
80008204:	fc c1 00 01 	sub	r1,lr,1
80008208:	f6 0c 00 02 	add	r2,r11,r12
8000820c:	12 3b       	cp.w	r11,r9
8000820e:	c0 32       	brcc	80008214 <__avr32_udiv64+0x104>
80008210:	02 9e       	mov	lr,r1
80008212:	04 9b       	mov	r11,r2
80008214:	12 1b       	sub	r11,r9
80008216:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8000821a:	f6 03 0d 02 	divu	r2,r11,r3
8000821e:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80008222:	04 99       	mov	r9,r2
80008224:	e4 05 02 4b 	mul	r11,r2,r5
80008228:	16 38       	cp.w	r8,r11
8000822a:	c0 d2       	brcc	80008244 <__avr32_udiv64+0x134>
8000822c:	20 19       	sub	r9,1
8000822e:	18 08       	add	r8,r12
80008230:	18 38       	cp.w	r8,r12
80008232:	c0 93       	brcs	80008244 <__avr32_udiv64+0x134>
80008234:	f2 c3 00 01 	sub	r3,r9,1
80008238:	f0 0c 00 05 	add	r5,r8,r12
8000823c:	16 38       	cp.w	r8,r11
8000823e:	c0 32       	brcc	80008244 <__avr32_udiv64+0x134>
80008240:	06 99       	mov	r9,r3
80008242:	0a 98       	mov	r8,r5
80008244:	f4 06 09 43 	lsl	r3,r10,r6
80008248:	f0 0b 01 0b 	sub	r11,r8,r11
8000824c:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80008250:	f8 06 16 10 	lsr	r6,r12,0x10
80008254:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80008258:	f6 06 0d 00 	divu	r0,r11,r6
8000825c:	e6 0b 16 10 	lsr	r11,r3,0x10
80008260:	00 9a       	mov	r10,r0
80008262:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008266:	e0 0e 02 48 	mul	r8,r0,lr
8000826a:	10 3b       	cp.w	r11,r8
8000826c:	c0 d2       	brcc	80008286 <__avr32_udiv64+0x176>
8000826e:	20 1a       	sub	r10,1
80008270:	18 0b       	add	r11,r12
80008272:	18 3b       	cp.w	r11,r12
80008274:	c0 93       	brcs	80008286 <__avr32_udiv64+0x176>
80008276:	f4 c2 00 01 	sub	r2,r10,1
8000827a:	f6 0c 00 05 	add	r5,r11,r12
8000827e:	10 3b       	cp.w	r11,r8
80008280:	c0 32       	brcc	80008286 <__avr32_udiv64+0x176>
80008282:	04 9a       	mov	r10,r2
80008284:	0a 9b       	mov	r11,r5
80008286:	f6 08 01 01 	sub	r1,r11,r8
8000828a:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000828e:	e2 06 0d 00 	divu	r0,r1,r6
80008292:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80008296:	00 98       	mov	r8,r0
80008298:	e0 0e 02 4b 	mul	r11,r0,lr
8000829c:	16 33       	cp.w	r3,r11
8000829e:	c0 a2       	brcc	800082b2 <__avr32_udiv64+0x1a2>
800082a0:	20 18       	sub	r8,1
800082a2:	18 03       	add	r3,r12
800082a4:	18 33       	cp.w	r3,r12
800082a6:	c0 63       	brcs	800082b2 <__avr32_udiv64+0x1a2>
800082a8:	f0 cc 00 01 	sub	r12,r8,1
800082ac:	16 33       	cp.w	r3,r11
800082ae:	f8 08 17 30 	movlo	r8,r12
800082b2:	f1 ea 11 08 	or	r8,r8,r10<<0x10
800082b6:	c6 b8       	rjmp	8000838c <__avr32_udiv64+0x27c>
800082b8:	16 39       	cp.w	r9,r11
800082ba:	e0 8b 00 67 	brhi	80008388 <__avr32_udiv64+0x278>
800082be:	f2 09 12 00 	clz	r9,r9
800082c2:	c0 b1       	brne	800082d8 <__avr32_udiv64+0x1c8>
800082c4:	10 3a       	cp.w	r10,r8
800082c6:	5f 2a       	srhs	r10
800082c8:	1c 3b       	cp.w	r11,lr
800082ca:	5f b8       	srhi	r8
800082cc:	10 4a       	or	r10,r8
800082ce:	f2 0a 18 00 	cp.b	r10,r9
800082d2:	c5 b0       	breq	80008388 <__avr32_udiv64+0x278>
800082d4:	30 18       	mov	r8,1
800082d6:	c5 b8       	rjmp	8000838c <__avr32_udiv64+0x27c>
800082d8:	f2 03 11 20 	rsub	r3,r9,32
800082dc:	fc 09 09 4e 	lsl	lr,lr,r9
800082e0:	f6 09 09 4c 	lsl	r12,r11,r9
800082e4:	f4 03 0a 42 	lsr	r2,r10,r3
800082e8:	f0 09 09 46 	lsl	r6,r8,r9
800082ec:	f0 03 0a 48 	lsr	r8,r8,r3
800082f0:	f6 03 0a 43 	lsr	r3,r11,r3
800082f4:	18 42       	or	r2,r12
800082f6:	f1 ee 10 0c 	or	r12,r8,lr
800082fa:	f8 01 16 10 	lsr	r1,r12,0x10
800082fe:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80008302:	e6 01 0d 04 	divu	r4,r3,r1
80008306:	e4 03 16 10 	lsr	r3,r2,0x10
8000830a:	08 98       	mov	r8,r4
8000830c:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80008310:	e8 0e 02 45 	mul	r5,r4,lr
80008314:	0a 33       	cp.w	r3,r5
80008316:	c0 d2       	brcc	80008330 <__avr32_udiv64+0x220>
80008318:	20 18       	sub	r8,1
8000831a:	18 03       	add	r3,r12
8000831c:	18 33       	cp.w	r3,r12
8000831e:	c0 93       	brcs	80008330 <__avr32_udiv64+0x220>
80008320:	f0 c0 00 01 	sub	r0,r8,1
80008324:	e6 0c 00 0b 	add	r11,r3,r12
80008328:	0a 33       	cp.w	r3,r5
8000832a:	c0 32       	brcc	80008330 <__avr32_udiv64+0x220>
8000832c:	00 98       	mov	r8,r0
8000832e:	16 93       	mov	r3,r11
80008330:	0a 13       	sub	r3,r5
80008332:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80008336:	e6 01 0d 00 	divu	r0,r3,r1
8000833a:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000833e:	00 93       	mov	r3,r0
80008340:	e0 0e 02 4e 	mul	lr,r0,lr
80008344:	1c 3b       	cp.w	r11,lr
80008346:	c0 d2       	brcc	80008360 <__avr32_udiv64+0x250>
80008348:	20 13       	sub	r3,1
8000834a:	18 0b       	add	r11,r12
8000834c:	18 3b       	cp.w	r11,r12
8000834e:	c0 93       	brcs	80008360 <__avr32_udiv64+0x250>
80008350:	f6 0c 00 0c 	add	r12,r11,r12
80008354:	e6 c5 00 01 	sub	r5,r3,1
80008358:	1c 3b       	cp.w	r11,lr
8000835a:	c0 32       	brcc	80008360 <__avr32_udiv64+0x250>
8000835c:	0a 93       	mov	r3,r5
8000835e:	18 9b       	mov	r11,r12
80008360:	e7 e8 11 08 	or	r8,r3,r8<<0x10
80008364:	1c 1b       	sub	r11,lr
80008366:	f0 06 06 42 	mulu.d	r2,r8,r6
8000836a:	06 96       	mov	r6,r3
8000836c:	16 36       	cp.w	r6,r11
8000836e:	e0 8b 00 0a 	brhi	80008382 <__avr32_udiv64+0x272>
80008372:	5f 0b       	sreq	r11
80008374:	f4 09 09 49 	lsl	r9,r10,r9
80008378:	12 32       	cp.w	r2,r9
8000837a:	5f b9       	srhi	r9
8000837c:	f7 e9 00 09 	and	r9,r11,r9
80008380:	c0 60       	breq	8000838c <__avr32_udiv64+0x27c>
80008382:	20 18       	sub	r8,1
80008384:	30 09       	mov	r9,0
80008386:	c0 38       	rjmp	8000838c <__avr32_udiv64+0x27c>
80008388:	30 09       	mov	r9,0
8000838a:	12 98       	mov	r8,r9
8000838c:	10 9a       	mov	r10,r8
8000838e:	12 93       	mov	r3,r9
80008390:	10 92       	mov	r2,r8
80008392:	12 9b       	mov	r11,r9
80008394:	2f ed       	sub	sp,-8
80008396:	d8 32       	popm	r0-r7,pc

80008398 <atexit>:
80008398:	d4 01       	pushm	lr
8000839a:	30 09       	mov	r9,0
8000839c:	18 9b       	mov	r11,r12
8000839e:	12 9a       	mov	r10,r9
800083a0:	12 9c       	mov	r12,r9
800083a2:	e0 a0 03 27 	rcall	800089f0 <__register_exitproc>
800083a6:	d8 02       	popm	pc

800083a8 <exit>:
800083a8:	d4 21       	pushm	r4-r7,lr
800083aa:	30 0b       	mov	r11,0
800083ac:	18 97       	mov	r7,r12
800083ae:	e0 a0 03 73 	rcall	80008a94 <__call_exitprocs>
800083b2:	fe c8 ee 3e 	sub	r8,pc,-4546
800083b6:	70 0c       	ld.w	r12,r8[0x0]
800083b8:	78 a8       	ld.w	r8,r12[0x28]
800083ba:	58 08       	cp.w	r8,0
800083bc:	c0 20       	breq	800083c0 <exit+0x18>
800083be:	5d 18       	icall	r8
800083c0:	0e 9c       	mov	r12,r7
800083c2:	e0 a0 02 f6 	rcall	800089ae <_exit>
800083c6:	d7 03       	nop

800083c8 <free>:
800083c8:	d4 01       	pushm	lr
800083ca:	e0 68 01 28 	mov	r8,296
800083ce:	18 9b       	mov	r11,r12
800083d0:	70 0c       	ld.w	r12,r8[0x0]
800083d2:	e0 a0 04 13 	rcall	80008bf8 <_free_r>
800083d6:	d8 02       	popm	pc

800083d8 <malloc>:
800083d8:	d4 01       	pushm	lr
800083da:	e0 68 01 28 	mov	r8,296
800083de:	18 9b       	mov	r11,r12
800083e0:	70 0c       	ld.w	r12,r8[0x0]
800083e2:	c0 3c       	rcall	800083e8 <_malloc_r>
800083e4:	d8 02       	popm	pc
800083e6:	d7 03       	nop

800083e8 <_malloc_r>:
800083e8:	d4 31       	pushm	r0-r7,lr
800083ea:	f6 c8 ff f5 	sub	r8,r11,-11
800083ee:	18 95       	mov	r5,r12
800083f0:	10 97       	mov	r7,r8
800083f2:	e0 17 ff f8 	andl	r7,0xfff8
800083f6:	59 68       	cp.w	r8,22
800083f8:	f9 b7 08 10 	movls	r7,16
800083fc:	16 37       	cp.w	r7,r11
800083fe:	5f 38       	srlo	r8
80008400:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80008404:	c0 50       	breq	8000840e <_malloc_r+0x26>
80008406:	30 c8       	mov	r8,12
80008408:	99 38       	st.w	r12[0xc],r8
8000840a:	e0 8f 01 f4 	bral	800087f2 <_malloc_r+0x40a>
8000840e:	e0 a0 02 a5 	rcall	80008958 <__malloc_lock>
80008412:	e0 47 01 f7 	cp.w	r7,503
80008416:	e0 8b 00 1d 	brhi	80008450 <_malloc_r+0x68>
8000841a:	ee 03 16 03 	lsr	r3,r7,0x3
8000841e:	e0 68 01 2c 	mov	r8,300
80008422:	f0 03 00 38 	add	r8,r8,r3<<0x3
80008426:	70 36       	ld.w	r6,r8[0xc]
80008428:	10 36       	cp.w	r6,r8
8000842a:	c0 61       	brne	80008436 <_malloc_r+0x4e>
8000842c:	ec c8 ff f8 	sub	r8,r6,-8
80008430:	70 36       	ld.w	r6,r8[0xc]
80008432:	10 36       	cp.w	r6,r8
80008434:	c0 c0       	breq	8000844c <_malloc_r+0x64>
80008436:	6c 18       	ld.w	r8,r6[0x4]
80008438:	e0 18 ff fc 	andl	r8,0xfffc
8000843c:	6c 3a       	ld.w	r10,r6[0xc]
8000843e:	ec 08 00 09 	add	r9,r6,r8
80008442:	0a 9c       	mov	r12,r5
80008444:	6c 28       	ld.w	r8,r6[0x8]
80008446:	95 28       	st.w	r10[0x8],r8
80008448:	91 3a       	st.w	r8[0xc],r10
8000844a:	c4 78       	rjmp	800084d8 <_malloc_r+0xf0>
8000844c:	2f e3       	sub	r3,-2
8000844e:	c4 d8       	rjmp	800084e8 <_malloc_r+0x100>
80008450:	ee 03 16 09 	lsr	r3,r7,0x9
80008454:	c0 41       	brne	8000845c <_malloc_r+0x74>
80008456:	ee 03 16 03 	lsr	r3,r7,0x3
8000845a:	c2 68       	rjmp	800084a6 <_malloc_r+0xbe>
8000845c:	58 43       	cp.w	r3,4
8000845e:	e0 8b 00 06 	brhi	8000846a <_malloc_r+0x82>
80008462:	ee 03 16 06 	lsr	r3,r7,0x6
80008466:	2c 83       	sub	r3,-56
80008468:	c1 f8       	rjmp	800084a6 <_malloc_r+0xbe>
8000846a:	59 43       	cp.w	r3,20
8000846c:	e0 8b 00 04 	brhi	80008474 <_malloc_r+0x8c>
80008470:	2a 53       	sub	r3,-91
80008472:	c1 a8       	rjmp	800084a6 <_malloc_r+0xbe>
80008474:	e0 43 00 54 	cp.w	r3,84
80008478:	e0 8b 00 06 	brhi	80008484 <_malloc_r+0x9c>
8000847c:	ee 03 16 0c 	lsr	r3,r7,0xc
80008480:	29 23       	sub	r3,-110
80008482:	c1 28       	rjmp	800084a6 <_malloc_r+0xbe>
80008484:	e0 43 01 54 	cp.w	r3,340
80008488:	e0 8b 00 06 	brhi	80008494 <_malloc_r+0xac>
8000848c:	ee 03 16 0f 	lsr	r3,r7,0xf
80008490:	28 93       	sub	r3,-119
80008492:	c0 a8       	rjmp	800084a6 <_malloc_r+0xbe>
80008494:	e0 43 05 54 	cp.w	r3,1364
80008498:	e0 88 00 04 	brls	800084a0 <_malloc_r+0xb8>
8000849c:	37 e3       	mov	r3,126
8000849e:	c0 48       	rjmp	800084a6 <_malloc_r+0xbe>
800084a0:	ee 03 16 12 	lsr	r3,r7,0x12
800084a4:	28 43       	sub	r3,-124
800084a6:	e0 6a 01 2c 	mov	r10,300
800084aa:	f4 03 00 3a 	add	r10,r10,r3<<0x3
800084ae:	74 36       	ld.w	r6,r10[0xc]
800084b0:	c1 98       	rjmp	800084e2 <_malloc_r+0xfa>
800084b2:	6c 19       	ld.w	r9,r6[0x4]
800084b4:	e0 19 ff fc 	andl	r9,0xfffc
800084b8:	f2 07 01 0b 	sub	r11,r9,r7
800084bc:	58 fb       	cp.w	r11,15
800084be:	e0 8a 00 04 	brle	800084c6 <_malloc_r+0xde>
800084c2:	20 13       	sub	r3,1
800084c4:	c1 18       	rjmp	800084e6 <_malloc_r+0xfe>
800084c6:	6c 38       	ld.w	r8,r6[0xc]
800084c8:	58 0b       	cp.w	r11,0
800084ca:	c0 b5       	brlt	800084e0 <_malloc_r+0xf8>
800084cc:	6c 2a       	ld.w	r10,r6[0x8]
800084ce:	ec 09 00 09 	add	r9,r6,r9
800084d2:	0a 9c       	mov	r12,r5
800084d4:	91 2a       	st.w	r8[0x8],r10
800084d6:	95 38       	st.w	r10[0xc],r8
800084d8:	72 18       	ld.w	r8,r9[0x4]
800084da:	a1 a8       	sbr	r8,0x0
800084dc:	93 18       	st.w	r9[0x4],r8
800084de:	cb c8       	rjmp	80008656 <_malloc_r+0x26e>
800084e0:	10 96       	mov	r6,r8
800084e2:	14 36       	cp.w	r6,r10
800084e4:	ce 71       	brne	800084b2 <_malloc_r+0xca>
800084e6:	2f f3       	sub	r3,-1
800084e8:	e0 6a 01 2c 	mov	r10,300
800084ec:	f4 cc ff f8 	sub	r12,r10,-8
800084f0:	78 26       	ld.w	r6,r12[0x8]
800084f2:	18 36       	cp.w	r6,r12
800084f4:	c6 c0       	breq	800085cc <_malloc_r+0x1e4>
800084f6:	6c 19       	ld.w	r9,r6[0x4]
800084f8:	e0 19 ff fc 	andl	r9,0xfffc
800084fc:	f2 07 01 08 	sub	r8,r9,r7
80008500:	58 f8       	cp.w	r8,15
80008502:	e0 89 00 8f 	brgt	80008620 <_malloc_r+0x238>
80008506:	99 3c       	st.w	r12[0xc],r12
80008508:	99 2c       	st.w	r12[0x8],r12
8000850a:	58 08       	cp.w	r8,0
8000850c:	c0 55       	brlt	80008516 <_malloc_r+0x12e>
8000850e:	ec 09 00 09 	add	r9,r6,r9
80008512:	0a 9c       	mov	r12,r5
80008514:	ce 2b       	rjmp	800084d8 <_malloc_r+0xf0>
80008516:	e0 49 01 ff 	cp.w	r9,511
8000851a:	e0 8b 00 13 	brhi	80008540 <_malloc_r+0x158>
8000851e:	a3 99       	lsr	r9,0x3
80008520:	f4 09 00 38 	add	r8,r10,r9<<0x3
80008524:	70 2b       	ld.w	r11,r8[0x8]
80008526:	8d 38       	st.w	r6[0xc],r8
80008528:	8d 2b       	st.w	r6[0x8],r11
8000852a:	97 36       	st.w	r11[0xc],r6
8000852c:	91 26       	st.w	r8[0x8],r6
8000852e:	a3 49       	asr	r9,0x2
80008530:	74 18       	ld.w	r8,r10[0x4]
80008532:	30 1b       	mov	r11,1
80008534:	f6 09 09 49 	lsl	r9,r11,r9
80008538:	f1 e9 10 09 	or	r9,r8,r9
8000853c:	95 19       	st.w	r10[0x4],r9
8000853e:	c4 78       	rjmp	800085cc <_malloc_r+0x1e4>
80008540:	f2 0a 16 09 	lsr	r10,r9,0x9
80008544:	58 4a       	cp.w	r10,4
80008546:	e0 8b 00 07 	brhi	80008554 <_malloc_r+0x16c>
8000854a:	f2 0a 16 06 	lsr	r10,r9,0x6
8000854e:	2c 8a       	sub	r10,-56
80008550:	c2 08       	rjmp	80008590 <_malloc_r+0x1a8>
80008552:	d7 03       	nop
80008554:	59 4a       	cp.w	r10,20
80008556:	e0 8b 00 04 	brhi	8000855e <_malloc_r+0x176>
8000855a:	2a 5a       	sub	r10,-91
8000855c:	c1 a8       	rjmp	80008590 <_malloc_r+0x1a8>
8000855e:	e0 4a 00 54 	cp.w	r10,84
80008562:	e0 8b 00 06 	brhi	8000856e <_malloc_r+0x186>
80008566:	f2 0a 16 0c 	lsr	r10,r9,0xc
8000856a:	29 2a       	sub	r10,-110
8000856c:	c1 28       	rjmp	80008590 <_malloc_r+0x1a8>
8000856e:	e0 4a 01 54 	cp.w	r10,340
80008572:	e0 8b 00 06 	brhi	8000857e <_malloc_r+0x196>
80008576:	f2 0a 16 0f 	lsr	r10,r9,0xf
8000857a:	28 9a       	sub	r10,-119
8000857c:	c0 a8       	rjmp	80008590 <_malloc_r+0x1a8>
8000857e:	e0 4a 05 54 	cp.w	r10,1364
80008582:	e0 88 00 04 	brls	8000858a <_malloc_r+0x1a2>
80008586:	37 ea       	mov	r10,126
80008588:	c0 48       	rjmp	80008590 <_malloc_r+0x1a8>
8000858a:	f2 0a 16 12 	lsr	r10,r9,0x12
8000858e:	28 4a       	sub	r10,-124
80008590:	e0 6b 01 2c 	mov	r11,300
80008594:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80008598:	68 28       	ld.w	r8,r4[0x8]
8000859a:	08 38       	cp.w	r8,r4
8000859c:	c0 e1       	brne	800085b8 <_malloc_r+0x1d0>
8000859e:	76 19       	ld.w	r9,r11[0x4]
800085a0:	a3 4a       	asr	r10,0x2
800085a2:	30 1e       	mov	lr,1
800085a4:	fc 0a 09 4a 	lsl	r10,lr,r10
800085a8:	f3 ea 10 0a 	or	r10,r9,r10
800085ac:	10 99       	mov	r9,r8
800085ae:	97 1a       	st.w	r11[0x4],r10
800085b0:	c0 a8       	rjmp	800085c4 <_malloc_r+0x1dc>
800085b2:	70 28       	ld.w	r8,r8[0x8]
800085b4:	08 38       	cp.w	r8,r4
800085b6:	c0 60       	breq	800085c2 <_malloc_r+0x1da>
800085b8:	70 1a       	ld.w	r10,r8[0x4]
800085ba:	e0 1a ff fc 	andl	r10,0xfffc
800085be:	14 39       	cp.w	r9,r10
800085c0:	cf 93       	brcs	800085b2 <_malloc_r+0x1ca>
800085c2:	70 39       	ld.w	r9,r8[0xc]
800085c4:	8d 39       	st.w	r6[0xc],r9
800085c6:	8d 28       	st.w	r6[0x8],r8
800085c8:	91 36       	st.w	r8[0xc],r6
800085ca:	93 26       	st.w	r9[0x8],r6
800085cc:	e6 08 14 02 	asr	r8,r3,0x2
800085d0:	30 1b       	mov	r11,1
800085d2:	e0 64 01 2c 	mov	r4,300
800085d6:	f6 08 09 4b 	lsl	r11,r11,r8
800085da:	68 18       	ld.w	r8,r4[0x4]
800085dc:	10 3b       	cp.w	r11,r8
800085de:	e0 8b 00 69 	brhi	800086b0 <_malloc_r+0x2c8>
800085e2:	f7 e8 00 09 	and	r9,r11,r8
800085e6:	c0 b1       	brne	800085fc <_malloc_r+0x214>
800085e8:	e0 13 ff fc 	andl	r3,0xfffc
800085ec:	a1 7b       	lsl	r11,0x1
800085ee:	2f c3       	sub	r3,-4
800085f0:	c0 38       	rjmp	800085f6 <_malloc_r+0x20e>
800085f2:	2f c3       	sub	r3,-4
800085f4:	a1 7b       	lsl	r11,0x1
800085f6:	f7 e8 00 09 	and	r9,r11,r8
800085fa:	cf c0       	breq	800085f2 <_malloc_r+0x20a>
800085fc:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80008600:	06 92       	mov	r2,r3
80008602:	1c 91       	mov	r1,lr
80008604:	62 36       	ld.w	r6,r1[0xc]
80008606:	c2 d8       	rjmp	80008660 <_malloc_r+0x278>
80008608:	6c 1a       	ld.w	r10,r6[0x4]
8000860a:	e0 1a ff fc 	andl	r10,0xfffc
8000860e:	f4 07 01 08 	sub	r8,r10,r7
80008612:	58 f8       	cp.w	r8,15
80008614:	e0 8a 00 15 	brle	8000863e <_malloc_r+0x256>
80008618:	6c 3a       	ld.w	r10,r6[0xc]
8000861a:	6c 29       	ld.w	r9,r6[0x8]
8000861c:	95 29       	st.w	r10[0x8],r9
8000861e:	93 3a       	st.w	r9[0xc],r10
80008620:	0e 99       	mov	r9,r7
80008622:	ec 07 00 07 	add	r7,r6,r7
80008626:	a1 a9       	sbr	r9,0x0
80008628:	99 37       	st.w	r12[0xc],r7
8000862a:	99 27       	st.w	r12[0x8],r7
8000862c:	8d 19       	st.w	r6[0x4],r9
8000862e:	ee 08 09 08 	st.w	r7[r8],r8
80008632:	8f 2c       	st.w	r7[0x8],r12
80008634:	8f 3c       	st.w	r7[0xc],r12
80008636:	a1 a8       	sbr	r8,0x0
80008638:	0a 9c       	mov	r12,r5
8000863a:	8f 18       	st.w	r7[0x4],r8
8000863c:	c0 d8       	rjmp	80008656 <_malloc_r+0x26e>
8000863e:	6c 39       	ld.w	r9,r6[0xc]
80008640:	58 08       	cp.w	r8,0
80008642:	c0 e5       	brlt	8000865e <_malloc_r+0x276>
80008644:	ec 0a 00 0a 	add	r10,r6,r10
80008648:	74 18       	ld.w	r8,r10[0x4]
8000864a:	a1 a8       	sbr	r8,0x0
8000864c:	0a 9c       	mov	r12,r5
8000864e:	95 18       	st.w	r10[0x4],r8
80008650:	6c 28       	ld.w	r8,r6[0x8]
80008652:	93 28       	st.w	r9[0x8],r8
80008654:	91 39       	st.w	r8[0xc],r9
80008656:	c8 2d       	rcall	8000895a <__malloc_unlock>
80008658:	ec cc ff f8 	sub	r12,r6,-8
8000865c:	d8 32       	popm	r0-r7,pc
8000865e:	12 96       	mov	r6,r9
80008660:	02 36       	cp.w	r6,r1
80008662:	cd 31       	brne	80008608 <_malloc_r+0x220>
80008664:	2f f2       	sub	r2,-1
80008666:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
8000866a:	c0 30       	breq	80008670 <_malloc_r+0x288>
8000866c:	2f 81       	sub	r1,-8
8000866e:	cc bb       	rjmp	80008604 <_malloc_r+0x21c>
80008670:	1c 98       	mov	r8,lr
80008672:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80008676:	c0 81       	brne	80008686 <_malloc_r+0x29e>
80008678:	68 19       	ld.w	r9,r4[0x4]
8000867a:	f6 08 11 ff 	rsub	r8,r11,-1
8000867e:	f3 e8 00 08 	and	r8,r9,r8
80008682:	89 18       	st.w	r4[0x4],r8
80008684:	c0 78       	rjmp	80008692 <_malloc_r+0x2aa>
80008686:	f0 c9 00 08 	sub	r9,r8,8
8000868a:	20 13       	sub	r3,1
8000868c:	70 08       	ld.w	r8,r8[0x0]
8000868e:	12 38       	cp.w	r8,r9
80008690:	cf 10       	breq	80008672 <_malloc_r+0x28a>
80008692:	a1 7b       	lsl	r11,0x1
80008694:	68 18       	ld.w	r8,r4[0x4]
80008696:	10 3b       	cp.w	r11,r8
80008698:	e0 8b 00 0c 	brhi	800086b0 <_malloc_r+0x2c8>
8000869c:	58 0b       	cp.w	r11,0
8000869e:	c0 90       	breq	800086b0 <_malloc_r+0x2c8>
800086a0:	04 93       	mov	r3,r2
800086a2:	c0 38       	rjmp	800086a8 <_malloc_r+0x2c0>
800086a4:	2f c3       	sub	r3,-4
800086a6:	a1 7b       	lsl	r11,0x1
800086a8:	f7 e8 00 09 	and	r9,r11,r8
800086ac:	ca 81       	brne	800085fc <_malloc_r+0x214>
800086ae:	cf bb       	rjmp	800086a4 <_malloc_r+0x2bc>
800086b0:	68 23       	ld.w	r3,r4[0x8]
800086b2:	66 12       	ld.w	r2,r3[0x4]
800086b4:	e0 12 ff fc 	andl	r2,0xfffc
800086b8:	0e 32       	cp.w	r2,r7
800086ba:	5f 39       	srlo	r9
800086bc:	e4 07 01 08 	sub	r8,r2,r7
800086c0:	58 f8       	cp.w	r8,15
800086c2:	5f aa       	srle	r10
800086c4:	f5 e9 10 09 	or	r9,r10,r9
800086c8:	e0 80 00 96 	breq	800087f4 <_malloc_r+0x40c>
800086cc:	e0 68 09 d0 	mov	r8,2512
800086d0:	70 01       	ld.w	r1,r8[0x0]
800086d2:	e0 68 05 38 	mov	r8,1336
800086d6:	2f 01       	sub	r1,-16
800086d8:	70 08       	ld.w	r8,r8[0x0]
800086da:	0e 01       	add	r1,r7
800086dc:	5b f8       	cp.w	r8,-1
800086de:	c0 40       	breq	800086e6 <_malloc_r+0x2fe>
800086e0:	28 11       	sub	r1,-127
800086e2:	e0 11 ff 80 	andl	r1,0xff80
800086e6:	02 9b       	mov	r11,r1
800086e8:	0a 9c       	mov	r12,r5
800086ea:	c3 9d       	rcall	8000895c <_sbrk_r>
800086ec:	18 96       	mov	r6,r12
800086ee:	5b fc       	cp.w	r12,-1
800086f0:	c7 30       	breq	800087d6 <_malloc_r+0x3ee>
800086f2:	e6 02 00 08 	add	r8,r3,r2
800086f6:	10 3c       	cp.w	r12,r8
800086f8:	c0 32       	brcc	800086fe <_malloc_r+0x316>
800086fa:	08 33       	cp.w	r3,r4
800086fc:	c6 d1       	brne	800087d6 <_malloc_r+0x3ee>
800086fe:	e0 6a 09 d4 	mov	r10,2516
80008702:	74 09       	ld.w	r9,r10[0x0]
80008704:	e2 09 00 09 	add	r9,r1,r9
80008708:	95 09       	st.w	r10[0x0],r9
8000870a:	10 36       	cp.w	r6,r8
8000870c:	c0 a1       	brne	80008720 <_malloc_r+0x338>
8000870e:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80008712:	c0 71       	brne	80008720 <_malloc_r+0x338>
80008714:	e2 02 00 02 	add	r2,r1,r2
80008718:	68 28       	ld.w	r8,r4[0x8]
8000871a:	a1 a2       	sbr	r2,0x0
8000871c:	91 12       	st.w	r8[0x4],r2
8000871e:	c4 b8       	rjmp	800087b4 <_malloc_r+0x3cc>
80008720:	e0 6a 05 38 	mov	r10,1336
80008724:	74 0b       	ld.w	r11,r10[0x0]
80008726:	5b fb       	cp.w	r11,-1
80008728:	c0 31       	brne	8000872e <_malloc_r+0x346>
8000872a:	95 06       	st.w	r10[0x0],r6
8000872c:	c0 78       	rjmp	8000873a <_malloc_r+0x352>
8000872e:	ec 09 00 09 	add	r9,r6,r9
80008732:	e0 6a 09 d4 	mov	r10,2516
80008736:	10 19       	sub	r9,r8
80008738:	95 09       	st.w	r10[0x0],r9
8000873a:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
8000873e:	c0 40       	breq	80008746 <_malloc_r+0x35e>
80008740:	f0 08 11 08 	rsub	r8,r8,8
80008744:	10 06       	add	r6,r8
80008746:	28 08       	sub	r8,-128
80008748:	ec 01 00 01 	add	r1,r6,r1
8000874c:	0a 9c       	mov	r12,r5
8000874e:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80008752:	f0 01 01 01 	sub	r1,r8,r1
80008756:	02 9b       	mov	r11,r1
80008758:	c0 2d       	rcall	8000895c <_sbrk_r>
8000875a:	30 08       	mov	r8,0
8000875c:	5b fc       	cp.w	r12,-1
8000875e:	c0 31       	brne	80008764 <_malloc_r+0x37c>
80008760:	0c 9c       	mov	r12,r6
80008762:	10 91       	mov	r1,r8
80008764:	e0 68 09 d4 	mov	r8,2516
80008768:	0c 1c       	sub	r12,r6
8000876a:	70 09       	ld.w	r9,r8[0x0]
8000876c:	02 0c       	add	r12,r1
8000876e:	89 26       	st.w	r4[0x8],r6
80008770:	a1 ac       	sbr	r12,0x0
80008772:	12 01       	add	r1,r9
80008774:	8d 1c       	st.w	r6[0x4],r12
80008776:	91 01       	st.w	r8[0x0],r1
80008778:	08 33       	cp.w	r3,r4
8000877a:	c1 d0       	breq	800087b4 <_malloc_r+0x3cc>
8000877c:	58 f2       	cp.w	r2,15
8000877e:	e0 8b 00 05 	brhi	80008788 <_malloc_r+0x3a0>
80008782:	30 18       	mov	r8,1
80008784:	8d 18       	st.w	r6[0x4],r8
80008786:	c2 88       	rjmp	800087d6 <_malloc_r+0x3ee>
80008788:	30 59       	mov	r9,5
8000878a:	20 c2       	sub	r2,12
8000878c:	e0 12 ff f8 	andl	r2,0xfff8
80008790:	e6 02 00 08 	add	r8,r3,r2
80008794:	91 29       	st.w	r8[0x8],r9
80008796:	91 19       	st.w	r8[0x4],r9
80008798:	66 18       	ld.w	r8,r3[0x4]
8000879a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000879e:	e5 e8 10 08 	or	r8,r2,r8
800087a2:	87 18       	st.w	r3[0x4],r8
800087a4:	58 f2       	cp.w	r2,15
800087a6:	e0 88 00 07 	brls	800087b4 <_malloc_r+0x3cc>
800087aa:	e6 cb ff f8 	sub	r11,r3,-8
800087ae:	0a 9c       	mov	r12,r5
800087b0:	e0 a0 02 24 	rcall	80008bf8 <_free_r>
800087b4:	e0 68 09 d4 	mov	r8,2516
800087b8:	e0 69 09 cc 	mov	r9,2508
800087bc:	70 08       	ld.w	r8,r8[0x0]
800087be:	72 0a       	ld.w	r10,r9[0x0]
800087c0:	14 38       	cp.w	r8,r10
800087c2:	e0 88 00 03 	brls	800087c8 <_malloc_r+0x3e0>
800087c6:	93 08       	st.w	r9[0x0],r8
800087c8:	e0 69 09 c8 	mov	r9,2504
800087cc:	72 0a       	ld.w	r10,r9[0x0]
800087ce:	14 38       	cp.w	r8,r10
800087d0:	e0 88 00 03 	brls	800087d6 <_malloc_r+0x3ee>
800087d4:	93 08       	st.w	r9[0x0],r8
800087d6:	68 28       	ld.w	r8,r4[0x8]
800087d8:	70 18       	ld.w	r8,r8[0x4]
800087da:	e0 18 ff fc 	andl	r8,0xfffc
800087de:	0e 38       	cp.w	r8,r7
800087e0:	5f 39       	srlo	r9
800087e2:	0e 18       	sub	r8,r7
800087e4:	58 f8       	cp.w	r8,15
800087e6:	5f aa       	srle	r10
800087e8:	f5 e9 10 09 	or	r9,r10,r9
800087ec:	c0 40       	breq	800087f4 <_malloc_r+0x40c>
800087ee:	0a 9c       	mov	r12,r5
800087f0:	cb 5c       	rcall	8000895a <__malloc_unlock>
800087f2:	d8 3a       	popm	r0-r7,pc,r12=0
800087f4:	68 26       	ld.w	r6,r4[0x8]
800087f6:	a1 a8       	sbr	r8,0x0
800087f8:	0e 99       	mov	r9,r7
800087fa:	a1 a9       	sbr	r9,0x0
800087fc:	8d 19       	st.w	r6[0x4],r9
800087fe:	ec 07 00 07 	add	r7,r6,r7
80008802:	0a 9c       	mov	r12,r5
80008804:	89 27       	st.w	r4[0x8],r7
80008806:	8f 18       	st.w	r7[0x4],r8
80008808:	ca 9c       	rcall	8000895a <__malloc_unlock>
8000880a:	ec cc ff f8 	sub	r12,r6,-8
8000880e:	d8 32       	popm	r0-r7,pc

80008810 <memcpy>:
80008810:	58 8a       	cp.w	r10,8
80008812:	c2 f5       	brlt	80008870 <memcpy+0x60>
80008814:	f9 eb 10 09 	or	r9,r12,r11
80008818:	e2 19 00 03 	andl	r9,0x3,COH
8000881c:	e0 81 00 97 	brne	8000894a <memcpy+0x13a>
80008820:	e0 4a 00 20 	cp.w	r10,32
80008824:	c3 b4       	brge	8000889a <memcpy+0x8a>
80008826:	f4 08 14 02 	asr	r8,r10,0x2
8000882a:	f0 09 11 08 	rsub	r9,r8,8
8000882e:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80008832:	76 69       	ld.w	r9,r11[0x18]
80008834:	99 69       	st.w	r12[0x18],r9
80008836:	76 59       	ld.w	r9,r11[0x14]
80008838:	99 59       	st.w	r12[0x14],r9
8000883a:	76 49       	ld.w	r9,r11[0x10]
8000883c:	99 49       	st.w	r12[0x10],r9
8000883e:	76 39       	ld.w	r9,r11[0xc]
80008840:	99 39       	st.w	r12[0xc],r9
80008842:	76 29       	ld.w	r9,r11[0x8]
80008844:	99 29       	st.w	r12[0x8],r9
80008846:	76 19       	ld.w	r9,r11[0x4]
80008848:	99 19       	st.w	r12[0x4],r9
8000884a:	76 09       	ld.w	r9,r11[0x0]
8000884c:	99 09       	st.w	r12[0x0],r9
8000884e:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80008852:	f8 08 00 28 	add	r8,r12,r8<<0x2
80008856:	e0 1a 00 03 	andl	r10,0x3
8000885a:	f4 0a 11 04 	rsub	r10,r10,4
8000885e:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80008862:	17 a9       	ld.ub	r9,r11[0x2]
80008864:	b0 a9       	st.b	r8[0x2],r9
80008866:	17 99       	ld.ub	r9,r11[0x1]
80008868:	b0 99       	st.b	r8[0x1],r9
8000886a:	17 89       	ld.ub	r9,r11[0x0]
8000886c:	b0 89       	st.b	r8[0x0],r9
8000886e:	5e fc       	retal	r12
80008870:	f4 0a 11 09 	rsub	r10,r10,9
80008874:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80008878:	17 f9       	ld.ub	r9,r11[0x7]
8000887a:	b8 f9       	st.b	r12[0x7],r9
8000887c:	17 e9       	ld.ub	r9,r11[0x6]
8000887e:	b8 e9       	st.b	r12[0x6],r9
80008880:	17 d9       	ld.ub	r9,r11[0x5]
80008882:	b8 d9       	st.b	r12[0x5],r9
80008884:	17 c9       	ld.ub	r9,r11[0x4]
80008886:	b8 c9       	st.b	r12[0x4],r9
80008888:	17 b9       	ld.ub	r9,r11[0x3]
8000888a:	b8 b9       	st.b	r12[0x3],r9
8000888c:	17 a9       	ld.ub	r9,r11[0x2]
8000888e:	b8 a9       	st.b	r12[0x2],r9
80008890:	17 99       	ld.ub	r9,r11[0x1]
80008892:	b8 99       	st.b	r12[0x1],r9
80008894:	17 89       	ld.ub	r9,r11[0x0]
80008896:	b8 89       	st.b	r12[0x0],r9
80008898:	5e fc       	retal	r12
8000889a:	eb cd 40 c0 	pushm	r6-r7,lr
8000889e:	18 99       	mov	r9,r12
800088a0:	22 0a       	sub	r10,32
800088a2:	b7 07       	ld.d	r6,r11++
800088a4:	b3 26       	st.d	r9++,r6
800088a6:	b7 07       	ld.d	r6,r11++
800088a8:	b3 26       	st.d	r9++,r6
800088aa:	b7 07       	ld.d	r6,r11++
800088ac:	b3 26       	st.d	r9++,r6
800088ae:	b7 07       	ld.d	r6,r11++
800088b0:	b3 26       	st.d	r9++,r6
800088b2:	22 0a       	sub	r10,32
800088b4:	cf 74       	brge	800088a2 <memcpy+0x92>
800088b6:	2f 0a       	sub	r10,-16
800088b8:	c0 65       	brlt	800088c4 <memcpy+0xb4>
800088ba:	b7 07       	ld.d	r6,r11++
800088bc:	b3 26       	st.d	r9++,r6
800088be:	b7 07       	ld.d	r6,r11++
800088c0:	b3 26       	st.d	r9++,r6
800088c2:	21 0a       	sub	r10,16
800088c4:	5c 3a       	neg	r10
800088c6:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
800088ca:	d7 03       	nop
800088cc:	d7 03       	nop
800088ce:	f7 36 00 0e 	ld.ub	r6,r11[14]
800088d2:	f3 66 00 0e 	st.b	r9[14],r6
800088d6:	f7 36 00 0d 	ld.ub	r6,r11[13]
800088da:	f3 66 00 0d 	st.b	r9[13],r6
800088de:	f7 36 00 0c 	ld.ub	r6,r11[12]
800088e2:	f3 66 00 0c 	st.b	r9[12],r6
800088e6:	f7 36 00 0b 	ld.ub	r6,r11[11]
800088ea:	f3 66 00 0b 	st.b	r9[11],r6
800088ee:	f7 36 00 0a 	ld.ub	r6,r11[10]
800088f2:	f3 66 00 0a 	st.b	r9[10],r6
800088f6:	f7 36 00 09 	ld.ub	r6,r11[9]
800088fa:	f3 66 00 09 	st.b	r9[9],r6
800088fe:	f7 36 00 08 	ld.ub	r6,r11[8]
80008902:	f3 66 00 08 	st.b	r9[8],r6
80008906:	f7 36 00 07 	ld.ub	r6,r11[7]
8000890a:	f3 66 00 07 	st.b	r9[7],r6
8000890e:	f7 36 00 06 	ld.ub	r6,r11[6]
80008912:	f3 66 00 06 	st.b	r9[6],r6
80008916:	f7 36 00 05 	ld.ub	r6,r11[5]
8000891a:	f3 66 00 05 	st.b	r9[5],r6
8000891e:	f7 36 00 04 	ld.ub	r6,r11[4]
80008922:	f3 66 00 04 	st.b	r9[4],r6
80008926:	f7 36 00 03 	ld.ub	r6,r11[3]
8000892a:	f3 66 00 03 	st.b	r9[3],r6
8000892e:	f7 36 00 02 	ld.ub	r6,r11[2]
80008932:	f3 66 00 02 	st.b	r9[2],r6
80008936:	f7 36 00 01 	ld.ub	r6,r11[1]
8000893a:	f3 66 00 01 	st.b	r9[1],r6
8000893e:	f7 36 00 00 	ld.ub	r6,r11[0]
80008942:	f3 66 00 00 	st.b	r9[0],r6
80008946:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000894a:	20 1a       	sub	r10,1
8000894c:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80008950:	f8 0a 0b 09 	st.b	r12[r10],r9
80008954:	cf b1       	brne	8000894a <memcpy+0x13a>
80008956:	5e fc       	retal	r12

80008958 <__malloc_lock>:
80008958:	5e fc       	retal	r12

8000895a <__malloc_unlock>:
8000895a:	5e fc       	retal	r12

8000895c <_sbrk_r>:
8000895c:	d4 21       	pushm	r4-r7,lr
8000895e:	30 08       	mov	r8,0
80008960:	18 97       	mov	r7,r12
80008962:	e0 66 3f c0 	mov	r6,16320
80008966:	16 9c       	mov	r12,r11
80008968:	8d 08       	st.w	r6[0x0],r8
8000896a:	c2 7c       	rcall	800089b8 <_sbrk>
8000896c:	5b fc       	cp.w	r12,-1
8000896e:	c0 51       	brne	80008978 <_sbrk_r+0x1c>
80008970:	6c 08       	ld.w	r8,r6[0x0]
80008972:	58 08       	cp.w	r8,0
80008974:	c0 20       	breq	80008978 <_sbrk_r+0x1c>
80008976:	8f 38       	st.w	r7[0xc],r8
80008978:	d8 22       	popm	r4-r7,pc
8000897a:	d7 03       	nop

8000897c <strncmp>:
8000897c:	58 0a       	cp.w	r10,0
8000897e:	c0 81       	brne	8000898e <strncmp+0x12>
80008980:	5e fa       	retal	r10
80008982:	58 0a       	cp.w	r10,0
80008984:	c0 b0       	breq	8000899a <strncmp+0x1e>
80008986:	58 08       	cp.w	r8,0
80008988:	c0 90       	breq	8000899a <strncmp+0x1e>
8000898a:	2f fc       	sub	r12,-1
8000898c:	2f fb       	sub	r11,-1
8000898e:	20 1a       	sub	r10,1
80008990:	19 88       	ld.ub	r8,r12[0x0]
80008992:	17 89       	ld.ub	r9,r11[0x0]
80008994:	f0 09 18 00 	cp.b	r9,r8
80008998:	cf 50       	breq	80008982 <strncmp+0x6>
8000899a:	19 8c       	ld.ub	r12,r12[0x0]
8000899c:	17 88       	ld.ub	r8,r11[0x0]
8000899e:	10 1c       	sub	r12,r8
800089a0:	5e fc       	retal	r12

800089a2 <_init_startup>:
800089a2:	5e fd       	retal	0

800089a4 <_init_argv>:
800089a4:	30 e8       	mov	r8,14
800089a6:	d6 73       	breakpoint
800089a8:	3f fc       	mov	r12,-1
800089aa:	35 8b       	mov	r11,88
800089ac:	5e fc       	retal	r12

800089ae <_exit>:
800089ae:	30 d8       	mov	r8,13
800089b0:	d6 73       	breakpoint
800089b2:	3f fc       	mov	r12,-1
800089b4:	35 8b       	mov	r11,88
800089b6:	c0 08       	rjmp	800089b6 <_exit+0x8>

800089b8 <_sbrk>:
800089b8:	d4 01       	pushm	lr
800089ba:	e0 68 09 fc 	mov	r8,2556
800089be:	70 09       	ld.w	r9,r8[0x0]
800089c0:	58 09       	cp.w	r9,0
800089c2:	c0 41       	brne	800089ca <_sbrk+0x12>
800089c4:	e0 69 3f c8 	mov	r9,16328
800089c8:	91 09       	st.w	r8[0x0],r9
800089ca:	e0 69 09 fc 	mov	r9,2556
800089ce:	e0 6a 70 00 	mov	r10,28672
800089d2:	72 08       	ld.w	r8,r9[0x0]
800089d4:	f0 0c 00 0c 	add	r12,r8,r12
800089d8:	14 3c       	cp.w	r12,r10
800089da:	e0 8b 00 04 	brhi	800089e2 <_sbrk+0x2a>
800089de:	93 0c       	st.w	r9[0x0],r12
800089e0:	c0 58       	rjmp	800089ea <_sbrk+0x32>
800089e2:	cb fc       	rcall	80008b60 <__errno>
800089e4:	30 c8       	mov	r8,12
800089e6:	99 08       	st.w	r12[0x0],r8
800089e8:	3f f8       	mov	r8,-1
800089ea:	10 9c       	mov	r12,r8
800089ec:	d8 02       	popm	pc
800089ee:	d7 03       	nop

800089f0 <__register_exitproc>:
800089f0:	d4 31       	pushm	r0-r7,lr
800089f2:	fe c8 f4 7e 	sub	r8,pc,-2946
800089f6:	18 97       	mov	r7,r12
800089f8:	70 03       	ld.w	r3,r8[0x0]
800089fa:	16 96       	mov	r6,r11
800089fc:	14 95       	mov	r5,r10
800089fe:	12 92       	mov	r2,r9
80008a00:	67 24       	ld.w	r4,r3[0x48]
80008a02:	58 04       	cp.w	r4,0
80008a04:	c0 51       	brne	80008a0e <__register_exitproc+0x1e>
80008a06:	e6 c4 ff b4 	sub	r4,r3,-76
80008a0a:	e7 44 00 48 	st.w	r3[72],r4
80008a0e:	68 18       	ld.w	r8,r4[0x4]
80008a10:	59 f8       	cp.w	r8,31
80008a12:	e0 8a 00 0e 	brle	80008a2e <__register_exitproc+0x3e>
80008a16:	e0 6c 00 8c 	mov	r12,140
80008a1a:	fe b0 fc df 	rcall	800083d8 <malloc>
80008a1e:	18 94       	mov	r4,r12
80008a20:	c3 90       	breq	80008a92 <__register_exitproc+0xa2>
80008a22:	67 28       	ld.w	r8,r3[0x48]
80008a24:	99 08       	st.w	r12[0x0],r8
80008a26:	e7 4c 00 48 	st.w	r3[72],r12
80008a2a:	30 08       	mov	r8,0
80008a2c:	99 18       	st.w	r12[0x4],r8
80008a2e:	58 07       	cp.w	r7,0
80008a30:	c2 80       	breq	80008a80 <__register_exitproc+0x90>
80008a32:	e8 fc 00 88 	ld.w	r12,r4[136]
80008a36:	58 0c       	cp.w	r12,0
80008a38:	c0 d1       	brne	80008a52 <__register_exitproc+0x62>
80008a3a:	e0 6c 01 08 	mov	r12,264
80008a3e:	fe b0 fc cd 	rcall	800083d8 <malloc>
80008a42:	c2 80       	breq	80008a92 <__register_exitproc+0xa2>
80008a44:	30 08       	mov	r8,0
80008a46:	e9 4c 00 88 	st.w	r4[136],r12
80008a4a:	f9 48 01 04 	st.w	r12[260],r8
80008a4e:	f9 48 01 00 	st.w	r12[256],r8
80008a52:	68 18       	ld.w	r8,r4[0x4]
80008a54:	f0 c9 ff e0 	sub	r9,r8,-32
80008a58:	f8 08 09 25 	st.w	r12[r8<<0x2],r5
80008a5c:	f8 09 09 22 	st.w	r12[r9<<0x2],r2
80008a60:	30 1a       	mov	r10,1
80008a62:	f8 f9 01 00 	ld.w	r9,r12[256]
80008a66:	f4 08 09 48 	lsl	r8,r10,r8
80008a6a:	10 49       	or	r9,r8
80008a6c:	f9 49 01 00 	st.w	r12[256],r9
80008a70:	58 27       	cp.w	r7,2
80008a72:	c0 71       	brne	80008a80 <__register_exitproc+0x90>
80008a74:	f8 f9 01 04 	ld.w	r9,r12[260]
80008a78:	f3 e8 10 08 	or	r8,r9,r8
80008a7c:	f9 48 01 04 	st.w	r12[260],r8
80008a80:	68 18       	ld.w	r8,r4[0x4]
80008a82:	30 0c       	mov	r12,0
80008a84:	f0 c9 ff ff 	sub	r9,r8,-1
80008a88:	2f e8       	sub	r8,-2
80008a8a:	89 19       	st.w	r4[0x4],r9
80008a8c:	e8 08 09 26 	st.w	r4[r8<<0x2],r6
80008a90:	d8 32       	popm	r0-r7,pc
80008a92:	dc 3a       	popm	r0-r7,pc,r12=-1

80008a94 <__call_exitprocs>:
80008a94:	d4 31       	pushm	r0-r7,lr
80008a96:	20 3d       	sub	sp,12
80008a98:	fe c8 f5 24 	sub	r8,pc,-2780
80008a9c:	50 2c       	stdsp	sp[0x8],r12
80008a9e:	70 08       	ld.w	r8,r8[0x0]
80008aa0:	16 91       	mov	r1,r11
80008aa2:	50 08       	stdsp	sp[0x0],r8
80008aa4:	2b 88       	sub	r8,-72
80008aa6:	50 18       	stdsp	sp[0x4],r8
80008aa8:	40 0a       	lddsp	r10,sp[0x0]
80008aaa:	40 14       	lddsp	r4,sp[0x4]
80008aac:	75 27       	ld.w	r7,r10[0x48]
80008aae:	c5 48       	rjmp	80008b56 <__call_exitprocs+0xc2>
80008ab0:	6e 15       	ld.w	r5,r7[0x4]
80008ab2:	ee f6 00 88 	ld.w	r6,r7[136]
80008ab6:	ea c2 ff ff 	sub	r2,r5,-1
80008aba:	20 15       	sub	r5,1
80008abc:	ee 02 00 22 	add	r2,r7,r2<<0x2
80008ac0:	ec 05 00 23 	add	r3,r6,r5<<0x2
80008ac4:	c3 48       	rjmp	80008b2c <__call_exitprocs+0x98>
80008ac6:	58 01       	cp.w	r1,0
80008ac8:	c0 70       	breq	80008ad6 <__call_exitprocs+0x42>
80008aca:	58 06       	cp.w	r6,0
80008acc:	c2 d0       	breq	80008b26 <__call_exitprocs+0x92>
80008ace:	e6 f8 00 80 	ld.w	r8,r3[128]
80008ad2:	02 38       	cp.w	r8,r1
80008ad4:	c2 91       	brne	80008b26 <__call_exitprocs+0x92>
80008ad6:	6e 19       	ld.w	r9,r7[0x4]
80008ad8:	64 08       	ld.w	r8,r2[0x0]
80008ada:	20 19       	sub	r9,1
80008adc:	12 35       	cp.w	r5,r9
80008ade:	c0 31       	brne	80008ae4 <__call_exitprocs+0x50>
80008ae0:	8f 15       	st.w	r7[0x4],r5
80008ae2:	c0 38       	rjmp	80008ae8 <__call_exitprocs+0x54>
80008ae4:	30 09       	mov	r9,0
80008ae6:	85 09       	st.w	r2[0x0],r9
80008ae8:	58 08       	cp.w	r8,0
80008aea:	c1 e0       	breq	80008b26 <__call_exitprocs+0x92>
80008aec:	6e 10       	ld.w	r0,r7[0x4]
80008aee:	58 06       	cp.w	r6,0
80008af0:	c0 90       	breq	80008b02 <__call_exitprocs+0x6e>
80008af2:	30 1a       	mov	r10,1
80008af4:	f4 05 09 49 	lsl	r9,r10,r5
80008af8:	ec fa 01 00 	ld.w	r10,r6[256]
80008afc:	f3 ea 00 0a 	and	r10,r9,r10
80008b00:	c0 31       	brne	80008b06 <__call_exitprocs+0x72>
80008b02:	5d 18       	icall	r8
80008b04:	c0 b8       	rjmp	80008b1a <__call_exitprocs+0x86>
80008b06:	ec fa 01 04 	ld.w	r10,r6[260]
80008b0a:	66 0b       	ld.w	r11,r3[0x0]
80008b0c:	14 69       	and	r9,r10
80008b0e:	c0 41       	brne	80008b16 <__call_exitprocs+0x82>
80008b10:	40 2c       	lddsp	r12,sp[0x8]
80008b12:	5d 18       	icall	r8
80008b14:	c0 38       	rjmp	80008b1a <__call_exitprocs+0x86>
80008b16:	16 9c       	mov	r12,r11
80008b18:	5d 18       	icall	r8
80008b1a:	6e 18       	ld.w	r8,r7[0x4]
80008b1c:	10 30       	cp.w	r0,r8
80008b1e:	cc 51       	brne	80008aa8 <__call_exitprocs+0x14>
80008b20:	68 08       	ld.w	r8,r4[0x0]
80008b22:	0e 38       	cp.w	r8,r7
80008b24:	cc 21       	brne	80008aa8 <__call_exitprocs+0x14>
80008b26:	20 15       	sub	r5,1
80008b28:	20 43       	sub	r3,4
80008b2a:	20 42       	sub	r2,4
80008b2c:	58 05       	cp.w	r5,0
80008b2e:	cc c4       	brge	80008ac6 <__call_exitprocs+0x32>
80008b30:	6e 18       	ld.w	r8,r7[0x4]
80008b32:	58 08       	cp.w	r8,0
80008b34:	c0 f1       	brne	80008b52 <__call_exitprocs+0xbe>
80008b36:	6e 08       	ld.w	r8,r7[0x0]
80008b38:	58 08       	cp.w	r8,0
80008b3a:	c0 c0       	breq	80008b52 <__call_exitprocs+0xbe>
80008b3c:	89 08       	st.w	r4[0x0],r8
80008b3e:	58 06       	cp.w	r6,0
80008b40:	c0 40       	breq	80008b48 <__call_exitprocs+0xb4>
80008b42:	0c 9c       	mov	r12,r6
80008b44:	fe b0 fc 42 	rcall	800083c8 <free>
80008b48:	0e 9c       	mov	r12,r7
80008b4a:	fe b0 fc 3f 	rcall	800083c8 <free>
80008b4e:	68 07       	ld.w	r7,r4[0x0]
80008b50:	c0 38       	rjmp	80008b56 <__call_exitprocs+0xc2>
80008b52:	0e 94       	mov	r4,r7
80008b54:	6e 07       	ld.w	r7,r7[0x0]
80008b56:	58 07       	cp.w	r7,0
80008b58:	ca c1       	brne	80008ab0 <__call_exitprocs+0x1c>
80008b5a:	2f dd       	sub	sp,-12
80008b5c:	d8 32       	popm	r0-r7,pc
80008b5e:	d7 03       	nop

80008b60 <__errno>:
80008b60:	e0 68 01 28 	mov	r8,296
80008b64:	70 0c       	ld.w	r12,r8[0x0]
80008b66:	2f 4c       	sub	r12,-12
80008b68:	5e fc       	retal	r12
80008b6a:	d7 03       	nop

80008b6c <_malloc_trim_r>:
80008b6c:	d4 21       	pushm	r4-r7,lr
80008b6e:	16 95       	mov	r5,r11
80008b70:	18 97       	mov	r7,r12
80008b72:	cf 3e       	rcall	80008958 <__malloc_lock>
80008b74:	e0 64 01 2c 	mov	r4,300
80008b78:	68 28       	ld.w	r8,r4[0x8]
80008b7a:	70 16       	ld.w	r6,r8[0x4]
80008b7c:	e0 16 ff fc 	andl	r6,0xfffc
80008b80:	ec c8 ff 91 	sub	r8,r6,-111
80008b84:	f0 05 01 05 	sub	r5,r8,r5
80008b88:	e0 15 ff 80 	andl	r5,0xff80
80008b8c:	ea c5 00 80 	sub	r5,r5,128
80008b90:	e0 45 00 7f 	cp.w	r5,127
80008b94:	e0 8a 00 22 	brle	80008bd8 <_malloc_trim_r+0x6c>
80008b98:	30 0b       	mov	r11,0
80008b9a:	0e 9c       	mov	r12,r7
80008b9c:	ce 0e       	rcall	8000895c <_sbrk_r>
80008b9e:	68 28       	ld.w	r8,r4[0x8]
80008ba0:	0c 08       	add	r8,r6
80008ba2:	10 3c       	cp.w	r12,r8
80008ba4:	c1 a1       	brne	80008bd8 <_malloc_trim_r+0x6c>
80008ba6:	ea 0b 11 00 	rsub	r11,r5,0
80008baa:	0e 9c       	mov	r12,r7
80008bac:	cd 8e       	rcall	8000895c <_sbrk_r>
80008bae:	5b fc       	cp.w	r12,-1
80008bb0:	c1 71       	brne	80008bde <_malloc_trim_r+0x72>
80008bb2:	30 0b       	mov	r11,0
80008bb4:	0e 9c       	mov	r12,r7
80008bb6:	cd 3e       	rcall	8000895c <_sbrk_r>
80008bb8:	68 28       	ld.w	r8,r4[0x8]
80008bba:	f8 08 01 09 	sub	r9,r12,r8
80008bbe:	58 f9       	cp.w	r9,15
80008bc0:	e0 8a 00 0c 	brle	80008bd8 <_malloc_trim_r+0x6c>
80008bc4:	a1 a9       	sbr	r9,0x0
80008bc6:	91 19       	st.w	r8[0x4],r9
80008bc8:	e0 68 05 38 	mov	r8,1336
80008bcc:	70 09       	ld.w	r9,r8[0x0]
80008bce:	e0 68 09 d4 	mov	r8,2516
80008bd2:	f8 09 01 09 	sub	r9,r12,r9
80008bd6:	91 09       	st.w	r8[0x0],r9
80008bd8:	0e 9c       	mov	r12,r7
80008bda:	cc 0e       	rcall	8000895a <__malloc_unlock>
80008bdc:	d8 2a       	popm	r4-r7,pc,r12=0
80008bde:	68 28       	ld.w	r8,r4[0x8]
80008be0:	0a 16       	sub	r6,r5
80008be2:	a1 a6       	sbr	r6,0x0
80008be4:	91 16       	st.w	r8[0x4],r6
80008be6:	e0 68 09 d4 	mov	r8,2516
80008bea:	70 09       	ld.w	r9,r8[0x0]
80008bec:	0a 19       	sub	r9,r5
80008bee:	0e 9c       	mov	r12,r7
80008bf0:	91 09       	st.w	r8[0x0],r9
80008bf2:	cb 4e       	rcall	8000895a <__malloc_unlock>
80008bf4:	da 2a       	popm	r4-r7,pc,r12=1
80008bf6:	d7 03       	nop

80008bf8 <_free_r>:
80008bf8:	d4 21       	pushm	r4-r7,lr
80008bfa:	16 96       	mov	r6,r11
80008bfc:	18 97       	mov	r7,r12
80008bfe:	58 0b       	cp.w	r11,0
80008c00:	e0 80 00 bc 	breq	80008d78 <_free_r+0x180>
80008c04:	ca ae       	rcall	80008958 <__malloc_lock>
80008c06:	20 86       	sub	r6,8
80008c08:	e0 6a 01 2c 	mov	r10,300
80008c0c:	6c 18       	ld.w	r8,r6[0x4]
80008c0e:	74 2e       	ld.w	lr,r10[0x8]
80008c10:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80008c14:	a1 c8       	cbr	r8,0x0
80008c16:	ec 08 00 09 	add	r9,r6,r8
80008c1a:	72 1b       	ld.w	r11,r9[0x4]
80008c1c:	e0 1b ff fc 	andl	r11,0xfffc
80008c20:	1c 39       	cp.w	r9,lr
80008c22:	c1 d1       	brne	80008c5c <_free_r+0x64>
80008c24:	f6 08 00 08 	add	r8,r11,r8
80008c28:	58 0c       	cp.w	r12,0
80008c2a:	c0 81       	brne	80008c3a <_free_r+0x42>
80008c2c:	6c 09       	ld.w	r9,r6[0x0]
80008c2e:	12 16       	sub	r6,r9
80008c30:	12 08       	add	r8,r9
80008c32:	6c 3b       	ld.w	r11,r6[0xc]
80008c34:	6c 29       	ld.w	r9,r6[0x8]
80008c36:	97 29       	st.w	r11[0x8],r9
80008c38:	93 3b       	st.w	r9[0xc],r11
80008c3a:	10 99       	mov	r9,r8
80008c3c:	95 26       	st.w	r10[0x8],r6
80008c3e:	a1 a9       	sbr	r9,0x0
80008c40:	8d 19       	st.w	r6[0x4],r9
80008c42:	e0 69 05 34 	mov	r9,1332
80008c46:	72 09       	ld.w	r9,r9[0x0]
80008c48:	12 38       	cp.w	r8,r9
80008c4a:	c0 63       	brcs	80008c56 <_free_r+0x5e>
80008c4c:	e0 68 09 d0 	mov	r8,2512
80008c50:	0e 9c       	mov	r12,r7
80008c52:	70 0b       	ld.w	r11,r8[0x0]
80008c54:	c8 cf       	rcall	80008b6c <_malloc_trim_r>
80008c56:	0e 9c       	mov	r12,r7
80008c58:	c8 1e       	rcall	8000895a <__malloc_unlock>
80008c5a:	d8 22       	popm	r4-r7,pc
80008c5c:	93 1b       	st.w	r9[0x4],r11
80008c5e:	58 0c       	cp.w	r12,0
80008c60:	c0 30       	breq	80008c66 <_free_r+0x6e>
80008c62:	30 0c       	mov	r12,0
80008c64:	c0 e8       	rjmp	80008c80 <_free_r+0x88>
80008c66:	6c 0e       	ld.w	lr,r6[0x0]
80008c68:	f4 c5 ff f8 	sub	r5,r10,-8
80008c6c:	1c 08       	add	r8,lr
80008c6e:	1c 16       	sub	r6,lr
80008c70:	6c 2e       	ld.w	lr,r6[0x8]
80008c72:	0a 3e       	cp.w	lr,r5
80008c74:	c0 31       	brne	80008c7a <_free_r+0x82>
80008c76:	30 1c       	mov	r12,1
80008c78:	c0 48       	rjmp	80008c80 <_free_r+0x88>
80008c7a:	6c 35       	ld.w	r5,r6[0xc]
80008c7c:	8b 2e       	st.w	r5[0x8],lr
80008c7e:	9d 35       	st.w	lr[0xc],r5
80008c80:	f2 0b 00 0e 	add	lr,r9,r11
80008c84:	7c 1e       	ld.w	lr,lr[0x4]
80008c86:	ed be 00 00 	bld	lr,0x0
80008c8a:	c1 40       	breq	80008cb2 <_free_r+0xba>
80008c8c:	16 08       	add	r8,r11
80008c8e:	58 0c       	cp.w	r12,0
80008c90:	c0 d1       	brne	80008caa <_free_r+0xb2>
80008c92:	e0 6e 01 2c 	mov	lr,300
80008c96:	72 2b       	ld.w	r11,r9[0x8]
80008c98:	2f 8e       	sub	lr,-8
80008c9a:	1c 3b       	cp.w	r11,lr
80008c9c:	c0 71       	brne	80008caa <_free_r+0xb2>
80008c9e:	97 36       	st.w	r11[0xc],r6
80008ca0:	97 26       	st.w	r11[0x8],r6
80008ca2:	8d 2b       	st.w	r6[0x8],r11
80008ca4:	8d 3b       	st.w	r6[0xc],r11
80008ca6:	30 1c       	mov	r12,1
80008ca8:	c0 58       	rjmp	80008cb2 <_free_r+0xba>
80008caa:	72 2b       	ld.w	r11,r9[0x8]
80008cac:	72 39       	ld.w	r9,r9[0xc]
80008cae:	93 2b       	st.w	r9[0x8],r11
80008cb0:	97 39       	st.w	r11[0xc],r9
80008cb2:	10 99       	mov	r9,r8
80008cb4:	ec 08 09 08 	st.w	r6[r8],r8
80008cb8:	a1 a9       	sbr	r9,0x0
80008cba:	8d 19       	st.w	r6[0x4],r9
80008cbc:	58 0c       	cp.w	r12,0
80008cbe:	c5 a1       	brne	80008d72 <_free_r+0x17a>
80008cc0:	e0 48 01 ff 	cp.w	r8,511
80008cc4:	e0 8b 00 13 	brhi	80008cea <_free_r+0xf2>
80008cc8:	a3 98       	lsr	r8,0x3
80008cca:	f4 08 00 39 	add	r9,r10,r8<<0x3
80008cce:	72 2b       	ld.w	r11,r9[0x8]
80008cd0:	8d 39       	st.w	r6[0xc],r9
80008cd2:	8d 2b       	st.w	r6[0x8],r11
80008cd4:	97 36       	st.w	r11[0xc],r6
80008cd6:	93 26       	st.w	r9[0x8],r6
80008cd8:	a3 48       	asr	r8,0x2
80008cda:	74 19       	ld.w	r9,r10[0x4]
80008cdc:	30 1b       	mov	r11,1
80008cde:	f6 08 09 48 	lsl	r8,r11,r8
80008ce2:	f3 e8 10 08 	or	r8,r9,r8
80008ce6:	95 18       	st.w	r10[0x4],r8
80008ce8:	c4 58       	rjmp	80008d72 <_free_r+0x17a>
80008cea:	f0 0b 16 09 	lsr	r11,r8,0x9
80008cee:	58 4b       	cp.w	r11,4
80008cf0:	e0 8b 00 06 	brhi	80008cfc <_free_r+0x104>
80008cf4:	f0 0b 16 06 	lsr	r11,r8,0x6
80008cf8:	2c 8b       	sub	r11,-56
80008cfa:	c2 08       	rjmp	80008d3a <_free_r+0x142>
80008cfc:	59 4b       	cp.w	r11,20
80008cfe:	e0 8b 00 04 	brhi	80008d06 <_free_r+0x10e>
80008d02:	2a 5b       	sub	r11,-91
80008d04:	c1 b8       	rjmp	80008d3a <_free_r+0x142>
80008d06:	e0 4b 00 54 	cp.w	r11,84
80008d0a:	e0 8b 00 06 	brhi	80008d16 <_free_r+0x11e>
80008d0e:	f0 0b 16 0c 	lsr	r11,r8,0xc
80008d12:	29 2b       	sub	r11,-110
80008d14:	c1 38       	rjmp	80008d3a <_free_r+0x142>
80008d16:	e0 4b 01 54 	cp.w	r11,340
80008d1a:	e0 8b 00 06 	brhi	80008d26 <_free_r+0x12e>
80008d1e:	f0 0b 16 0f 	lsr	r11,r8,0xf
80008d22:	28 9b       	sub	r11,-119
80008d24:	c0 b8       	rjmp	80008d3a <_free_r+0x142>
80008d26:	e0 4b 05 54 	cp.w	r11,1364
80008d2a:	e0 88 00 05 	brls	80008d34 <_free_r+0x13c>
80008d2e:	37 eb       	mov	r11,126
80008d30:	c0 58       	rjmp	80008d3a <_free_r+0x142>
80008d32:	d7 03       	nop
80008d34:	f0 0b 16 12 	lsr	r11,r8,0x12
80008d38:	28 4b       	sub	r11,-124
80008d3a:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80008d3e:	78 29       	ld.w	r9,r12[0x8]
80008d40:	18 39       	cp.w	r9,r12
80008d42:	c0 e1       	brne	80008d5e <_free_r+0x166>
80008d44:	74 18       	ld.w	r8,r10[0x4]
80008d46:	a3 4b       	asr	r11,0x2
80008d48:	30 1c       	mov	r12,1
80008d4a:	f8 0b 09 4b 	lsl	r11,r12,r11
80008d4e:	f1 eb 10 0b 	or	r11,r8,r11
80008d52:	12 98       	mov	r8,r9
80008d54:	95 1b       	st.w	r10[0x4],r11
80008d56:	c0 a8       	rjmp	80008d6a <_free_r+0x172>
80008d58:	72 29       	ld.w	r9,r9[0x8]
80008d5a:	18 39       	cp.w	r9,r12
80008d5c:	c0 60       	breq	80008d68 <_free_r+0x170>
80008d5e:	72 1a       	ld.w	r10,r9[0x4]
80008d60:	e0 1a ff fc 	andl	r10,0xfffc
80008d64:	14 38       	cp.w	r8,r10
80008d66:	cf 93       	brcs	80008d58 <_free_r+0x160>
80008d68:	72 38       	ld.w	r8,r9[0xc]
80008d6a:	8d 38       	st.w	r6[0xc],r8
80008d6c:	8d 29       	st.w	r6[0x8],r9
80008d6e:	93 36       	st.w	r9[0xc],r6
80008d70:	91 26       	st.w	r8[0x8],r6
80008d72:	0e 9c       	mov	r12,r7
80008d74:	fe b0 fd f3 	rcall	8000895a <__malloc_unlock>
80008d78:	d8 22       	popm	r4-r7,pc
80008d7a:	d7 03       	nop

80008d7c <__do_global_ctors_aux>:
80008d7c:	d4 21       	pushm	r4-r7,lr
80008d7e:	30 c7       	mov	r7,12
80008d80:	c0 28       	rjmp	80008d84 <__do_global_ctors_aux+0x8>
80008d82:	5d 18       	icall	r8
80008d84:	20 47       	sub	r7,4
80008d86:	6e 08       	ld.w	r8,r7[0x0]
80008d88:	5b f8       	cp.w	r8,-1
80008d8a:	cf c1       	brne	80008d82 <__do_global_ctors_aux+0x6>
80008d8c:	d8 22       	popm	r4-r7,pc
80008d8e:	d7 03       	nop

Disassembly of section .exception:

80008e00 <_evba>:
80008e00:	c0 08       	rjmp	80008e00 <_evba>
	...

80008e04 <_handle_TLB_Multiple_Hit>:
80008e04:	c0 08       	rjmp	80008e04 <_handle_TLB_Multiple_Hit>
	...

80008e08 <_handle_Bus_Error_Data_Fetch>:
80008e08:	c0 08       	rjmp	80008e08 <_handle_Bus_Error_Data_Fetch>
	...

80008e0c <_handle_Bus_Error_Instruction_Fetch>:
80008e0c:	c0 08       	rjmp	80008e0c <_handle_Bus_Error_Instruction_Fetch>
	...

80008e10 <_handle_NMI>:
80008e10:	c0 08       	rjmp	80008e10 <_handle_NMI>
	...

80008e14 <_handle_Instruction_Address>:
80008e14:	c0 08       	rjmp	80008e14 <_handle_Instruction_Address>
	...

80008e18 <_handle_ITLB_Protection>:
80008e18:	c0 08       	rjmp	80008e18 <_handle_ITLB_Protection>
	...

80008e1c <_handle_Breakpoint>:
80008e1c:	c0 08       	rjmp	80008e1c <_handle_Breakpoint>
	...

80008e20 <_handle_Illegal_Opcode>:
80008e20:	c0 08       	rjmp	80008e20 <_handle_Illegal_Opcode>
	...

80008e24 <_handle_Unimplemented_Instruction>:
80008e24:	c0 08       	rjmp	80008e24 <_handle_Unimplemented_Instruction>
	...

80008e28 <_handle_Privilege_Violation>:
80008e28:	c0 08       	rjmp	80008e28 <_handle_Privilege_Violation>
	...

80008e2c <_handle_Floating_Point>:
80008e2c:	c0 08       	rjmp	80008e2c <_handle_Floating_Point>
	...

80008e30 <_handle_Coprocessor_Absent>:
80008e30:	c0 08       	rjmp	80008e30 <_handle_Coprocessor_Absent>
	...

80008e34 <_handle_Data_Address_Read>:
80008e34:	c0 08       	rjmp	80008e34 <_handle_Data_Address_Read>
	...

80008e38 <_handle_Data_Address_Write>:
80008e38:	c0 08       	rjmp	80008e38 <_handle_Data_Address_Write>
	...

80008e3c <_handle_DTLB_Protection_Read>:
80008e3c:	c0 08       	rjmp	80008e3c <_handle_DTLB_Protection_Read>
	...

80008e40 <_handle_DTLB_Protection_Write>:
80008e40:	c0 08       	rjmp	80008e40 <_handle_DTLB_Protection_Write>
	...

80008e44 <_handle_DTLB_Modified>:
80008e44:	c0 08       	rjmp	80008e44 <_handle_DTLB_Modified>
	...

80008e50 <_handle_ITLB_Miss>:
80008e50:	c0 08       	rjmp	80008e50 <_handle_ITLB_Miss>
	...

80008e60 <_handle_DTLB_Miss_Read>:
80008e60:	c0 08       	rjmp	80008e60 <_handle_DTLB_Miss_Read>
	...

80008e70 <_handle_DTLB_Miss_Write>:
80008e70:	c0 08       	rjmp	80008e70 <_handle_DTLB_Miss_Write>
	...

80008f00 <_handle_Supervisor_Call>:
80008f00:	c0 08       	rjmp	80008f00 <_handle_Supervisor_Call>
80008f02:	d7 03       	nop

80008f04 <_int0>:
80008f04:	30 0c       	mov	r12,0
80008f06:	fe b0 e9 67 	rcall	800061d4 <_get_interrupt_handler>
80008f0a:	58 0c       	cp.w	r12,0
80008f0c:	f8 0f 17 10 	movne	pc,r12
80008f10:	d6 03       	rete

80008f12 <_int1>:
80008f12:	30 1c       	mov	r12,1
80008f14:	fe b0 e9 60 	rcall	800061d4 <_get_interrupt_handler>
80008f18:	58 0c       	cp.w	r12,0
80008f1a:	f8 0f 17 10 	movne	pc,r12
80008f1e:	d6 03       	rete

80008f20 <_int2>:
80008f20:	30 2c       	mov	r12,2
80008f22:	fe b0 e9 59 	rcall	800061d4 <_get_interrupt_handler>
80008f26:	58 0c       	cp.w	r12,0
80008f28:	f8 0f 17 10 	movne	pc,r12
80008f2c:	d6 03       	rete

80008f2e <_int3>:
80008f2e:	30 3c       	mov	r12,3
80008f30:	fe b0 e9 52 	rcall	800061d4 <_get_interrupt_handler>
80008f34:	58 0c       	cp.w	r12,0
80008f36:	f8 0f 17 10 	movne	pc,r12
80008f3a:	d6 03       	rete
80008f3c:	d7 03       	nop
80008f3e:	d7 03       	nop
80008f40:	d7 03       	nop
80008f42:	d7 03       	nop
80008f44:	d7 03       	nop
80008f46:	d7 03       	nop
80008f48:	d7 03       	nop
80008f4a:	d7 03       	nop
80008f4c:	d7 03       	nop
80008f4e:	d7 03       	nop
80008f50:	d7 03       	nop
80008f52:	d7 03       	nop
80008f54:	d7 03       	nop
80008f56:	d7 03       	nop
80008f58:	d7 03       	nop
80008f5a:	d7 03       	nop
80008f5c:	d7 03       	nop
80008f5e:	d7 03       	nop
80008f60:	d7 03       	nop
80008f62:	d7 03       	nop
80008f64:	d7 03       	nop
80008f66:	d7 03       	nop
80008f68:	d7 03       	nop
80008f6a:	d7 03       	nop
80008f6c:	d7 03       	nop
80008f6e:	d7 03       	nop
80008f70:	d7 03       	nop
80008f72:	d7 03       	nop
80008f74:	d7 03       	nop
80008f76:	d7 03       	nop
80008f78:	d7 03       	nop
80008f7a:	d7 03       	nop
80008f7c:	d7 03       	nop
80008f7e:	d7 03       	nop
80008f80:	d7 03       	nop
80008f82:	d7 03       	nop
80008f84:	d7 03       	nop
80008f86:	d7 03       	nop
80008f88:	d7 03       	nop
80008f8a:	d7 03       	nop
80008f8c:	d7 03       	nop
80008f8e:	d7 03       	nop
80008f90:	d7 03       	nop
80008f92:	d7 03       	nop
80008f94:	d7 03       	nop
80008f96:	d7 03       	nop
80008f98:	d7 03       	nop
80008f9a:	d7 03       	nop
80008f9c:	d7 03       	nop
80008f9e:	d7 03       	nop
80008fa0:	d7 03       	nop
80008fa2:	d7 03       	nop
80008fa4:	d7 03       	nop
80008fa6:	d7 03       	nop
80008fa8:	d7 03       	nop
80008faa:	d7 03       	nop
80008fac:	d7 03       	nop
80008fae:	d7 03       	nop
80008fb0:	d7 03       	nop
80008fb2:	d7 03       	nop
80008fb4:	d7 03       	nop
80008fb6:	d7 03       	nop
80008fb8:	d7 03       	nop
80008fba:	d7 03       	nop
80008fbc:	d7 03       	nop
80008fbe:	d7 03       	nop
80008fc0:	d7 03       	nop
80008fc2:	d7 03       	nop
80008fc4:	d7 03       	nop
80008fc6:	d7 03       	nop
80008fc8:	d7 03       	nop
80008fca:	d7 03       	nop
80008fcc:	d7 03       	nop
80008fce:	d7 03       	nop
80008fd0:	d7 03       	nop
80008fd2:	d7 03       	nop
80008fd4:	d7 03       	nop
80008fd6:	d7 03       	nop
80008fd8:	d7 03       	nop
80008fda:	d7 03       	nop
80008fdc:	d7 03       	nop
80008fde:	d7 03       	nop
80008fe0:	d7 03       	nop
80008fe2:	d7 03       	nop
80008fe4:	d7 03       	nop
80008fe6:	d7 03       	nop
80008fe8:	d7 03       	nop
80008fea:	d7 03       	nop
80008fec:	d7 03       	nop
80008fee:	d7 03       	nop
80008ff0:	d7 03       	nop
80008ff2:	d7 03       	nop
80008ff4:	d7 03       	nop
80008ff6:	d7 03       	nop
80008ff8:	d7 03       	nop
80008ffa:	d7 03       	nop
80008ffc:	d7 03       	nop
80008ffe:	d7 03       	nop

Disassembly of section .fini:

80009000 <_fini>:
80009000:	eb cd 40 40 	pushm	r6,lr
80009004:	48 26       	lddpc	r6,8000900c <_fini+0xc>
80009006:	1e 26       	rsub	r6,pc
80009008:	c0 48       	rjmp	80009010 <_fini+0x10>
8000900a:	d7 03       	nop
8000900c:	80 00       	ld.sh	r0,r0[0x0]
8000900e:	8f ea       	st.w	r7[0x38],r10
80009010:	fe b0 c8 38 	rcall	80002080 <__do_global_dtors_aux>
80009014:	e3 cd 80 40 	ldm	sp++,r6,pc
