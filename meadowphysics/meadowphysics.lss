
meadowphysics.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init         0000001a  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         00005228  80002020  80002020  00002420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .exception    00000200  80007400  80007400  00007800  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .fini         00000018  80007600  80007600  00007a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .rodata       00000344  80007618  80007618  00007a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .lalign       00000004  8000795c  8000795c  00007d5c  2**0
                  ALLOC
  8 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  9 .ctors        00000008  00000008  80007960  00008008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .dtors        00000008  00000010  80007968  00008010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .jcr          00000004  00000018  80007970  00008018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .got          00000000  0000001c  80007974  0000801c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .data         00000528  0000001c  80007974  0000801c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bss          000007f4  00000564  00000564  00000000  2**2
                  ALLOC
 15 .heap         000062a8  00000d58  00000d58  00000000  2**0
                  ALLOC
 16 .comment      00000028  00000000  00000000  00008544  2**0
                  CONTENTS, READONLY
 17 .debug_aranges 00000ff0  00000000  00000000  0000856c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_pubnames 000022e3  00000000  00000000  0000955c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_info   00027ad2  00000000  00000000  0000b83f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00004c71  00000000  00000000  00033311  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   00011ddb  00000000  00000000  00037f82  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_frame  00002b5c  00000000  00000000  00049d60  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    00008983  00000000  00000000  0004c8bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_loc    00006bf6  00000000  00000000  0005523f  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_macinfo 010f79af  00000000  00000000  0005be35  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .stack        00001000  00007000  00007000  00000000  2**0
                  ALLOC
 27 .flash_nvram  00000202  80030000  80007e9c  00008800  2**0
                  ALLOC
 28 .debug_ranges 00001698  00000000  00000000  011537e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf ff e0 	sub	pc,pc,-32

Disassembly of section .init:

80002004 <_init>:
80002004:	eb cd 40 40 	pushm	r6,lr
80002008:	48 26       	lddpc	r6,80002010 <_init+0xc>
8000200a:	1e 26       	rsub	r6,pc
8000200c:	c0 48       	rjmp	80002014 <_init+0x10>
8000200e:	d7 03       	nop
80002010:	80 00       	ld.sh	r0,r0[0x0]
80002012:	1f ee       	ld.ub	lr,pc[0x6]
80002014:	c5 4c       	rcall	800020bc <frame_dummy>
80002016:	e0 a0 29 0f 	rcall	80007234 <__do_global_ctors_aux>
8000201a:	e3 cd 80 40 	ldm	sp++,r6,pc

Disassembly of section .text:

80002020 <_stext>:
80002020:	30 07       	mov	r7,0
80002022:	e0 6a 80 00 	mov	r10,32768
80002026:	5b fa       	cp.w	r10,-1
80002028:	f4 0d 17 10 	movne	sp,r10
8000202c:	fe cb a6 cc 	sub	r11,pc,-22836
80002030:	30 8c       	mov	r12,8
80002032:	18 3b       	cp.w	r11,r12
80002034:	c0 70       	breq	80002042 <_stext+0x22>
80002036:	e0 6a 05 48 	mov	r10,1352
8000203a:	b7 09       	ld.d	r8,r11++
8000203c:	b9 28       	st.d	r12++,r8
8000203e:	14 3c       	cp.w	r12,r10
80002040:	cf d5       	brlt	8000203a <_stext+0x1a>
80002042:	e0 6a 0d 58 	mov	r10,3416
80002046:	e0 6c 05 48 	mov	r12,1352
8000204a:	30 08       	mov	r8,0
8000204c:	30 09       	mov	r9,0
8000204e:	b9 28       	st.d	r12++,r8
80002050:	14 3c       	cp.w	r12,r10
80002052:	cf e5       	brlt	8000204e <_stext+0x2e>
80002054:	e0 a0 27 03 	rcall	80006e5a <_init_startup>
80002058:	fe cc aa 58 	sub	r12,pc,-21928
8000205c:	e0 a0 23 fa 	rcall	80006850 <atexit>
80002060:	cd 2f       	rcall	80002004 <_init>
80002062:	1a 9c       	mov	r12,sp
80002064:	30 0b       	mov	r11,0
80002066:	e0 a0 26 fb 	rcall	80006e5c <_init_argv>
8000206a:	5b fc       	cp.w	r12,-1
8000206c:	f9 bc 00 00 	moveq	r12,0
80002070:	f9 ba 00 00 	moveq	r10,0
80002074:	14 1d       	sub	sp,r10
80002076:	e0 a0 05 67 	rcall	80002b44 <main>
8000207a:	e0 a0 23 f3 	rcall	80006860 <exit>
8000207e:	d7 03       	nop

80002080 <__do_global_dtors_aux>:
80002080:	d4 21       	pushm	r4-r7,lr
80002082:	e0 68 05 64 	mov	r8,1380
80002086:	11 89       	ld.ub	r9,r8[0x0]
80002088:	30 08       	mov	r8,0
8000208a:	f0 09 18 00 	cp.b	r9,r8
8000208e:	c1 61       	brne	800020ba <__do_global_dtors_aux+0x3a>
80002090:	31 08       	mov	r8,16
80002092:	31 46       	mov	r6,20
80002094:	10 95       	mov	r5,r8
80002096:	10 16       	sub	r6,r8
80002098:	e0 67 05 68 	mov	r7,1384
8000209c:	a3 46       	asr	r6,0x2
8000209e:	20 16       	sub	r6,1
800020a0:	c0 68       	rjmp	800020ac <__do_global_dtors_aux+0x2c>
800020a2:	2f f8       	sub	r8,-1
800020a4:	8f 08       	st.w	r7[0x0],r8
800020a6:	ea 08 03 28 	ld.w	r8,r5[r8<<0x2]
800020aa:	5d 18       	icall	r8
800020ac:	6e 08       	ld.w	r8,r7[0x0]
800020ae:	0c 38       	cp.w	r8,r6
800020b0:	cf 93       	brcs	800020a2 <__do_global_dtors_aux+0x22>
800020b2:	30 19       	mov	r9,1
800020b4:	e0 68 05 64 	mov	r8,1380
800020b8:	b0 89       	st.b	r8[0x0],r9
800020ba:	d8 22       	popm	r4-r7,pc

800020bc <frame_dummy>:
800020bc:	d4 01       	pushm	lr
800020be:	31 8c       	mov	r12,24
800020c0:	78 08       	ld.w	r8,r12[0x0]
800020c2:	58 08       	cp.w	r8,0
800020c4:	c0 50       	breq	800020ce <frame_dummy+0x12>
800020c6:	48 38       	lddpc	r8,800020d0 <frame_dummy+0x14>
800020c8:	58 08       	cp.w	r8,0
800020ca:	c0 20       	breq	800020ce <frame_dummy+0x12>
800020cc:	5d 18       	icall	r8
800020ce:	d8 02       	popm	pc
800020d0:	00 00       	add	r0,r0
	...

800020d4 <handler_None>:

// check the event queue
static void check_events(void);

// handler protos
static void handler_None(s32 data) { ;; }
800020d4:	5e fc       	retal	r12
800020d6:	d7 03       	nop

800020d8 <clockTimer_callback>:
static softTimer_t monomePollTimer = { .next = NULL, .prev = NULL };
static softTimer_t monomeRefreshTimer  = { .next = NULL, .prev = NULL };



static void clockTimer_callback(void* o) {  
800020d8:	d4 01       	pushm	lr
	if(clock_external == 0) {
800020da:	e0 68 0b 64 	mov	r8,2916
800020de:	11 89       	ld.ub	r9,r8[0x0]
800020e0:	58 09       	cp.w	r9,0
		// print_dbg("\r\ntimer.");

		clock_phase++;
800020e2:	c1 21       	brne	80002106 <clockTimer_callback+0x2e>
800020e4:	e0 68 0a dc 	mov	r8,2780
800020e8:	11 8a       	ld.ub	r10,r8[0x0]
		if(clock_phase>1) clock_phase=0;
800020ea:	2f fa       	sub	r10,-1
800020ec:	b0 8a       	st.b	r8[0x0],r10
800020ee:	30 1b       	mov	r11,1
800020f0:	f6 0a 18 00 	cp.b	r10,r11
800020f4:	e0 88 00 03 	brls	800020fa <clockTimer_callback+0x22>
		(*clock_pulse)(clock_phase);
800020f8:	b0 89       	st.b	r8[0x0],r9
800020fa:	e0 69 0a dc 	mov	r9,2780
800020fe:	31 c8       	mov	r8,28
80002100:	13 8c       	ld.ub	r12,r9[0x0]
80002102:	70 08       	ld.w	r8,r8[0x0]
80002104:	5d 18       	icall	r8
80002106:	d8 02       	popm	pc

80002108 <handler_MonomePoll>:
80002108:	d4 01       	pushm	lr
8000210a:	33 08       	mov	r8,48
8000210c:	70 08       	ld.w	r8,r8[0x0]
8000210e:	5d 18       	icall	r8
	// monome_set_quadrant_flag(0);
	// monome_set_quadrant_flag(1);
	timers_set_monome();
}

static void handler_MonomePoll(s32 data) { monome_read_serial(); }
80002110:	d8 02       	popm	pc
80002112:	d7 03       	nop

80002114 <handler_Front>:
80002114:	d4 21       	pushm	r4-r7,lr
80002116:	18 97       	mov	r7,r12
	}
}


static void handler_Front(s32 data) {
	print_dbg("\r\n FRONT HOLD");
80002118:	fe cc aa f8 	sub	r12,pc,-21768
8000211c:	e0 a0 1e a8 	rcall	80005e6c <print_dbg>

	if(data == 0) {
80002120:	e0 68 0a dd 	mov	r8,2781
		front_timer = 15;
80002124:	58 07       	cp.w	r7,0
80002126:	c0 d1       	brne	80002140 <handler_Front+0x2c>
		if(preset_mode) preset_mode = 0;
80002128:	30 f9       	mov	r9,15
8000212a:	b0 89       	st.b	r8[0x0],r9
8000212c:	e0 68 0a da 	mov	r8,2778
80002130:	11 8a       	ld.ub	r10,r8[0x0]
80002132:	ee 0a 18 00 	cp.b	r10,r7
		else preset_mode = 1;
80002136:	c0 30       	breq	8000213c <handler_Front+0x28>
80002138:	b0 87       	st.b	r8[0x0],r7
	}
	else {
		front_timer = 0;
8000213a:	c0 58       	rjmp	80002144 <handler_Front+0x30>
8000213c:	30 19       	mov	r9,1
	}

	monomeFrameDirty++;
8000213e:	c0 28       	rjmp	80002142 <handler_Front+0x2e>
80002140:	30 09       	mov	r9,0
80002142:	b0 89       	st.b	r8[0x0],r9
80002144:	e0 68 07 45 	mov	r8,1861
}
80002148:	11 89       	ld.ub	r9,r8[0x0]
8000214a:	2f f9       	sub	r9,-1
8000214c:	b0 89       	st.b	r8[0x0],r9
8000214e:	d8 22       	popm	r4-r7,pc

80002150 <flash_read>:
80002150:	d4 21       	pushm	r4-r7,lr
80002152:	fe cc ab 22 	sub	r12,pc,-21726
80002156:	e0 a0 1e 8b 	rcall	80005e6c <print_dbg>
8000215a:	e0 67 0a d8 	mov	r7,2776

void flash_read(void) {
	u8 i1;

	print_dbg("\r\n read preset ");
	print_dbg_ulong(preset_select);
8000215e:	0f 8c       	ld.ub	r12,r7[0x0]
80002160:	e0 a0 1e 80 	rcall	80005e60 <print_dbg_ulong>
80002164:	0f 88       	ld.ub	r8,r7[0x0]
80002166:	49 6a       	lddpc	r10,800021bc <flash_read+0x6c>
80002168:	f0 09 15 03 	lsl	r9,r8,0x3
8000216c:	10 19       	sub	r9,r8
8000216e:	e0 68 0a f2 	mov	r8,2802
	flashc_memcpy((void *)&flashy.m[preset_select], &m, sizeof(m), true);
	flashc_memcpy((void *)&flashy.glyph[preset_select], &glyph, sizeof(glyph), true);
	flashc_memset8((void*)&(flashy.preset_select), preset_select, 1, true);
}

void flash_read(void) {
80002172:	f4 09 00 39 	add	r9,r10,r9<<0x3
	// 	w.wp[i1].cv_mode[0] = flashy.w[preset_select].wp[i1].cv_mode[0];
	// 	w.wp[i1].cv_mode[1] = flashy.w[preset_select].wp[i1].cv_mode[1];
	// }

	for(i1=0;i1<8;i1++) {
		m.positions[i1] = flashy.m[preset_select].positions[i1];
80002176:	f0 ca ff f8 	sub	r10,r8,-8
		m.points[i1] = flashy.m[preset_select].points[i1];
8000217a:	2b e9       	sub	r9,-66
8000217c:	13 8b       	ld.ub	r11,r9[0x0]
8000217e:	b0 8b       	st.b	r8[0x0],r11
80002180:	f3 3b 00 08 	ld.ub	r11,r9[8]
		m.points_save[i1] = flashy.m[preset_select].points_save[i1];
80002184:	f1 6b 00 08 	st.b	r8[8],r11
80002188:	f3 3b 00 10 	ld.ub	r11,r9[16]
		m.triggers[i1] = flashy.m[preset_select].triggers[i1];
8000218c:	f1 6b 00 10 	st.b	r8[16],r11
80002190:	f3 3b 00 18 	ld.ub	r11,r9[24]
		m.trig_dests[i1] = flashy.m[preset_select].trig_dests[i1];
80002194:	f1 6b 00 18 	st.b	r8[24],r11
80002198:	f3 3b 00 20 	ld.ub	r11,r9[32]
		m.rules[i1] = flashy.m[preset_select].rules[i1];
8000219c:	f1 6b 00 20 	st.b	r8[32],r11
800021a0:	f3 3b 00 28 	ld.ub	r11,r9[40]
		m.rule_dests[i1] = flashy.m[preset_select].rule_dests[i1];
800021a4:	f1 6b 00 28 	st.b	r8[40],r11
800021a8:	f3 3b 00 30 	ld.ub	r11,r9[48]
800021ac:	f1 6b 00 30 	st.b	r8[48],r11
	// 	w.wp[i1].step_mode = flashy.w[preset_select].wp[i1].step_mode;
	// 	w.wp[i1].cv_mode[0] = flashy.w[preset_select].wp[i1].cv_mode[0];
	// 	w.wp[i1].cv_mode[1] = flashy.w[preset_select].wp[i1].cv_mode[1];
	// }

	for(i1=0;i1<8;i1++) {
800021b0:	2f f9       	sub	r9,-1
		m.triggers[i1] = flashy.m[preset_select].triggers[i1];
		m.trig_dests[i1] = flashy.m[preset_select].trig_dests[i1];
		m.rules[i1] = flashy.m[preset_select].rules[i1];
		m.rule_dests[i1] = flashy.m[preset_select].rule_dests[i1];
	}
}
800021b2:	2f f8       	sub	r8,-1
800021b4:	14 38       	cp.w	r8,r10
800021b6:	ce 31       	brne	8000217c <flash_read+0x2c>
800021b8:	d8 22       	popm	r4-r7,pc
800021ba:	d7 03       	nop
800021bc:	80 03       	ld.sh	r3,r0[0x0]
	...

800021c0 <timers_set_monome>:
800021c0:	d4 01       	pushm	lr
800021c2:	30 09       	mov	r9,0
800021c4:	fe ca f4 74 	sub	r10,pc,-2956
800021c8:	31 4b       	mov	r11,20
800021ca:	e0 6c 05 6c 	mov	r12,1388

// monome: start polling
void timers_set_monome(void) {
	// print_dbg("\r\n setting monome timers");
	timer_add(&monomePollTimer, 20, &monome_poll_timer_callback, NULL );
	timer_add(&monomeRefreshTimer, 30, &monome_refresh_timer_callback, NULL );
800021ce:	e0 a0 0d 17 	rcall	80003bfc <timer_add>
800021d2:	30 09       	mov	r9,0
800021d4:	fe ca f9 ac 	sub	r10,pc,-1620
800021d8:	31 eb       	mov	r11,30
}
800021da:	e0 6c 06 0c 	mov	r12,1548
800021de:	e0 a0 0d 0f 	rcall	80003bfc <timer_add>
800021e2:	d8 02       	popm	pc

800021e4 <handler_MonomeGridKey>:
800021e4:	d4 21       	pushm	r4-r7,lr
800021e6:	20 1d       	sub	sp,4
800021e8:	fa c9 ff ff 	sub	r9,sp,-1
800021ec:	fa ca ff fe 	sub	r10,sp,-2
////////////////////////////////////////////////////////////////////////////////
// application grid code

static void handler_MonomeGridKey(s32 data) { 
	u8 x, y, z, index, i1, found;
	monome_grid_key_parse_event_data(data, &x, &y, &z);
800021f0:	fa cb ff fd 	sub	r11,sp,-3
800021f4:	e0 a0 08 00 	rcall	800031f4 <monome_grid_key_parse_event_data>
	// print_dbg_hex(y); 
	// print_dbg("; z: 0x"); 
	// print_dbg_hex(z);

	//// TRACK LONG PRESSES
	index = y*16 + x;
800021f8:	1b a9       	ld.ub	r9,sp[0x2]
800021fa:	1b b7       	ld.ub	r7,sp[0x3]
800021fc:	f2 0a 15 04 	lsl	r10,r9,0x4
80002200:	e0 6b 05 cd 	mov	r11,1485
80002204:	0e 0a       	add	r10,r7
80002206:	e0 68 09 b0 	mov	r8,2480
	if(z) {
8000220a:	5c 5a       	castu.b	r10
8000220c:	30 0c       	mov	r12,0
8000220e:	1b 96       	ld.ub	r6,sp[0x1]
80002210:	f8 06 18 00 	cp.b	r6,r12
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// application grid code

static void handler_MonomeGridKey(s32 data) { 
80002214:	c0 61       	brne	80002220 <handler_MonomeGridKey+0x3c>
80002216:	17 8c       	ld.ub	r12,r11[0x0]
80002218:	30 0b       	mov	r11,0
8000221a:	f0 0c 00 06 	add	r6,r8,r12
	// print_dbg_hex(z);

	//// TRACK LONG PRESSES
	index = y*16 + x;
	if(z) {
		held_keys[key_count] = index;
8000221e:	c1 78       	rjmp	8000224c <handler_MonomeGridKey+0x68>
80002220:	17 89       	ld.ub	r9,r11[0x0]
		key_count++;
80002222:	f0 09 0b 0a 	st.b	r8[r9],r10
80002226:	2f f9       	sub	r9,-1
		key_times[index] = 10;		//// THRESHOLD key hold time
80002228:	e0 68 09 d0 	mov	r8,2512
8000222c:	b6 89       	st.b	r11[0x0],r9
8000222e:	30 a9       	mov	r9,10
	} else {
		found = 0; // "found"
		for(i1 = 0; i1<key_count; i1++) {
			if(held_keys[i1] == index) 
80002230:	f0 0a 0b 09 	st.b	r8[r10],r9
80002234:	c3 e8       	rjmp	800022b0 <handler_MonomeGridKey+0xcc>
80002236:	11 8e       	ld.ub	lr,r8[0x0]
				found++;
80002238:	f4 0e 18 00 	cp.b	lr,r10
			if(found) 
8000223c:	c0 31       	brne	80002242 <handler_MonomeGridKey+0x5e>
8000223e:	2f fb       	sub	r11,-1
				held_keys[i1] = held_keys[i1+1];
80002240:	5c 5b       	castu.b	r11
80002242:	58 0b       	cp.w	r11,0
80002244:	c0 30       	breq	8000224a <handler_MonomeGridKey+0x66>
		held_keys[key_count] = index;
		key_count++;
		key_times[index] = 10;		//// THRESHOLD key hold time
	} else {
		found = 0; // "found"
		for(i1 = 0; i1<key_count; i1++) {
80002246:	11 9e       	ld.ub	lr,r8[0x1]
80002248:	b0 8e       	st.b	r8[0x0],lr
			if(held_keys[i1] == index) 
				found++;
			if(found) 
				held_keys[i1] = held_keys[i1+1];
		}
		key_count--;
8000224a:	2f f8       	sub	r8,-1
8000224c:	0c 38       	cp.w	r8,r6
8000224e:	cf 41       	brne	80002236 <handler_MonomeGridKey+0x52>

		// FAST PRESS
		if(key_times[index] > 0) {
80002250:	e0 68 05 cd 	mov	r8,1485
80002254:	20 1c       	sub	r12,1
80002256:	b0 8c       	st.b	r8[0x0],r12
80002258:	e0 68 09 d0 	mov	r8,2512
8000225c:	f0 0a 07 0a 	ld.ub	r10,r8[r10]
			if(preset_mode == 1) {
80002260:	30 08       	mov	r8,0
80002262:	f0 0a 18 00 	cp.b	r10,r8
80002266:	c2 50       	breq	800022b0 <handler_MonomeGridKey+0xcc>
80002268:	e0 66 0a da 	mov	r6,2778
				if(x == 0 && y != preset_select) {
8000226c:	30 18       	mov	r8,1
8000226e:	0d 8a       	ld.ub	r10,r6[0x0]
80002270:	f0 0a 18 00 	cp.b	r10,r8
80002274:	c1 e1       	brne	800022b0 <handler_MonomeGridKey+0xcc>
80002276:	58 07       	cp.w	r7,0
					preset_select = y;
80002278:	c1 71       	brne	800022a6 <handler_MonomeGridKey+0xc2>
8000227a:	e0 68 0a d8 	mov	r8,2776
8000227e:	11 8a       	ld.ub	r10,r8[0x0]
80002280:	f2 0a 18 00 	cp.b	r10,r9
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// application grid code

static void handler_MonomeGridKey(s32 data) { 
80002284:	c0 f0       	breq	800022a2 <handler_MonomeGridKey+0xbe>
80002286:	b0 89       	st.b	r8[0x0],r9
		if(key_times[index] > 0) {
			if(preset_mode == 1) {
				if(x == 0 && y != preset_select) {
					preset_select = y;
					for(i1=0;i1<8;i1++)
						glyph[i1] = flashy.glyph[preset_select][i1];
80002288:	4a c8       	lddpc	r8,80002338 <handler_MonomeGridKey+0x154>
8000228a:	f0 09 00 39 	add	r9,r8,r9<<0x3
		// FAST PRESS
		if(key_times[index] > 0) {
			if(preset_mode == 1) {
				if(x == 0 && y != preset_select) {
					preset_select = y;
					for(i1=0;i1<8;i1++)
8000228e:	e0 68 0a e8 	mov	r8,2792
						glyph[i1] = flashy.glyph[preset_select][i1];
				}
 				else if(x==0 && y == preset_select) {
					flash_read();
80002292:	2f e9       	sub	r9,-2
80002294:	f0 ca ff f8 	sub	r10,r8,-8

					preset_mode = 0;
				}

				monomeFrameDirty++;	
80002298:	13 3b       	ld.ub	r11,r9++
8000229a:	10 cb       	st.b	r8++,r11
8000229c:	14 38       	cp.w	r8,r10
8000229e:	cf d1       	brne	80002298 <handler_MonomeGridKey+0xb4>
			// print_dbg_ulong(key_times[index]);
		}
	}

	// PRESET SCREEN
	if(preset_mode) {
800022a0:	c0 38       	rjmp	800022a6 <handler_MonomeGridKey+0xc2>
800022a2:	c5 7f       	rcall	80002150 <flash_read>
800022a4:	ac 87       	st.b	r6[0x0],r7
800022a6:	e0 68 07 45 	mov	r8,1861
800022aa:	11 89       	ld.ub	r9,r8[0x0]
		// glyph magic
		if(z && x>7) {
800022ac:	2f f9       	sub	r9,-1
800022ae:	b0 89       	st.b	r8[0x0],r9
800022b0:	e0 68 0a da 	mov	r8,2778
800022b4:	11 86       	ld.ub	r6,r8[0x0]
800022b6:	30 08       	mov	r8,0
800022b8:	f0 06 18 00 	cp.b	r6,r8
800022bc:	c1 a0       	breq	800022f0 <handler_MonomeGridKey+0x10c>
800022be:	1b 99       	ld.ub	r9,sp[0x1]
800022c0:	f0 09 18 00 	cp.b	r9,r8
			glyph[y] ^= 1<<(x-8);
800022c4:	e0 80 00 e0 	breq	80002484 <handler_MonomeGridKey+0x2a0>
800022c8:	1b b8       	ld.ub	r8,sp[0x3]
800022ca:	30 79       	mov	r9,7
800022cc:	f2 08 18 00 	cp.b	r8,r9
800022d0:	e0 88 00 da 	brls	80002484 <handler_MonomeGridKey+0x2a0>
800022d4:	30 1b       	mov	r11,1
800022d6:	f0 ca 00 08 	sub	r10,r8,8
800022da:	e0 69 0a e8 	mov	r9,2792
		monomeFrameDirty++;	
	}
	// NOT PRESET
	else {

		prev_mode = mode;
800022de:	1b a8       	ld.ub	r8,sp[0x2]
800022e0:	f6 0a 09 4a 	lsl	r10,r11,r10
800022e4:	f2 08 07 0b 	ld.ub	r11,r9[r8]

		// mode check
		if(x == 0) {
800022e8:	16 5a       	eor	r10,r11
800022ea:	f2 08 0b 0a 	st.b	r9[r8],r10
			kcount += (z<<1)-1;
800022ee:	cc b8       	rjmp	80002484 <handler_MonomeGridKey+0x2a0>
800022f0:	e0 69 05 cc 	mov	r9,1484
800022f4:	e0 6a 05 e8 	mov	r10,1512

			if(kcount < 0)
				kcount = 0;
800022f8:	15 88       	ld.ub	r8,r10[0x0]
800022fa:	b2 88       	st.b	r9[0x0],r8
800022fc:	10 97       	mov	r7,r8
800022fe:	1b b9       	ld.ub	r9,sp[0x3]
80002300:	58 09       	cp.w	r9,0
80002302:	c3 61       	brne	8000236e <handler_MonomeGridKey+0x18a>
80002304:	e0 6b 05 b2 	mov	r11,1458

			// print_dbg("\r\nkey count: ");
			// print_dbg_ulong(kcount);

			if(kcount == 1 && z == 1)
80002308:	1b 99       	ld.ub	r9,sp[0x1]
8000230a:	17 87       	ld.ub	r7,r11[0x0]
8000230c:	ee 09 00 17 	add	r7,r7,r9<<0x1
80002310:	20 17       	sub	r7,1
80002312:	ec 07 18 00 	cp.b	r7,r6
80002316:	ee 0c 17 40 	movge	r12,r7
				mode = 1; 
8000231a:	ec 0c 17 50 	movlt	r12,r6
8000231e:	b6 8c       	st.b	r11[0x0],r12
80002320:	5c 5c       	castu.b	r12
80002322:	30 1b       	mov	r11,1
80002324:	f6 0c 18 00 	cp.b	r12,r11
80002328:	c0 a1       	brne	8000233c <handler_MonomeGridKey+0x158>
8000232a:	f6 09 18 00 	cp.b	r9,r11
8000232e:	e0 81 00 a5 	brne	80002478 <handler_MonomeGridKey+0x294>
80002332:	b4 89       	st.b	r10[0x0],r9
80002334:	c0 c8       	rjmp	8000234c <handler_MonomeGridKey+0x168>
80002336:	d7 03       	nop
80002338:	80 03       	ld.sh	r3,r0[0x0]
8000233a:	00 00       	add	r0,r0
8000233c:	58 0c       	cp.w	r12,0
8000233e:	c0 21       	brne	80002342 <handler_MonomeGridKey+0x15e>
80002340:	b4 8c       	st.b	r10[0x0],r12
80002342:	30 1a       	mov	r10,1
80002344:	f4 09 18 00 	cp.b	r9,r10
80002348:	e0 81 00 98 	brne	80002478 <handler_MonomeGridKey+0x294>
8000234c:	e0 69 05 e8 	mov	r9,1512
			else if(kcount == 0)
80002350:	13 8a       	ld.ub	r10,r9[0x0]
80002352:	30 19       	mov	r9,1
				mode = 0;
80002354:	f2 0a 18 00 	cp.b	r10,r9

			if(z == 1 && mode == 1) {
80002358:	e0 81 00 90 	brne	80002478 <handler_MonomeGridKey+0x294>
8000235c:	e0 69 07 45 	mov	r9,1861
80002360:	13 8a       	ld.ub	r10,r9[0x0]
80002362:	2f fa       	sub	r10,-1
80002364:	b2 8a       	st.b	r9[0x0],r10
80002366:	1b aa       	ld.ub	r10,sp[0x2]
80002368:	e0 69 0a d1 	mov	r9,2769
8000236c:	c3 08       	rjmp	800023cc <handler_MonomeGridKey+0x1e8>
				edit_row = y;
				monomeFrameDirty++;
8000236e:	30 1b       	mov	r11,1
80002370:	f6 09 18 00 	cp.b	r9,r11
80002374:	c1 61       	brne	800023a0 <handler_MonomeGridKey+0x1bc>
				mode = 1; 
			else if(kcount == 0)
				mode = 0;

			if(z == 1 && mode == 1) {
				edit_row = y;
80002376:	58 08       	cp.w	r8,0
80002378:	c1 60       	breq	800023a4 <handler_MonomeGridKey+0x1c0>
8000237a:	f6 08 18 00 	cp.b	r8,r11
				monomeFrameDirty++;
			}
		}
		else if(x == 1 && mode != 0) {
8000237e:	c0 71       	brne	8000238c <handler_MonomeGridKey+0x1a8>
80002380:	1b 99       	ld.ub	r9,sp[0x1]
80002382:	f0 09 18 00 	cp.b	r9,r8
80002386:	c7 91       	brne	80002478 <handler_MonomeGridKey+0x294>
			if(mode == 1 && z == 1)
80002388:	30 29       	mov	r9,2
8000238a:	c0 98       	rjmp	8000239c <handler_MonomeGridKey+0x1b8>
8000238c:	30 2b       	mov	r11,2
8000238e:	f6 08 18 00 	cp.b	r8,r11
80002392:	c7 31       	brne	80002478 <handler_MonomeGridKey+0x294>
80002394:	1b 9b       	ld.ub	r11,sp[0x1]
				mode = 2;
80002396:	ec 0b 18 00 	cp.b	r11,r6
			else if(mode == 2 && z == 0)
8000239a:	c6 f1       	brne	80002478 <handler_MonomeGridKey+0x294>
8000239c:	b4 89       	st.b	r10[0x0],r9
8000239e:	c6 d8       	rjmp	80002478 <handler_MonomeGridKey+0x294>
800023a0:	58 08       	cp.w	r8,0
800023a2:	c1 71       	brne	800023d0 <handler_MonomeGridKey+0x1ec>
800023a4:	30 1a       	mov	r10,1
800023a6:	1b 9b       	ld.ub	r11,sp[0x1]
800023a8:	f4 0b 18 00 	cp.b	r11,r10
				mode = 1;
800023ac:	c3 21       	brne	80002410 <handler_MonomeGridKey+0x22c>
		}
		else if(mode == 0 && z == 1) {
800023ae:	1b aa       	ld.ub	r10,sp[0x2]
800023b0:	e0 6b 0a f2 	mov	r11,2802
800023b4:	f6 0a 00 0c 	add	r12,r11,r10
800023b8:	f9 69 00 10 	st.b	r12[16],r9
			m.points[y] = x;
800023bc:	f9 69 00 08 	st.b	r12[8],r9
800023c0:	f6 0a 0b 09 	st.b	r11[r10],r9
			m.points_save[y] = x;
800023c4:	e0 69 07 45 	mov	r9,1861
				mode = 2;
			else if(mode == 2 && z == 0)
				mode = 1;
		}
		else if(mode == 0 && z == 1) {
			m.points[y] = x;
800023c8:	13 8a       	ld.ub	r10,r9[0x0]
800023ca:	2f fa       	sub	r10,-1
			m.points_save[y] = x;
			m.positions[y] = x;
800023cc:	b2 8a       	st.b	r9[0x0],r10
800023ce:	c5 58       	rjmp	80002478 <handler_MonomeGridKey+0x294>
			monomeFrameDirty++;
800023d0:	f6 08 18 00 	cp.b	r8,r11
800023d4:	c1 e1       	brne	80002410 <handler_MonomeGridKey+0x22c>
800023d6:	1b 99       	ld.ub	r9,sp[0x1]
			if(mode == 1 && z == 1)
				mode = 2;
			else if(mode == 2 && z == 0)
				mode = 1;
		}
		else if(mode == 0 && z == 1) {
800023d8:	f0 09 18 00 	cp.b	r9,r8
			m.points[y] = x;
			m.points_save[y] = x;
			m.positions[y] = x;
			monomeFrameDirty++;
		}
		else if(mode == 1 && z == 1) {
800023dc:	c4 e1       	brne	80002478 <handler_MonomeGridKey+0x294>
800023de:	e0 69 0a d1 	mov	r9,2769
800023e2:	1b aa       	ld.ub	r10,sp[0x2]
800023e4:	13 89       	ld.ub	r9,r9[0x0]
800023e6:	f2 0a 18 00 	cp.b	r10,r9
			if(y != edit_row) {    // filter out self-triggering
800023ea:	c4 70       	breq	80002478 <handler_MonomeGridKey+0x294>
800023ec:	e0 6c 0a f2 	mov	r12,2802
800023f0:	e0 6b 07 45 	mov	r11,1861
				m.trig_dests[edit_row] ^= (1<<y);
800023f4:	f8 09 00 09 	add	r9,r12,r9
800023f8:	17 8c       	ld.ub	r12,r11[0x0]
800023fa:	2f fc       	sub	r12,-1
				monomeFrameDirty++;
800023fc:	b6 8c       	st.b	r11[0x0],r12
800023fe:	f3 3b 00 20 	ld.ub	r11,r9[32]
			m.positions[y] = x;
			monomeFrameDirty++;
		}
		else if(mode == 1 && z == 1) {
			if(y != edit_row) {    // filter out self-triggering
				m.trig_dests[edit_row] ^= (1<<y);
80002402:	30 1c       	mov	r12,1
80002404:	f8 0a 09 4a 	lsl	r10,r12,r10
80002408:	16 5a       	eor	r10,r11
8000240a:	f3 6a 00 20 	st.b	r9[32],r10
8000240e:	c3 58       	rjmp	80002478 <handler_MonomeGridKey+0x294>
80002410:	30 2a       	mov	r10,2
80002412:	f4 08 18 00 	cp.b	r8,r10
				monomeFrameDirty++;
			  // post("\ntrig_dests", edit_row, ":", trig_dests[edit_row]);
			}
		}
		else if(mode == 2 && z == 1) {
80002416:	c3 11       	brne	80002478 <handler_MonomeGridKey+0x294>
80002418:	30 1a       	mov	r10,1
8000241a:	1b 9b       	ld.ub	r11,sp[0x1]
8000241c:	f4 0b 18 00 	cp.b	r11,r10
80002420:	c2 c1       	brne	80002478 <handler_MonomeGridKey+0x294>
80002422:	f2 cb 00 02 	sub	r11,r9,2
			if(x > 1 && x < 7) {
80002426:	30 4a       	mov	r10,4
80002428:	f4 0b 18 00 	cp.b	r11,r10
8000242c:	e0 8b 00 12 	brhi	80002450 <handler_MonomeGridKey+0x26c>
80002430:	e0 69 07 45 	mov	r9,1861
				m.rule_dests[edit_row] = y;
				monomeFrameDirty++;
80002434:	13 8a       	ld.ub	r10,r9[0x0]
80002436:	2f fa       	sub	r10,-1
80002438:	b2 8a       	st.b	r9[0x0],r10
8000243a:	e0 6a 0a f2 	mov	r10,2802
			  // post("\ntrig_dests", edit_row, ":", trig_dests[edit_row]);
			}
		}
		else if(mode == 2 && z == 1) {
			if(x > 1 && x < 7) {
				m.rule_dests[edit_row] = y;
8000243e:	e0 69 0a d1 	mov	r9,2769
80002442:	13 89       	ld.ub	r9,r9[0x0]
80002444:	f4 09 00 09 	add	r9,r10,r9
80002448:	1b aa       	ld.ub	r10,sp[0x2]
8000244a:	f3 6a 00 30 	st.b	r9[48],r10
				monomeFrameDirty++;
			  // post("\nrule_dests", edit_row, ":", rule_dests[edit_row]);
			}
			else if(x > 6) {
8000244e:	c1 58       	rjmp	80002478 <handler_MonomeGridKey+0x294>
80002450:	30 6a       	mov	r10,6
80002452:	f4 09 18 00 	cp.b	r9,r10
80002456:	e0 88 00 11 	brls	80002478 <handler_MonomeGridKey+0x294>
				m.rules[edit_row] = y;
				monomeFrameDirty++;
8000245a:	e0 69 07 45 	mov	r9,1861
8000245e:	13 8a       	ld.ub	r10,r9[0x0]
				m.rule_dests[edit_row] = y;
				monomeFrameDirty++;
			  // post("\nrule_dests", edit_row, ":", rule_dests[edit_row]);
			}
			else if(x > 6) {
				m.rules[edit_row] = y;
80002460:	2f fa       	sub	r10,-1
80002462:	b2 8a       	st.b	r9[0x0],r10
80002464:	e0 6a 0a f2 	mov	r10,2802
80002468:	e0 69 0a d1 	mov	r9,2769
8000246c:	13 89       	ld.ub	r9,r9[0x0]
8000246e:	f4 09 00 09 	add	r9,r10,r9
				monomeFrameDirty++;
			  // post("\nrules", edit_row, ":", rules[edit_row]);
			}
		}

		if(mode != prev_mode) {
80002472:	1b aa       	ld.ub	r10,sp[0x2]
80002474:	f3 6a 00 28 	st.b	r9[40],r10
80002478:	e0 69 05 e8 	mov	r9,1512
			monomeFrameDirty++;
8000247c:	13 89       	ld.ub	r9,r9[0x0]
8000247e:	f0 09 18 00 	cp.b	r9,r8
			// post("\nnew mode", mode);
		}
	}
}
80002482:	c0 60       	breq	8000248e <handler_MonomeGridKey+0x2aa>
80002484:	e0 68 07 45 	mov	r8,1861
80002488:	11 89       	ld.ub	r9,r8[0x0]
8000248a:	2f f9       	sub	r9,-1
8000248c:	b0 89       	st.b	r8[0x0],r9
8000248e:	2f fd       	sub	sp,-4
80002490:	d8 22       	popm	r4-r7,pc
80002492:	d7 03       	nop

80002494 <handler_MonomeRefresh>:
80002494:	d4 21       	pushm	r4-r7,lr
80002496:	e0 68 07 45 	mov	r8,1861
	timers_set_monome();
}

static void handler_MonomePoll(s32 data) { monome_read_serial(); }
static void handler_MonomeRefresh(s32 data) {
	if(monomeFrameDirty) {
8000249a:	11 89       	ld.ub	r9,r8[0x0]
8000249c:	30 08       	mov	r8,0
8000249e:	f0 09 18 00 	cp.b	r9,r8
		if(preset_mode == 0) (*re)(); //refresh_mono();
800024a2:	c4 60       	breq	8000252e <handler_MonomeRefresh+0x9a>
800024a4:	e0 69 0a da 	mov	r9,2778
800024a8:	13 89       	ld.ub	r9,r9[0x0]
800024aa:	f0 09 18 00 	cp.b	r9,r8
800024ae:	c0 61       	brne	800024ba <handler_MonomeRefresh+0x26>
800024b0:	e0 68 0a d4 	mov	r8,2772
800024b4:	70 08       	ld.w	r8,r8[0x0]

static void refresh_preset() {
	u8 i1,i2;

	for(i1=0;i1<128;i1++)
		monomeLedBuffer[i1] = 0;
800024b6:	5d 18       	icall	r8
800024b8:	c3 78       	rjmp	80002526 <handler_MonomeRefresh+0x92>


static void refresh_preset() {
	u8 i1,i2;

	for(i1=0;i1<128;i1++)
800024ba:	30 08       	mov	r8,0
		monomeLedBuffer[i1] = 0;
800024bc:	e0 6c 0b 74 	mov	r12,2932
800024c0:	10 9b       	mov	r11,r8


static void refresh_preset() {
	u8 i1,i2;

	for(i1=0;i1<128;i1++)
800024c2:	38 0a       	mov	r10,-128
800024c4:	f8 08 0b 0b 	st.b	r12[r8],r11
800024c8:	e0 69 0b 74 	mov	r9,2932
		monomeLedBuffer[i1] = 0;

	monomeLedBuffer[preset_select * 16] = 11;
800024cc:	2f f8       	sub	r8,-1
800024ce:	5c 58       	castu.b	r8
800024d0:	f4 08 18 00 	cp.b	r8,r10

	for(i1=0;i1<8;i1++)
		for(i2=0;i2<8;i2++)
			if(glyph[i1] & (1<<i2))
				monomeLedBuffer[i1*16+i2+8] = 11;
800024d4:	cf 81       	brne	800024c4 <handler_MonomeRefresh+0x30>
	u8 i1,i2;

	for(i1=0;i1<128;i1++)
		monomeLedBuffer[i1] = 0;

	monomeLedBuffer[preset_select * 16] = 11;
800024d6:	30 b8       	mov	r8,11
800024d8:	e0 6a 0a d8 	mov	r10,2776
800024dc:	15 8a       	ld.ub	r10,r10[0x0]
	// monome_set_quadrant_flag(1);
	timers_set_monome();
}

static void handler_MonomePoll(s32 data) { monome_read_serial(); }
static void handler_MonomeRefresh(s32 data) {
800024de:	a5 6a       	lsl	r10,0x4
800024e0:	10 9e       	mov	lr,r8
800024e2:	f2 0a 0b 08 	st.b	r9[r10],r8

	monomeLedBuffer[preset_select * 16] = 11;

	for(i1=0;i1<8;i1++)
		for(i2=0;i2<8;i2++)
			if(glyph[i1] & (1<<i2))
800024e6:	12 97       	mov	r7,r9
800024e8:	e0 68 0a e8 	mov	r8,2792
800024ec:	30 8a       	mov	r10,8
800024ee:	f0 0a 00 0c 	add	r12,r8,r10
				monomeLedBuffer[i1*16+i2+8] = 11;
800024f2:	c0 f8       	rjmp	80002510 <handler_MonomeRefresh+0x7c>
800024f4:	ec 09 08 45 	asr	r5,r6,r9
		monomeLedBuffer[i1] = 0;

	monomeLedBuffer[preset_select * 16] = 11;

	for(i1=0;i1<8;i1++)
		for(i2=0;i2<8;i2++)
800024f8:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
800024fc:	c0 20       	breq	80002500 <handler_MonomeRefresh+0x6c>
	for(i1=0;i1<128;i1++)
		monomeLedBuffer[i1] = 0;

	monomeLedBuffer[preset_select * 16] = 11;

	for(i1=0;i1<8;i1++)
800024fe:	b6 8e       	st.b	r11[0x0],lr
80002500:	2f f9       	sub	r9,-1
		for(i2=0;i2<8;i2++)
			if(glyph[i1] & (1<<i2))
80002502:	2f fb       	sub	r11,-1
80002504:	58 89       	cp.w	r9,8
80002506:	cf 71       	brne	800024f4 <handler_MonomeRefresh+0x60>
80002508:	2f f8       	sub	r8,-1
8000250a:	2f 0a       	sub	r10,-16
				monomeLedBuffer[i1*16+i2+8] = 11;

	monome_set_quadrant_flag(0);
8000250c:	18 38       	cp.w	r8,r12
8000250e:	c0 60       	breq	8000251a <handler_MonomeRefresh+0x86>
80002510:	11 86       	ld.ub	r6,r8[0x0]
	monome_set_quadrant_flag(1);
80002512:	f4 07 00 0b 	add	r11,r10,r7
80002516:	30 09       	mov	r9,0
static void handler_MonomeRefresh(s32 data) {
	if(monomeFrameDirty) {
		if(preset_mode == 0) (*re)(); //refresh_mono();
		else refresh_preset();

		(*monome_refresh)();
80002518:	ce eb       	rjmp	800024f4 <handler_MonomeRefresh+0x60>
8000251a:	30 0c       	mov	r12,0
8000251c:	e0 a0 06 78 	rcall	8000320c <monome_set_quadrant_flag>
80002520:	30 1c       	mov	r12,1
80002522:	e0 a0 06 75 	rcall	8000320c <monome_set_quadrant_flag>
80002526:	e0 68 0b 68 	mov	r8,2920
8000252a:	70 08       	ld.w	r8,r8[0x0]
8000252c:	5d 18       	icall	r8
8000252e:	d8 22       	popm	r4-r7,pc

80002530 <refresh>:
80002530:	d4 31       	pushm	r0-r7,lr
80002532:	30 09       	mov	r9,0
80002534:	e0 6c 0b 74 	mov	r12,2932
80002538:	12 9b       	mov	r11,r9
8000253a:	38 0a       	mov	r10,-128
8000253c:	f8 09 0b 0b 	st.b	r12[r9],r11
// application grid redraw
static void refresh() {
	u8 i1, i2, i3;

	// clear grid
	for(i1=0;i1<128;i1++)
80002540:	e0 68 0b 74 	mov	r8,2932
80002544:	2f f9       	sub	r9,-1
80002546:	5c 59       	castu.b	r9
80002548:	f4 09 18 00 	cp.b	r9,r10
		monomeLedBuffer[i1] = 0;

	// SET POSITIONS
	if(mode == 0) {
8000254c:	cf 81       	brne	8000253c <refresh+0xc>
8000254e:	e0 69 05 e8 	mov	r9,1512
	}
}

////////////////////////////////////////////////////////////////////////////////
// application grid redraw
static void refresh() {
80002552:	13 89       	ld.ub	r9,r9[0x0]

	// SET POSITIONS
	if(mode == 0) {
		for(i1=0;i1<8;i1++) {
			for(i2=m.positions[i1];i2<=m.points[i1];i2++)
				monomeLedBuffer[i1*16 + i2] = L1;
80002554:	58 09       	cp.w	r9,0
	// clear grid
	for(i1=0;i1<128;i1++)
		monomeLedBuffer[i1] = 0;

	// SET POSITIONS
	if(mode == 0) {
80002556:	c2 21       	brne	8000259a <refresh+0x6a>
80002558:	12 9a       	mov	r10,r9
	}
}

////////////////////////////////////////////////////////////////////////////////
// application grid redraw
static void refresh() {
8000255a:	30 85       	mov	r5,8
8000255c:	e0 69 0a f2 	mov	r9,2802
		monomeLedBuffer[i1] = 0;

	// SET POSITIONS
	if(mode == 0) {
		for(i1=0;i1<8;i1++) {
			for(i2=m.positions[i1];i2<=m.points[i1];i2++)
80002560:	10 97       	mov	r7,r8
80002562:	f2 c6 ff f8 	sub	r6,r9,-8
80002566:	30 ce       	mov	lr,12
80002568:	13 8c       	ld.ub	r12,r9[0x0]
				monomeLedBuffer[i1*16 + i2] = L1;
8000256a:	f3 23 00 08 	ld.sb	r3,r9[8]
		monomeLedBuffer[i1] = 0;

	// SET POSITIONS
	if(mode == 0) {
		for(i1=0;i1<8;i1++) {
			for(i2=m.positions[i1];i2<=m.points[i1];i2++)
8000256e:	f7 dc c0 08 	bfextu	r11,r12,0x0,0x8
				monomeLedBuffer[i1*16 + i2] = L1;
80002572:	f0 0a 00 04 	add	r4,r8,r10
		monomeLedBuffer[i1] = 0;

	// SET POSITIONS
	if(mode == 0) {
		for(i1=0;i1<8;i1++) {
			for(i2=m.positions[i1];i2<=m.points[i1];i2++)
80002576:	c0 58       	rjmp	80002580 <refresh+0x50>
80002578:	e8 0b 0b 05 	st.b	r4[r11],r5
8000257c:	2f fb       	sub	r11,-1
				monomeLedBuffer[i1*16 + i2] = L1;

			monomeLedBuffer[i1*16 + m.positions[i1]] = L2;
8000257e:	5c 5b       	castu.b	r11
80002580:	06 3b       	cp.w	r11,r3
80002582:	fe 9a ff fb 	brle	80002578 <refresh+0x48>
80002586:	ee 0a 00 0b 	add	r11,r7,r10
8000258a:	5c 6c       	casts.b	r12
	for(i1=0;i1<128;i1++)
		monomeLedBuffer[i1] = 0;

	// SET POSITIONS
	if(mode == 0) {
		for(i1=0;i1<8;i1++) {
8000258c:	f6 0c 0b 0e 	st.b	r11[r12],lr
80002590:	2f f9       	sub	r9,-1

			monomeLedBuffer[i1*16 + m.positions[i1]] = L2;
		}
	}
	// SET ROUTING
	else if(mode == 1) {
80002592:	2f 0a       	sub	r10,-16
80002594:	0c 39       	cp.w	r9,r6
80002596:	ce 91       	brne	80002568 <refresh+0x38>
80002598:	ca 18       	rjmp	800026da <refresh+0x1aa>
		monomeLedBuffer[edit_row * 16] = L1;
8000259a:	30 1a       	mov	r10,1
8000259c:	f4 09 18 00 	cp.b	r9,r10
800025a0:	c3 61       	brne	8000260c <refresh+0xdc>
800025a2:	30 8a       	mov	r10,8
800025a4:	e0 69 0a d1 	mov	r9,2769
		monomeLedBuffer[edit_row * 16 + 1] = L1;
800025a8:	13 89       	ld.ub	r9,r9[0x0]
800025aa:	f2 0b 15 04 	lsl	r11,r9,0x4

		for(i1=0;i1<8;i1++) {
			if((m.trig_dests[edit_row] & (1<<i1)) != 0) {
800025ae:	f0 0b 0b 0a 	st.b	r8[r11],r10
800025b2:	f0 0b 00 0b 	add	r11,r8,r11
800025b6:	b6 9a       	st.b	r11[0x1],r10
800025b8:	e0 6b 0a f2 	mov	r11,2802
800025bc:	f6 09 00 09 	add	r9,r11,r9
800025c0:	30 c7       	mov	r7,12
800025c2:	f3 36 00 20 	ld.ub	r6,r9[32]
800025c6:	30 4e       	mov	lr,4
800025c8:	30 09       	mov	r9,0
				for(i2=0;i2<=m.points[i1];i2++)
800025ca:	12 9a       	mov	r10,r9
800025cc:	ec 0a 08 4c 	asr	r12,r6,r10
800025d0:	ed bc 00 00 	bld	r12,0x0
800025d4:	c1 01       	brne	800025f4 <refresh+0xc4>
					monomeLedBuffer[i1*16 + i2] = L2;
800025d6:	f7 25 00 08 	ld.sb	r5,r11[8]
800025da:	30 0c       	mov	r12,0
800025dc:	c0 98       	rjmp	800025ee <refresh+0xbe>
		monomeLedBuffer[edit_row * 16] = L1;
		monomeLedBuffer[edit_row * 16 + 1] = L1;

		for(i1=0;i1<8;i1++) {
			if((m.trig_dests[edit_row] & (1<<i1)) != 0) {
				for(i2=0;i2<=m.points[i1];i2++)
800025de:	f8 c4 ff ff 	sub	r4,r12,-1
800025e2:	f0 0c 00 0c 	add	r12,r8,r12
800025e6:	f8 09 0b 07 	st.b	r12[r9],r7
					monomeLedBuffer[i1*16 + i2] = L2;
			}
			monomeLedBuffer[i1*16 + m.positions[i1]] = L0;
800025ea:	f9 d4 c0 08 	bfextu	r12,r4,0x0,0x8
800025ee:	0a 3c       	cp.w	r12,r5
800025f0:	fe 9a ff f7 	brle	800025de <refresh+0xae>
800025f4:	f7 2c 00 00 	ld.sb	r12,r11[0]
800025f8:	f0 09 00 05 	add	r5,r8,r9
	// SET ROUTING
	else if(mode == 1) {
		monomeLedBuffer[edit_row * 16] = L1;
		monomeLedBuffer[edit_row * 16 + 1] = L1;

		for(i1=0;i1<8;i1++) {
800025fc:	ea 0c 0b 0e 	st.b	r5[r12],lr
80002600:	2f fa       	sub	r10,-1
80002602:	2f fb       	sub	r11,-1
80002604:	2f 09       	sub	r9,-16
80002606:	58 8a       	cp.w	r10,8
80002608:	ce 21       	brne	800025cc <refresh+0x9c>
8000260a:	c6 88       	rjmp	800026da <refresh+0x1aa>
8000260c:	30 2a       	mov	r10,2
8000260e:	f4 09 18 00 	cp.b	r9,r10
			}
			monomeLedBuffer[i1*16 + m.positions[i1]] = L0;
		}
	}
	// SET RULES
	else if(mode == 2) {
80002612:	c6 41       	brne	800026da <refresh+0x1aa>
80002614:	30 8a       	mov	r10,8
80002616:	e0 69 0a d1 	mov	r9,2769
		monomeLedBuffer[edit_row * 16] = L1;
8000261a:	13 89       	ld.ub	r9,r9[0x0]
8000261c:	f2 0b 15 04 	lsl	r11,r9,0x4
80002620:	f0 0b 0b 0a 	st.b	r8[r11],r10
80002624:	f0 0b 00 0b 	add	r11,r8,r11
		monomeLedBuffer[edit_row * 16 + 1] = L1;
80002628:	b6 9a       	st.b	r11[0x1],r10
8000262a:	e0 6a 0a f2 	mov	r10,2802
8000262e:	12 0a       	add	r10,r9
80002630:	f5 3a 00 30 	ld.ub	r10,r10[48]
80002634:	a5 6a       	lsl	r10,0x4
80002636:	2f ea       	sub	r10,-2

		for(i1=2;i1<7;i1++)
			monomeLedBuffer[m.rule_dests[edit_row] * 16 + i1] = L2;
80002638:	30 cc       	mov	r12,12
		}
	}
	// SET RULES
	else if(mode == 2) {
		monomeLedBuffer[edit_row * 16] = L1;
		monomeLedBuffer[edit_row * 16 + 1] = L1;
8000263a:	f4 08 00 08 	add	r8,r10,r8

		for(i1=2;i1<7;i1++)
8000263e:	30 7b       	mov	r11,7
		}
	}
	// SET RULES
	else if(mode == 2) {
		monomeLedBuffer[edit_row * 16] = L1;
		monomeLedBuffer[edit_row * 16 + 1] = L1;
80002640:	30 2a       	mov	r10,2

		for(i1=2;i1<7;i1++)
			monomeLedBuffer[m.rule_dests[edit_row] * 16 + i1] = L2;
80002642:	10 cc       	st.b	r8++,r12
	// SET RULES
	else if(mode == 2) {
		monomeLedBuffer[edit_row * 16] = L1;
		monomeLedBuffer[edit_row * 16 + 1] = L1;

		for(i1=2;i1<7;i1++)
80002644:	2f fa       	sub	r10,-1
80002646:	5c 5a       	castu.b	r10
80002648:	f6 0a 18 00 	cp.b	r10,r11
8000264c:	cf b1       	brne	80002642 <refresh+0x112>
			monomeLedBuffer[m.rule_dests[edit_row] * 16 + i1] = L2;

		for(i1=8;i1<16;i1++)
			monomeLedBuffer[m.rules[edit_row] * 16 + i1] = L0;
8000264e:	e0 68 0a f2 	mov	r8,2802
80002652:	e0 6a 0b 74 	mov	r10,2932
		monomeLedBuffer[edit_row * 16 + 1] = L1;

		for(i1=2;i1<7;i1++)
			monomeLedBuffer[m.rule_dests[edit_row] * 16 + i1] = L2;

		for(i1=8;i1<16;i1++)
80002656:	f0 09 00 09 	add	r9,r8,r9
			monomeLedBuffer[m.rules[edit_row] * 16 + i1] = L0;
8000265a:	31 0e       	mov	lr,16
8000265c:	f3 39 00 28 	ld.ub	r9,r9[40]
80002660:	30 88       	mov	r8,8
80002662:	f2 0c 15 04 	lsl	r12,r9,0x4
80002666:	f8 08 00 0b 	add	r11,r12,r8
8000266a:	14 0b       	add	r11,r10
		monomeLedBuffer[edit_row * 16 + 1] = L1;

		for(i1=2;i1<7;i1++)
			monomeLedBuffer[m.rule_dests[edit_row] * 16 + i1] = L2;

		for(i1=8;i1<16;i1++)
8000266c:	30 4a       	mov	r10,4
8000266e:	16 ca       	st.b	r11++,r10
80002670:	2f f8       	sub	r8,-1
80002672:	5c 58       	castu.b	r8
80002674:	fc 08 18 00 	cp.b	r8,lr
			monomeLedBuffer[m.rules[edit_row] * 16 + i1] = L0;

		for(i1=0;i1<8;i1++) 
			monomeLedBuffer[i1*16 + m.positions[i1]] = L0;
80002678:	cf b1       	brne	8000266e <refresh+0x13e>
8000267a:	30 08       	mov	r8,0
8000267c:	e0 6e 0b 74 	mov	lr,2932
80002680:	e0 6b 0a f2 	mov	r11,2802
80002684:	f6 08 06 07 	ld.sb	r7,r11[r8]
80002688:	f0 06 15 04 	lsl	r6,r8,0x4
8000268c:	ec 07 00 07 	add	r7,r6,r7
			monomeLedBuffer[m.rule_dests[edit_row] * 16 + i1] = L2;

		for(i1=8;i1<16;i1++)
			monomeLedBuffer[m.rules[edit_row] * 16 + i1] = L0;

		for(i1=0;i1<8;i1++) 
80002690:	fc 07 0b 0a 	st.b	lr[r7],r10
			monomeLedBuffer[i1*16 + m.positions[i1]] = L0;

		for(i1=0;i1<8;i1++) {
			i3 = sign[m.rules[edit_row]][i1];
80002694:	2f f8       	sub	r8,-1
			monomeLedBuffer[m.rule_dests[edit_row] * 16 + i1] = L2;

		for(i1=8;i1<16;i1++)
			monomeLedBuffer[m.rules[edit_row] * 16 + i1] = L0;

		for(i1=0;i1<8;i1++) 
80002696:	58 88       	cp.w	r8,8
80002698:	cf 61       	brne	80002684 <refresh+0x154>

		for(i1=0;i1<8;i1++) {
			i3 = sign[m.rules[edit_row]][i1];
			for(i2=0;i2<8;i2++) {
				if((i3 & (1<<i2)) != 0)
					monomeLedBuffer[i1*16 + 8 + i2] = L2;
8000269a:	fe ca b0 15 	sub	r10,pc,-20459

		for(i1=0;i1<8;i1++) 
			monomeLedBuffer[i1*16 + m.positions[i1]] = L0;

		for(i1=0;i1<8;i1++) {
			i3 = sign[m.rules[edit_row]][i1];
8000269e:	e0 67 0b 74 	mov	r7,2932
800026a2:	f4 09 00 3a 	add	r10,r10,r9<<0x3
			for(i2=0;i2<8;i2++) {
				if((i3 & (1<<i2)) != 0)
800026a6:	30 ce       	mov	lr,12
800026a8:	15 86       	ld.ub	r6,r10[0x0]
800026aa:	f0 07 00 0b 	add	r11,r8,r7
					monomeLedBuffer[i1*16 + 8 + i2] = L2;
800026ae:	30 09       	mov	r9,0
800026b0:	ec 09 08 45 	asr	r5,r6,r9
		for(i1=0;i1<8;i1++) 
			monomeLedBuffer[i1*16 + m.positions[i1]] = L0;

		for(i1=0;i1<8;i1++) {
			i3 = sign[m.rules[edit_row]][i1];
			for(i2=0;i2<8;i2++) {
800026b4:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
800026b8:	c0 20       	breq	800026bc <refresh+0x18c>
800026ba:	b6 8e       	st.b	r11[0x0],lr
			monomeLedBuffer[m.rules[edit_row] * 16 + i1] = L0;

		for(i1=0;i1<8;i1++) 
			monomeLedBuffer[i1*16 + m.positions[i1]] = L0;

		for(i1=0;i1<8;i1++) {
800026bc:	2f f9       	sub	r9,-1
800026be:	2f fb       	sub	r11,-1
800026c0:	58 89       	cp.w	r9,8
				if((i3 & (1<<i2)) != 0)
					monomeLedBuffer[i1*16 + 8 + i2] = L2;
			}
		}

		monomeLedBuffer[m.rules[edit_row] * 16 + 7] = L2;
800026c2:	cf 71       	brne	800026b0 <refresh+0x180>
800026c4:	2f fa       	sub	r10,-1
800026c6:	2f 08       	sub	r8,-16
800026c8:	e0 48 00 88 	cp.w	r8,136
	}

	monome_set_quadrant_flag(0);
800026cc:	ce e1       	brne	800026a8 <refresh+0x178>
800026ce:	e0 68 0b 74 	mov	r8,2932
	monome_set_quadrant_flag(1);
800026d2:	f0 0c 00 0c 	add	r12,r8,r12
800026d6:	30 c8       	mov	r8,12
}
800026d8:	b8 f8       	st.b	r12[0x7],r8
800026da:	30 0c       	mov	r12,0
800026dc:	e0 a0 05 98 	rcall	8000320c <monome_set_quadrant_flag>
800026e0:	30 1c       	mov	r12,1
800026e2:	e0 a0 05 95 	rcall	8000320c <monome_set_quadrant_flag>
800026e6:	d8 32       	popm	r0-r7,pc

800026e8 <refresh_mono>:
800026e8:	d4 01       	pushm	lr
800026ea:	c2 3f       	rcall	80002530 <refresh>
800026ec:	d8 02       	popm	pc
800026ee:	d7 03       	nop

800026f0 <handler_MonomeConnect>:
static void refresh_mono() {
	refresh();

	// monome_set_quadrant_flag(0);
	// monome_set_quadrant_flag(1);
}
800026f0:	d4 01       	pushm	lr
800026f2:	30 09       	mov	r9,0
	// event_post(&e);
}

static void handler_MonomeConnect(s32 data) {
	// print_dbg("\r\n// monome connect /////////////////"); 
	key_count = 0;
800026f4:	e0 68 05 cd 	mov	r8,1485
	SIZE = monome_size_x();
800026f8:	b0 89       	st.b	r8[0x0],r9
800026fa:	e0 a0 05 93 	rcall	80003220 <monome_size_x>
	LENGTH = SIZE - 1;
800026fe:	e0 68 0a d0 	mov	r8,2768
}

static void handler_MonomeConnect(s32 data) {
	// print_dbg("\r\n// monome connect /////////////////"); 
	key_count = 0;
	SIZE = monome_size_x();
80002702:	f8 c9 00 01 	sub	r9,r12,1
	LENGTH = SIZE - 1;
80002706:	b0 8c       	st.b	r8[0x0],r12
	// print_dbg("\r monome size: ");
	// print_dbg_ulong(SIZE);
	VARI = monome_is_vari();
80002708:	e0 68 0a d9 	mov	r8,2777
8000270c:	b0 89       	st.b	r8[0x0],r9
8000270e:	e0 a0 05 8d 	rcall	80003228 <monome_is_vari>
	// print_dbg("\r monome vari: ");
	// print_dbg_ulong(VARI);

	if(VARI) re = &refresh;
80002712:	e0 68 0a db 	mov	r8,2779
80002716:	b0 8c       	st.b	r8[0x0],r12
80002718:	e0 68 0a d4 	mov	r8,2772
	else re = &refresh_mono;
8000271c:	58 0c       	cp.w	r12,0


	// monome_set_quadrant_flag(0);
	// monome_set_quadrant_flag(1);
	timers_set_monome();
8000271e:	c0 40       	breq	80002726 <handler_MonomeConnect+0x36>
80002720:	fe c9 01 f0 	sub	r9,pc,496
}
80002724:	c0 38       	rjmp	8000272a <handler_MonomeConnect+0x3a>
80002726:	fe c9 00 3e 	sub	r9,pc,62
8000272a:	91 09       	st.w	r8[0x0],r9
8000272c:	fe b0 fd 4a 	rcall	800021c0 <timers_set_monome>
80002730:	d8 02       	popm	pc
80002732:	d7 03       	nop

80002734 <handler_FtdiConnect>:
80002734:	d4 01       	pushm	lr
80002736:	e0 a0 0a e5 	rcall	80003d00 <ftdi_setup>
8000273a:	d8 02       	popm	pc

8000273c <handler_KeyTimer>:
8000273c:	d4 31       	pushm	r0-r7,lr
8000273e:	20 2d       	sub	sp,8
80002740:	e0 67 0a dd 	mov	r7,2781
80002744:	0f 88       	ld.ub	r8,r7[0x0]
80002746:	58 08       	cp.w	r8,0
80002748:	c1 60       	breq	80002774 <handler_KeyTimer+0x38>
8000274a:	30 19       	mov	r9,1

static void handler_KeyTimer(s32 data) {
	static u16 i1;

	if(front_timer) {
		if(front_timer == 1) {
8000274c:	f2 08 18 00 	cp.b	r8,r9
			static event_t e;
			e.type = kEventSaveFlash;
80002750:	c1 01       	brne	80002770 <handler_KeyTimer+0x34>
80002752:	e0 68 05 a0 	mov	r8,1440
80002756:	30 59       	mov	r9,5
			event_post(&e);
80002758:	10 9c       	mov	r12,r8
8000275a:	91 09       	st.w	r8[0x0],r9

			preset_mode = 0;
			front_timer--;
8000275c:	e0 a0 03 ca 	rcall	80002ef0 <event_post>
		if(front_timer == 1) {
			static event_t e;
			e.type = kEventSaveFlash;
			event_post(&e);

			preset_mode = 0;
80002760:	0f 88       	ld.ub	r8,r7[0x0]
			front_timer--;
80002762:	20 18       	sub	r8,1
		if(front_timer == 1) {
			static event_t e;
			e.type = kEventSaveFlash;
			event_post(&e);

			preset_mode = 0;
80002764:	30 09       	mov	r9,0
80002766:	ae 88       	st.b	r7[0x0],r8
80002768:	e0 68 0a da 	mov	r8,2778
			front_timer--;
		}
		else front_timer--;
8000276c:	b0 89       	st.b	r8[0x0],r9
	}

	for(i1=0;i1<key_count;i1++) {
8000276e:	c0 38       	rjmp	80002774 <handler_KeyTimer+0x38>
80002770:	20 18       	sub	r8,1
80002772:	ae 88       	st.b	r7[0x0],r8
80002774:	e0 68 05 b0 	mov	r8,1456
80002778:	30 09       	mov	r9,0
		if(key_times[held_keys[i1]])
8000277a:	10 97       	mov	r7,r8
		if(--key_times[held_keys[i1]]==0) {
			if(preset_mode == 1) {
8000277c:	b0 09       	st.h	r8[0x0],r9
8000277e:	e0 65 09 d0 	mov	r5,2512
				if(held_keys[i1] % 16 == 0) {
					preset_select = held_keys[i1] / 16;
					// flash_write();
					static event_t e;
					e.type = kEventSaveFlash;
80002782:	e0 69 05 cd 	mov	r9,1485
			front_timer--;
		}
		else front_timer--;
	}

	for(i1=0;i1<key_count;i1++) {
80002786:	e0 68 09 b0 	mov	r8,2480
		if(key_times[held_keys[i1]])
8000278a:	e0 66 0a da 	mov	r6,2778
8000278e:	30 10       	mov	r0,1
		if(--key_times[held_keys[i1]]==0) {
80002790:	e0 61 0a d8 	mov	r1,2776
80002794:	e0 62 05 a8 	mov	r2,1448
		}
		else front_timer--;
	}

	for(i1=0;i1<key_count;i1++) {
		if(key_times[held_keys[i1]])
80002798:	30 53       	mov	r3,5
		if(--key_times[held_keys[i1]]==0) {
8000279a:	c2 48       	rjmp	800027e2 <handler_KeyTimer+0xa6>
8000279c:	f0 0c 07 0a 	ld.ub	r10,r8[r12]
800027a0:	ea 0a 07 0c 	ld.ub	r12,r5[r10]
			if(preset_mode == 1) {
800027a4:	f8 cb 00 01 	sub	r11,r12,1
800027a8:	5c 5b       	castu.b	r11
				if(held_keys[i1] % 16 == 0) {
800027aa:	58 0c       	cp.w	r12,0
800027ac:	c1 80       	breq	800027dc <handler_KeyTimer+0xa0>
800027ae:	ea 0a 0b 0b 	st.b	r5[r10],r11
					preset_select = held_keys[i1] / 16;
					// flash_write();
					static event_t e;
					e.type = kEventSaveFlash;
					event_post(&e);
800027b2:	58 0b       	cp.w	r11,0
800027b4:	c1 41       	brne	800027dc <handler_KeyTimer+0xa0>
	for(i1=0;i1<key_count;i1++) {
		if(key_times[held_keys[i1]])
		if(--key_times[held_keys[i1]]==0) {
			if(preset_mode == 1) {
				if(held_keys[i1] % 16 == 0) {
					preset_select = held_keys[i1] / 16;
800027b6:	0d 8b       	ld.ub	r11,r6[0x0]
					// flash_write();
					static event_t e;
					e.type = kEventSaveFlash;
800027b8:	e0 0b 18 00 	cp.b	r11,r0
					event_post(&e);
800027bc:	c1 01       	brne	800027dc <handler_KeyTimer+0xa0>
800027be:	e9 da c0 04 	bfextu	r4,r10,0x0,0x4
					preset_mode = 0;
800027c2:	c0 d1       	brne	800027dc <handler_KeyTimer+0xa0>
800027c4:	a5 8a       	lsr	r10,0x4
			front_timer--;
		}
		else front_timer--;
	}

	for(i1=0;i1<key_count;i1++) {
800027c6:	50 19       	stdsp	sp[0x4],r9
800027c8:	50 08       	stdsp	sp[0x0],r8
800027ca:	a2 8a       	st.b	r1[0x0],r10
800027cc:	85 03       	st.w	r2[0x0],r3
800027ce:	e0 6c 05 a8 	mov	r12,1448
		if(key_times[held_keys[i1]])
800027d2:	e0 a0 03 8f 	rcall	80002ef0 <event_post>
			front_timer--;
		}
		else front_timer--;
	}

	for(i1=0;i1<key_count;i1++) {
800027d6:	40 08       	lddsp	r8,sp[0x0]
800027d8:	ac 84       	st.b	r6[0x0],r4
800027da:	40 19       	lddsp	r9,sp[0x4]

			// print_dbg("\rlong press: "); 
			// print_dbg_ulong(held_keys[i1]);
		}
	}
}
800027dc:	8e 0a       	ld.sh	r10,r7[0x0]
800027de:	2f fa       	sub	r10,-1
800027e0:	ae 0a       	st.h	r7[0x0],r10
800027e2:	8e 0a       	ld.sh	r10,r7[0x0]
800027e4:	13 8b       	ld.ub	r11,r9[0x0]
800027e6:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
800027ea:	f4 0b 19 00 	cp.h	r11,r10
800027ee:	fe 9b ff d7 	brhi	8000279c <handler_KeyTimer+0x60>
800027f2:	2f ed       	sub	sp,-8
800027f4:	d8 32       	popm	r0-r7,pc
800027f6:	d7 03       	nop

800027f8 <adcTimer_callback>:
800027f8:	d4 01       	pushm	lr
800027fa:	30 39       	mov	r9,3
800027fc:	e0 68 05 d8 	mov	r8,1496
80002800:	91 09       	st.w	r8[0x0],r9
80002802:	30 09       	mov	r9,0
80002804:	10 9c       	mov	r12,r8
80002806:	91 19       	st.w	r8[0x4],r9

static void adcTimer_callback(void* o) {  
	static event_t e;
	e.type = kEventPollADC;
	e.data = 0;
	event_post(&e);
80002808:	e0 a0 03 74 	rcall	80002ef0 <event_post>
}
8000280c:	d8 02       	popm	pc
8000280e:	d7 03       	nop

80002810 <keyTimer_callback>:
80002810:	d4 01       	pushm	lr
80002812:	30 49       	mov	r9,4
	}
}

static void keyTimer_callback(void* o) {  
	static event_t e;
	e.type = kEventKeyTimer;
80002814:	e0 68 05 e0 	mov	r8,1504
	e.data = 0;
80002818:	91 09       	st.w	r8[0x0],r9
	event_post(&e);
8000281a:	30 09       	mov	r9,0
}

static void keyTimer_callback(void* o) {  
	static event_t e;
	e.type = kEventKeyTimer;
	e.data = 0;
8000281c:	10 9c       	mov	r12,r8
	event_post(&e);
8000281e:	91 19       	st.w	r8[0x4],r9
80002820:	e0 a0 03 68 	rcall	80002ef0 <event_post>
}
80002824:	d8 02       	popm	pc
80002826:	d7 03       	nop

80002828 <monome_refresh_timer_callback>:
80002828:	d4 01       	pushm	lr
8000282a:	e0 68 07 45 	mov	r8,1861
	ftdi_read();
}

// monome refresh callback
static void monome_refresh_timer_callback(void* obj) {
	if(monomeFrameDirty > 0) {
8000282e:	11 89       	ld.ub	r9,r8[0x0]
80002830:	30 08       	mov	r8,0
80002832:	f0 09 18 00 	cp.b	r9,r8
		static event_t e;
		e.type = kEventMonomeRefresh;
80002836:	c0 80       	breq	80002846 <monome_refresh_timer_callback+0x1e>
80002838:	e0 68 06 04 	mov	r8,1540
8000283c:	30 b9       	mov	r9,11
		event_post(&e);
8000283e:	10 9c       	mov	r12,r8
80002840:	91 09       	st.w	r8[0x0],r9
80002842:	e0 a0 03 57 	rcall	80002ef0 <event_post>
80002846:	d8 02       	popm	pc

80002848 <handler_PollADC>:
80002848:	d4 21       	pushm	r4-r7,lr
8000284a:	e0 67 0a de 	mov	r7,2782
8000284e:	0e 9c       	mov	r12,r7
	monomeFrameDirty++;
}

static void handler_PollADC(s32 data) {
	u16 i;
	adc_convert(&adc);
80002850:	e0 a0 02 c2 	rcall	80002dd4 <adc_convert>

	// CLOCK POT INPUT
	i = adc[0];
	i = i>>2;
80002854:	e0 68 0b 2a 	mov	r8,2858
80002858:	8e 87       	ld.uh	r7,r7[0x0]
	if(i != clock_temp) {
8000285a:	90 08       	ld.sh	r8,r8[0x0]
8000285c:	a3 87       	lsr	r7,0x2
8000285e:	ee 08 19 00 	cp.h	r8,r7
		// 500ms - 12ms
		clock_time = 12500 / (i + 25);
80002862:	c1 00       	breq	80002882 <handler_PollADC+0x3a>
80002864:	ee c9 ff e7 	sub	r9,r7,-25
80002868:	e0 68 30 d4 	mov	r8,12500
8000286c:	f0 09 0c 08 	divs	r8,r8,r9
		// print_dbg("\r\nclock (ms): ");
		// print_dbg_ulong(clock_time);

		timer_set(&clockTimer, clock_time);
80002870:	e0 69 0a f0 	mov	r9,2800
	// CLOCK POT INPUT
	i = adc[0];
	i = i>>2;
	if(i != clock_temp) {
		// 500ms - 12ms
		clock_time = 12500 / (i + 25);
80002874:	e0 6c 05 ec 	mov	r12,1516
		// print_dbg("\r\nclock (ms): ");
		// print_dbg_ulong(clock_time);

		timer_set(&clockTimer, clock_time);
80002878:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
	}
	clock_temp = i;
8000287c:	b2 08       	st.h	r9[0x0],r8
}
8000287e:	e0 a0 09 83 	rcall	80003b84 <timer_set>
80002882:	e0 68 0b 2a 	mov	r8,2858
80002886:	b0 07       	st.h	r8[0x0],r7
80002888:	d8 22       	popm	r4-r7,pc
8000288a:	d7 03       	nop

8000288c <cascades_trigger>:
8000288c:	d4 31       	pushm	r0-r7,lr
8000288e:	e0 67 0a f2 	mov	r7,2802
80002892:	ee 0c 07 09 	ld.ub	r9,r7[r12]
80002896:	20 19       	sub	r9,1


static void cascades_trigger(u8 n) {
  u8 i;

  m.positions[n]--;
80002898:	ee 0c 0b 09 	st.b	r7[r12],r9

  // ****** the trigger # check is so we don't cause a trigger/rules multiple times per NEXT
  // a rules-based jump to position-point does not current cause a trigger. should it?
  if(m.positions[n] < 0 && m.triggers[n] == 0) {
8000289c:	18 95       	mov	r5,r12
8000289e:	30 08       	mov	r8,0
800028a0:	f0 09 18 00 	cp.b	r9,r8
800028a4:	e0 84 00 b0 	brge	80002a04 <cascades_trigger+0x178>
800028a8:	ee 0c 00 06 	add	r6,r7,r12
800028ac:	ed 34 00 18 	ld.ub	r4,r6[24]
800028b0:	08 93       	mov	r3,r4
800028b2:	f0 04 18 00 	cp.b	r4,r8
800028b6:	e0 81 00 a7 	brne	80002a04 <cascades_trigger+0x178>
    m.triggers[n]++;
800028ba:	30 19       	mov	r9,1
800028bc:	ed 69 00 18 	st.b	r6[24],r9
  
    if(m.rules[n] == 1) {     // inc
800028c0:	ed 38 00 28 	ld.ub	r8,r6[40]
800028c4:	f2 08 18 00 	cp.b	r8,r9
      if(m.points[m.rule_dests[n]] < (LENGTH)) {
800028c8:	c0 f1       	brne	800028e6 <cascades_trigger+0x5a>
800028ca:	ed 38 00 30 	ld.ub	r8,r6[48]
800028ce:	10 07       	add	r7,r8
800028d0:	e0 68 0a d9 	mov	r8,2777
800028d4:	11 89       	ld.ub	r9,r8[0x0]
800028d6:	ef 38 00 08 	ld.ub	r8,r7[8]
800028da:	f5 d8 b0 08 	bfexts	r10,r8,0x0,0x8
        m.points[m.rule_dests[n]]++;
800028de:	12 3a       	cp.w	r10,r9
800028e0:	c7 74       	brge	800029ce <cascades_trigger+0x142>
        // m.positions[m.rule_dests[n]] = m.points[m.rule_dests[n]];
      }
    }
    else if(m.rules[n] == 2) {  // dec
800028e2:	2f f8       	sub	r8,-1
800028e4:	c7 38       	rjmp	800029ca <cascades_trigger+0x13e>
800028e6:	30 29       	mov	r9,2
800028e8:	f2 08 18 00 	cp.b	r8,r9
      if(m.points[m.rule_dests[n]] > 0) {
800028ec:	c0 c1       	brne	80002904 <cascades_trigger+0x78>
800028ee:	ed 38 00 30 	ld.ub	r8,r6[48]
800028f2:	10 07       	add	r7,r8
800028f4:	ef 38 00 08 	ld.ub	r8,r7[8]
800028f8:	e8 08 18 00 	cp.b	r8,r4
        m.points[m.rule_dests[n]]--;
800028fc:	e0 8a 00 69 	brle	800029ce <cascades_trigger+0x142>
        // m.positions[m.rule_dests[n]] = m.points[m.rule_dests[n]];
      }
    }
    else if(m.rules[n] == 3) {  // max
80002900:	20 18       	sub	r8,1
80002902:	c6 48       	rjmp	800029ca <cascades_trigger+0x13e>
80002904:	30 39       	mov	r9,3
80002906:	f2 08 18 00 	cp.b	r8,r9
      m.points[m.rule_dests[n]] = (LENGTH);
8000290a:	c0 81       	brne	8000291a <cascades_trigger+0x8e>
8000290c:	ed 38 00 30 	ld.ub	r8,r6[48]
80002910:	10 07       	add	r7,r8
80002912:	e0 68 0a d9 	mov	r8,2777
      // m.positions[m.rule_dests[n]] = m.points[m.rule_dests[n]];
    }
    else if(m.rules[n] == 4) {  // min
80002916:	11 88       	ld.ub	r8,r8[0x0]
80002918:	c5 98       	rjmp	800029ca <cascades_trigger+0x13e>
8000291a:	30 49       	mov	r9,4
      m.points[m.rule_dests[n]] = 0;
8000291c:	f2 08 18 00 	cp.b	r8,r9
80002920:	c0 51       	brne	8000292a <cascades_trigger+0x9e>
80002922:	ed 38 00 30 	ld.ub	r8,r6[48]
      // m.positions[m.rule_dests[n]] = m.points[m.rule_dests[n]];
    }
    else if(m.rules[n] == 5) {  // rnd
80002926:	10 07       	add	r7,r8
80002928:	c3 68       	rjmp	80002994 <cascades_trigger+0x108>
8000292a:	30 59       	mov	r9,5
      m.points[m.rule_dests[n]] = rnd() % SIZE;
8000292c:	f2 08 18 00 	cp.b	r8,r9
80002930:	c0 e1       	brne	8000294c <cascades_trigger+0xc0>
80002932:	ed 36 00 30 	ld.ub	r6,r6[48]
80002936:	e0 a0 09 a1 	rcall	80003c78 <rnd>
8000293a:	e0 68 0a d0 	mov	r8,2768
8000293e:	0c 07       	add	r7,r6
80002940:	11 88       	ld.ub	r8,r8[0x0]
80002942:	f8 08 0d 08 	divu	r8,r12,r8
      // print_dbg_hex(m.points[m.rule_dests[n]]);
      // print_dbg_hex(rnd() % 11);

      // m.positions[m.rule_dests[n]] = m.points[m.rule_dests[n]];
    }
    else if(m.rules[n] == 6) {  // up/down
80002946:	ef 69 00 08 	st.b	r7[8],r9
8000294a:	c4 28       	rjmp	800029ce <cascades_trigger+0x142>
      m.points[m.rule_dests[n]] += rnd() % 3;
8000294c:	30 69       	mov	r9,6
8000294e:	f2 08 18 00 	cp.b	r8,r9
80002952:	c3 31       	brne	800029b8 <cascades_trigger+0x12c>
80002954:	ed 32 00 30 	ld.ub	r2,r6[48]
80002958:	ee 02 00 02 	add	r2,r7,r2
8000295c:	e5 31 00 08 	ld.ub	r1,r2[8]
80002960:	e0 a0 09 8c 	rcall	80003c78 <rnd>
80002964:	30 38       	mov	r8,3
80002966:	f8 08 0d 08 	divu	r8,r12,r8
      m.points[m.rule_dests[n]]--;
8000296a:	f2 01 00 01 	add	r1,r9,r1
8000296e:	e5 61 00 08 	st.b	r2[8],r1
80002972:	ed 38 00 30 	ld.ub	r8,r6[48]
80002976:	ee 08 00 08 	add	r8,r7,r8
8000297a:	f1 39 00 08 	ld.ub	r9,r8[8]


      if(m.points[m.rule_dests[n]] < 0) m.points[m.rule_dests[n]] = 0;
8000297e:	20 19       	sub	r9,1
80002980:	f1 69 00 08 	st.b	r8[8],r9
80002984:	ed 39 00 30 	ld.ub	r9,r6[48]
80002988:	12 07       	add	r7,r9
8000298a:	ef 38 00 08 	ld.ub	r8,r7[8]
8000298e:	e8 08 18 00 	cp.b	r8,r4
      else if(m.points[m.rule_dests[n]] > (LENGTH)) m.points[m.rule_dests[n]] = LENGTH;
80002992:	c0 44       	brge	8000299a <cascades_trigger+0x10e>
80002994:	ef 64 00 08 	st.b	r7[8],r4
80002998:	c1 b8       	rjmp	800029ce <cascades_trigger+0x142>
8000299a:	f5 d8 b0 08 	bfexts	r10,r8,0x0,0x8
8000299e:	e0 68 0a d9 	mov	r8,2777
800029a2:	11 88       	ld.ub	r8,r8[0x0]
800029a4:	10 3a       	cp.w	r10,r8
800029a6:	e0 8a 00 14 	brle	800029ce <cascades_trigger+0x142>
800029aa:	e0 6a 0a f2 	mov	r10,2802
      // m.positions[m.rule_dests[n]] = m.points[m.rule_dests[n]];  

      // print_dbg("\r\n WANDER: ");
      // print_dbg_hex(m.points[m.rule_dests[n]]);   
    }
    else if(m.rules[n] == 7) {  // return
800029ae:	f4 09 00 09 	add	r9,r10,r9
800029b2:	f3 68 00 08 	st.b	r9[8],r8
      m.points[m.rule_dests[n]] = m.points_save[m.rule_dests[n]];
800029b6:	c0 c8       	rjmp	800029ce <cascades_trigger+0x142>
800029b8:	30 79       	mov	r9,7
800029ba:	f2 08 18 00 	cp.b	r8,r9
800029be:	c0 81       	brne	800029ce <cascades_trigger+0x142>
800029c0:	ed 38 00 30 	ld.ub	r8,r6[48]
    }


    //reset
    m.positions[n] += m.points[n] + 1;
800029c4:	10 07       	add	r7,r8
800029c6:	ef 38 00 10 	ld.ub	r8,r7[16]
800029ca:	ef 68 00 08 	st.b	r7[8],r8

    //triggers
    for(i=0;i<8;i++)
      if((m.trig_dests[n] & (1<<i)) != 0)
800029ce:	e0 68 0a f2 	mov	r8,2802
      m.points[m.rule_dests[n]] = m.points_save[m.rule_dests[n]];
    }


    //reset
    m.positions[n] += m.points[n] + 1;
800029d2:	30 07       	mov	r7,0
800029d4:	f0 05 00 09 	add	r9,r8,r5
800029d8:	f0 05 07 0a 	ld.ub	r10,r8[r5]
800029dc:	12 96       	mov	r6,r9

    //triggers
    for(i=0;i<8;i++)
      if((m.trig_dests[n] & (1<<i)) != 0)
800029de:	f3 39 00 08 	ld.ub	r9,r9[8]
800029e2:	f4 09 00 09 	add	r9,r10,r9
800029e6:	2f f9       	sub	r9,-1
800029e8:	f0 05 0b 09 	st.b	r8[r5],r9
        cascades_trigger(i);
800029ec:	ed 38 00 20 	ld.ub	r8,r6[32]
800029f0:	f0 07 08 48 	asr	r8,r8,r7

    //reset
    m.positions[n] += m.points[n] + 1;

    //triggers
    for(i=0;i<8;i++)
800029f4:	ed b8 00 00 	bld	r8,0x0
800029f8:	c0 31       	brne	800029fe <cascades_trigger+0x172>
800029fa:	0e 9c       	mov	r12,r7
800029fc:	c4 8f       	rcall	8000288c <cascades_trigger>
800029fe:	2f f7       	sub	r7,-1
80002a00:	58 87       	cp.w	r7,8
80002a02:	cf 51       	brne	800029ec <cascades_trigger+0x160>
80002a04:	d8 32       	popm	r0-r7,pc
80002a06:	d7 03       	nop

80002a08 <clock>:
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// application clock code

void clock(u8 phase) {
80002a08:	d4 31       	pushm	r0-r7,lr
	static u8 i;

	if(phase) {
80002a0a:	58 0c       	cp.w	r12,0
80002a0c:	c4 f0       	breq	80002aaa <clock+0xa2>
		gpio_set_gpio_pin(B10);
80002a0e:	32 ac       	mov	r12,42
80002a10:	e0 a0 0d 94 	rcall	80004538 <gpio_set_gpio_pin>
80002a14:	30 08       	mov	r8,0

		// clear last round
		for(i=0;i<8;i++)
80002a16:	30 7b       	mov	r11,7
			m.triggers[i] = 0;
80002a18:	e0 6a 0a f2 	mov	r10,2802

	if(phase) {
		gpio_set_gpio_pin(B10);

		// clear last round
		for(i=0;i<8;i++)
80002a1c:	10 99       	mov	r9,r8
			m.triggers[i] = 0;
80002a1e:	c0 98       	rjmp	80002a30 <clock+0x28>
80002a20:	f0 cc ff ff 	sub	r12,r8,-1
80002a24:	f4 08 00 08 	add	r8,r10,r8
80002a28:	f1 69 00 18 	st.b	r8[24],r9
80002a2c:	f1 dc c0 08 	bfextu	r8,r12,0x0,0x8

	if(phase) {
		gpio_set_gpio_pin(B10);

		// clear last round
		for(i=0;i<8;i++)
80002a30:	f6 08 18 00 	cp.b	r8,r11
80002a34:	fe 98 ff f6 	brls	80002a20 <clock+0x18>
			m.triggers[i] = 0;

		// main
		cascades_trigger(0);
80002a38:	e0 67 05 9c 	mov	r7,1436

		// ensure bounds, output triggers
		for(i=0;i<8;i++) {
80002a3c:	30 0c       	mov	r12,0
		// clear last round
		for(i=0;i<8;i++)
			m.triggers[i] = 0;

		// main
		cascades_trigger(0);
80002a3e:	ae 88       	st.b	r7[0x0],r8
80002a40:	0e 95       	mov	r5,r7

		// ensure bounds, output triggers
		for(i=0;i<8;i++) {
80002a42:	c2 5f       	rcall	8000288c <cascades_trigger>
80002a44:	30 06       	mov	r6,0
80002a46:	30 73       	mov	r3,7
			else if(m.positions[i] > m.points[i])
				m.positions[i] = m.points[i];

			// send out
			if(m.triggers[i])
				gpio_set_gpio_pin(outs[i]);
80002a48:	ae 86       	st.b	r7[0x0],r6
		// main
		cascades_trigger(0);

		// ensure bounds, output triggers
		for(i=0;i<8;i++) {
			if(m.positions[i] < 0)
80002a4a:	fe c4 b4 32 	sub	r4,pc,-19406
80002a4e:	e0 67 0a f2 	mov	r7,2802
80002a52:	c2 18       	rjmp	80002a94 <clock+0x8c>
80002a54:	ee 08 07 0a 	ld.ub	r10,r7[r8]
				m.positions[i] = 0;
80002a58:	ec 0a 18 00 	cp.b	r10,r6
80002a5c:	c0 44       	brge	80002a64 <clock+0x5c>
			else if(m.positions[i] > m.points[i])
80002a5e:	ee 08 0b 06 	st.b	r7[r8],r6
80002a62:	c0 b8       	rjmp	80002a78 <clock+0x70>
80002a64:	ee 08 00 09 	add	r9,r7,r8
80002a68:	f3 39 00 08 	ld.ub	r9,r9[8]
80002a6c:	f2 0a 18 00 	cp.b	r10,r9
				m.positions[i] = m.points[i];
80002a70:	e0 8a 00 04 	brle	80002a78 <clock+0x70>

			// send out
			if(m.triggers[i])
80002a74:	ee 08 0b 09 	st.b	r7[r8],r9
80002a78:	ee 08 00 09 	add	r9,r7,r8
80002a7c:	f3 39 00 18 	ld.ub	r9,r9[24]
				gpio_set_gpio_pin(outs[i]);
80002a80:	ec 09 18 00 	cp.b	r9,r6
80002a84:	c0 50       	breq	80002a8e <clock+0x86>
80002a86:	e8 08 07 0c 	ld.ub	r12,r4[r8]

		// main
		cascades_trigger(0);

		// ensure bounds, output triggers
		for(i=0;i<8;i++) {
80002a8a:	e0 a0 0d 57 	rcall	80004538 <gpio_set_gpio_pin>
80002a8e:	0b 88       	ld.ub	r8,r5[0x0]
80002a90:	2f f8       	sub	r8,-1
80002a92:	aa 88       	st.b	r5[0x0],r8
80002a94:	0b 88       	ld.ub	r8,r5[0x0]
80002a96:	e6 08 18 00 	cp.b	r8,r3
			// send out
			if(m.triggers[i])
				gpio_set_gpio_pin(outs[i]);
		}

		monomeFrameDirty++;
80002a9a:	fe 98 ff dd 	brls	80002a54 <clock+0x4c>
80002a9e:	e0 68 07 45 	mov	r8,1861
	}
	else {
		for(i=0;i<8;i++) gpio_clr_gpio_pin(outs[i]);
80002aa2:	11 89       	ld.ub	r9,r8[0x0]
80002aa4:	2f f9       	sub	r9,-1
80002aa6:	b0 89       	st.b	r8[0x0],r9
80002aa8:	d8 32       	popm	r0-r7,pc
80002aaa:	e0 67 05 9c 	mov	r7,1436
80002aae:	30 75       	mov	r5,7
80002ab0:	ae 8c       	st.b	r7[0x0],r12
80002ab2:	fe c6 b4 9a 	sub	r6,pc,-19302
80002ab6:	c0 88       	rjmp	80002ac6 <clock+0xbe>
80002ab8:	ec 08 07 0c 	ld.ub	r12,r6[r8]
80002abc:	e0 a0 0d 4b 	rcall	80004552 <gpio_clr_gpio_pin>
80002ac0:	0f 88       	ld.ub	r8,r7[0x0]
80002ac2:	2f f8       	sub	r8,-1

		gpio_clr_gpio_pin(B10);
80002ac4:	ae 88       	st.b	r7[0x0],r8
80002ac6:	0f 88       	ld.ub	r8,r7[0x0]
80002ac8:	ea 08 18 00 	cp.b	r8,r5
80002acc:	fe 98 ff f6 	brls	80002ab8 <clock+0xb0>
80002ad0:	32 ac       	mov	r12,42
80002ad2:	e0 a0 0d 40 	rcall	80004552 <gpio_clr_gpio_pin>
80002ad6:	d8 32       	popm	r0-r7,pc

80002ad8 <flash_write>:
80002ad8:	d4 21       	pushm	r4-r7,lr
80002ada:	e0 66 0a d8 	mov	r6,2776
80002ade:	0d 88       	ld.ub	r8,r6[0x0]
80002ae0:	49 17       	lddpc	r7,80002b24 <flash_write+0x4c>
80002ae2:	f0 0c 15 03 	lsl	r12,r8,0x3
80002ae6:	10 1c       	sub	r12,r8
}

void flash_write(void) {
	// print_dbg("\r write preset ");
	// print_dbg_ulong(preset_select);
	flashc_memcpy((void *)&flashy.m[preset_select], &m, sizeof(m), true);
80002ae8:	ee c8 ff be 	sub	r8,r7,-66
80002aec:	30 19       	mov	r9,1
80002aee:	33 8a       	mov	r10,56
80002af0:	e0 6b 0a f2 	mov	r11,2802
80002af4:	f0 0c 00 3c 	add	r12,r8,r12<<0x3
	flashc_memcpy((void *)&flashy.glyph[preset_select], &glyph, sizeof(glyph), true);
80002af8:	e0 a0 0c 74 	rcall	800043e0 <flashc_memcpy>
80002afc:	ee c8 ff fe 	sub	r8,r7,-2
80002b00:	0d 8c       	ld.ub	r12,r6[0x0]
80002b02:	30 19       	mov	r9,1
80002b04:	30 8a       	mov	r10,8
80002b06:	e0 6b 0a e8 	mov	r11,2792
80002b0a:	f0 0c 00 3c 	add	r12,r8,r12<<0x3
	flashc_memset8((void*)&(flashy.preset_select), preset_select, 1, true);
80002b0e:	e0 a0 0c 69 	rcall	800043e0 <flashc_memcpy>
80002b12:	30 19       	mov	r9,1
80002b14:	0d 8b       	ld.ub	r11,r6[0x0]
80002b16:	ee cc ff ff 	sub	r12,r7,-1
}
80002b1a:	12 9a       	mov	r10,r9
80002b1c:	e0 a0 0c 5c 	rcall	800043d4 <flashc_memset8>
80002b20:	d8 22       	popm	r4-r7,pc
80002b22:	d7 03       	nop
80002b24:	80 03       	ld.sh	r3,r0[0x0]
	...

80002b28 <handler_SaveFlash>:
80002b28:	d4 01       	pushm	lr
80002b2a:	cd 7f       	rcall	80002ad8 <flash_write>
80002b2c:	d8 02       	popm	pc
80002b2e:	d7 03       	nop

80002b30 <flash_unfresh>:
80002b30:	d4 01       	pushm	lr
80002b32:	30 19       	mov	r9,1
  // flashc_memset((void *)nvram_data, 0x00, 8, sizeof(*nvram_data), true);
}

// write fresh status
void flash_unfresh(void) {
  flashc_memset8((void*)&(flashy.fresh), FIRSTRUN_KEY, 4, true);
80002b34:	30 4a       	mov	r10,4
80002b36:	32 2b       	mov	r11,34
80002b38:	48 2c       	lddpc	r12,80002b40 <flash_unfresh+0x10>
80002b3a:	e0 a0 0c 4d 	rcall	800043d4 <flashc_memset8>
}
80002b3e:	d8 02       	popm	pc
80002b40:	80 03       	ld.sh	r3,r0[0x0]
	...

80002b44 <main>:
80002b44:	d4 31       	pushm	r0-r7,lr
80002b46:	e0 a0 1d 1b 	rcall	8000657c <sysclk_init>
{
	u8 i1;

	sysclk_init();

	init_dbg_rs232(FMCK_HZ);
80002b4a:	e0 6c 87 00 	mov	r12,34560
80002b4e:	ea 1c 03 93 	orh	r12,0x393
80002b52:	e0 a0 19 af 	rcall	80005eb0 <init_dbg_rs232>

	init_gpio();
80002b56:	e0 a0 02 8b 	rcall	8000306c <init_gpio>



// assign event handlers
static inline void assign_main_event_handlers(void) {
	app_event_handlers[ kEventFront ]	= &handler_Front;
80002b5a:	fe c9 0a 46 	sub	r9,pc,2630
80002b5e:	e0 68 0b 2c 	mov	r8,2860
	// app_event_handlers[ kEventTimer ]	= &handler_Timer;
	app_event_handlers[ kEventPollADC ]	= &handler_PollADC;
80002b62:	91 19       	st.w	r8[0x4],r9
	app_event_handlers[ kEventKeyTimer ] = &handler_KeyTimer;
80002b64:	fe c9 03 1c 	sub	r9,pc,796
	app_event_handlers[ kEventSaveFlash ] = &handler_SaveFlash;
80002b68:	91 39       	st.w	r8[0xc],r9
80002b6a:	fe c9 04 2e 	sub	r9,pc,1070
	app_event_handlers[ kEventFtdiConnect ]	= &handler_FtdiConnect ;
80002b6e:	91 49       	st.w	r8[0x10],r9
	app_event_handlers[ kEventFtdiDisconnect ]	= &handler_FtdiDisconnect ;
80002b70:	fe c9 00 48 	sub	r9,pc,72
	app_event_handlers[ kEventMonomeConnect ]	= &handler_MonomeConnect ;
80002b74:	91 59       	st.w	r8[0x14],r9
80002b76:	fe c9 04 42 	sub	r9,pc,1090
	app_event_handlers[ kEventMonomeDisconnect ]	= &handler_None ;
80002b7a:	91 69       	st.w	r8[0x18],r9
	app_event_handlers[ kEventMonomePoll ]	= &handler_MonomePoll ;
80002b7c:	fe c9 fe 34 	sub	r9,pc,-460
	app_event_handlers[ kEventMonomeRefresh ]	= &handler_MonomeRefresh ;
80002b80:	91 79       	st.w	r8[0x1c],r9
80002b82:	fe c9 04 92 	sub	r9,pc,1170
	app_event_handlers[ kEventMonomeGridKey ]	= &handler_MonomeGridKey ;
80002b86:	91 89       	st.w	r8[0x20],r9

	init_dbg_rs232(FMCK_HZ);

	init_gpio();
	assign_main_event_handlers();
	init_events();
80002b88:	fe c9 0a b4 	sub	r9,pc,2740
	init_tc();
80002b8c:	91 99       	st.w	r8[0x24],r9
80002b8e:	fe c9 0a 86 	sub	r9,pc,2694
	init_spi();
80002b92:	91 a9       	st.w	r8[0x28],r9
	init_adc();
80002b94:	fe c9 07 00 	sub	r9,pc,1792

	irq_initialize_vectors();
80002b98:	91 b9       	st.w	r8[0x2c],r9
80002b9a:	fe c9 09 b6 	sub	r9,pc,2486
	register_interrupts();
80002b9e:	91 c9       	st.w	r8[0x30],r9
	cpu_irq_enable();
80002ba0:	c9 6d       	rcall	80002ecc <init_events>

	init_usb_host();
80002ba2:	e0 a0 02 49 	rcall	80003034 <init_tc>
	init_monome();
80002ba6:	cf 7d       	rcall	80002f94 <init_spi>
80002ba8:	cd 8c       	rcall	80002d58 <init_adc>


	print_dbg("\r\n\n// meadowphysics //////////////////////////////// ");
80002baa:	e0 a0 0d 4f 	rcall	80004648 <INTC_init_interrupts>
80002bae:	e0 a0 02 87 	rcall	800030bc <register_interrupts>
	print_dbg_ulong(sizeof(flashy));
80002bb2:	d5 03       	csrf	0x10
80002bb4:	ce cd       	rcall	80002f8c <init_usb_host>
80002bb6:	e0 a0 03 15 	rcall	800031e0 <init_monome>

	print_dbg(" ");
80002bba:	fe cc b5 7a 	sub	r12,pc,-19078
	print_dbg_ulong(sizeof(m));
80002bbe:	e0 a0 19 57 	rcall	80005e6c <print_dbg>
80002bc2:	e0 6c 02 02 	mov	r12,514


	if(flash_is_fresh()) {
80002bc6:	e0 a0 19 4d 	rcall	80005e60 <print_dbg_ulong>
80002bca:	fe cc b5 56 	sub	r12,pc,-19114
80002bce:	e0 a0 19 4f 	rcall	80005e6c <print_dbg>
		print_dbg("\r\nfirst run.");
80002bd2:	33 8c       	mov	r12,56
80002bd4:	e0 a0 19 46 	rcall	80005e60 <print_dbg_ulong>
		flash_unfresh();
80002bd8:	32 28       	mov	r8,34
80002bda:	4a 87       	lddpc	r7,80002c78 <main+0x134>
		flashc_memset32((void*)&(flashy.preset_select), 0, 4, true);
80002bdc:	0f 89       	ld.ub	r9,r7[0x0]
80002bde:	f0 09 18 00 	cp.b	r9,r8
80002be2:	c5 20       	breq	80002c86 <main+0x142>
80002be4:	fe cc b5 6c 	sub	r12,pc,-19092
80002be8:	e0 a0 19 42 	rcall	80005e6c <print_dbg>
80002bec:	ca 2f       	rcall	80002b30 <flash_unfresh>
		// clear out some reasonable defaults
		for(i1=0;i1<8;i1++) {
			m.positions[i1] = i1;
			m.points[i1] = i1;
			m.points_save[i1] = i1;
			m.triggers[i1] = 0;
80002bee:	30 19       	mov	r9,1
		flash_unfresh();
		flashc_memset32((void*)&(flashy.preset_select), 0, 4, true);


		// clear out some reasonable defaults
		for(i1=0;i1<8;i1++) {
80002bf0:	30 4a       	mov	r10,4
			m.positions[i1] = i1;
80002bf2:	30 0b       	mov	r11,0
			m.points[i1] = i1;
80002bf4:	ee cc ff ff 	sub	r12,r7,-1
			m.points_save[i1] = i1;
80002bf8:	e0 a0 0b dc 	rcall	800043b0 <flashc_memset32>
			m.triggers[i1] = 0;
			m.trig_dests[i1] = 0;
			m.rules[i1] = 0;
			m.rule_dests[i1] = i1;
80002bfc:	30 09       	mov	r9,0
80002bfe:	e0 68 0a f2 	mov	r8,2802
		// clear out some reasonable defaults
		for(i1=0;i1<8;i1++) {
			m.positions[i1] = i1;
			m.points[i1] = i1;
			m.points_save[i1] = i1;
			m.triggers[i1] = 0;
80002c02:	12 9a       	mov	r10,r9
			m.trig_dests[i1] = 0;
80002c04:	30 8b       	mov	r11,8
80002c06:	b0 89       	st.b	r8[0x0],r9
			m.rules[i1] = 0;
80002c08:	f1 69 00 08 	st.b	r8[8],r9
		flash_unfresh();
		flashc_memset32((void*)&(flashy.preset_select), 0, 4, true);


		// clear out some reasonable defaults
		for(i1=0;i1<8;i1++) {
80002c0c:	f1 69 00 10 	st.b	r8[16],r9
80002c10:	f1 69 00 30 	st.b	r8[48],r9
80002c14:	f1 6a 00 18 	st.b	r8[24],r10
			m.trig_dests[i1] = 0;
			m.rules[i1] = 0;
			m.rule_dests[i1] = i1;
		}

		m.positions[0] = m.points[0] = 3;
80002c18:	f1 6a 00 20 	st.b	r8[32],r10
		m.trig_dests[0] = 254;
80002c1c:	f1 6a 00 28 	st.b	r8[40],r10
			m.trig_dests[i1] = 0;
			m.rules[i1] = 0;
			m.rule_dests[i1] = i1;
		}

		m.positions[0] = m.points[0] = 3;
80002c20:	2f f9       	sub	r9,-1
80002c22:	2f f8       	sub	r8,-1
		m.trig_dests[0] = 254;
80002c24:	5c 59       	castu.b	r9
80002c26:	f6 09 18 00 	cp.b	r9,r11
80002c2a:	ce e1       	brne	80002c06 <main+0xc2>
80002c2c:	30 39       	mov	r9,3
80002c2e:	e0 68 0a f2 	mov	r8,2802

		// save all presets, clear glyphs
		for(i1=0;i1<8;i1++) {
			flashc_memcpy((void *)&flashy.m[i1], &m, sizeof(m), true);
80002c32:	49 26       	lddpc	r6,80002c78 <main+0x134>
			glyph[i1] = (1<<i1);
80002c34:	b0 89       	st.b	r8[0x0],r9
		m.positions[0] = m.points[0] = 3;
		m.trig_dests[0] = 254;

		// save all presets, clear glyphs
		for(i1=0;i1<8;i1++) {
			flashc_memcpy((void *)&flashy.m[i1], &m, sizeof(m), true);
80002c36:	f1 69 00 08 	st.b	r8[8],r9
80002c3a:	ec c5 ff fe 	sub	r5,r6,-2
80002c3e:	3f e9       	mov	r9,-2
80002c40:	2b e6       	sub	r6,-66
			glyph[i1] = (1<<i1);
80002c42:	f1 69 00 20 	st.b	r8[32],r9
			flashc_memcpy((void *)&flashy.glyph[i1], &glyph, sizeof(glyph), true);
80002c46:	30 07       	mov	r7,0
		m.trig_dests[0] = 254;

		// save all presets, clear glyphs
		for(i1=0;i1<8;i1++) {
			flashc_memcpy((void *)&flashy.m[i1], &m, sizeof(m), true);
			glyph[i1] = (1<<i1);
80002c48:	30 14       	mov	r4,1
80002c4a:	e0 63 0a e8 	mov	r3,2792
			flashc_memcpy((void *)&flashy.glyph[i1], &glyph, sizeof(glyph), true);
80002c4e:	30 19       	mov	r9,1
80002c50:	33 8a       	mov	r10,56
80002c52:	e0 6b 0a f2 	mov	r11,2802
80002c56:	0c 9c       	mov	r12,r6
80002c58:	e0 a0 0b c4 	rcall	800043e0 <flashc_memcpy>
80002c5c:	e8 07 09 48 	lsl	r8,r4,r7
80002c60:	0a 9c       	mov	r12,r5
80002c62:	e6 07 0b 08 	st.b	r3[r7],r8
80002c66:	2c 86       	sub	r6,-56
80002c68:	2f f7       	sub	r7,-1
80002c6a:	2f 85       	sub	r5,-8
80002c6c:	30 19       	mov	r9,1
80002c6e:	30 8a       	mov	r10,8
80002c70:	e0 6b 0a e8 	mov	r11,2792
80002c74:	c0 48       	rjmp	80002c7c <main+0x138>
80002c76:	d7 03       	nop
80002c78:	80 03       	ld.sh	r3,r0[0x0]
80002c7a:	00 00       	add	r0,r0
80002c7c:	e0 a0 0b b2 	rcall	800043e0 <flashc_memcpy>
80002c80:	58 87       	cp.w	r7,8
80002c82:	ce 61       	brne	80002c4e <main+0x10a>
80002c84:	c1 38       	rjmp	80002caa <main+0x166>
80002c86:	0f 98       	ld.ub	r8,r7[0x1]
80002c88:	e0 66 0a d8 	mov	r6,2776
80002c8c:	ac 88       	st.b	r6[0x0],r8
80002c8e:	fe b0 fa 61 	rcall	80002150 <flash_read>
80002c92:	0d 88       	ld.ub	r8,r6[0x0]
80002c94:	ee 08 00 37 	add	r7,r7,r8<<0x3
80002c98:	e0 68 0a e8 	mov	r8,2792
80002c9c:	2f e7       	sub	r7,-2
80002c9e:	f0 c9 ff f8 	sub	r9,r8,-8
80002ca2:	0f 3a       	ld.ub	r10,r7++
80002ca4:	10 ca       	st.b	r8++,r10
80002ca6:	12 38       	cp.w	r8,r9
80002ca8:	cf d1       	brne	80002ca2 <main+0x15e>
80002caa:	30 f9       	mov	r9,15
80002cac:	e0 68 0a d9 	mov	r8,2777
80002cb0:	b0 89       	st.b	r8[0x0],r9
80002cb2:	31 09       	mov	r9,16
80002cb4:	e0 68 0a d0 	mov	r8,2768
80002cb8:	b0 89       	st.b	r8[0x0],r9
80002cba:	fe c9 07 8a 	sub	r9,pc,1930
80002cbe:	e0 68 0a d4 	mov	r8,2772
80002cc2:	91 09       	st.w	r8[0x0],r9
80002cc4:	fe c9 02 bc 	sub	r9,pc,700
80002cc8:	31 c8       	mov	r8,28
80002cca:	32 9c       	mov	r12,41
80002ccc:	91 09       	st.w	r8[0x0],r9
80002cce:	e0 a0 0c 2a 	rcall	80004522 <gpio_get_pin_value>
80002cd2:	e0 68 0b 64 	mov	r8,2916
80002cd6:	ec 1c 00 01 	eorl	r12,0x1
80002cda:	30 09       	mov	r9,0
80002cdc:	b0 8c       	st.b	r8[0x0],r12
80002cde:	fe ca 0c 06 	sub	r10,pc,3078
80002ce2:	37 8b       	mov	r11,120
80002ce4:	e0 6c 05 ec 	mov	r12,1516

		m.positions[0] = m.points[0] = 3;
		m.trig_dests[0] = 254;

		// save all presets, clear glyphs
		for(i1=0;i1<8;i1++) {
80002ce8:	e0 a0 07 8a 	rcall	80003bfc <timer_add>
80002cec:	30 09       	mov	r9,0
			flashc_memcpy((void *)&flashy.glyph[i1], &glyph, sizeof(glyph), true);
		}
	}
	else {
		// load from flash at startup
		preset_select = flashy.preset_select;
80002cee:	fe ca 04 de 	sub	r10,pc,1246
80002cf2:	33 2b       	mov	r11,50
		flash_read();
80002cf4:	e0 6c 05 b4 	mov	r12,1460
80002cf8:	e0 a0 07 82 	rcall	80003bfc <timer_add>
80002cfc:	30 09       	mov	r9,0
80002cfe:	fe ca 05 06 	sub	r10,pc,1286
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// main

int main(void)
80002d02:	36 4b       	mov	r11,100
80002d04:	e0 6c 05 84 	mov	r12,1412
	else {
		// load from flash at startup
		preset_select = flashy.preset_select;
		flash_read();
		for(i1=0;i1<8;i1++)
			glyph[i1] = flashy.glyph[preset_select][i1];
80002d08:	e0 a0 07 7a 	rcall	80003bfc <timer_add>
	}
	else {
		// load from flash at startup
		preset_select = flashy.preset_select;
		flash_read();
		for(i1=0;i1<8;i1++)
80002d0c:	e0 69 27 10 	mov	r9,10000
			glyph[i1] = flashy.glyph[preset_select][i1];
	}

	LENGTH = 15;
80002d10:	e0 68 0b 2a 	mov	r8,2858
	SIZE = 16;
80002d14:	e0 67 05 d0 	mov	r7,1488
80002d18:	b0 09       	st.h	r8[0x0],r9

	re = &refresh;
80002d1a:	e0 66 0b 2c 	mov	r6,2860
80002d1e:	e0 6c 05 d0 	mov	r12,1488

	clock_pulse = &clock;
80002d22:	c0 fd       	rcall	80002f40 <event_next>
	clock_external = !gpio_get_pin_value(B09);
80002d24:	cf d0       	breq	80002d1e <main+0x1da>
	LENGTH = 15;
	SIZE = 16;

	re = &refresh;

	clock_pulse = &clock;
80002d26:	6e 08       	ld.w	r8,r7[0x0]
	clock_external = !gpio_get_pin_value(B09);
80002d28:	6e 1c       	ld.w	r12,r7[0x4]
80002d2a:	ec 08 03 28 	ld.w	r8,r6[r8<<0x2]
80002d2e:	5d 18       	icall	r8
80002d30:	cf 7b       	rjmp	80002d1e <main+0x1da>

	timer_add(&clockTimer,120,&clockTimer_callback, NULL);
80002d32:	d7 03       	nop

80002d34 <timers_unset_monome>:
	SIZE = 16;

	re = &refresh;

	clock_pulse = &clock;
	clock_external = !gpio_get_pin_value(B09);
80002d34:	d4 01       	pushm	lr

	timer_add(&clockTimer,120,&clockTimer_callback, NULL);
80002d36:	e0 6c 05 6c 	mov	r12,1388
80002d3a:	e0 a0 07 2b 	rcall	80003b90 <timer_remove>
80002d3e:	e0 6c 06 0c 	mov	r12,1548
	timer_add(&keyTimer,50,&keyTimer_callback, NULL);
80002d42:	e0 a0 07 27 	rcall	80003b90 <timer_remove>
80002d46:	d8 02       	popm	pc

80002d48 <handler_FtdiDisconnect>:
80002d48:	d4 01       	pushm	lr
80002d4a:	cf 5f       	rcall	80002d34 <timers_unset_monome>
	timer_add(&adcTimer,100,&adcTimer_callback, NULL);
80002d4c:	d8 02       	popm	pc
80002d4e:	d7 03       	nop

80002d50 <monome_poll_timer_callback>:
80002d50:	d4 01       	pushm	lr
80002d52:	e0 a0 07 f9 	rcall	80003d44 <ftdi_read>
80002d56:	d8 02       	popm	pc

80002d58 <init_adc>:
  (*dst)[3] = val & 0xfff;

}

// setup ad7923
void init_adc(void) {
80002d58:	d4 21       	pushm	r4-r7,lr
  u16 cmd;

  // at powerup, the part wants a dummy conversion with DIN high
  spi_selectChip(SPI, ADC_SPI);
80002d5a:	30 1b       	mov	r11,1
80002d5c:	fe 7c 24 00 	mov	r12,-56320
80002d60:	e0 a0 0c f4 	rcall	80004748 <spi_selectChip>
  spi_write(SPI, 0xffff);
80002d64:	e0 6b ff ff 	mov	r11,65535
80002d68:	fe 7c 24 00 	mov	r12,-56320
80002d6c:	e0 a0 0d 7d 	rcall	80004866 <spi_write>
  spi_unselectChip(SPI, ADC_SPI);
80002d70:	30 1b       	mov	r11,1
80002d72:	fe 7c 24 00 	mov	r12,-56320
80002d76:	e0 a0 0d 11 	rcall	80004798 <spi_unselectChip>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002d7a:	e1 b7 00 42 	mfsr	r7,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002d7e:	ee 78 42 40 	mov	r8,1000000
80002d82:	30 09       	mov	r9,0
80002d84:	e0 6a e5 3f 	mov	r10,58687
80002d88:	ea 1a 11 f0 	orh	r10,0x11f0
80002d8c:	30 0b       	mov	r11,0
80002d8e:	e0 a0 1c 1d 	rcall	800065c8 <__avr32_udiv64>
80002d92:	ee 0a 00 0a 	add	r10,r7,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002d96:	e1 b8 00 42 	mfsr	r8,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002d9a:	14 37       	cp.w	r7,r10
80002d9c:	e0 88 00 05 	brls	80002da6 <init_adc+0x4e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002da0:	0e 38       	cp.w	r8,r7
80002da2:	cf a2       	brcc	80002d96 <init_adc+0x3e>
80002da4:	c0 38       	rjmp	80002daa <init_adc+0x52>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002da6:	0e 38       	cp.w	r8,r7
80002da8:	c0 43       	brcs	80002db0 <init_adc+0x58>
80002daa:	14 38       	cp.w	r8,r10
80002dac:	fe 98 ff f5 	brls	80002d96 <init_adc+0x3e>
  // wait for powerup time (5us in datasheet)
  delay_us(5);
  
  // write base configuration
  cmd = AD7923_CMD_BASE << 4;
  spi_selectChip(SPI, ADC_SPI );
80002db0:	30 1b       	mov	r11,1
80002db2:	fe 7c 24 00 	mov	r12,-56320
80002db6:	e0 a0 0c c9 	rcall	80004748 <spi_selectChip>
  spi_write(SPI, cmd );
80002dba:	e0 6b 83 10 	mov	r11,33552
80002dbe:	fe 7c 24 00 	mov	r12,-56320
80002dc2:	e0 a0 0d 52 	rcall	80004866 <spi_write>
  spi_unselectChip(SPI, ADC_SPI );
80002dc6:	30 1b       	mov	r11,1
80002dc8:	fe 7c 24 00 	mov	r12,-56320
80002dcc:	e0 a0 0c e6 	rcall	80004798 <spi_unselectChip>

}
80002dd0:	d8 22       	popm	r4-r7,pc
80002dd2:	d7 03       	nop

80002dd4 <adc_convert>:
80002dd4:	d4 21       	pushm	r4-r7,lr
80002dd6:	20 1d       	sub	sp,4
80002dd8:	30 1b       	mov	r11,1
80002dda:	18 97       	mov	r7,r12
80002ddc:	fe 7c 24 00 	mov	r12,-56320
80002de0:	e0 a0 0c b4 	rcall	80004748 <spi_selectChip>

  // data into AD7923 is a left-justified 12-bit value in a 16-bit word
  // so, always lshift the command before sending
  cmd = ( AD7923_CMD_BASE ) << 4;
  spi_selectChip(SPI, ADC_SPI);
  spi_write(SPI, cmd);
80002de4:	e0 6b 83 10 	mov	r11,33552
80002de8:	fe 7c 24 00 	mov	r12,-56320
80002dec:	e0 a0 0d 3d 	rcall	80004866 <spi_write>
  spi_unselectChip(SPI, ADC_SPI);
80002df0:	30 1b       	mov	r11,1
80002df2:	fe 7c 24 00 	mov	r12,-56320
80002df6:	e0 a0 0c d1 	rcall	80004798 <spi_unselectChip>

  // get channel 0, setup channel 1
  cmd = ( AD7923_CMD_BASE | AD7923_CTL_ADD0 ) << 4;
  spi_selectChip(SPI, ADC_SPI);
80002dfa:	30 1b       	mov	r11,1
80002dfc:	fe 7c 24 00 	mov	r12,-56320
80002e00:	e0 a0 0c a4 	rcall	80004748 <spi_selectChip>
  spi_write(SPI, cmd);
80002e04:	e0 6b 87 10 	mov	r11,34576
80002e08:	fe 7c 24 00 	mov	r12,-56320
80002e0c:	e0 a0 0d 2d 	rcall	80004866 <spi_write>
  spi_read(SPI, &val);
80002e10:	fa c6 ff fe 	sub	r6,sp,-2
80002e14:	fe 7c 24 00 	mov	r12,-56320
80002e18:	0c 9b       	mov	r11,r6
80002e1a:	e0 a0 0d 34 	rcall	80004882 <spi_read>
  spi_unselectChip(SPI, ADC_SPI);
80002e1e:	30 1b       	mov	r11,1
80002e20:	fe 7c 24 00 	mov	r12,-56320
80002e24:	e0 a0 0c ba 	rcall	80004798 <spi_unselectChip>
  (*dst)[0] = val & 0xfff; 
80002e28:	9a 18       	ld.sh	r8,sp[0x2]
80002e2a:	f1 d8 c0 0c 	bfextu	r8,r8,0x0,0xc

  // get channel 1, setup channel 2
  cmd = ( AD7923_CMD_BASE | AD7923_CTL_ADD1 ) << 4;
  spi_selectChip(SPI, ADC_SPI);
80002e2e:	30 1b       	mov	r11,1
  cmd = ( AD7923_CMD_BASE | AD7923_CTL_ADD0 ) << 4;
  spi_selectChip(SPI, ADC_SPI);
  spi_write(SPI, cmd);
  spi_read(SPI, &val);
  spi_unselectChip(SPI, ADC_SPI);
  (*dst)[0] = val & 0xfff; 
80002e30:	ae 08       	st.h	r7[0x0],r8

  // get channel 1, setup channel 2
  cmd = ( AD7923_CMD_BASE | AD7923_CTL_ADD1 ) << 4;
  spi_selectChip(SPI, ADC_SPI);
80002e32:	fe 7c 24 00 	mov	r12,-56320
80002e36:	e0 a0 0c 89 	rcall	80004748 <spi_selectChip>
  spi_write(SPI, cmd);
80002e3a:	e0 6b 8b 10 	mov	r11,35600
80002e3e:	fe 7c 24 00 	mov	r12,-56320
80002e42:	e0 a0 0d 12 	rcall	80004866 <spi_write>
  spi_read(SPI, &val);
80002e46:	0c 9b       	mov	r11,r6
80002e48:	fe 7c 24 00 	mov	r12,-56320
80002e4c:	e0 a0 0d 1b 	rcall	80004882 <spi_read>
  spi_unselectChip(SPI, ADC_SPI);
80002e50:	30 1b       	mov	r11,1
80002e52:	fe 7c 24 00 	mov	r12,-56320
80002e56:	e0 a0 0c a1 	rcall	80004798 <spi_unselectChip>
  (*dst)[1] = val & 0xfff;
80002e5a:	9a 18       	ld.sh	r8,sp[0x2]
80002e5c:	f1 d8 c0 0c 	bfextu	r8,r8,0x0,0xc

  // get channel 2, setup channel 3
  cmd = ( AD7923_CMD_BASE | AD7923_CTL_ADD1 | AD7923_CTL_ADD0 ) << 4;
  spi_selectChip(SPI, ADC_SPI);
80002e60:	30 1b       	mov	r11,1
  cmd = ( AD7923_CMD_BASE | AD7923_CTL_ADD1 ) << 4;
  spi_selectChip(SPI, ADC_SPI);
  spi_write(SPI, cmd);
  spi_read(SPI, &val);
  spi_unselectChip(SPI, ADC_SPI);
  (*dst)[1] = val & 0xfff;
80002e62:	ae 18       	st.h	r7[0x2],r8

  // get channel 2, setup channel 3
  cmd = ( AD7923_CMD_BASE | AD7923_CTL_ADD1 | AD7923_CTL_ADD0 ) << 4;
  spi_selectChip(SPI, ADC_SPI);
80002e64:	fe 7c 24 00 	mov	r12,-56320
80002e68:	e0 a0 0c 70 	rcall	80004748 <spi_selectChip>
  spi_write(SPI, cmd);
80002e6c:	e0 6b 8f 10 	mov	r11,36624
80002e70:	fe 7c 24 00 	mov	r12,-56320
80002e74:	e0 a0 0c f9 	rcall	80004866 <spi_write>
  spi_read(SPI, &val);
80002e78:	0c 9b       	mov	r11,r6
80002e7a:	fe 7c 24 00 	mov	r12,-56320
80002e7e:	e0 a0 0d 02 	rcall	80004882 <spi_read>
  spi_unselectChip(SPI, ADC_SPI);
80002e82:	30 1b       	mov	r11,1
80002e84:	fe 7c 24 00 	mov	r12,-56320
80002e88:	e0 a0 0c 88 	rcall	80004798 <spi_unselectChip>
  (*dst)[2] = val & 0xfff;
80002e8c:	9a 18       	ld.sh	r8,sp[0x2]
80002e8e:	f1 d8 c0 0c 	bfextu	r8,r8,0x0,0xc

  // get channel 3, dummy write
  cmd = ( AD7923_CMD_BASE ) << 4;
  spi_selectChip(SPI, ADC_SPI);
80002e92:	30 1b       	mov	r11,1
  cmd = ( AD7923_CMD_BASE | AD7923_CTL_ADD1 | AD7923_CTL_ADD0 ) << 4;
  spi_selectChip(SPI, ADC_SPI);
  spi_write(SPI, cmd);
  spi_read(SPI, &val);
  spi_unselectChip(SPI, ADC_SPI);
  (*dst)[2] = val & 0xfff;
80002e94:	ae 28       	st.h	r7[0x4],r8

  // get channel 3, dummy write
  cmd = ( AD7923_CMD_BASE ) << 4;
  spi_selectChip(SPI, ADC_SPI);
80002e96:	fe 7c 24 00 	mov	r12,-56320
80002e9a:	e0 a0 0c 57 	rcall	80004748 <spi_selectChip>
  spi_write(SPI, cmd);
80002e9e:	e0 6b 83 10 	mov	r11,33552
80002ea2:	fe 7c 24 00 	mov	r12,-56320
80002ea6:	e0 a0 0c e0 	rcall	80004866 <spi_write>
  spi_read(SPI, &val);
80002eaa:	0c 9b       	mov	r11,r6
80002eac:	fe 7c 24 00 	mov	r12,-56320
80002eb0:	e0 a0 0c e9 	rcall	80004882 <spi_read>
  spi_unselectChip(SPI, ADC_SPI);
80002eb4:	30 1b       	mov	r11,1
80002eb6:	fe 7c 24 00 	mov	r12,-56320
80002eba:	e0 a0 0c 6f 	rcall	80004798 <spi_unselectChip>
  (*dst)[3] = val & 0xfff;
80002ebe:	9a 18       	ld.sh	r8,sp[0x2]
80002ec0:	f1 d8 c0 0c 	bfextu	r8,r8,0x0,0xc
80002ec4:	ae 38       	st.h	r7[0x6],r8

}
80002ec6:	2f fd       	sub	sp,-4
80002ec8:	d8 22       	popm	r4-r7,pc
80002eca:	d7 03       	nop

80002ecc <init_events>:
// initializes (or re-initializes)  the system event queue.
 void init_events( void ) {
  int k;
  
  // set queue (circular list) to empty
  putIdx = 0;
80002ecc:	e0 6a 06 24 	mov	r10,1572
80002ed0:	30 08       	mov	r8,0
  getIdx = 0;
80002ed2:	95 08       	st.w	r10[0x0],r8

  // zero out the event records
  for ( k = 0; k < MAX_EVENTS; k++ ) {
    sysEvents[ k ].type = 0;
80002ed4:	e0 6a 06 28 	mov	r10,1576
 void init_events( void ) {
  int k;
  
  // set queue (circular list) to empty
  putIdx = 0;
  getIdx = 0;
80002ed8:	10 99       	mov	r9,r8

// The system event queue is a circular array of event records.
 static event_t sysEvents[ MAX_EVENTS ];

// initializes (or re-initializes)  the system event queue.
 void init_events( void ) {
80002eda:	95 08       	st.w	r10[0x0],r8
80002edc:	e0 68 06 2c 	mov	r8,1580
  getIdx = 0;

  // zero out the event records
  for ( k = 0; k < MAX_EVENTS; k++ ) {
    sysEvents[ k ].type = 0;
    sysEvents[ k ].data = 0;
80002ee0:	f0 ca ff 00 	sub	r10,r8,-256
  // set queue (circular list) to empty
  putIdx = 0;
  getIdx = 0;

  // zero out the event records
  for ( k = 0; k < MAX_EVENTS; k++ ) {
80002ee4:	91 09       	st.w	r8[0x0],r9
80002ee6:	91 19       	st.w	r8[0x4],r9
    sysEvents[ k ].type = 0;
    sysEvents[ k ].data = 0;
  }
}
80002ee8:	2f 88       	sub	r8,-8
80002eea:	14 38       	cp.w	r8,r10
80002eec:	cf c1       	brne	80002ee4 <init_events+0x18>
80002eee:	5e fc       	retal	r12

80002ef0 <event_post>:
80002ef0:	d4 01       	pushm	lr
80002ef2:	d3 43       	ssrf	0x14
80002ef4:	e0 68 06 24 	mov	r8,1572

  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);
  
  // increment write idx, posbily wrapping
  saveIndex = putIdx;
  INCR_EVENT_INDEX( putIdx );
80002ef8:	70 0a       	ld.w	r10,r8[0x0]
80002efa:	f4 c9 ff ff 	sub	r9,r10,-1
80002efe:	91 09       	st.w	r8[0x0],r9
80002f00:	e0 49 00 20 	cp.w	r9,32
80002f04:	c0 31       	brne	80002f0a <event_post+0x1a>
80002f06:	30 09       	mov	r9,0
  if ( putIdx != getIdx  ) {
80002f08:	91 09       	st.w	r8[0x0],r9
80002f0a:	e0 68 06 28 	mov	r8,1576
80002f0e:	e0 69 06 24 	mov	r9,1572
80002f12:	70 0b       	ld.w	r11,r8[0x0]
    sysEvents[ putIdx ].type = e->type;
80002f14:	72 08       	ld.w	r8,r9[0x0]
80002f16:	16 38       	cp.w	r8,r11
80002f18:	c0 c0       	breq	80002f30 <event_post+0x40>
80002f1a:	e0 69 06 2c 	mov	r9,1580
    sysEvents[ putIdx ].data = e->data;
80002f1e:	78 0a       	ld.w	r10,r12[0x0]
80002f20:	f2 08 09 3a 	st.w	r9[r8<<0x3],r10
80002f24:	f2 08 00 38 	add	r8,r9,r8<<0x3
    status = true;
  } else {
    // idx wrapped, so queue is full, restore idx
    putIdx = saveIndex;
    print_dbg("\r\n event queue full!");
80002f28:	78 19       	ld.w	r9,r12[0x4]
    sysEvents[ putIdx ].type = e->type;
    sysEvents[ putIdx ].data = e->data;
    status = true;
  } else {
    // idx wrapped, so queue is full, restore idx
    putIdx = saveIndex;
80002f2a:	30 1c       	mov	r12,1
    print_dbg("\r\n event queue full!");
80002f2c:	91 19       	st.w	r8[0x4],r9
80002f2e:	c0 78       	rjmp	80002f3c <event_post+0x4c>
80002f30:	fe cc b8 68 	sub	r12,pc,-18328
  } 

  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
  return status;
80002f34:	93 0a       	st.w	r9[0x0],r10
80002f36:	e0 a0 17 9b 	rcall	80005e6c <print_dbg>
80002f3a:	30 0c       	mov	r12,0
80002f3c:	d5 43       	csrf	0x14
80002f3e:	d8 02       	popm	pc

80002f40 <event_next>:
80002f40:	18 98       	mov	r8,r12
80002f42:	d3 43       	ssrf	0x14
80002f44:	e0 6a 06 24 	mov	r10,1572
80002f48:	e0 69 06 28 	mov	r9,1576
u8 event_next( event_t *e ) {
  u8 status;
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);
  
  // if pointers are equal, the queue is empty... don't allow idx's to wrap!
  if ( getIdx != putIdx ) {
80002f4c:	74 0b       	ld.w	r11,r10[0x0]
80002f4e:	72 0a       	ld.w	r10,r9[0x0]
    INCR_EVENT_INDEX( getIdx );
80002f50:	16 3a       	cp.w	r10,r11
80002f52:	c1 60       	breq	80002f7e <event_next+0x3e>
80002f54:	2f fa       	sub	r10,-1
80002f56:	93 0a       	st.w	r9[0x0],r10
80002f58:	e0 4a 00 20 	cp.w	r10,32
80002f5c:	c0 31       	brne	80002f62 <event_next+0x22>
    e->type = sysEvents[ getIdx ].type;
80002f5e:	30 0a       	mov	r10,0
80002f60:	93 0a       	st.w	r9[0x0],r10
80002f62:	e0 69 06 2c 	mov	r9,1580
    e->data = sysEvents[ getIdx ].data;
80002f66:	e0 6a 06 28 	mov	r10,1576
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);
  
  // if pointers are equal, the queue is empty... don't allow idx's to wrap!
  if ( getIdx != putIdx ) {
    INCR_EVENT_INDEX( getIdx );
    e->type = sysEvents[ getIdx ].type;
80002f6a:	74 0a       	ld.w	r10,r10[0x0]
    e->data = sysEvents[ getIdx ].data;
80002f6c:	f2 0a 00 3b 	add	r11,r9,r10<<0x3
80002f70:	f2 0a 03 39 	ld.w	r9,r9[r10<<0x3]
80002f74:	30 1c       	mov	r12,1
    status = true;
  } else {
    e->type  = 0xff;
    e->data = 0;
80002f76:	91 09       	st.w	r8[0x0],r9
    INCR_EVENT_INDEX( getIdx );
    e->type = sysEvents[ getIdx ].type;
    e->data = sysEvents[ getIdx ].data;
    status = true;
  } else {
    e->type  = 0xff;
80002f78:	76 19       	ld.w	r9,r11[0x4]
80002f7a:	91 19       	st.w	r8[0x4],r9
    e->data = 0;
80002f7c:	c0 68       	rjmp	80002f88 <event_next+0x48>
    INCR_EVENT_INDEX( getIdx );
    e->type = sysEvents[ getIdx ].type;
    e->data = sysEvents[ getIdx ].data;
    status = true;
  } else {
    e->type  = 0xff;
80002f7e:	30 0c       	mov	r12,0
    e->data = 0;
    status = false;
  }

  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
80002f80:	e0 69 00 ff 	mov	r9,255
  return status;
}
80002f84:	91 1c       	st.w	r8[0x4],r12
80002f86:	91 09       	st.w	r8[0x0],r9
80002f88:	d5 43       	csrf	0x14
80002f8a:	5e fc       	retal	r12

80002f8c <init_usb_host>:
  gpio_enable_module(TWI_GPIO_MAP, sizeof(TWI_GPIO_MAP) / sizeof(TWI_GPIO_MAP[0]));
}
*/

// initialize USB host stack
void init_usb_host (void) {
80002f8c:	d4 01       	pushm	lr
  uhc_start();
80002f8e:	e0 a0 17 ed 	rcall	80005f68 <uhc_start>
}
80002f92:	d8 02       	popm	pc

80002f94 <init_spi>:
80002f94:	d4 21       	pushm	r4-r7,lr
80002f96:	20 4d       	sub	sp,16
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80002f98:	30 5b       	mov	r11,5
80002f9a:	30 2c       	mov	r12,2
80002f9c:	e0 a0 1a 7c 	rcall	80006494 <sysclk_priv_enable_module>
    {SPI_NPCS0_PIN,  SPI_NPCS0_FUNCTION },
    {SPI_NPCS1_PIN,  SPI_NPCS1_FUNCTION },
  };

  // Assign GPIO to SPI.
  gpio_enable_module(SPI_GPIO_MAP, sizeof(SPI_GPIO_MAP) / sizeof(SPI_GPIO_MAP[0]));
80002fa0:	30 5b       	mov	r11,5
80002fa2:	fe cc b8 a6 	sub	r12,pc,-18266
80002fa6:	e0 a0 0a a3 	rcall	800044ec <gpio_enable_module>
    .trans_delay = 0,
    .spck_delay = 0,
    .stay_act = 1,
    .spi_mode = 1,
    .modfdis = 1
  };
80002faa:	fe c8 b8 be 	sub	r8,pc,-18242
80002fae:	f0 ea 00 08 	ld.d	r10,r8[8]
80002fb2:	fa eb 00 08 	st.d	sp[8],r10
80002fb6:	f0 e8 00 00 	ld.d	r8,r8[0]
80002fba:	1a 97       	mov	r7,sp


  // Initialize as master.
  spi_initMaster(SPI, &spiOptions);
80002fbc:	fa e9 00 00 	st.d	sp[0],r8
80002fc0:	1a 9b       	mov	r11,sp
80002fc2:	fe 7c 24 00 	mov	r12,-56320
  // Set SPI selection mode: variable_ps, pcs_decode, delay.
  spi_selectionMode(SPI, 0, 0, 0);
80002fc6:	e0 a0 0b 8d 	rcall	800046e0 <spi_initMaster>
80002fca:	30 09       	mov	r9,0
80002fcc:	fe 7c 24 00 	mov	r12,-56320
80002fd0:	12 9a       	mov	r10,r9
80002fd2:	12 9b       	mov	r11,r9
  // Enable SPI module.
  spi_enable(SPI);
80002fd4:	e0 a0 0b a5 	rcall	8000471e <spi_selectionMode>
80002fd8:	fe 7c 24 00 	mov	r12,-56320

  // spi_setupChipReg( SPI, &spiOptions, FPBA_HZ );
  spi_setupChipReg(SPI, &spiOptions, sysclk_get_pba_hz() );
80002fdc:	e0 a0 0c 42 	rcall	80004860 <spi_enable>
80002fe0:	e0 66 87 00 	mov	r6,34560
80002fe4:	ea 16 03 93 	orh	r6,0x393
80002fe8:	1a 9b       	mov	r11,sp
80002fea:	0c 9a       	mov	r10,r6
80002fec:	fe 7c 24 00 	mov	r12,-56320
  // add ADC chip register
  spiOptions.reg          = ADC_SPI;
  spiOptions.baudrate     = 20000000;
  spiOptions.bits         = 16;
  spiOptions.spi_mode     = 2;
  spiOptions.spck_delay   = 0;
80002ff0:	e0 a0 0b e8 	rcall	800047c0 <spi_setupChipReg>
  spiOptions.trans_delay  = 5;
  spiOptions.stay_act     = 0;
  spiOptions.modfdis      = 0;
80002ff4:	30 08       	mov	r8,0
  // add ADC chip register
  spiOptions.reg          = ADC_SPI;
  spiOptions.baudrate     = 20000000;
  spiOptions.bits         = 16;
  spiOptions.spi_mode     = 2;
  spiOptions.spck_delay   = 0;
80002ff6:	fb 68 00 0d 	st.b	sp[13],r8
  spiOptions.trans_delay  = 5;
  spiOptions.stay_act     = 0;
80002ffa:	fb 68 00 09 	st.b	sp[9],r8
  // spi_setupChipReg( SPI, &spiOptions, FPBA_HZ );
  spi_setupChipReg(SPI, &spiOptions, sysclk_get_pba_hz() );


  // add ADC chip register
  spiOptions.reg          = ADC_SPI;
80002ffe:	fb 68 00 0b 	st.b	sp[11],r8
  spiOptions.baudrate     = 20000000;
80003002:	30 18       	mov	r8,1
80003004:	ba 88       	st.b	sp[0x0],r8
80003006:	e0 68 2d 00 	mov	r8,11520
8000300a:	ea 18 01 31 	orh	r8,0x131
  spiOptions.bits         = 16;
8000300e:	50 18       	stdsp	sp[0x4],r8
80003010:	31 08       	mov	r8,16
  spiOptions.spi_mode     = 2;
80003012:	fb 68 00 08 	st.b	sp[8],r8
80003016:	30 28       	mov	r8,2
  spiOptions.spck_delay   = 0;
  spiOptions.trans_delay  = 5;
80003018:	fb 68 00 0c 	st.b	sp[12],r8
  spiOptions.stay_act     = 0;
  spiOptions.modfdis      = 0;

  spi_setupChipReg( SPI, &spiOptions, FPBA_HZ );
8000301c:	30 58       	mov	r8,5
  spiOptions.reg          = ADC_SPI;
  spiOptions.baudrate     = 20000000;
  spiOptions.bits         = 16;
  spiOptions.spi_mode     = 2;
  spiOptions.spck_delay   = 0;
  spiOptions.trans_delay  = 5;
8000301e:	0c 9a       	mov	r10,r6
80003020:	1a 9b       	mov	r11,sp
  spiOptions.stay_act     = 0;
  spiOptions.modfdis      = 0;

  spi_setupChipReg( SPI, &spiOptions, FPBA_HZ );
80003022:	fb 68 00 0a 	st.b	sp[10],r8
80003026:	fe 7c 24 00 	mov	r12,-56320

  // spi_enable(SPI);
 }
8000302a:	e0 a0 0b cb 	rcall	800047c0 <spi_setupChipReg>
8000302e:	2f cd       	sub	sp,-16
80003030:	d8 22       	popm	r4-r7,pc
80003032:	d7 03       	nop

80003034 <init_tc>:
80003034:	d4 01       	pushm	lr
80003036:	fe cb b9 52 	sub	r11,pc,-18094
8000303a:	fe 7c 38 00 	mov	r12,-51200
8000303e:	e0 a0 0c 33 	rcall	800048a4 <tc_init_waveform>
80003042:	e0 6a 01 d4 	mov	r10,468
80003046:	30 0b       	mov	r11,0
80003048:	fe 7c 38 00 	mov	r12,-51200
8000304c:	e0 a0 0c 8e 	rcall	80004968 <tc_write_rc>
  // so RC = fPBA / 128 / 1000
  //  tc_write_rc(tc, APP_TC_CHANNEL, (FPBA_HZ / 128000));
  tc_write_rc(tc, APP_TC_CHANNEL, (FPBA_HZ / 128000));

  // configure the timer interrupt
  tc_configure_interrupts(tc, APP_TC_CHANNEL, &tc_interrupt);
80003050:	30 0b       	mov	r11,0
80003052:	fe ca b9 72 	sub	r10,pc,-18062
80003056:	fe 7c 38 00 	mov	r12,-51200
  // Start the timer/counter.
  tc_start(tc, APP_TC_CHANNEL);
8000305a:	e0 a0 0c a1 	rcall	8000499c <tc_configure_interrupts>
8000305e:	30 0b       	mov	r11,0
80003060:	fe 7c 38 00 	mov	r12,-51200
}
80003064:	e0 a0 0c 70 	rcall	80004944 <tc_start>
80003068:	d8 02       	popm	pc
8000306a:	d7 03       	nop

8000306c <init_gpio>:
8000306c:	d4 01       	pushm	lr
8000306e:	32 0c       	mov	r12,32
80003070:	e0 a0 0a 4e 	rcall	8000450c <gpio_enable_gpio_pin>
80003074:	32 1c       	mov	r12,33
80003076:	e0 a0 0a 4b 	rcall	8000450c <gpio_enable_gpio_pin>
8000307a:	32 2c       	mov	r12,34
8000307c:	e0 a0 0a 48 	rcall	8000450c <gpio_enable_gpio_pin>

extern void init_gpio(void) {
    gpio_enable_gpio_pin(B00);
    gpio_enable_gpio_pin(B01);
    gpio_enable_gpio_pin(B02);
    gpio_enable_gpio_pin(B03);
80003080:	32 3c       	mov	r12,35
80003082:	e0 a0 0a 45 	rcall	8000450c <gpio_enable_gpio_pin>
    gpio_enable_gpio_pin(B04);
80003086:	32 4c       	mov	r12,36
80003088:	e0 a0 0a 42 	rcall	8000450c <gpio_enable_gpio_pin>
    gpio_enable_gpio_pin(B05);
8000308c:	32 5c       	mov	r12,37
8000308e:	e0 a0 0a 3f 	rcall	8000450c <gpio_enable_gpio_pin>
    gpio_enable_gpio_pin(B06);
80003092:	32 6c       	mov	r12,38
80003094:	e0 a0 0a 3c 	rcall	8000450c <gpio_enable_gpio_pin>
    gpio_enable_gpio_pin(B07);
80003098:	32 7c       	mov	r12,39
8000309a:	e0 a0 0a 39 	rcall	8000450c <gpio_enable_gpio_pin>
    gpio_enable_gpio_pin(B08);
8000309e:	32 8c       	mov	r12,40
800030a0:	e0 a0 0a 36 	rcall	8000450c <gpio_enable_gpio_pin>
    gpio_enable_gpio_pin(B09);
800030a4:	32 9c       	mov	r12,41
800030a6:	e0 a0 0a 33 	rcall	8000450c <gpio_enable_gpio_pin>
    gpio_enable_gpio_pin(B10);
800030aa:	32 ac       	mov	r12,42
800030ac:	e0 a0 0a 30 	rcall	8000450c <gpio_enable_gpio_pin>
    gpio_enable_gpio_pin(NMI);
800030b0:	30 dc       	mov	r12,13
800030b2:	e0 a0 0a 2d 	rcall	8000450c <gpio_enable_gpio_pin>
}
800030b6:	d8 02       	popm	pc

800030b8 <clock_null>:
#include "timers.h"
#include "types.h"

//#define UI_IRQ_PRIORITY AVR32_INTC_INT2

void clock_null(u8 phase) {;;}
800030b8:	5e fc       	retal	r12
800030ba:	d7 03       	nop

800030bc <register_interrupts>:

//-----------------------------
//---- external function definitions

// register interrupts
void register_interrupts(void) {
800030bc:	d4 01       	pushm	lr
  // enable interrupts on GPIO inputs
  gpio_enable_pin_interrupt( NMI, GPIO_PIN_CHANGE);
800030be:	30 0b       	mov	r11,0
800030c0:	30 dc       	mov	r12,13
800030c2:	e0 a0 0a 55 	rcall	8000456c <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( B08, GPIO_PIN_CHANGE);
800030c6:	30 0b       	mov	r11,0
800030c8:	32 8c       	mov	r12,40
800030ca:	e0 a0 0a 51 	rcall	8000456c <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( B09,	GPIO_PIN_CHANGE);
800030ce:	30 0b       	mov	r11,0
800030d0:	32 9c       	mov	r12,41
800030d2:	e0 a0 0a 4d 	rcall	8000456c <gpio_enable_pin_interrupt>


  // PA08 - PA15
  INTC_register_interrupt( &irq_port0_line1, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PA08 / 8), UI_IRQ_PRIORITY);
800030d6:	30 2a       	mov	r10,2
800030d8:	34 1b       	mov	r11,65
800030da:	fe cc ff 2a 	sub	r12,pc,-214
800030de:	e0 a0 0a 7f 	rcall	800045dc <INTC_register_interrupt>

  // PB08 - PB15
  INTC_register_interrupt( &irq_port1_line1, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PB08 / 8), UI_IRQ_PRIORITY);
800030e2:	30 2a       	mov	r10,2
800030e4:	34 5b       	mov	r11,69
800030e6:	fe cc ff 8a 	sub	r12,pc,-118

  // register TC interrupt
  INTC_register_interrupt(&irq_tc, APP_TC_IRQ, UI_IRQ_PRIORITY);
800030ea:	e0 a0 0a 79 	rcall	800045dc <INTC_register_interrupt>
800030ee:	30 2a       	mov	r10,2
800030f0:	e0 6b 01 c0 	mov	r11,448
800030f4:	fe cc ff f4 	sub	r12,pc,-12

  // register uart interrupt
  // INTC_register_interrupt(&irq_usart, AVR32_USART0_IRQ, UI_IRQ_PRIORITY);
}
800030f8:	e0 a0 0a 72 	rcall	800045dc <INTC_register_interrupt>
800030fc:	d8 02       	popm	pc
800030fe:	d7 03       	nop

80003100 <irq_tc>:
80003100:	eb cd 40 c0 	pushm	r6-r7,lr
80003104:	e0 68 07 38 	mov	r8,1848
80003108:	30 1a       	mov	r10,1
8000310a:	f0 e6 00 00 	ld.d	r6,r8[0]


// timer irq
__attribute__((__interrupt__))
static void irq_tc(void) {
  tcTicks++;
8000310e:	30 0b       	mov	r11,0
80003110:	ec 0a 00 0a 	add	r10,r6,r10
80003114:	ee 0b 00 4b 	adc	r11,r7,r11
80003118:	f0 eb 00 00 	st.d	r8[0],r10
  // overflow control
  if(tcTicks > tcMax) { 
8000311c:	e0 69 07 34 	mov	r9,1844
80003120:	f0 ea 00 00 	ld.d	r10,r8[0]
80003124:	e0 66 ff ff 	mov	r6,65535
80003128:	ea 16 7f ff 	orh	r6,0x7fff
8000312c:	30 07       	mov	r7,0
8000312e:	0c 3a       	cp.w	r10,r6
80003130:	ee 0b 13 00 	cpc	r11,r7
    tcTicks = 0;
80003134:	e0 88 00 08 	brls	80003144 <irq_tc+0x44>
80003138:	30 0a       	mov	r10,0
8000313a:	30 0b       	mov	r11,0
    tcOverflow = 1;
8000313c:	f0 eb 00 00 	st.d	r8[0],r10
  } else {
    tcOverflow = 0;
80003140:	30 18       	mov	r8,1
80003142:	c0 28       	rjmp	80003146 <irq_tc+0x46>
  }
  process_timers();
80003144:	30 08       	mov	r8,0
80003146:	b2 88       	st.b	r9[0x0],r8
  // clear interrupt flag by reading timer SR
  tc_read_sr(APP_TC, APP_TC_CHANNEL);
80003148:	e0 a0 04 fa 	rcall	80003b3c <process_timers>
8000314c:	30 0b       	mov	r11,0
8000314e:	fe 7c 38 00 	mov	r12,-51200
}
80003152:	e0 a0 0c 02 	rcall	80004956 <tc_read_sr>
80003156:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
8000315a:	d6 03       	rete

8000315c <irq_port1_line1>:
8000315c:	eb cd 40 80 	pushm	r7,lr
80003160:	32 9c       	mov	r12,41
80003162:	e0 a0 0a 26 	rcall	800045ae <gpio_get_pin_interrupt_flag>
80003166:	c0 c0       	breq	8000317e <irq_port1_line1+0x22>
    // e.data = gpio_get_pin_value(kSwitchPins[swIdx]); 
    // event_post(&e);

    // clock norm
    if(gpio_get_pin_interrupt_flag(B09)) {
      clock_external = !gpio_get_pin_value(B09); 
80003168:	32 9c       	mov	r12,41
8000316a:	e0 a0 09 dc 	rcall	80004522 <gpio_get_pin_value>
8000316e:	e0 68 0b 64 	mov	r8,2916
80003172:	ec 1c 00 01 	eorl	r12,0x1

      gpio_clear_pin_interrupt_flag(B09);
80003176:	b0 8c       	st.b	r8[0x0],r12
80003178:	32 9c       	mov	r12,41
8000317a:	e0 a0 0a 26 	rcall	800045c6 <gpio_clear_pin_interrupt_flag>
    }

    // clock in
    if(gpio_get_pin_interrupt_flag(B08)) {
8000317e:	32 8c       	mov	r12,40
80003180:	e0 a0 0a 17 	rcall	800045ae <gpio_get_pin_interrupt_flag>
      // CLOCK BOUNCY WITHOUT THESE PRINTS
      print_dbg("\rclk: ");
80003184:	c1 30       	breq	800031aa <irq_port1_line1+0x4e>
80003186:	fe cc ba 62 	sub	r12,pc,-17822
      print_dbg_ulong(gpio_get_pin_value(B08));
8000318a:	e0 a0 16 71 	rcall	80005e6c <print_dbg>
8000318e:	32 8c       	mov	r12,40
80003190:	e0 a0 09 c9 	rcall	80004522 <gpio_get_pin_value>
      (*clock_pulse)(gpio_get_pin_value(B08));
80003194:	e0 a0 16 66 	rcall	80005e60 <print_dbg_ulong>
80003198:	31 c8       	mov	r8,28
8000319a:	32 8c       	mov	r12,40
8000319c:	70 07       	ld.w	r7,r8[0x0]
8000319e:	e0 a0 09 c2 	rcall	80004522 <gpio_get_pin_value>
      gpio_clear_pin_interrupt_flag(B08);
800031a2:	5d 17       	icall	r7
800031a4:	32 8c       	mov	r12,40
    }
}
800031a6:	e0 a0 0a 10 	rcall	800045c6 <gpio_clear_pin_interrupt_flag>
800031aa:	e3 cd 40 80 	ldm	sp++,r7,lr
800031ae:	d6 03       	rete

800031b0 <irq_port0_line1>:
800031b0:	eb cd 40 80 	pushm	r7,lr
800031b4:	30 dc       	mov	r12,13
800031b6:	e0 a0 09 fc 	rcall	800045ae <gpio_get_pin_interrupt_flag>
800031ba:	c0 e0       	breq	800031d6 <irq_port0_line1+0x26>
800031bc:	30 dc       	mov	r12,13
800031be:	e0 a0 0a 04 	rcall	800045c6 <gpio_clear_pin_interrupt_flag>
800031c2:	30 18       	mov	r8,1
800031c4:	e0 67 07 2c 	mov	r7,1836
800031c8:	30 dc       	mov	r12,13
800031ca:	8f 08       	st.w	r7[0x0],r8
    if(gpio_get_pin_interrupt_flag(NMI)) {
      gpio_clear_pin_interrupt_flag(NMI);
      // print_dbg("\r\n ### NMI ### ");
      static event_t e;
      e.type = kEventFront;
      e.data = gpio_get_pin_value(NMI);
800031cc:	e0 a0 09 ab 	rcall	80004522 <gpio_get_pin_value>
      event_post(&e);
800031d0:	8f 1c       	st.w	r7[0x4],r12
800031d2:	0e 9c       	mov	r12,r7
800031d4:	c8 ee       	rcall	80002ef0 <event_post>
    }
}
800031d6:	e3 cd 40 80 	ldm	sp++,r7,lr
800031da:	d6 03       	rete

800031dc <read_serial_dummy>:
  u8 vari; // is variable brightness, true/false
} monomeDesc;


//// dummy functions
static void read_serial_dummy(void) { return; }
800031dc:	5e fc       	retal	r12
800031de:	d7 03       	nop

800031e0 <init_monome>:

//================================================
//----- extern function definitions

// init
void init_monome(void) {
800031e0:	e0 68 0b 74 	mov	r8,2932
800031e4:	30 0a       	mov	r10,0
800031e6:	f0 c9 ff 00 	sub	r9,r8,-256
  u32 i;
  for(i=0; i<MONOME_MAX_LED_BYTES; i++) {
800031ea:	10 ca       	st.b	r8++,r10
800031ec:	12 38       	cp.w	r8,r9
    monomeLedBuffer[i] = 0;
  }
  //  print_dbg("\r\n finished monome class init");
}
800031ee:	cf e1       	brne	800031ea <init_monome+0xa>
800031f0:	5e fc       	retal	r12
800031f2:	d7 03       	nop

800031f4 <monome_grid_key_parse_event_data>:

  ev.type = kEventMonomeGridKey;
  event_post(&ev);
}

void monome_grid_key_parse_event_data(u32 data, u8* x, u8* y, u8* val) {
800031f4:	20 1d       	sub	sp,4
  u8* bdata = (u8*)(&data);
  *x = bdata[0];
800031f6:	f8 08 16 18 	lsr	r8,r12,0x18
800031fa:	b6 88       	st.b	r11[0x0],r8
  *y = bdata[1];
800031fc:	f1 dc c2 08 	bfextu	r8,r12,0x10,0x8
80003200:	b4 88       	st.b	r10[0x0],r8
  *val = bdata[2];
80003202:	f9 dc c1 08 	bfextu	r12,r12,0x8,0x8
80003206:	b2 8c       	st.b	r9[0x0],r12
}
80003208:	2f fd       	sub	sp,-4
8000320a:	5e fc       	retal	r12

8000320c <monome_set_quadrant_flag>:
  /* print_dbg_hex(monomeFrameDirty); */
}

// set given quadrant dirty flag
extern void monome_set_quadrant_flag(u8 q) {
  monomeFrameDirty |= (1 << q);
8000320c:	e0 68 07 45 	mov	r8,1861
80003210:	30 19       	mov	r9,1
80003212:	11 8a       	ld.ub	r10,r8[0x0]
80003214:	f2 0c 09 49 	lsl	r9,r9,r12
80003218:	14 49       	or	r9,r10
}
8000321a:	b0 89       	st.b	r8[0x0],r9
8000321c:	5e fc       	retal	r12
8000321e:	d7 03       	nop

80003220 <monome_size_x>:
  monomeLedBuffer[monome_xy_idx(x,y)] ^= 0xff;
  monome_calc_quadrant_flag(x, y);  
}


u8 monome_size_x(void) { return mdesc.cols; }
80003220:	32 08       	mov	r8,32
80003222:	f1 3c 00 08 	ld.ub	r12,r8[8]
80003226:	5e fc       	retal	r12

80003228 <monome_is_vari>:
80003228:	32 08       	mov	r8,32
8000322a:	f1 3c 00 0c 	ld.ub	r12,r8[12]
u8 monome_size_y(void) {  return mdesc.rows; }
u8 monome_is_vari(void) {  return mdesc.vari; }
8000322e:	5e fc       	retal	r12

80003230 <set_intense_mext>:
80003230:	5e fc       	retal	r12
80003232:	d7 03       	nop

80003234 <monome_grid_refresh>:
  }
  return 0;
}

// check dirty flags and refresh leds
void monome_grid_refresh(void) {
80003234:	d4 01       	pushm	lr
  // may need to wait after each quad until tx transfer is complete
  u8 busy = ftdi_tx_busy();
80003236:	e0 a0 05 61 	rcall	80003cf8 <ftdi_tx_busy>

  // check quad 0
  if( monomeFrameDirty & 0b0001 ) {
8000323a:	e0 68 07 45 	mov	r8,1861
8000323e:	11 88       	ld.ub	r8,r8[0x0]
80003240:	ed b8 00 00 	bld	r8,0x0
80003244:	c0 40       	breq	8000324c <monome_grid_refresh+0x18>
    while( busy ) { busy = ftdi_tx_busy(); }
80003246:	c1 38       	rjmp	8000326c <monome_grid_refresh+0x38>
80003248:	e0 a0 05 58 	rcall	80003cf8 <ftdi_tx_busy>
8000324c:	58 0c       	cp.w	r12,0
    (*monome_grid_map)(0, 0, monomeLedBuffer);
8000324e:	cf d1       	brne	80003248 <monome_grid_refresh+0x14>
80003250:	18 9b       	mov	r11,r12
80003252:	e0 68 0b 6c 	mov	r8,2924
80003256:	e0 6a 0b 74 	mov	r10,2932
    monomeFrameDirty &= 0b1110;
8000325a:	70 08       	ld.w	r8,r8[0x0]
8000325c:	5d 18       	icall	r8
8000325e:	e0 69 07 45 	mov	r9,1861
80003262:	30 1c       	mov	r12,1
    busy = 1;
  }
  // check quad 1
  if( monomeFrameDirty & 0b0010 ) {
80003264:	13 88       	ld.ub	r8,r9[0x0]
80003266:	e2 18 00 0e 	andl	r8,0xe,COH
8000326a:	b2 88       	st.b	r9[0x0],r8
8000326c:	e0 68 07 45 	mov	r8,1861
    if ( mdesc.cols > 7 ) {
80003270:	11 88       	ld.ub	r8,r8[0x0]
80003272:	ed b8 00 01 	bld	r8,0x1
80003276:	c1 e1       	brne	800032b2 <monome_grid_refresh+0x7e>
80003278:	32 08       	mov	r8,32
8000327a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000327e:	30 78       	mov	r8,7
      while( busy ) { busy = ftdi_tx_busy(); }
80003280:	f0 09 18 00 	cp.b	r9,r8
80003284:	e0 8b 00 05 	brhi	8000328e <monome_grid_refresh+0x5a>
      (*monome_grid_map)(8, 0, monomeLedBuffer + 8);
80003288:	c1 58       	rjmp	800032b2 <monome_grid_refresh+0x7e>
8000328a:	e0 a0 05 37 	rcall	80003cf8 <ftdi_tx_busy>
8000328e:	58 0c       	cp.w	r12,0
80003290:	cf d1       	brne	8000328a <monome_grid_refresh+0x56>
80003292:	18 9b       	mov	r11,r12
80003294:	e0 68 0b 6c 	mov	r8,2924
      monomeFrameDirty &= 0b1101;
80003298:	30 8c       	mov	r12,8
8000329a:	70 08       	ld.w	r8,r8[0x0]
8000329c:	e0 6a 0b 74 	mov	r10,2932
800032a0:	2f 8a       	sub	r10,-8
      busy = 1;
    }
  }
  // check quad 2
  if( monomeFrameDirty &  0b0100 ) { 
800032a2:	5d 18       	icall	r8
800032a4:	e0 69 07 45 	mov	r9,1861
800032a8:	30 1c       	mov	r12,1
800032aa:	13 88       	ld.ub	r8,r9[0x0]
    if( mdesc.rows > 7 ) {
800032ac:	e2 18 00 0d 	andl	r8,0xd,COH
800032b0:	b2 88       	st.b	r9[0x0],r8
800032b2:	e0 68 07 45 	mov	r8,1861
800032b6:	11 88       	ld.ub	r8,r8[0x0]
800032b8:	ed b8 00 02 	bld	r8,0x2
800032bc:	c1 d1       	brne	800032f6 <monome_grid_refresh+0xc2>
      while( busy ) { busy = ftdi_tx_busy(); }
800032be:	32 08       	mov	r8,32
800032c0:	f1 39 00 09 	ld.ub	r9,r8[9]
800032c4:	30 78       	mov	r8,7
      (*monome_grid_map)(0, 8, monomeLedBuffer + 128);
800032c6:	f0 09 18 00 	cp.b	r9,r8
800032ca:	e0 8b 00 05 	brhi	800032d4 <monome_grid_refresh+0xa0>
800032ce:	c1 48       	rjmp	800032f6 <monome_grid_refresh+0xc2>
800032d0:	e0 a0 05 14 	rcall	80003cf8 <ftdi_tx_busy>
      monomeFrameDirty &= 0b1011;
800032d4:	58 0c       	cp.w	r12,0
800032d6:	cf d1       	brne	800032d0 <monome_grid_refresh+0x9c>
800032d8:	e0 68 0b 6c 	mov	r8,2924
800032dc:	e0 6a 0b 74 	mov	r10,2932
      busy = 1;
    }
  }
  // check quad 3
  if( monomeFrameDirty & 0b1000 ) {
800032e0:	70 08       	ld.w	r8,r8[0x0]
800032e2:	28 0a       	sub	r10,-128
800032e4:	30 8b       	mov	r11,8
800032e6:	5d 18       	icall	r8
    if( (mdesc.rows > 7) && (mdesc.cols > 7) )  {
800032e8:	e0 69 07 45 	mov	r9,1861
800032ec:	30 1c       	mov	r12,1
800032ee:	13 88       	ld.ub	r8,r9[0x0]
800032f0:	e2 18 00 0b 	andl	r8,0xb,COH
800032f4:	b2 88       	st.b	r9[0x0],r8
800032f6:	e0 68 07 45 	mov	r8,1861
800032fa:	11 88       	ld.ub	r8,r8[0x0]
800032fc:	ed b8 00 03 	bld	r8,0x3
80003300:	c2 81       	brne	80003350 <monome_grid_refresh+0x11c>
80003302:	32 09       	mov	r9,32
80003304:	30 78       	mov	r8,7
      while( busy ) { busy = ftdi_tx_busy(); }
80003306:	f3 3a 00 09 	ld.ub	r10,r9[9]
8000330a:	f0 0a 18 00 	cp.b	r10,r8
      (*monome_grid_map)(8, 8, monomeLedBuffer + 136);
8000330e:	e0 88 00 21 	brls	80003350 <monome_grid_refresh+0x11c>
80003312:	f3 39 00 08 	ld.ub	r9,r9[8]
80003316:	f0 09 18 00 	cp.b	r9,r8
8000331a:	e0 8b 00 05 	brhi	80003324 <monome_grid_refresh+0xf0>
      monomeFrameDirty &= 0b0111;
8000331e:	c1 98       	rjmp	80003350 <monome_grid_refresh+0x11c>
80003320:	e0 a0 04 ec 	rcall	80003cf8 <ftdi_tx_busy>
80003324:	58 0c       	cp.w	r12,0
80003326:	cf d1       	brne	80003320 <monome_grid_refresh+0xec>
80003328:	30 8b       	mov	r11,8
8000332a:	e0 68 0b 6c 	mov	r8,2924
      busy = 1;
    }
  }
  while( busy ) { busy = ftdi_tx_busy(); }
8000332e:	16 9c       	mov	r12,r11
80003330:	70 08       	ld.w	r8,r8[0x0]
80003332:	e0 6a 0b 74 	mov	r10,2932
}
80003336:	f4 ca ff 78 	sub	r10,r10,-136
8000333a:	5d 18       	icall	r8
8000333c:	e0 68 07 45 	mov	r8,1861
80003340:	30 1c       	mov	r12,1
80003342:	11 89       	ld.ub	r9,r8[0x0]
80003344:	f3 d9 c0 03 	bfextu	r9,r9,0x0,0x3
80003348:	b0 89       	st.b	r8[0x0],r9
8000334a:	c0 38       	rjmp	80003350 <monome_grid_refresh+0x11c>
8000334c:	e0 a0 04 d6 	rcall	80003cf8 <ftdi_tx_busy>
80003350:	58 0c       	cp.w	r12,0
80003352:	cf d1       	brne	8000334c <monome_grid_refresh+0x118>
80003354:	d8 02       	popm	pc
80003356:	d7 03       	nop

80003358 <monome_arc_refresh>:


// check flags and refresh arc
void monome_arc_refresh(void) {
80003358:	d4 31       	pushm	r0-r7,lr
  // may need to wait after each quad until tx transfer is complete
  u8 busy = ftdi_tx_busy();
8000335a:	30 07       	mov	r7,0
  u8 i;

  for(i=0;i<mdesc.encs;i++) {
8000335c:	32 01       	mov	r1,32


// check flags and refresh arc
void monome_arc_refresh(void) {
  // may need to wait after each quad until tx transfer is complete
  u8 busy = ftdi_tx_busy();
8000335e:	e0 a0 04 cd 	rcall	80003cf8 <ftdi_tx_busy>
  u8 i;

  for(i=0;i<mdesc.encs;i++) {
    if(monomeFrameDirty & (1<<i)) {
80003362:	e0 66 07 45 	mov	r6,1861
      if(i==1) print_dbg("\r\nsecond");
      while(busy) { busy = ftdi_tx_busy(); }
      (*monome_ring_map)(i, monomeLedBuffer + (i<<6));
80003366:	30 12       	mov	r2,1
80003368:	e0 63 0b 70 	mov	r3,2928


// check flags and refresh arc
void monome_arc_refresh(void) {
  // may need to wait after each quad until tx transfer is complete
  u8 busy = ftdi_tx_busy();
8000336c:	e0 64 0b 74 	mov	r4,2932
  u8 i;

  for(i=0;i<mdesc.encs;i++) {
    if(monomeFrameDirty & (1<<i)) {
80003370:	30 15       	mov	r5,1
80003372:	18 90       	mov	r0,r12
80003374:	c2 48       	rjmp	800033bc <monome_arc_refresh+0x64>
80003376:	0d 88       	ld.ub	r8,r6[0x0]
80003378:	f0 07 08 48 	asr	r8,r8,r7
      if(i==1) print_dbg("\r\nsecond");
8000337c:	ed b8 00 00 	bld	r8,0x0
80003380:	c1 c1       	brne	800033b8 <monome_arc_refresh+0x60>
80003382:	e4 07 18 00 	cp.b	r7,r2
80003386:	c0 91       	brne	80003398 <monome_arc_refresh+0x40>
80003388:	fe cc bc 38 	sub	r12,pc,-17352
      while(busy) { busy = ftdi_tx_busy(); }
8000338c:	e0 a0 15 70 	rcall	80005e6c <print_dbg>
80003390:	c0 48       	rjmp	80003398 <monome_arc_refresh+0x40>
80003392:	e0 a0 04 b3 	rcall	80003cf8 <ftdi_tx_busy>
      (*monome_ring_map)(i, monomeLedBuffer + (i<<6));
80003396:	18 90       	mov	r0,r12
80003398:	58 00       	cp.w	r0,0
8000339a:	cf c1       	brne	80003392 <monome_arc_refresh+0x3a>
8000339c:	66 08       	ld.w	r8,r3[0x0]
8000339e:	ee 0b 15 06 	lsl	r11,r7,0x6
      monomeFrameDirty &= ~(1<<i);
800033a2:	0e 9c       	mov	r12,r7
800033a4:	e8 0b 00 0b 	add	r11,r4,r11
800033a8:	5d 18       	icall	r8
800033aa:	0d 89       	ld.ub	r9,r6[0x0]
800033ac:	ea 07 09 48 	lsl	r8,r5,r7
void monome_arc_refresh(void) {
  // may need to wait after each quad until tx transfer is complete
  u8 busy = ftdi_tx_busy();
  u8 i;

  for(i=0;i<mdesc.encs;i++) {
800033b0:	30 10       	mov	r0,1
800033b2:	5c d8       	com	r8
800033b4:	12 68       	and	r8,r9
800033b6:	ac 88       	st.b	r6[0x0],r8
800033b8:	2f f7       	sub	r7,-1
800033ba:	5c 57       	castu.b	r7
800033bc:	e3 38 00 0a 	ld.ub	r8,r1[10]
800033c0:	ee 08 18 00 	cp.b	r8,r7
      monomeFrameDirty &= ~(1<<i);
      busy = 1;
    }
  }

  while( busy ) { busy = ftdi_tx_busy(); }
800033c4:	fe 9b ff d9 	brhi	80003376 <monome_arc_refresh+0x1e>
800033c8:	c0 48       	rjmp	800033d0 <monome_arc_refresh+0x78>
800033ca:	e0 a0 04 97 	rcall	80003cf8 <ftdi_tx_busy>
}
800033ce:	18 90       	mov	r0,r12
800033d0:	58 00       	cp.w	r0,0
800033d2:	cf c1       	brne	800033ca <monome_arc_refresh+0x72>
800033d4:	d8 32       	popm	r0-r7,pc
800033d6:	d7 03       	nop

800033d8 <set_intense_series>:
800033d8:	d4 01       	pushm	lr
800033da:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
800033de:	ea 18 ff ff 	orh	r8,0xffff
800033e2:	e8 18 ff a0 	orl	r8,0xffa0
800033e6:	e0 6c 07 58 	mov	r12,1880
800033ea:	30 1b       	mov	r11,1
			b (brightness) = 0-15 (4 bits)
encode:		byte 0 = ((id) << 4) | b = 160 + b
*/
  txBuf[0] = 0xa0;
  txBuf[0] |= (v & 0x0f);
  ftdi_write(txBuf, 1);
800033ec:	b8 88       	st.b	r12[0x0],r8
800033ee:	e0 a0 04 c1 	rcall	80003d70 <ftdi_write>
}
800033f2:	d8 02       	popm	pc

800033f4 <ring_map_mext>:
800033f4:	d4 01       	pushm	lr
800033f6:	e0 68 07 58 	mov	r8,1880
800033fa:	39 2a       	mov	r10,-110
  //  static u8 tx[11] = { 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  static u8* ptx;
  static u8 i;

  txBuf[0] = 0x92;
  txBuf[1] = n;
800033fc:	b0 9c       	st.b	r8[0x1],r12
800033fe:	f0 c9 ff fe 	sub	r9,r8,-2
  
  ptx = txBuf + 2;
  
  // smash 64 LEDs together, nibbles
  for(i=0; i<32; i++) {
80003402:	b0 8a       	st.b	r8[0x0],r10
  //  static u8 tx[11] = { 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  static u8* ptx;
  static u8 i;

  txBuf[0] = 0x92;
  txBuf[1] = n;
80003404:	31 fc       	mov	r12,31
  
  ptx = txBuf + 2;
  
  // smash 64 LEDs together, nibbles
  for(i=0; i<32; i++) {
80003406:	30 08       	mov	r8,0
    *ptx = *data << 4;
80003408:	c0 b8       	rjmp	8000341e <ring_map_mext+0x2a>
8000340a:	17 8a       	ld.ub	r10,r11[0x0]
8000340c:	a5 6a       	lsl	r10,0x4
8000340e:	5c 5a       	castu.b	r10

/* static void grid_map_level_mext(u8 x, u8 y, const u8* data) { */
/*   // TODO */
/* } */

static void ring_map_mext(u8 n, u8* data) {
80003410:	b2 8a       	st.b	r9[0x0],r10
  
  // smash 64 LEDs together, nibbles
  for(i=0; i<32; i++) {
    *ptx = *data << 4;
    data++;
    *ptx |= *data;
80003412:	2f f8       	sub	r8,-1

/* static void grid_map_level_mext(u8 x, u8 y, const u8* data) { */
/*   // TODO */
/* } */

static void ring_map_mext(u8 n, u8* data) {
80003414:	17 9e       	ld.ub	lr,r11[0x1]
  
  // smash 64 LEDs together, nibbles
  for(i=0; i<32; i++) {
    *ptx = *data << 4;
    data++;
    *ptx |= *data;
80003416:	5c 58       	castu.b	r8

/* static void grid_map_level_mext(u8 x, u8 y, const u8* data) { */
/*   // TODO */
/* } */

static void ring_map_mext(u8 n, u8* data) {
80003418:	1c 4a       	or	r10,lr
  
  // smash 64 LEDs together, nibbles
  for(i=0; i<32; i++) {
    *ptx = *data << 4;
    data++;
    *ptx |= *data;
8000341a:	2f eb       	sub	r11,-2
  txBuf[1] = n;
  
  ptx = txBuf + 2;
  
  // smash 64 LEDs together, nibbles
  for(i=0; i<32; i++) {
8000341c:	12 ca       	st.b	r9++,r10
8000341e:	f8 08 18 00 	cp.b	r8,r12
80003422:	fe 98 ff f4 	brls	8000340a <ring_map_mext+0x16>
80003426:	e0 6a 07 50 	mov	r10,1872
    *ptx |= *data;
    data++;
    ptx++;
  }

  ftdi_write(txBuf, 32 + 2);
8000342a:	95 09       	st.w	r10[0x0],r9
  txBuf[1] = n;
  
  ptx = txBuf + 2;
  
  // smash 64 LEDs together, nibbles
  for(i=0; i<32; i++) {
8000342c:	e0 69 07 a0 	mov	r9,1952
    *ptx |= *data;
    data++;
    ptx++;
  }

  ftdi_write(txBuf, 32 + 2);
80003430:	32 2b       	mov	r11,34
80003432:	b2 88       	st.b	r9[0x0],r8
}
80003434:	e0 6c 07 58 	mov	r12,1880
80003438:	e0 a0 04 9c 	rcall	80003d70 <ftdi_write>
8000343c:	d8 02       	popm	pc
8000343e:	d7 03       	nop

80003440 <grid_map_mext>:
80003440:	d4 21       	pushm	r4-r7,lr
80003442:	e0 68 07 58 	mov	r8,1880
80003446:	b0 9c       	st.b	r8[0x1],r12
static void grid_map_mext( u8 x, u8 y, const u8* data ) {
  //  static u8 tx[11] = { 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  static u8* ptx;
  static u8 i, j;

  txBuf[0] = 0x1A;  
80003448:	b0 ab       	st.b	r8[0x2],r11
  txBuf[1] = x;
  txBuf[2] = y;
  
  ptx = txBuf + 3;
8000344a:	31 ac       	mov	r12,26
8000344c:	f0 cb ff fd 	sub	r11,r8,-3
80003450:	b0 8c       	st.b	r8[0x0],r12
80003452:	e0 68 07 ac 	mov	r8,1964
80003456:	91 0b       	st.w	r8[0x0],r11
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
80003458:	e0 68 07 56 	mov	r8,1878

  txBuf[0] = 0x1A;  
  txBuf[1] = x;
  txBuf[2] = y;
  
  ptx = txBuf + 3;
8000345c:	16 99       	mov	r9,r11
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
8000345e:	30 76       	mov	r6,7
80003460:	11 8b       	ld.ub	r11,r8[0x0]
80003462:	30 08       	mov	r8,0
80003464:	c1 38       	rjmp	8000348a <grid_map_mext+0x4a>
    // *ptx = 0;
    for(j=0; j<4; j++) {
      // binary value of data byte to bitfield of tx byte
      // *ptx |= ((*data > 0) << j);
      *ptx = (*data) << 4;
80003466:	12 9e       	mov	lr,r9
80003468:	14 9c       	mov	r12,r10
8000346a:	30 0b       	mov	r11,0
8000346c:	19 87       	ld.ub	r7,r12[0x0]
      data++;
      *ptx |= *data;
8000346e:	a5 67       	lsl	r7,0x4
80003470:	5c 57       	castu.b	r7
80003472:	bc 87       	st.b	lr[0x0],r7
// this will hopefully help optimize operator routines,
// which cannot be called less often than refresh/tx, and are therefore prioritized.
////////////////////////////////////////////////
// HACKED to always do var-bright update
////////////////////////////////////////////////
static void grid_map_mext( u8 x, u8 y, const u8* data ) {
80003474:	19 95       	ld.ub	r5,r12[0x1]
80003476:	0a 47       	or	r7,r5
  ptx = txBuf + 3;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    // *ptx = 0;
    for(j=0; j<4; j++) {
80003478:	1c c7       	st.b	lr++,r7
8000347a:	2f ec       	sub	r12,-2
// this will hopefully help optimize operator routines,
// which cannot be called less often than refresh/tx, and are therefore prioritized.
////////////////////////////////////////////////
// HACKED to always do var-bright update
////////////////////////////////////////////////
static void grid_map_mext( u8 x, u8 y, const u8* data ) {
8000347c:	2f fb       	sub	r11,-1
8000347e:	58 4b       	cp.w	r11,4
80003480:	cf 61       	brne	8000346c <grid_map_mext+0x2c>
80003482:	2f f8       	sub	r8,-1
  txBuf[2] = y;
  
  ptx = txBuf + 3;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
80003484:	2f 0a       	sub	r10,-16
80003486:	5c 58       	castu.b	r8
80003488:	2f c9       	sub	r9,-4
8000348a:	ec 08 18 00 	cp.b	r8,r6
8000348e:	fe 98 ff ec 	brls	80003466 <grid_map_mext+0x26>
80003492:	e0 6a 07 56 	mov	r10,1878
      ptx++;
    }
    data += MONOME_QUAD_LEDS; // skip the rest of the row to get back in target quad
    // ptx++;
  }
  ftdi_write(txBuf, 32 + 3);
80003496:	b4 8b       	st.b	r10[0x0],r11
  txBuf[2] = y;
  
  ptx = txBuf + 3;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
80003498:	e0 6a 07 ac 	mov	r10,1964
      ptx++;
    }
    data += MONOME_QUAD_LEDS; // skip the rest of the row to get back in target quad
    // ptx++;
  }
  ftdi_write(txBuf, 32 + 3);
8000349c:	95 09       	st.w	r10[0x0],r9
8000349e:	e0 69 07 55 	mov	r9,1877
}
800034a2:	32 3b       	mov	r11,35
800034a4:	b2 88       	st.b	r9[0x0],r8
800034a6:	e0 6c 07 58 	mov	r12,1880
800034aa:	e0 a0 04 63 	rcall	80003d70 <ftdi_write>
800034ae:	d8 22       	popm	r4-r7,pc

800034b0 <grid_map_series>:
800034b0:	d4 21       	pushm	r4-r7,lr
800034b2:	30 78       	mov	r8,7
800034b4:	f0 0c 18 00 	cp.b	r12,r8
  static u8 * ptx;
  static u8 i, j;
  // command (upper nibble)
  txBuf[0] = 0x80;
  // quadrant index (lower nibble, 0-3)
  txBuf[0] |= ( (x > 7) | ((y > 7) << 1) );
800034b8:	5f b9       	srhi	r9
800034ba:	f6 08 18 00 	cp.b	r8,r11
800034be:	f9 bb 03 02 	movlo	r11,2
800034c2:	f9 bb 02 00 	movhs	r11,0
800034c6:	ea 19 ff ff 	orh	r9,0xffff
800034ca:	e8 19 ff 80 	orl	r9,0xff80
800034ce:	16 49       	or	r9,r11
800034d0:	e0 6c 07 58 	mov	r12,1880
800034d4:	18 c9       	st.b	r12++,r9
800034d6:	e0 69 07 57 	mov	r9,1879
  // pointer to tx data
  ptx = txBuf + 1;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
800034da:	13 8b       	ld.ub	r11,r9[0x0]

  // pointer to tx data
  ptx = txBuf + 1;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
800034dc:	30 09       	mov	r9,0
    *ptx = 0;
800034de:	12 9e       	mov	lr,r9
    // print_dbg_hex(txBuf[(i*2) + 1]);
  }
  ftdi_write(txBuf, 16);
}

static void grid_map_series(u8 x, u8 y, const u8* data) {
800034e0:	c1 98       	rjmp	80003512 <grid_map_series+0x62>
800034e2:	b8 8e       	st.b	r12[0x0],lr
800034e4:	f4 c7 ff f8 	sub	r7,r10,-8
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > VB_CUTOFF) << j);
800034e8:	14 9b       	mov	r11,r10
800034ea:	c0 a8       	rjmp	800034fe <grid_map_series+0x4e>
800034ec:	17 35       	ld.ub	r5,r11++
800034ee:	f0 05 18 00 	cp.b	r5,r8
800034f2:	5f b5       	srhi	r5
800034f4:	ea 06 09 46 	lsl	r6,r5,r6
800034f8:	19 85       	ld.ub	r5,r12[0x0]
      ++data;
800034fa:	0a 46       	or	r6,r5
800034fc:	b8 86       	st.b	r12[0x0],r6
800034fe:	f6 0a 01 06 	sub	r6,r11,r10
  ptx = txBuf + 1;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
80003502:	5c 56       	castu.b	r6
80003504:	0e 3b       	cp.w	r11,r7
80003506:	cf 31       	brne	800034ec <grid_map_series+0x3c>
80003508:	2f f9       	sub	r9,-1
8000350a:	2f 0a       	sub	r10,-16
8000350c:	5c 59       	castu.b	r9

  // pointer to tx data
  ptx = txBuf + 1;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
8000350e:	2f fc       	sub	r12,-1
80003510:	30 8b       	mov	r11,8
80003512:	f0 09 18 00 	cp.b	r9,r8
80003516:	fe 98 ff e6 	brls	800034e2 <grid_map_series+0x32>
8000351a:	e0 68 07 40 	mov	r8,1856
8000351e:	91 0c       	st.w	r8[0x0],r12
    // print_dbg_hex(*ptx);

    data += MONOME_QUAD_LEDS; // skip the rest of the row to get back in target quad
    ++ptx;
  }
  ftdi_write(txBuf, MONOME_QUAD_LEDS + 1);  
80003520:	e0 68 07 57 	mov	r8,1879
80003524:	b0 8b       	st.b	r8[0x0],r11
80003526:	e0 68 07 4c 	mov	r8,1868
}
8000352a:	30 9b       	mov	r11,9
8000352c:	b0 89       	st.b	r8[0x0],r9
8000352e:	e0 6c 07 58 	mov	r12,1880
80003532:	e0 a0 04 1f 	rcall	80003d70 <ftdi_write>
80003536:	d8 22       	popm	r4-r7,pc

80003538 <grid_map_40h>:
80003538:	d4 21       	pushm	r4-r7,lr
8000353a:	30 08       	mov	r8,0
8000353c:	18 4b       	or	r11,r12
8000353e:	f0 0b 18 00 	cp.b	r11,r8

static void grid_map_40h(u8 x, u8 y, const u8* data) {
  // print_dbg("\n\r=== grid_map_40h ===");
  static u8 i, j;
  // ignore all but first quadrant -- do any devices larger than 8x8 speak 40h?
  if (x != 0 || y != 0) {
80003542:	c3 a1       	brne	800035b6 <grid_map_40h+0x7e>
80003544:	e0 68 07 4d 	mov	r8,1869
80003548:	30 77       	mov	r7,7
8000354a:	11 8b       	ld.ub	r11,r8[0x0]
8000354c:	e0 69 07 58 	mov	r9,1880
    return;
  }
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
80003550:	30 08       	mov	r8,0
    // led row command + row number
    txBuf[(i*2)] = 0x70 + i;
80003552:	10 9e       	mov	lr,r8
80003554:	c2 28       	rjmp	80003598 <grid_map_40h+0x60>
80003556:	f0 0c 15 01 	lsl	r12,r8,0x1
8000355a:	f0 cb ff 90 	sub	r11,r8,-112
  }
  ftdi_write(txBuf, 32 + 3);
}


static void grid_map_40h(u8 x, u8 y, const u8* data) {
8000355e:	f2 0c 0b 0b 	st.b	r9[r12],r11
    return;
  }
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    // led row command + row number
    txBuf[(i*2)] = 0x70 + i;
    txBuf[(i*2)+1] = 0;
80003562:	f4 c6 ff f8 	sub	r6,r10,-8
80003566:	2f fc       	sub	r12,-1
80003568:	14 9b       	mov	r11,r10
    // print_dbg("\r\n * data bytes: ");
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
8000356a:	f2 0c 0b 0e 	st.b	r9[r12],lr
      // set row bit if led should be on
      // print_dbg("0x");
      // print_dbg_hex(*data);
      // print_dbg(" ");
      txBuf[(i*2)+1] |= ((*data > 0) << j);
8000356e:	c0 c8       	rjmp	80003586 <grid_map_40h+0x4e>
80003570:	17 34       	ld.ub	r4,r11++
80003572:	fc 04 18 00 	cp.b	r4,lr
80003576:	5f 14       	srne	r4
80003578:	e8 05 09 45 	lsl	r5,r4,r5
8000357c:	f2 0c 07 04 	ld.ub	r4,r9[r12]
80003580:	08 45       	or	r5,r4
      // advance data to next bit
      ++data;
80003582:	f2 0c 0b 05 	st.b	r9[r12],r5
80003586:	f6 0a 01 05 	sub	r5,r11,r10
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    // led row command + row number
    txBuf[(i*2)] = 0x70 + i;
    txBuf[(i*2)+1] = 0;
    // print_dbg("\r\n * data bytes: ");
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
8000358a:	5c 55       	castu.b	r5
8000358c:	0c 3b       	cp.w	r11,r6
8000358e:	cf 11       	brne	80003570 <grid_map_40h+0x38>
80003590:	2f f8       	sub	r8,-1
80003592:	2f 0a       	sub	r10,-16
  static u8 i, j;
  // ignore all but first quadrant -- do any devices larger than 8x8 speak 40h?
  if (x != 0 || y != 0) {
    return;
  }
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
80003594:	5c 58       	castu.b	r8
80003596:	30 8b       	mov	r11,8
80003598:	ee 08 18 00 	cp.b	r8,r7
8000359c:	fe 98 ff dd 	brls	80003556 <grid_map_40h+0x1e>
800035a0:	e0 69 07 4d 	mov	r9,1869
800035a4:	b2 8b       	st.b	r9[0x0],r11
    // print_dbg("\n\r 40h: send led_row command: ");
    // print_dbg_hex(txBuf[i*2]);
    // print_dbg(" row data: 0x");
    // print_dbg_hex(txBuf[(i*2) + 1]);
  }
  ftdi_write(txBuf, 16);
800035a6:	e0 69 07 46 	mov	r9,1862
800035aa:	31 0b       	mov	r11,16
800035ac:	b2 88       	st.b	r9[0x0],r8
800035ae:	e0 6c 07 58 	mov	r12,1880
800035b2:	e0 a0 03 df 	rcall	80003d70 <ftdi_write>
800035b6:	d8 22       	popm	r4-r7,pc

800035b8 <read_serial_series>:
800035b8:	d4 31       	pushm	r0-r7,lr
800035ba:	e0 a0 03 93 	rcall	80003ce0 <ftdi_rx_buf>
800035be:	e0 65 07 a4 	mov	r5,1956
}

static void read_serial_series(void) {
  u8* prx = ftdi_rx_buf();
  u8 i;
  rxBytes = ftdi_rx_bytes();
800035c2:	18 94       	mov	r4,r12
800035c4:	18 97       	mov	r7,r12
800035c6:	e0 63 07 b0 	mov	r3,1968
  *h = *pdata;
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
800035ca:	e0 a0 03 8f 	rcall	80003ce8 <ftdi_rx_bytes>
  /* print_dbg("; y: 0x"); */
  /* print_dbg_hex(y); */
  /* print_dbg("; z: 0x"); */
  /* print_dbg_hex(val); */

  ev.type = kEventMonomeGridKey;
800035ce:	ea c6 ff fc 	sub	r6,r5,-4
  // print_dbg_hex(prx[0]);
  // print_dbg(" , 0x");
  // print_dbg_hex(prx[1]);
  // print_dbg(" ]");
  i = 0;
  while(i < rxBytes) {
800035d2:	30 c2       	mov	r2,12
    /* print_dbg(" ; z : 0x"); */
    /* print_dbg_hex(	 ((prx[0] & 0xf0) == 0) ); */
    
    // process consecutive pairs of bytes
    monome_grid_key_write_event( ((prx[1] & 0xf0) >> 4) ,
				 prx[1] & 0xf,
800035d4:	a6 8c       	st.b	r3[0x0],r12
800035d6:	c1 28       	rjmp	800035fa <read_serial_series+0x42>

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
  data[1] = y;
800035d8:	0f 99       	ld.ub	r9,r7[0x1]
800035da:	0f 88       	ld.ub	r8,r7[0x0]
    /* print_dbg(" ; z : 0x"); */
    /* print_dbg_hex(	 ((prx[0] & 0xf0) == 0) ); */
    
    // process consecutive pairs of bytes
    monome_grid_key_write_event( ((prx[1] & 0xf0) >> 4) ,
				 prx[1] & 0xf,
800035dc:	f5 d9 c0 04 	bfextu	r10,r9,0x0,0x4

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
  data[1] = y;
800035e0:	e2 18 00 f0 	andl	r8,0xf0,COH
  data[2] = val;
800035e4:	ac 9a       	st.b	r6[0x1],r10
  /* print_dbg("; y: 0x"); */
  /* print_dbg_hex(y); */
  /* print_dbg("; z: 0x"); */
  /* print_dbg_hex(val); */

  ev.type = kEventMonomeGridKey;
800035e6:	5f 08       	sreq	r8
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
800035e8:	ac a8       	st.b	r6[0x2],r8
    monome_grid_key_write_event( ((prx[1] & 0xf0) >> 4) ,
				 prx[1] & 0xf,
				 ((prx[0] & 0xf0) == 0)
				 );
    i += 2;
    prx += 2;
800035ea:	8b 02       	st.w	r5[0x0],r2
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
800035ec:	a5 89       	lsr	r9,0x4
  /* print_dbg_hex(y); */
  /* print_dbg("; z: 0x"); */
  /* print_dbg_hex(val); */

  ev.type = kEventMonomeGridKey;
  event_post(&ev);
800035ee:	2f e7       	sub	r7,-2
800035f0:	ac 89       	st.b	r6[0x0],r9
800035f2:	e0 6c 07 a4 	mov	r12,1956
  // print_dbg_hex(prx[0]);
  // print_dbg(" , 0x");
  // print_dbg_hex(prx[1]);
  // print_dbg(" ]");
  i = 0;
  while(i < rxBytes) {
800035f6:	fe b0 fc 7d 	rcall	80002ef0 <event_post>
800035fa:	0e 99       	mov	r9,r7
800035fc:	07 88       	ld.ub	r8,r3[0x0]
800035fe:	08 19       	sub	r9,r4
				 );
    i += 2;
    prx += 2;
  }

}
80003600:	f0 09 18 00 	cp.b	r9,r8
80003604:	ce a3       	brcs	800035d8 <read_serial_series+0x20>
80003606:	d8 32       	popm	r0-r7,pc

80003608 <read_serial_40h>:
80003608:	d4 31       	pushm	r0-r7,lr
8000360a:	e0 a0 03 6b 	rcall	80003ce0 <ftdi_rx_buf>
8000360e:	e0 65 07 a4 	mov	r5,1956
80003612:	18 94       	mov	r4,r12
80003614:	18 97       	mov	r7,r12
80003616:	e0 63 07 b0 	mov	r3,1968
  *h = *pdata;
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
8000361a:	e0 a0 03 67 	rcall	80003ce8 <ftdi_rx_bytes>
  /* print_dbg("; y: 0x"); */
  /* print_dbg_hex(y); */
  /* print_dbg("; z: 0x"); */
  /* print_dbg_hex(val); */

  ev.type = kEventMonomeGridKey;
8000361e:	ea c6 ff fc 	sub	r6,r5,-4
  // print_dbg_hex(prx[0]);
  // print_dbg(" , 0x");
  // print_dbg_hex(prx[1]);
  // print_dbg(" ]");
  i = 0;
  while(i < rxBytes) {
80003622:	30 c2       	mov	r2,12
    // print_dbg_hex(prx[1] & 0xf);
    // print_dbg(" ; z : 0x");
    // print_dbg_hex(   ((prx[0] & 0xf) != 0) );

    // press event
    if ((prx[0] & 0xf0) == 0) {
80003624:	a6 8c       	st.b	r3[0x0],r12
80003626:	c1 68       	rjmp	80003652 <read_serial_40h+0x4a>
80003628:	0f 88       	ld.ub	r8,r7[0x0]
8000362a:	10 99       	mov	r9,r8
8000362c:	e2 19 00 f0 	andl	r9,0xf0,COH
// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
  data[1] = y;
  data[2] = val;
80003630:	c1 01       	brne	80003650 <read_serial_40h+0x48>
80003632:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80003636:	5f 19       	srne	r9

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
  data[1] = y;
80003638:	0f 98       	ld.ub	r8,r7[0x1]
8000363a:	ac a9       	st.b	r6[0x2],r9
8000363c:	f3 d8 c0 04 	bfextu	r9,r8,0x0,0x4
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
80003640:	ac 99       	st.b	r6[0x1],r9
  /* print_dbg_hex(y); */
  /* print_dbg("; z: 0x"); */
  /* print_dbg_hex(val); */

  ev.type = kEventMonomeGridKey;
  event_post(&ev);
80003642:	8b 02       	st.w	r5[0x0],r2
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
80003644:	a5 88       	lsr	r8,0x4
  /* print_dbg_hex(y); */
  /* print_dbg("; z: 0x"); */
  /* print_dbg_hex(val); */

  ev.type = kEventMonomeGridKey;
  event_post(&ev);
80003646:	e0 6c 07 a4 	mov	r12,1956
        ((prx[0] & 0xf) != 0)
      );
    }
    
    i += 2;
    prx += 2;
8000364a:	ac 88       	st.b	r6[0x0],r8
  // print_dbg_hex(prx[0]);
  // print_dbg(" , 0x");
  // print_dbg_hex(prx[1]);
  // print_dbg(" ]");
  i = 0;
  while(i < rxBytes) {
8000364c:	fe b0 fc 52 	rcall	80002ef0 <event_post>
80003650:	2f e7       	sub	r7,-2
80003652:	0e 99       	mov	r9,r7
80003654:	07 88       	ld.ub	r8,r3[0x0]
80003656:	08 19       	sub	r9,r4
    }
    
    i += 2;
    prx += 2;
  }
}
80003658:	f0 09 18 00 	cp.b	r9,r8
8000365c:	ce 63       	brcs	80003628 <read_serial_40h+0x20>
8000365e:	d8 32       	popm	r0-r7,pc

80003660 <read_serial_mext>:
80003660:	d4 31       	pushm	r0-r7,lr
80003662:	e0 67 07 b0 	mov	r7,1968
80003666:	e0 a0 03 41 	rcall	80003ce8 <ftdi_rx_bytes>
8000366a:	ae 8c       	st.b	r7[0x0],r12
8000366c:	c5 e0       	breq	80003728 <read_serial_mext+0xc8>
8000366e:	e0 68 07 54 	mov	r8,1876
  static u8* prx; // pointer to rx buf
  static u8 com;
  
  rxBytes = ftdi_rx_bytes();
  if( rxBytes ) {
    nbp = 0;
80003672:	30 09       	mov	r9,0
  // TODO
}

// ring encoder
static inline void monome_ring_enc_write_event( u8 n, u8 val) {
  u8* data = (u8*)(&(ev.data));
80003674:	10 96       	mov	r6,r8
  static u8 com;
  
  rxBytes = ftdi_rx_bytes();
  if( rxBytes ) {
    nbp = 0;
    prx = ftdi_rx_buf();
80003676:	b0 89       	st.b	r8[0x0],r9
80003678:	e0 64 07 a4 	mov	r4,1956
8000367c:	e0 a0 03 32 	rcall	80003ce0 <ftdi_rx_buf>
  // TODO
}

// ring encoder
static inline void monome_ring_enc_write_event( u8 n, u8 val) {
  u8* data = (u8*)(&(ev.data));
80003680:	e0 60 07 44 	mov	r0,1860
   // print_dbg("\r\n monome.c wrote event; n: 0x"); 
   // print_dbg_hex(n); 
   // print_dbg("; d: 0x"); 
   // print_dbg_hex(val); 

  ev.type = kEventMonomeRingEnc;
80003684:	e0 67 07 48 	mov	r7,1864
  static u8 com;
  
  rxBytes = ftdi_rx_bytes();
  if( rxBytes ) {
    nbp = 0;
    prx = ftdi_rx_buf();
80003688:	35 03       	mov	r3,80
    while(nbp < rxBytes) {
8000368a:	e8 c5 ff fc 	sub	r5,r4,-4
      com = (u8)(*(prx++));
      nbp++;
8000368e:	30 d1       	mov	r1,13
80003690:	35 12       	mov	r2,81
  rxBytes = ftdi_rx_bytes();
  if( rxBytes ) {
    nbp = 0;
    prx = ftdi_rx_buf();
    while(nbp < rxBytes) {
      com = (u8)(*(prx++));
80003692:	8f 0c       	st.w	r7[0x0],r12
80003694:	c4 28       	rjmp	80003718 <read_serial_mext+0xb8>
      nbp++;
80003696:	2f f8       	sub	r8,-1
  rxBytes = ftdi_rx_bytes();
  if( rxBytes ) {
    nbp = 0;
    prx = ftdi_rx_buf();
    while(nbp < rxBytes) {
      com = (u8)(*(prx++));
80003698:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
      nbp++;
      switch(com) {
8000369c:	6e 08       	ld.w	r8,r7[0x0]
8000369e:	11 39       	ld.ub	r9,r8++
800036a0:	ac 8a       	st.b	r6[0x0],r10
800036a2:	a0 89       	st.b	r0[0x0],r9
800036a4:	8f 08       	st.w	r7[0x0],r8
800036a6:	e6 09 18 00 	cp.b	r9,r3
800036aa:	c2 30       	breq	800036f0 <read_serial_mext+0x90>
800036ac:	e0 8b 00 0b 	brhi	800036c2 <read_serial_mext+0x62>
800036b0:	32 0a       	mov	r10,32
800036b2:	f4 09 18 00 	cp.b	r9,r10
800036b6:	c0 e0       	breq	800036d2 <read_serial_mext+0x72>
800036b8:	32 1a       	mov	r10,33
800036ba:	f4 09 18 00 	cp.b	r9,r10
800036be:	c3 51       	brne	80003728 <read_serial_mext+0xc8>
800036c0:	c0 f8       	rjmp	800036de <read_serial_mext+0x7e>
800036c2:	e4 09 18 00 	cp.b	r9,r2
800036c6:	c2 20       	breq	8000370a <read_serial_mext+0xaa>
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
800036c8:	35 2b       	mov	r11,82
    while(nbp < rxBytes) {
      com = (u8)(*(prx++));
      nbp++;
      switch(com) {
      case 0x20: // grid key up
      	monome_grid_key_write_event( *prx, *(prx+1), 0);
800036ca:	f6 09 18 00 	cp.b	r9,r11

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
  data[1] = y;
800036ce:	c2 d1       	brne	80003728 <read_serial_mext+0xc8>
  data[2] = val;
800036d0:	c2 08       	rjmp	80003710 <read_serial_mext+0xb0>
800036d2:	11 89       	ld.ub	r9,r8[0x0]
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
800036d4:	11 98       	ld.ub	r8,r8[0x1]
      	monome_grid_key_write_event( *prx, *(prx+1), 0);
      	nbp += 2;
      	prx += 2;
      	break;
      case 0x21: // grid key down
      	monome_grid_key_write_event( *prx, *(prx+1), 1);
800036d6:	aa 89       	st.b	r5[0x0],r9
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
800036d8:	aa 98       	st.b	r5[0x1],r8
  data[1] = y;
800036da:	30 08       	mov	r8,0
  data[2] = val;
800036dc:	c0 68       	rjmp	800036e8 <read_serial_mext+0x88>
800036de:	11 89       	ld.ub	r9,r8[0x0]
  /* print_dbg("; y: 0x"); */
  /* print_dbg_hex(y); */
  /* print_dbg("; z: 0x"); */
  /* print_dbg_hex(val); */

  ev.type = kEventMonomeGridKey;
800036e0:	11 98       	ld.ub	r8,r8[0x1]
800036e2:	aa 89       	st.b	r5[0x0],r9
800036e4:	aa 98       	st.b	r5[0x1],r8
}

// ring encoder
static inline void monome_ring_enc_write_event( u8 n, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = n;
800036e6:	30 18       	mov	r8,1
      	monome_grid_key_write_event( *prx, *(prx+1), 1);
      	nbp += 2;
      	prx += 2;
      	break;
    	case 0x50: // ring delta
      	monome_ring_enc_write_event( *prx, *(prx+1));
800036e8:	aa a8       	st.b	r5[0x2],r8
}

// ring encoder
static inline void monome_ring_enc_write_event( u8 n, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = n;
800036ea:	30 c8       	mov	r8,12
  data[1] = val;
800036ec:	89 08       	st.w	r4[0x0],r8
   // print_dbg("\r\n monome.c wrote event; n: 0x"); 
   // print_dbg_hex(n); 
   // print_dbg("; d: 0x"); 
   // print_dbg_hex(val); 

  ev.type = kEventMonomeRingEnc;
800036ee:	c0 68       	rjmp	800036fa <read_serial_mext+0x9a>
  event_post(&ev);
800036f0:	11 89       	ld.ub	r9,r8[0x0]
800036f2:	11 98       	ld.ub	r8,r8[0x1]
800036f4:	aa 89       	st.b	r5[0x0],r9
      	nbp += 2;
      	prx += 2;
      	break;
    	case 0x50: // ring delta
      	monome_ring_enc_write_event( *prx, *(prx+1));
      	nbp += 2;
800036f6:	aa 98       	st.b	r5[0x1],r8
800036f8:	89 01       	st.w	r4[0x0],r1
800036fa:	e0 6c 07 a4 	mov	r12,1956
      	prx += 2;
      	break;
      case 0x51 : // ring key up
      	monome_ring_key_write_event( *prx++, 0);
      	prx++;
800036fe:	fe b0 fb f9 	rcall	80002ef0 <event_post>
      	break;
80003702:	0d 88       	ld.ub	r8,r6[0x0]
      case 0x52 : // ring key down
      	monome_ring_key_write_event( *prx++, 1);
80003704:	2f e8       	sub	r8,-2
      	nbp++;
80003706:	ac 88       	st.b	r6[0x0],r8
      case 0x51 : // ring key up
      	monome_ring_key_write_event( *prx++, 0);
      	prx++;
      	break;
      case 0x52 : // ring key down
      	monome_ring_key_write_event( *prx++, 1);
80003708:	6e 08       	ld.w	r8,r7[0x0]
      	nbp++;
8000370a:	2f e8       	sub	r8,-2
  
  rxBytes = ftdi_rx_bytes();
  if( rxBytes ) {
    nbp = 0;
    prx = ftdi_rx_buf();
    while(nbp < rxBytes) {
8000370c:	8f 08       	st.w	r7[0x0],r8
8000370e:	c0 58       	rjmp	80003718 <read_serial_mext+0xb8>
80003710:	2f f8       	sub	r8,-1
80003712:	2f fa       	sub	r10,-1
80003714:	8f 08       	st.w	r7[0x0],r8
80003716:	ac 8a       	st.b	r6[0x0],r10
80003718:	e0 6a 07 b0 	mov	r10,1968
8000371c:	0d 88       	ld.ub	r8,r6[0x0]
8000371e:	15 89       	ld.ub	r9,r10[0x0]
80003720:	f0 09 18 00 	cp.b	r9,r8
80003724:	fe 9b ff b9 	brhi	80003696 <read_serial_mext+0x36>
80003728:	d8 32       	popm	r0-r7,pc
8000372a:	d7 03       	nop

8000372c <monome_connect_write_event>:
8000372c:	d4 01       	pushm	lr
8000372e:	32 09       	mov	r9,32
80003730:	f3 3b 00 09 	ld.ub	r11,r9[9]
80003734:	e0 68 07 a4 	mov	r8,1956
80003738:	f0 ca ff fb 	sub	r10,r8,-5
  // print_dbg_ulong(mdesc.cols);
  // print_dbg(" rows: ");
  // print_dbg_ulong(mdesc.rows);

  ev.type = kEventMonomeConnect;
  ev.type = kEventMonomeConnect;
8000373c:	b4 9b       	st.b	r10[0x1],r11
  *data++ = (u8)(mdesc.device); 	// device (8bits)
  *data++ = mdesc.cols;		// width / count
  *data++ = mdesc.rows;		// height / resolution
  //  *data = 0; 		// unused
  event_post(&ev);
8000373e:	30 8b       	mov	r11,8
  // print_dbg_ulong(mdesc.cols);
  // print_dbg(" rows: ");
  // print_dbg_ulong(mdesc.rows);

  ev.type = kEventMonomeConnect;
  ev.type = kEventMonomeConnect;
80003740:	10 9c       	mov	r12,r8
  *data++ = (u8)(mdesc.device); 	// device (8bits)
80003742:	91 0b       	st.w	r8[0x0],r11
80003744:	72 1b       	ld.w	r11,r9[0x4]
  *data++ = mdesc.cols;		// width / count
80003746:	b0 cb       	st.b	r8[0x4],r11
80003748:	f3 38 00 08 	ld.ub	r8,r9[8]
  *data++ = mdesc.rows;		// height / resolution
  //  *data = 0; 		// unused
  event_post(&ev);
8000374c:	b4 88       	st.b	r10[0x0],r8
8000374e:	fe b0 fb d1 	rcall	80002ef0 <event_post>
}
80003752:	d8 02       	popm	pc

80003754 <setup_series>:
80003754:	d4 01       	pushm	lr
80003756:	30 1a       	mov	r10,1
80003758:	32 08       	mov	r8,32
8000375a:	f1 6a 00 0b 	st.b	r8[11],r10
8000375e:	91 0a       	st.w	r8[0x0],r10
//----  function pointer arrays

// read serial and spawn events
static const read_serial_t readSerialFuncs[eProtocolNumProtocols] = {
  &read_serial_40h,
  &read_serial_series,
80003760:	33 0a       	mov	r10,48

// setup series device
static void setup_series(u8 cols, u8 rows) {
  // print_dbg("\r\n setup series device");
  mdesc.protocol = eProtocolSeries;
  mdesc.device = eDeviceGrid;
80003762:	30 09       	mov	r9,0
  mdesc.cols = cols;
80003764:	f1 6c 00 08 	st.b	r8[8],r12
  mdesc.rows = rows;
80003768:	f1 6b 00 09 	st.b	r8[9],r11

// setup series device
static void setup_series(u8 cols, u8 rows) {
  // print_dbg("\r\n setup series device");
  mdesc.protocol = eProtocolSeries;
  mdesc.device = eDeviceGrid;
8000376c:	91 19       	st.w	r8[0x4],r9
  mdesc.cols = cols;
  mdesc.rows = rows;
  mdesc.vari = 0;
8000376e:	f1 69 00 0c 	st.b	r8[12],r9
//----  function pointer arrays

// read serial and spawn events
static const read_serial_t readSerialFuncs[eProtocolNumProtocols] = {
  &read_serial_40h,
  &read_serial_series,
80003772:	fe cb 01 ba 	sub	r11,pc,442
80003776:	fe c8 02 c6 	sub	r8,pc,710
// set function pointers
static inline void set_funcs(void) {
  // print_dbg("\r\n setting monome functions, protocol idx: ");
  // print_dbg_ulong(mdesc.protocol);
  monome_read_serial = readSerialFuncs[mdesc.protocol];
  monome_grid_map = gridMapFuncs[mdesc.protocol];
8000377a:	95 0b       	st.w	r10[0x0],r11
  monome_grid_level_map = gridMapFuncs[mdesc.protocol];
8000377c:	e0 6a 0b 6c 	mov	r10,2924
  monome_ring_map = ringMapFuncs[mdesc.protocol];
80003780:	95 08       	st.w	r10[0x0],r8
80003782:	e0 6a 0c 78 	mov	r10,3192
};

// set intensity
static const set_intense_t intenseFuncs[eProtocolNumProtocols] = {
  NULL, // unsupported
  &set_intense_series,
80003786:	95 08       	st.w	r10[0x0],r8
80003788:	e0 68 0b 70 	mov	r8,2928
  &ring_map_mext,
};

// grid vs arc refresh
static const refresh_t refreshFuncs[eProtocolNumProtocols] = {
  &monome_grid_refresh,
8000378c:	91 09       	st.w	r8[0x0],r9
8000378e:	fe c9 03 b6 	sub	r9,pc,950
  mdesc.cols = cols;
  mdesc.rows = rows;
  mdesc.vari = 0;
  mdesc.tilt = 1;
  set_funcs();
  monome_connect_write_event();
80003792:	e0 68 0c 74 	mov	r8,3188
  //  monomeConnect = 1;
  //  test_draw();
}
80003796:	91 09       	st.w	r8[0x0],r9
80003798:	fe c9 05 64 	sub	r9,pc,1380
8000379c:	e0 68 0b 68 	mov	r8,2920
800037a0:	91 09       	st.w	r8[0x0],r9
800037a2:	cc 5f       	rcall	8000372c <monome_connect_write_event>
800037a4:	d8 02       	popm	pc
800037a6:	d7 03       	nop

800037a8 <check_monome_device_desc>:
800037a8:	d4 31       	pushm	r0-r7,lr
800037aa:	20 5d       	sub	sp,20
800037ac:	14 96       	mov	r6,r10
800037ae:	1a 97       	mov	r7,sp
800037b0:	fa c9 ff fa 	sub	r9,sp,-6
800037b4:	1a 98       	mov	r8,sp
800037b6:	19 8a       	ld.ub	r10,r12[0x0]
800037b8:	2f ec       	sub	r12,-2
800037ba:	10 ca       	st.b	r8++,r10
800037bc:	12 38       	cp.w	r8,r9
800037be:	cf c1       	brne	800037b6 <check_monome_device_desc+0xe>
800037c0:	30 08       	mov	r8,0
800037c2:	30 6a       	mov	r10,6
800037c4:	ba e8       	st.b	sp[0x6],r8
800037c6:	fe cb c0 6a 	sub	r11,pc,-16278
  // manufacturer
  for(i=0; i<MONOME_MANSTR_LEN; i++) {
    buf[i] = mstr[i*2];
  }
  buf[i] = 0;
  matchMan = ( strncmp(buf, "monome", MONOME_MANSTR_LEN) == 0 );
800037ca:	1a 9c       	mov	r12,sp
800037cc:	e0 a0 1b 34 	rcall	80006e34 <strncmp>
  }
  //  print_dbg("\r\n finished monome class init");
}

// determine if FTDI string descriptors match monome device pattern
u8 check_monome_device_desc(char* mstr, char* pstr, char* sstr) { 
800037d0:	ee c8 ff f7 	sub	r8,r7,-9
  /* print_dbg("\r\n manstring: "); */
  /* print_dbg(buf); */
 
  // serial number string
  for(i=0; i<MONOME_SERSTR_LEN; i++) {
    buf[i] = sstr[i*2];
800037d4:	18 94       	mov	r4,r12
800037d6:	0d 89       	ld.ub	r9,r6[0x0]
800037d8:	2f e6       	sub	r6,-2
  matchMan = ( strncmp(buf, "monome", MONOME_MANSTR_LEN) == 0 );
  /* print_dbg("\r\n manstring: "); */
  /* print_dbg(buf); */
 
  // serial number string
  for(i=0; i<MONOME_SERSTR_LEN; i++) {
800037da:	0e c9       	st.b	r7++,r9
800037dc:	10 37       	cp.w	r7,r8
    buf[i] = sstr[i*2];
  }
  buf[i] = 0;
800037de:	cf c1       	brne	800037d6 <check_monome_device_desc+0x2e>
800037e0:	30 05       	mov	r5,0
800037e2:	fb 65 00 09 	st.b	sp[9],r5
  /* print_dbg("\r\n serial string: "); */
  /* print_dbg(buf); */
  if(matchMan == 0) {
800037e6:	58 04       	cp.w	r4,0
    // didn't match the manufacturer string, but check the serial for DIYs
    if( strncmp(buf, "a40h", 4) == 0) {
800037e8:	c1 40       	breq	80003810 <check_monome_device_desc+0x68>
800037ea:	30 4a       	mov	r10,4
800037ec:	fe cb c0 88 	sub	r11,pc,-16248
800037f0:	1a 9c       	mov	r12,sp
800037f2:	e0 a0 1b 21 	rcall	80006e34 <strncmp>
800037f6:	18 99       	mov	r9,r12
      // this is probably an arduinome      
      mdesc.protocol = eProtocol40h;
800037f8:	e0 81 01 81 	brne	80003afa <check_monome_device_desc+0x352>
      mdesc.device = eDeviceGrid;
800037fc:	32 08       	mov	r8,32
      mdesc.cols = 8;
800037fe:	91 09       	st.w	r8[0x0],r9
      mdesc.rows = 8;
80003800:	91 19       	st.w	r8[0x4],r9
80003802:	30 89       	mov	r9,8
    // didn't match the manufacturer string, but check the serial for DIYs
    if( strncmp(buf, "a40h", 4) == 0) {
      // this is probably an arduinome      
      mdesc.protocol = eProtocol40h;
      mdesc.device = eDeviceGrid;
      mdesc.cols = 8;
80003804:	f1 69 00 09 	st.b	r8[9],r9
    // if we got here, serial number didn't match series or 40h patterns.
    // so this is probably an extended-protocol device.
    // we need to query for device attributes
    return setup_mext();
  }
  return 0;
80003808:	f1 69 00 08 	st.b	r8[8],r9
    } else {
      // not a monome
      return 0;
    }
  } else { // matched manufctrr string
    if(buf[0] != 'm') {
8000380c:	e0 8f 01 78 	bral	80003afc <check_monome_device_desc+0x354>
80003810:	36 d8       	mov	r8,109
80003812:	1b 89       	ld.ub	r9,sp[0x0]
80003814:	f0 09 18 00 	cp.b	r9,r8
      // not a monome, somehow. shouldn't happen
      return 0;
    }
    if(buf[3] == 'h') {
80003818:	e0 81 01 71 	brne	80003afa <check_monome_device_desc+0x352>
8000381c:	36 88       	mov	r8,104
8000381e:	1b b9       	ld.ub	r9,sp[0x3]
80003820:	f0 09 18 00 	cp.b	r9,r8
// setup

// setup 40h-protocol device
static void setup_40h(u8 cols, u8 rows) {
  // print_dbg("\r\n setup 40h device");
  mdesc.protocol = eProtocol40h;
80003824:	c2 01       	brne	80003864 <check_monome_device_desc+0xbc>
  mdesc.device = eDeviceGrid;
  mdesc.cols = 8;
  mdesc.rows = 8;
80003826:	30 89       	mov	r9,8
80003828:	32 08       	mov	r8,32
// setup 40h-protocol device
static void setup_40h(u8 cols, u8 rows) {
  // print_dbg("\r\n setup 40h device");
  mdesc.protocol = eProtocol40h;
  mdesc.device = eDeviceGrid;
  mdesc.cols = 8;
8000382a:	f1 69 00 09 	st.b	r8[9],r9

//----  function pointer arrays

// read serial and spawn events
static const read_serial_t readSerialFuncs[eProtocolNumProtocols] = {
  &read_serial_40h,
8000382e:	f1 69 00 08 	st.b	r8[8],r9
  // print_dbg("\r\n setup 40h device");
  mdesc.protocol = eProtocol40h;
  mdesc.device = eDeviceGrid;
  mdesc.cols = 8;
  mdesc.rows = 8;
  mdesc.vari = 0;
80003832:	33 09       	mov	r9,48
// setup

// setup 40h-protocol device
static void setup_40h(u8 cols, u8 rows) {
  // print_dbg("\r\n setup 40h device");
  mdesc.protocol = eProtocol40h;
80003834:	f1 64 00 0c 	st.b	r8[12],r4

//----  function pointer arrays

// read serial and spawn events
static const read_serial_t readSerialFuncs[eProtocolNumProtocols] = {
  &read_serial_40h,
80003838:	91 04       	st.w	r8[0x0],r4
/*   &grid_led_mext, */
/* }; */

// grid/map
static const grid_map_t gridMapFuncs[eProtocolNumProtocols] = {
  &grid_map_40h,
8000383a:	91 14       	st.w	r8[0x4],r4

//----  function pointer arrays

// read serial and spawn events
static const read_serial_t readSerialFuncs[eProtocolNumProtocols] = {
  &read_serial_40h,
8000383c:	fe ca 02 34 	sub	r10,pc,564
// set function pointers
static inline void set_funcs(void) {
  // print_dbg("\r\n setting monome functions, protocol idx: ");
  // print_dbg_ulong(mdesc.protocol);
  monome_read_serial = readSerialFuncs[mdesc.protocol];
  monome_grid_map = gridMapFuncs[mdesc.protocol];
80003840:	fe c8 03 08 	sub	r8,pc,776
  monome_grid_level_map = gridMapFuncs[mdesc.protocol];
80003844:	93 0a       	st.w	r9[0x0],r10
  monome_ring_map = ringMapFuncs[mdesc.protocol];
80003846:	e0 69 0b 6c 	mov	r9,2924
8000384a:	93 08       	st.w	r9[0x0],r8
  monome_set_intense = intenseFuncs[mdesc.protocol];
8000384c:	e0 69 0c 78 	mov	r9,3192
80003850:	93 08       	st.w	r9[0x0],r8
    if(buf[3] == 'h') {
      // this is a 40h
      setup_40h(8, 8);
      return 1;
    }
    if( strncmp(buf, "m64-", 4) == 0 ) {
80003852:	e0 68 0b 70 	mov	r8,2928
80003856:	fe c9 06 22 	sub	r9,pc,1570
8000385a:	91 04       	st.w	r8[0x0],r4
8000385c:	e0 68 0c 74 	mov	r8,3188
      // series 64
      setup_series(8, 8);
80003860:	91 04       	st.w	r8[0x0],r4
80003862:	c4 69       	rjmp	80003aee <check_monome_device_desc+0x346>
      return 1;
    }
    if( strncmp(buf, "m128-", 5) == 0 ) {
80003864:	1a 97       	mov	r7,sp
80003866:	30 4a       	mov	r10,4
80003868:	fe cb c0 fc 	sub	r11,pc,-16132
8000386c:	1a 9c       	mov	r12,sp
8000386e:	e0 a0 1a e3 	rcall	80006e34 <strncmp>
      // series 128
      setup_series(16, 8);
80003872:	c0 31       	brne	80003878 <check_monome_device_desc+0xd0>
80003874:	30 8b       	mov	r11,8
      return 1;
    }
    if( strncmp(buf, "m256-", 5) == 0 ) {
80003876:	c1 38       	rjmp	8000389c <check_monome_device_desc+0xf4>
80003878:	30 5a       	mov	r10,5
8000387a:	fe cb c1 06 	sub	r11,pc,-16122
8000387e:	1a 9c       	mov	r12,sp
80003880:	e0 a0 1a da 	rcall	80006e34 <strncmp>
      // series 256
      setup_series(16, 16);
80003884:	c0 41       	brne	8000388c <check_monome_device_desc+0xe4>
80003886:	30 8b       	mov	r11,8
80003888:	31 0c       	mov	r12,16
8000388a:	c0 a8       	rjmp	8000389e <check_monome_device_desc+0xf6>
  u8* prx;
  u8 w = 0;
  u8 busy;

  // print_dbg("\r\n setup mext device");
  mdesc.protocol = eProtocolMext;
8000388c:	1a 9c       	mov	r12,sp
8000388e:	30 5a       	mov	r10,5
80003890:	fe cb c1 14 	sub	r11,pc,-16108

  mdesc.vari = 1;
80003894:	e0 a0 1a d0 	rcall	80006e34 <strncmp>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80003898:	c0 51       	brne	800038a2 <check_monome_device_desc+0xfa>
8000389a:	31 0b       	mov	r11,16
8000389c:	16 9c       	mov	r12,r11
8000389e:	c5 bf       	rcall	80003754 <setup_series>
800038a0:	c2 b9       	rjmp	80003af6 <check_monome_device_desc+0x34e>

  rxBytes = 0;
800038a2:	30 29       	mov	r9,2
800038a4:	32 08       	mov	r8,32
800038a6:	91 09       	st.w	r8[0x0],r9

  if(rxBytes != 6 ){
    print_dbg("\r\n got unexpected byte count in response to mext setup request;\r\n");
    print_dbg_ulong(*prx);
    
    for(;rxBytes != 0; rxBytes--) {
800038a8:	30 19       	mov	r9,1
800038aa:	f1 69 00 0c 	st.b	r8[12],r9
}

// setup extended device, return success /failure of query
static u8 setup_mext(void) {
  u8* prx;
  u8 w = 0;
800038ae:	08 99       	mov	r9,r4
800038b0:	e0 68 87 00 	mov	r8,34560
800038b4:	ea 18 03 93 	orh	r8,0x393
800038b8:	e0 67 07 b0 	mov	r7,1968
800038bc:	08 96       	mov	r6,r4

  mdesc.vari = 1;

  rxBytes = 0;

  while(rxBytes != 6) {
800038be:	ae 85       	st.b	r7[0x0],r5
800038c0:	0a 93       	mov	r3,r5
800038c2:	e0 6a 03 e7 	mov	r10,999
800038c6:	fa c5 ff ec 	sub	r5,sp,-20
800038ca:	30 0b       	mov	r11,0
800038cc:	0a f4       	st.b	--r5,r4
800038ce:	f0 0a 00 0a 	add	r10,r8,r10
800038d2:	f2 0b 00 4b 	adc	r11,r9,r11
800038d6:	30 64       	mov	r4,6
800038d8:	e0 68 03 e8 	mov	r8,1000
800038dc:	30 09       	mov	r9,0
800038de:	e0 a0 16 75 	rcall	800065c8 <__avr32_udiv64>
800038e2:	14 92       	mov	r2,r10
800038e4:	c4 f8       	rjmp	80003982 <check_monome_device_desc+0x1da>
800038e6:	d7 03       	nop
800038e8:	e1 b8 00 42 	mfsr	r8,0x108
800038ec:	f0 02 00 0a 	add	r10,r8,r2
800038f0:	e1 b9 00 42 	mfsr	r9,0x108
800038f4:	14 38       	cp.w	r8,r10
800038f6:	e0 88 00 05 	brls	80003900 <check_monome_device_desc+0x158>
800038fa:	10 39       	cp.w	r9,r8
800038fc:	cf a2       	brcc	800038f0 <check_monome_device_desc+0x148>
800038fe:	c0 48       	rjmp	80003906 <check_monome_device_desc+0x15e>
80003900:	10 39       	cp.w	r9,r8
80003902:	e0 83 00 ff 	brlo	80003b00 <check_monome_device_desc+0x358>
80003906:	14 39       	cp.w	r9,r10
80003908:	e0 8b 00 fc 	brhi	80003b00 <check_monome_device_desc+0x358>
8000390c:	cf 2b       	rjmp	800038f0 <check_monome_device_desc+0x148>
8000390e:	e1 b9 00 42 	mfsr	r9,0x108
80003912:	14 38       	cp.w	r8,r10
80003914:	e0 88 00 05 	brls	8000391e <check_monome_device_desc+0x176>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003918:	10 39       	cp.w	r9,r8
8000391a:	cf a2       	brcc	8000390e <check_monome_device_desc+0x166>
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000391c:	c0 48       	rjmp	80003924 <check_monome_device_desc+0x17c>
8000391e:	10 39       	cp.w	r9,r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003920:	e0 83 00 f8 	brlo	80003b10 <check_monome_device_desc+0x368>
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003924:	14 39       	cp.w	r9,r10
80003926:	e0 8b 00 f5 	brhi	80003b10 <check_monome_device_desc+0x368>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000392a:	cf 2b       	rjmp	8000390e <check_monome_device_desc+0x166>
8000392c:	e1 b9 00 42 	mfsr	r9,0x108
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003930:	14 38       	cp.w	r8,r10
80003932:	e0 88 00 05 	brls	8000393c <check_monome_device_desc+0x194>
80003936:	10 39       	cp.w	r9,r8
80003938:	cf a2       	brcc	8000392c <check_monome_device_desc+0x184>
8000393a:	c0 38       	rjmp	80003940 <check_monome_device_desc+0x198>
8000393c:	10 39       	cp.w	r9,r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000393e:	c0 43       	brcs	80003946 <check_monome_device_desc+0x19e>
80003940:	14 39       	cp.w	r9,r10
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003942:	fe 98 ff f5 	brls	8000392c <check_monome_device_desc+0x184>
80003946:	cd 5d       	rcall	80003cf0 <ftdi_rx_busy>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003948:	cf f1       	brne	80003946 <check_monome_device_desc+0x19e>
8000394a:	cc fd       	rcall	80003ce8 <ftdi_rx_bytes>
8000394c:	ae 8c       	st.b	r7[0x0],r12
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000394e:	e8 0c 18 00 	cp.b	r12,r4
80003952:	c1 80       	breq	80003982 <check_monome_device_desc+0x1da>
80003954:	fe cc c1 d0 	sub	r12,pc,-15920
80003958:	e0 a0 12 8a 	rcall	80005e6c <print_dbg>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000395c:	0d 8c       	ld.ub	r12,r6[0x0]
8000395e:	e0 a0 12 81 	rcall	80005e60 <print_dbg_ulong>
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003962:	c0 c8       	rjmp	8000397a <check_monome_device_desc+0x1d2>
80003964:	2f f6       	sub	r6,-1
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003966:	0d 8c       	ld.ub	r12,r6[0x0]
80003968:	e0 a0 12 7c 	rcall	80005e60 <print_dbg_ulong>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000396c:	fe cc c2 f8 	sub	r12,pc,-15624
80003970:	e0 a0 12 7e 	rcall	80005e6c <print_dbg>
80003974:	0f 88       	ld.ub	r8,r7[0x0]

  // print_dbg("\r\n setup request ftdi read; waiting...");

  //  while(ftdi_rx_busy()) {;;}
  while(busy) {
    busy = ftdi_rx_busy();
80003976:	20 18       	sub	r8,1
80003978:	ae 88       	st.b	r7[0x0],r8
  busy = 1;

  // print_dbg("\r\n setup request ftdi read; waiting...");

  //  while(ftdi_rx_busy()) {;;}
  while(busy) {
8000397a:	0f 88       	ld.ub	r8,r7[0x0]
    busy = ftdi_rx_busy();
    // print_dbg("\r\n waiting for transfer complete; busy flag: ");
    // print_dbg_ulong(busy);
    
  }
  rxBytes = ftdi_rx_bytes();
8000397c:	e6 08 18 00 	cp.b	r8,r3
80003980:	cf 21       	brne	80003964 <check_monome_device_desc+0x1bc>

  // print_dbg(" done waiting. bytes read: ");
  // print_dbg_ulong(rxBytes);

  if(rxBytes != 6 ){
80003982:	0f 88       	ld.ub	r8,r7[0x0]
80003984:	e8 08 18 00 	cp.b	r8,r4
    print_dbg("\r\n got unexpected byte count in response to mext setup request;\r\n");
80003988:	cb 01       	brne	800038e8 <check_monome_device_desc+0x140>
8000398a:	ca bd       	rcall	80003ce0 <ftdi_rx_buf>
8000398c:	30 1a       	mov	r10,1
    print_dbg_ulong(*prx);
8000398e:	f8 c7 ff ff 	sub	r7,r12,-1
80003992:	0f 8c       	ld.ub	r12,r7[0x0]
80003994:	f4 0c 18 00 	cp.b	r12,r10
    
    for(;rxBytes != 0; rxBytes--) {
      print_dbg_ulong(*(++prx));
80003998:	c2 41       	brne	800039e0 <check_monome_device_desc+0x238>
8000399a:	32 08       	mov	r8,32
8000399c:	30 0c       	mov	r12,0
      print_dbg(" ");
8000399e:	91 1c       	st.w	r8[0x4],r12
800039a0:	0f 99       	ld.ub	r9,r7[0x1]
800039a2:	f4 09 18 00 	cp.b	r9,r10

  if(rxBytes != 6 ){
    print_dbg("\r\n got unexpected byte count in response to mext setup request;\r\n");
    print_dbg_ulong(*prx);
    
    for(;rxBytes != 0; rxBytes--) {
800039a6:	c0 31       	brne	800039ac <check_monome_device_desc+0x204>
800039a8:	30 89       	mov	r9,8
800039aa:	c1 28       	rjmp	800039ce <check_monome_device_desc+0x226>
800039ac:	30 2a       	mov	r10,2
800039ae:	f4 09 18 00 	cp.b	r9,r10

  mdesc.vari = 1;

  rxBytes = 0;

  while(rxBytes != 6) {
800039b2:	c0 81       	brne	800039c2 <check_monome_device_desc+0x21a>
800039b4:	30 89       	mov	r9,8
800039b6:	f1 69 00 09 	st.b	r8[9],r9

    // return 0;
    }
  }
  
  prx = ftdi_rx_buf();
800039ba:	31 09       	mov	r9,16
800039bc:	f1 69 00 08 	st.b	r8[8],r9
  prx++; // 1st returned byte is 0
800039c0:	c0 b8       	rjmp	800039d6 <check_monome_device_desc+0x22e>
800039c2:	30 4a       	mov	r10,4
  if(*prx == 1) {
800039c4:	f4 09 18 00 	cp.b	r9,r10
800039c8:	e0 81 00 9a 	brne	80003afc <check_monome_device_desc+0x354>
    mdesc.device = eDeviceGrid;
800039cc:	31 09       	mov	r9,16
800039ce:	f1 69 00 08 	st.b	r8[8],r9
    prx++;
    if(*prx == 1) {
800039d2:	f1 69 00 09 	st.b	r8[9],r9
800039d6:	30 19       	mov	r9,1
800039d8:	32 08       	mov	r8,32
      // print_dbg("\r\n monome 64");
      mdesc.rows = 8;
800039da:	f1 69 00 0b 	st.b	r8[11],r9
      mdesc.cols = 8;
    }
    else if(*prx == 2) {
800039de:	c1 d8       	rjmp	80003a18 <check_monome_device_desc+0x270>
800039e0:	2f f7       	sub	r7,-1
800039e2:	30 58       	mov	r8,5
800039e4:	f0 0c 18 00 	cp.b	r12,r8
      // print_dbg("\r\n monome 128");
      mdesc.rows = 8;
800039e8:	c0 f1       	brne	80003a06 <check_monome_device_desc+0x25e>
800039ea:	30 19       	mov	r9,1
      mdesc.cols = 16;
800039ec:	32 08       	mov	r8,32
800039ee:	91 19       	st.w	r8[0x4],r9
800039f0:	0f 89       	ld.ub	r9,r7[0x0]
800039f2:	fe cc c2 2a 	sub	r12,pc,-15830
    }
    else if(*prx == 4) {
800039f6:	f1 69 00 0a 	st.b	r8[10],r9
800039fa:	e0 a0 12 39 	rcall	80005e6c <print_dbg>
      // print_dbg("\r\n monome 256");
      mdesc.rows = 16; 
800039fe:	0f 8c       	ld.ub	r12,r7[0x0]
      mdesc.cols = 16;
80003a00:	e0 a0 12 30 	rcall	80005e60 <print_dbg_ulong>
      mdesc.rows = 8;
      mdesc.cols = 16;
    }
    else if(*prx == 4) {
      // print_dbg("\r\n monome 256");
      mdesc.rows = 16; 
80003a04:	c0 a8       	rjmp	80003a18 <check_monome_device_desc+0x270>
80003a06:	e0 a0 12 0f 	rcall	80005e24 <print_dbg_hex>
      mdesc.cols = 16;
    }
    else {
      return 0; // bail
    }		
    mdesc.tilt = 1;
80003a0a:	0f 8c       	ld.ub	r12,r7[0x0]
80003a0c:	e0 a0 12 0c 	rcall	80005e24 <print_dbg_hex>
80003a10:	0f 9c       	ld.ub	r12,r7[0x1]
80003a12:	e0 a0 12 09 	rcall	80005e24 <print_dbg_hex>
  }
  else if(*prx == 5) {
80003a16:	c7 28       	rjmp	80003afa <check_monome_device_desc+0x352>
80003a18:	30 18       	mov	r8,1
80003a1a:	fb 68 00 13 	st.b	sp[19],r8
    mdesc.device = eDeviceArc;
80003a1e:	e1 b8 00 42 	mfsr	r8,0x108
    mdesc.encs = *(++prx);
80003a22:	f0 02 00 0a 	add	r10,r8,r2
80003a26:	e1 b9 00 42 	mfsr	r9,0x108
    print_dbg("\r\n monome arc ");
80003a2a:	14 38       	cp.w	r8,r10
80003a2c:	e0 88 00 05 	brls	80003a36 <check_monome_device_desc+0x28e>
    print_dbg_ulong(*prx);
80003a30:	10 39       	cp.w	r9,r8
80003a32:	cf a2       	brcc	80003a26 <check_monome_device_desc+0x27e>
80003a34:	c0 38       	rjmp	80003a3a <check_monome_device_desc+0x292>
  } else {
    print_dbg_hex(*prx);
80003a36:	10 39       	cp.w	r9,r8
80003a38:	c7 23       	brcs	80003b1c <check_monome_device_desc+0x374>
    print_dbg_hex(*(++prx));
80003a3a:	14 39       	cp.w	r9,r10
80003a3c:	e0 8b 00 70 	brhi	80003b1c <check_monome_device_desc+0x374>
    print_dbg_hex(*(++prx));
80003a40:	cf 3b       	rjmp	80003a26 <check_monome_device_desc+0x27e>
80003a42:	e1 b9 00 42 	mfsr	r9,0x108
80003a46:	14 38       	cp.w	r8,r10
    return 0; // bail
  }

  // get id
  w = 1;
80003a48:	e0 88 00 05 	brls	80003a52 <check_monome_device_desc+0x2aa>
80003a4c:	10 39       	cp.w	r9,r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003a4e:	cf a2       	brcc	80003a42 <check_monome_device_desc+0x29a>
80003a50:	c0 38       	rjmp	80003a56 <check_monome_device_desc+0x2ae>
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003a52:	10 39       	cp.w	r9,r8
80003a54:	c6 d3       	brcs	80003b2e <check_monome_device_desc+0x386>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003a56:	14 39       	cp.w	r9,r10
80003a58:	e0 8b 00 6b 	brhi	80003b2e <check_monome_device_desc+0x386>
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003a5c:	cf 3b       	rjmp	80003a42 <check_monome_device_desc+0x29a>
80003a5e:	e1 b9 00 42 	mfsr	r9,0x108
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003a62:	04 38       	cp.w	r8,r2
80003a64:	e0 88 00 06 	brls	80003a70 <check_monome_device_desc+0x2c8>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003a68:	10 39       	cp.w	r9,r8
80003a6a:	cf a2       	brcc	80003a5e <check_monome_device_desc+0x2b6>
80003a6c:	c0 48       	rjmp	80003a74 <check_monome_device_desc+0x2cc>
80003a6e:	d7 03       	nop
80003a70:	10 39       	cp.w	r9,r8
80003a72:	c0 43       	brcs	80003a7a <check_monome_device_desc+0x2d2>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003a74:	04 39       	cp.w	r9,r2
80003a76:	fe 98 ff f4 	brls	80003a5e <check_monome_device_desc+0x2b6>
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003a7a:	c3 bd       	rcall	80003cf0 <ftdi_rx_busy>
80003a7c:	18 97       	mov	r7,r12
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003a7e:	cf e1       	brne	80003a7a <check_monome_device_desc+0x2d2>
80003a80:	c3 4d       	rcall	80003ce8 <ftdi_rx_bytes>
80003a82:	e0 68 07 b0 	mov	r8,1968
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003a86:	b0 8c       	st.b	r8[0x0],r12
80003a88:	c2 cd       	rcall	80003ce0 <ftdi_rx_buf>
80003a8a:	36 b8       	mov	r8,107
80003a8c:	19 a9       	ld.ub	r9,r12[0x2]
80003a8e:	f0 09 18 00 	cp.b	r9,r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003a92:	c0 41       	brne	80003a9a <check_monome_device_desc+0x2f2>
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003a94:	32 08       	mov	r8,32
80003a96:	f1 67 00 0c 	st.b	r8[12],r7
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003a9a:	fe c9 c3 6e 	sub	r9,pc,-15506
80003a9e:	32 08       	mov	r8,32
80003aa0:	70 1a       	ld.w	r10,r8[0x4]
80003aa2:	70 08       	ld.w	r8,r8[0x0]
80003aa4:	f2 08 03 2b 	ld.w	r11,r9[r8<<0x2]
80003aa8:	33 09       	mov	r9,48
80003aaa:	93 0b       	st.w	r9[0x0],r11
80003aac:	e0 6b 0b 6c 	mov	r11,2924
80003ab0:	fe c9 c2 cc 	sub	r9,pc,-15668
80003ab4:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
80003ab8:	97 09       	st.w	r11[0x0],r9
80003aba:	e0 6b 0c 78 	mov	r11,3192
80003abe:	97 09       	st.w	r11[0x0],r9
80003ac0:	fe c9 c3 7c 	sub	r9,pc,-15492
80003ac4:	f2 08 03 2b 	ld.w	r11,r9[r8<<0x2]
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003ac8:	e0 69 0b 70 	mov	r9,2928
80003acc:	93 0b       	st.w	r9[0x0],r11
80003ace:	fe c9 c2 f6 	sub	r9,pc,-15626
  delay_ms(1);
  ftdi_read();
  delay_ms(1);
  busy = 1;
  while(busy) {
    busy = ftdi_rx_busy();
80003ad2:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
80003ad6:	e0 68 0c 74 	mov	r8,3188
  }
  rxBytes = ftdi_rx_bytes();
80003ada:	58 1a       	cp.w	r10,1
80003adc:	f9 ba 01 00 	movne	r10,0
80003ae0:	f9 ba 00 04 	moveq	r10,4
  prx = ftdi_rx_buf();
80003ae4:	91 09       	st.w	r8[0x0],r9
  if(*(prx+2) == 'k')
80003ae6:	fe c8 c3 ae 	sub	r8,pc,-15442
80003aea:	f0 0a 03 09 	ld.w	r9,r8[r10]
80003aee:	e0 68 0b 68 	mov	r8,2920
      mdesc.vari = 0;
80003af2:	91 09       	st.w	r8[0x0],r9
80003af4:	c1 ce       	rcall	8000372c <monome_connect_write_event>

// set function pointers
static inline void set_funcs(void) {
  // print_dbg("\r\n setting monome functions, protocol idx: ");
  // print_dbg_ulong(mdesc.protocol);
  monome_read_serial = readSerialFuncs[mdesc.protocol];
80003af6:	30 1c       	mov	r12,1
80003af8:	c0 28       	rjmp	80003afc <check_monome_device_desc+0x354>
  monome_grid_map = gridMapFuncs[mdesc.protocol];
  monome_grid_level_map = gridMapFuncs[mdesc.protocol];
  monome_ring_map = ringMapFuncs[mdesc.protocol];
  monome_set_intense = intenseFuncs[mdesc.protocol];
  monome_refresh = refreshFuncs[mdesc.device == eDeviceArc];   // toggle on grid vs arc
80003afa:	30 0c       	mov	r12,0

// set function pointers
static inline void set_funcs(void) {
  // print_dbg("\r\n setting monome functions, protocol idx: ");
  // print_dbg_ulong(mdesc.protocol);
  monome_read_serial = readSerialFuncs[mdesc.protocol];
80003afc:	2f bd       	sub	sp,-20
80003afe:	d8 32       	popm	r0-r7,pc
80003b00:	30 1b       	mov	r11,1
80003b02:	0a 9c       	mov	r12,r5
80003b04:	c3 6d       	rcall	80003d70 <ftdi_write>
  monome_grid_map = gridMapFuncs[mdesc.protocol];
80003b06:	e1 b8 00 42 	mfsr	r8,0x108
80003b0a:	f0 02 00 0a 	add	r10,r8,r2
80003b0e:	c0 0b       	rjmp	8000390e <check_monome_device_desc+0x166>
  monome_grid_level_map = gridMapFuncs[mdesc.protocol];
80003b10:	c1 ad       	rcall	80003d44 <ftdi_read>
80003b12:	e1 b8 00 42 	mfsr	r8,0x108
  monome_ring_map = ringMapFuncs[mdesc.protocol];
80003b16:	f0 02 00 0a 	add	r10,r8,r2
80003b1a:	c0 9b       	rjmp	8000392c <check_monome_device_desc+0x184>
80003b1c:	30 1b       	mov	r11,1
  monome_set_intense = intenseFuncs[mdesc.protocol];
80003b1e:	fa cc ff ed 	sub	r12,sp,-19
80003b22:	c2 7d       	rcall	80003d70 <ftdi_write>
80003b24:	e1 b8 00 42 	mfsr	r8,0x108
  monome_refresh = refreshFuncs[mdesc.device == eDeviceArc];   // toggle on grid vs arc
80003b28:	f0 02 00 0a 	add	r10,r8,r2
80003b2c:	c8 bb       	rjmp	80003a42 <check_monome_device_desc+0x29a>
80003b2e:	c0 bd       	rcall	80003d44 <ftdi_read>
  // print_dbg_ulong(mdesc.protocol);
  monome_read_serial = readSerialFuncs[mdesc.protocol];
  monome_grid_map = gridMapFuncs[mdesc.protocol];
  monome_grid_level_map = gridMapFuncs[mdesc.protocol];
  monome_ring_map = ringMapFuncs[mdesc.protocol];
  monome_set_intense = intenseFuncs[mdesc.protocol];
80003b30:	e1 b8 00 42 	mfsr	r8,0x108
  monome_refresh = refreshFuncs[mdesc.device == eDeviceArc];   // toggle on grid vs arc
80003b34:	f0 02 00 02 	add	r2,r8,r2
80003b38:	c9 3b       	rjmp	80003a5e <check_monome_device_desc+0x2b6>
80003b3a:	d7 03       	nop

80003b3c <process_timers>:
   tail = NULL;
   num = 0;
}

// process the timer list, presumably from TC interrupt
void process_timers( void ) {
80003b3c:	d4 21       	pushm	r4-r7,lr
  u32 i;
  volatile softTimer_t* t = head;
80003b3e:	e0 68 07 b4 	mov	r8,1972

  //  print_dbg("\r\n processing timers. head: 0x");
  //  print_dbg_hex((u32)head);

  // ... important...  
  if ( (head == NULL) || (tail == NULL) || (num == 0) ) { 
80003b42:	70 07       	ld.w	r7,r8[0x0]
80003b44:	58 07       	cp.w	r7,0
80003b46:	c1 d0       	breq	80003b80 <process_timers+0x44>
80003b48:	e0 68 07 bc 	mov	r8,1980
80003b4c:	70 08       	ld.w	r8,r8[0x0]
80003b4e:	58 08       	cp.w	r8,0
80003b50:	c1 80       	breq	80003b80 <process_timers+0x44>
80003b52:	e0 65 07 b8 	mov	r5,1976
80003b56:	6a 08       	ld.w	r8,r5[0x0]
80003b58:	58 08       	cp.w	r8,0
    //    print_dbg("\r\n processing empty timer list");
    return; 
  }

  for(i = 0; i<num; ++i) {
    --(t->ticksRemain);
80003b5a:	c1 30       	breq	80003b80 <process_timers+0x44>
80003b5c:	30 06       	mov	r6,0
80003b5e:	c0 e8       	rjmp	80003b7a <process_timers+0x3e>
  if ( (head == NULL) || (tail == NULL) || (num == 0) ) { 
    //    print_dbg("\r\n processing empty timer list");
    return; 
  }

  for(i = 0; i<num; ++i) {
80003b60:	6e 08       	ld.w	r8,r7[0x0]
    --(t->ticksRemain);
    if(t->ticksRemain == 0) {
80003b62:	20 18       	sub	r8,1
80003b64:	8f 08       	st.w	r7[0x0],r8
80003b66:	2f f6       	sub	r6,-1
      (*(t->callback))(t->caller);   
80003b68:	6e 08       	ld.w	r8,r7[0x0]
80003b6a:	58 08       	cp.w	r8,0
80003b6c:	c0 61       	brne	80003b78 <process_timers+0x3c>
      t->ticksRemain = t->ticks;
80003b6e:	6e 28       	ld.w	r8,r7[0x8]
80003b70:	6e 5c       	ld.w	r12,r7[0x14]
      //      print_dbg("\r\n triggered timer callback @ 0x");
      //      print_dbg_hex((u32)t);
    }
    t = t->next;
80003b72:	5d 18       	icall	r8
  if ( (head == NULL) || (tail == NULL) || (num == 0) ) { 
    //    print_dbg("\r\n processing empty timer list");
    return; 
  }

  for(i = 0; i<num; ++i) {
80003b74:	6e 18       	ld.w	r8,r7[0x4]
80003b76:	8f 08       	st.w	r7[0x0],r8
80003b78:	6e 37       	ld.w	r7,r7[0xc]
80003b7a:	6a 08       	ld.w	r8,r5[0x0]
80003b7c:	10 36       	cp.w	r6,r8
80003b7e:	cf 13       	brcs	80003b60 <process_timers+0x24>
80003b80:	d8 22       	popm	r4-r7,pc
80003b82:	d7 03       	nop

80003b84 <timer_set>:
80003b84:	99 1b       	st.w	r12[0x4],r11
80003b86:	78 08       	ld.w	r8,r12[0x0]
}


void timer_set(softTimer_t* timer, u32 ticks) {
  timer->ticks = ticks;
  if(timer->ticksRemain > ticks) timer->ticksRemain = ticks;
80003b88:	16 38       	cp.w	r8,r11
80003b8a:	5e 8c       	retls	r12
80003b8c:	99 0b       	st.w	r12[0x0],r11
80003b8e:	5e fc       	retal	r12

80003b90 <timer_remove>:
  int i;
  volatile softTimer_t* pt = NULL;
  u8 found = 0;

  // disable timer interrupts
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);
80003b90:	d3 43       	ssrf	0x14


  // not linked
  if( (t->next == NULL) || (t->prev == NULL)) { return 0; }
80003b92:	78 38       	ld.w	r8,r12[0xc]
80003b94:	58 08       	cp.w	r8,0
80003b96:	c3 20       	breq	80003bfa <timer_remove+0x6a>
80003b98:	78 48       	ld.w	r8,r12[0x10]
80003b9a:	58 08       	cp.w	r8,0
80003b9c:	c2 f0       	breq	80003bfa <timer_remove+0x6a>

  // check head
  if(t == head) { 
80003b9e:	e0 69 07 b4 	mov	r9,1972
80003ba2:	72 08       	ld.w	r8,r9[0x0]
80003ba4:	10 3c       	cp.w	r12,r8
    found = 1;
    head = t->next;
80003ba6:	c0 31       	brne	80003bac <timer_remove+0x1c>
80003ba8:	78 38       	ld.w	r8,r12[0xc]
  }
  // check tail
  else if(t == tail) { 
80003baa:	c0 b8       	rjmp	80003bc0 <timer_remove+0x30>
80003bac:	e0 69 07 bc 	mov	r9,1980
80003bb0:	72 0a       	ld.w	r10,r9[0x0]
80003bb2:	14 3c       	cp.w	r12,r10
    found = 1;
    tail = t->prev; 
  } else {
    // search 
    pt = head;
    for(i=0; i<num; ++i) {
80003bb4:	c0 50       	breq	80003bbe <timer_remove+0x2e>
80003bb6:	30 09       	mov	r9,0
    head = t->next;
  }
  // check tail
  else if(t == tail) { 
    found = 1;
    tail = t->prev; 
80003bb8:	e0 6a 07 b8 	mov	r10,1976
80003bbc:	c0 88       	rjmp	80003bcc <timer_remove+0x3c>
  } else {
    // search 
    pt = head;
    for(i=0; i<num; ++i) {
      if(pt == t) {
80003bbe:	78 48       	ld.w	r8,r12[0x10]
80003bc0:	93 08       	st.w	r9[0x0],r8
	// found it
	found = 1;
	break;
      }
      pt = pt->next;
80003bc2:	c0 a8       	rjmp	80003bd6 <timer_remove+0x46>
    found = 1;
    tail = t->prev; 
  } else {
    // search 
    pt = head;
    for(i=0; i<num; ++i) {
80003bc4:	18 38       	cp.w	r8,r12
80003bc6:	c0 80       	breq	80003bd6 <timer_remove+0x46>
80003bc8:	70 38       	ld.w	r8,r8[0xc]
80003bca:	2f f9       	sub	r9,-1
80003bcc:	74 0b       	ld.w	r11,r10[0x0]
80003bce:	16 39       	cp.w	r9,r11
      pt = pt->next;
    }
  }
  if(found) {
    // unlink and decrement
    (t->next)->prev = t->prev;
80003bd0:	cf a3       	brcs	80003bc4 <timer_remove+0x34>
80003bd2:	30 0c       	mov	r12,0
80003bd4:	c1 18       	rjmp	80003bf6 <timer_remove+0x66>
    (t->prev)->next = t->next;
80003bd6:	78 38       	ld.w	r8,r12[0xc]
80003bd8:	78 49       	ld.w	r9,r12[0x10]
80003bda:	91 49       	st.w	r8[0x10],r9
    t->next = t->prev = 0;
80003bdc:	78 48       	ld.w	r8,r12[0x10]
80003bde:	78 39       	ld.w	r9,r12[0xc]
80003be0:	91 39       	st.w	r8[0xc],r9
80003be2:	30 08       	mov	r8,0
    --num;
80003be4:	99 48       	st.w	r12[0x10],r8
80003be6:	78 48       	ld.w	r8,r12[0x10]
80003be8:	99 38       	st.w	r12[0xc],r8
80003bea:	e0 68 07 b8 	mov	r8,1976
  }

  // enable timer interrupts
  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
80003bee:	30 1c       	mov	r12,1
  return found;
80003bf0:	70 09       	ld.w	r9,r8[0x0]
80003bf2:	20 19       	sub	r9,1
80003bf4:	91 09       	st.w	r8[0x0],r9
80003bf6:	d5 43       	csrf	0x14
80003bf8:	5e fc       	retal	r12
80003bfa:	5e fd       	retal	0

80003bfc <timer_add>:
80003bfc:	d4 21       	pushm	r4-r7,lr
80003bfe:	d3 43       	ssrf	0x14
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);

  // print_dbg("\r\n timer_add, @ 0x");
  // print_dbg_hex((u32)t);

  if(t->prev == NULL || t->next == NULL) {
80003c00:	78 48       	ld.w	r8,r12[0x10]
80003c02:	58 08       	cp.w	r8,0
80003c04:	c0 60       	breq	80003c10 <timer_add+0x14>
80003c06:	78 38       	ld.w	r8,r12[0xc]
80003c08:	58 08       	cp.w	r8,0
80003c0a:	c0 30       	breq	80003c10 <timer_add+0x14>
80003c0c:	30 0c       	mov	r12,0
80003c0e:	c2 a8       	rjmp	80003c62 <timer_add+0x66>
    // print_dbg(" ; timer is unlinked ");
    // is list empty?
    if( (head == NULL) || (tail == NULL)) {
80003c10:	e0 68 07 b4 	mov	r8,1972
80003c14:	70 08       	ld.w	r8,r8[0x0]
80003c16:	58 08       	cp.w	r8,0
80003c18:	c0 60       	breq	80003c24 <timer_add+0x28>
80003c1a:	e0 67 07 bc 	mov	r7,1980
80003c1e:	6e 0e       	ld.w	lr,r7[0x0]
      // print_dbg(" ; list was empty ");
      head = tail = t;
80003c20:	58 0e       	cp.w	lr,0
80003c22:	c0 e1       	brne	80003c3e <timer_add+0x42>
80003c24:	e0 68 07 bc 	mov	r8,1980
      t->next = t->prev = t;
80003c28:	91 0c       	st.w	r8[0x0],r12
80003c2a:	e0 68 07 b4 	mov	r8,1972
80003c2e:	91 0c       	st.w	r8[0x0],r12
      num = 1;
80003c30:	99 4c       	st.w	r12[0x10],r12
80003c32:	78 48       	ld.w	r8,r12[0x10]
      // print_dbg(" ; added timer as sole element ");

    } else {
      // list not empty, add to tail
      tail->next = t;
80003c34:	30 1e       	mov	lr,1
      head->prev = t;
80003c36:	99 38       	st.w	r12[0xc],r8
      t->prev = tail;
80003c38:	e0 68 07 b8 	mov	r8,1976
      t->next = head;
      tail = t;
80003c3c:	c0 a8       	rjmp	80003c50 <timer_add+0x54>
      ++num; 
80003c3e:	9d 3c       	st.w	lr[0xc],r12
80003c40:	91 4c       	st.w	r8[0x10],r12
80003c42:	99 4e       	st.w	r12[0x10],lr
80003c44:	99 38       	st.w	r12[0xc],r8

    } 
    t->callback = callback; 
80003c46:	8f 0c       	st.w	r7[0x0],r12
    t->caller = obj;
80003c48:	e0 68 07 b8 	mov	r8,1976
    if(ticks < 1) { ticks = 1; }
80003c4c:	70 0e       	ld.w	lr,r8[0x0]
80003c4e:	2f fe       	sub	lr,-1
    t->ticksRemain = ticks;
80003c50:	91 0e       	st.w	r8[0x0],lr
    t->ticks = ticks;
80003c52:	99 2a       	st.w	r12[0x8],r10
80003c54:	99 59       	st.w	r12[0x14],r9
    // print_dbg(" ; timer was already linked, aborting ");
    ret = 0;
  }

  // enable timer interrupts
  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
80003c56:	58 0b       	cp.w	r11,0
  return ret;
}
80003c58:	f9 bb 00 01 	moveq	r11,1
80003c5c:	99 0b       	st.w	r12[0x0],r11
80003c5e:	99 1b       	st.w	r12[0x4],r11
80003c60:	30 1c       	mov	r12,1
80003c62:	d5 43       	csrf	0x14
80003c64:	d8 22       	popm	r4-r7,pc
80003c66:	d7 03       	nop

80003c68 <usb_mode_change>:
   */

// usb mode change callback
void usb_mode_change(bool b_host_mode) {
  // print_dbg("\r\n mode change (ignore) ");
}
80003c68:	5e fc       	retal	r12

80003c6a <usb_vbus_change>:
 
// usb Vbus change callback
void usb_vbus_change(bool b_vbus_present) {
  // print_dbg("\r\n usb vbus change, new status: ");
  // print_dbg_ulong(b_vbus_present);
}
80003c6a:	5e fc       	retal	r12

80003c6c <usb_vbus_error>:

// usb vbus error callback
void usb_vbus_error(void) {
  // print_dbg("\r\n ******************* usb vbus error");

}
80003c6c:	5e fc       	retal	r12

80003c6e <usb_connection>:
void usb_connection(uhc_device_t *dev, bool b_present) {
    // print_dbg("\r\n usb device connection: ");
    // print_dbg_hex(dev);
    // print_dbg(" , ");
    // print_dbg_ulong(b_present);
}
80003c6e:	5e fc       	retal	r12

80003c70 <usb_wakeup>:

// usb wakeup callback
void usb_wakeup(void) {
    // print_dbg("\r\n usb wakeup");
}
80003c70:	5e fc       	retal	r12

80003c72 <usb_sof>:

// usb start-of-frame callback
void usb_sof(void) {
     // print_dbg("\r\n usb sof");
}
80003c72:	5e fc       	retal	r12

80003c74 <usb_enum>:
  // print_dbg("\r\n usb enumerated: ");
  // print_dbg_hex(dev);
  // print_dbg(" , ");
  // print_dbg_hex(status);

}
80003c74:	5e fc       	retal	r12
80003c76:	d7 03       	nop

80003c78 <rnd>:
#include "types.h"
#include "util.h"

u32 rnd(void) {
  x1 = x1 * c1 + a1;
80003c78:	33 49       	mov	r9,52
80003c7a:	e0 6b f3 5f 	mov	r11,62303
80003c7e:	ea 1b 3c 6e 	orh	r11,0x3c6e
80003c82:	72 08       	ld.w	r8,r9[0x0]
80003c84:	e0 6a 66 0d 	mov	r10,26125
80003c88:	ea 1a 00 19 	orh	r10,0x19
80003c8c:	b7 38       	mul	r8,r11
80003c8e:	14 08       	add	r8,r10
80003c90:	93 08       	st.w	r9[0x0],r8
  x2 = x2 * c2 + a2;
80003c92:	33 88       	mov	r8,56
80003c94:	70 0c       	ld.w	r12,r8[0x0]
80003c96:	f8 0b 03 4a 	mac	r10,r12,r11
80003c9a:	91 0a       	st.w	r8[0x0],r10
  return (x1>>16) | (x2>>16);
80003c9c:	72 09       	ld.w	r9,r9[0x0]
80003c9e:	70 0c       	ld.w	r12,r8[0x0]
80003ca0:	f2 08 16 10 	lsr	r8,r9,0x10
}
80003ca4:	f1 ec 13 0c 	or	r12,r8,r12>>0x10
80003ca8:	5e fc       	retal	r12
80003caa:	d7 03       	nop

80003cac <ftdi_rx_done>:
//------- static functions

static void ftdi_rx_done(  usb_add_t add,
			   usb_ep_t ep,
			   uhd_trans_status_t stat,
			   iram_size_t nb) {
80003cac:	d4 01       	pushm	lr
  status = stat;
80003cae:	e0 68 08 14 	mov	r8,2068
  rxBusy = 0;
80003cb2:	91 0a       	st.w	r8[0x0],r10
  rxBytes = nb - FTDI_STATUS_BYTES;
80003cb4:	e0 68 08 04 	mov	r8,2052
static void ftdi_rx_done(  usb_add_t add,
			   usb_ep_t ep,
			   uhd_trans_status_t stat,
			   iram_size_t nb) {
  status = stat;
  rxBusy = 0;
80003cb8:	20 29       	sub	r9,2
  rxBytes = nb - FTDI_STATUS_BYTES;
80003cba:	30 0a       	mov	r10,0
80003cbc:	b0 8a       	st.b	r8[0x0],r10
  /* print_dbg_ulong(nb); */
  /* print_dbg(" ; status bytes: 0x"); */
  /* print_dbg_hex(rxBuf[0]); */
  /* print_dbg(" 0x"); */
  /* print_dbg_hex(rxBuf[1]); */			    
  if(rxBytes) {
80003cbe:	e0 68 08 08 	mov	r8,2056
    // check for monome events
    //    if(monome_read_serial != NULL) { 
      (*monome_read_serial)(); 
80003cc2:	91 09       	st.w	r8[0x0],r9
80003cc4:	58 09       	cp.w	r9,0
80003cc6:	c0 40       	breq	80003cce <ftdi_rx_done+0x22>
80003cc8:	33 08       	mov	r8,48
80003cca:	70 08       	ld.w	r8,r8[0x0]
80003ccc:	5d 18       	icall	r8
80003cce:	d8 02       	popm	pc

80003cd0 <ftdi_tx_done>:
80003cd0:	e0 68 08 14 	mov	r8,2068
80003cd4:	30 09       	mov	r9,0
80003cd6:	91 0a       	st.w	r8[0x0],r10
80003cd8:	e0 68 07 c0 	mov	r8,1984
  if (status != UHD_TRANS_NOERROR) {
    // print_dbg("\r\n ftdi tx error");
    return;
  }
  
}
80003cdc:	b0 89       	st.b	r8[0x0],r9
80003cde:	5e fc       	retal	r12

80003ce0 <ftdi_rx_buf>:
80003ce0:	e0 6c 07 c4 	mov	r12,1988


// rx buffer (no status bytes)
extern u8* ftdi_rx_buf() {
  return rxBuf + 2;
}
80003ce4:	2f ec       	sub	r12,-2
80003ce6:	5e fc       	retal	r12

80003ce8 <ftdi_rx_bytes>:
80003ce8:	e0 68 08 08 	mov	r8,2056

// number of bytes from last rx trasnfer
extern volatile u8 ftdi_rx_bytes() {
  return rxBytes;
}
80003cec:	11 bc       	ld.ub	r12,r8[0x3]
80003cee:	5e fc       	retal	r12

80003cf0 <ftdi_rx_busy>:
80003cf0:	e0 68 08 04 	mov	r8,2052

// busy flags
extern volatile u8 ftdi_rx_busy() {
  return rxBusy;
}
80003cf4:	11 8c       	ld.ub	r12,r8[0x0]
80003cf6:	5e fc       	retal	r12

80003cf8 <ftdi_tx_busy>:
80003cf8:	e0 68 07 c0 	mov	r8,1984

extern volatile u8 ftdi_tx_busy() {
  return txBusy;
}
80003cfc:	11 8c       	ld.ub	r12,r8[0x0]
80003cfe:	5e fc       	retal	r12

80003d00 <ftdi_setup>:
80003d00:	d4 01       	pushm	lr
80003d02:	20 3d       	sub	sp,12
  char * serstr;
  //  u8 matchMonome;
  // print_dbg("\r\n FTDI setup routine");

  // get string data...
  ftdi_get_strings(&manstr, &prodstr, &serstr);  
80003d04:	1a 9a       	mov	r10,sp
80003d06:	fa cb ff fc 	sub	r11,sp,-4
80003d0a:	fa cc ff f8 	sub	r12,sp,-8
80003d0e:	c5 bc       	rcall	80003dc4 <ftdi_get_strings>
80003d10:	40 0a       	lddsp	r10,sp[0x0]
  // print the strings
  // print_unicode_string(manstr, FTDI_STRING_MAX_LEN);
  //  print_unicode_string(prodstr, FTDI_STRING_MAX_LEN);
  //  print_unicode_string(serstr, FTDI_STRING_MAX_LEN);
  //// query if this is a monome device
  check_monome_device_desc(manstr, prodstr, serstr);
80003d12:	40 1b       	lddsp	r11,sp[0x4]
80003d14:	40 2c       	lddsp	r12,sp[0x8]
80003d16:	fe b0 fd 49 	rcall	800037a8 <check_monome_device_desc>
80003d1a:	30 19       	mov	r9,1
  //// TODO: other protocols??

  // set connection flag
  ftdiConnect = 1;
80003d1c:	e0 68 07 c1 	mov	r8,1985
80003d20:	b0 89       	st.b	r8[0x0],r9
}
80003d22:	2f dd       	sub	sp,-12
80003d24:	d8 02       	popm	pc
80003d26:	d7 03       	nop

80003d28 <ftdi_change>:
80003d28:	d4 01       	pushm	lr
80003d2a:	e0 68 08 0c 	mov	r8,2060
80003d2e:	58 0b       	cp.w	r11,0
80003d30:	c0 30       	breq	80003d36 <ftdi_change+0xe>
80003d32:	30 69       	mov	r9,6
void ftdi_change(uhc_device_t* dev, u8 plug) {
  // print_dbg("\r\n changed FTDI connection status");
  if(plug) { 
    e.type = kEventFtdiConnect; 
  } else {
    e.type = kEventFtdiDisconnect;
80003d34:	c0 28       	rjmp	80003d38 <ftdi_change+0x10>
80003d36:	30 79       	mov	r9,7
  }
  // posting an event so the main loop can respond
  event_post(&e); 
80003d38:	91 09       	st.w	r8[0x0],r9
80003d3a:	e0 6c 08 0c 	mov	r12,2060
}
80003d3e:	fe b0 f8 d9 	rcall	80002ef0 <event_post>
80003d42:	d8 02       	popm	pc

80003d44 <ftdi_read>:
80003d44:	d4 01       	pushm	lr
80003d46:	30 09       	mov	r9,0
    // print_dbg("\r\n error requesting ftdi output pipe");
  }
}
    
void ftdi_read(void) {
  rxBytes = 0;
80003d48:	e0 68 08 08 	mov	r8,2056
  rxBusy = true;
80003d4c:	91 09       	st.w	r8[0x0],r9
80003d4e:	30 19       	mov	r9,1
  if (!uhi_ftdi_in_run((u8*)rxBuf,
80003d50:	e0 68 08 04 	mov	r8,2052
80003d54:	fe ca 00 a8 	sub	r10,pc,168
80003d58:	b0 89       	st.b	r8[0x0],r9
80003d5a:	34 0b       	mov	r11,64
80003d5c:	e0 6c 07 c4 	mov	r12,1988
		       FTDI_RX_BUF_SIZE, &ftdi_rx_done)) {
    print_dbg("\r\n ftdi rx transfer error");
80003d60:	cb 2c       	rcall	80003ec4 <uhi_ftdi_in_run>
80003d62:	c0 51       	brne	80003d6c <ftdi_read+0x28>
80003d64:	fe cc c5 74 	sub	r12,pc,-14988
80003d68:	e0 a0 10 82 	rcall	80005e6c <print_dbg>
80003d6c:	d8 02       	popm	pc
80003d6e:	d7 03       	nop

80003d70 <ftdi_write>:
80003d70:	d4 01       	pushm	lr
80003d72:	30 19       	mov	r9,1
80003d74:	e0 68 07 c0 	mov	r8,1984
80003d78:	fe ca 00 a8 	sub	r10,pc,168
80003d7c:	b0 89       	st.b	r8[0x0],r9
80003d7e:	c9 1c       	rcall	80003ea0 <uhi_ftdi_out_run>
80003d80:	d8 02       	popm	pc
80003d82:	d7 03       	nop

80003d84 <ctl_req_end>:
		uhd_trans_status_t status,
		uint16_t payload_trans) {
  // last transfer ok?
  //  print_dbg("\r\n ctl request end, status: ");
  //  print_dbg_hex((u32)status);
  ctlReadBusy = 0;
80003d84:	30 09       	mov	r9,0
80003d86:	e0 68 08 20 	mov	r8,2080
}
80003d8a:	b0 89       	st.b	r8[0x0],r9
80003d8c:	5e fc       	retal	r12
80003d8e:	d7 03       	nop

80003d90 <send_ctl_request>:

// send control request
static u8 send_ctl_request(u8 reqtype, u8 reqnum, 
			   u8* data, u16 size,
			     u16 index, u16 val, 
			     uhd_callback_setup_end_t callbackEnd) {
80003d90:	d4 21       	pushm	r4-r7,lr
80003d92:	20 2d       	sub	sp,8
  /* } */

  req.bmRequestType = reqtype;
  req.bRequest = reqnum;
  req.wValue = (val);
  req.wIndex = (index);
80003d94:	ba 28       	st.h	sp[0x4],r8

// send control request
static u8 send_ctl_request(u8 reqtype, u8 reqnum, 
			   u8* data, u16 size,
			     u16 index, u16 val, 
			     uhd_callback_setup_end_t callbackEnd) {
80003d96:	fa c4 ff e4 	sub	r4,sp,-28
80003d9a:	68 18       	ld.w	r8,r4[0x4]
  /* if (uhi_ftdi_dev.dev != dev) { */
  /*   return;  // No interface to enable */
  /* } */

  req.bmRequestType = reqtype;
  req.bRequest = reqnum;
80003d9c:	ba 9b       	st.b	sp[0x1],r11
 
  /* if (uhi_ftdi_dev.dev != dev) { */
  /*   return;  // No interface to enable */
  /* } */

  req.bmRequestType = reqtype;
80003d9e:	ba 8c       	st.b	sp[0x0],r12
  req.bRequest = reqnum;
  req.wValue = (val);
  req.wIndex = (index);
  req.wLength = (size);
  return uhd_setup_request(
80003da0:	1a d8       	st.w	--sp,r8

// send control request
static u8 send_ctl_request(u8 reqtype, u8 reqnum, 
			   u8* data, u16 size,
			     u16 index, u16 val, 
			     uhd_callback_setup_end_t callbackEnd) {
80003da2:	68 08       	ld.w	r8,r4[0x0]
  /*   return;  // No interface to enable */
  /* } */

  req.bmRequestType = reqtype;
  req.bRequest = reqnum;
  req.wValue = (val);
80003da4:	ba 38       	st.h	sp[0x6],r8
  req.wIndex = (index);
  req.wLength = (size);
  return uhd_setup_request(
80003da6:	e0 68 08 18 	mov	r8,2072

  req.bmRequestType = reqtype;
  req.bRequest = reqnum;
  req.wValue = (val);
  req.wIndex = (index);
  req.wLength = (size);
80003daa:	70 08       	ld.w	r8,r8[0x0]
  return uhd_setup_request(
80003dac:	ba 59       	st.h	sp[0xa],r9
80003dae:	fa cb ff fc 	sub	r11,sp,-4
80003db2:	5c 79       	castu.h	r9
80003db4:	f1 3c 00 12 	ld.ub	r12,r8[18]
80003db8:	30 08       	mov	r8,0
80003dba:	e0 a0 0a 41 	rcall	8000523c <uhd_setup_request>
			   data,
			   size,
			   NULL,
			   callbackEnd
			   );
}
80003dbe:	2f fd       	sub	sp,-4
80003dc0:	2f ed       	sub	sp,-8
80003dc2:	d8 22       	popm	r4-r7,pc

80003dc4 <ftdi_get_strings>:
80003dc4:	d4 21       	pushm	r4-r7,lr
80003dc6:	30 18       	mov	r8,1
80003dc8:	e0 67 08 20 	mov	r7,2080

  // get manufacturer string
  ctlReadBusy = 1;
  //  print_dbg("\r\n sending ctl request for manufacturer string, index : ");
  //  print_dbg_hex(uhi_ftdi_dev.dev->dev_desc.iManufacturer);
  if(!(send_ctl_request(
80003dcc:	ae 88       	st.b	r7[0x0],r8
80003dce:	fe c8 00 4a 	sub	r8,pc,74
80003dd2:	1a d8       	st.w	--sp,r8
80003dd4:	e0 68 08 18 	mov	r8,2072
80003dd8:	70 08       	ld.w	r8,r8[0x0]
80003dda:	f1 38 00 0e 	ld.ub	r8,r8[14]
80003dde:	e8 18 03 00 	orl	r8,0x300
  //  print_dbg_hex((u32)status);
  ctlReadBusy = 0;
}

// read eeprom
void ftdi_get_strings(char** pManufacturer, char** pProduct, char** pSerial) {
80003de2:	18 96       	mov	r6,r12

  // get manufacturer string
  ctlReadBusy = 1;
  //  print_dbg("\r\n sending ctl request for manufacturer string, index : ");
  //  print_dbg_hex(uhi_ftdi_dev.dev->dev_desc.iManufacturer);
  if(!(send_ctl_request(
80003de4:	1a d8       	st.w	--sp,r8
80003de6:	16 95       	mov	r5,r11
80003de8:	14 94       	mov	r4,r10
80003dea:	e0 68 04 09 	mov	r8,1033
80003dee:	34 09       	mov	r9,64
80003df0:	e0 6a 0c 7c 	mov	r10,3196
80003df4:	30 6b       	mov	r11,6
80003df6:	e0 6c 00 80 	mov	r12,128
80003dfa:	cc bf       	rcall	80003d90 <send_ctl_request>
       )) {
    // print_dbg("\r\n control request for string descriptor failed");
    return;
  }
  // wait for transfer end
  while(ctlReadBusy) { ;; } 
80003dfc:	2f ed       	sub	sp,-8
80003dfe:	58 0c       	cp.w	r12,0
80003e00:	c4 e0       	breq	80003e9c <ftdi_get_strings+0xd8>
80003e02:	0e 98       	mov	r8,r7
80003e04:	e0 67 08 20 	mov	r7,2080

  // get product string
  ctlReadBusy = 1;
80003e08:	11 89       	ld.ub	r9,r8[0x0]
  //  print_dbg("\r\n sending ctl request for product string, index : ");
  //  print_dbg_ulong( uhi_ftdi_dev.dev->dev_desc.iProduct);
  if(!(send_ctl_request(
80003e0a:	58 09       	cp.w	r9,0
80003e0c:	cf c1       	brne	80003e04 <ftdi_get_strings+0x40>
80003e0e:	30 18       	mov	r8,1
80003e10:	ae 88       	st.b	r7[0x0],r8
80003e12:	fe c8 00 8e 	sub	r8,pc,142
80003e16:	1a d8       	st.w	--sp,r8
80003e18:	e0 68 08 18 	mov	r8,2072
80003e1c:	70 08       	ld.w	r8,r8[0x0]
80003e1e:	f1 38 00 0f 	ld.ub	r8,r8[15]
80003e22:	e8 18 03 00 	orl	r8,0x300
80003e26:	34 09       	mov	r9,64
80003e28:	1a d8       	st.w	--sp,r8
80003e2a:	e0 6a 0c fc 	mov	r10,3324
80003e2e:	e0 68 04 09 	mov	r8,1033
80003e32:	30 6b       	mov	r11,6
       )) {
    // print_dbg("\r\n control request for string descriptor failed");
    return;
  }
  // wait for transfer end
  while(ctlReadBusy) { ;; } 
80003e34:	e0 6c 00 80 	mov	r12,128
80003e38:	ca cf       	rcall	80003d90 <send_ctl_request>
80003e3a:	2f ed       	sub	sp,-8
80003e3c:	58 0c       	cp.w	r12,0

  // get serial string
  ctlReadBusy = 1;
80003e3e:	c2 f0       	breq	80003e9c <ftdi_get_strings+0xd8>
80003e40:	0e 98       	mov	r8,r7
  // print_dbg("\r\n sending ctl request for serial string : ");
  if(!(send_ctl_request(
80003e42:	e0 67 08 20 	mov	r7,2080
80003e46:	11 89       	ld.ub	r9,r8[0x0]
80003e48:	58 09       	cp.w	r9,0
80003e4a:	cf c1       	brne	80003e42 <ftdi_get_strings+0x7e>
80003e4c:	30 18       	mov	r8,1
80003e4e:	ae 88       	st.b	r7[0x0],r8
80003e50:	fe c8 00 cc 	sub	r8,pc,204
80003e54:	1a d8       	st.w	--sp,r8
80003e56:	e0 68 08 18 	mov	r8,2072
80003e5a:	70 08       	ld.w	r8,r8[0x0]
80003e5c:	f1 38 00 10 	ld.ub	r8,r8[16]
80003e60:	e8 18 03 00 	orl	r8,0x300
80003e64:	34 09       	mov	r9,64
80003e66:	1a d8       	st.w	--sp,r8
80003e68:	e0 6a 0c bc 	mov	r10,3260
       )) {
    // print_dbg("\r\n control request for string descriptor failed");
    return;
  }
  // wait for transfer end
  while(ctlReadBusy) { ;; }
80003e6c:	e0 68 04 09 	mov	r8,1033
80003e70:	30 6b       	mov	r11,6

  //  print_dbg("\r\n requested all string descriptors.");
  *pManufacturer = manufacturer_string + FTDI_STRING_DESC_OFFSET;
80003e72:	e0 6c 00 80 	mov	r12,128
80003e76:	c8 df       	rcall	80003d90 <send_ctl_request>
  *pProduct = product_string + FTDI_STRING_DESC_OFFSET;
80003e78:	2f ed       	sub	sp,-8
80003e7a:	58 0c       	cp.w	r12,0
80003e7c:	c1 00       	breq	80003e9c <ftdi_get_strings+0xd8>
  *pSerial = serial_string + FTDI_STRING_DESC_OFFSET;
80003e7e:	0f 88       	ld.ub	r8,r7[0x0]
80003e80:	58 08       	cp.w	r8,0
80003e82:	cf e1       	brne	80003e7e <ftdi_get_strings+0xba>
80003e84:	e0 68 0c 7c 	mov	r8,3196
80003e88:	2f e8       	sub	r8,-2
80003e8a:	8d 08       	st.w	r6[0x0],r8
80003e8c:	e0 68 0c fc 	mov	r8,3324
80003e90:	2f e8       	sub	r8,-2
80003e92:	8b 08       	st.w	r5[0x0],r8
80003e94:	e0 68 0c bc 	mov	r8,3260
80003e98:	2f e8       	sub	r8,-2
80003e9a:	89 08       	st.w	r4[0x0],r8
80003e9c:	d8 22       	popm	r4-r7,pc
80003e9e:	d7 03       	nop

80003ea0 <uhi_ftdi_out_run>:
80003ea0:	d4 01       	pushm	lr
80003ea2:	1a da       	st.w	--sp,r10
}

// run the output endpoint (bulk)
bool uhi_ftdi_out_run(uint8_t * buf, iram_size_t buf_size,
		      uhd_callback_trans_t callback) {
  return uhd_ep_run(uhi_ftdi_dev.dev->address,
80003ea4:	16 98       	mov	r8,r11
80003ea6:	18 99       	mov	r9,r12
80003ea8:	e0 6a 08 18 	mov	r10,2072
80003eac:	e0 6c 4e 20 	mov	r12,20000
80003eb0:	15 db       	ld.ub	r11,r10[0x5]
80003eb2:	74 0a       	ld.w	r10,r10[0x0]
80003eb4:	1a dc       	st.w	--sp,r12
80003eb6:	f5 3c 00 12 	ld.ub	r12,r10[18]
80003eba:	30 1a       	mov	r10,1
80003ebc:	e0 a0 08 f6 	rcall	800050a8 <uhd_ep_run>
		    uhi_ftdi_dev.ep_out, true, buf, buf_size,
		    UHI_FTDI_TIMEOUT, callback);
}
80003ec0:	2f ed       	sub	sp,-8
80003ec2:	d8 02       	popm	pc

80003ec4 <uhi_ftdi_in_run>:
80003ec4:	d4 01       	pushm	lr
80003ec6:	1a da       	st.w	--sp,r10
80003ec8:	16 98       	mov	r8,r11
80003eca:	18 99       	mov	r9,r12
}

// run the input endpoint (bulk)
bool uhi_ftdi_in_run(uint8_t * buf, iram_size_t buf_size,
		     uhd_callback_trans_t callback) {
  return uhd_ep_run(uhi_ftdi_dev.dev->address,
80003ecc:	e0 6a 08 18 	mov	r10,2072
80003ed0:	e0 6c 4e 20 	mov	r12,20000
80003ed4:	15 cb       	ld.ub	r11,r10[0x4]
80003ed6:	74 0a       	ld.w	r10,r10[0x0]
80003ed8:	1a dc       	st.w	--sp,r12
80003eda:	f5 3c 00 12 	ld.ub	r12,r10[18]
80003ede:	30 0a       	mov	r10,0
80003ee0:	e0 a0 08 e4 	rcall	800050a8 <uhd_ep_run>
		    uhi_ftdi_dev.ep_in, false, buf, buf_size,
		    UHI_FTDI_TIMEOUT, callback);
}
80003ee4:	2f ed       	sub	sp,-8
80003ee6:	d8 02       	popm	pc

80003ee8 <uhi_ftdi_uninstall>:
80003ee8:	d4 01       	pushm	lr
80003eea:	e0 68 08 18 	mov	r8,2072
80003eee:	70 0a       	ld.w	r10,r8[0x0]

  ftdi_change(dev, true);  
}

void uhi_ftdi_uninstall(uhc_device_t* dev) {
  if (uhi_ftdi_dev.dev != dev) {
80003ef0:	18 3a       	cp.w	r10,r12
    return; // Device not enabled in this interface
  }
  uhi_ftdi_dev.dev = NULL;
80003ef2:	c0 41       	brne	80003efa <uhi_ftdi_uninstall+0x12>
80003ef4:	30 0b       	mov	r11,0
  Assert(uhi_ftdi_dev.report!=NULL);
  ftdi_change(dev, false);  
80003ef6:	91 0b       	st.w	r8[0x0],r11
80003ef8:	c1 8f       	rcall	80003d28 <ftdi_change>
80003efa:	d8 02       	popm	pc

80003efc <uhi_ftdi_enable>:
80003efc:	d4 21       	pushm	r4-r7,lr
80003efe:	e0 68 08 18 	mov	r8,2072
80003f02:	70 06       	ld.w	r6,r8[0x0]
  return UHC_ENUM_UNSUPPORTED; // No interface supported
}

void uhi_ftdi_enable(uhc_device_t* dev) {

  if (uhi_ftdi_dev.dev != dev) {
80003f04:	18 36       	cp.w	r6,r12
  }
  /// bit mode (not bitbang? )
  /// todo: what do these mean???
  // val : ff
  // indx : 1
  send_ctl_request(FTDI_DEVICE_OUT_REQTYPE, 
80003f06:	c3 e1       	brne	80003f82 <uhi_ftdi_enable+0x86>
80003f08:	e0 68 00 ff 	mov	r8,255
80003f0c:	30 07       	mov	r7,0
80003f0e:	30 bb       	mov	r11,11
80003f10:	1a d7       	st.w	--sp,r7
80003f12:	0e 99       	mov	r9,r7
80003f14:	1a d8       	st.w	--sp,r8
80003f16:	0e 9a       	mov	r10,r7
80003f18:	30 18       	mov	r8,1
80003f1a:	34 0c       	mov	r12,64
80003f1c:	c3 af       	rcall	80003d90 <send_ctl_request>
		   NULL);
  /// line property
  /// todo: what do these mean???
  // index 1
  // val : 8
  send_ctl_request(FTDI_DEVICE_OUT_REQTYPE, 
80003f1e:	30 88       	mov	r8,8
80003f20:	1a d7       	st.w	--sp,r7
80003f22:	0e 99       	mov	r9,r7
80003f24:	1a d8       	st.w	--sp,r8
80003f26:	0e 9a       	mov	r10,r7
80003f28:	30 18       	mov	r8,1
80003f2a:	30 4b       	mov	r11,4
80003f2c:	34 0c       	mov	r12,64
80003f2e:	c3 1f       	rcall	80003d90 <send_ctl_request>
80003f30:	e0 69 c0 36 	mov	r9,49206
  /// baud rate
  // rq : 3
  // value: 26 (baudrate: 115200)
  // value: 49206 (baudrate : 57600)
  // index: 0
  send_ctl_request(FTDI_DEVICE_OUT_REQTYPE, 
80003f34:	1a d7       	st.w	--sp,r7
80003f36:	0e 98       	mov	r8,r7
80003f38:	1a d9       	st.w	--sp,r9
80003f3a:	0e 9a       	mov	r10,r7
80003f3c:	0e 99       	mov	r9,r7
80003f3e:	30 3b       	mov	r11,3
80003f40:	34 0c       	mov	r12,64
80003f42:	c2 7f       	rcall	80003d90 <send_ctl_request>
80003f44:	e0 68 03 e8 	mov	r8,1000
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80003f48:	30 09       	mov	r9,0
80003f4a:	e0 6a 7b e7 	mov	r10,31719
80003f4e:	ea 1a cb 41 	orh	r10,0xcb41
80003f52:	30 2b       	mov	r11,2
80003f54:	e0 a0 13 3a 	rcall	800065c8 <__avr32_udiv64>
80003f58:	e1 b8 00 42 	mfsr	r8,0x108
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003f5c:	f0 0a 00 0a 	add	r10,r8,r10
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003f60:	2f ad       	sub	sp,-24
80003f62:	e1 b9 00 42 	mfsr	r9,0x108
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003f66:	14 38       	cp.w	r8,r10
80003f68:	e0 88 00 05 	brls	80003f72 <uhi_ftdi_enable+0x76>
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003f6c:	10 39       	cp.w	r9,r8
80003f6e:	cf a2       	brcc	80003f62 <uhi_ftdi_enable+0x66>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003f70:	c0 38       	rjmp	80003f76 <uhi_ftdi_enable+0x7a>
80003f72:	10 39       	cp.w	r9,r8
80003f74:	c0 43       	brcs	80003f7c <uhi_ftdi_enable+0x80>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003f76:	14 39       	cp.w	r9,r10
80003f78:	fe 98 ff f5 	brls	80003f62 <uhi_ftdi_enable+0x66>
80003f7c:	0c 9c       	mov	r12,r6
80003f7e:	30 1b       	mov	r11,1
		   0, 49206,
		   NULL);

  delay_ms(200);

  ftdi_change(dev, true);  
80003f80:	cd 4e       	rcall	80003d28 <ftdi_change>
80003f82:	d8 22       	popm	r4-r7,pc

80003f84 <uhi_ftdi_install>:
80003f84:	d4 31       	pushm	r0-r7,lr
80003f86:	20 1d       	sub	sp,4
80003f88:	e0 63 08 18 	mov	r3,2072
80003f8c:	18 96       	mov	r6,r12
80003f8e:	66 05       	ld.w	r5,r3[0x0]
80003f90:	58 05       	cp.w	r5,0
80003f92:	c0 30       	breq	80003f98 <uhi_ftdi_install+0x14>
80003f94:	30 5c       	mov	r12,5
80003f96:	c6 58       	rjmp	80004060 <uhi_ftdi_install+0xdc>
80003f98:	98 d9       	ld.uh	r9,r12[0xa]
80003f9a:	f2 0a 16 08 	lsr	r10,r9,0x8

  // check vid/pid
  vid = le16_to_cpu(dev->dev_desc.idVendor);
  pid = le16_to_cpu(dev->dev_desc.idProduct);

  if( (vid == FTDI_VID) && (pid == FTDI_PID) ) {
80003f9e:	f5 e9 10 89 	or	r9,r10,r9<<0x8
80003fa2:	e0 6a 60 01 	mov	r10,24577
80003fa6:	98 c8       	ld.uh	r8,r12[0x8]
80003fa8:	f4 09 19 00 	cp.h	r9,r10
80003fac:	5f 09       	sreq	r9
80003fae:	f0 0a 16 08 	lsr	r10,r8,0x8
80003fb2:	f5 e8 10 88 	or	r8,r10,r8<<0x8
80003fb6:	e0 6a 04 03 	mov	r10,1027
80003fba:	f4 08 19 00 	cp.h	r8,r10
80003fbe:	5f 08       	sreq	r8
80003fc0:	10 69       	and	r9,r8
80003fc2:	ea 09 18 00 	cp.b	r9,r5
    ;; // this is an FTDI device, so continue
  } else {
    return UHC_ENUM_UNSUPPORTED;
  }

  conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
80003fc6:	c4 c0       	breq	8000405e <uhi_ftdi_install+0xda>
80003fc8:	78 68       	ld.w	r8,r12[0x18]
  ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
80003fca:	11 a4       	ld.ub	r4,r8[0x2]
    ;; // this is an FTDI device, so continue
  } else {
    return UHC_ENUM_UNSUPPORTED;
  }

  conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
80003fcc:	10 97       	mov	r7,r8
80003fce:	11 b8       	ld.ub	r8,r8[0x3]
80003fd0:	f1 e4 10 84 	or	r4,r8,r4<<0x8
80003fd4:	e8 08 16 08 	lsr	r8,r4,0x8
80003fd8:	30 40       	mov	r0,4
80003fda:	f1 e4 10 84 	or	r4,r8,r4<<0x8
80003fde:	3f f1       	mov	r1,-1
    case USB_DT_INTERFACE:
      if ((ptr_iface->bInterfaceClass == FTDI_CLASS)
	  && (ptr_iface->bInterfaceProtocol == FTDI_PROTOCOL) ) {
	// print_dbg("\r\n class/protocol matches FTDI. ");
	b_iface_supported = true;
	uhi_ftdi_dev.ep_in = 0;
80003fe0:	5c 84       	casts.h	r4
  conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
  ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
  b_iface_supported = false;

  while(conf_desc_lgt) {
    switch (ptr_iface->bDescriptorType) {
80003fe2:	0a 92       	mov	r2,r5

  conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
  ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
  b_iface_supported = false;

  while(conf_desc_lgt) {
80003fe4:	30 58       	mov	r8,5
    switch (ptr_iface->bDescriptorType) {
80003fe6:	c3 38       	rjmp	8000404c <uhi_ftdi_install+0xc8>
80003fe8:	0f 99       	ld.ub	r9,r7[0x1]
80003fea:	e0 09 18 00 	cp.b	r9,r0
80003fee:	c0 50       	breq	80003ff8 <uhi_ftdi_install+0x74>
80003ff0:	f0 09 18 00 	cp.b	r9,r8
80003ff4:	c2 81       	brne	80004044 <uhi_ftdi_install+0xc0>

    case USB_DT_INTERFACE:
      if ((ptr_iface->bInterfaceClass == FTDI_CLASS)
80003ff6:	c0 d8       	rjmp	80004010 <uhi_ftdi_install+0x8c>
80003ff8:	0f d9       	ld.ub	r9,r7[0x5]
80003ffa:	e2 09 18 00 	cp.b	r9,r1
	  && (ptr_iface->bInterfaceProtocol == FTDI_PROTOCOL) ) {
80003ffe:	c2 21       	brne	80004042 <uhi_ftdi_install+0xbe>
80004000:	0f f9       	ld.ub	r9,r7[0x7]
80004002:	e2 09 18 00 	cp.b	r9,r1
	// print_dbg("\r\n class/protocol matches FTDI. ");
	b_iface_supported = true;
	uhi_ftdi_dev.ep_in = 0;
80004006:	c1 e1       	brne	80004042 <uhi_ftdi_install+0xbe>
	uhi_ftdi_dev.ep_out = 0;
80004008:	a6 c2       	st.b	r3[0x4],r2
8000400a:	a6 d2       	st.b	r3[0x5],r2

  while(conf_desc_lgt) {
    switch (ptr_iface->bDescriptorType) {

    case USB_DT_INTERFACE:
      if ((ptr_iface->bInterfaceClass == FTDI_CLASS)
8000400c:	30 15       	mov	r5,1
	b_iface_supported = false;
      }
      break;

    case USB_DT_ENDPOINT:
      if (!b_iface_supported) {
8000400e:	c1 b8       	rjmp	80004044 <uhi_ftdi_install+0xc0>
80004010:	58 05       	cp.w	r5,0
	break;
      }
      if (!uhd_ep_alloc(dev->address, (usb_ep_desc_t*)ptr_iface)) {
80004012:	c1 90       	breq	80004044 <uhi_ftdi_install+0xc0>
80004014:	ed 3c 00 12 	ld.ub	r12,r6[18]
80004018:	0e 9b       	mov	r11,r7
8000401a:	50 08       	stdsp	sp[0x0],r8
8000401c:	e0 a0 09 9e 	rcall	80005358 <uhd_ep_alloc>
80004020:	40 08       	lddsp	r8,sp[0x0]
80004022:	c0 31       	brne	80004028 <uhi_ftdi_install+0xa4>
80004024:	30 4c       	mov	r12,4
	// print_dbg("\r\n endpoint allocation failed");
	return UHC_ENUM_HARDWARE_LIMIT;
      }

      switch(((usb_ep_desc_t*)ptr_iface)->bmAttributes & USB_EP_TYPE_MASK) {
80004026:	c1 d8       	rjmp	80004060 <uhi_ftdi_install+0xdc>
80004028:	0f b9       	ld.ub	r9,r7[0x3]
8000402a:	f3 d9 c0 02 	bfextu	r9,r9,0x0,0x2
8000402e:	58 29       	cp.w	r9,2
      case USB_EP_TYPE_BULK:
	//	print_dbg("\r\n allocating bulk endpoint: ");
	if (((usb_ep_desc_t*)ptr_iface)->bEndpointAddress & USB_EP_DIR_IN) {
80004030:	c0 a1       	brne	80004044 <uhi_ftdi_install+0xc0>
80004032:	0f a9       	ld.ub	r9,r7[0x2]
80004034:	e4 09 18 00 	cp.b	r9,r2
	  uhi_ftdi_dev.ep_in = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
80004038:	c0 34       	brge	8000403e <uhi_ftdi_install+0xba>
8000403a:	a6 c9       	st.b	r3[0x4],r9
	} else {
	  uhi_ftdi_dev.ep_out = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
8000403c:	c0 48       	rjmp	80004044 <uhi_ftdi_install+0xc0>
8000403e:	a6 d9       	st.b	r3[0x5],r9
80004040:	c0 28       	rjmp	80004044 <uhi_ftdi_install+0xc0>
    default:
      // print_dbg("\r\n ignoring descriptor in ftdi device enumeration");
      break;
    }
    Assert(conf_desc_lgt>=ptr_iface->bLength);
    conf_desc_lgt -= ptr_iface->bLength;
80004042:	30 05       	mov	r5,0
80004044:	0f 89       	ld.ub	r9,r7[0x0]
    ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
80004046:	12 14       	sub	r4,r9
    default:
      // print_dbg("\r\n ignoring descriptor in ftdi device enumeration");
      break;
    }
    Assert(conf_desc_lgt>=ptr_iface->bLength);
    conf_desc_lgt -= ptr_iface->bLength;
80004048:	12 07       	add	r7,r9

  conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
  ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
  b_iface_supported = false;

  while(conf_desc_lgt) {
8000404a:	5c 84       	casts.h	r4
8000404c:	58 04       	cp.w	r4,0
    Assert(conf_desc_lgt>=ptr_iface->bLength);
    conf_desc_lgt -= ptr_iface->bLength;
    ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
  }

  if (b_iface_supported) {
8000404e:	cc d1       	brne	80003fe8 <uhi_ftdi_install+0x64>
80004050:	58 05       	cp.w	r5,0
    uhi_ftdi_dev.dev = dev;
80004052:	c0 60       	breq	8000405e <uhi_ftdi_install+0xda>
80004054:	e0 68 08 18 	mov	r8,2072
    // print_dbg("\r\n completed FTDI device install");
    return UHC_ENUM_SUCCESS;
80004058:	08 9c       	mov	r12,r4
8000405a:	91 06       	st.w	r8[0x0],r6
  }
  return UHC_ENUM_UNSUPPORTED; // No interface supported
}
8000405c:	c0 28       	rjmp	80004060 <uhi_ftdi_install+0xdc>
8000405e:	30 1c       	mov	r12,1
80004060:	2f fd       	sub	sp,-4
80004062:	d8 32       	popm	r0-r7,pc

80004064 <flashc_set_bus_freq>:
}


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
80004064:	e0 68 8a 3f 	mov	r8,35391
80004068:	ea 18 01 f7 	orh	r8,0x1f7
8000406c:	10 3c       	cp.w	r12,r8
8000406e:	e0 88 00 07 	brls	8000407c <flashc_set_bus_freq+0x18>
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80004072:	fe 68 14 00 	mov	r8,-125952
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80004076:	30 1a       	mov	r10,1
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80004078:	70 09       	ld.w	r9,r8[0x0]
8000407a:	c0 58       	rjmp	80004084 <flashc_set_bus_freq+0x20>
8000407c:	fe 68 14 00 	mov	r8,-125952
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80004080:	30 0a       	mov	r10,0
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80004082:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80004084:	f3 da d0 c1 	bfins	r9,r10,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80004088:	91 09       	st.w	r8[0x0],r9
8000408a:	5e fc       	retal	r12

8000408c <flashc_default_wait_until_ready>:
//! @{


bool flashc_is_ready(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
8000408c:	fe 69 14 00 	mov	r9,-125952
}


void flashc_default_wait_until_ready(void)
{
	while (!flashc_is_ready());
80004090:	30 08       	mov	r8,0
//! @{


bool flashc_is_ready(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
80004092:	72 2a       	ld.w	r10,r9[0x8]
}


void flashc_default_wait_until_ready(void)
{
	while (!flashc_is_ready());
80004094:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80004098:	f0 0a 18 00 	cp.b	r10,r8
8000409c:	cf b0       	breq	80004092 <flashc_default_wait_until_ready+0x6>
}
8000409e:	5e fc       	retal	r12

800040a0 <flashc_issue_command>:
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
800040a0:	d4 21       	pushm	r4-r7,lr
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
800040a2:	33 c8       	mov	r8,60
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
800040a4:	18 97       	mov	r7,r12
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
800040a6:	70 08       	ld.w	r8,r8[0x0]
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
800040a8:	16 96       	mov	r6,r11
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
800040aa:	5d 18       	icall	r8
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
800040ac:	fe 68 14 00 	mov	r8,-125952
800040b0:	70 18       	ld.w	r8,r8[0x4]
	u_avr32_flashc_fcmd.FCMD.cmd = command;
800040b2:	f1 d7 d0 06 	bfins	r8,r7,0x0,0x6
	if (page_number >= 0) {
800040b6:	58 06       	cp.w	r6,0
800040b8:	c0 35       	brlt	800040be <flashc_issue_command+0x1e>
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
800040ba:	f1 d6 d1 10 	bfins	r8,r6,0x8,0x10
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
800040be:	fe 69 14 00 	mov	r9,-125952
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
	u_avr32_flashc_fcmd.FCMD.cmd = command;
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
800040c2:	3a 5a       	mov	r10,-91
800040c4:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
800040c8:	93 18       	st.w	r9[0x4],r8
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
800040ca:	72 28       	ld.w	r8,r9[0x8]
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
800040cc:	e0 69 08 24 	mov	r9,2084
800040d0:	e2 18 00 0c 	andl	r8,0xc,COH
	flashc_wait_until_ready();
800040d4:	93 08       	st.w	r9[0x0],r8
800040d6:	33 c8       	mov	r8,60
800040d8:	70 08       	ld.w	r8,r8[0x0]
}
800040da:	5d 18       	icall	r8
800040dc:	d8 22       	popm	r4-r7,pc
800040de:	d7 03       	nop

800040e0 <flashc_clear_page_buffer>:
800040e0:	d4 01       	pushm	lr
800040e2:	3f fb       	mov	r11,-1
//! @{


void flashc_clear_page_buffer(void)
{
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_CPB, -1);
800040e4:	30 3c       	mov	r12,3
800040e6:	cd df       	rcall	800040a0 <flashc_issue_command>
800040e8:	d8 02       	popm	pc
}
800040ea:	d7 03       	nop

800040ec <flashc_quick_page_read>:
800040ec:	d4 01       	pushm	lr
800040ee:	18 9b       	mov	r11,r12
}


bool flashc_quick_page_read(int page_number)
{
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPR, page_number);
800040f0:	30 cc       	mov	r12,12
800040f2:	cd 7f       	rcall	800040a0 <flashc_issue_command>
800040f4:	fe 68 14 00 	mov	r8,-125952
}


bool flashc_is_page_erased(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_QPRR_MASK) != 0);
800040f8:	70 2c       	ld.w	r12,r8[0x8]
800040fa:	f9 dc c0 a1 	bfextu	r12,r12,0x5,0x1

bool flashc_quick_page_read(int page_number)
{
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPR, page_number);
	return flashc_is_page_erased();
}
800040fe:	d8 02       	popm	pc

80004100 <flashc_erase_page>:
80004100:	d4 21       	pushm	r4-r7,lr
80004102:	16 97       	mov	r7,r11
80004104:	18 9b       	mov	r11,r12
80004106:	30 2c       	mov	r12,2

bool flashc_erase_page(int page_number, bool check)
{
	bool page_erased = true;

	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EP, page_number);
80004108:	cc cf       	rcall	800040a0 <flashc_issue_command>
8000410a:	58 07       	cp.w	r7,0
	if (check) {
8000410c:	c0 21       	brne	80004110 <flashc_erase_page+0x10>
8000410e:	da 2a       	popm	r4-r7,pc,r12=1
80004110:	e0 67 08 24 	mov	r7,2084
		unsigned int error_status = flashc_error_status;
		page_erased = flashc_quick_page_read(-1);
80004114:	3f fc       	mov	r12,-1
{
	bool page_erased = true;

	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EP, page_number);
	if (check) {
		unsigned int error_status = flashc_error_status;
80004116:	6e 06       	ld.w	r6,r7[0x0]
		page_erased = flashc_quick_page_read(-1);
80004118:	ce af       	rcall	800040ec <flashc_quick_page_read>
8000411a:	6e 08       	ld.w	r8,r7[0x0]
		flashc_error_status |= error_status;
8000411c:	f1 e6 10 06 	or	r6,r8,r6
80004120:	8f 06       	st.w	r7[0x0],r6
80004122:	d8 22       	popm	r4-r7,pc

80004124 <flashc_write_page>:
	}
	return page_erased;
}
80004124:	d4 01       	pushm	lr
80004126:	18 9b       	mov	r11,r12
80004128:	30 1c       	mov	r12,1
8000412a:	cb bf       	rcall	800040a0 <flashc_issue_command>
8000412c:	d8 02       	popm	pc
8000412e:	d7 03       	nop

80004130 <flashc_quick_user_page_read>:
80004130:	d4 01       	pushm	lr
80004132:	30 fc       	mov	r12,15
}


bool flashc_quick_user_page_read(void)
{
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPRUP, -1);
80004134:	3f fb       	mov	r11,-1
80004136:	cb 5f       	rcall	800040a0 <flashc_issue_command>
80004138:	fe 68 14 00 	mov	r8,-125952
}


bool flashc_is_page_erased(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_QPRR_MASK) != 0);
8000413c:	70 2c       	ld.w	r12,r8[0x8]
8000413e:	f9 dc c0 a1 	bfextu	r12,r12,0x5,0x1

bool flashc_quick_user_page_read(void)
{
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPRUP, -1);
	return flashc_is_page_erased();
}
80004142:	d8 02       	popm	pc

80004144 <flashc_erase_user_page>:
80004144:	d4 21       	pushm	r4-r7,lr
80004146:	3f fb       	mov	r11,-1
80004148:	18 97       	mov	r7,r12
8000414a:	30 ec       	mov	r12,14


bool flashc_erase_user_page(bool check)
{
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EUP, -1);
8000414c:	ca af       	rcall	800040a0 <flashc_issue_command>
8000414e:	58 07       	cp.w	r7,0
	return (check) ? flashc_quick_user_page_read() : true;
80004150:	c0 21       	brne	80004154 <flashc_erase_user_page+0x10>
80004152:	da 2a       	popm	r4-r7,pc,r12=1
80004154:	ce ef       	rcall	80004130 <flashc_quick_user_page_read>
80004156:	d8 22       	popm	r4-r7,pc

80004158 <flashc_write_user_page>:
80004158:	d4 01       	pushm	lr
}
8000415a:	3f fb       	mov	r11,-1
8000415c:	30 dc       	mov	r12,13
8000415e:	ca 1f       	rcall	800040a0 <flashc_issue_command>
80004160:	d8 02       	popm	pc
80004162:	d7 03       	nop

80004164 <flashc_memset64>:


void flashc_write_user_page(void)
{
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WUP, -1);
}
80004164:	d4 31       	pushm	r0-r7,lr
80004166:	21 2d       	sub	sp,72
	return flashc_memset64(dst, src | (uint64_t)src << 32, nbytes, erase);
}


volatile void *flashc_memset64(volatile void *dst, uint64_t src, size_t nbytes, bool erase)
{
80004168:	50 58       	stdsp	sp[0x14],r8
8000416a:	12 96       	mov	r6,r9
	// Use aggregated pointers to have several alignments available for a same address.
	UnionCVPtr flash_array_end;
	UnionVPtr dest;
	Union64 source = {0};
8000416c:	30 08       	mov	r8,0
8000416e:	30 09       	mov	r9,0
	return flashc_memset64(dst, src | (uint64_t)src << 32, nbytes, erase);
}


volatile void *flashc_memset64(volatile void *dst, uint64_t src, size_t nbytes, bool erase)
{
80004170:	18 97       	mov	r7,r12
	// Use aggregated pointers to have several alignments available for a same address.
	UnionCVPtr flash_array_end;
	UnionVPtr dest;
	Union64 source = {0};
80004172:	fa e9 00 38 	st.d	sp[56],r8
	return flashc_memset64(dst, src | (uint64_t)src << 32, nbytes, erase);
}


volatile void *flashc_memset64(volatile void *dst, uint64_t src, size_t nbytes, bool erase)
{
80004176:	14 94       	mov	r4,r10
80004178:	16 95       	mov	r5,r11
		256,
		384,
		512,
		768,
		1024,
	};
8000417a:	31 0a       	mov	r10,16
8000417c:	fe cb c9 72 	sub	r11,pc,-13966
80004180:	fa cc ff e0 	sub	r12,sp,-32
80004184:	e0 a0 15 a2 	rcall	80006cc8 <memcpy>
	return ((unsigned int)FLASH_SIZE[(AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FSZ_MASK)
80004188:	fe 68 14 00 	mov	r8,-125952
	UnionVPtr tmp;
	unsigned int error_status = 0;
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
8000418c:	fa cb ff b8 	sub	r11,sp,-72
80004190:	70 28       	ld.w	r8,r8[0x8]
80004192:	f1 d8 c1 a3 	bfextu	r8,r8,0xd,0x3
80004196:	f6 08 00 18 	add	r8,r11,r8<<0x1
8000419a:	f1 13 ff d8 	ld.uh	r3,r8[-40]
8000419e:	30 08       	mov	r8,0
800041a0:	ea 18 80 00 	orh	r8,0x8000
	dest.u8ptr = dst;
800041a4:	ab 63       	lsl	r3,0xa
	UnionVPtr tmp;
	unsigned int error_status = 0;
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
800041a6:	51 17       	stdsp	sp[0x44],r7
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
800041a8:	10 03       	add	r3,r8
800041aa:	ee c8 ff f9 	sub	r8,r7,-7
800041ae:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
800041b2:	c1 38       	rjmp	800041d8 <flashc_memset64+0x74>
800041b4:	f0 c9 00 01 	sub	r9,r8,1
		source.u8[i] = src;
800041b8:	fa ca ff b8 	sub	r10,sp,-72
800041bc:	f4 08 00 08 	add	r8,r10,r8
		src >>= 8;
800041c0:	ea 0a 16 08 	lsr	r10,r5,0x8
	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
		source.u8[i] = src;
800041c4:	f1 64 ff f0 	st.b	r8[-16],r4

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
800041c8:	f1 d9 c0 03 	bfextu	r8,r9,0x0,0x3
		source.u8[i] = src;
		src >>= 8;
800041cc:	e8 09 16 08 	lsr	r9,r4,0x8
800041d0:	f3 e5 11 89 	or	r9,r9,r5<<0x18
800041d4:	14 95       	mov	r5,r10
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
800041d6:	12 94       	mov	r4,r9
800041d8:	58 04       	cp.w	r4,0
800041da:	5c 25       	cpc	r5
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
		source.u8[i] = src;
		src >>= 8;
	}
	dest_end.u8ptr = dest.u8ptr + nbytes;
800041dc:	ce c1       	brne	800041b4 <flashc_memset64+0x50>
800041de:	ee 06 00 06 	add	r6,r7,r6

	// If destination is outside flash, go to next flash page if any.
	if (dest.u8ptr < AVR32_FLASH) {
800041e2:	e0 69 ff ff 	mov	r9,65535
800041e6:	ea 19 7f ff 	orh	r9,0x7fff
800041ea:	12 37       	cp.w	r7,r9
800041ec:	e0 8b 00 06 	brhi	800041f8 <flashc_memset64+0x94>
		dest.u8ptr = AVR32_FLASH;
800041f0:	30 08       	mov	r8,0
800041f2:	ea 18 80 00 	orh	r8,0x8000
	} else if (flash_array_end.u8ptr <= dest.u8ptr && dest.u8ptr < AVR32_FLASHC_USER_PAGE) {
800041f6:	c0 e8       	rjmp	80004212 <flashc_memset64+0xae>
800041f8:	0e 33       	cp.w	r3,r7
800041fa:	e0 8b 00 0d 	brhi	80004214 <flashc_memset64+0xb0>
800041fe:	e0 68 ff ff 	mov	r8,65535
80004202:	ea 18 80 7f 	orh	r8,0x807f
80004206:	10 37       	cp.w	r7,r8
80004208:	e0 8b 00 06 	brhi	80004214 <flashc_memset64+0xb0>
		dest.u8ptr = AVR32_FLASHC_USER_PAGE;
8000420c:	30 08       	mov	r8,0
8000420e:	ea 18 80 80 	orh	r8,0x8080
	}

	// If end of destination is outside flash, move it to the end of the previous flash page if any.
	if (dest_end.u8ptr > AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE) {
80004212:	51 18       	stdsp	sp[0x44],r8
80004214:	e0 61 02 00 	mov	r1,512
80004218:	ea 11 80 80 	orh	r1,0x8080
8000421c:	02 36       	cp.w	r6,r1
8000421e:	e0 88 00 04 	brls	80004226 <flashc_memset64+0xc2>
80004222:	02 96       	mov	r6,r1
		dest_end.u8ptr = AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE;
	} else if (AVR32_FLASHC_USER_PAGE >= dest_end.u8ptr && dest_end.u8ptr > flash_array_end.u8ptr) {
80004224:	c0 a8       	rjmp	80004238 <flashc_memset64+0xd4>
80004226:	30 00       	mov	r0,0
80004228:	ea 10 80 80 	orh	r0,0x8080
8000422c:	00 36       	cp.w	r6,r0
8000422e:	e0 8b 00 05 	brhi	80004238 <flashc_memset64+0xd4>
80004232:	06 36       	cp.w	r6,r3
80004234:	e6 06 17 b0 	movhi	r6,r3
		// Determine if the current destination page has an incomplete end.
		incomplete_flash_page_end = (Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
				Align_down((uint32_t)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;
80004238:	fa ea 00 38 	ld.d	r10,sp[56]
			// pages that have already been written to.
			{
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
8000423c:	e5 d6 c0 03 	bfextu	r2,r6,0x0,0x3
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
80004240:	0c 91       	mov	r1,r6
80004242:	ec 02 01 08 	sub	r8,r6,r2
		// Determine if the current destination page has an incomplete end.
		incomplete_flash_page_end = (Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
				Align_down((uint32_t)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;
80004246:	fa eb 00 04 	st.d	sp[4],r10
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
			*dest.u64ptr++ = source.u64;
		}

		// If the current destination page has an incomplete end...
		if (incomplete_flash_page_end) {
8000424a:	2f 88       	sub	r8,-8
	}

	// Align each end of destination pointer with its natural boundary.
	dest_end.u16ptr = (uint16_t *)Align_down((uint32_t)dest_end.u8ptr, sizeof(uint16_t));
	dest_end.u32ptr = (uint32_t *)Align_down((uint32_t)dest_end.u16ptr, sizeof(uint32_t));
	dest_end.u64ptr = (uint64_t *)Align_down((uint32_t)dest_end.u32ptr, sizeof(uint64_t));
8000424c:	0c 9a       	mov	r10,r6
8000424e:	e0 11 ff f8 	andl	r1,0xfff8
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
			*dest.u64ptr++ = source.u64;
		}

		// If the current destination page has an incomplete end...
		if (incomplete_flash_page_end) {
80004252:	e0 1a fe 00 	andl	r10,0xfe00
		// Determine if the current destination page has an incomplete end.
		incomplete_flash_page_end = (Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
				Align_down((uint32_t)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;
80004256:	50 78       	stdsp	sp[0x1c],r8
80004258:	30 05       	mov	r5,0
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
			*dest.u64ptr++ = source.u64;
		}

		// If the current destination page has an incomplete end...
		if (incomplete_flash_page_end) {
8000425a:	e0 64 08 24 	mov	r4,2084
	dest_end.u64ptr = (uint64_t *)Align_down((uint32_t)dest_end.u32ptr, sizeof(uint64_t));

	// While end of destination is not reached...
	while (dest.u8ptr < dest_end.u8ptr) {
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
8000425e:	50 6a       	stdsp	sp[0x18],r10
80004260:	c9 d8       	rjmp	8000439a <flashc_memset64+0x236>
		// Determine if the current destination page has an incomplete end.
		incomplete_flash_page_end = (Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
				Align_down((uint32_t)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;
80004262:	c3 ff       	rcall	800040e0 <flashc_clear_page_buffer>
80004264:	fa e8 00 04 	ld.d	r8,sp[4]
80004268:	fa e9 00 30 	st.d	sp[48],r8
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Determine where the source data will end in the current flash page.
		flash_page_source_end.u64ptr =
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
8000426c:	68 08       	ld.w	r8,r4[0x0]

	// While end of destination is not reached...
	while (dest.u8ptr < dest_end.u8ptr) {
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;
8000426e:	00 99       	mov	r9,r0

		// Determine where the source data will end in the current flash page.
		flash_page_source_end.u64ptr =
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
80004270:	10 45       	or	r5,r8
80004272:	e0 19 fe 00 	andl	r9,0xfe00

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;

		// If destination does not point to the beginning of the current flash page...
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
80004276:	f1 d0 c0 09 	bfextu	r8,r0,0x0,0x9
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Determine where the source data will end in the current flash page.
		flash_page_source_end.u64ptr =
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
8000427a:	f2 cc fe 00 	sub	r12,r9,-512
8000427e:	e2 0c 0d 4c 	min	r12,r1,r12

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;

		// If destination does not point to the beginning of the current flash page...
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
80004282:	58 08       	cp.w	r8,0
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
80004284:	c3 20       	breq	800042e8 <flashc_memset64+0x184>
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
80004286:	00 9a       	mov	r10,r0
80004288:	51 09       	stdsp	sp[0x40],r9
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
8000428a:	12 9b       	mov	r11,r9
8000428c:	e0 1a ff f8 	andl	r10,0xfff8
80004290:	0c 9e       	mov	lr,r6
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
80004292:	50 07       	stdsp	sp[0x0],r7
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
					tmp.u64ptr++) {
				*tmp.u64ptr = *tmp.u64ptr;
80004294:	c0 58       	rjmp	8000429e <flashc_memset64+0x13a>
80004296:	f0 e6 00 00 	ld.d	r6,r8[0]
8000429a:	f0 e7 00 00 	st.d	r8[0],r6
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
8000429e:	16 98       	mov	r8,r11
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
800042a0:	2f 8b       	sub	r11,-8
800042a2:	14 38       	cp.w	r8,r10
800042a4:	cf 93       	brcs	80004296 <flashc_memset64+0x132>
800042a6:	51 08       	stdsp	sp[0x40],r8
800042a8:	1c 96       	mov	r6,lr
					tmp.u64ptr++) {
				*tmp.u64ptr = *tmp.u64ptr;
			}

			// If destination is not 64-bit aligned...
			if (!Test_align((uint32_t)dest.u8ptr, sizeof(uint64_t))) {
800042aa:	40 07       	lddsp	r7,sp[0x0]
800042ac:	e1 d0 c0 03 	bfextu	r0,r0,0x0,0x3
800042b0:	c1 c0       	breq	800042e8 <flashc_memset64+0x184>
800042b2:	30 0b       	mov	r11,0
800042b4:	50 39       	stdsp	sp[0xc],r9
800042b6:	f0 0b 00 0e 	add	lr,r8,r11
				// flash page data.
				// This is required by the hardware, even if page erase is not
				// requested, in order to be able to write successfully to erased parts
				// of flash pages that have already been written to.
				for (i = 0; i < Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)); i++) {
					flash_dword.u8[i] = *tmp.u8ptr++;
800042ba:	fa c9 ff d0 	sub	r9,sp,-48
800042be:	1d 8e       	ld.ub	lr,lr[0x0]
800042c0:	f2 0b 0b 0e 	st.b	r9[r11],lr
				// Fill the beginning of the flash double-word buffer with the current
				// flash page data.
				// This is required by the hardware, even if page erase is not
				// requested, in order to be able to write successfully to erased parts
				// of flash pages that have already been written to.
				for (i = 0; i < Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)); i++) {
800042c4:	2f fb       	sub	r11,-1
800042c6:	00 3b       	cp.w	r11,r0
800042c8:	cf 71       	brne	800042b6 <flashc_memset64+0x152>
					flash_dword.u8[i] = *tmp.u8ptr++;
				}

				// Align the destination pointer with its 64-bit boundary.
				dest.u64ptr = (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
800042ca:	16 08       	add	r8,r11
				// Fill the beginning of the flash double-word buffer with the current
				// flash page data.
				// This is required by the hardware, even if page erase is not
				// requested, in order to be able to write successfully to erased parts
				// of flash pages that have already been written to.
				for (i = 0; i < Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)); i++) {
800042cc:	51 1a       	stdsp	sp[0x44],r10
800042ce:	51 08       	stdsp	sp[0x40],r8

				// Align the destination pointer with its 64-bit boundary.
				dest.u64ptr = (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));

				// If the current destination double-word is not the last one...
				if (dest.u64ptr < dest_end.u64ptr) {
800042d0:	40 39       	lddsp	r9,sp[0xc]
800042d2:	02 3a       	cp.w	r10,r1
					// Write the flash double-word buffer to the page buffer and reinitialize it.
					*dest.u64ptr++ = flash_dword.u64;
800042d4:	c0 a2       	brcc	800042e8 <flashc_memset64+0x184>
800042d6:	14 98       	mov	r8,r10
800042d8:	fa ea 00 30 	ld.d	r10,sp[48]
					flash_dword.u64 = source.u64;
800042dc:	b1 2a       	st.d	r8++,r10
800042de:	fa ea 00 04 	ld.d	r10,sp[4]
800042e2:	51 18       	stdsp	sp[0x44],r8
800042e4:	fa eb 00 30 	st.d	sp[48],r10
				}
			}
		}

		// Write the source data to the page buffer with 64-bit alignment.
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
800042e8:	41 18       	lddsp	r8,sp[0x44]
800042ea:	02 9e       	mov	lr,r1
800042ec:	10 1c       	sub	r12,r8
800042ee:	10 9b       	mov	r11,r8
800042f0:	a3 5c       	asr	r12,0x3
800042f2:	18 9a       	mov	r10,r12
800042f4:	c0 68       	rjmp	80004300 <flashc_memset64+0x19c>
800042f6:	d7 03       	nop
800042f8:	fa e0 00 04 	ld.d	r0,sp[4]
800042fc:	20 1a       	sub	r10,1
800042fe:	b7 20       	st.d	r11++,r0
80004300:	58 0a       	cp.w	r10,0
80004302:	cf b1       	brne	800042f8 <flashc_memset64+0x194>
			*dest.u64ptr++ = source.u64;
80004304:	f0 0c 00 3c 	add	r12,r8,r12<<0x3
				}
			}
		}

		// Write the source data to the page buffer with 64-bit alignment.
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
80004308:	51 1c       	stdsp	sp[0x44],r12
			*dest.u64ptr++ = source.u64;
8000430a:	1c 91       	mov	r1,lr
				}
			}
		}

		// Write the source data to the page buffer with 64-bit alignment.
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
8000430c:	40 60       	lddsp	r0,sp[0x18]
8000430e:	00 39       	cp.w	r9,r0
80004310:	c2 13       	brcs	80004352 <flashc_memset64+0x1ee>
80004312:	51 06       	stdsp	sp[0x40],r6
80004314:	58 02       	cp.w	r2,0
80004316:	c1 10       	breq	80004338 <flashc_memset64+0x1d4>
			*dest.u64ptr++ = source.u64;
		}

		// If the current destination page has an incomplete end...
		if (incomplete_flash_page_end) {
80004318:	fa c8 ff d0 	sub	r8,sp,-48
8000431c:	0c 99       	mov	r9,r6
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			{
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;
8000431e:	04 08       	add	r8,r2

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
80004320:	fa ca ff c8 	sub	r10,sp,-56
80004324:	13 3b       	ld.ub	r11,r9++
80004326:	10 cb       	st.b	r8++,r11
80004328:	14 38       	cp.w	r8,r10
8000432a:	cf d1       	brne	80004324 <flashc_memset64+0x1c0>
{
	return flashc_memset64(dst, src | (uint64_t)src << 32, nbytes, erase);
}


volatile void *flashc_memset64(volatile void *dst, uint64_t src, size_t nbytes, bool erase)
8000432c:	40 7b       	lddsp	r11,sp[0x1c]
8000432e:	51 0b       	stdsp	sp[0x40],r11

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
						flash_dword.u8[i] = *tmp.u8ptr++;
80004330:	fa e8 00 30 	ld.d	r8,sp[48]
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
80004334:	b9 28       	st.d	r12++,r8
80004336:	51 1c       	stdsp	sp[0x44],r12
80004338:	41 08       	lddsp	r8,sp[0x40]
8000433a:	c0 58       	rjmp	80004344 <flashc_memset64+0x1e0>
						flash_dword.u8[i] = *tmp.u8ptr++;

					// Write the flash double-word buffer to the page buffer.
					*dest.u64ptr++ = flash_dword.u64;
8000433c:	f2 ea 00 00 	ld.d	r10,r9[0]
80004340:	f2 eb 00 00 	st.d	r9[0],r10
80004344:	10 99       	mov	r9,r8
80004346:	f5 d8 c0 09 	bfextu	r10,r8,0x0,0x9
				}

				// Fill the end of the page buffer with the current flash page data.
				for (; !Test_align((uint32_t)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++) {
					*tmp.u64ptr = *tmp.u64ptr;
8000434a:	2f 88       	sub	r8,-8
8000434c:	58 0a       	cp.w	r10,0
8000434e:	cf 71       	brne	8000433c <flashc_memset64+0x1d8>
80004350:	51 09       	stdsp	sp[0x40],r9
					// Write the flash double-word buffer to the page buffer.
					*dest.u64ptr++ = flash_dword.u64;
				}

				// Fill the end of the page buffer with the current flash page data.
				for (; !Test_align((uint32_t)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++) {
80004352:	41 10       	lddsp	r0,sp[0x44]
80004354:	30 0a       	mov	r10,0
80004356:	ea 1a 80 80 	orh	r10,0x8080
8000435a:	14 30       	cp.w	r0,r10
8000435c:	e0 8b 00 15 	brhi	80004386 <flashc_memset64+0x222>
				}
			}
		}

		// If the current flash page is in the flash array...
		if (dest.u8ptr <= AVR32_FLASHC_USER_PAGE) {
80004360:	40 59       	lddsp	r9,sp[0x14]
80004362:	58 09       	cp.w	r9,0
80004364:	c0 60       	breq	80004370 <flashc_memset64+0x20c>
80004366:	30 0b       	mov	r11,0
80004368:	3f fc       	mov	r12,-1
8000436a:	cc be       	rcall	80004100 <flashc_erase_page>
			// Erase the current page if requested and write it from the page buffer.
			if (erase) {
8000436c:	68 08       	ld.w	r8,r4[0x0]
8000436e:	10 45       	or	r5,r8
80004370:	3f fc       	mov	r12,-1
				flashc_erase_page(-1, false);
80004372:	cd 9e       	rcall	80004124 <flashc_write_page>
80004374:	68 08       	ld.w	r8,r4[0x0]
80004376:	10 45       	or	r5,r8
80004378:	06 30       	cp.w	r0,r3
				error_status |= flashc_error_status;
8000437a:	c1 03       	brcs	8000439a <flashc_memset64+0x236>
8000437c:	30 08       	mov	r8,0
			}
			flashc_write_page(-1);
8000437e:	ea 18 80 80 	orh	r8,0x8080
80004382:	51 18       	stdsp	sp[0x44],r8
			error_status |= flashc_error_status;
80004384:	c0 b8       	rjmp	8000439a <flashc_memset64+0x236>
80004386:	40 58       	lddsp	r8,sp[0x14]

			// If the end of the flash array is reached, go to the User page.
			if (dest.u8ptr >= flash_array_end.u8ptr) {
80004388:	58 08       	cp.w	r8,0
8000438a:	c0 50       	breq	80004394 <flashc_memset64+0x230>
				dest.u8ptr = AVR32_FLASHC_USER_PAGE;
8000438c:	30 0c       	mov	r12,0
8000438e:	cd be       	rcall	80004144 <flashc_erase_user_page>
80004390:	68 08       	ld.w	r8,r4[0x0]
80004392:	10 45       	or	r5,r8
80004394:	ce 2e       	rcall	80004158 <flashc_write_user_page>
			}
		} else {
			// Erase the User page if requested and write it from the page buffer.
			if (erase) {
80004396:	68 08       	ld.w	r8,r4[0x0]
80004398:	10 45       	or	r5,r8
8000439a:	41 10       	lddsp	r0,sp[0x44]
				flashc_erase_user_page(false);
8000439c:	0c 30       	cp.w	r0,r6
8000439e:	fe 93 ff 62 	brlo	80004262 <flashc_memset64+0xfe>
				error_status |= flashc_error_status;
800043a2:	e0 68 08 24 	mov	r8,2084
			}
			flashc_write_user_page();
800043a6:	0e 9c       	mov	r12,r7
800043a8:	91 05       	st.w	r8[0x0],r5
			error_status |= flashc_error_status;
800043aa:	2e ed       	sub	sp,-72
800043ac:	d8 32       	popm	r0-r7,pc
	dest_end.u16ptr = (uint16_t *)Align_down((uint32_t)dest_end.u8ptr, sizeof(uint16_t));
	dest_end.u32ptr = (uint32_t *)Align_down((uint32_t)dest_end.u16ptr, sizeof(uint32_t));
	dest_end.u64ptr = (uint64_t *)Align_down((uint32_t)dest_end.u32ptr, sizeof(uint64_t));

	// While end of destination is not reached...
	while (dest.u8ptr < dest_end.u8ptr) {
800043ae:	d7 03       	nop

800043b0 <flashc_memset32>:
800043b0:	d4 21       	pushm	r4-r7,lr
800043b2:	30 0e       	mov	lr,0
800043b4:	16 96       	mov	r6,r11
			error_status |= flashc_error_status;
		}
	}

	// Update the FLASHC error status.
	flashc_error_status = error_status;
800043b6:	1c 97       	mov	r7,lr

	// Return the initial destination pointer as the standard memset function does.
	return dst;
}
800043b8:	12 98       	mov	r8,r9
			error_status |= flashc_error_status;
		}
	}

	// Update the FLASHC error status.
	flashc_error_status = error_status;
800043ba:	0c 9b       	mov	r11,r6

	// Return the initial destination pointer as the standard memset function does.
	return dst;
}
800043bc:	14 99       	mov	r9,r10
800043be:	0e 4b       	or	r11,r7
800043c0:	0e 9a       	mov	r10,r7
800043c2:	0c 4a       	or	r10,r6
800043c4:	cd 0e       	rcall	80004164 <flashc_memset64>
800043c6:	d8 22       	popm	r4-r7,pc

800043c8 <flashc_memset16>:
800043c8:	d4 01       	pushm	lr
800043ca:	f7 db d2 10 	bfins	r11,r11,0x10,0x10
800043ce:	cf 1f       	rcall	800043b0 <flashc_memset32>
800043d0:	d8 02       	popm	pc
800043d2:	d7 03       	nop

800043d4 <flashc_memset8>:


volatile void *flashc_memset16(volatile void *dst, uint16_t src, size_t nbytes, bool erase)
{
	return flashc_memset32(dst, src | (uint32_t)src << 16, nbytes, erase);
}
800043d4:	d4 01       	pushm	lr
800043d6:	f7 eb 10 8b 	or	r11,r11,r11<<0x8
}


volatile void *flashc_memset8(volatile void *dst, uint8_t src, size_t nbytes, bool erase)
{
	return flashc_memset16(dst, src | (uint16_t)src << 8, nbytes, erase);
800043da:	5c 7b       	castu.h	r11
800043dc:	cf 6f       	rcall	800043c8 <flashc_memset16>
800043de:	d8 02       	popm	pc

800043e0 <flashc_memcpy>:
}
800043e0:	d4 31       	pushm	r0-r7,lr
800043e2:	20 4d       	sub	sp,16
800043e4:	e0 6e ff ff 	mov	lr,65535
	Assert( (((uint8_t *)dst >= AVR32_FLASH)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASH + flashc_get_flash_size())))
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;
800043e8:	ea 1e 80 7f 	orh	lr,0x807f

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));
800043ec:	18 94       	mov	r4,r12
	Assert( (((uint8_t *)dst >= AVR32_FLASH)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASH + flashc_get_flash_size())))
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;
800043ee:	1c 3c       	cp.w	r12,lr
800043f0:	5f b5       	srhi	r5
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
800043f2:	18 97       	mov	r7,r12
	Union64 flash_dword;
	uint8_t i;
	bool b_user_page;
	unsigned int error_status = 0;
	uint8_t* flash_add;
	uint8_t* dest_add=(uint8_t*)dst;
800043f4:	18 92       	mov	r2,r12
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
800043f6:	14 96       	mov	r6,r10
	// Return the initial destination pointer as the standard memset function does.
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
800043f8:	fa cc ff f0 	sub	r12,sp,-16
{
800043fc:	50 19       	stdsp	sp[0x4],r9
	uint8_t i;
	bool b_user_page;
	unsigned int error_status = 0;
	uint8_t* flash_add;
	uint8_t* dest_add=(uint8_t*)dst;
	const uint8_t* src_buf=(const uint8_t*)src;
800043fe:	16 90       	mov	r0,r11
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));
80004400:	30 01       	mov	r1,0
80004402:	e0 14 fe 00 	andl	r4,0xfe00
80004406:	e0 63 08 24 	mov	r3,2084

	while (nbytes) {
8000440a:	50 0c       	stdsp	sp[0x0],r12
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
8000440c:	c4 08       	rjmp	8000448c <flashc_memcpy+0xac>
8000440e:	c6 9e       	rcall	800040e0 <flashc_clear_page_buffer>
		error_status |= flashc_error_status;
80004410:	66 08       	ld.w	r8,r3[0x0]
80004412:	e8 cb fe 00 	sub	r11,r4,-512
80004416:	10 41       	or	r1,r8
80004418:	16 9c       	mov	r12,r11
8000441a:	08 98       	mov	r8,r4

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;
8000441c:	f0 ea 00 00 	ld.d	r10,r8[0]
80004420:	fa c9 ff f8 	sub	r9,sp,-8
80004424:	fa eb 00 08 	st.d	sp[8],r10
	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));

	while (nbytes) {
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;
80004428:	10 9a       	mov	r10,r8

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;
8000442a:	18 9b       	mov	r11,r12

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
8000442c:	04 3a       	cp.w	r10,r2
8000442e:	5f 0e       	sreq	lr
80004430:	58 06       	cp.w	r6,0
80004432:	5f 1c       	srne	r12
80004434:	fd ec 00 0c 	and	r12,lr,r12
80004438:	30 0e       	mov	lr,0
8000443a:	fc 0c 18 00 	cp.b	r12,lr
8000443e:	c0 50       	breq	80004448 <flashc_memcpy+0x68>
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
80004440:	01 3c       	ld.ub	r12,r0++
	// Return the initial destination pointer as the standard memset function does.
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
80004442:	2f f2       	sub	r2,-1
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
					dest_add++;
					nbytes--;
80004444:	20 16       	sub	r6,1

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
80004446:	b2 8c       	st.b	r9[0x0],r12
					dest_add++;
					nbytes--;
				}
				flash_add++;
80004448:	2f fa       	sub	r10,-1
8000444a:	2f f9       	sub	r9,-1
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
8000444c:	40 0c       	lddsp	r12,sp[0x0]
8000444e:	18 39       	cp.w	r9,r12
80004450:	ce e1       	brne	8000442c <flashc_memcpy+0x4c>
80004452:	16 9c       	mov	r12,r11
				}
				flash_add++;
			}

			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
80004454:	fa ea 00 08 	ld.d	r10,sp[8]
80004458:	b1 2a       	st.d	r8++,r10
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
8000445a:	18 38       	cp.w	r8,r12
8000445c:	ce 01       	brne	8000441c <flashc_memcpy+0x3c>
8000445e:	e8 c4 fe 00 	sub	r4,r4,-512
			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
		}

		// Erase the current page if requested and write it from the page buffer.
		if (erase) {
80004462:	40 1a       	lddsp	r10,sp[0x4]
80004464:	58 0a       	cp.w	r10,0
80004466:	c0 b0       	breq	8000447c <flashc_memcpy+0x9c>
			(b_user_page)? flashc_erase_user_page(false) : flashc_erase_page(-1, false);
80004468:	58 05       	cp.w	r5,0
8000446a:	c0 40       	breq	80004472 <flashc_memcpy+0x92>
8000446c:	30 0c       	mov	r12,0
8000446e:	c6 be       	rcall	80004144 <flashc_erase_user_page>
80004470:	c0 48       	rjmp	80004478 <flashc_memcpy+0x98>
80004472:	0a 9b       	mov	r11,r5
80004474:	3f fc       	mov	r12,-1
80004476:	c4 5e       	rcall	80004100 <flashc_erase_page>
80004478:	66 08       	ld.w	r8,r3[0x0]
8000447a:	10 41       	or	r1,r8
			error_status |= flashc_error_status;
8000447c:	58 05       	cp.w	r5,0
8000447e:	c0 30       	breq	80004484 <flashc_memcpy+0xa4>
		}

		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
80004480:	c6 ce       	rcall	80004158 <flashc_write_user_page>
80004482:	c0 38       	rjmp	80004488 <flashc_memcpy+0xa8>
80004484:	3f fc       	mov	r12,-1
80004486:	c4 fe       	rcall	80004124 <flashc_write_page>
80004488:	66 08       	ld.w	r8,r3[0x0]
8000448a:	10 41       	or	r1,r8
8000448c:	58 06       	cp.w	r6,0
8000448e:	cc 01       	brne	8000440e <flashc_memcpy+0x2e>
		error_status |= flashc_error_status;
80004490:	e0 68 08 24 	mov	r8,2084

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));

	while (nbytes) {
80004494:	0e 9c       	mov	r12,r7
80004496:	91 01       	st.w	r8[0x0],r1
		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
		error_status |= flashc_error_status;
	}
	// Update the FLASHC error status.
	flashc_error_status = error_status;
80004498:	2f cd       	sub	sp,-16

	// Return the initial destination pointer as the standard memcpy function does.
	return dst;
}
8000449a:	d8 32       	popm	r0-r7,pc

8000449c <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000449c:	f8 08 16 05 	lsr	r8,r12,0x5
800044a0:	a9 68       	lsl	r8,0x8
800044a2:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
800044a6:	58 1b       	cp.w	r11,1
800044a8:	c0 d0       	breq	800044c2 <gpio_enable_module_pin+0x26>
800044aa:	c0 63       	brcs	800044b6 <gpio_enable_module_pin+0x1a>
800044ac:	58 2b       	cp.w	r11,2
800044ae:	c0 f0       	breq	800044cc <gpio_enable_module_pin+0x30>
800044b0:	58 3b       	cp.w	r11,3
800044b2:	c1 20       	breq	800044d6 <gpio_enable_module_pin+0x3a>
800044b4:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800044b6:	30 19       	mov	r9,1
800044b8:	f2 0c 09 49 	lsl	r9,r9,r12
800044bc:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800044be:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800044c0:	c1 08       	rjmp	800044e0 <gpio_enable_module_pin+0x44>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800044c2:	f6 0c 09 4b 	lsl	r11,r11,r12
800044c6:	91 5b       	st.w	r8[0x14],r11
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800044c8:	91 ab       	st.w	r8[0x28],r11
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800044ca:	c0 b8       	rjmp	800044e0 <gpio_enable_module_pin+0x44>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800044cc:	30 19       	mov	r9,1
800044ce:	f2 0c 09 49 	lsl	r9,r9,r12
800044d2:	91 69       	st.w	r8[0x18],r9
800044d4:	c0 58       	rjmp	800044de <gpio_enable_module_pin+0x42>
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800044d6:	30 19       	mov	r9,1
800044d8:	f2 0c 09 49 	lsl	r9,r9,r12
800044dc:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800044de:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
800044e0:	30 19       	mov	r9,1
800044e2:	f2 0c 09 4c 	lsl	r12,r9,r12
800044e6:	91 2c       	st.w	r8[0x8],r12
800044e8:	5e fd       	retal	0
800044ea:	d7 03       	nop

800044ec <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800044ec:	d4 21       	pushm	r4-r7,lr
800044ee:	30 07       	mov	r7,0
800044f0:	18 96       	mov	r6,r12
800044f2:	16 94       	mov	r4,r11
800044f4:	0e 95       	mov	r5,r7
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800044f6:	c0 78       	rjmp	80004504 <gpio_enable_module+0x18>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800044f8:	6c 1b       	ld.w	r11,r6[0x4]
800044fa:	6c 0c       	ld.w	r12,r6[0x0]
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800044fc:	2f f7       	sub	r7,-1
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
800044fe:	2f 86       	sub	r6,-8
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80004500:	cc ef       	rcall	8000449c <gpio_enable_module_pin>
80004502:	18 45       	or	r5,r12
80004504:	08 37       	cp.w	r7,r4
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80004506:	cf 93       	brcs	800044f8 <gpio_enable_module+0xc>
80004508:	0a 9c       	mov	r12,r5
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
8000450a:	d8 22       	popm	r4-r7,pc

8000450c <gpio_enable_gpio_pin>:
8000450c:	30 18       	mov	r8,1
8000450e:	f0 0c 09 48 	lsl	r8,r8,r12
80004512:	a5 9c       	lsr	r12,0x5
 *            AVR32_PWM_3_PIN for PWM channel 3 can also be used to release
 *            module pins for GPIO.
 */
void gpio_enable_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004514:	a9 6c       	lsl	r12,0x8
80004516:	e0 2c f0 00 	sub	r12,61440
	
	gpio_port->oderc = 1 << (pin & 0x1F);
8000451a:	f9 48 00 48 	st.w	r12[72],r8
	gpio_port->gpers = 1 << (pin & 0x1F);
8000451e:	99 18       	st.w	r12[0x4],r8
}
80004520:	5e fc       	retal	r12

80004522 <gpio_get_pin_value>:
 *
 * \return The pin value.
 */
bool gpio_get_pin_value(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004522:	f8 08 16 05 	lsr	r8,r12,0x5
80004526:	a9 68       	lsl	r8,0x8
80004528:	e0 28 f0 00 	sub	r8,61440
	
	return (gpio_port->pvr >> (pin & 0x1F)) & 1;
8000452c:	71 88       	ld.w	r8,r8[0x60]
8000452e:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
80004532:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80004536:	5e fc       	retal	r12

80004538 <gpio_set_gpio_pin>:
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80004538:	30 18       	mov	r8,1
8000453a:	f0 0c 09 48 	lsl	r8,r8,r12
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000453e:	a5 9c       	lsr	r12,0x5
80004540:	a9 6c       	lsl	r12,0x8
80004542:	e0 2c f0 00 	sub	r12,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80004546:	f9 48 00 54 	st.w	r12[84],r8
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
8000454a:	f9 48 00 44 	st.w	r12[68],r8
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000454e:	99 18       	st.w	r12[0x4],r8
}
80004550:	5e fc       	retal	r12

80004552 <gpio_clr_gpio_pin>:
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80004552:	30 18       	mov	r8,1
80004554:	f0 0c 09 48 	lsl	r8,r8,r12
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004558:	a5 9c       	lsr	r12,0x5
8000455a:	a9 6c       	lsl	r12,0x8
8000455c:	e0 2c f0 00 	sub	r12,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80004560:	f9 48 00 58 	st.w	r12[88],r8
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
80004564:	f9 48 00 44 	st.w	r12[68],r8
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80004568:	99 18       	st.w	r12[0x4],r8
}
8000456a:	5e fc       	retal	r12

8000456c <gpio_enable_pin_interrupt>:
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
8000456c:	30 1a       	mov	r10,1
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000456e:	f8 08 16 05 	lsr	r8,r12,0x5

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
80004572:	f4 0c 09 49 	lsl	r9,r10,r12
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004576:	a9 68       	lsl	r8,0x8
80004578:	e0 28 f0 00 	sub	r8,61440

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
8000457c:	f1 49 00 c4 	st.w	r8[196],r9
static uint32_t gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Configure the edge detector. */
	switch (mode) {
80004580:	14 3b       	cp.w	r11,r10
80004582:	c0 80       	breq	80004592 <gpio_enable_pin_interrupt+0x26>
80004584:	c0 43       	brcs	8000458c <gpio_enable_pin_interrupt+0x20>
80004586:	58 2b       	cp.w	r11,2
80004588:	c0 f1       	brne	800045a6 <gpio_enable_pin_interrupt+0x3a>
8000458a:	c0 98       	rjmp	8000459c <gpio_enable_pin_interrupt+0x30>
	case GPIO_PIN_CHANGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
8000458c:	f1 49 00 a8 	st.w	r8[168],r9
80004590:	c0 38       	rjmp	80004596 <gpio_enable_pin_interrupt+0x2a>
		gpio_port->imr1c = 1 << (pin & 0x1F);
		break;

	case GPIO_RISING_EDGE:
		gpio_port->imr0s = 1 << (pin & 0x1F);
80004592:	f1 49 00 a4 	st.w	r8[164],r9
		gpio_port->imr1c = 1 << (pin & 0x1F);
80004596:	f1 49 00 b8 	st.w	r8[184],r9
8000459a:	c0 78       	rjmp	800045a8 <gpio_enable_pin_interrupt+0x3c>
		break;

	case GPIO_FALLING_EDGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
8000459c:	f1 49 00 a8 	st.w	r8[168],r9
		gpio_port->imr1s = 1 << (pin & 0x1F);
800045a0:	f1 49 00 b4 	st.w	r8[180],r9
800045a4:	c0 28       	rjmp	800045a8 <gpio_enable_pin_interrupt+0x3c>
800045a6:	5e fa       	retal	r10
	if (GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode)) {
		return(GPIO_INVALID_ARGUMENT);
	}

	/* Enable interrupt. */
	gpio_port->iers = 1 << (pin & 0x1F);
800045a8:	f1 49 00 94 	st.w	r8[148],r9
800045ac:	5e fd       	retal	0

800045ae <gpio_get_pin_interrupt_flag>:
 *
 * \return The pin interrupt flag.
 */
bool gpio_get_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800045ae:	f8 08 16 05 	lsr	r8,r12,0x5
800045b2:	a9 68       	lsl	r8,0x8
800045b4:	e0 28 f0 00 	sub	r8,61440
	
	return (gpio_port->ifr >> (pin & 0x1F)) & 1;
800045b8:	f0 f8 00 d0 	ld.w	r8,r8[208]
800045bc:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
800045c0:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800045c4:	5e fc       	retal	r12

800045c6 <gpio_clear_pin_interrupt_flag>:
	gpio_port->ifrc = 1 << (pin & 0x1F);

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
800045c6:	30 18       	mov	r8,1
800045c8:	f0 0c 09 48 	lsl	r8,r8,r12
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800045cc:	a5 9c       	lsr	r12,0x5
800045ce:	a9 6c       	lsl	r12,0x8
800045d0:	e0 2c f0 00 	sub	r12,61440
	gpio_port->ifrc = 1 << (pin & 0x1F);

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
800045d4:	f9 48 00 d8 	st.w	r12[216],r8
#endif
}
800045d8:	5e fc       	retal	r12

800045da <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
800045da:	c0 08       	rjmp	800045da <_unhandled_interrupt>

800045dc <INTC_register_interrupt>:

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
800045dc:	f3 db c0 05 	bfextu	r9,r11,0x0,0x5
800045e0:	fe c8 cd c4 	sub	r8,pc,-12860
800045e4:	a5 9b       	lsr	r11,0x5
800045e6:	f0 0b 00 38 	add	r8,r8,r11<<0x3
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
800045ea:	70 18       	ld.w	r8,r8[0x4]
800045ec:	f0 09 09 2c 	st.w	r8[r9<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
800045f0:	58 0a       	cp.w	r10,0
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800045f2:	c0 c1       	brne	8000460a <INTC_register_interrupt+0x2e>
800045f4:	fe 78 08 00 	mov	r8,-63488
800045f8:	fe c9 d1 f8 	sub	r9,pc,-11784
800045fc:	fe ca d0 f8 	sub	r10,pc,-12040
80004600:	f4 09 01 09 	sub	r9,r10,r9
	} else if (int_level == AVR32_INTC_INT1) {
80004604:	f0 0b 09 29 	st.w	r8[r11<<0x2],r9
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80004608:	5e fc       	retal	r12
8000460a:	58 1a       	cp.w	r10,1
8000460c:	c0 91       	brne	8000461e <INTC_register_interrupt+0x42>
8000460e:	fe c8 d2 0e 	sub	r8,pc,-11762
80004612:	fe c9 d1 00 	sub	r9,pc,-12032
	} else if (int_level == AVR32_INTC_INT2) {
80004616:	f2 08 01 08 	sub	r8,r9,r8
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
8000461a:	bf a8       	sbr	r8,0x1e
8000461c:	c1 18       	rjmp	8000463e <INTC_register_interrupt+0x62>
8000461e:	fe c8 d2 1e 	sub	r8,pc,-11746
80004622:	58 2a       	cp.w	r10,2
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80004624:	c0 71       	brne	80004632 <INTC_register_interrupt+0x56>
80004626:	fe c9 d1 06 	sub	r9,pc,-12026
8000462a:	f2 08 01 08 	sub	r8,r9,r8
8000462e:	bf b8       	sbr	r8,0x1f
80004630:	c0 78       	rjmp	8000463e <INTC_register_interrupt+0x62>
80004632:	fe c9 d1 04 	sub	r9,pc,-12028
80004636:	f2 08 01 08 	sub	r8,r9,r8
8000463a:	ea 18 c0 00 	orh	r8,0xc000
8000463e:	fe 79 08 00 	mov	r9,-63488
80004642:	f2 0b 09 28 	st.w	r9[r11<<0x2],r8
80004646:	5e fc       	retal	r12

80004648 <INTC_init_interrupts>:
80004648:	d4 21       	pushm	r4-r7,lr
8000464a:	fe c8 d2 4a 	sub	r8,pc,-11702
8000464e:	e3 b8 00 01 	mtsr	0x4,r8
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80004652:	fe ce d1 4e 	sub	lr,pc,-11954
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80004656:	fe c9 ce 3a 	sub	r9,pc,-12742

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000465a:	10 1e       	sub	lr,r8
8000465c:	fe cc 00 82 	sub	r12,pc,130
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80004660:	30 08       	mov	r8,0
80004662:	fe 7b 08 00 	mov	r11,-63488
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80004666:	c0 e8       	rjmp	80004682 <INTC_init_interrupts+0x3a>
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80004668:	72 16       	ld.w	r6,r9[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000466a:	ec 0a 00 26 	add	r6,r6,r10<<0x2

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000466e:	2f fa       	sub	r10,-1
80004670:	8d 0c       	st.w	r6[0x0],r12
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80004672:	0e 3a       	cp.w	r10,r7
80004674:	cf a3       	brcs	80004668 <INTC_init_interrupts+0x20>
80004676:	f6 08 09 2e 	st.w	r11[r8<<0x2],lr
8000467a:	2f 89       	sub	r9,-8
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000467c:	2f f8       	sub	r8,-1
8000467e:	59 28       	cp.w	r8,18
80004680:	c0 40       	breq	80004688 <INTC_init_interrupts+0x40>
80004682:	30 0a       	mov	r10,0
80004684:	72 07       	ld.w	r7,r9[0x0]
80004686:	cf 6b       	rjmp	80004672 <INTC_init_interrupts+0x2a>
80004688:	d8 22       	popm	r4-r7,pc
8000468a:	d7 03       	nop

8000468c <_get_interrupt_handler>:
8000468c:	e0 68 00 83 	mov	r8,131
80004690:	fe 79 08 00 	mov	r9,-63488
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80004694:	f0 0c 01 0c 	sub	r12,r8,r12
80004698:	f2 0c 03 28 	ld.w	r8,r9[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
8000469c:	f0 ca ff c0 	sub	r10,r8,-64
800046a0:	f2 0a 03 2c 	ld.w	r12,r9[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800046a4:	58 0c       	cp.w	r12,0
800046a6:	5e 0c       	reteq	r12
		? _int_handler_table[int_grp]._int_line_handler_table[32
800046a8:	fe c9 ce 8c 	sub	r9,pc,-12660
800046ac:	f8 0c 12 00 	clz	r12,r12
800046b0:	f2 08 00 38 	add	r8,r9,r8<<0x3
800046b4:	f8 0c 11 1f 	rsub	r12,r12,31
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800046b8:	70 18       	ld.w	r8,r8[0x4]
800046ba:	f0 0c 03 2c 	ld.w	r12,r8[r12<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800046be:	5e fc       	retal	r12

800046c0 <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
800046c0:	f8 c8 00 01 	sub	r8,r12,1
800046c4:	f0 0b 00 0b 	add	r11,r8,r11
800046c8:	f6 0c 0d 0a 	divu	r10,r11,r12
800046cc:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
800046ce:	f4 c8 00 01 	sub	r8,r10,1
800046d2:	e0 48 00 fe 	cp.w	r8,254
800046d6:	e0 88 00 03 	brls	800046dc <getBaudDiv+0x1c>
800046da:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
800046dc:	5c 8c       	casts.h	r12
}
800046de:	5e fc       	retal	r12

800046e0 <spi_initMaster>:
	return SPI_OK;
}

spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
800046e0:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
800046e2:	30 18       	mov	r8,1
	return SPI_OK;
}

spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
800046e4:	18 99       	mov	r9,r12
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
800046e6:	f7 3a 00 0d 	ld.ub	r10,r11[13]
800046ea:	f0 0a 18 00 	cp.b	r10,r8
800046ee:	e0 88 00 04 	brls	800046f6 <spi_initMaster+0x16>
800046f2:	30 2c       	mov	r12,2
800046f4:	d8 02       	popm	pc

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
	u_avr32_spi_mr.MR.mstr = 1;
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
	u_avr32_spi_mr.MR.llb = 0;
800046f6:	30 0a       	mov	r10,0
	if (options->modfdis > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
800046f8:	e0 68 00 80 	mov	r8,128
800046fc:	99 08       	st.w	r12[0x0],r8

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
	u_avr32_spi_mr.MR.mstr = 1;
800046fe:	30 1e       	mov	lr,1

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
80004700:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.mstr = 1;
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
80004702:	f7 3b 00 0d 	ld.ub	r11,r11[13]
	u_avr32_spi_mr.MR.llb = 0;
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
	spi->mr = u_avr32_spi_mr.mr;
80004706:	14 9c       	mov	r12,r10
	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
	u_avr32_spi_mr.MR.mstr = 1;
80004708:	f1 de d0 01 	bfins	r8,lr,0x0,0x1
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
8000470c:	f1 db d0 81 	bfins	r8,r11,0x4,0x1
	u_avr32_spi_mr.MR.llb = 0;
80004710:	f1 da d0 e1 	bfins	r8,r10,0x7,0x1
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
80004714:	30 fa       	mov	r10,15
80004716:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
	spi->mr = u_avr32_spi_mr.mr;
8000471a:	93 18       	st.w	r9[0x4],r8

	return SPI_OK;
}
8000471c:	d8 02       	popm	pc

8000471e <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
8000471e:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
80004720:	30 18       	mov	r8,1
80004722:	f0 0b 18 00 	cp.b	r11,r8
80004726:	5f be       	srhi	lr
80004728:	f0 0a 18 00 	cp.b	r10,r8
8000472c:	5f b8       	srhi	r8
8000472e:	1c 48       	or	r8,lr
80004730:	c0 30       	breq	80004736 <spi_selectionMode+0x18>
80004732:	30 2c       	mov	r12,2
80004734:	d8 02       	popm	pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
80004736:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
80004738:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
8000473c:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
80004740:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
80004744:	99 18       	st.w	r12[0x4],r8
80004746:	d8 0a       	popm	pc,r12=0

80004748 <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80004748:	78 19       	ld.w	r9,r12[0x4]

	return SPI_OK;
}

spi_status_t spi_selectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
8000474a:	18 98       	mov	r8,r12
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
8000474c:	ea 19 00 0f 	orh	r9,0xf
80004750:	99 19       	st.w	r12[0x4],r9

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
80004752:	78 1c       	ld.w	r12,r12[0x4]
80004754:	e2 1c 00 04 	andl	r12,0x4,COH
80004758:	c1 00       	breq	80004778 <spi_selectChip+0x30>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
8000475a:	30 e9       	mov	r9,14
8000475c:	f2 0b 18 00 	cp.b	r11,r9
80004760:	e0 8b 00 1a 	brhi	80004794 <spi_selectChip+0x4c>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
80004764:	70 19       	ld.w	r9,r8[0x4]
80004766:	b1 6b       	lsl	r11,0x10
80004768:	30 0c       	mov	r12,0
8000476a:	ea 1b ff f0 	orh	r11,0xfff0
8000476e:	e8 1b ff ff 	orl	r11,0xffff
80004772:	12 6b       	and	r11,r9
80004774:	91 1b       	st.w	r8[0x4],r11
80004776:	5e fc       	retal	r12
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
80004778:	30 39       	mov	r9,3
8000477a:	f2 0b 18 00 	cp.b	r11,r9
8000477e:	e0 8b 00 0b 	brhi	80004794 <spi_selectChip+0x4c>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80004782:	70 19       	ld.w	r9,r8[0x4]
80004784:	2f 0b       	sub	r11,-16
80004786:	30 1a       	mov	r10,1
80004788:	f4 0b 09 4b 	lsl	r11,r10,r11
8000478c:	5c db       	com	r11
8000478e:	12 6b       	and	r11,r9
80004790:	91 1b       	st.w	r8[0x4],r11
80004792:	5e fc       	retal	r12
80004794:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
80004796:	5e fc       	retal	r12

80004798 <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80004798:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8000479c:	c0 58       	rjmp	800047a6 <spi_unselectChip+0xe>
		if (!timeout--) {
8000479e:	58 08       	cp.w	r8,0
800047a0:	c0 21       	brne	800047a4 <spi_unselectChip+0xc>
800047a2:	5e ff       	retal	1
800047a4:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
800047a6:	78 49       	ld.w	r9,r12[0x10]
800047a8:	ed b9 00 09 	bld	r9,0x9
800047ac:	cf 91       	brne	8000479e <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
800047ae:	78 18       	ld.w	r8,r12[0x4]
800047b0:	ea 18 00 0f 	orh	r8,0xf
800047b4:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
800047b6:	30 08       	mov	r8,0
800047b8:	ea 18 01 00 	orh	r8,0x100
800047bc:	99 08       	st.w	r12[0x0],r8
800047be:	5e fd       	retal	0

800047c0 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
800047c0:	d4 31       	pushm	r0-r7,lr
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800047c2:	30 32       	mov	r2,3
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
800047c4:	16 97       	mov	r7,r11
800047c6:	18 96       	mov	r6,r12
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800047c8:	f7 34 00 0c 	ld.ub	r4,r11[12]
800047cc:	e4 04 18 00 	cp.b	r4,r2
800047d0:	e0 8b 00 46 	brhi	8000485c <spi_setupChipReg+0x9c>
			options->stay_act > 1 ||
800047d4:	f7 31 00 0b 	ld.ub	r1,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800047d8:	30 15       	mov	r5,1
800047da:	ea 01 18 00 	cp.b	r1,r5
800047de:	e0 8b 00 3f 	brhi	8000485c <spi_setupChipReg+0x9c>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
800047e2:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800047e6:	30 78       	mov	r8,7
800047e8:	f0 03 18 00 	cp.b	r3,r8
800047ec:	e0 88 00 38 	brls	8000485c <spi_setupChipReg+0x9c>
800047f0:	31 08       	mov	r8,16
800047f2:	f0 03 18 00 	cp.b	r3,r8
800047f6:	e0 8b 00 33 	brhi	8000485c <spi_setupChipReg+0x9c>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
800047fa:	14 9b       	mov	r11,r10
800047fc:	6e 1c       	ld.w	r12,r7[0x4]
800047fe:	c6 1f       	rcall	800046c0 <getBaudDiv>
80004800:	c2 e5       	brlt	8000485c <spi_setupChipReg+0x9c>

	if (baudDiv < 0) {
80004802:	08 9a       	mov	r10,r4
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80004804:	ec 1a 00 01 	eorl	r10,0x1
80004808:	30 08       	mov	r8,0
	if (baudDiv < 0) {
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
8000480a:	a1 94       	lsr	r4,0x1
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
8000480c:	f1 d4 d0 01 	bfins	r8,r4,0x0,0x1
80004810:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80004814:	ef 3a 00 09 	ld.ub	r10,r7[9]
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80004818:	20 83       	sub	r3,8
	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
8000481a:	f1 d1 d0 61 	bfins	r8,r1,0x3,0x1

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
8000481e:	0f 89       	ld.ub	r9,r7[0x0]
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;

	switch (options->reg) {
80004820:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80004824:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
80004828:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
8000482c:	ef 3a 00 0a 	ld.ub	r10,r7[10]
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80004830:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
80004834:	ea 09 18 00 	cp.b	r9,r5

	switch (options->reg) {
80004838:	c0 c0       	breq	80004850 <spi_setupChipReg+0x90>
8000483a:	c0 93       	brcs	8000484c <spi_setupChipReg+0x8c>
8000483c:	30 2a       	mov	r10,2
8000483e:	f4 09 18 00 	cp.b	r9,r10
80004842:	c0 90       	breq	80004854 <spi_setupChipReg+0x94>
80004844:	e4 09 18 00 	cp.b	r9,r2
80004848:	c0 a1       	brne	8000485c <spi_setupChipReg+0x9c>
8000484a:	c0 78       	rjmp	80004858 <spi_setupChipReg+0x98>
8000484c:	8d c8       	st.w	r6[0x30],r8
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
8000484e:	c0 68       	rjmp	8000485a <spi_setupChipReg+0x9a>
80004850:	8d d8       	st.w	r6[0x34],r8
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
80004852:	c0 48       	rjmp	8000485a <spi_setupChipReg+0x9a>
80004854:	8d e8       	st.w	r6[0x38],r8
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80004856:	c0 28       	rjmp	8000485a <spi_setupChipReg+0x9a>
80004858:	8d f8       	st.w	r6[0x3c],r8
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
8000485a:	d8 3a       	popm	r0-r7,pc,r12=0
8000485c:	30 2c       	mov	r12,2
		break;
8000485e:	d8 32       	popm	r0-r7,pc

80004860 <spi_enable>:
		}
	}
#endif

	return SPI_OK;
}
80004860:	30 18       	mov	r8,1
80004862:	99 08       	st.w	r12[0x0],r8
80004864:	5e fc       	retal	r12

80004866 <spi_write>:
80004866:	e0 68 3a 98 	mov	r8,15000

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
8000486a:	c0 58       	rjmp	80004874 <spi_write+0xe>
		if (!timeout--) {
8000486c:	58 08       	cp.w	r8,0
8000486e:	c0 21       	brne	80004872 <spi_write+0xc>
80004870:	5e ff       	retal	1
80004872:	20 18       	sub	r8,1

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80004874:	78 49       	ld.w	r9,r12[0x10]
80004876:	ed b9 00 01 	bld	r9,0x1
8000487a:	cf 91       	brne	8000486c <spi_write+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
8000487c:	5c 7b       	castu.h	r11
8000487e:	99 3b       	st.w	r12[0xc],r11
80004880:	5e fd       	retal	0

80004882 <spi_read>:
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
80004882:	e0 68 3a 98 	mov	r8,15000
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80004886:	c0 58       	rjmp	80004890 <spi_read+0xe>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
80004888:	58 08       	cp.w	r8,0
8000488a:	c0 21       	brne	8000488e <spi_read+0xc>
8000488c:	5e ff       	retal	1
8000488e:	20 18       	sub	r8,1

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80004890:	78 49       	ld.w	r9,r12[0x10]
80004892:	e2 19 02 01 	andl	r9,0x201,COH
80004896:	e0 49 02 01 	cp.w	r9,513
8000489a:	cf 71       	brne	80004888 <spi_read+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
8000489c:	78 28       	ld.w	r8,r12[0x8]
8000489e:	30 0c       	mov	r12,0
800048a0:	b6 08       	st.h	r11[0x0],r8

	return SPI_OK;
}
800048a2:	5e fc       	retal	r12

800048a4 <tc_init_waveform>:
  return 0;
}


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
800048a4:	d4 01       	pushm	lr
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
800048a6:	76 09       	ld.w	r9,r11[0x0]
800048a8:	58 29       	cp.w	r9,2
800048aa:	e0 88 00 03 	brls	800048b0 <tc_init_waveform+0xc>
800048ae:	dc 0a       	popm	pc,r12=-1
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
800048b0:	76 18       	ld.w	r8,r11[0x4]
800048b2:	a5 69       	lsl	r9,0x4
800048b4:	10 9e       	mov	lr,r8
800048b6:	e6 1e c0 00 	andh	lr,0xc000,COH
800048ba:	f2 ca ff ff 	sub	r10,r9,-1
800048be:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
800048c2:	af b9       	sbr	r9,0xf
800048c4:	1c 49       	or	r9,lr
800048c6:	10 9e       	mov	lr,r8
800048c8:	e6 1e 30 00 	andh	lr,0x3000,COH
800048cc:	1c 49       	or	r9,lr
800048ce:	10 9e       	mov	lr,r8
800048d0:	e6 1e 0c 00 	andh	lr,0xc00,COH
800048d4:	1c 49       	or	r9,lr
800048d6:	10 9e       	mov	lr,r8
800048d8:	e6 1e 03 00 	andh	lr,0x300,COH
800048dc:	1c 49       	or	r9,lr
800048de:	10 9e       	mov	lr,r8
800048e0:	e6 1e 00 c0 	andh	lr,0xc0,COH
800048e4:	1c 49       	or	r9,lr
800048e6:	10 9e       	mov	lr,r8
800048e8:	e6 1e 00 30 	andh	lr,0x30,COH
800048ec:	1c 49       	or	r9,lr
800048ee:	10 9e       	mov	lr,r8
800048f0:	e6 1e 00 0c 	andh	lr,0xc,COH
800048f4:	1c 49       	or	r9,lr
800048f6:	10 9e       	mov	lr,r8
800048f8:	e6 1e 00 03 	andh	lr,0x3,COH
800048fc:	1c 49       	or	r9,lr
800048fe:	10 9e       	mov	lr,r8
80004900:	e2 1e 60 00 	andl	lr,0x6000,COH
80004904:	1c 49       	or	r9,lr
80004906:	10 9e       	mov	lr,r8
80004908:	e2 1e 10 00 	andl	lr,0x1000,COH
8000490c:	1c 49       	or	r9,lr
8000490e:	10 9e       	mov	lr,r8
80004910:	e2 1e 0c 00 	andl	lr,0xc00,COH
80004914:	1c 49       	or	r9,lr
80004916:	10 9e       	mov	lr,r8
80004918:	e2 1e 03 00 	andl	lr,0x300,COH
8000491c:	1c 49       	or	r9,lr
8000491e:	10 9e       	mov	lr,r8
80004920:	e2 1e 00 80 	andl	lr,0x80,COH
80004924:	10 9b       	mov	r11,r8
80004926:	1c 49       	or	r9,lr
80004928:	e2 1b 00 08 	andl	r11,0x8,COH
8000492c:	10 9e       	mov	lr,r8
8000492e:	e2 18 00 30 	andl	r8,0x30,COH
80004932:	e2 1e 00 40 	andl	lr,0x40,COH
80004936:	1c 49       	or	r9,lr
80004938:	f3 e8 10 08 	or	r8,r9,r8
8000493c:	16 48       	or	r8,r11
8000493e:	f8 0a 09 28 	st.w	r12[r10<<0x2],r8
80004942:	d8 0a       	popm	pc,r12=0

80004944 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80004944:	58 2b       	cp.w	r11,2
80004946:	e0 88 00 03 	brls	8000494c <tc_start+0x8>
8000494a:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
8000494c:	a7 6b       	lsl	r11,0x6
8000494e:	16 0c       	add	r12,r11
80004950:	30 58       	mov	r8,5
80004952:	99 08       	st.w	r12[0x0],r8
80004954:	5e fd       	retal	0

80004956 <tc_read_sr>:


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80004956:	58 2b       	cp.w	r11,2
80004958:	e0 88 00 03 	brls	8000495e <tc_read_sr+0x8>
8000495c:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  return tc->channel[channel].sr;
8000495e:	a7 6b       	lsl	r11,0x6
80004960:	2e 0b       	sub	r11,-32
80004962:	16 0c       	add	r12,r11
80004964:	78 0c       	ld.w	r12,r12[0x0]
}
80004966:	5e fc       	retal	r12

80004968 <tc_write_rc>:


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80004968:	58 2b       	cp.w	r11,2
8000496a:	e0 88 00 03 	brls	80004970 <tc_write_rc+0x8>
8000496e:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
80004970:	f6 08 15 04 	lsl	r8,r11,0x4
80004974:	2f f8       	sub	r8,-1
80004976:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
8000497a:	ed b8 00 0f 	bld	r8,0xf
8000497e:	c0 c1       	brne	80004996 <tc_write_rc+0x2e>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
80004980:	a7 6b       	lsl	r11,0x6
80004982:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
80004986:	16 0c       	add	r12,r11
80004988:	2e 4c       	sub	r12,-28
8000498a:	78 08       	ld.w	r8,r12[0x0]
8000498c:	e0 18 00 00 	andl	r8,0x0
80004990:	f3 e8 10 08 	or	r8,r9,r8
80004994:	99 08       	st.w	r12[0x0],r8

  return value;
80004996:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
}
8000499a:	5e fc       	retal	r12

8000499c <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
8000499c:	d4 21       	pushm	r4-r7,lr
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
8000499e:	e1 b9 00 00 	mfsr	r9,0x0

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800049a2:	58 2b       	cp.w	r11,2
800049a4:	e0 88 00 03 	brls	800049aa <tc_configure_interrupts+0xe>
800049a8:	dc 2a       	popm	r4-r7,pc,r12=-1
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
800049aa:	74 08       	ld.w	r8,r10[0x0]
800049ac:	10 9e       	mov	lr,r8
800049ae:	e2 1e 00 02 	andl	lr,0x2,COH
800049b2:	e2 18 00 fd 	andl	r8,0xfd,COH
800049b6:	1c 48       	or	r8,lr
800049b8:	f6 0e 15 06 	lsl	lr,r11,0x6
800049bc:	f8 0e 00 0e 	add	lr,r12,lr
800049c0:	2d ce       	sub	lr,-36
800049c2:	9d 08       	st.w	lr[0x0],r8
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
800049c4:	ee 19 00 01 	eorh	r9,0x1
800049c8:	f3 d9 c2 01 	bfextu	r9,r9,0x10,0x1
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
800049cc:	c0 20       	breq	800049d0 <tc_configure_interrupts+0x34>
800049ce:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800049d0:	74 08       	ld.w	r8,r10[0x0]
800049d2:	e0 67 00 80 	mov	r7,128
800049d6:	ed d8 c0 e1 	bfextu	r6,r8,0x7,0x1
800049da:	f9 b7 01 00 	movne	r7,0
800049de:	f5 d8 c0 01 	bfextu	r10,r8,0x0,0x1
800049e2:	ec 1a 00 01 	eorl	r10,0x1
800049e6:	ef ea 10 0a 	or	r10,r7,r10
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
800049ea:	ef d8 c0 c1 	bfextu	r7,r8,0x6,0x1
800049ee:	f9 b7 00 40 	moveq	r7,64
800049f2:	f9 b7 01 00 	movne	r7,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800049f6:	0e 4a       	or	r10,r7
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
800049f8:	ef d8 c0 a1 	bfextu	r7,r8,0x5,0x1
800049fc:	f9 b7 00 20 	moveq	r7,32
80004a00:	f9 b7 01 00 	movne	r7,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80004a04:	0e 4a       	or	r10,r7
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
80004a06:	ef d8 c0 81 	bfextu	r7,r8,0x4,0x1
80004a0a:	f9 b7 00 10 	moveq	r7,16
80004a0e:	f9 b7 01 00 	movne	r7,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80004a12:	0e 4a       	or	r10,r7
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
80004a14:	ef d8 c0 61 	bfextu	r7,r8,0x3,0x1
80004a18:	f9 b7 00 08 	moveq	r7,8
80004a1c:	f9 b7 01 00 	movne	r7,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80004a20:	0e 4a       	or	r10,r7
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80004a22:	ef d8 c0 41 	bfextu	r7,r8,0x2,0x1
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
80004a26:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80004a2a:	58 07       	cp.w	r7,0
80004a2c:	f9 b7 00 04 	moveq	r7,4
80004a30:	f9 b7 01 00 	movne	r7,0
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
80004a34:	58 08       	cp.w	r8,0
80004a36:	f9 b8 00 02 	moveq	r8,2
80004a3a:	f9 b8 01 00 	movne	r8,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80004a3e:	0e 4a       	or	r10,r7
80004a40:	f5 e8 10 08 	or	r8,r10,r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80004a44:	f6 0e 15 06 	lsl	lr,r11,0x6
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80004a48:	a7 6b       	lsl	r11,0x6
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80004a4a:	2e 0e       	sub	lr,-32
80004a4c:	f8 0e 00 0e 	add	lr,r12,lr
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80004a50:	16 0c       	add	r12,r11
80004a52:	2d 8c       	sub	r12,-40
80004a54:	99 08       	st.w	r12[0x0],r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80004a56:	7c 08       	ld.w	r8,lr[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
80004a58:	58 09       	cp.w	r9,0
80004a5a:	c0 31       	brne	80004a60 <tc_configure_interrupts+0xc4>
80004a5c:	12 9c       	mov	r12,r9
80004a5e:	d8 22       	popm	r4-r7,pc
80004a60:	d5 03       	csrf	0x10
80004a62:	d8 2a       	popm	r4-r7,pc,r12=0

80004a64 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80004a64:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80004a66:	f6 0e 15 04 	lsl	lr,r11,0x4
80004a6a:	1c 3a       	cp.w	r10,lr
80004a6c:	f9 be 02 10 	movhs	lr,16
80004a70:	f9 be 03 08 	movlo	lr,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80004a74:	fc 0b 02 4b 	mul	r11,lr,r11
80004a78:	f6 08 16 01 	lsr	r8,r11,0x1
80004a7c:	f0 0a 00 3a 	add	r10,r8,r10<<0x3
80004a80:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80004a84:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80004a88:	f2 c8 00 01 	sub	r8,r9,1
80004a8c:	e0 48 ff fe 	cp.w	r8,65534
80004a90:	e0 88 00 03 	brls	80004a96 <usart_set_async_baudrate+0x32>
80004a94:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80004a96:	78 18       	ld.w	r8,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80004a98:	e8 6b 00 00 	mov	r11,524288
80004a9c:	e4 18 ff f7 	andh	r8,0xfff7
80004aa0:	e0 18 fe cf 	andl	r8,0xfecf
80004aa4:	59 0e       	cp.w	lr,16
80004aa6:	f6 0e 17 10 	movne	lr,r11
80004aaa:	f9 be 00 00 	moveq	lr,0
80004aae:	fd e8 10 08 	or	r8,lr,r8
80004ab2:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80004ab4:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80004ab8:	f3 ea 11 09 	or	r9,r9,r10<<0x10
80004abc:	99 89       	st.w	r12[0x20],r9
80004abe:	d8 0a       	popm	pc,r12=0

80004ac0 <usart_write_line>:
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80004ac0:	c0 e8       	rjmp	80004adc <usart_write_line+0x1c>
80004ac2:	e0 68 27 10 	mov	r8,10000
{
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80004ac6:	20 18       	sub	r8,1
80004ac8:	5b f8       	cp.w	r8,-1
80004aca:	c0 80       	breq	80004ada <usart_write_line+0x1a>
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80004acc:	78 59       	ld.w	r9,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80004ace:	ed b9 00 01 	bld	r9,0x1
80004ad2:	cf a1       	brne	80004ac6 <usart_write_line+0x6>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80004ad4:	f5 da c0 09 	bfextu	r10,r10,0x0,0x9
80004ad8:	99 7a       	st.w	r12[0x1c],r10


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
    usart_putchar(usart, *string++);
80004ada:	2f fb       	sub	r11,-1
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80004adc:	17 8a       	ld.ub	r10,r11[0x0]
80004ade:	58 0a       	cp.w	r10,0
80004ae0:	cf 11       	brne	80004ac2 <usart_write_line+0x2>
    usart_putchar(usart, *string++);
}
80004ae2:	5e fc       	retal	r12

80004ae4 <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80004ae4:	e1 b8 00 00 	mfsr	r8,0x0
80004ae8:	ee 18 00 01 	eorh	r8,0x1
80004aec:	f1 d8 c2 01 	bfextu	r8,r8,0x10,0x1

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80004af0:	c0 20       	breq	80004af4 <usart_reset+0x10>
80004af2:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80004af4:	3f f9       	mov	r9,-1
80004af6:	99 39       	st.w	r12[0xc],r9
  usart->csr;
80004af8:	78 59       	ld.w	r9,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80004afa:	58 08       	cp.w	r8,0
80004afc:	c0 20       	breq	80004b00 <usart_reset+0x1c>
80004afe:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80004b00:	30 08       	mov	r8,0
80004b02:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80004b04:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
80004b06:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80004b08:	ea 68 61 0c 	mov	r8,680204
80004b0c:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80004b0e:	5e fc       	retal	r12

80004b10 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80004b10:	d4 21       	pushm	r4-r7,lr
80004b12:	20 1d       	sub	sp,4
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80004b14:	50 0a       	stdsp	sp[0x0],r10
              AVR32_USART_CR_RTSDIS_MASK;
}


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80004b16:	16 96       	mov	r6,r11
80004b18:	18 97       	mov	r7,r12
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80004b1a:	ce 5f       	rcall	80004ae4 <usart_reset>
80004b1c:	40 0a       	lddsp	r10,sp[0x0]

  // Check input values.
  if (!opt || // Null pointer.
80004b1e:	58 06       	cp.w	r6,0
80004b20:	c5 40       	breq	80004bc8 <usart_init_rs232+0xb8>
80004b22:	0d c8       	ld.ub	r8,r6[0x4]
      opt->charlength < 5 || opt->charlength > 9 ||
80004b24:	30 49       	mov	r9,4
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80004b26:	f2 08 18 00 	cp.b	r8,r9
80004b2a:	e0 88 00 4f 	brls	80004bc8 <usart_init_rs232+0xb8>
80004b2e:	30 95       	mov	r5,9
80004b30:	ea 08 18 00 	cp.b	r8,r5
80004b34:	e0 8b 00 4a 	brhi	80004bc8 <usart_init_rs232+0xb8>
80004b38:	0d d9       	ld.ub	r9,r6[0x5]
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80004b3a:	30 78       	mov	r8,7
80004b3c:	f0 09 18 00 	cp.b	r9,r8
80004b40:	e0 8b 00 44 	brhi	80004bc8 <usart_init_rs232+0xb8>
80004b44:	8c 39       	ld.sh	r9,r6[0x6]
      opt->stopbits > 2 + 255 ||
80004b46:	e0 68 01 01 	mov	r8,257
80004b4a:	f0 09 19 00 	cp.h	r9,r8
80004b4e:	e0 8b 00 3d 	brhi	80004bc8 <usart_init_rs232+0xb8>
80004b52:	ed 39 00 08 	ld.ub	r9,r6[8]
      opt->channelmode > 3 ||
80004b56:	30 38       	mov	r8,3
80004b58:	f0 09 18 00 	cp.b	r9,r8
80004b5c:	e0 8b 00 36 	brhi	80004bc8 <usart_init_rs232+0xb8>
80004b60:	6c 0b       	ld.w	r11,r6[0x0]
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80004b62:	0e 9c       	mov	r12,r7
80004b64:	c8 0f       	rcall	80004a64 <usart_set_async_baudrate>
80004b66:	58 1c       	cp.w	r12,1
80004b68:	c3 00       	breq	80004bc8 <usart_init_rs232+0xb8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80004b6a:	0d c8       	ld.ub	r8,r6[0x4]
80004b6c:	ea 08 18 00 	cp.b	r8,r5
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80004b70:	c0 41       	brne	80004b78 <usart_init_rs232+0x68>
80004b72:	6e 18       	ld.w	r8,r7[0x4]
80004b74:	b1 b8       	sbr	r8,0x11
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80004b76:	c0 58       	rjmp	80004b80 <usart_init_rs232+0x70>
80004b78:	20 58       	sub	r8,5
80004b7a:	6e 19       	ld.w	r9,r7[0x4]
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80004b7c:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80004b80:	8f 18       	st.w	r7[0x4],r8
80004b82:	6e 19       	ld.w	r9,r7[0x4]
80004b84:	ed 3a 00 08 	ld.ub	r10,r6[8]
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80004b88:	0d d8       	ld.ub	r8,r6[0x5]
80004b8a:	a9 78       	lsl	r8,0x9
80004b8c:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80004b90:	12 48       	or	r8,r9
80004b92:	8f 18       	st.w	r7[0x4],r8
80004b94:	30 29       	mov	r9,2
80004b96:	8c 38       	ld.sh	r8,r6[0x6]
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80004b98:	f2 08 19 00 	cp.h	r8,r9
80004b9c:	e0 88 00 09 	brls	80004bae <usart_init_rs232+0x9e>
80004ba0:	6e 18       	ld.w	r8,r7[0x4]
80004ba2:	ad b8       	sbr	r8,0xd
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80004ba4:	8f 18       	st.w	r7[0x4],r8
80004ba6:	8c b8       	ld.uh	r8,r6[0x6]
80004ba8:	20 28       	sub	r8,2
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80004baa:	8f a8       	st.w	r7[0x28],r8
80004bac:	c0 68       	rjmp	80004bb8 <usart_init_rs232+0xa8>
80004bae:	6e 19       	ld.w	r9,r7[0x4]
80004bb0:	5c 78       	castu.h	r8
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80004bb2:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
80004bb6:	8f 18       	st.w	r7[0x4],r8
80004bb8:	6e 18       	ld.w	r8,r7[0x4]
80004bba:	e0 18 ff f0 	andl	r8,0xfff0

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80004bbe:	8f 18       	st.w	r7[0x4],r8
80004bc0:	30 0c       	mov	r12,0
80004bc2:	35 08       	mov	r8,80
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80004bc4:	8f 08       	st.w	r7[0x0],r8
80004bc6:	c0 28       	rjmp	80004bca <usart_init_rs232+0xba>
80004bc8:	30 1c       	mov	r12,1
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80004bca:	2f fd       	sub	sp,-4
80004bcc:	d8 22       	popm	r4-r7,pc
}
80004bce:	d7 03       	nop

80004bd0 <uhd_get_speed>:
	cpu_irq_restore(flags);
}

uhd_speed_t uhd_get_speed(void)
{
	switch (uhd_get_speed_mode()) {
80004bd0:	fe 68 08 04 	mov	r8,-129020
80004bd4:	70 08       	ld.w	r8,r8[0x0]
80004bd6:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
80004bda:	58 38       	cp.w	r8,3
80004bdc:	c0 21       	brne	80004be0 <uhd_get_speed+0x10>
80004bde:	5e fd       	retal	0
80004be0:	fe c9 d3 34 	sub	r9,pc,-11468
80004be4:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]

	default:
		Assert(false);
		return UHD_SPEED_LOW;
	}
}
80004be8:	5e fc       	retal	r12
80004bea:	d7 03       	nop

80004bec <uhd_send_reset>:
	return uhd_get_microsof_number();
}

void uhd_send_reset(uhd_callback_reset_t callback)
{
	uhd_reset_callback = callback;
80004bec:	e0 69 08 d0 	mov	r9,2256
	uhd_start_reset();
80004bf0:	93 0c       	st.w	r9[0x0],r12
80004bf2:	fe 68 04 00 	mov	r8,-130048
80004bf6:	70 09       	ld.w	r9,r8[0x0]
80004bf8:	a9 b9       	sbr	r9,0x9
}
80004bfa:	91 09       	st.w	r8[0x0],r9
80004bfc:	5e fc       	retal	r12
80004bfe:	d7 03       	nop

80004c00 <uhd_suspend>:

void uhd_suspend(void)
{
80004c00:	d4 01       	pushm	lr
	if (uhd_ctrl_request_timeout) {
80004c02:	e0 68 0d 4c 	mov	r8,3404
80004c06:	90 08       	ld.sh	r8,r8[0x0]
80004c08:	58 08       	cp.w	r8,0
		// Delay suspend after setup requests
		uhd_b_suspend_requested = true;
80004c0a:	c0 50       	breq	80004c14 <uhd_suspend+0x14>
80004c0c:	30 19       	mov	r9,1
80004c0e:	e0 68 09 4f 	mov	r8,2383
		return;
80004c12:	c1 d8       	rjmp	80004c4c <uhd_suspend+0x4c>
80004c14:	fe 69 05 c4 	mov	r9,-129596
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
		uhd_freeze_pipe(pipe);
80004c18:	10 9a       	mov	r10,r8
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80004c1a:	e2 6c 00 00 	mov	r12,131072
		uhd_freeze_pipe(pipe);
80004c1e:	72 0b       	ld.w	r11,r9[0x0]
80004c20:	93 cc       	st.w	r9[0x30],r12
{
	uhd_reset_callback = callback;
	uhd_start_reset();
}

void uhd_suspend(void)
80004c22:	f2 ce ff d0 	sub	lr,r9,-48
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80004c26:	2f f8       	sub	r8,-1
		uhd_freeze_pipe(pipe);
80004c28:	ee 1b 00 02 	eorh	r11,0x2
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80004c2c:	2f c9       	sub	r9,-4
80004c2e:	f7 db c2 21 	bfextu	r11,r11,0x11,0x1
80004c32:	f6 08 09 4b 	lsl	r11,r11,r8
80004c36:	f7 ea 10 0a 	or	r10,r11,r10
		uhd_b_suspend_requested = true;
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
80004c3a:	5c 5a       	castu.b	r10
80004c3c:	58 68       	cp.w	r8,6
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
		uhd_freeze_pipe(pipe);
	}
	// Wait three SOFs before entering in suspend state
	uhd_suspend_start = 3;
80004c3e:	cf 01       	brne	80004c1e <uhd_suspend+0x1e>
		uhd_b_suspend_requested = true;
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
80004c40:	e0 68 09 4d 	mov	r8,2381
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
		uhd_freeze_pipe(pipe);
	}
	// Wait three SOFs before entering in suspend state
	uhd_suspend_start = 3;
80004c44:	30 39       	mov	r9,3
80004c46:	b0 8a       	st.b	r8[0x0],r10
80004c48:	e0 68 09 4c 	mov	r8,2380
80004c4c:	b0 89       	st.b	r8[0x0],r9
80004c4e:	d8 02       	popm	pc

80004c50 <uhd_ctrl_phase_data_out>:
80004c50:	d4 21       	pushm	r4-r7,lr
80004c52:	e0 68 0d 40 	mov	r8,3392
80004c56:	e0 6b 0d 3c 	mov	r11,3388
	uint8_t *ptr_ep_data;
	uint8_t ep_ctrl_size;

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_OUT;

	if (uhd_ctrl_nb_trans == uhd_ctrl_request_first->req.wLength) {
80004c5a:	70 0a       	ld.w	r10,r8[0x0]
static void uhd_ctrl_phase_data_out(void)
{
	uint8_t *ptr_ep_data;
	uint8_t ep_ctrl_size;

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_OUT;
80004c5c:	30 19       	mov	r9,1

	if (uhd_ctrl_nb_trans == uhd_ctrl_request_first->req.wLength) {
80004c5e:	e0 68 0d 44 	mov	r8,3396
80004c62:	97 09       	st.w	r11[0x0],r9
80004c64:	90 0c       	ld.sh	r12,r8[0x0]
80004c66:	15 fe       	ld.ub	lr,r10[0x7]
80004c68:	f5 38 00 08 	ld.ub	r8,r10[8]
80004c6c:	f1 ee 10 88 	or	r8,r8,lr<<0x8
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_IN);
80004c70:	f0 0c 19 00 	cp.h	r12,r8
80004c74:	c1 91       	brne	80004ca6 <uhd_ctrl_phase_data_out+0x56>
80004c76:	fe 6a 05 00 	mov	r10,-129792
80004c7a:	74 08       	ld.w	r8,r10[0x0]
80004c7c:	e0 18 fc ff 	andl	r8,0xfcff
	uhd_ack_in_received(0);
80004c80:	a9 a8       	sbr	r8,0x8
80004c82:	95 08       	st.w	r10[0x0],r8
	uhd_ack_short_packet(0);
80004c84:	fe 68 05 60 	mov	r8,-129696
80004c88:	91 09       	st.w	r8[0x0],r9
	uhd_enable_in_received_interrupt(0);
80004c8a:	e0 6a 00 80 	mov	r10,128
80004c8e:	91 0a       	st.w	r8[0x0],r10
	uhd_ack_fifocon(0);
80004c90:	fe 68 05 f0 	mov	r8,-129552
80004c94:	91 09       	st.w	r8[0x0],r9
80004c96:	e0 69 40 00 	mov	r9,16384
 * \internal
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
80004c9a:	fe 68 06 20 	mov	r8,-129504
80004c9e:	91 09       	st.w	r8[0x0],r9
		// End of DATA phase
		uhd_ctrl_phase_zlp_in();
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
80004ca0:	30 39       	mov	r9,3
80004ca2:	97 09       	st.w	r11[0x0],r9
80004ca4:	c7 a8       	rjmp	80004d98 <uhd_ctrl_phase_data_out+0x148>
80004ca6:	f5 09 00 10 	ld.sh	r9,r10[16]
80004caa:	30 08       	mov	r8,0
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
				|| !uhd_ctrl_request_first->callback_run(
80004cac:	f0 09 19 00 	cp.h	r9,r8
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
80004cb0:	c2 91       	brne	80004d02 <uhd_ctrl_phase_data_out+0xb2>
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
80004cb2:	74 58       	ld.w	r8,r10[0x14]
80004cb4:	58 08       	cp.w	r8,0
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
80004cb6:	c0 b0       	breq	80004ccc <uhd_ctrl_phase_data_out+0x7c>
80004cb8:	fe 69 04 24 	mov	r9,-130012
80004cbc:	f4 cb ff f4 	sub	r11,r10,-12
80004cc0:	72 0c       	ld.w	r12,r9[0x0]
80004cc2:	2f 0a       	sub	r10,-16
80004cc4:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_IN);
80004cc8:	5d 18       	icall	r8
80004cca:	c1 c1       	brne	80004d02 <uhd_ctrl_phase_data_out+0xb2>
80004ccc:	fe 69 05 00 	mov	r9,-129792
80004cd0:	72 08       	ld.w	r8,r9[0x0]
80004cd2:	e0 18 fc ff 	andl	r8,0xfcff
	uhd_ack_in_received(0);
80004cd6:	a9 a8       	sbr	r8,0x8
80004cd8:	93 08       	st.w	r9[0x0],r8
80004cda:	fe 69 05 60 	mov	r9,-129696
	uhd_ack_short_packet(0);
80004cde:	30 18       	mov	r8,1
80004ce0:	93 08       	st.w	r9[0x0],r8
	uhd_enable_in_received_interrupt(0);
80004ce2:	e0 6a 00 80 	mov	r10,128
80004ce6:	93 0a       	st.w	r9[0x0],r10
	uhd_ack_fifocon(0);
80004ce8:	fe 69 05 f0 	mov	r9,-129552
80004cec:	93 08       	st.w	r9[0x0],r8
80004cee:	e0 69 40 00 	mov	r9,16384
 * \internal
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
80004cf2:	fe 68 06 20 	mov	r8,-129504
80004cf6:	91 09       	st.w	r8[0x0],r9
80004cf8:	30 3a       	mov	r10,3
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
80004cfa:	e0 69 0d 3c 	mov	r9,3388
80004cfe:	93 0a       	st.w	r9[0x0],r10
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
80004d00:	c4 c8       	rjmp	80004d98 <uhd_ctrl_phase_data_out+0x148>
80004d02:	fe 69 05 00 	mov	r9,-129792
80004d06:	72 06       	ld.w	r6,r9[0x0]
80004d08:	72 08       	ld.w	r8,r9[0x0]
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
80004d0a:	e0 18 fc ff 	andl	r8,0xfcff
80004d0e:	a9 b8       	sbr	r8,0x9
80004d10:	93 08       	st.w	r9[0x0],r8
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
80004d12:	30 88       	mov	r8,8
80004d14:	30 29       	mov	r9,2
80004d16:	ed d6 c0 83 	bfextu	r6,r6,0x4,0x3
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
80004d1a:	30 0a       	mov	r10,0

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
80004d1c:	ea 1a d0 00 	orh	r10,0xd000
	ep_ctrl_size = uhd_get_pipe_size(0);
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
80004d20:	f0 06 09 46 	lsl	r6,r8,r6
80004d24:	e0 6e 0d 40 	mov	lr,3392
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
80004d28:	fe 68 05 60 	mov	r8,-129696
80004d2c:	5c 56       	castu.b	r6
			&& ep_ctrl_size && uhd_ctrl_request_first->payload_size) {
		*ptr_ep_data++ = *uhd_ctrl_request_first->payload++;
80004d2e:	91 09       	st.w	r8[0x0],r9
80004d30:	30 0c       	mov	r12,0
80004d32:	e0 69 0d 44 	mov	r9,3396
		uhd_ctrl_nb_trans++;
80004d36:	30 07       	mov	r7,0
80004d38:	c0 e8       	rjmp	80004d54 <uhd_ctrl_phase_data_out+0x104>
80004d3a:	70 3b       	ld.w	r11,r8[0xc]
		ep_ctrl_size--;
		uhd_ctrl_request_first->payload_size--;
80004d3c:	17 35       	ld.ub	r5,r11++
80004d3e:	14 c5       	st.b	r10++,r5
80004d40:	91 3b       	st.w	r8[0xc],r11
80004d42:	92 08       	ld.sh	r8,r9[0x0]
80004d44:	2f f8       	sub	r8,-1
80004d46:	b2 08       	st.h	r9[0x0],r8

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
80004d48:	7c 08       	ld.w	r8,lr[0x0]
80004d4a:	f1 0b 00 10 	ld.sh	r11,r8[16]
80004d4e:	20 1b       	sub	r11,1
80004d50:	f1 5b 00 10 	st.h	r8[16],r11
80004d54:	92 05       	ld.sh	r5,r9[0x0]
80004d56:	7c 08       	ld.w	r8,lr[0x0]
80004d58:	11 f4       	ld.ub	r4,r8[0x7]
80004d5a:	f1 3b 00 08 	ld.ub	r11,r8[8]
80004d5e:	f7 e4 10 8b 	or	r11,r11,r4<<0x8
80004d62:	f6 05 19 00 	cp.h	r5,r11
80004d66:	5f 3b       	srlo	r11
80004d68:	ec 0a 01 05 	sub	r5,r6,r10
80004d6c:	f8 05 18 00 	cp.b	r5,r12
			&& ep_ctrl_size && uhd_ctrl_request_first->payload_size) {
80004d70:	5f 15       	srne	r5
80004d72:	eb eb 00 0b 	and	r11,r5,r11
80004d76:	f8 0b 18 00 	cp.b	r11,r12
		*ptr_ep_data++ = *uhd_ctrl_request_first->payload++;
		uhd_ctrl_nb_trans++;
		ep_ctrl_size--;
		uhd_ctrl_request_first->payload_size--;
	}
	uhd_enable_out_ready_interrupt(0);
80004d7a:	c0 60       	breq	80004d86 <uhd_ctrl_phase_data_out+0x136>
80004d7c:	f1 0b 00 10 	ld.sh	r11,r8[16]
80004d80:	ee 0b 19 00 	cp.h	r11,r7
	uhd_ack_fifocon(0);
80004d84:	cd b1       	brne	80004d3a <uhd_ctrl_phase_data_out+0xea>
80004d86:	30 29       	mov	r9,2
80004d88:	fe 68 05 f0 	mov	r8,-129552
	uhd_unfreeze_pipe(0);
80004d8c:	91 09       	st.w	r8[0x0],r9
80004d8e:	fe 68 06 20 	mov	r8,-129504
80004d92:	e0 69 40 00 	mov	r9,16384
80004d96:	91 09       	st.w	r8[0x0],r9
80004d98:	e2 69 00 00 	mov	r9,131072
80004d9c:	91 09       	st.w	r8[0x0],r9
80004d9e:	d8 22       	popm	r4-r7,pc

80004da0 <uhd_get_pipe>:
 * \param endp  Endpoint number
 *
 * \return Pipe number
 */
static uint8_t uhd_get_pipe(usb_add_t add, usb_ep_t endp)
{
80004da0:	d4 31       	pushm	r0-r7,lr
80004da2:	fe 6a 05 00 	mov	r10,-129792
80004da6:	18 98       	mov	r8,r12
80004da8:	30 09       	mov	r9,0
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80004daa:	fe 64 00 00 	mov	r4,-131072
80004dae:	30 15       	mov	r5,1
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80004db0:	37 f6       	mov	r6,127
			continue;
		}
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
80004db2:	e0 67 00 80 	mov	r7,128
{
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80004db6:	e8 f2 04 1c 	ld.w	r2,r4[1052]
 * \param endp  Endpoint number
 *
 * \return Pipe number
 */
static uint8_t uhd_get_pipe(usb_add_t add, usb_ep_t endp)
{
80004dba:	f9 d9 c0 08 	bfextu	r12,r9,0x0,0x8
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80004dbe:	ea 09 09 41 	lsl	r1,r5,r9
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80004dc2:	18 9e       	mov	lr,r12
			continue;
		}
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
80004dc4:	f8 c3 ff ff 	sub	r3,r12,-1
	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80004dc8:	e2 1e 00 fc 	andl	lr,0xfc,COH
{
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80004dcc:	e3 e2 00 02 	and	r2,r1,r2
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80004dd0:	e0 3e fb dc 	sub	lr,130012
{
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80004dd4:	58 02       	cp.w	r2,0
80004dd6:	c1 d0       	breq	80004e10 <uhd_get_pipe+0x70>
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80004dd8:	7c 02       	ld.w	r2,lr[0x0]
80004dda:	fd d9 c0 02 	bfextu	lr,r9,0x0,0x2
80004dde:	a3 7e       	lsl	lr,0x3
80004de0:	ec 0e 09 4e 	lsl	lr,r6,lr
80004de4:	1c 62       	and	r2,lr
80004de6:	5c 9e       	brev	lr
80004de8:	fc 0e 12 00 	clz	lr,lr
80004dec:	e4 0e 0a 4e 	lsr	lr,r2,lr
80004df0:	1c 38       	cp.w	r8,lr
80004df2:	c0 f1       	brne	80004e10 <uhd_get_pipe+0x70>
			continue;
		}
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
80004df4:	74 02       	ld.w	r2,r10[0x0]
80004df6:	74 0e       	ld.w	lr,r10[0x0]
80004df8:	e5 d2 c2 04 	bfextu	r2,r2,0x10,0x4
80004dfc:	fd de c1 02 	bfextu	lr,lr,0x8,0x2
80004e00:	58 1e       	cp.w	lr,1
80004e02:	ee 0e 17 00 	moveq	lr,r7
80004e06:	f9 be 01 00 	movne	lr,0
80004e0a:	04 4e       	or	lr,r2
80004e0c:	1c 3b       	cp.w	r11,lr
80004e0e:	c0 70       	breq	80004e1c <uhd_get_pipe+0x7c>
80004e10:	f9 d3 c0 08 	bfextu	r12,r3,0x0,0x8
80004e14:	2f f9       	sub	r9,-1
80004e16:	2f ca       	sub	r10,-4
static uint8_t uhd_get_pipe(usb_add_t add, usb_ep_t endp)
{
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
80004e18:	58 79       	cp.w	r9,7
80004e1a:	cc e1       	brne	80004db6 <uhd_get_pipe+0x16>
			continue;
		}
		break;
	}
	return pipe;
}
80004e1c:	d8 32       	popm	r0-r7,pc
80004e1e:	d7 03       	nop

80004e20 <uhd_pipe_finish_job>:
 *
 * \param pipe   Pipe number
 * \param status Status of the transfer
 */
static void uhd_pipe_finish_job(uint8_t pipe, uhd_trans_status_t status)
{
80004e20:	d4 21       	pushm	r4-r7,lr
	uhd_pipe_job_t *ptr_job;

	// Get job corresponding at endpoint
	ptr_job = &uhd_pipe_job[pipe - 1];
80004e22:	e0 68 08 d4 	mov	r8,2260
80004e26:	f8 c9 00 01 	sub	r9,r12,1
80004e2a:	16 9a       	mov	r10,r11
80004e2c:	f2 09 00 29 	add	r9,r9,r9<<0x2
80004e30:	f0 09 00 29 	add	r9,r8,r9<<0x2
	if (ptr_job->busy == false) {
80004e34:	72 08       	ld.w	r8,r9[0x0]
80004e36:	58 08       	cp.w	r8,0
		return; // No job running
	}
	ptr_job->busy = false;
80004e38:	c2 f4       	brge	80004e96 <uhd_pipe_finish_job+0x76>
80004e3a:	30 0b       	mov	r11,0
80004e3c:	f1 db d3 e1 	bfins	r8,r11,0x1f,0x1
	if (NULL == ptr_job->call_end) {
80004e40:	93 08       	st.w	r9[0x0],r8
80004e42:	72 48       	ld.w	r8,r9[0x10]
80004e44:	58 08       	cp.w	r8,0
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
			uhd_get_pipe_endpoint_address(pipe),
80004e46:	c2 80       	breq	80004e96 <uhd_pipe_finish_job+0x76>
80004e48:	f8 0e 15 02 	lsl	lr,r12,0x2
80004e4c:	e0 3e fb 00 	sub	lr,129792
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_end) {
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
80004e50:	ef dc c0 02 	bfextu	r7,r12,0x0,0x2
80004e54:	7c 06       	ld.w	r6,lr[0x0]
80004e56:	e2 1c 03 fc 	andl	r12,0x3fc,COH
80004e5a:	7c 0b       	ld.w	r11,lr[0x0]
80004e5c:	e0 3c fb dc 	sub	r12,130012
80004e60:	fd d6 c2 04 	bfextu	lr,r6,0x10,0x4
80004e64:	a3 77       	lsl	r7,0x3
80004e66:	f7 db c1 02 	bfextu	r11,r11,0x8,0x2
80004e6a:	e0 66 00 80 	mov	r6,128
80004e6e:	58 1b       	cp.w	r11,1
80004e70:	ec 0b 17 00 	moveq	r11,r6
80004e74:	f9 bb 01 00 	movne	r11,0
80004e78:	1c 4b       	or	r11,lr
80004e7a:	78 0e       	ld.w	lr,r12[0x0]
80004e7c:	37 fc       	mov	r12,127
80004e7e:	f8 07 09 4c 	lsl	r12,r12,r7
80004e82:	f9 ee 00 0e 	and	lr,r12,lr
80004e86:	72 39       	ld.w	r9,r9[0xc]
80004e88:	5c 9c       	brev	r12
80004e8a:	f8 0c 12 00 	clz	r12,r12
80004e8e:	fc 0c 0a 4c 	lsr	r12,lr,r12
80004e92:	5c 5c       	castu.b	r12
80004e94:	5d 18       	icall	r8
80004e96:	d8 22       	popm	r4-r7,pc

80004e98 <uhd_ep_abort_pipe>:
80004e98:	d4 01       	pushm	lr
80004e9a:	fe 68 00 00 	mov	r8,-131072
 * \param status Reason of abort
 */
static void uhd_ep_abort_pipe(uint8_t pipe, uhd_trans_status_t status)
{
	// Stop transfer
	uhd_reset_pipe(pipe);
80004e9e:	e0 7a 00 00 	mov	r10,65536
80004ea2:	f0 fe 04 1c 	ld.w	lr,r8[1052]
80004ea6:	f4 0c 09 4a 	lsl	r10,r10,r12
80004eaa:	f5 ee 10 0e 	or	lr,r10,lr
80004eae:	5c da       	com	r10
80004eb0:	f1 4e 04 1c 	st.w	r8[1052],lr
80004eb4:	f0 fe 04 1c 	ld.w	lr,r8[1052]
80004eb8:	1c 6a       	and	r10,lr
80004eba:	f1 4a 04 1c 	st.w	r8[1052],r10

	// Autoswitch bank and interrupts has been reseted, then re-enable it
	uhd_enable_pipe_bank_autoswitch(pipe);
80004ebe:	f8 08 15 02 	lsl	r8,r12,0x2
80004ec2:	fe 6a 05 00 	mov	r10,-129792
80004ec6:	f0 0a 00 0e 	add	lr,r8,r10
80004eca:	7c 0a       	ld.w	r10,lr[0x0]
80004ecc:	ab aa       	sbr	r10,0xa
80004ece:	9d 0a       	st.w	lr[0x0],r10
	uhd_enable_stall_interrupt(pipe);
80004ed0:	fe 6e 05 f0 	mov	lr,-129552
80004ed4:	f0 0e 00 0a 	add	r10,r8,lr
80004ed8:	34 0e       	mov	lr,64
80004eda:	95 0e       	st.w	r10[0x0],lr
	uhd_enable_pipe_error_interrupt(pipe);

	uhd_disable_out_ready_interrupt(pipe);
80004edc:	e0 38 f9 e0 	sub	r8,129504
	uhd_reset_pipe(pipe);

	// Autoswitch bank and interrupts has been reseted, then re-enable it
	uhd_enable_pipe_bank_autoswitch(pipe);
	uhd_enable_stall_interrupt(pipe);
	uhd_enable_pipe_error_interrupt(pipe);
80004ee0:	30 8e       	mov	lr,8
80004ee2:	95 0e       	st.w	r10[0x0],lr

	uhd_disable_out_ready_interrupt(pipe);
	uhd_pipe_dma_set_control(pipe, 0);
80004ee4:	30 09       	mov	r9,0
	// Autoswitch bank and interrupts has been reseted, then re-enable it
	uhd_enable_pipe_bank_autoswitch(pipe);
	uhd_enable_stall_interrupt(pipe);
	uhd_enable_pipe_error_interrupt(pipe);

	uhd_disable_out_ready_interrupt(pipe);
80004ee6:	30 2a       	mov	r10,2
80004ee8:	91 0a       	st.w	r8[0x0],r10
	uhd_pipe_dma_set_control(pipe, 0);
80004eea:	f8 08 15 04 	lsl	r8,r12,0x4
80004eee:	e0 38 f9 00 	sub	r8,129280
80004ef2:	91 29       	st.w	r8[0x8],r9
	uhd_pipe_finish_job(pipe, status);
80004ef4:	c9 6f       	rcall	80004e20 <uhd_pipe_finish_job>
80004ef6:	d8 02       	popm	pc

80004ef8 <uhd_pipe_trans_complet>:
}
80004ef8:	d4 31       	pushm	r0-r7,lr
80004efa:	e0 69 08 d4 	mov	r9,2260
80004efe:	f8 c8 00 01 	sub	r8,r12,1
	iram_size_t max_trans;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &uhd_pipe_job[pipe - 1];
80004f02:	f0 08 00 28 	add	r8,r8,r8<<0x2
80004f06:	f2 08 00 28 	add	r8,r9,r8<<0x2

	if (!ptr_job->busy) {
80004f0a:	70 09       	ld.w	r9,r8[0x0]
80004f0c:	58 09       	cp.w	r9,0
80004f0e:	e0 84 00 cb 	brge	800050a4 <uhd_pipe_trans_complet+0x1ac>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
80004f12:	70 3e       	ld.w	lr,r8[0xc]
80004f14:	70 2a       	ld.w	r10,r8[0x8]
80004f16:	14 3e       	cp.w	lr,r10
80004f18:	e0 80 00 9e 	breq	80005054 <uhd_pipe_trans_complet+0x15c>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
		max_trans = UHD_PIPE_MAX_TRANS;
		if (uhd_is_pipe_in(pipe)) {
80004f1c:	fe 6b 05 00 	mov	r11,-129792
80004f20:	f8 07 15 02 	lsl	r7,r12,0x2
80004f24:	ee 0b 00 09 	add	r9,r7,r11
80004f28:	72 0b       	ld.w	r11,r9[0x0]
80004f2a:	f7 db c1 02 	bfextu	r11,r11,0x8,0x2
80004f2e:	58 1b       	cp.w	r11,1
			// 256 is the maximum of IN requests via UPINRQ
			if ((256L*uhd_get_pipe_size(pipe))<UHD_PIPE_MAX_TRANS) {
80004f30:	c1 51       	brne	80004f5a <uhd_pipe_trans_complet+0x62>
80004f32:	72 0b       	ld.w	r11,r9[0x0]
80004f34:	30 86       	mov	r6,8
80004f36:	f7 db c0 83 	bfextu	r11,r11,0x4,0x3
80004f3a:	ec 0b 09 4b 	lsl	r11,r6,r11
80004f3e:	f6 06 09 4b 	lsl	r11,r11,r6
80004f42:	e0 4b ff ff 	cp.w	r11,65535
80004f46:	e0 89 00 0a 	brgt	80004f5a <uhd_pipe_trans_complet+0x62>
				 max_trans = 256L * uhd_get_pipe_size(pipe);
80004f4a:	72 0b       	ld.w	r11,r9[0x0]
80004f4c:	f7 db c0 83 	bfextu	r11,r11,0x4,0x3
80004f50:	ec 0b 09 4b 	lsl	r11,r6,r11
80004f54:	f6 06 09 4b 	lsl	r11,r11,r6
80004f58:	c0 38       	rjmp	80004f5e <uhd_pipe_trans_complet+0x66>
80004f5a:	e0 7b 00 00 	mov	r11,65536
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
80004f5e:	1c 1a       	sub	r10,lr
80004f60:	14 3b       	cp.w	r11,r10
80004f62:	f6 0a 17 80 	movls	r10,r11
			// The USB hardware supports a maximum
			// transfer size of UHD_PIPE_MAX_TRANS Bytes
			next_trans = max_trans;
		}

		if (next_trans == UHD_PIPE_MAX_TRANS) {
80004f66:	e0 5a 00 00 	cp.w	r10,65536
80004f6a:	c0 31       	brne	80004f70 <uhd_pipe_trans_complet+0x78>
80004f6c:	30 0b       	mov	r11,0
			// Set 0 to transfer the maximum
			uhd_dma_ctrl = (0 <<
					AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		} else {
			uhd_dma_ctrl = (next_trans <<
80004f6e:	c0 38       	rjmp	80004f74 <uhd_pipe_trans_complet+0x7c>
80004f70:	f4 0b 15 10 	lsl	r11,r10,0x10
					AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		}

		if (uhd_is_pipe_out(pipe)) {
80004f74:	72 0e       	ld.w	lr,r9[0x0]
80004f76:	fd de c1 02 	bfextu	lr,lr,0x8,0x2
80004f7a:	58 2e       	cp.w	lr,2
			if (0 != next_trans % uhd_get_pipe_size(pipe)) {
80004f7c:	c1 21       	brne	80004fa0 <uhd_pipe_trans_complet+0xa8>
80004f7e:	72 0e       	ld.w	lr,r9[0x0]
80004f80:	30 86       	mov	r6,8
80004f82:	fd de c0 83 	bfextu	lr,lr,0x4,0x3
80004f86:	ec 0e 09 4e 	lsl	lr,r6,lr
80004f8a:	20 1e       	sub	lr,1
80004f8c:	f5 ee 00 0e 	and	lr,r10,lr
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
80004f90:	c1 80       	breq	80004fc0 <uhd_pipe_trans_complet+0xc8>
		if (uhd_is_pipe_out(pipe)) {
			if (0 != next_trans % uhd_get_pipe_size(pipe)) {
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_DMAEND_EN_MASK;
80004f92:	70 0e       	ld.w	lr,r8[0x0]
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
80004f94:	0c 4b       	or	r11,r6
80004f96:	30 06       	mov	r6,0
80004f98:	fd d6 d3 c1 	bfins	lr,r6,0x1e,0x1
80004f9c:	91 0e       	st.w	r8[0x0],lr
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != uhd_get_pipe_type(pipe))
80004f9e:	c1 18       	rjmp	80004fc0 <uhd_pipe_trans_complet+0xc8>
80004fa0:	72 0e       	ld.w	lr,r9[0x0]
80004fa2:	fd de c1 82 	bfextu	lr,lr,0xc,0x2
80004fa6:	58 1e       	cp.w	lr,1
					|| (next_trans <= uhd_get_pipe_size(pipe))) {
80004fa8:	c0 a1       	brne	80004fbc <uhd_pipe_trans_complet+0xc4>
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != uhd_get_pipe_type(pipe))
80004faa:	72 0e       	ld.w	lr,r9[0x0]
80004fac:	30 86       	mov	r6,8
80004fae:	fd de c0 83 	bfextu	lr,lr,0x4,0x3
80004fb2:	ec 0e 09 4e 	lsl	lr,r6,lr
80004fb6:	1c 3a       	cp.w	r10,lr
80004fb8:	e0 8b 00 04 	brhi	80004fc0 <uhd_pipe_trans_complet+0xc8>
					|| (next_trans <= uhd_get_pipe_size(pipe))) {
				// Enable short packet reception
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_EOT_IRQ_EN_MASK
80004fbc:	e8 1b 00 14 	orl	r11,0x14
						| AVR32_USBB_UHDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		uhd_pipe_dma_set_addr(pipe, (U32) &ptr_job->buf[ptr_job->nb_trans]);
80004fc0:	70 3e       	ld.w	lr,r8[0xc]
80004fc2:	70 16       	ld.w	r6,r8[0x4]
80004fc4:	1c 06       	add	r6,lr
80004fc6:	f8 0e 15 04 	lsl	lr,r12,0x4
80004fca:	e0 3e f9 00 	sub	lr,129280

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004fce:	9d 16       	st.w	lr[0x4],r6
80004fd0:	e1 b5 00 00 	mfsr	r5,0x0
				AVR32_USBB_UHDMA1_CONTROL_CH_EN_MASK;

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if( !(uhd_pipe_dma_get_status(pipe)
80004fd4:	d3 03       	ssrf	0x10
80004fd6:	7c 36       	ld.w	r6,lr[0xc]
80004fd8:	e2 16 00 10 	andl	r6,0x10,COH
				& AVR32_USBB_UHDMA1_STATUS_EOT_STA_MASK)) {
			if (uhd_is_pipe_in(pipe)) {
80004fdc:	c3 61       	brne	80005048 <uhd_pipe_trans_complet+0x150>
80004fde:	72 0c       	ld.w	r12,r9[0x0]
80004fe0:	f9 dc c1 02 	bfextu	r12,r12,0x8,0x2
80004fe4:	58 1c       	cp.w	r12,1
				uhd_in_request_number(pipe,
80004fe6:	c1 c1       	brne	8000501e <uhd_pipe_trans_complet+0x126>
80004fe8:	fe 6c 06 50 	mov	r12,-129456
80004fec:	ee 0c 00 06 	add	r6,r7,r12
80004ff0:	6c 0c       	ld.w	r12,r6[0x0]
80004ff2:	72 03       	ld.w	r3,r9[0x0]
80004ff4:	e0 1c ff 00 	andl	r12,0xff00
80004ff8:	72 04       	ld.w	r4,r9[0x0]
80004ffa:	f3 d3 c0 83 	bfextu	r9,r3,0x4,0x3
80004ffe:	e9 d4 c0 83 	bfextu	r4,r4,0x4,0x3
80005002:	30 83       	mov	r3,8
80005004:	2f d4       	sub	r4,-3
80005006:	e6 09 09 49 	lsl	r9,r3,r9
8000500a:	20 19       	sub	r9,1
8000500c:	14 09       	add	r9,r10
8000500e:	f2 04 0a 49 	lsr	r9,r9,r4
80005012:	20 19       	sub	r9,1
80005014:	f3 d9 c0 08 	bfextu	r9,r9,0x0,0x8
80005018:	f3 ec 10 0c 	or	r12,r9,r12
						(next_trans+uhd_get_pipe_size(pipe)-1)/uhd_get_pipe_size(pipe));
			}
			uhd_disable_bank_interrupt(pipe);
8000501c:	8d 0c       	st.w	r6[0x0],r12
8000501e:	e0 37 f9 e0 	sub	r7,129504
80005022:	e0 69 10 00 	mov	r9,4096
			uhd_unfreeze_pipe(pipe);
80005026:	8f 09       	st.w	r7[0x0],r9
80005028:	e2 69 00 00 	mov	r9,131072
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		uhd_pipe_dma_set_addr(pipe, (U32) &ptr_job->buf[ptr_job->nb_trans]);
		uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
8000502c:	8f 09       	st.w	r7[0x0],r9
8000502e:	e8 1b 00 21 	orl	r11,0x21
						(next_trans+uhd_get_pipe_size(pipe)-1)/uhd_get_pipe_size(pipe));
			}
			uhd_disable_bank_interrupt(pipe);
			uhd_unfreeze_pipe(pipe);
			uhd_pipe_dma_set_control(pipe, uhd_dma_ctrl);
			ptr_job->nb_trans += next_trans;
80005032:	9d 2b       	st.w	lr[0x8],r11
80005034:	70 39       	ld.w	r9,r8[0xc]
80005036:	f2 0a 00 0a 	add	r10,r9,r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000503a:	91 3a       	st.w	r8[0xc],r10
8000503c:	e6 15 00 01 	andh	r5,0x1,COH
      cpu_irq_enable();
80005040:	c0 21       	brne	80005044 <uhd_pipe_trans_complet+0x14c>
			cpu_irq_restore(flags);
			return;
80005042:	d5 03       	csrf	0x10
80005044:	d8 32       	popm	r0-r7,pc
80005046:	d7 03       	nop
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005048:	e6 15 00 01 	andh	r5,0x1,COH
8000504c:	c0 21       	brne	80005050 <uhd_pipe_trans_complet+0x158>
      cpu_irq_enable();
8000504e:	d5 03       	csrf	0x10
		}
		cpu_irq_restore(flags);
		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->nb_trans;
80005050:	70 39       	ld.w	r9,r8[0xc]
80005052:	91 29       	st.w	r8[0x8],r9
	}
	if (uhd_is_pipe_out(pipe)) {
80005054:	f8 09 15 02 	lsl	r9,r12,0x2
80005058:	fe 6b 05 00 	mov	r11,-129792
8000505c:	f2 0b 00 0a 	add	r10,r9,r11
80005060:	74 0a       	ld.w	r10,r10[0x0]
80005062:	f5 da c1 02 	bfextu	r10,r10,0x8,0x2
80005066:	58 2a       	cp.w	r10,2
80005068:	c1 c1       	brne	800050a0 <uhd_pipe_trans_complet+0x1a8>
		if (ptr_job->b_shortpacket) {
8000506a:	70 08       	ld.w	r8,r8[0x0]
8000506c:	ed b8 00 1e 	bld	r8,0x1e
80005070:	c1 81       	brne	800050a0 <uhd_pipe_trans_complet+0x1a8>
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			uhd_ack_out_ready(pipe);
80005072:	fe 6c 05 60 	mov	r12,-129696
80005076:	f2 0c 00 08 	add	r8,r9,r12
8000507a:	91 0a       	st.w	r8[0x0],r10
			if (Is_uhd_write_enabled(pipe)) {
8000507c:	fe 6b 05 30 	mov	r11,-129744
80005080:	f2 0b 00 08 	add	r8,r9,r11
80005084:	70 08       	ld.w	r8,r8[0x0]
80005086:	ed b8 00 10 	bld	r8,0x10
8000508a:	c0 61       	brne	80005096 <uhd_pipe_trans_complet+0x19e>
				// Force interrupt in case of pipe already free
				uhd_raise_out_ready(pipe);
8000508c:	fe 6c 05 90 	mov	r12,-129648
80005090:	f2 0c 00 08 	add	r8,r9,r12
80005094:	91 0a       	st.w	r8[0x0],r10
			}
			uhd_enable_out_ready_interrupt(pipe);
80005096:	e0 39 fa 10 	sub	r9,129552
8000509a:	30 28       	mov	r8,2
8000509c:	93 08       	st.w	r9[0x0],r8
			return;
8000509e:	d8 32       	popm	r0-r7,pc
		}
	}
	// Call callback to signal end of transfer
	uhd_pipe_finish_job(pipe, UHD_TRANS_NOERROR);
800050a0:	30 0b       	mov	r11,0
800050a2:	cb fe       	rcall	80004e20 <uhd_pipe_finish_job>
800050a4:	d8 32       	popm	r0-r7,pc
800050a6:	d7 03       	nop

800050a8 <uhd_ep_run>:
800050a8:	d4 31       	pushm	r0-r7,lr
800050aa:	fa c4 ff dc 	sub	r4,sp,-36
		bool b_shortpacket,
		uint8_t *buf,
		iram_size_t buf_size,
		uint16_t timeout,
		uhd_callback_trans_t callback)
{
800050ae:	10 95       	mov	r5,r8
800050b0:	68 13       	ld.w	r3,r4[0x4]
800050b2:	14 97       	mov	r7,r10
800050b4:	12 96       	mov	r6,r9
800050b6:	68 04       	ld.w	r4,r4[0x0]
	irqflags_t flags;
	uint8_t pipe;
	uhd_pipe_job_t *ptr_job;

	pipe = uhd_get_pipe(add,endp);
800050b8:	c7 4e       	rcall	80004da0 <uhd_get_pipe>
800050ba:	30 78       	mov	r8,7
	if (pipe == AVR32_USBB_EPT_NUM) {
800050bc:	f0 0c 18 00 	cp.b	r12,r8
800050c0:	c1 60       	breq	800050ec <uhd_ep_run+0x44>
800050c2:	e0 69 08 d4 	mov	r9,2260
		return false; // pipe not found
	}

	// Get job about pipe
	ptr_job = &uhd_pipe_job[pipe-1];
800050c6:	f8 c8 00 01 	sub	r8,r12,1
800050ca:	f0 08 00 28 	add	r8,r8,r8<<0x2
800050ce:	f2 08 00 28 	add	r8,r9,r8<<0x2

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800050d2:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800050d6:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
800050d8:	70 0b       	ld.w	r11,r8[0x0]
800050da:	e6 19 00 01 	andh	r9,0x1,COH
800050de:	16 9a       	mov	r10,r11
800050e0:	e6 1a 80 00 	andh	r10,0x8000,COH
800050e4:	c0 50       	breq	800050ee <uhd_ep_run+0x46>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800050e6:	58 09       	cp.w	r9,0
800050e8:	c0 21       	brne	800050ec <uhd_ep_run+0x44>
      cpu_irq_enable();
800050ea:	d5 03       	csrf	0x10
   }

	barrier();
800050ec:	d8 3a       	popm	r0-r7,pc,r12=0
		cpu_irq_restore(flags);
		return false; // Job already on going
	}
	ptr_job->busy = true;
800050ee:	30 1e       	mov	lr,1
800050f0:	f7 de d3 e1 	bfins	r11,lr,0x1f,0x1
800050f4:	91 0b       	st.w	r8[0x0],r11

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
	ptr_job->buf_size = buf_size;
	ptr_job->nb_trans = 0;
	ptr_job->timeout = timeout;
800050f6:	b0 14       	st.h	r8[0x2],r4
	ptr_job->busy = true;

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
	ptr_job->buf_size = buf_size;
	ptr_job->nb_trans = 0;
800050f8:	91 3a       	st.w	r8[0xc],r10
	ptr_job->timeout = timeout;
	ptr_job->b_shortpacket = b_shortpacket;
	ptr_job->call_end = callback;
800050fa:	91 43       	st.w	r8[0x10],r3
	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
	ptr_job->buf_size = buf_size;
	ptr_job->nb_trans = 0;
	ptr_job->timeout = timeout;
	ptr_job->b_shortpacket = b_shortpacket;
800050fc:	70 0a       	ld.w	r10,r8[0x0]
		return false; // Job already on going
	}
	ptr_job->busy = true;

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
800050fe:	91 16       	st.w	r8[0x4],r6
	ptr_job->buf_size = buf_size;
	ptr_job->nb_trans = 0;
	ptr_job->timeout = timeout;
	ptr_job->b_shortpacket = b_shortpacket;
80005100:	f5 d7 d3 c1 	bfins	r10,r7,0x1e,0x1
	}
	ptr_job->busy = true;

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
	ptr_job->buf_size = buf_size;
80005104:	91 25       	st.w	r8[0x8],r5
	ptr_job->nb_trans = 0;
	ptr_job->timeout = timeout;
	ptr_job->b_shortpacket = b_shortpacket;
80005106:	91 0a       	st.w	r8[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005108:	58 09       	cp.w	r9,0
8000510a:	c0 21       	brne	8000510e <uhd_ep_run+0x66>
      cpu_irq_enable();
8000510c:	d5 03       	csrf	0x10
	ptr_job->call_end = callback;
	cpu_irq_restore(flags);

	// Request first transfer
	uhd_pipe_trans_complet(pipe);
8000510e:	cf 5e       	rcall	80004ef8 <uhd_pipe_trans_complet>
80005110:	da 3a       	popm	r0-r7,pc,r12=1
80005112:	d7 03       	nop

80005114 <uhd_ctrl_request_end>:
80005114:	d4 21       	pushm	r4-r7,lr
80005116:	30 09       	mov	r9,0
80005118:	e0 68 0d 4c 	mov	r8,3404
8000511c:	18 95       	mov	r5,r12
8000511e:	b0 09       	st.h	r8[0x0],r9
	bool b_new_request;

	uhd_ctrl_request_timeout = 0;

	// Remove request from the control request list
	callback_end = uhd_ctrl_request_first->callback_end;
80005120:	e0 69 0d 40 	mov	r9,3392

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005124:	72 0c       	ld.w	r12,r9[0x0]
80005126:	78 66       	ld.w	r6,r12[0x18]
	cpu_irq_disable();
80005128:	e1 b8 00 00 	mfsr	r8,0x0
	request_to_free = uhd_ctrl_request_first;
	flags = cpu_irq_save();
	uhd_ctrl_request_first = uhd_ctrl_request_first->next_request;
8000512c:	d3 03       	ssrf	0x10
8000512e:	72 0a       	ld.w	r10,r9[0x0]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005130:	74 77       	ld.w	r7,r10[0x1c]
80005132:	93 07       	st.w	r9[0x0],r7
80005134:	ed b8 00 10 	bld	r8,0x10
	b_new_request = (uhd_ctrl_request_first != NULL);
	cpu_irq_restore(flags);
	free(request_to_free);
80005138:	c0 20       	breq	8000513c <uhd_ctrl_request_end+0x28>
8000513a:	d5 03       	csrf	0x10

	// Call callback
	if (callback_end != NULL) {
8000513c:	e0 a0 0b a2 	rcall	80006880 <free>
		callback_end(uhd_get_configured_address(0), status, uhd_ctrl_nb_trans);
80005140:	58 06       	cp.w	r6,0
80005142:	c0 b0       	breq	80005158 <uhd_ctrl_request_end+0x44>
80005144:	fe 68 04 24 	mov	r8,-130012
80005148:	70 0c       	ld.w	r12,r8[0x0]
8000514a:	e0 68 0d 44 	mov	r8,3396
8000514e:	0a 9b       	mov	r11,r5
80005150:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
	}

	// If a setup request is pending and no started by previous callback
	if (b_new_request) {
80005154:	90 8a       	ld.uh	r10,r8[0x0]
		uhd_ctrl_phase_setup();
80005156:	5d 16       	icall	r6
80005158:	58 07       	cp.w	r7,0
	}
	if (uhd_b_suspend_requested) {
8000515a:	c0 20       	breq	8000515e <uhd_ctrl_request_end+0x4a>
8000515c:	c0 cc       	rcall	80005174 <uhd_ctrl_phase_setup>
8000515e:	e0 68 09 4f 	mov	r8,2383
80005162:	30 09       	mov	r9,0
80005164:	11 8a       	ld.ub	r10,r8[0x0]
		// A suspend request has been delay after all setup request
		uhd_b_suspend_requested = false;
80005166:	f2 0a 18 00 	cp.b	r10,r9
		uhd_suspend();
8000516a:	c0 40       	breq	80005172 <uhd_ctrl_request_end+0x5e>
8000516c:	b0 89       	st.b	r8[0x0],r9
8000516e:	fe b0 fd 49 	rcall	80004c00 <uhd_suspend>
80005172:	d8 22       	popm	r4-r7,pc

80005174 <uhd_ctrl_phase_setup>:
80005174:	d4 21       	pushm	r4-r7,lr
80005176:	20 2d       	sub	sp,8
80005178:	e0 68 0d 3c 	mov	r8,3388
8000517c:	30 06       	mov	r6,0
8000517e:	91 06       	st.w	r8[0x0],r6
80005180:	e0 68 0d 40 	mov	r8,3392
80005184:	30 8a       	mov	r10,8
80005186:	70 07       	ld.w	r7,r8[0x0]
80005188:	1a 9c       	mov	r12,sp
8000518a:	ee cb ff ff 	sub	r11,r7,-1

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
	uhd_ctrl_nb_trans = 0;
8000518e:	e0 a0 0d 9d 	rcall	80006cc8 <memcpy>
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
80005192:	e0 68 0d 44 	mov	r8,3396
		uint64_t value64;
	} setup;
	volatile uint64_t *ptr_ep_data;

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));
80005196:	b0 06       	st.h	r8[0x0],r6
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
80005198:	fe 68 00 00 	mov	r8,-131072

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
8000519c:	40 09       	lddsp	r9,sp[0x0]
8000519e:	f0 fc 04 1c 	ld.w	r12,r8[1052]
800051a2:	f7 d9 c0 10 	bfextu	r11,r9,0x0,0x10
800051a6:	f6 06 16 08 	lsr	r6,r11,0x8
800051aa:	ed eb 10 8b 	or	r11,r6,r11<<0x8
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
800051ae:	40 18       	lddsp	r8,sp[0x4]
800051b0:	f3 db d0 10 	bfins	r9,r11,0x0,0x10
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
800051b4:	f0 0a 16 10 	lsr	r10,r8,0x10
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
800051b8:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800051bc:	f4 0b 16 08 	lsr	r11,r10,0x8
800051c0:	f7 ea 10 8a 	or	r10,r11,r10<<0x8
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
800051c4:	f1 da d2 10 	bfins	r8,r10,0x10,0x10
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
800051c8:	ed d8 b0 10 	bfexts	r6,r8,0x0,0x10
			(uhd_ctrl_request_first->add != uhd_get_configured_address(0))) {
800051cc:	58 0c       	cp.w	r12,0
800051ce:	c0 90       	breq	800051e0 <uhd_ctrl_phase_setup+0x6c>
800051d0:	fe 6a 04 24 	mov	r10,-130012
800051d4:	74 0a       	ld.w	r10,r10[0x0]
800051d6:	0f 8b       	ld.ub	r11,r7[0x0]
800051d8:	f5 da c0 07 	bfextu	r10,r10,0x0,0x7
		uhd_ctrl_request_end(UHD_TRANS_DISCONNECT);
800051dc:	14 3b       	cp.w	r11,r10
800051de:	c0 40       	breq	800051e6 <uhd_ctrl_phase_setup+0x72>
		return; // Endpoint not valid
800051e0:	30 1c       	mov	r12,1
	}
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_SETUP);
800051e2:	c9 9f       	rcall	80005114 <uhd_ctrl_request_end>
800051e4:	c2 a8       	rjmp	80005238 <uhd_ctrl_phase_setup+0xc4>
800051e6:	fe 6b 05 00 	mov	r11,-129792
800051ea:	76 0a       	ld.w	r10,r11[0x0]
800051ec:	e0 1a fc ff 	andl	r10,0xfcff
	uhd_ack_setup_ready(0);
800051f0:	97 0a       	st.w	r11[0x0],r10
800051f2:	30 4c       	mov	r12,4
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
800051f4:	fe 6a 05 60 	mov	r10,-129696
	}
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_SETUP);
	uhd_ack_setup_ready(0);
800051f8:	ef d6 c0 10 	bfextu	r7,r6,0x0,0x10
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
800051fc:	95 0c       	st.w	r10[0x0],r12
800051fe:	12 9b       	mov	r11,r9
80005200:	ee 09 16 08 	lsr	r9,r7,0x8
80005204:	f3 e7 10 87 	or	r7,r9,r7<<0x8
	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_SETUP);
	uhd_ack_setup_ready(0);
	Assert(sizeof(setup) == sizeof(uint64_t));
	ptr_ep_data = (volatile uint64_t *)&uhd_get_pipe_fifo_access(0, 64);
	*ptr_ep_data = setup.value64;
80005208:	f1 d7 d0 10 	bfins	r8,r7,0x0,0x10
8000520c:	10 9a       	mov	r10,r8
8000520e:	30 08       	mov	r8,0
80005210:	ea 18 d0 00 	orh	r8,0xd000

	uhd_ctrl_request_timeout = 5000;
80005214:	f0 eb 00 00 	st.d	r8[0],r10
80005218:	e0 69 13 88 	mov	r9,5000
	uhd_enable_setup_ready_interrupt(0);
8000521c:	e0 68 0d 4c 	mov	r8,3404
80005220:	b0 09       	st.h	r8[0x0],r9
	uhd_ack_fifocon(0);
80005222:	fe 68 05 f0 	mov	r8,-129552
80005226:	91 0c       	st.w	r8[0x0],r12
80005228:	e0 69 40 00 	mov	r9,16384
	uhd_unfreeze_pipe(0);
8000522c:	fe 68 06 20 	mov	r8,-129504
80005230:	91 09       	st.w	r8[0x0],r9
}
80005232:	e2 69 00 00 	mov	r9,131072
80005236:	91 09       	st.w	r8[0x0],r9
80005238:	2f ed       	sub	sp,-8
8000523a:	d8 22       	popm	r4-r7,pc

8000523c <uhd_setup_request>:
8000523c:	d4 31       	pushm	r0-r7,lr
8000523e:	20 1d       	sub	sp,4
80005240:	18 97       	mov	r7,r12
80005242:	50 0b       	stdsp	sp[0x0],r11
80005244:	14 92       	mov	r2,r10
80005246:	12 96       	mov	r6,r9
80005248:	10 93       	mov	r3,r8
8000524a:	40 a4       	lddsp	r4,sp[0x28]
8000524c:	32 0c       	mov	r12,32
8000524e:	e0 a0 0b 21 	rcall	80006890 <malloc>
	irqflags_t flags;
	struct uhd_ctrl_request_t *request;
	bool b_start_request = false;

	request = malloc( sizeof(struct uhd_ctrl_request_t) );
	if (request == NULL) {
80005252:	40 0b       	lddsp	r11,sp[0x0]
{
	irqflags_t flags;
	struct uhd_ctrl_request_t *request;
	bool b_start_request = false;

	request = malloc( sizeof(struct uhd_ctrl_request_t) );
80005254:	18 95       	mov	r5,r12
	if (request == NULL) {
80005256:	c2 60       	breq	800052a2 <uhd_setup_request+0x66>
		Assert(false);
		return false;
	}

	// Fill structure
	request->add = (uint8_t) add;
80005258:	18 c7       	st.b	r12++,r7
	memcpy(&request->req, req, sizeof(usb_setup_req_t));
8000525a:	30 8a       	mov	r10,8
8000525c:	e0 a0 0d 36 	rcall	80006cc8 <memcpy>
	request->payload = payload;
	request->payload_size = payload_size;
	request->callback_run = callback_run;
	request->callback_end = callback_end;
	request->next_request = NULL;
80005260:	30 08       	mov	r8,0
	}

	// Fill structure
	request->add = (uint8_t) add;
	memcpy(&request->req, req, sizeof(usb_setup_req_t));
	request->payload = payload;
80005262:	8b 32       	st.w	r5[0xc],r2
	request->payload_size = payload_size;
80005264:	eb 56 00 10 	st.h	r5[16],r6
	request->callback_run = callback_run;
80005268:	8b 53       	st.w	r5[0x14],r3
	request->callback_end = callback_end;
8000526a:	8b 64       	st.w	r5[0x18],r4
	request->next_request = NULL;
8000526c:	8b 78       	st.w	r5[0x1c],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000526e:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80005272:	d3 03       	ssrf	0x10

	// Add this request in the queue
	flags = cpu_irq_save();
	if (uhd_ctrl_request_first == NULL) {
80005274:	e0 69 0d 40 	mov	r9,3392
80005278:	72 0b       	ld.w	r11,r9[0x0]
8000527a:	58 0b       	cp.w	r11,0
		uhd_ctrl_request_first = request;
8000527c:	c0 41       	brne	80005284 <uhd_setup_request+0x48>
8000527e:	93 05       	st.w	r9[0x0],r5
80005280:	30 18       	mov	r8,1
		b_start_request = true;
	} else {
		uhd_ctrl_request_last->next_request = request;
80005282:	c0 58       	rjmp	8000528c <uhd_setup_request+0x50>
80005284:	e0 69 0d 48 	mov	r9,3400
	}
	uhd_ctrl_request_last = request;
80005288:	72 09       	ld.w	r9,r9[0x0]
8000528a:	93 75       	st.w	r9[0x1c],r5
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000528c:	e0 69 0d 48 	mov	r9,3400
80005290:	93 05       	st.w	r9[0x0],r5
      cpu_irq_enable();
80005292:	ed ba 00 10 	bld	r10,0x10
	cpu_irq_restore(flags);

	if (b_start_request) {
80005296:	c0 20       	breq	8000529a <uhd_setup_request+0x5e>
		// Start immediately request
		uhd_ctrl_phase_setup();
80005298:	d5 03       	csrf	0x10
8000529a:	58 08       	cp.w	r8,0
8000529c:	c0 20       	breq	800052a0 <uhd_setup_request+0x64>
	}
	return true;
}
8000529e:	c6 bf       	rcall	80005174 <uhd_ctrl_phase_setup>
800052a0:	30 1c       	mov	r12,1
800052a2:	2f fd       	sub	sp,-4
800052a4:	d8 32       	popm	r0-r7,pc
800052a6:	d7 03       	nop

800052a8 <uhd_ep_free>:
800052a8:	d4 31       	pushm	r0-r7,lr
800052aa:	fe 66 05 00 	mov	r6,-129792
800052ae:	18 90       	mov	r0,r12
800052b0:	16 94       	mov	r4,r11
800052b2:	30 07       	mov	r7,0
800052b4:	fe 65 00 00 	mov	r5,-131072
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
800052b8:	30 11       	mov	r1,1
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
800052ba:	37 f2       	mov	r2,127
			continue;
		}
		if (endp != 0xFF) {
800052bc:	3f f3       	mov	r3,-1
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
800052be:	ea fb 04 1c 	ld.w	r11,r5[1052]
	return false;
}


void uhd_ep_free(usb_add_t add, usb_ep_t endp)
{
800052c2:	0e 99       	mov	r9,r7
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
800052c4:	e2 07 09 4a 	lsl	r10,r1,r7
	return false;
}


void uhd_ep_free(usb_add_t add, usb_ep_t endp)
{
800052c8:	5c 59       	castu.b	r9
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
800052ca:	f5 eb 00 0b 	and	r11,r10,r11
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
800052ce:	12 98       	mov	r8,r9
800052d0:	e2 18 00 fc 	andl	r8,0xfc,COH
800052d4:	e0 38 fb dc 	sub	r8,130012
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
800052d8:	58 0b       	cp.w	r11,0
800052da:	c3 90       	breq	8000534c <uhd_ep_free+0xa4>
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
800052dc:	70 0b       	ld.w	r11,r8[0x0]
800052de:	f1 d7 c0 02 	bfextu	r8,r7,0x0,0x2
800052e2:	a3 78       	lsl	r8,0x3
800052e4:	e4 08 09 48 	lsl	r8,r2,r8
800052e8:	10 6b       	and	r11,r8
800052ea:	5c 98       	brev	r8
800052ec:	f0 08 12 00 	clz	r8,r8
800052f0:	f6 08 0a 48 	lsr	r8,r11,r8
800052f4:	10 30       	cp.w	r0,r8
800052f6:	c2 b1       	brne	8000534c <uhd_ep_free+0xa4>
			if (endp != uhd_get_pipe_endpoint_address(pipe)) {
				continue; // Mismatch
			}
		}
		// Unalloc pipe
		uhd_disable_pipe(pipe);
800052f8:	5c da       	com	r10
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
			continue;
		}
		if (endp != 0xFF) {
800052fa:	e6 04 18 00 	cp.b	r4,r3
800052fe:	c1 10       	breq	80005320 <uhd_ep_free+0x78>
			// Disable specific endpoint number
			if (endp != uhd_get_pipe_endpoint_address(pipe)) {
80005300:	6c 0b       	ld.w	r11,r6[0x0]
80005302:	6c 08       	ld.w	r8,r6[0x0]
80005304:	f7 db c2 04 	bfextu	r11,r11,0x10,0x4
80005308:	f1 d8 c1 02 	bfextu	r8,r8,0x8,0x2
8000530c:	e0 6c 00 80 	mov	r12,128
80005310:	58 18       	cp.w	r8,1
80005312:	f8 08 17 00 	moveq	r8,r12
80005316:	f9 b8 01 00 	movne	r8,0
8000531a:	16 48       	or	r8,r11
8000531c:	10 34       	cp.w	r4,r8
8000531e:	c1 71       	brne	8000534c <uhd_ep_free+0xa4>
				continue; // Mismatch
			}
		}
		// Unalloc pipe
		uhd_disable_pipe(pipe);
80005320:	ea f8 04 1c 	ld.w	r8,r5[1052]
80005324:	10 6a       	and	r10,r8
80005326:	eb 4a 04 1c 	st.w	r5[1052],r10
		uhd_unallocate_memory(pipe);
8000532a:	6c 08       	ld.w	r8,r6[0x0]
8000532c:	a1 d8       	cbr	r8,0x1
8000532e:	8d 08       	st.w	r6[0x0],r8

		// Stop transfer on this pipe
#ifndef USB_HOST_HUB_SUPPORT
		if (pipe == 0) {
80005330:	58 09       	cp.w	r9,0
80005332:	c0 91       	brne	80005344 <uhd_ep_free+0x9c>
			// Endpoint control
			if (uhd_ctrl_request_timeout) {
80005334:	e0 69 0d 4c 	mov	r9,3404
80005338:	92 08       	ld.sh	r8,r9[0x0]
8000533a:	58 08       	cp.w	r8,0
				uhd_ctrl_request_end(UHD_TRANS_DISCONNECT);
8000533c:	c0 80       	breq	8000534c <uhd_ep_free+0xa4>
8000533e:	30 1c       	mov	r12,1
80005340:	ce ae       	rcall	80005114 <uhd_ctrl_request_end>
80005342:	c0 58       	rjmp	8000534c <uhd_ep_free+0xa4>
			}
			continue;
		}
#endif
		// Endpoint interrupt, bulk or isochronous
		uhd_ep_abort_pipe(pipe, UHD_TRANS_DISCONNECT);
80005344:	0e 9c       	mov	r12,r7
80005346:	30 1b       	mov	r11,1
80005348:	fe b0 fd a8 	rcall	80004e98 <uhd_ep_abort_pipe>
8000534c:	2f f7       	sub	r7,-1
8000534e:	2f c6       	sub	r6,-4
		}
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
80005350:	58 77       	cp.w	r7,7
80005352:	cb 61       	brne	800052be <uhd_ep_free+0x16>
		}
#endif
		// Endpoint interrupt, bulk or isochronous
		uhd_ep_abort_pipe(pipe, UHD_TRANS_DISCONNECT);
	}
}
80005354:	d8 32       	popm	r0-r7,pc
80005356:	d7 03       	nop

80005358 <uhd_ep_alloc>:
80005358:	d4 31       	pushm	r0-r7,lr
8000535a:	30 08       	mov	r8,0
8000535c:	fe 65 00 00 	mov	r5,-131072
80005360:	30 16       	mov	r6,1
80005362:	ea f7 04 1c 	ld.w	r7,r5[1052]
	uhd_enable_pipe_interrupt(0);
	return true;
}

bool uhd_ep_alloc(usb_add_t add, usb_ep_desc_t * ep_desc)
{
80005366:	f0 c9 ff ff 	sub	r9,r8,-1
	uint8_t ep_dir;
	uint8_t ep_interval;
	uint8_t bank;

	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (Is_uhd_pipe_enabled(pipe)) {
8000536a:	fe 6e 00 00 	mov	lr,-131072
	uhd_enable_pipe_error_interrupt(0);
	uhd_enable_pipe_interrupt(0);
	return true;
}

bool uhd_ep_alloc(usb_add_t add, usb_ep_desc_t * ep_desc)
8000536e:	2f f8       	sub	r8,-1
{
80005370:	5c 59       	castu.b	r9
	uint8_t ep_dir;
	uint8_t ep_interval;
	uint8_t bank;

	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (Is_uhd_pipe_enabled(pipe)) {
80005372:	ec 08 09 4a 	lsl	r10,r6,r8
80005376:	f5 e7 00 07 	and	r7,r10,r7
8000537a:	c0 40       	breq	80005382 <uhd_ep_alloc+0x2a>
	uint8_t ep_type;
	uint8_t ep_dir;
	uint8_t ep_interval;
	uint8_t bank;

	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
8000537c:	58 68       	cp.w	r8,6
8000537e:	cf 21       	brne	80005362 <uhd_ep_alloc+0xa>
80005380:	c9 a8       	rjmp	800054b4 <uhd_ep_alloc+0x15c>
		if (Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		uhd_enable_pipe(pipe);
80005382:	fc f6 04 1c 	ld.w	r6,lr[1052]
80005386:	f5 e6 10 06 	or	r6,r10,r6
8000538a:	fd 46 04 1c 	st.w	lr[1052],r6
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
				AVR32_USBB_UPCFG0_PTOKEN_IN:
				AVR32_USBB_UPCFG0_PTOKEN_OUT,
		ep_type = ep_desc->bmAttributes&USB_EP_TYPE_MASK;
		// Bank choice
		switch(ep_type) {
8000538e:	30 25       	mov	r5,2
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		uhd_enable_pipe(pipe);
		ep_addr = ep_desc->bEndpointAddress & USB_EP_ADDR_MASK;
80005390:	17 a6       	ld.ub	r6,r11[0x2]
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
				AVR32_USBB_UPCFG0_PTOKEN_IN:
				AVR32_USBB_UPCFG0_PTOKEN_OUT,
		ep_type = ep_desc->bmAttributes&USB_EP_TYPE_MASK;
80005392:	17 be       	ld.ub	lr,r11[0x3]
		if (Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		uhd_enable_pipe(pipe);
		ep_addr = ep_desc->bEndpointAddress & USB_EP_ADDR_MASK;
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
80005394:	ec 07 18 00 	cp.b	r7,r6
80005398:	f9 b3 09 01 	movgt	r3,1
8000539c:	f9 b3 0a 02 	movle	r3,2
				AVR32_USBB_UPCFG0_PTOKEN_IN:
				AVR32_USBB_UPCFG0_PTOKEN_OUT,
		ep_type = ep_desc->bmAttributes&USB_EP_TYPE_MASK;
800053a0:	fd de c0 02 	bfextu	lr,lr,0x0,0x2
		// Bank choice
		switch(ep_type) {
800053a4:	ea 0e 18 00 	cp.b	lr,r5
800053a8:	c0 d0       	breq	800053c2 <uhd_ep_alloc+0x6a>
800053aa:	30 35       	mov	r5,3
800053ac:	ea 0e 18 00 	cp.b	lr,r5
800053b0:	c0 70       	breq	800053be <uhd_ep_alloc+0x66>
800053b2:	30 17       	mov	r7,1
800053b4:	ee 0e 18 00 	cp.b	lr,r7
800053b8:	c7 e1       	brne	800054b4 <uhd_ep_alloc+0x15c>
		case USB_EP_TYPE_ISOCHRONOUS:
			bank = UHD_ISOCHRONOUS_NB_BANK;
			ep_interval = ep_desc->bInterval;
800053ba:	17 e5       	ld.ub	r5,r11[0x6]
800053bc:	c0 48       	rjmp	800053c4 <uhd_ep_alloc+0x6c>
			break;
		case USB_EP_TYPE_INTERRUPT:
			bank = UHD_INTERRUPT_NB_BANK;
			ep_interval = ep_desc->bInterval;
800053be:	17 e5       	ld.ub	r5,r11[0x6]
800053c0:	c0 38       	rjmp	800053c6 <uhd_ep_alloc+0x6e>
800053c2:	0e 95       	mov	r5,r7
800053c4:	30 17       	mov	r7,1
		default:
			Assert(false);
			return false;
		}

		uhd_configure_pipe(pipe, ep_interval, ep_addr, ep_type, ep_dir,
800053c6:	17 d4       	ld.ub	r4,r11[0x5]
800053c8:	ed d6 c0 04 	bfextu	r6,r6,0x0,0x4
800053cc:	ad 6e       	lsl	lr,0xc
800053ce:	17 cb       	ld.ub	r11,r11[0x4]
800053d0:	fd e6 11 0e 	or	lr,lr,r6<<0x10
800053d4:	e9 eb 10 8b 	or	r11,r4,r11<<0x8
800053d8:	ab ae       	sbr	lr,0xa
800053da:	fe 64 05 00 	mov	r4,-129792
800053de:	fd e3 10 8e 	or	lr,lr,r3<<0x8
800053e2:	ee 06 15 02 	lsl	r6,r7,0x2
800053e6:	fd e5 11 85 	or	r5,lr,r5<<0x18
800053ea:	f6 07 16 08 	lsr	r7,r11,0x8
800053ee:	f2 0e 15 02 	lsl	lr,r9,0x2
800053f2:	ef eb 10 87 	or	r7,r7,r11<<0x8
800053f6:	e0 63 04 00 	mov	r3,1024
800053fa:	fc 04 00 0b 	add	r11,lr,r4
800053fe:	5c 77       	castu.h	r7
80005400:	30 84       	mov	r4,8
80005402:	ee 04 0c 47 	max	r7,r7,r4
80005406:	ee 03 0d 47 	min	r7,r7,r3
8000540a:	a1 77       	lsl	r7,0x1
8000540c:	20 17       	sub	r7,1
8000540e:	ee 07 12 00 	clz	r7,r7
80005412:	ee 07 11 1c 	rsub	r7,r7,28
80005416:	e2 16 00 0c 	andl	r6,0xc,COH
8000541a:	eb e7 10 45 	or	r5,r5,r7<<0x4
				le16_to_cpu(ep_desc->wMaxPacketSize),
				bank, AVR32_USBB_UPCFG0_AUTOSW_MASK);
		uhd_allocate_memory(pipe);
		if (!Is_uhd_pipe_configured(pipe)) {
8000541e:	fe 67 05 30 	mov	r7,-129744
		default:
			Assert(false);
			return false;
		}

		uhd_configure_pipe(pipe, ep_interval, ep_addr, ep_type, ep_dir,
80005422:	eb e6 10 06 	or	r6,r5,r6
80005426:	97 06       	st.w	r11[0x0],r6
				le16_to_cpu(ep_desc->wMaxPacketSize),
				bank, AVR32_USBB_UPCFG0_AUTOSW_MASK);
		uhd_allocate_memory(pipe);
		if (!Is_uhd_pipe_configured(pipe)) {
80005428:	fc 07 00 06 	add	r6,lr,r7
		}

		uhd_configure_pipe(pipe, ep_interval, ep_addr, ep_type, ep_dir,
				le16_to_cpu(ep_desc->wMaxPacketSize),
				bank, AVR32_USBB_UPCFG0_AUTOSW_MASK);
		uhd_allocate_memory(pipe);
8000542c:	76 07       	ld.w	r7,r11[0x0]
8000542e:	a1 b7       	sbr	r7,0x1
80005430:	97 07       	st.w	r11[0x0],r7
		if (!Is_uhd_pipe_configured(pipe)) {
80005432:	6c 0b       	ld.w	r11,r6[0x0]
80005434:	e6 1b 00 04 	andh	r11,0x4,COH
80005438:	c0 b1       	brne	8000544e <uhd_ep_alloc+0xf6>
			uhd_disable_pipe(pipe);
8000543a:	fe 68 00 00 	mov	r8,-131072
8000543e:	5c da       	com	r10
80005440:	f0 f9 04 1c 	ld.w	r9,r8[1052]
80005444:	16 9c       	mov	r12,r11
80005446:	12 6a       	and	r10,r9
80005448:	f1 4a 04 1c 	st.w	r8[1052],r10
			return false;
8000544c:	d8 32       	popm	r0-r7,pc
		}
		uhd_configure_address(pipe, add);
8000544e:	37 f6       	mov	r6,127
80005450:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
80005454:	e2 19 00 fc 	andl	r9,0xfc,COH
80005458:	a3 7b       	lsl	r11,0x3
8000545a:	e0 39 fb dc 	sub	r9,130012
8000545e:	ec 0b 09 4b 	lsl	r11,r6,r11
80005462:	72 07       	ld.w	r7,r9[0x0]
80005464:	16 96       	mov	r6,r11
80005466:	5c 96       	brev	r6
80005468:	ec 06 12 00 	clz	r6,r6
8000546c:	16 87       	andn	r7,r11
8000546e:	f8 06 09 4c 	lsl	r12,r12,r6
80005472:	f9 eb 00 0b 	and	r11,r12,r11
80005476:	0e 4b       	or	r11,r7
80005478:	93 0b       	st.w	r9[0x0],r11
		uhd_enable_pipe(pipe);
8000547a:	fe 69 00 00 	mov	r9,-131072
8000547e:	f2 fb 04 1c 	ld.w	r11,r9[1052]
80005482:	16 4a       	or	r10,r11
80005484:	f3 4a 04 1c 	st.w	r9[1052],r10

		// Enable endpoint interrupts
		uhd_enable_pipe_dma_interrupt(pipe);
80005488:	30 0b       	mov	r11,0
8000548a:	ea 1b 02 00 	orh	r11,0x200
8000548e:	f0 ca 00 01 	sub	r10,r8,1
80005492:	f6 0a 09 4a 	lsl	r10,r11,r10
80005496:	f3 4a 04 18 	st.w	r9[1048],r10
		uhd_enable_stall_interrupt(pipe);
8000549a:	e0 3e fa 10 	sub	lr,129552
8000549e:	34 0a       	mov	r10,64
800054a0:	9d 0a       	st.w	lr[0x0],r10
		uhd_enable_pipe_error_interrupt(pipe);
800054a2:	9d 04       	st.w	lr[0x0],r4
		uhd_enable_pipe_interrupt(pipe);
800054a4:	e0 6a 01 00 	mov	r10,256
800054a8:	30 1c       	mov	r12,1
800054aa:	f4 08 09 48 	lsl	r8,r10,r8
800054ae:	f3 48 04 18 	st.w	r9[1048],r8
		return true;
800054b2:	d8 32       	popm	r0-r7,pc
800054b4:	d8 3a       	popm	r0-r7,pc,r12=0

800054b6 <uhd_ep0_alloc>:
	uhd_send_resume();
	uhd_sleep_mode(UHD_STATE_IDLE);
}

bool uhd_ep0_alloc(usb_add_t add, uint8_t ep_size)
{
800054b6:	d4 01       	pushm	lr
	if (ep_size < 8) {
800054b8:	30 78       	mov	r8,7
800054ba:	f0 0b 18 00 	cp.b	r11,r8
800054be:	e0 8b 00 03 	brhi	800054c4 <uhd_ep0_alloc+0xe>
800054c2:	d8 0a       	popm	pc,r12=0
#error TODO Add USB address in a list
		return true;
	}
#endif

	uhd_enable_pipe(0);
800054c4:	fe 68 00 00 	mov	r8,-131072
800054c8:	f0 f9 04 1c 	ld.w	r9,r8[1052]
800054cc:	a1 a9       	sbr	r9,0x0
800054ce:	f1 49 04 1c 	st.w	r8[1052],r9
	uhd_configure_pipe(0, // Pipe 0
800054d2:	30 8e       	mov	lr,8
800054d4:	fe 69 05 00 	mov	r9,-129792
800054d8:	f6 0e 0c 4b 	max	r11,r11,lr
800054dc:	e0 6a 04 00 	mov	r10,1024
800054e0:	f6 0a 0d 4a 	min	r10,r11,r10
800054e4:	a1 7a       	lsl	r10,0x1
800054e6:	20 1a       	sub	r10,1
800054e8:	f4 0a 12 00 	clz	r10,r10
800054ec:	f4 0a 11 1c 	rsub	r10,r10,28
800054f0:	a5 6a       	lsl	r10,0x4
800054f2:	93 0a       	st.w	r9[0x0],r10
#else
			ep_size,
#endif
			AVR32_USBB_UECFG0_EPBK_SINGLE, 0);

	uhd_allocate_memory(0);
800054f4:	72 0a       	ld.w	r10,r9[0x0]
800054f6:	a1 ba       	sbr	r10,0x1
800054f8:	93 0a       	st.w	r9[0x0],r10
	if (!Is_uhd_pipe_configured(0)) {
800054fa:	fe 69 05 30 	mov	r9,-129744
800054fe:	72 09       	ld.w	r9,r9[0x0]
80005500:	e6 19 00 04 	andh	r9,0x4,COH
80005504:	c0 81       	brne	80005514 <uhd_ep0_alloc+0x5e>
		uhd_disable_pipe(0);
80005506:	12 9c       	mov	r12,r9
80005508:	f0 f9 04 1c 	ld.w	r9,r8[1052]
8000550c:	a1 c9       	cbr	r9,0x0
8000550e:	f1 49 04 1c 	st.w	r8[1052],r9
		return false;
80005512:	d8 02       	popm	pc
	}
	uhd_configure_address(0, add);
80005514:	fe 6a 04 24 	mov	r10,-130012
80005518:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
8000551c:	74 09       	ld.w	r9,r10[0x0]
8000551e:	e0 19 ff 80 	andl	r9,0xff80
80005522:	f9 e9 10 09 	or	r9,r12,r9
80005526:	95 09       	st.w	r10[0x0],r9

	// Always enable stall and error interrupts of control endpoint
	uhd_enable_stall_interrupt(0);
80005528:	fe 69 05 f0 	mov	r9,-129552
8000552c:	34 0a       	mov	r10,64
8000552e:	93 0a       	st.w	r9[0x0],r10
	uhd_enable_pipe_error_interrupt(0);
80005530:	93 0e       	st.w	r9[0x0],lr
	uhd_enable_pipe_interrupt(0);
80005532:	30 1c       	mov	r12,1
80005534:	e0 69 01 00 	mov	r9,256
80005538:	f1 49 04 18 	st.w	r8[1048],r9
	return true;
}
8000553c:	d8 02       	popm	pc
8000553e:	d7 03       	nop

80005540 <otg_dual_disable>:
# endif
}


void otg_dual_disable(void)
{
80005540:	d4 01       	pushm	lr
	if (!otg_initialized) {
80005542:	e0 6a 08 cc 	mov	r10,2252
80005546:	30 0b       	mov	r11,0
80005548:	15 88       	ld.ub	r8,r10[0x0]
8000554a:	f6 08 18 00 	cp.b	r8,r11
		return; // Dual role not initialized
	}
	otg_initialized = false;

	// Do not authorize asynchronous USB interrupts
	AVR32_PM.AWEN.usb_waken = 0;
8000554e:	c1 b0       	breq	80005584 <otg_dual_disable+0x44>
80005550:	fe 78 0c 00 	mov	r8,-62464
80005554:	30 0c       	mov	r12,0
80005556:	f0 f9 01 44 	ld.w	r9,r8[324]
8000555a:	f3 dc d0 01 	bfins	r9,r12,0x0,0x1
8000555e:	f1 49 01 44 	st.w	r8[324],r9
	otg_unfreeze_clock();
80005562:	fe 68 08 00 	mov	r8,-129024
80005566:	70 09       	ld.w	r9,r8[0x0]
80005568:	af c9       	cbr	r9,0xe
# ifdef USB_ID
	otg_disable_id_interrupt();
8000556a:	91 09       	st.w	r8[0x0],r9
8000556c:	70 09       	ld.w	r9,r8[0x0]
8000556e:	a1 c9       	cbr	r9,0x0
# endif
	otg_disable();
80005570:	91 09       	st.w	r8[0x0],r9
80005572:	70 09       	ld.w	r9,r8[0x0]
80005574:	af d9       	cbr	r9,0xf
void otg_dual_disable(void)
{
	if (!otg_initialized) {
		return; // Dual role not initialized
	}
	otg_initialized = false;
80005576:	91 09       	st.w	r8[0x0],r9
	otg_unfreeze_clock();
# ifdef USB_ID
	otg_disable_id_interrupt();
# endif
	otg_disable();
	otg_disable_pad();
80005578:	b4 8b       	st.b	r10[0x0],r11
8000557a:	70 09       	ld.w	r9,r8[0x0]
8000557c:	ad c9       	cbr	r9,0xc
	sysclk_disable_usb();
8000557e:	91 09       	st.w	r8[0x0],r9
80005580:	e0 a0 07 7e 	rcall	8000647c <sysclk_disable_usb>
80005584:	d8 02       	popm	pc
80005586:	d7 03       	nop

80005588 <uhd_disable>:
80005588:	d4 21       	pushm	r4-r7,lr
8000558a:	fe 69 08 04 	mov	r9,-129020
	cpu_irq_restore(flags);
}


void uhd_disable(bool b_id_stop)
{
8000558e:	18 96       	mov	r6,r12
	irqflags_t flags;

	// Check USB clock ready after a potential sleep mode < IDLE
	while (!Is_otg_clock_usable());
80005590:	72 08       	ld.w	r8,r9[0x0]
80005592:	ed b8 00 0e 	bld	r8,0xe
80005596:	cf d1       	brne	80005590 <uhd_disable+0x8>
	otg_unfreeze_clock();
80005598:	fe 67 08 00 	mov	r7,-129024
8000559c:	6e 08       	ld.w	r8,r7[0x0]
8000559e:	af c8       	cbr	r8,0xe
800055a0:	8f 08       	st.w	r7[0x0],r8

	// Disable Vbus change and error interrupts
	Clr_bits(AVR32_USBB.usbcon, AVR32_USBB_USBCON_VBUSTE_MASK
800055a2:	fe 68 00 00 	mov	r8,-131072
800055a6:	f0 f9 08 00 	ld.w	r9,r8[2048]
800055aa:	e0 19 ff f5 	andl	r9,0xfff5
800055ae:	f1 49 08 00 	st.w	r8[2048],r9
			| AVR32_USBB_USBCON_VBERRE_MASK);

	// Disable main control interrupt
	// (Connection, disconnection, SOF and reset)
	AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_DCONNIEC_MASK
800055b2:	37 f9       	mov	r9,127
800055b4:	f1 49 04 14 	st.w	r8[1044],r9
			| AVR32_USBB_UHINTECLR_HSOFIEC_MASK
			| AVR32_USBB_UHINTECLR_RSTIEC_MASK
			| AVR32_USBB_UHINTECLR_HWUPIEC_MASK
			| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
			| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
	uhd_disable_sof();
800055b8:	fe 69 04 00 	mov	r9,-130048
800055bc:	72 08       	ld.w	r8,r9[0x0]
800055be:	a9 c8       	cbr	r8,0x8
800055c0:	93 08       	st.w	r9[0x0],r8
	uhd_disable_vbus();
800055c2:	fe 68 08 08 	mov	r8,-129016
800055c6:	e0 69 02 00 	mov	r9,512
	uhc_notify_connection(false);
800055ca:	30 0c       	mov	r12,0
			| AVR32_USBB_UHINTECLR_RSTIEC_MASK
			| AVR32_USBB_UHINTECLR_HWUPIEC_MASK
			| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
			| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
	uhd_disable_sof();
	uhd_disable_vbus();
800055cc:	91 09       	st.w	r8[0x0],r9
	uhc_notify_connection(false);
800055ce:	e0 a0 06 f3 	rcall	800063b4 <uhc_notify_connection>
	otg_freeze_clock();
800055d2:	6e 08       	ld.w	r8,r7[0x0]
800055d4:	af a8       	sbr	r8,0xe
800055d6:	8f 08       	st.w	r7[0x0],r8

#ifdef USB_ID
	uhd_sleep_mode(UHD_STATE_WAIT_ID_HOST);
	if (!b_id_stop) {
800055d8:	58 06       	cp.w	r6,0
800055da:	c0 90       	breq	800055ec <uhd_disable+0x64>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800055dc:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
800055e0:	d3 03       	ssrf	0x10
		return; // No need to disable host, it is done automatically by hardware
	}
#endif

	flags = cpu_irq_save();
	otg_dual_disable();
800055e2:	ca ff       	rcall	80005540 <otg_dual_disable>
800055e4:	e6 17 00 01 	andh	r7,0x1,COH
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800055e8:	c0 21       	brne	800055ec <uhd_disable+0x64>
800055ea:	d5 03       	csrf	0x10
      cpu_irq_enable();
800055ec:	d8 22       	popm	r4-r7,pc
   }

	barrier();
800055ee:	d7 03       	nop

800055f0 <otg_dual_enable>:
800055f0:	d4 21       	pushm	r4-r7,lr
800055f2:	e0 68 08 cc 	mov	r8,2252
800055f6:	30 09       	mov	r9,0
	otg_data_memory_barrier();
}

bool otg_dual_enable(void)
{
	if (otg_initialized) {
800055f8:	11 8a       	ld.ub	r10,r8[0x0]
800055fa:	f2 0a 18 00 	cp.b	r10,r9
800055fe:	c0 20       	breq	80005602 <otg_dual_enable+0x12>
		return false; // Dual role already initialized
	}
	otg_initialized = true;
80005600:	d8 2a       	popm	r4-r7,pc,r12=0
80005602:	30 19       	mov	r9,1

	//* Enable USB hardware clock
	sysclk_enable_usb();
80005604:	b0 89       	st.b	r8[0x0],r9
80005606:	e0 a0 07 d3 	rcall	800065ac <sysclk_enable_usb>

	//* Link USB interrupt on OTG interrupt in dual role
	irq_register_handler(otg_interrupt, AVR32_USBB_IRQ, UHD_USB_INT_LEVEL);
8000560a:	30 0a       	mov	r10,0
8000560c:	e0 6b 02 20 	mov	r11,544
80005610:	fe cc fe c8 	sub	r12,pc,-312
 *  AVR32_PM_AWEN_xxxxWEN_MASK in the part-specific header file under
 *  "toolchain folder"/avr32/inc(lude)/avr32/)
 */
__always_inline static void pm_asyn_wake_up_enable(unsigned long awen_mask)
{
  AVR32_PM.awen |= awen_mask;
80005614:	fe b0 f7 e4 	rcall	800045dc <INTC_register_interrupt>
80005618:	fe 79 0c 00 	mov	r9,-62464
8000561c:	f2 f8 01 44 	ld.w	r8,r9[324]
80005620:	a1 a8       	sbr	r8,0x0
	pm_asyn_wake_up_enable(AVR32_PM_AWEN_USB_WAKEN_MASK);

# ifdef USB_ID
	// By default USBB is already configured with ID pin enable
	// The USBB must be enabled to provide interrupt
	otg_input_id_pin();
80005622:	f3 48 01 44 	st.w	r9[324],r8
80005626:	fe 78 10 00 	mov	r8,-61440
8000562a:	30 09       	mov	r9,0
8000562c:	ea 19 04 00 	orh	r9,0x400
80005630:	91 69       	st.w	r8[0x18],r9
80005632:	91 a9       	st.w	r8[0x28],r9
80005634:	91 29       	st.w	r8[0x8],r9
	otg_unfreeze_clock();
80005636:	f1 49 00 74 	st.w	r8[116],r9
8000563a:	fe 68 08 00 	mov	r8,-129024
8000563e:	70 09       	ld.w	r9,r8[0x0]
	otg_enable();
80005640:	af c9       	cbr	r9,0xe
80005642:	91 09       	st.w	r8[0x0],r9
80005644:	70 09       	ld.w	r9,r8[0x0]
	otg_enable_id_interrupt();
80005646:	af b9       	sbr	r9,0xf
80005648:	91 09       	st.w	r8[0x0],r9
8000564a:	70 09       	ld.w	r9,r8[0x0]
	otg_ack_id_transition();
8000564c:	a1 a9       	sbr	r9,0x0
8000564e:	91 09       	st.w	r8[0x0],r9
80005650:	30 17       	mov	r7,1
80005652:	fe 69 08 08 	mov	r9,-129016
	otg_freeze_clock();
80005656:	93 07       	st.w	r9[0x0],r7
80005658:	70 09       	ld.w	r9,r8[0x0]
	if (Is_otg_id_device()) {
8000565a:	af a9       	sbr	r9,0xe
8000565c:	91 09       	st.w	r8[0x0],r9
8000565e:	fe 68 08 04 	mov	r8,-129020
80005662:	70 08       	ld.w	r8,r8[0x0]
80005664:	ed b8 00 0a 	bld	r8,0xa
		uhd_sleep_mode(UHD_STATE_WAIT_ID_HOST);
		UHC_MODE_CHANGE(false);
80005668:	c0 61       	brne	80005674 <otg_dual_enable+0x84>
8000566a:	30 0c       	mov	r12,0
8000566c:	fe b0 f2 fe 	rcall	80003c68 <usb_mode_change>
		udc_start();
	} else {
		UHC_MODE_CHANGE(true);
80005670:	0e 9c       	mov	r12,r7
80005672:	d8 22       	popm	r4-r7,pc
80005674:	0e 9c       	mov	r12,r7
		uhc_start();
80005676:	fe b0 f2 f9 	rcall	80003c68 <usb_mode_change>
8000567a:	e0 a0 04 77 	rcall	80005f68 <uhc_start>
	return true;  // ID pin management has been enabled
# else
	uhd_sleep_mode(UHD_STATE_OFF);
	return false; // ID pin management has not been enabled
# endif
}
8000567e:	0e 9c       	mov	r12,r7
80005680:	d8 22       	popm	r4-r7,pc
80005682:	d7 03       	nop

80005684 <uhd_enable>:
80005684:	d4 21       	pushm	r4-r7,lr
80005686:	e1 b7 00 00 	mfsr	r7,0x0
8000568a:	d3 03       	ssrf	0x10
8000568c:	cb 2f       	rcall	800055f0 <otg_dual_enable>
8000568e:	c5 71       	brne	8000573c <uhd_enable+0xb8>
80005690:	fe 6b 08 04 	mov	r11,-129020
80005694:	76 09       	ld.w	r9,r11[0x0]
80005696:	e2 19 04 00 	andl	r9,0x400,COH
		return;
	}

#ifdef USB_ID
	// Check that the host mode is selected by ID pin
	if (!Is_otg_id_host()) {
8000569a:	c5 11       	brne	8000573c <uhd_enable+0xb8>
8000569c:	fe 78 10 00 	mov	r8,-61440
	otg_force_host_mode();
#endif

	// Enable USB hardware
#ifdef USB_VBOF
	uhd_output_vbof_pin();
800056a0:	30 0a       	mov	r10,0
800056a2:	ea 1a 08 00 	orh	r10,0x800
800056a6:	91 6a       	st.w	r8[0x18],r10
800056a8:	91 aa       	st.w	r8[0x28],r10
800056aa:	91 2a       	st.w	r8[0x8],r10
800056ac:	f1 4a 00 88 	st.w	r8[136],r10
800056b0:	f1 4a 00 78 	st.w	r8[120],r10
800056b4:	fe 68 08 00 	mov	r8,-129024
# if USB_VBOF_ACTIVE_LEVEL == HIGH
	uhd_set_vbof_active_high();
# else // USB_VBOF_ACTIVE_LEVEL == LOW
	uhd_set_vbof_active_low();
800056b8:	70 0a       	ld.w	r10,r8[0x0]
800056ba:	ad ba       	sbr	r10,0xd
800056bc:	91 0a       	st.w	r8[0x0],r10
800056be:	70 0a       	ld.w	r10,r8[0x0]
# endif
#endif
	otg_enable_pad();
800056c0:	ad aa       	sbr	r10,0xc
800056c2:	91 0a       	st.w	r8[0x0],r10
800056c4:	70 0a       	ld.w	r10,r8[0x0]
	otg_enable();
800056c6:	af ba       	sbr	r10,0xf
800056c8:	91 0a       	st.w	r8[0x0],r10
800056ca:	e0 6a 0d 4c 	mov	r10,3404

	uhd_ctrl_request_first = NULL;
	uhd_ctrl_request_last = NULL;
	uhd_ctrl_request_timeout = 0;
800056ce:	b4 09       	st.h	r10[0x0],r9
	uhd_suspend_start = 0;
	uhd_resume_start = 0;
	uhd_b_suspend_requested = false;

	otg_unfreeze_clock();
800056d0:	70 0a       	ld.w	r10,r8[0x0]
800056d2:	af ca       	cbr	r10,0xe
800056d4:	91 0a       	st.w	r8[0x0],r10
	uhd_disable_high_speed_mode();
#  endif
#endif

	// Clear all interrupts that may have been set by a previous host mode
	AVR32_USBB.uhintclr = AVR32_USBB_UHINTCLR_DCONNIC_MASK
800056d6:	37 fa       	mov	r10,127
800056d8:	fe 68 00 00 	mov	r8,-131072
800056dc:	f1 4a 04 08 	st.w	r8[1032],r10
			| AVR32_USBB_UHINTCLR_DDISCIC_MASK | AVR32_USBB_UHINTCLR_HSOFIC_MASK
			| AVR32_USBB_UHINTCLR_HWUPIC_MASK | AVR32_USBB_UHINTCLR_RSMEDIC_MASK
			| AVR32_USBB_UHINTCLR_RSTIC_MASK | AVR32_USBB_UHINTCLR_RXRSMIC_MASK;
	otg_ack_vbus_transition();
800056e0:	fe 6a 08 08 	mov	r10,-129016
800056e4:	30 2c       	mov	r12,2
800056e6:	95 0c       	st.w	r10[0x0],r12

	// Enable Vbus change and error interrupts
	// Disable automatic Vbus control after Vbus error
	Set_bits(AVR32_USBB.usbcon, AVR32_USBB_USBCON_VBUSHWC_MASK
800056e8:	f0 fa 08 00 	ld.w	r10,r8[2048]
800056ec:	e8 1a 01 0a 	orl	r10,0x10a
800056f0:	f1 4a 08 00 	st.w	r8[2048],r10
# endif
#endif
	otg_enable_pad();
	otg_enable();

	uhd_ctrl_request_first = NULL;
800056f4:	e0 6a 0d 40 	mov	r10,3392
800056f8:	12 98       	mov	r8,r9
	uhd_ctrl_request_last = NULL;
800056fa:	95 09       	st.w	r10[0x0],r9
800056fc:	e0 6a 0d 48 	mov	r10,3400
	uhd_ctrl_request_timeout = 0;
	uhd_suspend_start = 0;
80005700:	95 09       	st.w	r10[0x0],r9
	uhd_resume_start = 0;
80005702:	e0 69 09 4c 	mov	r9,2380
	uhd_b_suspend_requested = false;
80005706:	b2 88       	st.b	r9[0x0],r8
80005708:	e0 69 09 4e 	mov	r9,2382
	// Enable Vbus change and error interrupts
	// Disable automatic Vbus control after Vbus error
	Set_bits(AVR32_USBB.usbcon, AVR32_USBB_USBCON_VBUSHWC_MASK
			|AVR32_USBB_USBCON_VBUSTE_MASK
			|AVR32_USBB_USBCON_VBERRE_MASK);
	uhd_enable_vbus();
8000570c:	b2 88       	st.b	r9[0x0],r8
8000570e:	e0 69 09 4f 	mov	r9,2383
80005712:	b2 88       	st.b	r9[0x0],r8

	// Force Vbus interrupt when Vbus is always high
	// This is possible due to a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
80005714:	e0 68 02 00 	mov	r8,512
80005718:	fe 69 08 0c 	mov	r9,-129012
		otg_raise_vbus_transition();
8000571c:	93 08       	st.w	r9[0x0],r8
	}

	// Enable main control interrupt
	// Connection, SOF and reset
	AVR32_USBB.uhinteset = AVR32_USBB_UHINTESET_DCONNIES_MASK
8000571e:	76 08       	ld.w	r8,r11[0x0]
80005720:	ed b8 00 0b 	bld	r8,0xb
80005724:	c0 21       	brne	80005728 <uhd_enable+0xa4>
80005726:	93 0c       	st.w	r9[0x0],r12
			| AVR32_USBB_UHINTESET_HSOFIES_MASK
			| AVR32_USBB_UHINTESET_RSTIES_MASK;

	otg_freeze_clock();
80005728:	32 59       	mov	r9,37
8000572a:	fe 68 00 00 	mov	r8,-131072
8000572e:	f1 49 04 18 	st.w	r8[1048],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005732:	fe 69 08 00 	mov	r9,-129024
80005736:	72 08       	ld.w	r8,r9[0x0]
      cpu_irq_enable();
80005738:	af a8       	sbr	r8,0xe
   }

	barrier();
8000573a:	93 08       	st.w	r9[0x0],r8
8000573c:	e6 17 00 01 	andh	r7,0x1,COH
80005740:	c0 21       	brne	80005744 <uhd_enable+0xc0>
80005742:	d5 03       	csrf	0x10
80005744:	d8 22       	popm	r4-r7,pc
80005746:	d7 03       	nop

80005748 <otg_interrupt>:
80005748:	d4 31       	pushm	r0-r7,lr
8000574a:	fe 68 08 04 	mov	r8,-129020
8000574e:	70 09       	ld.w	r9,r8[0x0]
80005750:	ed b9 00 00 	bld	r9,0x0
80005754:	c2 51       	brne	8000579e <otg_interrupt+0x56>
80005756:	70 09       	ld.w	r9,r8[0x0]
{
	bool b_mode_device;

#ifdef USB_ID
	if (Is_otg_id_transition()) {
		while (!Is_otg_clock_usable());
80005758:	ed b9 00 0e 	bld	r9,0xe
8000575c:	cf d1       	brne	80005756 <otg_interrupt+0xe>
		otg_unfreeze_clock();
8000575e:	fe 68 08 00 	mov	r8,-129024
80005762:	70 09       	ld.w	r9,r8[0x0]
80005764:	af c9       	cbr	r9,0xe
80005766:	91 09       	st.w	r8[0x0],r9
		otg_ack_id_transition();
80005768:	30 1c       	mov	r12,1
8000576a:	fe 69 08 08 	mov	r9,-129016
8000576e:	93 0c       	st.w	r9[0x0],r12
		otg_freeze_clock();
80005770:	70 09       	ld.w	r9,r8[0x0]
80005772:	af a9       	sbr	r9,0xe
80005774:	91 09       	st.w	r8[0x0],r9
		if (Is_otg_id_device()) {
80005776:	fe 68 08 04 	mov	r8,-129020
8000577a:	70 08       	ld.w	r8,r8[0x0]
8000577c:	ed b8 00 0a 	bld	r8,0xa
80005780:	c0 91       	brne	80005792 <otg_interrupt+0x4a>
			uhc_stop(false);
80005782:	30 0c       	mov	r12,0
80005784:	e0 a0 03 ee 	rcall	80005f60 <uhc_stop>
			UHC_MODE_CHANGE(false);
80005788:	30 0c       	mov	r12,0
8000578a:	fe b0 f2 6f 	rcall	80003c68 <usb_mode_change>
8000578e:	e0 8f 03 2e 	bral	80005dea <otg_interrupt+0x6a2>
			udc_start();
		} else {
			udc_stop();
			UHC_MODE_CHANGE(true);
80005792:	fe b0 f2 6b 	rcall	80003c68 <usb_mode_change>
			uhc_start();
80005796:	e0 a0 03 e9 	rcall	80005f68 <uhc_start>
8000579a:	e0 8f 03 28 	bral	80005dea <otg_interrupt+0x6a2>
		}
		return;
	}
	b_mode_device = Is_otg_id_device();
8000579e:	70 08       	ld.w	r8,r8[0x0]
#else
	b_mode_device = Is_otg_device_mode_forced();
#endif

	// Redirection to host or device interrupt
	if (b_mode_device) {
800057a0:	ed b8 00 0a 	bld	r8,0xa
800057a4:	e0 80 03 1f 	breq	80005de2 <otg_interrupt+0x69a>
static void uhd_interrupt(void)
{
	uint8_t pipe_int;

	// Manage SOF interrupt
	if (Is_uhd_sof()) {
800057a8:	fe 6a 04 04 	mov	r10,-130044
800057ac:	74 08       	ld.w	r8,r10[0x0]
800057ae:	ed b8 00 05 	bld	r8,0x5
800057b2:	e0 81 00 83 	brne	800058b8 <otg_interrupt+0x170>
		uhd_ack_sof();
800057b6:	32 09       	mov	r9,32
800057b8:	fe 68 04 08 	mov	r8,-130040
800057bc:	91 09       	st.w	r8[0x0],r9
			return;
		}
	}

	// Manage a delay to enter in suspend
	if (uhd_suspend_start) {
800057be:	e0 69 09 4c 	mov	r9,2380
800057c2:	13 88       	ld.ub	r8,r9[0x0]
800057c4:	58 08       	cp.w	r8,0
		if (--uhd_suspend_start == 0) {
800057c6:	c2 80       	breq	80005816 <otg_interrupt+0xce>
800057c8:	20 18       	sub	r8,1
800057ca:	5c 58       	castu.b	r8
800057cc:	b2 88       	st.b	r9[0x0],r8
800057ce:	c0 80       	breq	800057de <otg_interrupt+0x96>
800057d0:	e0 8f 03 09 	bral	80005de2 <otg_interrupt+0x69a>
#ifdef AVR32_USBB_USBSTA_SPEED_HIGH // If UTMI
			while (115<uhd_get_frame_position()) {
#else
			while (185<uhd_get_frame_position()) {
#endif
				if (Is_uhd_disconnection()) {
800057d4:	74 08       	ld.w	r8,r10[0x0]
800057d6:	ed b8 00 01 	bld	r8,0x1
800057da:	c0 41       	brne	800057e2 <otg_interrupt+0x9a>
			// then wait end of SOF generation
			// to be sure that disable SOF has been accepted
#ifdef AVR32_USBB_USBSTA_SPEED_HIGH // If UTMI
			while (115<uhd_get_frame_position()) {
#else
			while (185<uhd_get_frame_position()) {
800057dc:	c0 a8       	rjmp	800057f0 <otg_interrupt+0xa8>
800057de:	fe 69 04 20 	mov	r9,-130016
800057e2:	72 08       	ld.w	r8,r9[0x0]
800057e4:	f1 d8 c2 08 	bfextu	r8,r8,0x10,0x8
800057e8:	e0 48 00 b9 	cp.w	r8,185
800057ec:	fe 9b ff f4 	brhi	800057d4 <otg_interrupt+0x8c>
#endif
				if (Is_uhd_disconnection()) {
					break;
				}
			}
			uhd_disable_sof();
800057f0:	fe 69 04 00 	mov	r9,-130048
800057f4:	72 08       	ld.w	r8,r9[0x0]
800057f6:	a9 c8       	cbr	r8,0x8

			// Ack previous wakeup and resumes interrupts
			AVR32_USBB.uhintclr = AVR32_USBB_UHINTCLR_HWUPIC_MASK
800057f8:	93 08       	st.w	r9[0x0],r8
800057fa:	fe 68 00 00 	mov	r8,-131072
800057fe:	35 89       	mov	r9,88
80005800:	f1 49 04 08 	st.w	r8[1032],r9
					|AVR32_USBB_UHINTCLR_RSMEDIC_MASK
					|AVR32_USBB_UHINTCLR_RXRSMIC_MASK;

			// Enable wakeup/resumes interrupts
			AVR32_USBB.uhinteset = AVR32_USBB_UHINTESET_HWUPIES_MASK
80005804:	f1 49 04 18 	st.w	r8[1048],r9
					|AVR32_USBB_UHINTESET_RSMEDIES_MASK
					|AVR32_USBB_UHINTESET_RXRSMIES_MASK;

			otg_freeze_clock();
80005808:	fe 69 08 00 	mov	r9,-129024
8000580c:	72 08       	ld.w	r8,r9[0x0]
8000580e:	af a8       	sbr	r8,0xe
80005810:	93 08       	st.w	r9[0x0],r8
80005812:	e0 8f 02 e8 	bral	80005de2 <otg_interrupt+0x69a>
			uhd_sleep_mode(UHD_STATE_SUSPEND);
		}
		return; // Abort SOF events
	}
	// Manage a delay to exit of suspend
	if (uhd_resume_start) {
80005816:	e0 69 09 4e 	mov	r9,2382
8000581a:	13 88       	ld.ub	r8,r9[0x0]
		if (--uhd_resume_start == 0) {
8000581c:	58 08       	cp.w	r8,0
8000581e:	c1 b0       	breq	80005854 <otg_interrupt+0x10c>
80005820:	20 18       	sub	r8,1
80005822:	5c 58       	castu.b	r8
80005824:	b2 88       	st.b	r9[0x0],r8
80005826:	e0 81 02 de 	brne	80005de2 <otg_interrupt+0x69a>
			// Restore pipes unfreezed
			for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
8000582a:	fe 69 06 24 	mov	r9,-129500
					uhd_unfreeze_pipe(pipe);
8000582e:	e0 6b 09 4d 	mov	r11,2381
	// Manage a delay to exit of suspend
	if (uhd_resume_start) {
		if (--uhd_resume_start == 0) {
			// Restore pipes unfreezed
			for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
80005832:	e2 6a 00 00 	mov	r10,131072
80005836:	2f f8       	sub	r8,-1
80005838:	17 8c       	ld.ub	r12,r11[0x0]
8000583a:	f8 08 08 4c 	asr	r12,r12,r8
					uhd_unfreeze_pipe(pipe);
8000583e:	ed bc 00 00 	bld	r12,0x0
	}
	// Manage a delay to exit of suspend
	if (uhd_resume_start) {
		if (--uhd_resume_start == 0) {
			// Restore pipes unfreezed
			for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
80005842:	c0 21       	brne	80005846 <otg_interrupt+0xfe>
80005844:	93 0a       	st.w	r9[0x0],r10
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
					uhd_unfreeze_pipe(pipe);
				}
			}
			uhc_notify_resume();
80005846:	2f c9       	sub	r9,-4
80005848:	58 68       	cp.w	r8,6
8000584a:	cf 61       	brne	80005836 <otg_interrupt+0xee>
8000584c:	e0 a0 03 9c 	rcall	80005f84 <uhc_notify_resume>
		}
		return; // Abort SOF events
	}
	// Manage the timeout on endpoint control transfer
	if (uhd_ctrl_request_timeout) {
80005850:	e0 8f 02 c9 	bral	80005de2 <otg_interrupt+0x69a>
80005854:	e0 68 0d 4c 	mov	r8,3404
		// Setup request on-going
		if (--uhd_ctrl_request_timeout == 0) {
80005858:	90 09       	ld.sh	r9,r8[0x0]
8000585a:	58 09       	cp.w	r9,0
8000585c:	c0 f0       	breq	8000587a <otg_interrupt+0x132>
8000585e:	90 09       	ld.sh	r9,r8[0x0]
80005860:	20 19       	sub	r9,1
			// Stop request
			uhd_freeze_pipe(0);
80005862:	b0 09       	st.h	r8[0x0],r9
80005864:	90 08       	ld.sh	r8,r8[0x0]
80005866:	58 08       	cp.w	r8,0
80005868:	c0 91       	brne	8000587a <otg_interrupt+0x132>
			uhd_ctrl_request_end(UHD_TRANS_TIMEOUT);
8000586a:	e2 69 00 00 	mov	r9,131072
8000586e:	fe 68 05 f0 	mov	r8,-129552
80005872:	30 7c       	mov	r12,7
80005874:	91 09       	st.w	r8[0x0],r9
	}
	// Manage the timeouts on endpoint transfer
	uhd_pipe_job_t *ptr_job;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		ptr_job = &uhd_pipe_job[pipe-1];
		if (ptr_job->busy == true) {
80005876:	fe b0 fc 4f 	rcall	80005114 <uhd_ctrl_request_end>
8000587a:	e0 67 08 d4 	mov	r7,2260
			if (ptr_job->timeout) {
				// Timeout enabled on this job
				if (--ptr_job->timeout == 0) {
8000587e:	30 06       	mov	r6,0
80005880:	6e 08       	ld.w	r8,r7[0x0]
80005882:	58 08       	cp.w	r8,0
	// Manage the timeouts on endpoint transfer
	uhd_pipe_job_t *ptr_job;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		ptr_job = &uhd_pipe_job[pipe-1];
		if (ptr_job->busy == true) {
			if (ptr_job->timeout) {
80005884:	c0 f4       	brge	800058a2 <otg_interrupt+0x15a>
80005886:	8e 19       	ld.sh	r9,r7[0x2]
				// Timeout enabled on this job
				if (--ptr_job->timeout == 0) {
80005888:	f2 c8 00 01 	sub	r8,r9,1
8000588c:	5c 88       	casts.h	r8
					// Abort job
					uhd_ep_abort_pipe(pipe,UHD_TRANS_TIMEOUT);
8000588e:	58 09       	cp.w	r9,0
80005890:	c0 90       	breq	800058a2 <otg_interrupt+0x15a>
80005892:	ae 18       	st.h	r7[0x2],r8
80005894:	58 08       	cp.w	r8,0
80005896:	c0 61       	brne	800058a2 <otg_interrupt+0x15a>
80005898:	ec cc ff ff 	sub	r12,r6,-1
			uhd_ctrl_request_end(UHD_TRANS_TIMEOUT);
		}
	}
	// Manage the timeouts on endpoint transfer
	uhd_pipe_job_t *ptr_job;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
8000589c:	30 7b       	mov	r11,7
8000589e:	fe b0 fa fd 	rcall	80004e98 <uhd_ep_abort_pipe>
				}
			}
		}
	}
	// Notify the UHC
	uhc_notify_sof(false);
800058a2:	2f f6       	sub	r6,-1
800058a4:	2e c7       	sub	r7,-20

	// Notify the user application
	UHC_SOF_EVENT();
800058a6:	58 66       	cp.w	r6,6
800058a8:	ce c1       	brne	80005880 <otg_interrupt+0x138>
800058aa:	30 0c       	mov	r12,0
800058ac:	e0 a0 03 1c 	rcall	80005ee4 <uhc_notify_sof>
800058b0:	fe b0 f1 e1 	rcall	80003c72 <usb_sof>
800058b4:	e0 8f 02 97 	bral	80005de2 <otg_interrupt+0x69a>
800058b8:	fe 69 00 00 	mov	r9,-131072
800058bc:	f2 fc 04 04 	ld.w	r12,r9[1028]
800058c0:	f2 f8 04 10 	ld.w	r8,r9[1040]
800058c4:	a9 8c       	lsr	r12,0x8
800058c6:	f9 e8 02 8c 	and	r12,r12,r8>>0x8
800058ca:	a7 bc       	sbr	r12,0x7
800058cc:	5c 9c       	brev	r12
800058ce:	f8 0c 12 00 	clz	r12,r12
800058d2:	e0 81 01 1d 	brne	80005b0c <otg_interrupt+0x3c4>
800058d6:	30 78       	mov	r8,7
800058d8:	f3 48 06 20 	st.w	r9[1568],r8
800058dc:	fe 68 05 30 	mov	r8,-129744
800058e0:	70 09       	ld.w	r9,r8[0x0]
800058e2:	ed b9 00 02 	bld	r9,0x2
		uhd_sof_interrupt();
		return;
	}

	// Manage pipe interrupts
	pipe_int = uhd_get_interrupt_pipe_number();
800058e6:	c4 71       	brne	80005974 <otg_interrupt+0x22c>
800058e8:	fe 6b 05 f0 	mov	r11,-129552
800058ec:	e2 6a 00 00 	mov	r10,131072
800058f0:	97 0a       	st.w	r11[0x0],r10
800058f2:	30 49       	mov	r9,4
800058f4:	fe 68 05 60 	mov	r8,-129696
800058f8:	91 09       	st.w	r8[0x0],r9
800058fa:	18 9e       	mov	lr,r12
800058fc:	e0 69 0d 40 	mov	r9,3392
	if (pipe_int == 0) {
80005900:	72 09       	ld.w	r9,r9[0x0]
{
	// A setup request is on-going
	Assert(uhd_ctrl_request_timeout!=0);

	// Disable setup, IN and OUT interrupts of control endpoint
	AVR32_USBB.upcon0clr = AVR32_USBB_UPCON0CLR_TXSTPEC_MASK
80005902:	13 97       	ld.ub	r7,r9[0x1]
80005904:	f8 07 18 00 	cp.b	r7,r12
			| AVR32_USBB_UPCON0CLR_RXINEC_MASK
			| AVR32_USBB_UPCON0CLR_TXOUTEC_MASK;

	// Search event on control endpoint
	if (Is_uhd_setup_ready(0)) {
80005908:	c1 64       	brge	80005934 <otg_interrupt+0x1ec>
8000590a:	fe 6c 05 00 	mov	r12,-129792
8000590e:	78 09       	ld.w	r9,r12[0x0]
80005910:	e0 19 fc ff 	andl	r9,0xfcff
		// SETUP packet sent
		uhd_freeze_pipe(0);
80005914:	a9 a9       	sbr	r9,0x8
80005916:	99 09       	st.w	r12[0x0],r9
80005918:	30 19       	mov	r9,1
8000591a:	91 09       	st.w	r8[0x0],r9
8000591c:	e0 6c 00 80 	mov	r12,128
		uhd_ack_setup_ready(0);
80005920:	91 0c       	st.w	r8[0x0],r12
80005922:	97 09       	st.w	r11[0x0],r9
80005924:	fe 68 06 20 	mov	r8,-129504
		Assert(uhd_ctrl_request_phase == UHD_CTRL_REQ_PHASE_SETUP);

		// Start DATA phase
		if ((uhd_ctrl_request_first->req.bmRequestType & USB_REQ_DIR_MASK)
80005928:	e0 69 40 00 	mov	r9,16384
8000592c:	91 09       	st.w	r8[0x0],r9
8000592e:	91 0a       	st.w	r8[0x0],r10
80005930:	30 29       	mov	r9,2
80005932:	c1 e8       	rjmp	8000596e <otg_interrupt+0x226>
 * \brief Starts the DATA IN phase on control endpoint
 */
static void uhd_ctrl_phase_data_in_start(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_IN;
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_IN);
80005934:	f3 3e 00 08 	ld.ub	lr,r9[8]
80005938:	13 f9       	ld.ub	r9,r9[0x7]
8000593a:	fd e9 10 89 	or	r9,lr,r9<<0x8
8000593e:	f8 09 19 00 	cp.h	r9,r12
	uhd_ack_in_received(0);
80005942:	e0 81 00 bf 	brne	80005ac0 <otg_interrupt+0x378>
	uhd_ack_short_packet(0);
80005946:	fe 6c 05 00 	mov	r12,-129792
8000594a:	78 09       	ld.w	r9,r12[0x0]
	uhd_enable_in_received_interrupt(0);
8000594c:	e0 19 fc ff 	andl	r9,0xfcff
	uhd_ack_fifocon(0);
80005950:	a9 a9       	sbr	r9,0x8
80005952:	99 09       	st.w	r12[0x0],r9
80005954:	30 19       	mov	r9,1
80005956:	91 09       	st.w	r8[0x0],r9
	uhd_unfreeze_pipe(0);
80005958:	e0 6c 00 80 	mov	r12,128
 * \internal
 * \brief Starts the DATA IN phase on control endpoint
 */
static void uhd_ctrl_phase_data_in_start(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_IN;
8000595c:	91 0c       	st.w	r8[0x0],r12
		// Start DATA phase
		if ((uhd_ctrl_request_first->req.bmRequestType & USB_REQ_DIR_MASK)
				== USB_REQ_DIR_IN ) {
			uhd_ctrl_phase_data_in_start();
		} else {
			if (uhd_ctrl_request_first->req.wLength) {
8000595e:	97 09       	st.w	r11[0x0],r9
80005960:	fe 68 06 20 	mov	r8,-129504
80005964:	e0 69 40 00 	mov	r9,16384
80005968:	91 09       	st.w	r8[0x0],r9
8000596a:	91 0a       	st.w	r8[0x0],r10
8000596c:	30 39       	mov	r9,3
8000596e:	e0 68 0d 3c 	mov	r8,3388
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_IN);
80005972:	c6 c9       	rjmp	80005c4a <otg_interrupt+0x502>
80005974:	70 0c       	ld.w	r12,r8[0x0]
80005976:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
8000597a:	e0 80 00 8d 	breq	80005a94 <otg_interrupt+0x34c>
	uhd_ack_in_received(0);
8000597e:	fe 69 05 c0 	mov	r9,-129600
	uhd_ack_short_packet(0);
80005982:	72 08       	ld.w	r8,r9[0x0]
80005984:	ed b8 00 11 	bld	r8,0x11
	uhd_enable_in_received_interrupt(0);
80005988:	cf d1       	brne	80005982 <otg_interrupt+0x23a>
	uhd_ack_fifocon(0);
8000598a:	fe 68 05 60 	mov	r8,-129696
8000598e:	30 19       	mov	r9,1
80005990:	91 09       	st.w	r8[0x0],r9
80005992:	e0 68 0d 3c 	mov	r8,3388
 * \internal
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
80005996:	70 08       	ld.w	r8,r8[0x0]
80005998:	58 28       	cp.w	r8,2
8000599a:	c0 50       	breq	800059a4 <otg_interrupt+0x25c>
				uhd_ctrl_phase_zlp_in();
			}
		}
		return;
	}
	if (Is_uhd_in_received(0)) {
8000599c:	58 38       	cp.w	r8,3
8000599e:	e0 81 02 22 	brne	80005de2 <otg_interrupt+0x69a>
800059a2:	c7 78       	rjmp	80005a90 <otg_interrupt+0x348>
800059a4:	fe 68 05 30 	mov	r8,-129744
		// In case of low USB speed and with a high CPU frequency,
		// a ACK from host can be always running on USB line
		// then wait end of ACK on IN pipe.
		while(!Is_uhd_pipe_frozen(0));
800059a8:	30 02       	mov	r2,0
800059aa:	ea 12 d0 00 	orh	r2,0xd000
800059ae:	70 06       	ld.w	r6,r8[0x0]
800059b0:	e0 63 0d 40 	mov	r3,3392

		// IN packet received
		uhd_ack_in_received(0);
800059b4:	70 00       	ld.w	r0,r8[0x0]
800059b6:	ed d6 c2 88 	bfextu	r6,r6,0x14,0x8
		switch(uhd_ctrl_request_phase) {
800059ba:	30 07       	mov	r7,0
800059bc:	30 04       	mov	r4,0
800059be:	e0 65 0d 44 	mov	r5,3396
800059c2:	fe 61 04 24 	mov	r1,-130012
800059c6:	c1 08       	rjmp	800059e6 <otg_interrupt+0x29e>
800059c8:	05 39       	ld.ub	r9,r2++
	bool b_short_packet;
	uint8_t *ptr_ep_data;
	uint8_t nb_byte_received;

	// Get information to read data
	nb_byte_received = uhd_byte_count(0);
800059ca:	74 38       	ld.w	r8,r10[0xc]
800059cc:	10 c9       	st.b	r8++,r9
	//! In HUB mode, the control pipe is always configured to 64B
	//! thus the short packet flag must be computed
	b_short_packet = (nb_byte_received != uhd_get_pipe_size(0));
	uhd_ack_short_packet(0);
#else
	b_short_packet = Is_uhd_short_packet(0);
800059ce:	95 38       	st.w	r10[0xc],r8
800059d0:	8a 08       	ld.sh	r8,r5[0x0]
800059d2:	2f f8       	sub	r8,-1
	bool b_short_packet;
	uint8_t *ptr_ep_data;
	uint8_t nb_byte_received;

	// Get information to read data
	nb_byte_received = uhd_byte_count(0);
800059d4:	aa 08       	st.h	r5[0x0],r8
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
800059d6:	ed de c0 08 	bfextu	r6,lr,0x0,0x8
	bool b_short_packet;
	uint8_t *ptr_ep_data;
	uint8_t nb_byte_received;

	// Get information to read data
	nb_byte_received = uhd_byte_count(0);
800059da:	66 08       	ld.w	r8,r3[0x0]
800059dc:	f1 09 00 10 	ld.sh	r9,r8[16]
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
800059e0:	20 19       	sub	r9,1
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
		uhd_ctrl_nb_trans++;
800059e2:	f1 59 00 10 	st.h	r8[16],r9

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
800059e6:	66 0a       	ld.w	r10,r3[0x0]
800059e8:	ee 06 18 00 	cp.b	r6,r7

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
800059ec:	5f 18       	srne	r8
800059ee:	f5 09 00 10 	ld.sh	r9,r10[16]
		uhd_ctrl_nb_trans++;
800059f2:	ec ce 00 01 	sub	lr,r6,1
800059f6:	e8 09 19 00 	cp.h	r9,r4
		uhd_ctrl_request_first->payload_size--;
		nb_byte_received--;
800059fa:	5f 1c       	srne	r12
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
		uhd_ctrl_nb_trans++;
		uhd_ctrl_request_first->payload_size--;
800059fc:	f4 cb ff f4 	sub	r11,r10,-12
80005a00:	f1 ec 00 0c 	and	r12,r8,r12
80005a04:	ee 0c 18 00 	cp.b	r12,r7
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
80005a08:	ce 01       	brne	800059c8 <otg_interrupt+0x280>
80005a0a:	e8 09 19 00 	cp.h	r9,r4
80005a0e:	5f 09       	sreq	r9
80005a10:	12 68       	and	r8,r9
80005a12:	ee 08 18 00 	cp.b	r8,r7
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
		uhd_ctrl_nb_trans++;
		uhd_ctrl_request_first->payload_size--;
		nb_byte_received--;
80005a16:	c0 b0       	breq	80005a2c <otg_interrupt+0x2e4>
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
80005a18:	74 58       	ld.w	r8,r10[0x14]
80005a1a:	58 08       	cp.w	r8,0
80005a1c:	c1 60       	breq	80005a48 <otg_interrupt+0x300>
		nb_byte_received--;
	}

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
80005a1e:	62 0c       	ld.w	r12,r1[0x0]
80005a20:	2f 0a       	sub	r10,-16
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
80005a22:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80005a26:	5d 18       	icall	r8
80005a28:	cd f1       	brne	800059e6 <otg_interrupt+0x29e>
80005a2a:	c0 f8       	rjmp	80005a48 <otg_interrupt+0x300>
		uhd_ctrl_nb_trans++;
		uhd_ctrl_request_first->payload_size--;
		nb_byte_received--;
	}

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
80005a2c:	f5 38 00 08 	ld.ub	r8,r10[8]
80005a30:	e0 69 0d 44 	mov	r9,3396
80005a34:	15 fa       	ld.ub	r10,r10[0x7]
80005a36:	92 09       	ld.sh	r9,r9[0x0]
80005a38:	f1 ea 10 88 	or	r8,r8,r10<<0x8
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
80005a3c:	f0 09 19 00 	cp.h	r9,r8
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
80005a40:	c0 40       	breq	80005a48 <otg_interrupt+0x300>
		nb_byte_received--;
	}

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
80005a42:	e2 10 00 80 	andl	r0,0x80,COH
80005a46:	c1 90       	breq	80005a78 <otg_interrupt+0x330>
80005a48:	fe 69 05 00 	mov	r9,-129792
80005a4c:	72 08       	ld.w	r8,r9[0x0]
80005a4e:	e0 18 fc ff 	andl	r8,0xfcff
80005a52:	a9 b8       	sbr	r8,0x9
80005a54:	93 08       	st.w	r9[0x0],r8
80005a56:	30 28       	mov	r8,2
80005a58:	fe 69 05 60 	mov	r9,-129696
		// thus the data load can restart.
		goto uhd_ctrl_receiv_in_read_data;
	}

	// Test short packet
	if ((uhd_ctrl_nb_trans == uhd_ctrl_request_first->req.wLength)
80005a5c:	93 08       	st.w	r9[0x0],r8
80005a5e:	fe 69 05 f0 	mov	r9,-129552
80005a62:	93 08       	st.w	r9[0x0],r8
80005a64:	e0 69 40 00 	mov	r9,16384
80005a68:	fe 68 06 20 	mov	r8,-129504
80005a6c:	91 09       	st.w	r8[0x0],r9
80005a6e:	30 4a       	mov	r10,4
80005a70:	e0 69 0d 3c 	mov	r9,3388
80005a74:	93 0a       	st.w	r9[0x0],r10
 * \brief Starts the ZLP OUT phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_out(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_OUT;
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
80005a76:	c0 a8       	rjmp	80005a8a <otg_interrupt+0x342>
80005a78:	30 19       	mov	r9,1
80005a7a:	fe 68 05 f0 	mov	r8,-129552
80005a7e:	91 09       	st.w	r8[0x0],r9
80005a80:	fe 68 06 20 	mov	r8,-129504
	uhd_ack_out_ready(0);
80005a84:	e0 69 40 00 	mov	r9,16384
80005a88:	91 09       	st.w	r8[0x0],r9
80005a8a:	e2 69 00 00 	mov	r9,131072
	uhd_enable_out_ready_interrupt(0);
80005a8e:	cd e8       	rjmp	80005c4a <otg_interrupt+0x502>
80005a90:	30 0c       	mov	r12,0
	uhd_ack_fifocon(0);
80005a92:	c3 a8       	rjmp	80005b06 <otg_interrupt+0x3be>
80005a94:	70 09       	ld.w	r9,r8[0x0]
80005a96:	ed b9 00 01 	bld	r9,0x1
80005a9a:	c1 71       	brne	80005ac8 <otg_interrupt+0x380>
 * \internal
 * \brief Starts the ZLP OUT phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_out(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_OUT;
80005a9c:	e2 69 00 00 	mov	r9,131072
80005aa0:	fe 68 05 f0 	mov	r8,-129552
		uhd_ctrl_phase_zlp_out();
		return;
	}

	// Send a new IN packet request
	uhd_enable_in_received_interrupt(0);
80005aa4:	91 09       	st.w	r8[0x0],r9
80005aa6:	fe 68 05 60 	mov	r8,-129696
80005aaa:	30 29       	mov	r9,2
	uhd_ack_fifocon(0);
80005aac:	91 09       	st.w	r8[0x0],r9
80005aae:	e0 68 0d 3c 	mov	r8,3388
80005ab2:	70 08       	ld.w	r8,r8[0x0]
80005ab4:	58 18       	cp.w	r8,1
	uhd_unfreeze_pipe(0);
80005ab6:	c0 50       	breq	80005ac0 <otg_interrupt+0x378>
80005ab8:	58 48       	cp.w	r8,4
80005aba:	e0 81 01 94 	brne	80005de2 <otg_interrupt+0x69a>
		switch(uhd_ctrl_request_phase) {
		case UHD_CTRL_REQ_PHASE_DATA_IN:
			uhd_ctrl_phase_data_in();
			break;
		case UHD_CTRL_REQ_PHASE_ZLP_IN:
			uhd_ctrl_request_end(UHD_TRANS_NOERROR);
80005abe:	c2 48       	rjmp	80005b06 <otg_interrupt+0x3be>
			Assert(false);
			break;
		}
		return;
	}
	if (Is_uhd_out_ready(0)) {
80005ac0:	fe b0 f8 c8 	rcall	80004c50 <uhd_ctrl_phase_data_out>
80005ac4:	e0 8f 01 8f 	bral	80005de2 <otg_interrupt+0x69a>
		// OUT packet sent
		uhd_freeze_pipe(0);
80005ac8:	70 09       	ld.w	r9,r8[0x0]
80005aca:	e2 19 00 40 	andl	r9,0x40,COH
80005ace:	c0 70       	breq	80005adc <otg_interrupt+0x394>
80005ad0:	34 09       	mov	r9,64
		uhd_ack_out_ready(0);
80005ad2:	fe 68 05 60 	mov	r8,-129696
80005ad6:	30 4c       	mov	r12,4
80005ad8:	91 09       	st.w	r8[0x0],r9
		switch(uhd_ctrl_request_phase) {
80005ada:	c1 68       	rjmp	80005b06 <otg_interrupt+0x3be>
80005adc:	70 08       	ld.w	r8,r8[0x0]
80005ade:	ed b8 00 03 	bld	r8,0x3
80005ae2:	e0 81 01 80 	brne	80005de2 <otg_interrupt+0x69a>
80005ae6:	fe 6a 06 80 	mov	r10,-129408
		case UHD_CTRL_REQ_PHASE_DATA_OUT:
			uhd_ctrl_phase_data_out();
80005aea:	74 08       	ld.w	r8,r10[0x0]
80005aec:	95 09       	st.w	r10[0x0],r9
80005aee:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
			Assert(false);
			break;
		}
		return;
	}
	if (Is_uhd_stall(0)) {
80005af2:	20 18       	sub	r8,1
80005af4:	58 28       	cp.w	r8,2
80005af6:	e0 88 00 04 	brls	80005afe <otg_interrupt+0x3b6>
		// Stall Handshake received
		uhd_ack_stall(0);
80005afa:	30 6c       	mov	r12,6
80005afc:	c0 58       	rjmp	80005b06 <otg_interrupt+0x3be>
80005afe:	fe c9 e2 46 	sub	r9,pc,-7610
80005b02:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		uhd_ctrl_request_end(UHD_TRANS_STALL);
		return;
	}
	if (Is_uhd_pipe_error(0)) {
80005b06:	fe b0 fb 07 	rcall	80005114 <uhd_ctrl_request_end>
80005b0a:	c6 c9       	rjmp	80005de2 <otg_interrupt+0x69a>
80005b0c:	30 78       	mov	r8,7
80005b0e:	f0 0c 18 00 	cp.b	r12,r8
 *
 * \return UHD transfer error
 */
static uhd_trans_status_t uhd_pipe_get_error(uint8_t pipe)
{
	uint32_t error = uhd_error_status(pipe) &
80005b12:	c6 60       	breq	80005bde <otg_interrupt+0x496>
80005b14:	f8 08 15 02 	lsl	r8,r12,0x2
			(AVR32_USBB_UPERR0_DATATGL_MASK |
			AVR32_USBB_UPERR0_TIMEOUT_MASK |
			AVR32_USBB_UPERR0_PID_MASK |
			AVR32_USBB_UPERR0_DATAPID_MASK);
	uhd_ack_all_errors(pipe);
80005b18:	fe 6b 05 c0 	mov	r11,-129600
80005b1c:	f0 0b 00 0a 	add	r10,r8,r11
80005b20:	74 09       	ld.w	r9,r10[0x0]
80005b22:	ed b9 00 0c 	bld	r9,0xc
80005b26:	c1 11       	brne	80005b48 <otg_interrupt+0x400>
80005b28:	fe 6b 05 30 	mov	r11,-129744
80005b2c:	f0 0b 00 09 	add	r9,r8,r11
		uhd_ctrl_request_end(UHD_TRANS_STALL);
		return;
	}
	if (Is_uhd_pipe_error(0)) {
		// Get and ack error
		uhd_ctrl_request_end(uhd_pipe_get_error(0));
80005b30:	72 0b       	ld.w	r11,r9[0x0]
80005b32:	f7 db c1 82 	bfextu	r11,r11,0xc,0x2
	if (pipe_int == 0) {
		// Interrupt acked by control endpoint managed
		uhd_ctrl_interrupt();
		return;
	}
	if (pipe_int != AVR32_USBB_EPT_NUM) {
80005b36:	c0 91       	brne	80005b48 <otg_interrupt+0x400>
80005b38:	e0 38 f9 e0 	sub	r8,129504
 *
 * \param pipe  Pipe number
 */
static void uhd_pipe_interrupt(uint8_t pipe)
{
	if (Is_uhd_bank_interrupt_enabled(pipe) && (0==uhd_nb_busy_bank(pipe))) {
80005b3c:	e0 69 10 00 	mov	r9,4096
80005b40:	91 09       	st.w	r8[0x0],r9
80005b42:	fe b0 f9 6f 	rcall	80004e20 <uhd_pipe_finish_job>
80005b46:	c4 e9       	rjmp	80005de2 <otg_interrupt+0x69a>
80005b48:	74 09       	ld.w	r9,r10[0x0]
80005b4a:	ed b9 00 01 	bld	r9,0x1
80005b4e:	c1 b1       	brne	80005b84 <otg_interrupt+0x43c>
80005b50:	fe 6a 05 30 	mov	r10,-129744
80005b54:	f0 0a 00 09 	add	r9,r8,r10
80005b58:	72 09       	ld.w	r9,r9[0x0]
80005b5a:	ed b9 00 01 	bld	r9,0x1
80005b5e:	c1 31       	brne	80005b84 <otg_interrupt+0x43c>
		uhd_disable_bank_interrupt(pipe);
80005b60:	30 2a       	mov	r10,2
80005b62:	fe 6c 06 20 	mov	r12,-129504
80005b66:	f0 0c 00 09 	add	r9,r8,r12
		uhd_pipe_finish_job(pipe, UHD_TRANS_NOERROR);
80005b6a:	93 0a       	st.w	r9[0x0],r10
80005b6c:	fe 6c 05 60 	mov	r12,-129696
80005b70:	f0 0c 00 0b 	add	r11,r8,r12
80005b74:	97 0a       	st.w	r11[0x0],r10
80005b76:	e0 6a 40 00 	mov	r10,16384
80005b7a:	93 0a       	st.w	r9[0x0],r10
80005b7c:	e2 6a 00 00 	mov	r10,131072
80005b80:	93 0a       	st.w	r9[0x0],r10
80005b82:	c6 08       	rjmp	80005c42 <otg_interrupt+0x4fa>
80005b84:	fe 6b 05 30 	mov	r11,-129744
		return;
	}
	if (Is_uhd_out_ready_interrupt_enabled(pipe) && Is_uhd_out_ready(pipe)) {
80005b88:	f0 0b 00 0a 	add	r10,r8,r11
80005b8c:	74 09       	ld.w	r9,r10[0x0]
80005b8e:	e2 19 00 40 	andl	r9,0x40,COH
80005b92:	c0 e0       	breq	80005bae <otg_interrupt+0x466>
80005b94:	fe 6a 05 60 	mov	r10,-129696
80005b98:	f0 0a 00 09 	add	r9,r8,r10
80005b9c:	34 0a       	mov	r10,64
80005b9e:	93 0a       	st.w	r9[0x0],r10
		uhd_disable_out_ready_interrupt(pipe);
80005ba0:	e0 38 fa 10 	sub	r8,129552
80005ba4:	e4 69 00 00 	mov	r9,262144
80005ba8:	30 4b       	mov	r11,4
80005baa:	91 09       	st.w	r8[0x0],r9
		// One bank is free then send a ZLP
		uhd_ack_out_ready(pipe);
80005bac:	c1 68       	rjmp	80005bd8 <otg_interrupt+0x490>
80005bae:	74 0a       	ld.w	r10,r10[0x0]
80005bb0:	ed ba 00 03 	bld	r10,0x3
80005bb4:	e0 81 01 17 	brne	80005de2 <otg_interrupt+0x69a>
		uhd_ack_fifocon(pipe);
80005bb8:	e0 38 f9 80 	sub	r8,129408
		uhd_unfreeze_pipe(pipe);
80005bbc:	70 0a       	ld.w	r10,r8[0x0]
80005bbe:	91 09       	st.w	r8[0x0],r9
80005bc0:	f1 da c0 04 	bfextu	r8,r10,0x0,0x4
		uhd_enable_bank_interrupt(pipe);
		return;
	}
	if (Is_uhd_stall(pipe)) {
80005bc4:	20 18       	sub	r8,1
80005bc6:	58 28       	cp.w	r8,2
80005bc8:	e0 88 00 04 	brls	80005bd0 <otg_interrupt+0x488>
80005bcc:	30 6b       	mov	r11,6
80005bce:	c0 58       	rjmp	80005bd8 <otg_interrupt+0x490>
80005bd0:	fe c9 e3 18 	sub	r9,pc,-7400
		uhd_ack_stall(pipe);
80005bd4:	f2 08 03 2b 	ld.w	r11,r9[r8<<0x2]
80005bd8:	fe b0 f9 60 	rcall	80004e98 <uhd_ep_abort_pipe>
80005bdc:	c0 39       	rjmp	80005de2 <otg_interrupt+0x69a>
80005bde:	f2 fc 04 04 	ld.w	r12,r9[1028]
		uhd_reset_data_toggle(pipe);
80005be2:	f2 fb 04 10 	ld.w	r11,r9[1040]
80005be6:	b9 9c       	lsr	r12,0x19
		uhd_ep_abort_pipe(pipe, UHD_TRANS_STALL);
80005be8:	f9 eb 03 9c 	and	r12,r12,r11>>0x19
		uhd_enable_bank_interrupt(pipe);
		return;
	}
	if (Is_uhd_stall(pipe)) {
		uhd_ack_stall(pipe);
		uhd_reset_data_toggle(pipe);
80005bec:	a7 ac       	sbr	r12,0x6
		uhd_ep_abort_pipe(pipe, UHD_TRANS_STALL);
		return;
	}
	if (Is_uhd_pipe_error(pipe)) {
80005bee:	5c 9c       	brev	r12
80005bf0:	f8 0c 12 00 	clz	r12,r12
80005bf4:	2f fc       	sub	r12,-1
80005bf6:	f0 0c 18 00 	cp.b	r12,r8
 *
 * \return UHD transfer error
 */
static uhd_trans_status_t uhd_pipe_get_error(uint8_t pipe)
{
	uint32_t error = uhd_error_status(pipe) &
80005bfa:	c4 10       	breq	80005c7c <otg_interrupt+0x534>
80005bfc:	f8 08 15 04 	lsl	r8,r12,0x4
			(AVR32_USBB_UPERR0_DATATGL_MASK |
			AVR32_USBB_UPERR0_TIMEOUT_MASK |
			AVR32_USBB_UPERR0_PID_MASK |
			AVR32_USBB_UPERR0_DATAPID_MASK);
	uhd_ack_all_errors(pipe);
80005c00:	e0 38 f9 00 	sub	r8,129280
80005c04:	70 39       	ld.w	r9,r8[0xc]
80005c06:	ed b9 00 00 	bld	r9,0x0
80005c0a:	e0 80 00 ec 	breq	80005de2 <otg_interrupt+0x69a>
80005c0e:	70 39       	ld.w	r9,r8[0xc]
80005c10:	b1 89       	lsr	r9,0x10
80005c12:	c0 d0       	breq	80005c2c <otg_interrupt+0x4e4>
80005c14:	e0 6a 08 d4 	mov	r10,2260
		uhd_ep_abort_pipe(pipe, UHD_TRANS_STALL);
		return;
	}
	if (Is_uhd_pipe_error(pipe)) {
		// Get and ack error
		uhd_ep_abort_pipe(pipe, uhd_pipe_get_error(pipe));
80005c18:	f8 c8 00 01 	sub	r8,r12,1
	if (pipe_int != AVR32_USBB_EPT_NUM) {
		// Interrupt acked by bulk/interrupt/isochronous endpoint
		uhd_pipe_interrupt(pipe_int);
		return;
	}
	pipe_int = uhd_get_pipe_dma_interrupt_number();
80005c1c:	f0 08 00 28 	add	r8,r8,r8<<0x2
80005c20:	f4 08 00 28 	add	r8,r10,r8<<0x2
80005c24:	70 3a       	ld.w	r10,r8[0xc]
80005c26:	12 1a       	sub	r10,r9
80005c28:	91 2a       	st.w	r8[0x8],r10
80005c2a:	91 3a       	st.w	r8[0xc],r10
80005c2c:	f8 08 15 02 	lsl	r8,r12,0x2
80005c30:	fe 6b 05 00 	mov	r11,-129792
	if (pipe_int != AVR32_USBB_EPT_NUM) {
80005c34:	f0 0b 00 0a 	add	r10,r8,r11
80005c38:	74 0a       	ld.w	r10,r10[0x0]
static void uhd_pipe_interrupt_dma(uint8_t pipe)
{
	uhd_pipe_job_t *ptr_job;
	uint32_t nb_remaining;

	if (uhd_pipe_dma_get_status(pipe)
80005c3a:	f5 da c1 02 	bfextu	r10,r10,0x8,0x2
80005c3e:	58 2a       	cp.w	r10,2
80005c40:	c0 71       	brne	80005c4e <otg_interrupt+0x506>
80005c42:	e0 38 fa 10 	sub	r8,129552
80005c46:	e0 69 10 00 	mov	r9,4096
80005c4a:	91 09       	st.w	r8[0x0],r9
			& AVR32_USBB_UHDMA1_STATUS_CH_EN_MASK) {
		return; // Ignore EOT_STA interrupt
	}
	// Save number of data no transfered
	nb_remaining = (uhd_pipe_dma_get_status(pipe) &
80005c4c:	cc b8       	rjmp	80005de2 <otg_interrupt+0x69a>
80005c4e:	fe 6a 05 c0 	mov	r10,-129600
			AVR32_USBB_UHDMA1_STATUS_CH_BYTE_CNT_MASK)
			>> AVR32_USBB_UHDMA1_STATUS_CH_BYTE_CNT_OFFSET;
	if (nb_remaining) {
		// Get job corresponding at endpoint
		ptr_job = &uhd_pipe_job[pipe - 1];
80005c52:	f0 0a 00 0b 	add	r11,r8,r10
80005c56:	76 0a       	ld.w	r10,r11[0x0]
80005c58:	ed ba 00 11 	bld	r10,0x11
80005c5c:	c0 d0       	breq	80005c76 <otg_interrupt+0x52e>
80005c5e:	58 09       	cp.w	r9,0

		// Transfer no complete (short packet or ZLP) then:
		// Update number of transfered data
		ptr_job->nb_trans -= nb_remaining;
80005c60:	c0 70       	breq	80005c6e <otg_interrupt+0x526>
80005c62:	e0 38 fa 10 	sub	r8,129552
80005c66:	e2 69 00 00 	mov	r9,131072

		// Set transfer complete to stop the transfer
		ptr_job->buf_size = ptr_job->nb_trans;
	}

	if (uhd_is_pipe_out(pipe)) {
80005c6a:	91 09       	st.w	r8[0x0],r9
80005c6c:	c0 58       	rjmp	80005c76 <otg_interrupt+0x52e>
80005c6e:	76 08       	ld.w	r8,r11[0x0]
80005c70:	ed b8 00 11 	bld	r8,0x11
80005c74:	cf d1       	brne	80005c6e <otg_interrupt+0x526>
80005c76:	fe b0 f9 41 	rcall	80004ef8 <uhd_pipe_trans_complet>
80005c7a:	cb 48       	rjmp	80005de2 <otg_interrupt+0x69a>
80005c7c:	74 08       	ld.w	r8,r10[0x0]
		// Wait that all banks are free to freeze clock of OUT endpoint
		// and call callback
		uhd_enable_bank_interrupt(pipe);
80005c7e:	e2 18 00 04 	andl	r8,0x4,COH
80005c82:	c0 d0       	breq	80005c9c <otg_interrupt+0x554>
80005c84:	fe 68 04 08 	mov	r8,-130040
80005c88:	30 49       	mov	r9,4
	} else {
		if (!Is_uhd_pipe_frozen(pipe)) {
80005c8a:	91 09       	st.w	r8[0x0],r9
80005c8c:	e0 68 08 d0 	mov	r8,2256
80005c90:	70 08       	ld.w	r8,r8[0x0]
80005c92:	58 08       	cp.w	r8,0
80005c94:	e0 80 00 a7 	breq	80005de2 <otg_interrupt+0x69a>
80005c98:	5d 18       	icall	r8
			// Pipe is not freeze in case of :
			// - incomplete transfer when the request number INRQ is not complete.
			// - low USB speed and with a high CPU frequency,
			// a ACK from host can be always running on USB line.

			if (nb_remaining) {
80005c9a:	ca 48       	rjmp	80005de2 <otg_interrupt+0x69a>
80005c9c:	74 0a       	ld.w	r10,r10[0x0]
				// Freeze pipe in case of incomplete transfer
				uhd_freeze_pipe(pipe);
80005c9e:	ed ba 00 01 	bld	r10,0x1
80005ca2:	c2 31       	brne	80005ce8 <otg_interrupt+0x5a0>
80005ca4:	fe 6a 04 10 	mov	r10,-130032
80005ca8:	74 0a       	ld.w	r10,r10[0x0]
			} else {
				// Wait freeze in case of ASK on going
				while (!Is_uhd_pipe_frozen(pipe)) {
80005caa:	ed ba 00 01 	bld	r10,0x1
80005cae:	c1 d1       	brne	80005ce8 <otg_interrupt+0x5a0>
80005cb0:	30 2a       	mov	r10,2
				}
			}
		}
		uhd_pipe_trans_complet(pipe);
80005cb2:	fe 6b 04 08 	mov	r11,-130040
80005cb6:	97 0a       	st.w	r11[0x0],r10
		// Interrupt DMA acked by bulk/interrupt/isochronous endpoint
		uhd_pipe_interrupt_dma(pipe_int);
		return;
	}
	// USB bus reset detection
	if (Is_uhd_reset_sent()) {
80005cb8:	fe 6b 04 14 	mov	r11,-130028
80005cbc:	97 0a       	st.w	r11[0x0],r10
80005cbe:	fe 6b 04 00 	mov	r11,-130048
		uhd_ack_reset_sent();
80005cc2:	76 0a       	ld.w	r10,r11[0x0]
80005cc4:	a9 da       	cbr	r10,0x9
80005cc6:	97 0a       	st.w	r11[0x0],r10
		if (uhd_reset_callback != NULL) {
80005cc8:	35 8a       	mov	r10,88
80005cca:	f3 4a 04 14 	st.w	r9[1044],r10
80005cce:	fe 69 04 18 	mov	r9,-130024
			uhd_reset_callback();
80005cd2:	30 1a       	mov	r10,1
80005cd4:	93 0a       	st.w	r9[0x0],r10
		}
		return;
	}

	// Manage dis/connection event
	if (Is_uhd_disconnection() && Is_uhd_disconnection_int_enabled()) {
80005cd6:	e0 69 09 4c 	mov	r9,2380
80005cda:	10 9c       	mov	r12,r8
80005cdc:	b2 88       	st.b	r9[0x0],r8
80005cde:	e0 69 09 4e 	mov	r9,2382
80005ce2:	b2 88       	st.b	r9[0x0],r8
80005ce4:	c2 58       	rjmp	80005d2e <otg_interrupt+0x5e6>
80005ce6:	d7 03       	nop
80005ce8:	fe 68 04 04 	mov	r8,-130044
		uhd_ack_disconnection();
80005cec:	70 08       	ld.w	r8,r8[0x0]
80005cee:	ed b8 00 00 	bld	r8,0x0
		uhd_disable_disconnection_int();
80005cf2:	c2 11       	brne	80005d34 <otg_interrupt+0x5ec>
80005cf4:	fe 68 04 10 	mov	r8,-130032
		// Stop reset signal, in case of disconnection during reset
		uhd_stop_reset();
80005cf8:	70 08       	ld.w	r8,r8[0x0]
80005cfa:	ed b8 00 00 	bld	r8,0x0
80005cfe:	c1 b1       	brne	80005d34 <otg_interrupt+0x5ec>
80005d00:	fe 68 04 08 	mov	r8,-130040
		// Disable wakeup/resumes interrupts,
		// in case of disconnection during suspend mode
		AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_HWUPIEC_MASK
80005d04:	30 1c       	mov	r12,1
80005d06:	91 0c       	st.w	r8[0x0],r12
				| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
				| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
		uhd_sleep_mode(UHD_STATE_DISCONNECT);
		uhd_enable_connection_int();
80005d08:	fe 68 04 14 	mov	r8,-130028
80005d0c:	91 0c       	st.w	r8[0x0],r12
80005d0e:	fe 68 04 18 	mov	r8,-130024
		uhd_suspend_start = 0;
		uhd_resume_start = 0;
		uhc_notify_connection(false);
80005d12:	30 29       	mov	r9,2
		AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_HWUPIEC_MASK
				| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
				| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
		uhd_sleep_mode(UHD_STATE_DISCONNECT);
		uhd_enable_connection_int();
		uhd_suspend_start = 0;
80005d14:	fe 6a 04 00 	mov	r10,-130048
		uhd_resume_start = 0;
80005d18:	91 09       	st.w	r8[0x0],r9
80005d1a:	74 08       	ld.w	r8,r10[0x0]
80005d1c:	a9 a8       	sbr	r8,0x8
80005d1e:	95 08       	st.w	r10[0x0],r8
80005d20:	e0 68 09 4c 	mov	r8,2380
80005d24:	30 09       	mov	r9,0
80005d26:	b0 89       	st.b	r8[0x0],r9
80005d28:	e0 68 09 4e 	mov	r8,2382
80005d2c:	b0 89       	st.b	r8[0x0],r9
80005d2e:	e0 a0 03 43 	rcall	800063b4 <uhc_notify_connection>
80005d32:	c5 88       	rjmp	80005de2 <otg_interrupt+0x69a>
80005d34:	fe 69 08 04 	mov	r9,-129020
		uhc_notify_connection(false);
		return;
	}
	if (Is_uhd_connection() && Is_uhd_connection_int_enabled()) {
80005d38:	72 08       	ld.w	r8,r9[0x0]
80005d3a:	ed b8 00 03 	bld	r8,0x3
80005d3e:	c0 81       	brne	80005d4e <otg_interrupt+0x606>
80005d40:	30 89       	mov	r9,8
80005d42:	fe 68 08 08 	mov	r8,-129016
80005d46:	91 09       	st.w	r8[0x0],r9
80005d48:	fe b0 ef 92 	rcall	80003c6c <usb_vbus_error>
80005d4c:	c4 b8       	rjmp	80005de2 <otg_interrupt+0x69a>
80005d4e:	72 08       	ld.w	r8,r9[0x0]
		uhd_ack_connection();
80005d50:	ed b8 00 0e 	bld	r8,0xe
80005d54:	cf d1       	brne	80005d4e <otg_interrupt+0x606>
80005d56:	fe 69 08 00 	mov	r9,-129024
		uhd_disable_connection_int();
80005d5a:	72 08       	ld.w	r8,r9[0x0]
80005d5c:	af c8       	cbr	r8,0xe
		uhd_enable_disconnection_int();
80005d5e:	93 08       	st.w	r9[0x0],r8
80005d60:	fe 68 04 10 	mov	r8,-130032
		uhd_enable_sof();
80005d64:	70 08       	ld.w	r8,r8[0x0]
80005d66:	ed b8 00 06 	bld	r8,0x6
80005d6a:	c2 51       	brne	80005db4 <otg_interrupt+0x66c>
80005d6c:	fe 68 04 04 	mov	r8,-130044
		uhd_sleep_mode(UHD_STATE_IDLE);
		uhd_suspend_start = 0;
80005d70:	70 09       	ld.w	r9,r8[0x0]
80005d72:	ed b9 00 06 	bld	r9,0x6
		uhd_resume_start = 0;
80005d76:	c0 90       	breq	80005d88 <otg_interrupt+0x640>
80005d78:	70 09       	ld.w	r9,r8[0x0]
		uhc_notify_connection(true);
80005d7a:	ed b9 00 03 	bld	r9,0x3
80005d7e:	c0 50       	breq	80005d88 <otg_interrupt+0x640>
		return;
	}

	// Manage Vbus error
	if (Is_uhd_vbus_error_interrupt()) {
80005d80:	70 08       	ld.w	r8,r8[0x0]
80005d82:	ed b8 00 04 	bld	r8,0x4
80005d86:	c1 71       	brne	80005db4 <otg_interrupt+0x66c>
80005d88:	35 89       	mov	r9,88
80005d8a:	fe 68 00 00 	mov	r8,-131072
		uhd_ack_vbus_error_interrupt();
80005d8e:	f1 49 04 14 	st.w	r8[1044],r9
80005d92:	fe 6a 04 00 	mov	r10,-130048
		UHC_VBUS_ERROR();
80005d96:	74 08       	ld.w	r8,r10[0x0]
80005d98:	a9 a8       	sbr	r8,0x8
		return;
	}

	// Check USB clock ready after asynchronous interrupt
	while (!Is_otg_clock_usable());
80005d9a:	95 08       	st.w	r10[0x0],r8
80005d9c:	fe 69 04 04 	mov	r9,-130044
80005da0:	72 08       	ld.w	r8,r9[0x0]
	otg_unfreeze_clock();
80005da2:	ed b8 00 03 	bld	r8,0x3
80005da6:	c0 20       	breq	80005daa <otg_interrupt+0x662>
80005da8:	72 08       	ld.w	r8,r9[0x0]
80005daa:	33 29       	mov	r9,50

	if (Is_uhd_wakeup_interrupt_enabled() && (Is_uhd_wakeup() ||
80005dac:	e0 68 09 4e 	mov	r8,2382
80005db0:	b0 89       	st.b	r8[0x0],r9
80005db2:	c1 88       	rjmp	80005de2 <otg_interrupt+0x69a>
80005db4:	fe 69 08 04 	mov	r9,-129020
80005db8:	72 08       	ld.w	r8,r9[0x0]
80005dba:	ed b8 00 01 	bld	r8,0x1
80005dbe:	c1 21       	brne	80005de2 <otg_interrupt+0x69a>
80005dc0:	30 2a       	mov	r10,2
80005dc2:	fe 68 08 08 	mov	r8,-129016
80005dc6:	91 0a       	st.w	r8[0x0],r10
80005dc8:	72 0c       	ld.w	r12,r9[0x0]
80005dca:	e2 1c 08 00 	andl	r12,0x800,COH
80005dce:	c0 30       	breq	80005dd4 <otg_interrupt+0x68c>
80005dd0:	30 1c       	mov	r12,1
80005dd2:	c0 68       	rjmp	80005dde <otg_interrupt+0x696>
			Is_uhd_downstream_resume() || Is_uhd_upstream_resume())) {
		// Disable wakeup/resumes interrupts
		AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_HWUPIEC_MASK
80005dd4:	fe 69 08 00 	mov	r9,-129024
80005dd8:	72 08       	ld.w	r8,r9[0x0]
80005dda:	af a8       	sbr	r8,0xe
80005ddc:	93 08       	st.w	r9[0x0],r8
				| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
				| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
		uhd_enable_sof();
80005dde:	fe b0 ef 46 	rcall	80003c6a <usb_vbus_change>
80005de2:	fe 68 00 00 	mov	r8,-131072
80005de6:	f0 f8 08 18 	ld.w	r8,r8[2072]
		if ((!Is_uhd_downstream_resume())
80005dea:	d4 32       	popm	r0-r7,lr
80005dec:	d6 03       	rete
80005dee:	d7 03       	nop

80005df0 <print_hex>:
  print(usart, tmp);
}


void print_hex(volatile avr32_usart_t *usart, unsigned long n)
{
80005df0:	d4 01       	pushm	lr
80005df2:	20 3d       	sub	sp,12
  char tmp[9];
  int i;

  // Convert the given number to an ASCII hexadecimal representation.
  tmp[8] = '\0';
80005df4:	30 08       	mov	r8,0
  // Transmit the resulting string with the given USART.
  print(usart, tmp);
}


void print_hex(volatile avr32_usart_t *usart, unsigned long n)
80005df6:	fa ca 00 01 	sub	r10,sp,1
{
  char tmp[9];
  int i;

  // Convert the given number to an ASCII hexadecimal representation.
  tmp[8] = '\0';
80005dfa:	fb 68 00 08 	st.b	sp[8],r8
  for (i = 7; i >= 0; i--)
  {
    tmp[i] = HEX_DIGITS[n & 0xF];
80005dfe:	fe c9 e5 2a 	sub	r9,pc,-6870
{
  char tmp[9];
  int i;

  // Convert the given number to an ASCII hexadecimal representation.
  tmp[8] = '\0';
80005e02:	fa c8 ff f9 	sub	r8,sp,-7
  for (i = 7; i >= 0; i--)
  {
    tmp[i] = HEX_DIGITS[n & 0xF];
80005e06:	fd db c0 04 	bfextu	lr,r11,0x0,0x4
80005e0a:	f2 0e 07 0e 	ld.ub	lr,r9[lr]
    n >>= 4;
80005e0e:	b0 8e       	st.b	r8[0x0],lr
80005e10:	a5 8b       	lsr	r11,0x4
  char tmp[9];
  int i;

  // Convert the given number to an ASCII hexadecimal representation.
  tmp[8] = '\0';
  for (i = 7; i >= 0; i--)
80005e12:	20 18       	sub	r8,1
80005e14:	14 38       	cp.w	r8,r10


void print(volatile avr32_usart_t *usart, const char *str)
{
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
80005e16:	cf 81       	brne	80005e06 <print_hex+0x16>
80005e18:	1a 9b       	mov	r11,sp
80005e1a:	fe b0 f6 53 	rcall	80004ac0 <usart_write_line>
    n >>= 4;
  }

  // Transmit the resulting string with the given USART.
  print(usart, tmp);
}
80005e1e:	2f dd       	sub	sp,-12
80005e20:	d8 02       	popm	pc
80005e22:	d7 03       	nop

80005e24 <print_dbg_hex>:
80005e24:	d4 01       	pushm	lr
80005e26:	18 9b       	mov	r11,r12


void print_dbg_hex(unsigned long n)
{
  // Redirection to the debug USART.
  print_hex(DBG_USART, n);
80005e28:	fe 7c 18 00 	mov	r12,-59392
80005e2c:	ce 2f       	rcall	80005df0 <print_hex>
80005e2e:	d8 02       	popm	pc

80005e30 <print_ulong>:
}
80005e30:	d4 21       	pushm	r4-r7,lr
80005e32:	20 3d       	sub	sp,12
80005e34:	30 08       	mov	r8,0
80005e36:	1a 99       	mov	r9,sp
{
  char tmp[11];
  int i = sizeof(tmp) - 1;

  // Convert the given number to an ASCII decimal representation.
  tmp[i] = '\0';
80005e38:	fb 68 00 0a 	st.b	sp[10],r8
80005e3c:	30 a8       	mov	r8,10
  do
  {
    tmp[--i] = '0' + n % 10;
80005e3e:	10 9a       	mov	r10,r8
80005e40:	f6 0a 0d 06 	divu	r6,r11,r10
80005e44:	20 18       	sub	r8,1
80005e46:	0e 9b       	mov	r11,r7
80005e48:	2d 0b       	sub	r11,-48
80005e4a:	f2 08 0b 0b 	st.b	r9[r8],r11
    n /= 10;
80005e4e:	0c 9b       	mov	r11,r6
  } while (n);
80005e50:	58 06       	cp.w	r6,0
80005e52:	cf 71       	brne	80005e40 <print_ulong+0x10>


void print(volatile avr32_usart_t *usart, const char *str)
{
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
80005e54:	f2 08 00 0b 	add	r11,r9,r8
80005e58:	fe b0 f6 34 	rcall	80004ac0 <usart_write_line>
    n /= 10;
  } while (n);

  // Transmit the resulting string with the given USART.
  print(usart, tmp + i);
}
80005e5c:	2f dd       	sub	sp,-12
80005e5e:	d8 22       	popm	r4-r7,pc

80005e60 <print_dbg_ulong>:
80005e60:	d4 01       	pushm	lr
80005e62:	18 9b       	mov	r11,r12


void print_dbg_ulong(unsigned long n)
{
  // Redirection to the debug USART.
  print_ulong(DBG_USART, n);
80005e64:	fe 7c 18 00 	mov	r12,-59392
80005e68:	ce 4f       	rcall	80005e30 <print_ulong>
80005e6a:	d8 02       	popm	pc

80005e6c <print_dbg>:
}
80005e6c:	d4 01       	pushm	lr
80005e6e:	18 9b       	mov	r11,r12
80005e70:	fe 7c 18 00 	mov	r12,-59392


void print(volatile avr32_usart_t *usart, const char *str)
{
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
80005e74:	fe b0 f6 26 	rcall	80004ac0 <usart_write_line>

void print_dbg(const char *str)
{
  // Redirection to the debug USART.
  print(DBG_USART, str);
}
80005e78:	d8 02       	popm	pc
80005e7a:	d7 03       	nop

80005e7c <init_dbg_rs232_ex>:
80005e7c:	d4 21       	pushm	r4-r7,lr
80005e7e:	20 3d       	sub	sp,12
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
80005e80:	30 08       	mov	r8,0
80005e82:	fb 68 00 08 	st.b	sp[8],r8
80005e86:	ba 38       	st.h	sp[0x6],r8
80005e88:	30 88       	mov	r8,8
80005e8a:	ba c8       	st.b	sp[0x4],r8
80005e8c:	30 48       	mov	r8,4
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
}


void init_dbg_rs232_ex(unsigned long baudrate, long pba_hz)
{
80005e8e:	16 97       	mov	r7,r11
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
80005e90:	50 0c       	stdsp	sp[0x0],r12

  // Setup GPIO for debug USART.
  gpio_enable_module(DBG_USART_GPIO_MAP,
80005e92:	30 2b       	mov	r11,2
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
80005e94:	ba d8       	st.b	sp[0x5],r8

  // Setup GPIO for debug USART.
  gpio_enable_module(DBG_USART_GPIO_MAP,
80005e96:	fe cc e5 d2 	sub	r12,pc,-6702
80005e9a:	fe b0 f3 29 	rcall	800044ec <gpio_enable_module>
                     sizeof(DBG_USART_GPIO_MAP) / sizeof(DBG_USART_GPIO_MAP[0]));

  // Initialize it in RS232 mode.
  usart_init_rs232(DBG_USART, &dbg_usart_options, pba_hz);
80005e9e:	0e 9a       	mov	r10,r7
80005ea0:	1a 9b       	mov	r11,sp
80005ea2:	fe 7c 18 00 	mov	r12,-59392
80005ea6:	fe b0 f6 35 	rcall	80004b10 <usart_init_rs232>
}
80005eaa:	2f dd       	sub	sp,-12
80005eac:	d8 22       	popm	r4-r7,pc
80005eae:	d7 03       	nop

80005eb0 <init_dbg_rs232>:
80005eb0:	d4 01       	pushm	lr
80005eb2:	18 9b       	mov	r11,r12
80005eb4:	e0 6c e1 00 	mov	r12,57600
static const char HEX_DIGITS[16] = "0123456789ABCDEF";


void init_dbg_rs232(long pba_hz)
{
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
80005eb8:	ce 2f       	rcall	80005e7c <init_dbg_rs232_ex>
80005eba:	d8 02       	popm	pc

80005ebc <uhc_enumeration_step2>:
 * \param callback Callback to call at the end of timeout
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
		uhc_sof_timeout_callback_t callback)
{
	uhc_sof_timeout_callback = callback;
80005ebc:	fe c9 ff 2c 	sub	r9,pc,-212
80005ec0:	e0 68 09 70 	mov	r8,2416
	uhc_sof_timeout = timeout;
80005ec4:	91 09       	st.w	r8[0x0],r9
80005ec6:	31 49       	mov	r9,20
 * Lets USB line in IDLE state during 20ms.
 */
static void uhc_enumeration_step2(void)
{
	uhc_enable_timeout_callback(20, uhc_enumeration_step3);
}
80005ec8:	e0 68 0d 4e 	mov	r8,3406
80005ecc:	b0 89       	st.b	r8[0x0],r9
80005ece:	5e fc       	retal	r12

80005ed0 <uhc_enumeration_step8>:
80005ed0:	fe c9 fd fc 	sub	r9,pc,-516
80005ed4:	e0 68 09 70 	mov	r8,2416
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
		uhc_sof_timeout_callback_t callback)
{
	uhc_sof_timeout_callback = callback;
	uhc_sof_timeout = timeout;
80005ed8:	91 09       	st.w	r8[0x0],r9
80005eda:	36 49       	mov	r9,100
 */
static void uhc_enumeration_step8(void)
{
	// Wait 100ms
	uhc_enable_timeout_callback(100, uhc_enumeration_step9);
}
80005edc:	e0 68 0d 4e 	mov	r8,3406
80005ee0:	b0 89       	st.b	r8[0x0],r9
80005ee2:	5e fc       	retal	r12

80005ee4 <uhc_notify_sof>:
80005ee4:	d4 21       	pushm	r4-r7,lr
80005ee6:	fe c8 e6 02 	sub	r8,pc,-6654
80005eea:	18 97       	mov	r7,r12

void uhc_notify_sof(bool b_micro)
{
	// Call all UHIs
	for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
		if (uhc_uhis[i].sof_notify != NULL) {
80005eec:	70 38       	ld.w	r8,r8[0xc]
80005eee:	58 08       	cp.w	r8,0
			uhc_uhis[i].sof_notify(b_micro);
80005ef0:	c0 20       	breq	80005ef4 <uhc_notify_sof+0x10>
		}
	}

	if (!b_micro) {
80005ef2:	5d 18       	icall	r8
80005ef4:	58 07       	cp.w	r7,0
		// Manage SOF timeout
		if (uhc_sof_timeout) {
80005ef6:	c0 e1       	brne	80005f12 <uhc_notify_sof+0x2e>
80005ef8:	e0 69 0d 4e 	mov	r9,3406
80005efc:	13 88       	ld.ub	r8,r9[0x0]
			if (--uhc_sof_timeout == 0) {
80005efe:	58 08       	cp.w	r8,0
80005f00:	c0 90       	breq	80005f12 <uhc_notify_sof+0x2e>
80005f02:	20 18       	sub	r8,1
80005f04:	5c 58       	castu.b	r8
				uhc_sof_timeout_callback();
80005f06:	b2 88       	st.b	r9[0x0],r8
80005f08:	c0 51       	brne	80005f12 <uhc_notify_sof+0x2e>
80005f0a:	e0 68 09 70 	mov	r8,2416
80005f0e:	70 08       	ld.w	r8,r8[0x0]
80005f10:	5d 18       	icall	r8
80005f12:	d8 22       	popm	r4-r7,pc

80005f14 <uhc_remotewakeup>:
80005f14:	d4 01       	pushm	lr
80005f16:	20 2d       	sub	sp,8
80005f18:	e0 68 09 50 	mov	r8,2384
	usb_setup_req_t req;
	uhc_device_t *dev;

	dev = &g_uhc_device_root;
	while(1) {
		if (dev->conf_desc->bmAttributes & USB_CONFIG_ATTR_REMOTE_WAKEUP) {
80005f1c:	70 68       	ld.w	r8,r8[0x18]
80005f1e:	11 f8       	ld.ub	r8,r8[0x7]
80005f20:	ed b8 00 05 	bld	r8,0x5
			if (b_enable) {
80005f24:	c1 b1       	brne	80005f5a <uhc_remotewakeup+0x46>
80005f26:	58 0c       	cp.w	r12,0
				req.bRequest = USB_REQ_SET_FEATURE;
80005f28:	c0 30       	breq	80005f2e <uhc_remotewakeup+0x1a>
80005f2a:	30 38       	mov	r8,3
			} else {
				req.bRequest = USB_REQ_CLEAR_FEATURE;
80005f2c:	c0 28       	rjmp	80005f30 <uhc_remotewakeup+0x1c>
80005f2e:	30 18       	mov	r8,1
			req.bmRequestType = USB_REQ_RECIP_DEVICE
					|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_OUT;
			req.wValue = USB_DEV_FEATURE_REMOTE_WAKEUP;
			req.wIndex = 0;
			req.wLength = 0;
			uhd_setup_request(dev->address,&req,NULL,0,NULL,NULL);
80005f30:	ba 98       	st.b	sp[0x1],r8
				req.bRequest = USB_REQ_CLEAR_FEATURE;
			}
			req.bmRequestType = USB_REQ_RECIP_DEVICE
					|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_OUT;
			req.wValue = USB_DEV_FEATURE_REMOTE_WAKEUP;
			req.wIndex = 0;
80005f32:	30 09       	mov	r9,0
			req.wLength = 0;
80005f34:	30 08       	mov	r8,0
				req.bRequest = USB_REQ_CLEAR_FEATURE;
			}
			req.bmRequestType = USB_REQ_RECIP_DEVICE
					|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_OUT;
			req.wValue = USB_DEV_FEATURE_REMOTE_WAKEUP;
			req.wIndex = 0;
80005f36:	ba 38       	st.h	sp[0x6],r8
			req.wLength = 0;
			uhd_setup_request(dev->address,&req,NULL,0,NULL,NULL);
80005f38:	ba 28       	st.h	sp[0x4],r8
80005f3a:	1a d9       	st.w	--sp,r9
			if (b_enable) {
				req.bRequest = USB_REQ_SET_FEATURE;
			} else {
				req.bRequest = USB_REQ_CLEAR_FEATURE;
			}
			req.bmRequestType = USB_REQ_RECIP_DEVICE
80005f3c:	12 98       	mov	r8,r9
					|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_OUT;
			req.wValue = USB_DEV_FEATURE_REMOTE_WAKEUP;
80005f3e:	ba c9       	st.b	sp[0x4],r9
80005f40:	30 19       	mov	r9,1
			req.wIndex = 0;
			req.wLength = 0;
			uhd_setup_request(dev->address,&req,NULL,0,NULL,NULL);
80005f42:	ba 39       	st.h	sp[0x6],r9
80005f44:	e0 69 09 50 	mov	r9,2384
80005f48:	fa cb ff fc 	sub	r11,sp,-4
80005f4c:	f3 3c 00 12 	ld.ub	r12,r9[18]
80005f50:	10 9a       	mov	r10,r8
80005f52:	10 99       	mov	r9,r8
80005f54:	fe b0 f9 74 	rcall	8000523c <uhd_setup_request>
		dev = dev->next;
#else
		break;
#endif
	}
}
80005f58:	2f fd       	sub	sp,-4
80005f5a:	2f ed       	sub	sp,-8
80005f5c:	d8 02       	popm	pc
80005f5e:	d7 03       	nop

80005f60 <uhc_stop>:
80005f60:	d4 01       	pushm	lr
80005f62:	fe b0 fb 13 	rcall	80005588 <uhd_disable>

void uhc_stop(bool b_id_stop)
{
	// Stop UHD
	uhd_disable(b_id_stop);
}
80005f66:	d8 02       	popm	pc

80005f68 <uhc_start>:
80005f68:	d4 01       	pushm	lr
80005f6a:	3f f9       	mov	r9,-1
 *
 * @{
 */
void uhc_start(void)
{
	g_uhc_device_root.address = UHC_USB_ADD_NOT_VALID;
80005f6c:	e0 68 09 50 	mov	r8,2384
80005f70:	f1 69 00 12 	st.b	r8[18],r9
	uhc_sof_timeout = 0; // No callback registered on a SOF timeout
80005f74:	30 09       	mov	r9,0
80005f76:	e0 68 0d 4e 	mov	r8,3406
	uhd_enable();
80005f7a:	b0 89       	st.b	r8[0x0],r9
}
80005f7c:	fe b0 fb 84 	rcall	80005684 <uhd_enable>
80005f80:	d8 02       	popm	pc
80005f82:	d7 03       	nop

80005f84 <uhc_notify_resume>:
80005f84:	d4 01       	pushm	lr
80005f86:	30 0c       	mov	r12,0
80005f88:	cc 6f       	rcall	80005f14 <uhc_remotewakeup>
80005f8a:	fe b0 ee 73 	rcall	80003c70 <usb_wakeup>
}

void uhc_notify_resume(void)
{
	uhc_remotewakeup(false);
	UHC_WAKEUP_EVENT();
80005f8e:	d8 02       	popm	pc

80005f90 <uhc_enumeration_step3>:
}
80005f90:	d4 01       	pushm	lr
80005f92:	fe cc ff ea 	sub	r12,pc,-22
80005f96:	fe b0 f6 2b 	rcall	80004bec <uhd_send_reset>
80005f9a:	d8 02       	popm	pc

80005f9c <uhc_enumeration_step7>:
 * Reset USB line.
 */
static void uhc_enumeration_step3(void)
{
	uhc_enumeration_reset(uhc_enumeration_step4);
}
80005f9c:	d4 01       	pushm	lr
80005f9e:	fe cc 00 ce 	sub	r12,pc,206
80005fa2:	fe b0 f6 25 	rcall	80004bec <uhd_send_reset>
 * Reset USB line.
 */
static void uhc_enumeration_step7(void)
{
	uhc_enumeration_reset(uhc_enumeration_step8);
}
80005fa6:	d8 02       	popm	pc

80005fa8 <uhc_enumeration_step4>:
80005fa8:	d4 01       	pushm	lr
80005faa:	fe b0 f6 13 	rcall	80004bd0 <uhd_get_speed>
80005fae:	e0 68 09 50 	mov	r8,2384
 * \brief Device enumeration step 4
 * Lets USB line in IDLE state during 100ms.
 */
static void uhc_enumeration_step4(void)
{
	uhc_dev_enum->speed = uhd_get_speed();
80005fb2:	fe c9 ff 7e 	sub	r9,pc,-130
 * \param callback Callback to call at the end of timeout
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
		uhc_sof_timeout_callback_t callback)
{
	uhc_sof_timeout_callback = callback;
80005fb6:	91 5c       	st.w	r8[0x14],r12
	uhc_sof_timeout = timeout;
80005fb8:	e0 68 09 70 	mov	r8,2416
80005fbc:	91 09       	st.w	r8[0x0],r9
 */
static void uhc_enumeration_step4(void)
{
	uhc_dev_enum->speed = uhd_get_speed();
	uhc_enable_timeout_callback(100, uhc_enumeration_step5);
}
80005fbe:	36 49       	mov	r9,100
80005fc0:	e0 68 0d 4e 	mov	r8,3406
80005fc4:	b0 89       	st.b	r8[0x0],r9
80005fc6:	d8 02       	popm	pc

80005fc8 <uhc_enumeration_error>:
80005fc8:	d4 21       	pushm	r4-r7,lr
80005fca:	18 95       	mov	r5,r12
80005fcc:	58 7c       	cp.w	r12,7
80005fce:	c0 61       	brne	80005fda <uhc_enumeration_error+0x12>
80005fd0:	30 09       	mov	r9,0
80005fd2:	e0 68 09 6c 	mov	r8,2412
 */
static void uhc_enumeration_error(uhc_enum_status_t status)
{
	if (status == UHC_ENUM_DISCONNECT) {
		uhc_enum_try = 0;
		return; // Abort enumeration process
80005fd6:	b0 89       	st.b	r8[0x0],r9
	}
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
80005fd8:	d8 22       	popm	r4-r7,pc
80005fda:	e0 67 09 50 	mov	r7,2384
80005fde:	e0 6b 00 ff 	mov	r11,255
80005fe2:	ef 3c 00 12 	ld.ub	r12,r7[18]

	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
80005fe6:	fe b0 f9 61 	rcall	800052a8 <uhd_ep_free>
80005fea:	6e 6c       	ld.w	r12,r7[0x18]
		free(uhc_dev_enum->conf_desc);
80005fec:	58 0c       	cp.w	r12,0
80005fee:	c0 50       	breq	80005ff8 <uhc_enumeration_error+0x30>
		uhc_dev_enum->conf_desc = NULL;
80005ff0:	e0 a0 04 48 	rcall	80006880 <free>
	}
	uhc_dev_enum->address = 0;
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80005ff4:	30 08       	mov	r8,0
	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
		free(uhc_dev_enum->conf_desc);
		uhc_dev_enum->conf_desc = NULL;
	}
	uhc_dev_enum->address = 0;
80005ff6:	8f 68       	st.w	r7[0x18],r8
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80005ff8:	e0 67 09 6c 	mov	r7,2412
80005ffc:	e0 64 09 50 	mov	r4,2384
	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
		free(uhc_dev_enum->conf_desc);
		uhc_dev_enum->conf_desc = NULL;
	}
	uhc_dev_enum->address = 0;
80006000:	0f 88       	ld.ub	r8,r7[0x0]
80006002:	30 06       	mov	r6,0
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80006004:	f0 c9 ff ff 	sub	r9,r8,-1
80006008:	e9 66 00 12 	st.b	r4[18],r6
8000600c:	ae 89       	st.b	r7[0x0],r9
8000600e:	30 39       	mov	r9,3
		// Device connected on USB hub
		uhi_hub_send_reset(uhc_dev_enum, callback);
	} else
#endif
	{
		uhd_send_reset(callback);
80006010:	f2 08 18 00 	cp.b	r8,r9
80006014:	e0 8b 00 07 	brhi	80006022 <uhc_enumeration_error+0x5a>
		uhi_hub_suspend(uhc_dev_enum);
	} else
#endif
	{
		// Suspend USB line
		uhd_suspend();
80006018:	fe cc 01 5c 	sub	r12,pc,348
		uhc_enumeration_step1();
		return;
	}
	// Abort enumeration, set line in suspend mode
	uhc_enumeration_suspend();
	UHC_ENUM_EVENT(uhc_dev_enum, status);
8000601c:	fe b0 f5 e8 	rcall	80004bec <uhd_send_reset>
80006020:	d8 22       	popm	r4-r7,pc
80006022:	fe b0 f5 ef 	rcall	80004c00 <uhd_suspend>
	uhc_enum_try = 0;
80006026:	0a 9b       	mov	r11,r5
80006028:	08 9c       	mov	r12,r4
8000602a:	fe b0 ee 25 	rcall	80003c74 <usb_enum>
8000602e:	ae 86       	st.b	r7[0x0],r6
80006030:	d8 22       	popm	r4-r7,pc
80006032:	d7 03       	nop

80006034 <uhc_enumeration_step5>:
80006034:	d4 01       	pushm	lr
80006036:	20 2d       	sub	sp,8
80006038:	38 08       	mov	r8,-128
8000603a:	ba 88       	st.b	sp[0x0],r8
8000603c:	30 68       	mov	r8,6
8000603e:	ba 98       	st.b	sp[0x1],r8
80006040:	e0 68 01 00 	mov	r8,256
80006044:	ba 18       	st.h	sp[0x2],r8
80006046:	30 08       	mov	r8,0
	usb_setup_req_t req;

	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
	req.wValue = (USB_DT_DEVICE << 8);
	req.wIndex = 0;
80006048:	ba 28       	st.h	sp[0x4],r8
	req.wLength = offsetof(uhc_device_t, dev_desc.bMaxPacketSize0)
8000604a:	30 88       	mov	r8,8
			+ sizeof(uhc_dev_enum->dev_desc.bMaxPacketSize0);

	// After a USB reset, the reallocation is required
	uhd_ep_free(0, 0);
8000604c:	30 0b       	mov	r11,0

	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
	req.wValue = (USB_DT_DEVICE << 8);
	req.wIndex = 0;
	req.wLength = offsetof(uhc_device_t, dev_desc.bMaxPacketSize0)
8000604e:	ba 38       	st.h	sp[0x6],r8
			+ sizeof(uhc_dev_enum->dev_desc.bMaxPacketSize0);

	// After a USB reset, the reallocation is required
	uhd_ep_free(0, 0);
80006050:	16 9c       	mov	r12,r11
80006052:	fe b0 f9 2b 	rcall	800052a8 <uhd_ep_free>
	if (!uhd_ep0_alloc(0, 64)) {
80006056:	34 0b       	mov	r11,64
80006058:	30 0c       	mov	r12,0
8000605a:	fe b0 fa 2e 	rcall	800054b6 <uhd_ep0_alloc>
8000605e:	c0 31       	brne	80006064 <uhc_enumeration_step5+0x30>
		uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
80006060:	30 4c       	mov	r12,4
80006062:	c1 18       	rjmp	80006084 <uhc_enumeration_step5+0x50>
		return;
	}
	if (!uhd_setup_request(0,
80006064:	fe c9 ff d8 	sub	r9,pc,-40
80006068:	30 08       	mov	r8,0
8000606a:	1a d9       	st.w	--sp,r9
8000606c:	e0 6a 09 50 	mov	r10,2384
80006070:	fa cb ff fc 	sub	r11,sp,-4
80006074:	31 29       	mov	r9,18
80006076:	10 9c       	mov	r12,r8
80006078:	fe b0 f8 e2 	rcall	8000523c <uhd_setup_request>
8000607c:	2f fd       	sub	sp,-4
			&req,
			(uint8_t*)&uhc_dev_enum->dev_desc,
			sizeof(usb_dev_desc_t),
			NULL,
			uhc_enumeration_step6)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
8000607e:	58 0c       	cp.w	r12,0
80006080:	c0 31       	brne	80006086 <uhc_enumeration_step5+0x52>
80006082:	30 6c       	mov	r12,6
		return;
	}
}
80006084:	ca 2f       	rcall	80005fc8 <uhc_enumeration_error>
80006086:	2f ed       	sub	sp,-8
80006088:	d8 02       	popm	pc
8000608a:	d7 03       	nop

8000608c <uhc_enumeration_step6>:
8000608c:	d4 01       	pushm	lr
8000608e:	30 79       	mov	r9,7
80006090:	58 0b       	cp.w	r11,0
80006092:	5f 18       	srne	r8
80006094:	f2 0a 19 00 	cp.h	r10,r9
80006098:	5f 89       	srls	r9
8000609a:	f3 e8 10 08 	or	r8,r9,r8
8000609e:	c0 91       	brne	800060b0 <uhc_enumeration_step6+0x24>
		usb_add_t add,
		uhd_trans_status_t status,
		uint16_t payload_trans)
{
	UNUSED(add);
	if ((status != UHD_TRANS_NOERROR) || (payload_trans < 8)
800060a0:	e0 68 09 50 	mov	r8,2384
800060a4:	11 99       	ld.ub	r9,r8[0x1]
800060a6:	30 18       	mov	r8,1
800060a8:	f0 09 18 00 	cp.b	r9,r8
800060ac:	c0 61       	brne	800060b8 <uhc_enumeration_step6+0x2c>
			|| (uhc_dev_enum->dev_desc.bDescriptorType != USB_DT_DEVICE)) {
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
800060ae:	c0 88       	rjmp	800060be <uhc_enumeration_step6+0x32>
800060b0:	58 1b       	cp.w	r11,1
800060b2:	c0 31       	brne	800060b8 <uhc_enumeration_step6+0x2c>
800060b4:	30 7c       	mov	r12,7
800060b6:	c0 28       	rjmp	800060ba <uhc_enumeration_step6+0x2e>
800060b8:	30 3c       	mov	r12,3
800060ba:	c8 7f       	rcall	80005fc8 <uhc_enumeration_error>
				UHC_ENUM_DISCONNECT:UHC_ENUM_FAIL);
		return;
800060bc:	d8 02       	popm	pc
 * \param callback Callback to call at the end of timeout
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
		uhc_sof_timeout_callback_t callback)
{
	uhc_sof_timeout_callback = callback;
800060be:	fe c9 01 22 	sub	r9,pc,290
800060c2:	e0 68 09 70 	mov	r8,2416
	uhc_sof_timeout = timeout;
800060c6:	91 09       	st.w	r8[0x0],r9
800060c8:	31 49       	mov	r9,20
800060ca:	e0 68 0d 4e 	mov	r8,3406
800060ce:	b0 89       	st.b	r8[0x0],r9
800060d0:	d8 02       	popm	pc
800060d2:	d7 03       	nop

800060d4 <uhc_enumeration_step9>:
800060d4:	d4 21       	pushm	r4-r7,lr
800060d6:	20 2d       	sub	sp,8
800060d8:	30 18       	mov	r8,1
800060da:	e0 67 09 50 	mov	r7,2384
800060de:	ba 18       	st.h	sp[0x2],r8
	}
	req.wValue = usb_addr_free;
	uhc_dev_enum->address = usb_addr_free;
#else
	req.wValue = UHC_DEVICE_ENUM_ADD;
	uhc_dev_enum->address = UHC_DEVICE_ENUM_ADD;
800060e0:	ef 68 00 12 	st.b	r7[18],r8
#endif
	req.wIndex = 0;
	req.wLength = 0;
800060e4:	30 08       	mov	r8,0
	uhc_dev_enum->address = usb_addr_free;
#else
	req.wValue = UHC_DEVICE_ENUM_ADD;
	uhc_dev_enum->address = UHC_DEVICE_ENUM_ADD;
#endif
	req.wIndex = 0;
800060e6:	ba 38       	st.h	sp[0x6],r8
 */
static void uhc_enumeration_step9(void)
{
	usb_setup_req_t req;

	req.bmRequestType = USB_REQ_RECIP_DEVICE
800060e8:	ba 28       	st.h	sp[0x4],r8
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_ADDRESS;
800060ea:	ba 88       	st.b	sp[0x0],r8
#endif
	req.wIndex = 0;
	req.wLength = 0;

	// After a USB reset, the reallocation is required
	uhd_ep_free(0, 0);
800060ec:	30 58       	mov	r8,5
{
	usb_setup_req_t req;

	req.bmRequestType = USB_REQ_RECIP_DEVICE
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_ADDRESS;
800060ee:	30 0b       	mov	r11,0
#endif
	req.wIndex = 0;
	req.wLength = 0;

	// After a USB reset, the reallocation is required
	uhd_ep_free(0, 0);
800060f0:	ba 98       	st.b	sp[0x1],r8
800060f2:	16 9c       	mov	r12,r11
800060f4:	fe b0 f8 da 	rcall	800052a8 <uhd_ep_free>
	if (!uhd_ep0_alloc(0, uhc_dev_enum->dev_desc.bMaxPacketSize0)) {
800060f8:	0f fb       	ld.ub	r11,r7[0x7]
800060fa:	30 0c       	mov	r12,0
800060fc:	fe b0 f9 dd 	rcall	800054b6 <uhd_ep0_alloc>
		uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
80006100:	c0 31       	brne	80006106 <uhc_enumeration_step9+0x32>
80006102:	30 4c       	mov	r12,4
		return;
	}

	if (!uhd_setup_request(0,
80006104:	c1 08       	rjmp	80006124 <uhc_enumeration_step9+0x50>
80006106:	fe c9 ff da 	sub	r9,pc,-38
8000610a:	30 08       	mov	r8,0
8000610c:	1a d9       	st.w	--sp,r9
8000610e:	0e 9a       	mov	r10,r7
80006110:	fa cb ff fc 	sub	r11,sp,-4
80006114:	31 29       	mov	r9,18
80006116:	10 9c       	mov	r12,r8
80006118:	fe b0 f8 92 	rcall	8000523c <uhd_setup_request>
8000611c:	2f fd       	sub	sp,-4
			&req,
			(uint8_t*)&uhc_dev_enum->dev_desc,
			sizeof(usb_dev_desc_t),
			NULL,
			uhc_enumeration_step10)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
8000611e:	58 0c       	cp.w	r12,0
80006120:	c0 31       	brne	80006126 <uhc_enumeration_step9+0x52>
80006122:	30 6c       	mov	r12,6
		return;
	}
}
80006124:	c5 2f       	rcall	80005fc8 <uhc_enumeration_error>
80006126:	2f ed       	sub	sp,-8
80006128:	d8 22       	popm	r4-r7,pc
8000612a:	d7 03       	nop

8000612c <uhc_enumeration_step10>:
8000612c:	d4 01       	pushm	lr
8000612e:	58 0b       	cp.w	r11,0
80006130:	c0 80       	breq	80006140 <uhc_enumeration_step10+0x14>
80006132:	58 1b       	cp.w	r11,1
80006134:	f9 bc 00 07 	moveq	r12,7
80006138:	f9 bc 01 03 	movne	r12,3
8000613c:	c4 6f       	rcall	80005fc8 <uhc_enumeration_error>
8000613e:	d8 02       	popm	pc
	UNUSED(add);
	UNUSED(payload_trans);
	if (status != UHD_TRANS_NOERROR) {
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT) ?
				UHC_ENUM_DISCONNECT : UHC_ENUM_FAIL);
		return;
80006140:	fe c9 ff ec 	sub	r9,pc,-20
 * \param callback Callback to call at the end of timeout
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
		uhc_sof_timeout_callback_t callback)
{
	uhc_sof_timeout_callback = callback;
80006144:	e0 68 09 70 	mov	r8,2416
	uhc_sof_timeout = timeout;
80006148:	91 09       	st.w	r8[0x0],r9
8000614a:	31 49       	mov	r9,20
8000614c:	e0 68 0d 4e 	mov	r8,3406
80006150:	b0 89       	st.b	r8[0x0],r9
80006152:	d8 02       	popm	pc

80006154 <uhc_enumeration_step11>:
80006154:	d4 21       	pushm	r4-r7,lr
80006156:	20 2d       	sub	sp,8
80006158:	30 0b       	mov	r11,0
8000615a:	16 9c       	mov	r12,r11
8000615c:	fe b0 f8 a6 	rcall	800052a8 <uhd_ep_free>

	// Free address 0 used to start enumeration
	uhd_ep_free(0, 0);

	// Alloc control endpoint with the new USB address
	if (!uhd_ep0_alloc(UHC_DEVICE_ENUM_ADD,
80006160:	30 1c       	mov	r12,1
80006162:	e0 67 09 50 	mov	r7,2384
80006166:	0f fb       	ld.ub	r11,r7[0x7]
80006168:	fe b0 f9 a7 	rcall	800054b6 <uhd_ep0_alloc>
			uhc_dev_enum->dev_desc.bMaxPacketSize0)) {
		uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
8000616c:	c0 31       	brne	80006172 <uhc_enumeration_step11+0x1e>
8000616e:	30 4c       	mov	r12,4
		return;
	}
	// Send USB device descriptor request
	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
80006170:	c1 b8       	rjmp	800061a6 <uhc_enumeration_step11+0x52>
80006172:	38 08       	mov	r8,-128
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
80006174:	ba 88       	st.b	sp[0x0],r8
80006176:	30 68       	mov	r8,6
	req.wValue = (USB_DT_DEVICE << 8);
80006178:	ba 98       	st.b	sp[0x1],r8
8000617a:	e0 68 01 00 	mov	r8,256
	req.wIndex = 0;
8000617e:	ba 18       	st.h	sp[0x2],r8
80006180:	30 08       	mov	r8,0
	req.wLength = sizeof(usb_dev_desc_t);
80006182:	ba 28       	st.h	sp[0x4],r8
80006184:	31 28       	mov	r8,18
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
80006186:	ba 38       	st.h	sp[0x6],r8
80006188:	fe c8 ff dc 	sub	r8,pc,-36
8000618c:	0e 9a       	mov	r10,r7
8000618e:	1a d8       	st.w	--sp,r8
80006190:	31 29       	mov	r9,18
80006192:	fa cb ff fc 	sub	r11,sp,-4
80006196:	30 08       	mov	r8,0
80006198:	30 1c       	mov	r12,1
8000619a:	fe b0 f8 51 	rcall	8000523c <uhd_setup_request>
8000619e:	2f fd       	sub	sp,-4
			&req,
			(uint8_t *) & uhc_dev_enum->dev_desc,
			sizeof(usb_dev_desc_t),
			NULL, uhc_enumeration_step12)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
800061a0:	58 0c       	cp.w	r12,0
800061a2:	c0 31       	brne	800061a8 <uhc_enumeration_step11+0x54>
800061a4:	30 6c       	mov	r12,6
		return;
	}
}
800061a6:	c1 1f       	rcall	80005fc8 <uhc_enumeration_error>
800061a8:	2f ed       	sub	sp,-8
800061aa:	d8 22       	popm	r4-r7,pc

800061ac <uhc_enumeration_step12>:
800061ac:	d4 21       	pushm	r4-r7,lr
800061ae:	20 2d       	sub	sp,8
800061b0:	31 29       	mov	r9,18
800061b2:	58 0b       	cp.w	r11,0
800061b4:	5f 18       	srne	r8
800061b6:	f2 0a 19 00 	cp.h	r10,r9
800061ba:	5f 19       	srne	r9
800061bc:	f3 e8 10 08 	or	r8,r9,r8
800061c0:	c0 91       	brne	800061d2 <uhc_enumeration_step12+0x26>
800061c2:	e0 67 09 50 	mov	r7,2384
{
	usb_setup_req_t req;
	uint8_t conf_num;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_dev_desc_t))
800061c6:	30 18       	mov	r8,1
800061c8:	0f 99       	ld.ub	r9,r7[0x1]
800061ca:	f0 09 18 00 	cp.b	r9,r8
800061ce:	c0 61       	brne	800061da <uhc_enumeration_step12+0x2e>
			|| (uhc_dev_enum->dev_desc.bDescriptorType != USB_DT_DEVICE)) {
		uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
800061d0:	c0 78       	rjmp	800061de <uhc_enumeration_step12+0x32>
800061d2:	58 1b       	cp.w	r11,1
800061d4:	c0 31       	brne	800061da <uhc_enumeration_step12+0x2e>
800061d6:	30 7c       	mov	r12,7
800061d8:	c2 28       	rjmp	8000621c <uhc_enumeration_step12+0x70>
800061da:	30 3c       	mov	r12,3
		conf_num = UHC_DEVICE_CONF(uhc_dev_enum);
	} else {
		conf_num = 1;
	}

	uhc_dev_enum->conf_desc = malloc(sizeof(usb_conf_desc_t));
800061dc:	c2 08       	rjmp	8000621c <uhc_enumeration_step12+0x70>
800061de:	30 9c       	mov	r12,9
800061e0:	e0 a0 03 58 	rcall	80006890 <malloc>
800061e4:	8f 6c       	st.w	r7[0x18],r12
	if (uhc_dev_enum->conf_desc == NULL) {
800061e6:	18 9a       	mov	r10,r12
		Assert(false);
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
	// Send USB device descriptor request
	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
800061e8:	c1 90       	breq	8000621a <uhc_enumeration_step12+0x6e>
800061ea:	38 08       	mov	r8,-128
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
800061ec:	ba 88       	st.b	sp[0x0],r8
800061ee:	30 68       	mov	r8,6
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
800061f0:	ba 98       	st.b	sp[0x1],r8
800061f2:	e0 68 02 00 	mov	r8,512
	req.wIndex = 0;
800061f6:	ba 18       	st.h	sp[0x2],r8
800061f8:	30 08       	mov	r8,0
	req.wLength = sizeof(usb_conf_desc_t);
800061fa:	ba 28       	st.h	sp[0x4],r8
800061fc:	30 98       	mov	r8,9
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
800061fe:	ba 38       	st.h	sp[0x6],r8
80006200:	fe c8 ff dc 	sub	r8,pc,-36
80006204:	30 99       	mov	r9,9
80006206:	1a d8       	st.w	--sp,r8
80006208:	30 1c       	mov	r12,1
8000620a:	fa cb ff fc 	sub	r11,sp,-4
8000620e:	30 08       	mov	r8,0
80006210:	fe b0 f8 16 	rcall	8000523c <uhd_setup_request>
80006214:	2f fd       	sub	sp,-4
			&req,
			(uint8_t *) uhc_dev_enum->conf_desc,
			sizeof(usb_conf_desc_t),
			NULL, uhc_enumeration_step13)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
80006216:	58 0c       	cp.w	r12,0
80006218:	c0 31       	brne	8000621e <uhc_enumeration_step12+0x72>
8000621a:	30 6c       	mov	r12,6
		return;
	}
}
8000621c:	cd 6e       	rcall	80005fc8 <uhc_enumeration_error>
8000621e:	2f ed       	sub	sp,-8
80006220:	d8 22       	popm	r4-r7,pc
80006222:	d7 03       	nop

80006224 <uhc_enumeration_step13>:
80006224:	d4 21       	pushm	r4-r7,lr
80006226:	20 2d       	sub	sp,8
80006228:	30 99       	mov	r9,9
8000622a:	58 0b       	cp.w	r11,0
8000622c:	5f 18       	srne	r8
8000622e:	f2 0a 19 00 	cp.h	r10,r9
80006232:	5f 19       	srne	r9
	uint16_t conf_size;
	uint16_t bus_power = 0;
	usb_setup_req_t req;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_conf_desc_t))
80006234:	f3 e8 10 08 	or	r8,r9,r8
80006238:	c0 a1       	brne	8000624c <uhc_enumeration_step13+0x28>
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)) {
8000623a:	e0 65 09 50 	mov	r5,2384
8000623e:	30 29       	mov	r9,2
	uint16_t conf_size;
	uint16_t bus_power = 0;
	usb_setup_req_t req;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_conf_desc_t))
80006240:	6a 68       	ld.w	r8,r5[0x18]
80006242:	11 9a       	ld.ub	r10,r8[0x1]
80006244:	f2 0a 18 00 	cp.b	r10,r9
80006248:	c0 61       	brne	80006254 <uhc_enumeration_step13+0x30>
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)) {
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
8000624a:	c0 78       	rjmp	80006258 <uhc_enumeration_step13+0x34>
8000624c:	58 1b       	cp.w	r11,1
8000624e:	c0 31       	brne	80006254 <uhc_enumeration_step13+0x30>
80006250:	30 7c       	mov	r12,7
80006252:	c3 08       	rjmp	800062b2 <uhc_enumeration_step13+0x8e>
80006254:	30 3c       	mov	r12,3
	uhc_dev_enum->power = bus_power;
	uhc_power_running += bus_power;
#endif

	// Save information about USB configuration descriptor size
	conf_size = le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength);
80006256:	c2 e8       	rjmp	800062b2 <uhc_enumeration_step13+0x8e>
	conf_num = uhc_dev_enum->conf_desc->bConfigurationValue;
	Assert(conf_num);
	// Re alloc USB configuration descriptor
	free(uhc_dev_enum->conf_desc);
80006258:	11 b9       	ld.ub	r9,r8[0x3]
	uhc_dev_enum->power = bus_power;
	uhc_power_running += bus_power;
#endif

	// Save information about USB configuration descriptor size
	conf_size = le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength);
8000625a:	10 9c       	mov	r12,r8
	conf_num = uhc_dev_enum->conf_desc->bConfigurationValue;
8000625c:	11 a6       	ld.ub	r6,r8[0x2]
	uhc_dev_enum->power = bus_power;
	uhc_power_running += bus_power;
#endif

	// Save information about USB configuration descriptor size
	conf_size = le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength);
8000625e:	11 d4       	ld.ub	r4,r8[0x5]
80006260:	f3 e6 10 86 	or	r6,r9,r6<<0x8
80006264:	ec 08 16 08 	lsr	r8,r6,0x8
80006268:	f1 e6 10 86 	or	r6,r8,r6<<0x8
	conf_num = uhc_dev_enum->conf_desc->bConfigurationValue;
	Assert(conf_num);
	// Re alloc USB configuration descriptor
	free(uhc_dev_enum->conf_desc);
8000626c:	e0 a0 03 0a 	rcall	80006880 <free>
	uhc_dev_enum->conf_desc = malloc(conf_size);
80006270:	5c 86       	casts.h	r6
80006272:	ef d6 c0 10 	bfextu	r7,r6,0x0,0x10
80006276:	0e 9c       	mov	r12,r7
80006278:	e0 a0 03 0c 	rcall	80006890 <malloc>
8000627c:	8b 6c       	st.w	r5[0x18],r12
	if (uhc_dev_enum->conf_desc == NULL) {
8000627e:	18 9a       	mov	r10,r12
		Assert(false);
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
	// Send USB device descriptor request
	req.bmRequestType =
80006280:	c1 80       	breq	800062b0 <uhc_enumeration_step13+0x8c>
80006282:	38 08       	mov	r8,-128
			USB_REQ_RECIP_DEVICE | USB_REQ_TYPE_STANDARD |
			USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
80006284:	ba 88       	st.b	sp[0x0],r8
80006286:	30 68       	mov	r8,6
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
	req.wIndex = 0;
80006288:	ba 98       	st.b	sp[0x1],r8
8000628a:	30 08       	mov	r8,0
	req.wLength = conf_size;
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
8000628c:	ba 28       	st.h	sp[0x4],r8
			USB_REQ_RECIP_DEVICE | USB_REQ_TYPE_STANDARD |
			USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
	req.wIndex = 0;
	req.wLength = conf_size;
8000628e:	fe c8 ff d6 	sub	r8,pc,-42
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
80006292:	ba 36       	st.h	sp[0x6],r6
	// Send USB device descriptor request
	req.bmRequestType =
			USB_REQ_RECIP_DEVICE | USB_REQ_TYPE_STANDARD |
			USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
80006294:	20 14       	sub	r4,1
	req.wIndex = 0;
	req.wLength = conf_size;
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
80006296:	0e 99       	mov	r9,r7
	// Send USB device descriptor request
	req.bmRequestType =
			USB_REQ_RECIP_DEVICE | USB_REQ_TYPE_STANDARD |
			USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
80006298:	a9 b4       	sbr	r4,0x9
	req.wIndex = 0;
	req.wLength = conf_size;
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
8000629a:	30 1c       	mov	r12,1
8000629c:	ba 14       	st.h	sp[0x2],r4
8000629e:	1a d8       	st.w	--sp,r8
800062a0:	30 08       	mov	r8,0
800062a2:	fa cb ff fc 	sub	r11,sp,-4
800062a6:	fe b0 f7 cb 	rcall	8000523c <uhd_setup_request>
800062aa:	2f fd       	sub	sp,-4
			&req,
			(uint8_t *) uhc_dev_enum->conf_desc,
			conf_size,
			NULL, uhc_enumeration_step14)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
800062ac:	58 0c       	cp.w	r12,0
800062ae:	c0 31       	brne	800062b4 <uhc_enumeration_step13+0x90>
800062b0:	30 6c       	mov	r12,6
		return;
	}
}
800062b2:	c8 be       	rcall	80005fc8 <uhc_enumeration_error>
800062b4:	2f ed       	sub	sp,-8
800062b6:	d8 22       	popm	r4-r7,pc

800062b8 <uhc_enumeration_step14>:
800062b8:	d4 21       	pushm	r4-r7,lr
800062ba:	20 2d       	sub	sp,8
800062bc:	30 89       	mov	r9,8
800062be:	58 0b       	cp.w	r11,0
800062c0:	5f 18       	srne	r8
800062c2:	f2 0a 19 00 	cp.h	r10,r9
800062c6:	5f 89       	srls	r9
800062c8:	f3 e8 10 08 	or	r8,r9,r8
800062cc:	c1 e1       	brne	80006308 <uhc_enumeration_step14+0x50>
800062ce:	e0 67 09 50 	mov	r7,2384
	bool b_conf_supported = false;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR)
			|| (payload_trans < sizeof(usb_conf_desc_t))
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)
800062d2:	30 29       	mov	r9,2
{
	usb_setup_req_t req;
	bool b_conf_supported = false;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR)
800062d4:	6e 68       	ld.w	r8,r7[0x18]
800062d6:	11 9b       	ld.ub	r11,r8[0x1]
800062d8:	f2 0b 18 00 	cp.b	r11,r9
			|| (payload_trans < sizeof(usb_conf_desc_t))
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)
			|| (payload_trans != le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength))) {
800062dc:	c1 a1       	brne	80006310 <uhc_enumeration_step14+0x58>
800062de:	11 b9       	ld.ub	r9,r8[0x3]
{
	usb_setup_req_t req;
	bool b_conf_supported = false;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR)
800062e0:	11 a8       	ld.ub	r8,r8[0x2]
800062e2:	f3 e8 10 88 	or	r8,r9,r8<<0x8
800062e6:	f0 09 16 08 	lsr	r9,r8,0x8
800062ea:	f3 e8 10 88 	or	r8,r9,r8<<0x8
800062ee:	f0 0a 19 00 	cp.h	r10,r8
				UHC_ENUM_DISCONNECT:UHC_ENUM_FAIL);
		return;
	}
	// Check if unless one USB interface is supported by UHIs
	for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
		switch (uhc_uhis[i].install(uhc_dev_enum)) {
800062f2:	c0 f1       	brne	80006310 <uhc_enumeration_step14+0x58>
800062f4:	0e 9c       	mov	r12,r7
800062f6:	fe c8 ea 12 	sub	r8,pc,-5614
800062fa:	70 08       	ld.w	r8,r8[0x0]
800062fc:	5d 18       	icall	r8
800062fe:	18 9b       	mov	r11,r12
80006300:	c1 80       	breq	80006330 <uhc_enumeration_step14+0x78>
80006302:	58 1c       	cp.w	r12,1

	if ((status != UHD_TRANS_NOERROR)
			|| (payload_trans < sizeof(usb_conf_desc_t))
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)
			|| (payload_trans != le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength))) {
		uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
80006304:	c0 81       	brne	80006314 <uhc_enumeration_step14+0x5c>
80006306:	c0 f8       	rjmp	80006324 <uhc_enumeration_step14+0x6c>
80006308:	58 1b       	cp.w	r11,1
8000630a:	c0 31       	brne	80006310 <uhc_enumeration_step14+0x58>
8000630c:	30 7c       	mov	r12,7
8000630e:	c2 88       	rjmp	8000635e <uhc_enumeration_step14+0xa6>
			break;

		default:
			// USB host hardware limitation
			// Free all endpoints
			uhd_ep_free(UHC_DEVICE_ENUM_ADD,0xFF);
80006310:	30 3c       	mov	r12,3
80006312:	c2 68       	rjmp	8000635e <uhc_enumeration_step14+0xa6>
80006314:	e0 6b 00 ff 	mov	r11,255
80006318:	30 1c       	mov	r12,1
			UHC_ENUM_EVENT(uhc_dev_enum,UHC_ENUM_HARDWARE_LIMIT);
8000631a:	fe b0 f7 c7 	rcall	800052a8 <uhd_ep_free>
8000631e:	0e 9c       	mov	r12,r7
			return;
		}
	}
	if (!b_conf_supported) {
		// No USB interface supported
		UHC_ENUM_EVENT(uhc_dev_enum, UHC_ENUM_UNSUPPORTED);
80006320:	30 4b       	mov	r11,4
80006322:	c0 28       	rjmp	80006326 <uhc_enumeration_step14+0x6e>
80006324:	0e 9c       	mov	r12,r7
		uhi_hub_suspend(uhc_dev_enum);
	} else
#endif
	{
		// Suspend USB line
		uhd_suspend();
80006326:	fe b0 ec a7 	rcall	80003c74 <usb_enum>
8000632a:	fe b0 f4 6b 	rcall	80004c00 <uhd_suspend>
	}
	// Enable device configuration
	req.bmRequestType = USB_REQ_RECIP_DEVICE
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_CONFIGURATION;
	req.wValue = uhc_dev_enum->conf_desc->bConfigurationValue;
8000632e:	c1 98       	rjmp	80006360 <uhc_enumeration_step14+0xa8>
		return;
	}
	// Enable device configuration
	req.bmRequestType = USB_REQ_RECIP_DEVICE
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_CONFIGURATION;
80006330:	ba 8c       	st.b	sp[0x0],r12
80006332:	6e 69       	ld.w	r9,r7[0x18]
	req.wValue = uhc_dev_enum->conf_desc->bConfigurationValue;
80006334:	30 9a       	mov	r10,9
80006336:	ba 9a       	st.b	sp[0x1],r10
	req.wIndex = 0;
	req.wLength = 0;
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
80006338:	13 d9       	ld.ub	r9,r9[0x5]
	// Enable device configuration
	req.bmRequestType = USB_REQ_RECIP_DEVICE
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_CONFIGURATION;
	req.wValue = uhc_dev_enum->conf_desc->bConfigurationValue;
	req.wIndex = 0;
8000633a:	ba 19       	st.h	sp[0x2],r9
	req.wLength = 0;
8000633c:	fe c9 ff d8 	sub	r9,pc,-40
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
80006340:	ba 2c       	st.h	sp[0x4],r12
80006342:	ba 3c       	st.h	sp[0x6],r12
80006344:	18 98       	mov	r8,r12
80006346:	1a d9       	st.w	--sp,r9
80006348:	18 9a       	mov	r10,r12
8000634a:	18 99       	mov	r9,r12
8000634c:	fa cb ff fc 	sub	r11,sp,-4
80006350:	30 1c       	mov	r12,1
80006352:	fe b0 f7 75 	rcall	8000523c <uhd_setup_request>
			&req,
			NULL,
			0,
			NULL, uhc_enumeration_step15)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
80006356:	2f fd       	sub	sp,-4
80006358:	58 0c       	cp.w	r12,0
8000635a:	c0 31       	brne	80006360 <uhc_enumeration_step14+0xa8>
		return;
	}
}
8000635c:	30 6c       	mov	r12,6
8000635e:	c3 5e       	rcall	80005fc8 <uhc_enumeration_error>
80006360:	2f ed       	sub	sp,-8
80006362:	d8 22       	popm	r4-r7,pc

80006364 <uhc_enumeration_step15>:
80006364:	d4 21       	pushm	r4-r7,lr
80006366:	30 08       	mov	r8,0
80006368:	58 0b       	cp.w	r11,0
8000636a:	5f 19       	srne	r9
8000636c:	f0 0a 19 00 	cp.h	r10,r8
80006370:	5f 16       	srne	r6
80006372:	16 97       	mov	r7,r11
80006374:	12 46       	or	r6,r9
80006376:	10 99       	mov	r9,r8
80006378:	fe c8 ea 94 	sub	r8,pc,-5484
8000637c:	f2 06 18 00 	cp.b	r6,r9
		return;
	}

	// Enable all UHIs supported
	for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
		uhc_uhis[i].enable(uhc_dev_enum);
80006380:	c0 e1       	brne	8000639c <uhc_enumeration_step15+0x38>
80006382:	70 18       	ld.w	r8,r8[0x4]
80006384:	e0 6c 09 50 	mov	r12,2384
	uhc_dev_enum->lpm_desc = NULL;
#endif

	uhc_enum_try = 0;

	UHC_ENUM_EVENT(uhc_dev_enum, UHC_ENUM_SUCCESS);
80006388:	5d 18       	icall	r8
		return;
	}
	uhc_dev_enum->lpm_desc = NULL;
#endif

	uhc_enum_try = 0;
8000638a:	e0 68 09 6c 	mov	r8,2412

	UHC_ENUM_EVENT(uhc_dev_enum, UHC_ENUM_SUCCESS);
8000638e:	30 0b       	mov	r11,0
80006390:	b0 86       	st.b	r8[0x0],r6
80006392:	e0 6c 09 50 	mov	r12,2384
		uint16_t payload_trans)
{
	UNUSED(add);
	if ((status!=UHD_TRANS_NOERROR) || (payload_trans!=0)) {
		for(uint8_t i = 0; i < UHC_NB_UHI; i++) {
			uhc_uhis[i].uninstall(uhc_dev_enum);
80006396:	fe b0 ec 6f 	rcall	80003c74 <usb_enum>
		}
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
8000639a:	d8 22       	popm	r4-r7,pc
8000639c:	70 28       	ld.w	r8,r8[0x8]
8000639e:	e0 6c 09 50 	mov	r12,2384
800063a2:	5d 18       	icall	r8
800063a4:	58 17       	cp.w	r7,1
800063a6:	f9 bc 00 07 	moveq	r12,7
800063aa:	f9 bc 01 03 	movne	r12,3
800063ae:	c0 de       	rcall	80005fc8 <uhc_enumeration_error>
800063b0:	d8 22       	popm	r4-r7,pc
800063b2:	d7 03       	nop

800063b4 <uhc_notify_connection>:
800063b4:	d4 21       	pushm	r4-r7,lr
800063b6:	e0 67 09 50 	mov	r7,2384
800063ba:	18 96       	mov	r6,r12
800063bc:	58 0c       	cp.w	r12,0
800063be:	c0 81       	brne	800063ce <uhc_notify_connection+0x1a>

#ifdef USB_HOST_HUB_SUPPORT
		uhc_power_running = 0;
#endif
	} else {
		if (g_uhc_device_root.address == UHC_USB_ADD_NOT_VALID) {
800063c0:	ef 3c 00 12 	ld.ub	r12,r7[18]
800063c4:	3f f5       	mov	r5,-1
800063c6:	ea 0c 18 00 	cp.b	r12,r5
800063ca:	c1 31       	brne	800063f0 <uhc_notify_connection+0x3c>
	if (b_plug) {
		uhc_enum_try = 1;
#ifdef USB_HOST_HUB_SUPPORT
		uhc_dev_enum = dev;
#endif
		uhc_dev_enum->conf_desc = NULL;
800063cc:	d8 22       	popm	r4-r7,pc
 * \param dev      Information about device connected or disconnected
 */
static void uhc_connection_tree(bool b_plug, uhc_device_t* dev)
{
	if (b_plug) {
		uhc_enum_try = 1;
800063ce:	30 08       	mov	r8,0
#ifdef USB_HOST_HUB_SUPPORT
		uhc_dev_enum = dev;
#endif
		uhc_dev_enum->conf_desc = NULL;
		uhc_dev_enum->address = 0;
800063d0:	30 19       	mov	r9,1
800063d2:	ef 68 00 12 	st.b	r7[18],r8
 * \param dev      Information about device connected or disconnected
 */
static void uhc_connection_tree(bool b_plug, uhc_device_t* dev)
{
	if (b_plug) {
		uhc_enum_try = 1;
800063d6:	8f 68       	st.w	r7[0x18],r8
#ifdef USB_HOST_HUB_SUPPORT
		uhc_dev_enum = dev;
#endif
		uhc_dev_enum->conf_desc = NULL;
		uhc_dev_enum->address = 0;
		UHC_CONNECTION_EVENT(uhc_dev_enum, true);
800063d8:	e0 68 09 6c 	mov	r8,2412
800063dc:	0e 9c       	mov	r12,r7
800063de:	b0 89       	st.b	r8[0x0],r9
800063e0:	30 1b       	mov	r11,1
		// Device connected on USB hub
		uhi_hub_send_reset(uhc_dev_enum, callback);
	} else
#endif
	{
		uhd_send_reset(callback);
800063e2:	fe b0 ec 46 	rcall	80003c6e <usb_connection>
800063e6:	fe cc 05 2a 	sub	r12,pc,1322
		UHC_CONNECTION_EVENT(uhc_dev_enum, true);
		uhc_enumeration_step1();
	} else {
		if (uhc_dev_enum == dev) {
			// Eventually stop enumeration timeout on-going on this device
			uhc_sof_timeout = 0;
800063ea:	fe b0 f4 01 	rcall	80004bec <uhd_send_reset>
		}
		// Abort all transfers (endpoint control and other) and free pipe(s)
		uhd_ep_free(dev->address, 0xFF);
800063ee:	d8 22       	popm	r4-r7,pc
		UHC_CONNECTION_EVENT(uhc_dev_enum, true);
		uhc_enumeration_step1();
	} else {
		if (uhc_dev_enum == dev) {
			// Eventually stop enumeration timeout on-going on this device
			uhc_sof_timeout = 0;
800063f0:	e0 68 0d 4e 	mov	r8,3406
		}
		// Abort all transfers (endpoint control and other) and free pipe(s)
		uhd_ep_free(dev->address, 0xFF);
800063f4:	e0 6b 00 ff 	mov	r11,255

		// Disable all USB interfaces (this includes HUB interface)
		for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
			uhc_uhis[i].uninstall(dev);
800063f8:	b0 86       	st.b	r8[0x0],r6
800063fa:	fe b0 f7 57 	rcall	800052a8 <uhd_ep_free>
		}

		UHC_CONNECTION_EVENT(dev, false);
800063fe:	0e 9c       	mov	r12,r7
80006400:	fe c8 eb 1c 	sub	r8,pc,-5348
80006404:	70 28       	ld.w	r8,r8[0x8]
		dev->address = UHC_USB_ADD_NOT_VALID;
80006406:	5d 18       	icall	r8
80006408:	0e 9c       	mov	r12,r7
		// Free USB configuration descriptor buffer
		if (dev->conf_desc != NULL) {
8000640a:	0c 9b       	mov	r11,r6
8000640c:	fe b0 ec 31 	rcall	80003c6e <usb_connection>
			free(dev->conf_desc);
80006410:	ef 65 00 12 	st.b	r7[18],r5
80006414:	6e 6c       	ld.w	r12,r7[0x18]
80006416:	58 0c       	cp.w	r12,0
80006418:	c0 30       	breq	8000641e <uhc_notify_connection+0x6a>
8000641a:	e0 a0 02 33 	rcall	80006880 <free>
8000641e:	d8 22       	popm	r4-r7,pc

80006420 <sysclk_priv_disable_module>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80006420:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80006424:	d3 03       	ssrf	0x10

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80006426:	fe 7a 0c 00 	mov	r10,-62464
8000642a:	75 58       	ld.w	r8,r10[0x54]
8000642c:	ed b8 00 06 	bld	r8,0x6
80006430:	cf d1       	brne	8000642a <sysclk_priv_disable_module+0xa>
		/* Do nothing */
	}

	/* Disable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
	mask &= ~(1U << module_index);
80006432:	30 18       	mov	r8,1
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Disable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80006434:	a3 6c       	lsl	r12,0x2
	mask &= ~(1U << module_index);
80006436:	f0 0b 09 4b 	lsl	r11,r8,r11
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Disable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
8000643a:	e0 2c f3 f8 	sub	r12,62456
	mask &= ~(1U << module_index);
8000643e:	5c db       	com	r11
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Disable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80006440:	78 08       	ld.w	r8,r12[0x0]
	mask &= ~(1U << module_index);
80006442:	10 6b       	and	r11,r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
80006444:	99 0b       	st.w	r12[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80006446:	ed b9 00 10 	bld	r9,0x10
8000644a:	c0 20       	breq	8000644e <sysclk_priv_disable_module+0x2e>
      cpu_irq_enable();
8000644c:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
8000644e:	5e fc       	retal	r12

80006450 <sysclk_disable_pbb_module>:
/**
 * \brief Disable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_disable_pbb_module(unsigned int index)
{
80006450:	d4 21       	pushm	r4-r7,lr
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(AVR32_PM_CLK_GRP_PBB, index);
80006452:	18 9b       	mov	r11,r12
80006454:	30 3c       	mov	r12,3
80006456:	ce 5f       	rcall	80006420 <sysclk_priv_disable_module>
80006458:	e1 b7 00 00 	mfsr	r7,0x0

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000645c:	d3 03       	ssrf	0x10
	cpu_irq_disable();
8000645e:	e0 69 09 74 	mov	r9,2420

	/* Disable the bridge if possible */
	flags = cpu_irq_save();

	sysclk_pbb_refcount--;
80006462:	13 88       	ld.ub	r8,r9[0x0]
80006464:	20 18       	sub	r8,1
80006466:	5c 58       	castu.b	r8
80006468:	b2 88       	st.b	r9[0x0],r8
	if (!sysclk_pbb_refcount)
8000646a:	c0 41       	brne	80006472 <sysclk_disable_pbb_module+0x22>
 * \brief Disable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(unsigned int index)
{
	sysclk_priv_disable_module(AVR32_PM_CLK_GRP_HSB, index);
8000646c:	30 2b       	mov	r11,2
8000646e:	30 1c       	mov	r12,1
80006470:	cd 8f       	rcall	80006420 <sysclk_priv_disable_module>
80006472:	e6 17 00 01 	andh	r7,0x1,COH
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80006476:	c0 21       	brne	8000647a <sysclk_disable_pbb_module+0x2a>
80006478:	d5 03       	csrf	0x10
      cpu_irq_enable();
8000647a:	d8 22       	popm	r4-r7,pc

8000647c <sysclk_disable_usb>:
		sysclk_disable_hsb_module(SYSCLK_PBB_BRIDGE);

	cpu_irq_restore(flags);
}
8000647c:	d4 01       	pushm	lr
8000647e:	30 09       	mov	r9,0
80006480:	fe 78 0c 00 	mov	r8,-62464
80006484:	30 1c       	mov	r12,1
80006486:	f1 49 00 6c 	st.w	r8[108],r9
8000648a:	30 3b       	mov	r11,3
8000648c:	cc af       	rcall	80006420 <sysclk_priv_disable_module>
8000648e:	30 1c       	mov	r12,1
 */
void sysclk_disable_usb(void)
{
	genclk_disable(AVR32_PM_GCLK_USBB);
	sysclk_disable_hsb_module(SYSCLK_USBB_DATA);
	sysclk_disable_pbb_module(SYSCLK_USBB_REGS);
80006490:	ce 0f       	rcall	80006450 <sysclk_disable_pbb_module>
80006492:	d8 02       	popm	pc

80006494 <sysclk_priv_enable_module>:
80006494:	e1 b9 00 00 	mfsr	r9,0x0
}
80006498:	d3 03       	ssrf	0x10
8000649a:	fe 7a 0c 00 	mov	r10,-62464
8000649e:	75 58       	ld.w	r8,r10[0x54]

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
800064a0:	ed b8 00 06 	bld	r8,0x6
800064a4:	cf d1       	brne	8000649e <sysclk_priv_enable_module+0xa>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
	mask |= 1U << module_index;
800064a6:	30 18       	mov	r8,1
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
800064a8:	a3 6c       	lsl	r12,0x2
	mask |= 1U << module_index;
800064aa:	f0 0b 09 4b 	lsl	r11,r8,r11
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
800064ae:	e0 2c f3 f8 	sub	r12,62456
800064b2:	78 08       	ld.w	r8,r12[0x0]
	mask |= 1U << module_index;
800064b4:	10 4b       	or	r11,r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
800064b6:	99 0b       	st.w	r12[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800064b8:	ed b9 00 10 	bld	r9,0x10
800064bc:	c0 20       	breq	800064c0 <sysclk_priv_enable_module+0x2c>
      cpu_irq_enable();
800064be:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
800064c0:	5e fc       	retal	r12
800064c2:	d7 03       	nop

800064c4 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
800064c4:	d4 21       	pushm	r4-r7,lr
800064c6:	18 97       	mov	r7,r12

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800064c8:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
800064cc:	d3 03       	ssrf	0x10
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (!sysclk_pbb_refcount)
800064ce:	e0 68 09 74 	mov	r8,2420
800064d2:	11 89       	ld.ub	r9,r8[0x0]
800064d4:	30 08       	mov	r8,0
800064d6:	f0 09 18 00 	cp.b	r9,r8
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
800064da:	c0 41       	brne	800064e2 <sysclk_enable_pbb_module+0x1e>
800064dc:	30 2b       	mov	r11,2
800064de:	30 1c       	mov	r12,1
800064e0:	cd af       	rcall	80006494 <sysclk_priv_enable_module>
		sysclk_enable_hsb_module(SYSCLK_PBB_BRIDGE);
	sysclk_pbb_refcount++;
800064e2:	e0 68 09 74 	mov	r8,2420
800064e6:	11 89       	ld.ub	r9,r8[0x0]
800064e8:	2f f9       	sub	r9,-1
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800064ea:	b0 89       	st.b	r8[0x0],r9
800064ec:	e6 16 00 01 	andh	r6,0x1,COH
      cpu_irq_enable();
800064f0:	c0 21       	brne	800064f4 <sysclk_enable_pbb_module+0x30>

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
800064f2:	d5 03       	csrf	0x10
800064f4:	30 3c       	mov	r12,3
800064f6:	0e 9b       	mov	r11,r7
800064f8:	cc ef       	rcall	80006494 <sysclk_priv_enable_module>
}
800064fa:	d8 22       	popm	r4-r7,pc

800064fc <T.62>:
800064fc:	fe 78 0c 00 	mov	r8,-62464
80006500:	71 59       	ld.w	r9,r8[0x54]
80006502:	ed b9 00 07 	bld	r9,0x7

static inline void pll_enable_source(enum pll_source src)
{
	switch (src) {
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
80006506:	5e 0c       	reteq	r12

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80006508:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
8000650c:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
8000650e:	e0 6a 03 07 	mov	r10,775
80006512:	91 aa       	st.w	r8[0x28],r10
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
80006514:	70 0a       	ld.w	r10,r8[0x0]
80006516:	a3 aa       	sbr	r10,0x2
80006518:	91 0a       	st.w	r8[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000651a:	ed b9 00 10 	bld	r9,0x10
8000651e:	c0 20       	breq	80006522 <T.62+0x26>
      cpu_irq_enable();
80006520:	d5 03       	csrf	0x10
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
80006522:	fe 79 0c 00 	mov	r9,-62464
80006526:	73 58       	ld.w	r8,r9[0x54]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
80006528:	ed b8 00 07 	bld	r8,0x7
8000652c:	cf d1       	brne	80006526 <T.62+0x2a>
8000652e:	5e fc       	retal	r12

80006530 <pll_enable_config_defaults>:
		break;
	}
}

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
80006530:	d4 21       	pushm	r4-r7,lr

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
80006532:	fe 78 0c 00 	mov	r8,-62464
80006536:	71 58       	ld.w	r8,r8[0x54]
80006538:	30 16       	mov	r6,1
		break;
	}
}

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
8000653a:	18 97       	mov	r7,r12

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
8000653c:	ec 0c 09 46 	lsl	r6,r6,r12
{
	struct pll_config pllcfg;

	pllcfg.ctrl = 0;	// HACK 8/4/14 (bc) to remove warning

	if (pll_is_locked(pll_id)) {
80006540:	ed e8 00 08 	and	r8,r6,r8
80006544:	c1 b1       	brne	8000657a <pll_enable_config_defaults+0x4a>
		return; // Pll already running
	}
	switch (pll_id) {
80006546:	58 0c       	cp.w	r12,0
80006548:	c0 40       	breq	80006550 <pll_enable_config_defaults+0x20>
8000654a:	58 1c       	cp.w	r12,1
8000654c:	c0 d1       	brne	80006566 <pll_enable_config_defaults+0x36>
8000654e:	c0 78       	rjmp	8000655c <pll_enable_config_defaults+0x2c>
#ifdef CONFIG_PLL0_SOURCE
	case 0:
		pll_enable_source(CONFIG_PLL0_SOURCE);
80006550:	cd 6f       	rcall	800064fc <T.62>
80006552:	e0 68 01 0c 	mov	r8,268
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert((mul > 2) && (mul <= 16));
	Assert((div > 0) && (div <= 15));

	cfg->ctrl |= ((mul - 1) << AVR32_PM_PLL0_PLLMUL)
80006556:	ea 18 3f 09 	orh	r8,0x3f09
8000655a:	c0 68       	rjmp	80006566 <pll_enable_config_defaults+0x36>
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_init(&pllcfg,
				CONFIG_PLL0_SOURCE,
				CONFIG_PLL0_DIV,
				CONFIG_PLL0_MUL);
		break;
8000655c:	cd 0f       	rcall	800064fc <T.62>
#endif
#ifdef CONFIG_PLL1_SOURCE
	case 1:
		pll_enable_source(CONFIG_PLL1_SOURCE);
8000655e:	e0 68 01 0c 	mov	r8,268
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert((mul > 2) && (mul <= 16));
	Assert((div > 0) && (div <= 15));

	cfg->ctrl |= ((mul - 1) << AVR32_PM_PLL0_PLLMUL)
80006562:	ea 18 3f 07 	orh	r8,0x3f07
80006566:	a1 a8       	sbr	r8,0x0
80006568:	2f 87       	sub	r7,-8
static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
8000656a:	fe 79 0c 00 	mov	r9,-62464
8000656e:	f2 07 09 28 	st.w	r9[r7<<0x2],r8
80006572:	73 58       	ld.w	r8,r9[0x54]
80006574:	ed e8 00 08 	and	r8,r6,r8
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
80006578:	cf d0       	breq	80006572 <pll_enable_config_defaults+0x42>
8000657a:	d8 22       	popm	r4-r7,pc

8000657c <sysclk_init>:
8000657c:	d4 01       	pushm	lr
8000657e:	30 0c       	mov	r12,0
80006580:	cd 8f       	rcall	80006530 <pll_enable_config_defaults>
80006582:	e0 6c 87 00 	mov	r12,34560

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
80006586:	ea 1c 03 93 	orh	r12,0x393
8000658a:	fe b0 ed 6d 	rcall	80004064 <flashc_set_bus_freq>
8000658e:	e1 b9 00 00 	mfsr	r9,0x0

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80006592:	d3 03       	ssrf	0x10
	cpu_irq_disable();
80006594:	fe 7a 0c 00 	mov	r10,-62464
	irqflags_t flags;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
80006598:	74 08       	ld.w	r8,r10[0x0]
8000659a:	e0 18 ff fc 	andl	r8,0xfffc
8000659e:	a1 b8       	sbr	r8,0x1
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
800065a0:	95 08       	st.w	r10[0x0],r8
	AVR32_PM.mcctrl = mcctrl;
800065a2:	ed b9 00 10 	bld	r9,0x10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800065a6:	c0 20       	breq	800065aa <sysclk_init+0x2e>
800065a8:	d5 03       	csrf	0x10
      cpu_irq_enable();
800065aa:	d8 02       	popm	pc

800065ac <sysclk_enable_usb>:

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
800065ac:	d4 01       	pushm	lr
800065ae:	30 1c       	mov	r12,1
800065b0:	c8 af       	rcall	800064c4 <sysclk_enable_pbb_module>
800065b2:	30 3b       	mov	r11,3
800065b4:	30 1c       	mov	r12,1
800065b6:	c6 ff       	rcall	80006494 <sysclk_priv_enable_module>
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
800065b8:	30 1c       	mov	r12,1
800065ba:	cb bf       	rcall	80006530 <pll_enable_config_defaults>
	}
#endif

#ifdef CONFIG_PLL1_SOURCE
	case GENCLK_SRC_PLL1: {
		pll_enable_config_defaults(1);
800065bc:	30 79       	mov	r9,7
800065be:	fe 78 0c 00 	mov	r8,-62464
}

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
800065c2:	f1 49 00 6c 	st.w	r8[108],r9
800065c6:	d8 02       	popm	pc

800065c8 <__avr32_udiv64>:
#endif

#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
800065c8:	d4 31       	pushm	r0-r7,lr
800065ca:	1a 97       	mov	r7,sp
800065cc:	20 2d       	sub	sp,8
  DWunion rr;
  UWtype d0, d1, n0, n1, n2;
  UWtype q0, q1;
  UWtype b, bm;

  d0 = dd.s.low;
800065ce:	10 9c       	mov	r12,r8
  d1 = dd.s.high;
800065d0:	12 9e       	mov	lr,r9
  n0 = nn.s.low;
800065d2:	14 93       	mov	r3,r10
	}
    }

#else /* UDIV_NEEDS_NORMALIZATION */

  if (d1 == 0)
800065d4:	58 09       	cp.w	r9,0
800065d6:	e0 81 00 cd 	brne	80006770 <__avr32_udiv64+0x1a8>
    {
      if (d0 > n1)
800065da:	16 38       	cp.w	r8,r11
800065dc:	e0 88 00 45 	brls	80006666 <__avr32_udiv64+0x9e>
	{
	  /* 0q = nn / 0D */

	  count_leading_zeros (bm, d0);
800065e0:	f0 08 12 00 	clz	r8,r8

	  if (bm != 0)
800065e4:	c0 d0       	breq	800065fe <__avr32_udiv64+0x36>
	    {
	      /* Normalize, i.e. make the most significant bit of the
		 denominator set.  */

	      d0 = d0 << bm;
	      n1 = (n1 << bm) | (n0 >> (W_TYPE_SIZE - bm));
800065e6:	f6 08 09 4b 	lsl	r11,r11,r8
800065ea:	f0 09 11 20 	rsub	r9,r8,32
	  if (bm != 0)
	    {
	      /* Normalize, i.e. make the most significant bit of the
		 denominator set.  */

	      d0 = d0 << bm;
800065ee:	f8 08 09 4c 	lsl	r12,r12,r8
	      n1 = (n1 << bm) | (n0 >> (W_TYPE_SIZE - bm));
800065f2:	f4 09 0a 49 	lsr	r9,r10,r9
	      n0 = n0 << bm;
800065f6:	f4 08 09 43 	lsl	r3,r10,r8
	    {
	      /* Normalize, i.e. make the most significant bit of the
		 denominator set.  */

	      d0 = d0 << bm;
	      n1 = (n1 << bm) | (n0 >> (W_TYPE_SIZE - bm));
800065fa:	f3 eb 10 0b 	or	r11,r9,r11
	      n0 = n0 << bm;
	    }

	  udiv_qrnnd (q0, n0, n1, n0, d0);
800065fe:	f8 0e 16 10 	lsr	lr,r12,0x10
80006602:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80006606:	f6 0e 0d 00 	divu	r0,r11,lr
8000660a:	e6 0b 16 10 	lsr	r11,r3,0x10
8000660e:	00 99       	mov	r9,r0
80006610:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80006614:	e0 0a 02 48 	mul	r8,r0,r10
80006618:	10 3b       	cp.w	r11,r8
8000661a:	c0 d2       	brcc	80006634 <__avr32_udiv64+0x6c>
8000661c:	20 19       	sub	r9,1
8000661e:	18 0b       	add	r11,r12
80006620:	18 3b       	cp.w	r11,r12
80006622:	c0 93       	brcs	80006634 <__avr32_udiv64+0x6c>
80006624:	f2 c5 00 01 	sub	r5,r9,1
80006628:	f6 0c 00 06 	add	r6,r11,r12
8000662c:	10 3b       	cp.w	r11,r8
8000662e:	c0 32       	brcc	80006634 <__avr32_udiv64+0x6c>
80006630:	0a 99       	mov	r9,r5
80006632:	0c 9b       	mov	r11,r6
80006634:	f6 08 01 01 	sub	r1,r11,r8
80006638:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000663c:	e2 0e 0d 00 	divu	r0,r1,lr
80006640:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80006644:	00 98       	mov	r8,r0
80006646:	e0 0a 02 4a 	mul	r10,r0,r10
8000664a:	14 33       	cp.w	r3,r10
8000664c:	c0 a2       	brcc	80006660 <__avr32_udiv64+0x98>
8000664e:	20 18       	sub	r8,1
80006650:	18 03       	add	r3,r12
80006652:	18 33       	cp.w	r3,r12
80006654:	c0 63       	brcs	80006660 <__avr32_udiv64+0x98>
80006656:	f0 cb 00 01 	sub	r11,r8,1
8000665a:	14 33       	cp.w	r3,r10
8000665c:	f6 08 17 30 	movlo	r8,r11
80006660:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80006664:	ce c8       	rjmp	8000683c <__avr32_udiv64+0x274>
	}
      else
	{
	  /* qq = NN / 0d */

	  if (d0 == 0)
80006666:	58 08       	cp.w	r8,0
80006668:	c0 51       	brne	80006672 <__avr32_udiv64+0xaa>
	    d0 = 1 / d0;	/* Divide intentionally by zero.  */
8000666a:	30 19       	mov	r9,1
8000666c:	f2 08 0d 08 	divu	r8,r9,r8
80006670:	10 9c       	mov	r12,r8

	  count_leading_zeros (bm, d0);
80006672:	f8 06 12 00 	clz	r6,r12

	  if (bm == 0)
80006676:	c0 41       	brne	8000667e <__avr32_udiv64+0xb6>
		 leading quotient digit q1 = 1).

		 This special case is necessary, not an optimization.
		 (Shifts counts of W_TYPE_SIZE are undefined.)  */

	      n1 -= d0;
80006678:	18 1b       	sub	r11,r12
8000667a:	30 19       	mov	r9,1
8000667c:	c4 68       	rjmp	80006708 <__avr32_udiv64+0x140>
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d0 = d0 << bm;
	      n2 = n1 >> b;
8000667e:	ec 01 11 20 	rsub	r1,r6,32
	      n1 = (n1 << bm) | (n0 >> b);
80006682:	f4 01 0a 49 	lsr	r9,r10,r1
	    {
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d0 = d0 << bm;
80006686:	f8 06 09 4c 	lsl	r12,r12,r6
	      n2 = n1 >> b;
	      n1 = (n1 << bm) | (n0 >> b);
8000668a:	f6 06 09 48 	lsl	r8,r11,r6
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d0 = d0 << bm;
	      n2 = n1 >> b;
8000668e:	f6 01 0a 41 	lsr	r1,r11,r1
	      n1 = (n1 << bm) | (n0 >> b);
80006692:	f3 e8 10 08 	or	r8,r9,r8
	      n0 = n0 << bm;

	      udiv_qrnnd (q1, n1, n2, n1, d0);
80006696:	f8 03 16 10 	lsr	r3,r12,0x10
8000669a:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000669e:	e2 03 0d 00 	divu	r0,r1,r3
800066a2:	f0 0b 16 10 	lsr	r11,r8,0x10
800066a6:	00 9e       	mov	lr,r0
800066a8:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800066ac:	e0 05 02 49 	mul	r9,r0,r5
800066b0:	12 3b       	cp.w	r11,r9
800066b2:	c0 d2       	brcc	800066cc <__avr32_udiv64+0x104>
800066b4:	20 1e       	sub	lr,1
800066b6:	18 0b       	add	r11,r12
800066b8:	18 3b       	cp.w	r11,r12
800066ba:	c0 93       	brcs	800066cc <__avr32_udiv64+0x104>
800066bc:	fc c1 00 01 	sub	r1,lr,1
800066c0:	f6 0c 00 02 	add	r2,r11,r12
800066c4:	12 3b       	cp.w	r11,r9
800066c6:	c0 32       	brcc	800066cc <__avr32_udiv64+0x104>
800066c8:	02 9e       	mov	lr,r1
800066ca:	04 9b       	mov	r11,r2
800066cc:	12 1b       	sub	r11,r9
800066ce:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
800066d2:	f6 03 0d 02 	divu	r2,r11,r3
800066d6:	f1 e3 11 08 	or	r8,r8,r3<<0x10
800066da:	04 99       	mov	r9,r2
800066dc:	e4 05 02 4b 	mul	r11,r2,r5
800066e0:	16 38       	cp.w	r8,r11
800066e2:	c0 d2       	brcc	800066fc <__avr32_udiv64+0x134>
800066e4:	20 19       	sub	r9,1
800066e6:	18 08       	add	r8,r12
800066e8:	18 38       	cp.w	r8,r12
800066ea:	c0 93       	brcs	800066fc <__avr32_udiv64+0x134>
800066ec:	f2 c3 00 01 	sub	r3,r9,1
800066f0:	f0 0c 00 05 	add	r5,r8,r12
800066f4:	16 38       	cp.w	r8,r11
800066f6:	c0 32       	brcc	800066fc <__avr32_udiv64+0x134>
800066f8:	06 99       	mov	r9,r3
800066fa:	0a 98       	mov	r8,r5
	      b = W_TYPE_SIZE - bm;

	      d0 = d0 << bm;
	      n2 = n1 >> b;
	      n1 = (n1 << bm) | (n0 >> b);
	      n0 = n0 << bm;
800066fc:	f4 06 09 43 	lsl	r3,r10,r6

	      udiv_qrnnd (q1, n1, n2, n1, d0);
80006700:	f0 0b 01 0b 	sub	r11,r8,r11
80006704:	f3 ee 11 09 	or	r9,r9,lr<<0x10
	    }

	  /* n1 != d0...  */

	  udiv_qrnnd (q0, n0, n1, n0, d0);
80006708:	f8 06 16 10 	lsr	r6,r12,0x10
8000670c:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80006710:	f6 06 0d 00 	divu	r0,r11,r6
80006714:	e6 0b 16 10 	lsr	r11,r3,0x10
80006718:	00 9a       	mov	r10,r0
8000671a:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000671e:	e0 0e 02 48 	mul	r8,r0,lr
80006722:	10 3b       	cp.w	r11,r8
80006724:	c0 d2       	brcc	8000673e <__avr32_udiv64+0x176>
80006726:	20 1a       	sub	r10,1
80006728:	18 0b       	add	r11,r12
8000672a:	18 3b       	cp.w	r11,r12
8000672c:	c0 93       	brcs	8000673e <__avr32_udiv64+0x176>
8000672e:	f4 c2 00 01 	sub	r2,r10,1
80006732:	f6 0c 00 05 	add	r5,r11,r12
80006736:	10 3b       	cp.w	r11,r8
80006738:	c0 32       	brcc	8000673e <__avr32_udiv64+0x176>
8000673a:	04 9a       	mov	r10,r2
8000673c:	0a 9b       	mov	r11,r5
8000673e:	f6 08 01 01 	sub	r1,r11,r8
80006742:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80006746:	e2 06 0d 00 	divu	r0,r1,r6
8000674a:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000674e:	00 98       	mov	r8,r0
80006750:	e0 0e 02 4b 	mul	r11,r0,lr
80006754:	16 33       	cp.w	r3,r11
80006756:	c0 a2       	brcc	8000676a <__avr32_udiv64+0x1a2>
80006758:	20 18       	sub	r8,1
8000675a:	18 03       	add	r3,r12
8000675c:	18 33       	cp.w	r3,r12
8000675e:	c0 63       	brcs	8000676a <__avr32_udiv64+0x1a2>
80006760:	f0 cc 00 01 	sub	r12,r8,1
80006764:	16 33       	cp.w	r3,r11
80006766:	f8 08 17 30 	movlo	r8,r12
8000676a:	f1 ea 11 08 	or	r8,r8,r10<<0x10
8000676e:	c6 b8       	rjmp	80006844 <__avr32_udiv64+0x27c>
    }
#endif /* UDIV_NEEDS_NORMALIZATION */

  else
    {
      if (d1 > n1)
80006770:	16 39       	cp.w	r9,r11
80006772:	e0 8b 00 67 	brhi	80006840 <__avr32_udiv64+0x278>
	}
      else
	{
	  /* 0q = NN / dd */

	  count_leading_zeros (bm, d1);
80006776:	f2 09 12 00 	clz	r9,r9
	  if (bm == 0)
8000677a:	c0 b1       	brne	80006790 <__avr32_udiv64+0x1c8>

		 This special case is necessary, not an optimization.  */

	      /* The condition on the next line takes advantage of that
		 n1 >= d1 (true due to program flow).  */
	      if (n1 > d1 || n0 >= d0)
8000677c:	10 3a       	cp.w	r10,r8
8000677e:	5f 2a       	srhs	r10
80006780:	1c 3b       	cp.w	r11,lr
80006782:	5f b8       	srhi	r8
80006784:	10 4a       	or	r10,r8
80006786:	f2 0a 18 00 	cp.b	r10,r9
8000678a:	c5 b0       	breq	80006840 <__avr32_udiv64+0x278>
		{
		  q0 = 1;
		  sub_ddmmss (n1, n0, n1, n0, d1, d0);
8000678c:	30 18       	mov	r8,1
8000678e:	c5 b8       	rjmp	80006844 <__avr32_udiv64+0x27c>
	      UWtype m1, m0;
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
80006790:	f2 03 11 20 	rsub	r3,r9,32
80006794:	fc 09 09 4e 	lsl	lr,lr,r9
	      d0 = d0 << bm;
	      n2 = n1 >> b;
	      n1 = (n1 << bm) | (n0 >> b);
80006798:	f6 09 09 4c 	lsl	r12,r11,r9
8000679c:	f4 03 0a 42 	lsr	r2,r10,r3
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
	      d0 = d0 << bm;
800067a0:	f0 09 09 46 	lsl	r6,r8,r9
	      UWtype m1, m0;
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
800067a4:	f0 03 0a 48 	lsr	r8,r8,r3
	      d0 = d0 << bm;
	      n2 = n1 >> b;
800067a8:	f6 03 0a 43 	lsr	r3,r11,r3
	      n1 = (n1 << bm) | (n0 >> b);
800067ac:	18 42       	or	r2,r12
	      UWtype m1, m0;
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
800067ae:	f1 ee 10 0c 	or	r12,r8,lr
	      d0 = d0 << bm;
	      n2 = n1 >> b;
	      n1 = (n1 << bm) | (n0 >> b);
	      n0 = n0 << bm;

	      udiv_qrnnd (q0, n1, n2, n1, d1);
800067b2:	f8 01 16 10 	lsr	r1,r12,0x10
800067b6:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
800067ba:	e6 01 0d 04 	divu	r4,r3,r1
800067be:	e4 03 16 10 	lsr	r3,r2,0x10
800067c2:	08 98       	mov	r8,r4
800067c4:	e7 e5 11 03 	or	r3,r3,r5<<0x10
800067c8:	e8 0e 02 45 	mul	r5,r4,lr
800067cc:	0a 33       	cp.w	r3,r5
800067ce:	c0 d2       	brcc	800067e8 <__avr32_udiv64+0x220>
800067d0:	20 18       	sub	r8,1
800067d2:	18 03       	add	r3,r12
800067d4:	18 33       	cp.w	r3,r12
800067d6:	c0 93       	brcs	800067e8 <__avr32_udiv64+0x220>
800067d8:	f0 c0 00 01 	sub	r0,r8,1
800067dc:	e6 0c 00 0b 	add	r11,r3,r12
800067e0:	0a 33       	cp.w	r3,r5
800067e2:	c0 32       	brcc	800067e8 <__avr32_udiv64+0x220>
800067e4:	00 98       	mov	r8,r0
800067e6:	16 93       	mov	r3,r11
800067e8:	0a 13       	sub	r3,r5
800067ea:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
800067ee:	e6 01 0d 00 	divu	r0,r3,r1
800067f2:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800067f6:	00 93       	mov	r3,r0
800067f8:	e0 0e 02 4e 	mul	lr,r0,lr
800067fc:	1c 3b       	cp.w	r11,lr
800067fe:	c0 d2       	brcc	80006818 <__avr32_udiv64+0x250>
80006800:	20 13       	sub	r3,1
80006802:	18 0b       	add	r11,r12
80006804:	18 3b       	cp.w	r11,r12
80006806:	c0 93       	brcs	80006818 <__avr32_udiv64+0x250>
80006808:	f6 0c 00 0c 	add	r12,r11,r12
8000680c:	e6 c5 00 01 	sub	r5,r3,1
80006810:	1c 3b       	cp.w	r11,lr
80006812:	c0 32       	brcc	80006818 <__avr32_udiv64+0x250>
80006814:	0a 93       	mov	r3,r5
80006816:	18 9b       	mov	r11,r12
80006818:	e7 e8 11 08 	or	r8,r3,r8<<0x10
8000681c:	1c 1b       	sub	r11,lr
	      umul_ppmm (m1, m0, q0, d0);
8000681e:	f0 06 06 42 	mulu.d	r2,r8,r6
80006822:	06 96       	mov	r6,r3

	      if (m1 > n1 || (m1 == n1 && m0 > n0))
80006824:	16 36       	cp.w	r6,r11
80006826:	e0 8b 00 0a 	brhi	8000683a <__avr32_udiv64+0x272>
8000682a:	5f 0b       	sreq	r11
8000682c:	f4 09 09 49 	lsl	r9,r10,r9
80006830:	12 32       	cp.w	r2,r9
80006832:	5f b9       	srhi	r9
80006834:	f7 e9 00 09 	and	r9,r11,r9
80006838:	c0 60       	breq	80006844 <__avr32_udiv64+0x27c>
		{
		  q0--;
8000683a:	20 18       	sub	r8,1
		  sub_ddmmss (m1, m0, m1, m0, d1, d0);
8000683c:	30 09       	mov	r9,0
8000683e:	c0 38       	rjmp	80006844 <__avr32_udiv64+0x27c>
80006840:	30 09       	mov	r9,0
80006842:	12 98       	mov	r8,r9
#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
  return __udivmoddi4 (n, d, (UDWtype *) 0);
}
80006844:	10 9a       	mov	r10,r8
		}
	    }
	}
    }

  const DWunion ww = {{.low = q0, .high = q1}};
80006846:	12 93       	mov	r3,r9
80006848:	10 92       	mov	r2,r8
#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
  return __udivmoddi4 (n, d, (UDWtype *) 0);
}
8000684a:	12 9b       	mov	r11,r9
8000684c:	2f ed       	sub	sp,-8
8000684e:	d8 32       	popm	r0-r7,pc

80006850 <atexit>:

int
_DEFUN (atexit,
	(fn),
	_VOID _EXFUN ((*fn), (_VOID)))
{
80006850:	d4 01       	pushm	lr
  return __register_exitproc (__et_atexit, fn, NULL, NULL);
80006852:	30 09       	mov	r9,0
80006854:	18 9b       	mov	r11,r12
80006856:	12 9a       	mov	r10,r9
80006858:	12 9c       	mov	r12,r9
8000685a:	e0 a0 03 27 	rcall	80006ea8 <__register_exitproc>
}
8000685e:	d8 02       	popm	pc

80006860 <exit>:
 */

void 
_DEFUN (exit, (code),
	int code)
{
80006860:	d4 21       	pushm	r4-r7,lr
  __call_exitprocs (code, NULL);
80006862:	30 0b       	mov	r11,0
 */

void 
_DEFUN (exit, (code),
	int code)
{
80006864:	18 97       	mov	r7,r12
  __call_exitprocs (code, NULL);
80006866:	e0 a0 03 73 	rcall	80006f4c <__call_exitprocs>

  if (_GLOBAL_REENT->__cleanup)
8000686a:	fe c8 ef 72 	sub	r8,pc,-4238
8000686e:	70 0c       	ld.w	r12,r8[0x0]
80006870:	78 a8       	ld.w	r8,r12[0x28]
80006872:	58 08       	cp.w	r8,0
    (*_GLOBAL_REENT->__cleanup) (_GLOBAL_REENT);
80006874:	c0 20       	breq	80006878 <exit+0x18>
  _exit (code);
80006876:	5d 18       	icall	r8
80006878:	0e 9c       	mov	r12,r7
8000687a:	e0 a0 02 f6 	rcall	80006e66 <_exit>
8000687e:	d7 03       	nop

80006880 <free>:
}

void
_DEFUN (free, (aptr),
	_PTR aptr)
{
80006880:	d4 01       	pushm	lr
  _free_r (_REENT, aptr);
80006882:	e0 68 01 30 	mov	r8,304
80006886:	18 9b       	mov	r11,r12
80006888:	70 0c       	ld.w	r12,r8[0x0]
8000688a:	e0 a0 04 13 	rcall	800070b0 <_free_r>
}
8000688e:	d8 02       	popm	pc

80006890 <malloc>:
80006890:	d4 01       	pushm	lr
80006892:	e0 68 01 30 	mov	r8,304
80006896:	18 9b       	mov	r11,r12

_PTR
_DEFUN (malloc, (nbytes),
	size_t nbytes)		/* get a block */
{
  return _malloc_r (_REENT, nbytes);
80006898:	70 0c       	ld.w	r12,r8[0x0]
8000689a:	c0 3c       	rcall	800068a0 <_malloc_r>
}
8000689c:	d8 02       	popm	pc
8000689e:	d7 03       	nop

800068a0 <_malloc_r>:
#if __STD_C
Void_t* mALLOc(RARG size_t bytes)
#else
Void_t* mALLOc(RARG bytes) RDECL size_t bytes;
#endif
{
800068a0:	d4 31       	pushm	r0-r7,lr
  int       startidx;                /* first bin of a traversed block */
  mchunkptr fwd;                     /* misc temp for linking */
  mchunkptr bck;                     /* misc temp for linking */
  mbinptr q;                         /* misc temp */

  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
800068a2:	f6 c8 ff f5 	sub	r8,r11,-11
#if __STD_C
Void_t* mALLOc(RARG size_t bytes)
#else
Void_t* mALLOc(RARG bytes) RDECL size_t bytes;
#endif
{
800068a6:	18 95       	mov	r5,r12
  int       startidx;                /* first bin of a traversed block */
  mchunkptr fwd;                     /* misc temp for linking */
  mchunkptr bck;                     /* misc temp for linking */
  mbinptr q;                         /* misc temp */

  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
800068a8:	10 97       	mov	r7,r8
800068aa:	e0 17 ff f8 	andl	r7,0xfff8
800068ae:	59 68       	cp.w	r8,22
800068b0:	f9 b7 08 10 	movls	r7,16

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
800068b4:	16 37       	cp.w	r7,r11
800068b6:	5f 38       	srlo	r8
800068b8:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
800068bc:	c0 50       	breq	800068c6 <_malloc_r+0x26>
  {
    RERRNO = ENOMEM;
800068be:	30 c8       	mov	r8,12
800068c0:	99 38       	st.w	r12[0xc],r8
800068c2:	e0 8f 01 f4 	bral	80006caa <_malloc_r+0x40a>
    return 0;
  }

  MALLOC_LOCK;
800068c6:	e0 a0 02 a5 	rcall	80006e10 <__malloc_lock>

  /* Check for exact match in a bin */

  if (is_small_request(nb))  /* Faster version for small requests */
800068ca:	e0 47 01 f7 	cp.w	r7,503
800068ce:	e0 8b 00 1d 	brhi	80006908 <_malloc_r+0x68>
  {
    idx = smallbin_index(nb); 
800068d2:	ee 03 16 03 	lsr	r3,r7,0x3

    /* No traversal or size check necessary for small bins.  */

    q = bin_at(idx);
800068d6:	e0 68 01 34 	mov	r8,308
800068da:	f0 03 00 38 	add	r8,r8,r3<<0x3
    victim = last(q);

#if MALLOC_ALIGN != 16
    /* Also scan the next one, since it would have a remainder < MINSIZE */
    if (victim == q)
800068de:	70 36       	ld.w	r6,r8[0xc]
800068e0:	10 36       	cp.w	r6,r8
    {
      q = next_bin(q);
800068e2:	c0 61       	brne	800068ee <_malloc_r+0x4e>
800068e4:	ec c8 ff f8 	sub	r8,r6,-8
      victim = last(q);
    }
#endif
    if (victim != q)
800068e8:	70 36       	ld.w	r6,r8[0xc]
800068ea:	10 36       	cp.w	r6,r8
    {
      victim_size = chunksize(victim);
800068ec:	c0 c0       	breq	80006904 <_malloc_r+0x64>
800068ee:	6c 18       	ld.w	r8,r6[0x4]
800068f0:	e0 18 ff fc 	andl	r8,0xfffc
      unlink(victim, bck, fwd);
      set_inuse_bit_at_offset(victim, victim_size);
800068f4:	6c 3a       	ld.w	r10,r6[0xc]
800068f6:	ec 08 00 09 	add	r9,r6,r8
    }
#endif
    if (victim != q)
    {
      victim_size = chunksize(victim);
      unlink(victim, bck, fwd);
800068fa:	0a 9c       	mov	r12,r5
800068fc:	6c 28       	ld.w	r8,r6[0x8]
800068fe:	95 28       	st.w	r10[0x8],r8
80006900:	91 3a       	st.w	r8[0xc],r10
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
      return chunk2mem(victim);
    }

    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */
80006902:	c4 78       	rjmp	80006990 <_malloc_r+0xf0>
80006904:	2f e3       	sub	r3,-2

  }
  else
  {
    idx = bin_index(nb);
80006906:	c4 d8       	rjmp	800069a0 <_malloc_r+0x100>
80006908:	ee 03 16 09 	lsr	r3,r7,0x9
8000690c:	c0 41       	brne	80006914 <_malloc_r+0x74>
8000690e:	ee 03 16 03 	lsr	r3,r7,0x3
80006912:	c2 68       	rjmp	8000695e <_malloc_r+0xbe>
80006914:	58 43       	cp.w	r3,4
80006916:	e0 8b 00 06 	brhi	80006922 <_malloc_r+0x82>
8000691a:	ee 03 16 06 	lsr	r3,r7,0x6
8000691e:	2c 83       	sub	r3,-56
80006920:	c1 f8       	rjmp	8000695e <_malloc_r+0xbe>
80006922:	59 43       	cp.w	r3,20
80006924:	e0 8b 00 04 	brhi	8000692c <_malloc_r+0x8c>
80006928:	2a 53       	sub	r3,-91
8000692a:	c1 a8       	rjmp	8000695e <_malloc_r+0xbe>
8000692c:	e0 43 00 54 	cp.w	r3,84
80006930:	e0 8b 00 06 	brhi	8000693c <_malloc_r+0x9c>
80006934:	ee 03 16 0c 	lsr	r3,r7,0xc
80006938:	29 23       	sub	r3,-110
8000693a:	c1 28       	rjmp	8000695e <_malloc_r+0xbe>
8000693c:	e0 43 01 54 	cp.w	r3,340
80006940:	e0 8b 00 06 	brhi	8000694c <_malloc_r+0xac>
80006944:	ee 03 16 0f 	lsr	r3,r7,0xf
80006948:	28 93       	sub	r3,-119
8000694a:	c0 a8       	rjmp	8000695e <_malloc_r+0xbe>
8000694c:	e0 43 05 54 	cp.w	r3,1364
80006950:	e0 88 00 04 	brls	80006958 <_malloc_r+0xb8>
80006954:	37 e3       	mov	r3,126
80006956:	c0 48       	rjmp	8000695e <_malloc_r+0xbe>
80006958:	ee 03 16 12 	lsr	r3,r7,0x12
    bin = bin_at(idx);
8000695c:	28 43       	sub	r3,-124
8000695e:	e0 6a 01 34 	mov	r10,308

    for (victim = last(bin); victim != bin; victim = victim->bk)
80006962:	f4 03 00 3a 	add	r10,r10,r3<<0x3
    {
      victim_size = chunksize(victim);
80006966:	74 36       	ld.w	r6,r10[0xc]
80006968:	c1 98       	rjmp	8000699a <_malloc_r+0xfa>
8000696a:	6c 19       	ld.w	r9,r6[0x4]
      remainder_size = long_sub_size_t(victim_size, nb);
8000696c:	e0 19 ff fc 	andl	r9,0xfffc
      
      if (remainder_size >= (long)MINSIZE) /* too big */
80006970:	f2 07 01 0b 	sub	r11,r9,r7
80006974:	58 fb       	cp.w	r11,15
      {
        --idx; /* adjust to rescan below after checking last remainder */
80006976:	e0 8a 00 04 	brle	8000697e <_malloc_r+0xde>
        break;   
8000697a:	20 13       	sub	r3,1
      }

      else if (remainder_size >= 0) /* exact fit */
8000697c:	c1 18       	rjmp	8000699e <_malloc_r+0xfe>
8000697e:	6c 38       	ld.w	r8,r6[0xc]
      {
        unlink(victim, bck, fwd);
80006980:	58 0b       	cp.w	r11,0
        set_inuse_bit_at_offset(victim, victim_size);
80006982:	c0 b5       	brlt	80006998 <_malloc_r+0xf8>
80006984:	6c 2a       	ld.w	r10,r6[0x8]
        check_malloced_chunk(victim, nb);
	MALLOC_UNLOCK;
80006986:	ec 09 00 09 	add	r9,r6,r9
        break;   
      }

      else if (remainder_size >= 0) /* exact fit */
      {
        unlink(victim, bck, fwd);
8000698a:	0a 9c       	mov	r12,r5
        set_inuse_bit_at_offset(victim, victim_size);
8000698c:	91 2a       	st.w	r8[0x8],r10
8000698e:	95 38       	st.w	r10[0xc],r8
80006990:	72 18       	ld.w	r8,r9[0x4]
80006992:	a1 a8       	sbr	r8,0x0
  else
  {
    idx = bin_index(nb);
    bin = bin_at(idx);

    for (victim = last(bin); victim != bin; victim = victim->bk)
80006994:	93 18       	st.w	r9[0x4],r8
80006996:	cb c8       	rjmp	80006b0e <_malloc_r+0x26e>
80006998:	10 96       	mov	r6,r8
	MALLOC_UNLOCK;
        return chunk2mem(victim);
      }
    }

    ++idx; 
8000699a:	14 36       	cp.w	r6,r10

  }

  /* Try to use the last split-off remainder */

  if ( (victim = last_remainder->fd) != last_remainder)
8000699c:	ce 71       	brne	8000696a <_malloc_r+0xca>
8000699e:	2f f3       	sub	r3,-1
800069a0:	e0 6a 01 34 	mov	r10,308
800069a4:	f4 cc ff f8 	sub	r12,r10,-8
  {
    victim_size = chunksize(victim);
800069a8:	78 26       	ld.w	r6,r12[0x8]
800069aa:	18 36       	cp.w	r6,r12
800069ac:	c6 c0       	breq	80006a84 <_malloc_r+0x1e4>
    remainder_size = long_sub_size_t(victim_size, nb);
800069ae:	6c 19       	ld.w	r9,r6[0x4]
800069b0:	e0 19 ff fc 	andl	r9,0xfffc

    if (remainder_size >= (long)MINSIZE) /* re-split */
800069b4:	f2 07 01 08 	sub	r8,r9,r7
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
      return chunk2mem(victim);
    }

    clear_last_remainder;
800069b8:	58 f8       	cp.w	r8,15
800069ba:	e0 89 00 8f 	brgt	80006ad8 <_malloc_r+0x238>

    if (remainder_size >= 0)  /* exhaust */
800069be:	99 3c       	st.w	r12[0xc],r12
    {
      set_inuse_bit_at_offset(victim, victim_size);
800069c0:	99 2c       	st.w	r12[0x8],r12
800069c2:	58 08       	cp.w	r8,0
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
800069c4:	c0 55       	brlt	800069ce <_malloc_r+0x12e>
800069c6:	ec 09 00 09 	add	r9,r6,r9
      return chunk2mem(victim);
    }

    /* Else place in bin */

    frontlink(victim, victim_size, remainder_index, bck, fwd);
800069ca:	0a 9c       	mov	r12,r5
800069cc:	ce 2b       	rjmp	80006990 <_malloc_r+0xf0>
800069ce:	e0 49 01 ff 	cp.w	r9,511
800069d2:	e0 8b 00 13 	brhi	800069f8 <_malloc_r+0x158>
800069d6:	a3 99       	lsr	r9,0x3
800069d8:	f4 09 00 38 	add	r8,r10,r9<<0x3
800069dc:	70 2b       	ld.w	r11,r8[0x8]
800069de:	8d 38       	st.w	r6[0xc],r8
800069e0:	8d 2b       	st.w	r6[0x8],r11
800069e2:	97 36       	st.w	r11[0xc],r6
800069e4:	91 26       	st.w	r8[0x8],r6
800069e6:	a3 49       	asr	r9,0x2
800069e8:	74 18       	ld.w	r8,r10[0x4]
800069ea:	30 1b       	mov	r11,1
800069ec:	f6 09 09 49 	lsl	r9,r11,r9
800069f0:	f1 e9 10 09 	or	r9,r8,r9
800069f4:	95 19       	st.w	r10[0x4],r9
800069f6:	c4 78       	rjmp	80006a84 <_malloc_r+0x1e4>
800069f8:	f2 0a 16 09 	lsr	r10,r9,0x9
800069fc:	58 4a       	cp.w	r10,4
800069fe:	e0 8b 00 07 	brhi	80006a0c <_malloc_r+0x16c>
80006a02:	f2 0a 16 06 	lsr	r10,r9,0x6
80006a06:	2c 8a       	sub	r10,-56
80006a08:	c2 08       	rjmp	80006a48 <_malloc_r+0x1a8>
80006a0a:	d7 03       	nop
80006a0c:	59 4a       	cp.w	r10,20
80006a0e:	e0 8b 00 04 	brhi	80006a16 <_malloc_r+0x176>
80006a12:	2a 5a       	sub	r10,-91
80006a14:	c1 a8       	rjmp	80006a48 <_malloc_r+0x1a8>
80006a16:	e0 4a 00 54 	cp.w	r10,84
80006a1a:	e0 8b 00 06 	brhi	80006a26 <_malloc_r+0x186>
80006a1e:	f2 0a 16 0c 	lsr	r10,r9,0xc
80006a22:	29 2a       	sub	r10,-110
80006a24:	c1 28       	rjmp	80006a48 <_malloc_r+0x1a8>
80006a26:	e0 4a 01 54 	cp.w	r10,340
80006a2a:	e0 8b 00 06 	brhi	80006a36 <_malloc_r+0x196>
80006a2e:	f2 0a 16 0f 	lsr	r10,r9,0xf
80006a32:	28 9a       	sub	r10,-119
80006a34:	c0 a8       	rjmp	80006a48 <_malloc_r+0x1a8>
80006a36:	e0 4a 05 54 	cp.w	r10,1364
80006a3a:	e0 88 00 04 	brls	80006a42 <_malloc_r+0x1a2>
80006a3e:	37 ea       	mov	r10,126
80006a40:	c0 48       	rjmp	80006a48 <_malloc_r+0x1a8>
80006a42:	f2 0a 16 12 	lsr	r10,r9,0x12
80006a46:	28 4a       	sub	r10,-124
80006a48:	e0 6b 01 34 	mov	r11,308
80006a4c:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80006a50:	68 28       	ld.w	r8,r4[0x8]
80006a52:	08 38       	cp.w	r8,r4
80006a54:	c0 e1       	brne	80006a70 <_malloc_r+0x1d0>
80006a56:	76 19       	ld.w	r9,r11[0x4]
80006a58:	a3 4a       	asr	r10,0x2
80006a5a:	30 1e       	mov	lr,1
80006a5c:	fc 0a 09 4a 	lsl	r10,lr,r10
80006a60:	f3 ea 10 0a 	or	r10,r9,r10
80006a64:	10 99       	mov	r9,r8
80006a66:	97 1a       	st.w	r11[0x4],r10
80006a68:	c0 a8       	rjmp	80006a7c <_malloc_r+0x1dc>
80006a6a:	70 28       	ld.w	r8,r8[0x8]
80006a6c:	08 38       	cp.w	r8,r4
80006a6e:	c0 60       	breq	80006a7a <_malloc_r+0x1da>
80006a70:	70 1a       	ld.w	r10,r8[0x4]
80006a72:	e0 1a ff fc 	andl	r10,0xfffc
80006a76:	14 39       	cp.w	r9,r10
80006a78:	cf 93       	brcs	80006a6a <_malloc_r+0x1ca>
80006a7a:	70 39       	ld.w	r9,r8[0xc]
80006a7c:	8d 39       	st.w	r6[0xc],r9
80006a7e:	8d 28       	st.w	r6[0x8],r8
80006a80:	91 36       	st.w	r8[0xc],r6
  /* 
     If there are any possibly nonempty big-enough blocks, 
     search for best fitting chunk by scanning bins in blockwidth units.
  */

  if ( (block = idx2binblock(idx)) <= binblocks)  
80006a82:	93 26       	st.w	r9[0x8],r6
80006a84:	e6 08 14 02 	asr	r8,r3,0x2
80006a88:	30 1b       	mov	r11,1
80006a8a:	e0 64 01 34 	mov	r4,308
80006a8e:	f6 08 09 4b 	lsl	r11,r11,r8
80006a92:	68 18       	ld.w	r8,r4[0x4]
80006a94:	10 3b       	cp.w	r11,r8
  {

    /* Get to the first marked block */

    if ( (block & binblocks) == 0) 
80006a96:	e0 8b 00 69 	brhi	80006b68 <_malloc_r+0x2c8>
80006a9a:	f7 e8 00 09 	and	r9,r11,r8
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
80006a9e:	c0 b1       	brne	80006ab4 <_malloc_r+0x214>
      block <<= 1;
80006aa0:	e0 13 ff fc 	andl	r3,0xfffc
      while ((block & binblocks) == 0)
80006aa4:	a1 7b       	lsl	r11,0x1
      {
        idx += BINBLOCKWIDTH;
80006aa6:	2f c3       	sub	r3,-4
        block <<= 1;
80006aa8:	c0 38       	rjmp	80006aae <_malloc_r+0x20e>
    if ( (block & binblocks) == 0) 
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
      block <<= 1;
      while ((block & binblocks) == 0)
80006aaa:	2f c3       	sub	r3,-4
80006aac:	a1 7b       	lsl	r11,0x1
80006aae:	f7 e8 00 09 	and	r9,r11,r8
      
    /* For each possibly nonempty block ... */
    for (;;)  
    {
      startidx = idx;          /* (track incomplete blocks) */
      q = bin = bin_at(idx);
80006ab2:	cf c0       	breq	80006aaa <_malloc_r+0x20a>
80006ab4:	e8 03 00 3e 	add	lr,r4,r3<<0x3
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
80006ab8:	06 92       	mov	r2,r3
80006aba:	1c 91       	mov	r1,lr
        {
          victim_size = chunksize(victim);
80006abc:	62 36       	ld.w	r6,r1[0xc]
80006abe:	c2 d8       	rjmp	80006b18 <_malloc_r+0x278>
80006ac0:	6c 1a       	ld.w	r10,r6[0x4]
          remainder_size = long_sub_size_t(victim_size, nb);
80006ac2:	e0 1a ff fc 	andl	r10,0xfffc

          if (remainder_size >= (long)MINSIZE) /* split */
80006ac6:	f4 07 01 08 	sub	r8,r10,r7
80006aca:	58 f8       	cp.w	r8,15
          {
            remainder = chunk_at_offset(victim, nb);
            set_head(victim, nb | PREV_INUSE);
            unlink(victim, bck, fwd);
80006acc:	e0 8a 00 15 	brle	80006af6 <_malloc_r+0x256>
80006ad0:	6c 3a       	ld.w	r10,r6[0xc]
80006ad2:	6c 29       	ld.w	r9,r6[0x8]
          remainder_size = long_sub_size_t(victim_size, nb);

          if (remainder_size >= (long)MINSIZE) /* split */
          {
            remainder = chunk_at_offset(victim, nb);
            set_head(victim, nb | PREV_INUSE);
80006ad4:	95 29       	st.w	r10[0x8],r9
          victim_size = chunksize(victim);
          remainder_size = long_sub_size_t(victim_size, nb);

          if (remainder_size >= (long)MINSIZE) /* split */
          {
            remainder = chunk_at_offset(victim, nb);
80006ad6:	93 3a       	st.w	r9[0xc],r10
80006ad8:	0e 99       	mov	r9,r7
            set_head(victim, nb | PREV_INUSE);
80006ada:	ec 07 00 07 	add	r7,r6,r7
            unlink(victim, bck, fwd);
            link_last_remainder(remainder);
80006ade:	a1 a9       	sbr	r9,0x0
          remainder_size = long_sub_size_t(victim_size, nb);

          if (remainder_size >= (long)MINSIZE) /* split */
          {
            remainder = chunk_at_offset(victim, nb);
            set_head(victim, nb | PREV_INUSE);
80006ae0:	99 37       	st.w	r12[0xc],r7
            unlink(victim, bck, fwd);
            link_last_remainder(remainder);
            set_head(remainder, remainder_size | PREV_INUSE);
            set_foot(remainder, remainder_size);
80006ae2:	99 27       	st.w	r12[0x8],r7
80006ae4:	8d 19       	st.w	r6[0x4],r9
          if (remainder_size >= (long)MINSIZE) /* split */
          {
            remainder = chunk_at_offset(victim, nb);
            set_head(victim, nb | PREV_INUSE);
            unlink(victim, bck, fwd);
            link_last_remainder(remainder);
80006ae6:	ee 08 09 08 	st.w	r7[r8],r8
            set_head(remainder, remainder_size | PREV_INUSE);
80006aea:	8f 2c       	st.w	r7[0x8],r12
            set_foot(remainder, remainder_size);
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
80006aec:	8f 3c       	st.w	r7[0xc],r12
          {
            remainder = chunk_at_offset(victim, nb);
            set_head(victim, nb | PREV_INUSE);
            unlink(victim, bck, fwd);
            link_last_remainder(remainder);
            set_head(remainder, remainder_size | PREV_INUSE);
80006aee:	a1 a8       	sbr	r8,0x0
80006af0:	0a 9c       	mov	r12,r5
80006af2:	8f 18       	st.w	r7[0x4],r8
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
            return chunk2mem(victim);
          }

          else if (remainder_size >= 0)  /* take */
80006af4:	c0 d8       	rjmp	80006b0e <_malloc_r+0x26e>
80006af6:	6c 39       	ld.w	r9,r6[0xc]
          {
            set_inuse_bit_at_offset(victim, victim_size);
80006af8:	58 08       	cp.w	r8,0
80006afa:	c0 e5       	brlt	80006b16 <_malloc_r+0x276>
80006afc:	ec 0a 00 0a 	add	r10,r6,r10
            unlink(victim, bck, fwd);
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
80006b00:	74 18       	ld.w	r8,r10[0x4]
            return chunk2mem(victim);
          }

          else if (remainder_size >= 0)  /* take */
          {
            set_inuse_bit_at_offset(victim, victim_size);
80006b02:	a1 a8       	sbr	r8,0x0
            unlink(victim, bck, fwd);
80006b04:	0a 9c       	mov	r12,r5
80006b06:	95 18       	st.w	r10[0x4],r8
80006b08:	6c 28       	ld.w	r8,r6[0x8]
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
80006b0a:	93 28       	st.w	r9[0x8],r8
80006b0c:	91 39       	st.w	r8[0xc],r9
            return chunk2mem(victim);
80006b0e:	c8 2d       	rcall	80006e12 <__malloc_unlock>
80006b10:	ec cc ff f8 	sub	r12,r6,-8
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
80006b14:	d8 32       	popm	r0-r7,pc
80006b16:	12 96       	mov	r6,r9
80006b18:	02 36       	cp.w	r6,r1
         {
           bin = next_bin(bin);
           ++idx;
         }
#endif
      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
80006b1a:	cd 31       	brne	80006ac0 <_malloc_r+0x220>
80006b1c:	2f f2       	sub	r2,-1
80006b1e:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
            return chunk2mem(victim);
          }

        }

       bin = next_bin(bin);
80006b22:	c0 30       	breq	80006b28 <_malloc_r+0x288>
80006b24:	2f 81       	sub	r1,-8
80006b26:	cc bb       	rjmp	80006abc <_malloc_r+0x21c>

      /* Clear out the block bit. */

      do   /* Possibly backtrack to try to clear a partial block */
      {
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
80006b28:	1c 98       	mov	r8,lr
80006b2a:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
        {
          binblocks &= ~block;
80006b2e:	c0 81       	brne	80006b3e <_malloc_r+0x29e>
80006b30:	68 19       	ld.w	r9,r4[0x4]
80006b32:	f6 08 11 ff 	rsub	r8,r11,-1
80006b36:	f3 e8 00 08 	and	r8,r9,r8
          break;
80006b3a:	89 18       	st.w	r4[0x4],r8
        }
        --startidx;
       q = prev_bin(q);
80006b3c:	c0 78       	rjmp	80006b4a <_malloc_r+0x2aa>
80006b3e:	f0 c9 00 08 	sub	r9,r8,8
      } while (first(q) == q);
80006b42:	20 13       	sub	r3,1
80006b44:	70 08       	ld.w	r8,r8[0x0]
80006b46:	12 38       	cp.w	r8,r9

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
80006b48:	cf 10       	breq	80006b2a <_malloc_r+0x28a>
80006b4a:	a1 7b       	lsl	r11,0x1
80006b4c:	68 18       	ld.w	r8,r4[0x4]
80006b4e:	10 3b       	cp.w	r11,r8
80006b50:	e0 8b 00 0c 	brhi	80006b68 <_malloc_r+0x2c8>
80006b54:	58 0b       	cp.w	r11,0
80006b56:	c0 90       	breq	80006b68 <_malloc_r+0x2c8>
80006b58:	04 93       	mov	r3,r2
      {
        while ((block & binblocks) == 0)
        {
          idx += BINBLOCKWIDTH;
80006b5a:	c0 38       	rjmp	80006b60 <_malloc_r+0x2c0>
          block <<= 1;
80006b5c:	2f c3       	sub	r3,-4

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
      {
        while ((block & binblocks) == 0)
80006b5e:	a1 7b       	lsl	r11,0x1
80006b60:	f7 e8 00 09 	and	r9,r11,r8
80006b64:	ca 81       	brne	80006ab4 <_malloc_r+0x214>
80006b66:	cf bb       	rjmp	80006b5c <_malloc_r+0x2bc>
80006b68:	68 23       	ld.w	r3,r4[0x8]
80006b6a:	66 12       	ld.w	r2,r3[0x4]
80006b6c:	e0 12 ff fc 	andl	r2,0xfffc


  /* Try to use top chunk */

  /* Require that there be a remainder, ensuring top always exists  */
  remainder_size = long_sub_size_t(chunksize(top), nb);
80006b70:	0e 32       	cp.w	r2,r7
80006b72:	5f 39       	srlo	r9
80006b74:	e4 07 01 08 	sub	r8,r2,r7
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
80006b78:	58 f8       	cp.w	r8,15
80006b7a:	5f aa       	srle	r10


  /* Try to use top chunk */

  /* Require that there be a remainder, ensuring top always exists  */
  remainder_size = long_sub_size_t(chunksize(top), nb);
80006b7c:	f5 e9 10 09 	or	r9,r10,r9
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
80006b80:	e0 80 00 96 	breq	80006cac <_malloc_r+0x40c>
80006b84:	e0 68 09 80 	mov	r8,2432
80006b88:	70 01       	ld.w	r1,r8[0x0]
80006b8a:	e0 68 05 40 	mov	r8,1344
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));

  /* Pad request with top_pad plus minimal overhead */
  
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
80006b8e:	2f 01       	sub	r1,-16

  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
80006b90:	70 08       	ld.w	r8,r8[0x0]
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));

  /* Pad request with top_pad plus minimal overhead */
  
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
80006b92:	0e 01       	add	r1,r7

  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
80006b94:	5b f8       	cp.w	r8,-1
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));

  /* Pad request with top_pad plus minimal overhead */
  
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
80006b96:	c0 40       	breq	80006b9e <_malloc_r+0x2fe>

  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
80006b98:	28 11       	sub	r1,-127
80006b9a:	e0 11 ff 80 	andl	r1,0xff80
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);
80006b9e:	02 9b       	mov	r11,r1
80006ba0:	0a 9c       	mov	r12,r5

  brk = (char*)(MORECORE (sbrk_size));
80006ba2:	c3 9d       	rcall	80006e14 <_sbrk_r>
80006ba4:	18 96       	mov	r6,r12
80006ba6:	5b fc       	cp.w	r12,-1
80006ba8:	c7 30       	breq	80006c8e <_malloc_r+0x3ee>
80006baa:	e6 02 00 08 	add	r8,r3,r2

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
80006bae:	10 3c       	cp.w	r12,r8
  char*     new_brk;              /* return of 2nd sbrk call */
  INTERNAL_SIZE_T top_size;       /* new size of top chunk */

  mchunkptr old_top     = top;  /* Record state of old top */
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));
80006bb0:	c0 32       	brcc	80006bb6 <_malloc_r+0x316>
80006bb2:	08 33       	cp.w	r3,r4
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);

  brk = (char*)(MORECORE (sbrk_size));

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
80006bb4:	c6 d1       	brne	80006c8e <_malloc_r+0x3ee>
80006bb6:	e0 6a 09 84 	mov	r10,2436
80006bba:	74 09       	ld.w	r9,r10[0x0]
      (brk < old_end && old_top != initial_top))
    return;

  sbrked_mem += sbrk_size;
80006bbc:	e2 09 00 09 	add	r9,r1,r9
80006bc0:	95 09       	st.w	r10[0x0],r9
80006bc2:	10 36       	cp.w	r6,r8
80006bc4:	c0 a1       	brne	80006bd8 <_malloc_r+0x338>

  if (brk == old_end /* can just add bytes to current top, unless
80006bc6:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80006bca:	c0 71       	brne	80006bd8 <_malloc_r+0x338>
80006bcc:	e2 02 00 02 	add	r2,r1,r2
			previous correction failed */
      && ((POINTER_UINT)old_end & (pagesz - 1)) == 0)
  {
    top_size = sbrk_size + old_top_size;
    set_head(top, top_size | PREV_INUSE);
80006bd0:	68 28       	ld.w	r8,r4[0x8]
80006bd2:	a1 a2       	sbr	r2,0x0
80006bd4:	91 12       	st.w	r8[0x4],r2
80006bd6:	c4 b8       	rjmp	80006c6c <_malloc_r+0x3cc>
80006bd8:	e0 6a 05 40 	mov	r10,1344
  }
  else
  {
    if (sbrk_base == (char*)(-1))  /* First time through. Record base */
80006bdc:	74 0b       	ld.w	r11,r10[0x0]
80006bde:	5b fb       	cp.w	r11,-1
80006be0:	c0 31       	brne	80006be6 <_malloc_r+0x346>
80006be2:	95 06       	st.w	r10[0x0],r6
      sbrk_base = brk;
80006be4:	c0 78       	rjmp	80006bf2 <_malloc_r+0x352>
80006be6:	ec 09 00 09 	add	r9,r6,r9
    else  /* Someone else called sbrk().  Count those bytes as sbrked_mem. */
      sbrked_mem += brk - (char*)old_end;
80006bea:	e0 6a 09 84 	mov	r10,2436
80006bee:	10 19       	sub	r9,r8
80006bf0:	95 09       	st.w	r10[0x0],r9

    /* Guarantee alignment of first new chunk made from this space */
    front_misalign = (POINTER_UINT)chunk2mem(brk) & MALLOC_ALIGN_MASK;
80006bf2:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
    if (front_misalign > 0) 
80006bf6:	c0 40       	breq	80006bfe <_malloc_r+0x35e>
    {
      correction = (MALLOC_ALIGNMENT) - front_misalign;
80006bf8:	f0 08 11 08 	rsub	r8,r8,8
      brk += correction;
80006bfc:	10 06       	add	r6,r8
    }
    else
      correction = 0;

    /* Guarantee the next brk will be at a page boundary */
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
80006bfe:	28 08       	sub	r8,-128
80006c00:	ec 01 00 01 	add	r1,r6,r1

    /* Allocate correction */
    new_brk = (char*)(MORECORE (correction));
80006c04:	0a 9c       	mov	r12,r5
    }
    else
      correction = 0;

    /* Guarantee the next brk will be at a page boundary */
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
80006c06:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80006c0a:	f0 01 01 01 	sub	r1,r8,r1

    /* Allocate correction */
    new_brk = (char*)(MORECORE (correction));
80006c0e:	02 9b       	mov	r11,r1
80006c10:	c0 2d       	rcall	80006e14 <_sbrk_r>
80006c12:	30 08       	mov	r8,0
    if (new_brk == (char*)(MORECORE_FAILURE))
80006c14:	5b fc       	cp.w	r12,-1
80006c16:	c0 31       	brne	80006c1c <_malloc_r+0x37c>
80006c18:	0c 9c       	mov	r12,r6
80006c1a:	10 91       	mov	r1,r8
80006c1c:	e0 68 09 84 	mov	r8,2436

    sbrked_mem += correction;

    top = (mchunkptr)brk;
    top_size = new_brk - brk + correction;
    set_head(top, top_size | PREV_INUSE);
80006c20:	0c 1c       	sub	r12,r6
	correction = 0;
	correction_failed = 1;
	new_brk = brk;
      }

    sbrked_mem += correction;
80006c22:	70 09       	ld.w	r9,r8[0x0]

    top = (mchunkptr)brk;
    top_size = new_brk - brk + correction;
    set_head(top, top_size | PREV_INUSE);
80006c24:	02 0c       	add	r12,r1
	new_brk = brk;
      }

    sbrked_mem += correction;

    top = (mchunkptr)brk;
80006c26:	89 26       	st.w	r4[0x8],r6
    top_size = new_brk - brk + correction;
    set_head(top, top_size | PREV_INUSE);
80006c28:	a1 ac       	sbr	r12,0x0
	correction = 0;
	correction_failed = 1;
	new_brk = brk;
      }

    sbrked_mem += correction;
80006c2a:	12 01       	add	r1,r9

    top = (mchunkptr)brk;
    top_size = new_brk - brk + correction;
    set_head(top, top_size | PREV_INUSE);
80006c2c:	8d 1c       	st.w	r6[0x4],r12
	correction = 0;
	correction_failed = 1;
	new_brk = brk;
      }

    sbrked_mem += correction;
80006c2e:	91 01       	st.w	r8[0x0],r1

    top = (mchunkptr)brk;
    top_size = new_brk - brk + correction;
    set_head(top, top_size | PREV_INUSE);

    if (old_top != initial_top)
80006c30:	08 33       	cp.w	r3,r4
80006c32:	c1 d0       	breq	80006c6c <_malloc_r+0x3cc>

      /* There must have been an intervening foreign sbrk call. */
      /* A double fencepost is necessary to prevent consolidation */

      /* If not enough space to do this, then user did something very wrong */
      if (old_top_size < MINSIZE) 
80006c34:	58 f2       	cp.w	r2,15
80006c36:	e0 8b 00 05 	brhi	80006c40 <_malloc_r+0x3a0>
      {
        set_head(top, PREV_INUSE); /* will force null return from malloc */
80006c3a:	30 18       	mov	r8,1
80006c3c:	8d 18       	st.w	r6[0x4],r8
80006c3e:	c2 88       	rjmp	80006c8e <_malloc_r+0x3ee>
        return;
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
      chunk_at_offset(old_top, old_top_size          )->size =
80006c40:	30 59       	mov	r9,5
        set_head(top, PREV_INUSE); /* will force null return from malloc */
        return;
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
80006c42:	20 c2       	sub	r2,12
80006c44:	e0 12 ff f8 	andl	r2,0xfff8
      chunk_at_offset(old_top, old_top_size          )->size =
80006c48:	e6 02 00 08 	add	r8,r3,r2
        SIZE_SZ|PREV_INUSE;
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
80006c4c:	91 29       	st.w	r8[0x8],r9
        return;
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
      chunk_at_offset(old_top, old_top_size          )->size =
80006c4e:	91 19       	st.w	r8[0x4],r9
        SIZE_SZ|PREV_INUSE;
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
        SIZE_SZ|PREV_INUSE;
      set_head_size(old_top, old_top_size);
80006c50:	66 18       	ld.w	r8,r3[0x4]
80006c52:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006c56:	e5 e8 10 08 	or	r8,r2,r8
80006c5a:	87 18       	st.w	r3[0x4],r8
      /* If possible, release the rest. */
      if (old_top_size >= MINSIZE) 
80006c5c:	58 f2       	cp.w	r2,15
80006c5e:	e0 88 00 07 	brls	80006c6c <_malloc_r+0x3cc>
        fREe(RCALL chunk2mem(old_top));
80006c62:	e6 cb ff f8 	sub	r11,r3,-8
80006c66:	0a 9c       	mov	r12,r5
80006c68:	e0 a0 02 24 	rcall	800070b0 <_free_r>
    }
  }

  if ((unsigned long)sbrked_mem > (unsigned long)max_sbrked_mem) 
80006c6c:	e0 68 09 84 	mov	r8,2436
80006c70:	e0 69 09 7c 	mov	r9,2428
80006c74:	70 08       	ld.w	r8,r8[0x0]
80006c76:	72 0a       	ld.w	r10,r9[0x0]
80006c78:	14 38       	cp.w	r8,r10
    max_sbrked_mem = sbrked_mem;
80006c7a:	e0 88 00 03 	brls	80006c80 <_malloc_r+0x3e0>
#if HAVE_MMAP
  if ((unsigned long)(mmapped_mem + sbrked_mem) > (unsigned long)max_total_mem) 
    max_total_mem = mmapped_mem + sbrked_mem;
#else
  if ((unsigned long)(sbrked_mem) > (unsigned long)max_total_mem) 
80006c7e:	93 08       	st.w	r9[0x0],r8
80006c80:	e0 69 09 78 	mov	r9,2424
80006c84:	72 0a       	ld.w	r10,r9[0x0]
    max_total_mem = sbrked_mem;
80006c86:	14 38       	cp.w	r8,r10
    }
#endif

    /* Try to extend */
    malloc_extend_top(RCALL nb);
    remainder_size = long_sub_size_t(chunksize(top), nb);
80006c88:	e0 88 00 03 	brls	80006c8e <_malloc_r+0x3ee>
80006c8c:	93 08       	st.w	r9[0x0],r8
80006c8e:	68 28       	ld.w	r8,r4[0x8]
    if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
80006c90:	70 18       	ld.w	r8,r8[0x4]
80006c92:	e0 18 ff fc 	andl	r8,0xfffc
80006c96:	0e 38       	cp.w	r8,r7
80006c98:	5f 39       	srlo	r9
80006c9a:	0e 18       	sub	r8,r7
80006c9c:	58 f8       	cp.w	r8,15
80006c9e:	5f aa       	srle	r10
    {
      MALLOC_UNLOCK;
80006ca0:	f5 e9 10 09 	or	r9,r10,r9
80006ca4:	c0 40       	breq	80006cac <_malloc_r+0x40c>
80006ca6:	0a 9c       	mov	r12,r5
80006ca8:	cb 5c       	rcall	80006e12 <__malloc_unlock>
80006caa:	d8 3a       	popm	r0-r7,pc,r12=0
80006cac:	68 26       	ld.w	r6,r4[0x8]
80006cae:	a1 a8       	sbr	r8,0x0
80006cb0:	0e 99       	mov	r9,r7
80006cb2:	a1 a9       	sbr	r9,0x0
80006cb4:	8d 19       	st.w	r6[0x4],r9
80006cb6:	ec 07 00 07 	add	r7,r6,r7
80006cba:	0a 9c       	mov	r12,r5
80006cbc:	89 27       	st.w	r4[0x8],r7
80006cbe:	8f 18       	st.w	r7[0x4],r8
80006cc0:	ca 9c       	rcall	80006e12 <__malloc_unlock>
80006cc2:	ec cc ff f8 	sub	r12,r6,-8
80006cc6:	d8 32       	popm	r0-r7,pc

80006cc8 <memcpy>:
      return 0; /* propagate failure */
    }
  }

  victim = top;
80006cc8:	58 8a       	cp.w	r10,8
  set_head(victim, nb | PREV_INUSE);
  top = chunk_at_offset(victim, nb);
  set_head(top, remainder_size | PREV_INUSE);
80006cca:	c2 f5       	brlt	80006d28 <memcpy+0x60>
      return 0; /* propagate failure */
    }
  }

  victim = top;
  set_head(victim, nb | PREV_INUSE);
80006ccc:	f9 eb 10 09 	or	r9,r12,r11
80006cd0:	e2 19 00 03 	andl	r9,0x3,COH
  top = chunk_at_offset(victim, nb);
80006cd4:	e0 81 00 97 	brne	80006e02 <memcpy+0x13a>
80006cd8:	e0 4a 00 20 	cp.w	r10,32
  set_head(top, remainder_size | PREV_INUSE);
  check_malloced_chunk(victim, nb);
  MALLOC_UNLOCK;
80006cdc:	c3 b4       	brge	80006d52 <memcpy+0x8a>
80006cde:	f4 08 14 02 	asr	r8,r10,0x2
  return chunk2mem(victim);
80006ce2:	f0 09 11 08 	rsub	r9,r8,8

#endif /* MALLOC_PROVIDED */
}
80006ce6:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80006cea:	76 69       	ld.w	r9,r11[0x18]
80006cec:	99 69       	st.w	r12[0x18],r9
80006cee:	76 59       	ld.w	r9,r11[0x14]
80006cf0:	99 59       	st.w	r12[0x14],r9
80006cf2:	76 49       	ld.w	r9,r11[0x10]
80006cf4:	99 49       	st.w	r12[0x10],r9
80006cf6:	76 39       	ld.w	r9,r11[0xc]
80006cf8:	99 39       	st.w	r12[0xc],r9
80006cfa:	76 29       	ld.w	r9,r11[0x8]
80006cfc:	99 29       	st.w	r12[0x8],r9
80006cfe:	76 19       	ld.w	r9,r11[0x4]
80006d00:	99 19       	st.w	r12[0x4],r9
80006d02:	76 09       	ld.w	r9,r11[0x0]
80006d04:	99 09       	st.w	r12[0x0],r9
80006d06:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80006d0a:	f8 08 00 28 	add	r8,r12,r8<<0x2
80006d0e:	e0 1a 00 03 	andl	r10,0x3
80006d12:	f4 0a 11 04 	rsub	r10,r10,4
80006d16:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80006d1a:	17 a9       	ld.ub	r9,r11[0x2]
80006d1c:	b0 a9       	st.b	r8[0x2],r9
80006d1e:	17 99       	ld.ub	r9,r11[0x1]
80006d20:	b0 99       	st.b	r8[0x1],r9
80006d22:	17 89       	ld.ub	r9,r11[0x0]
80006d24:	b0 89       	st.b	r8[0x0],r9
80006d26:	5e fc       	retal	r12
80006d28:	f4 0a 11 09 	rsub	r10,r10,9
80006d2c:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80006d30:	17 f9       	ld.ub	r9,r11[0x7]
80006d32:	b8 f9       	st.b	r12[0x7],r9
80006d34:	17 e9       	ld.ub	r9,r11[0x6]
80006d36:	b8 e9       	st.b	r12[0x6],r9
80006d38:	17 d9       	ld.ub	r9,r11[0x5]
80006d3a:	b8 d9       	st.b	r12[0x5],r9
80006d3c:	17 c9       	ld.ub	r9,r11[0x4]
80006d3e:	b8 c9       	st.b	r12[0x4],r9
80006d40:	17 b9       	ld.ub	r9,r11[0x3]
80006d42:	b8 b9       	st.b	r12[0x3],r9
80006d44:	17 a9       	ld.ub	r9,r11[0x2]
80006d46:	b8 a9       	st.b	r12[0x2],r9
80006d48:	17 99       	ld.ub	r9,r11[0x1]
80006d4a:	b8 99       	st.b	r12[0x1],r9
80006d4c:	17 89       	ld.ub	r9,r11[0x0]
80006d4e:	b8 89       	st.b	r12[0x0],r9
80006d50:	5e fc       	retal	r12
80006d52:	eb cd 40 c0 	pushm	r6-r7,lr
80006d56:	18 99       	mov	r9,r12
80006d58:	22 0a       	sub	r10,32
80006d5a:	b7 07       	ld.d	r6,r11++
80006d5c:	b3 26       	st.d	r9++,r6
80006d5e:	b7 07       	ld.d	r6,r11++
80006d60:	b3 26       	st.d	r9++,r6
80006d62:	b7 07       	ld.d	r6,r11++
80006d64:	b3 26       	st.d	r9++,r6
80006d66:	b7 07       	ld.d	r6,r11++
80006d68:	b3 26       	st.d	r9++,r6
80006d6a:	22 0a       	sub	r10,32
80006d6c:	cf 74       	brge	80006d5a <memcpy+0x92>
80006d6e:	2f 0a       	sub	r10,-16
80006d70:	c0 65       	brlt	80006d7c <memcpy+0xb4>
80006d72:	b7 07       	ld.d	r6,r11++
80006d74:	b3 26       	st.d	r9++,r6
80006d76:	b7 07       	ld.d	r6,r11++
80006d78:	b3 26       	st.d	r9++,r6
80006d7a:	21 0a       	sub	r10,16
80006d7c:	5c 3a       	neg	r10
80006d7e:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80006d82:	d7 03       	nop
80006d84:	d7 03       	nop
80006d86:	f7 36 00 0e 	ld.ub	r6,r11[14]
80006d8a:	f3 66 00 0e 	st.b	r9[14],r6
80006d8e:	f7 36 00 0d 	ld.ub	r6,r11[13]
80006d92:	f3 66 00 0d 	st.b	r9[13],r6
80006d96:	f7 36 00 0c 	ld.ub	r6,r11[12]
80006d9a:	f3 66 00 0c 	st.b	r9[12],r6
80006d9e:	f7 36 00 0b 	ld.ub	r6,r11[11]
80006da2:	f3 66 00 0b 	st.b	r9[11],r6
80006da6:	f7 36 00 0a 	ld.ub	r6,r11[10]
80006daa:	f3 66 00 0a 	st.b	r9[10],r6
80006dae:	f7 36 00 09 	ld.ub	r6,r11[9]
80006db2:	f3 66 00 09 	st.b	r9[9],r6
80006db6:	f7 36 00 08 	ld.ub	r6,r11[8]
80006dba:	f3 66 00 08 	st.b	r9[8],r6
80006dbe:	f7 36 00 07 	ld.ub	r6,r11[7]
80006dc2:	f3 66 00 07 	st.b	r9[7],r6
80006dc6:	f7 36 00 06 	ld.ub	r6,r11[6]
80006dca:	f3 66 00 06 	st.b	r9[6],r6
80006dce:	f7 36 00 05 	ld.ub	r6,r11[5]
80006dd2:	f3 66 00 05 	st.b	r9[5],r6
80006dd6:	f7 36 00 04 	ld.ub	r6,r11[4]
80006dda:	f3 66 00 04 	st.b	r9[4],r6
80006dde:	f7 36 00 03 	ld.ub	r6,r11[3]
80006de2:	f3 66 00 03 	st.b	r9[3],r6
80006de6:	f7 36 00 02 	ld.ub	r6,r11[2]
80006dea:	f3 66 00 02 	st.b	r9[2],r6
80006dee:	f7 36 00 01 	ld.ub	r6,r11[1]
80006df2:	f3 66 00 01 	st.b	r9[1],r6
80006df6:	f7 36 00 00 	ld.ub	r6,r11[0]
80006dfa:	f3 66 00 00 	st.b	r9[0],r6
80006dfe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006e02:	20 1a       	sub	r10,1
80006e04:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80006e08:	f8 0a 0b 09 	st.b	r12[r10],r9
80006e0c:	cf b1       	brne	80006e02 <memcpy+0x13a>
80006e0e:	5e fc       	retal	r12

80006e10 <__malloc_lock>:
     struct _reent *ptr;
{
#ifndef __SINGLE_THREAD__
  __lock_acquire_recursive (__malloc_lock_object);
#endif
}
80006e10:	5e fc       	retal	r12

80006e12 <__malloc_unlock>:
     struct _reent *ptr;
{
#ifndef __SINGLE_THREAD__
  __lock_release_recursive (__malloc_lock_object);
#endif
}
80006e12:	5e fc       	retal	r12

80006e14 <_sbrk_r>:

void *
_DEFUN (_sbrk_r, (ptr, incr),
     struct _reent *ptr _AND
     ptrdiff_t incr)
{
80006e14:	d4 21       	pushm	r4-r7,lr
  char *ret;
  void *_sbrk(ptrdiff_t);

  errno = 0;
80006e16:	30 08       	mov	r8,0

void *
_DEFUN (_sbrk_r, (ptr, incr),
     struct _reent *ptr _AND
     ptrdiff_t incr)
{
80006e18:	18 97       	mov	r7,r12
  char *ret;
  void *_sbrk(ptrdiff_t);

  errno = 0;
80006e1a:	e0 66 0d 50 	mov	r6,3408
80006e1e:	16 9c       	mov	r12,r11
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
80006e20:	8d 08       	st.w	r6[0x0],r8
80006e22:	c2 7c       	rcall	80006e70 <_sbrk>
80006e24:	5b fc       	cp.w	r12,-1
80006e26:	c0 51       	brne	80006e30 <_sbrk_r+0x1c>
80006e28:	6c 08       	ld.w	r8,r6[0x0]
80006e2a:	58 08       	cp.w	r8,0
80006e2c:	c0 20       	breq	80006e30 <_sbrk_r+0x1c>
    ptr->_errno = errno;
80006e2e:	8f 38       	st.w	r7[0xc],r8
  return ret;
}
80006e30:	d8 22       	popm	r4-r7,pc
80006e32:	d7 03       	nop

80006e34 <strncmp>:
	_CONST char *s1 _AND
	_CONST char *s2 _AND
	size_t n)
{
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  if (n == 0)
80006e34:	58 0a       	cp.w	r10,0
80006e36:	c0 81       	brne	80006e46 <strncmp+0x12>
80006e38:	5e fa       	retal	r10
    return 0;

  while (n-- != 0 && *s1 == *s2)
    {
      if (n == 0 || *s1 == '\0')
80006e3a:	58 0a       	cp.w	r10,0
80006e3c:	c0 b0       	breq	80006e52 <strncmp+0x1e>
80006e3e:	58 08       	cp.w	r8,0
80006e40:	c0 90       	breq	80006e52 <strncmp+0x1e>
	break;
      s1++;
80006e42:	2f fc       	sub	r12,-1
      s2++;
80006e44:	2f fb       	sub	r11,-1
{
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  if (n == 0)
    return 0;

  while (n-- != 0 && *s1 == *s2)
80006e46:	20 1a       	sub	r10,1
80006e48:	19 88       	ld.ub	r8,r12[0x0]
80006e4a:	17 89       	ld.ub	r9,r11[0x0]
80006e4c:	f0 09 18 00 	cp.b	r9,r8
80006e50:	cf 50       	breq	80006e3a <strncmp+0x6>
	break;
      s1++;
      s2++;
    }

  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
80006e52:	19 8c       	ld.ub	r12,r12[0x0]
80006e54:	17 88       	ld.ub	r8,r11[0x0]
80006e56:	10 1c       	sub	r12,r8
      s1++;
      s2++;
    }
  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
#endif /* not PREFER_SIZE_OVER_SPEED */
}
80006e58:	5e fc       	retal	r12

80006e5a <_init_startup>:

int  __attribute__((weak))
     _init_startup ()
{
  return 0;
}
80006e5a:	5e fd       	retal	0

80006e5c <_init_argv>:
}
  
void __attribute__((weak,naked))
     _init_argv (void *arg_mem_top)
{
  T2H_SYSCALL(T2H_SYSCALL_INIT_ARGV);
80006e5c:	30 e8       	mov	r8,14
80006e5e:	d6 73       	breakpoint
80006e60:	3f fc       	mov	r12,-1
80006e62:	35 8b       	mov	r11,88
  T2H_SYSCALL_RETURN();
80006e64:	5e fc       	retal	r12

80006e66 <_exit>:
}

void __attribute__((weak,naked))
     _exit( int code )
{
  T2H_SYSCALL(T2H_SYSCALL_EXIT);
80006e66:	30 d8       	mov	r8,13
80006e68:	d6 73       	breakpoint
80006e6a:	3f fc       	mov	r12,-1
80006e6c:	35 8b       	mov	r11,88
80006e6e:	c0 08       	rjmp	80006e6e <_exit+0x8>

80006e70 <_sbrk>:
 
extern void __heap_start__, __heap_end__;

void * __attribute__((weak))
     _sbrk(int increment)
{
80006e70:	d4 01       	pushm	lr
  static void *cur_heap_pos = 0;

  //Initialize cur_heap_pos
  if ( cur_heap_pos == 0 )
80006e72:	e0 68 09 ac 	mov	r8,2476
80006e76:	70 09       	ld.w	r9,r8[0x0]
80006e78:	58 09       	cp.w	r9,0
    cur_heap_pos = &__heap_start__;
80006e7a:	c0 41       	brne	80006e82 <_sbrk+0x12>
80006e7c:	e0 69 0d 58 	mov	r9,3416
  
  if ( (cur_heap_pos + increment) <= &__heap_end__ ){
80006e80:	91 09       	st.w	r8[0x0],r9
80006e82:	e0 69 09 ac 	mov	r9,2476
80006e86:	e0 6a 70 00 	mov	r10,28672
80006e8a:	72 08       	ld.w	r8,r9[0x0]
80006e8c:	f0 0c 00 0c 	add	r12,r8,r12
    void *heap_pos = cur_heap_pos;
    cur_heap_pos += increment;
    return heap_pos;
80006e90:	14 3c       	cp.w	r12,r10
    fprintf(stderr, "\tHeap start address\t= 0x%x\n", &__heap_start__);
    fprintf(stderr, "\tHeap end address\t= 0x%x\n", &__heap_end__);
    fprintf(stderr, "\tCurrent heap address\t= 0x%x\n", cur_heap_pos);
    fflush(stderr);
#endif
    errno = ENOMEM;
80006e92:	e0 8b 00 04 	brhi	80006e9a <_sbrk+0x2a>
80006e96:	93 0c       	st.w	r9[0x0],r12
80006e98:	c0 58       	rjmp	80006ea2 <_sbrk+0x32>
80006e9a:	cb fc       	rcall	80007018 <__errno>
    return (void *)-1;
  }  
  return (void *)-1;
}
80006e9c:	30 c8       	mov	r8,12
80006e9e:	99 08       	st.w	r12[0x0],r8
80006ea0:	3f f8       	mov	r8,-1
80006ea2:	10 9c       	mov	r12,r8
80006ea4:	d8 02       	popm	pc
80006ea6:	d7 03       	nop

80006ea8 <__register_exitproc>:
	(type, fn, arg, d),
	int type _AND
	void (*fn) (void) _AND
	void *arg _AND
	void *d)
{
80006ea8:	d4 31       	pushm	r0-r7,lr
  __LOCK_INIT(static, lock);

  __lock_acquire(lock);
#endif

  p = _GLOBAL_REENT->_atexit;
80006eaa:	fe c8 f5 b2 	sub	r8,pc,-2638
80006eae:	18 97       	mov	r7,r12
	(type, fn, arg, d),
	int type _AND
	void (*fn) (void) _AND
	void *arg _AND
	void *d)
{
80006eb0:	70 03       	ld.w	r3,r8[0x0]
80006eb2:	16 96       	mov	r6,r11
80006eb4:	14 95       	mov	r5,r10
  __LOCK_INIT(static, lock);

  __lock_acquire(lock);
#endif

  p = _GLOBAL_REENT->_atexit;
80006eb6:	12 92       	mov	r2,r9
  if (p == NULL)
80006eb8:	67 24       	ld.w	r4,r3[0x48]
80006eba:	58 04       	cp.w	r4,0
    _GLOBAL_REENT->_atexit = p = &_GLOBAL_REENT->_atexit0;
80006ebc:	c0 51       	brne	80006ec6 <__register_exitproc+0x1e>
80006ebe:	e6 c4 ff b4 	sub	r4,r3,-76
80006ec2:	e7 44 00 48 	st.w	r3[72],r4
  if (p->_ind >= _ATEXIT_SIZE)
80006ec6:	68 18       	ld.w	r8,r4[0x4]
80006ec8:	59 f8       	cp.w	r8,31
80006eca:	e0 8a 00 0e 	brle	80006ee6 <__register_exitproc+0x3e>
    {
#ifndef _ATEXIT_DYNAMIC_ALLOC
      return -1;
#else
      p = (struct _atexit *) malloc (sizeof *p);
80006ece:	e0 6c 00 8c 	mov	r12,140
80006ed2:	fe b0 fc df 	rcall	80006890 <malloc>
      if (p == NULL)
80006ed6:	18 94       	mov	r4,r12
	  __lock_release(lock);
#endif
	  return -1;
	}
      p->_ind = 0;
      p->_next = _GLOBAL_REENT->_atexit;
80006ed8:	c3 90       	breq	80006f4a <__register_exitproc+0xa2>
80006eda:	67 28       	ld.w	r8,r3[0x48]
      _GLOBAL_REENT->_atexit = p;
80006edc:	99 08       	st.w	r12[0x0],r8
80006ede:	e7 4c 00 48 	st.w	r3[72],r12
#ifndef __SINGLE_THREAD__
	  __lock_release(lock);
#endif
	  return -1;
	}
      p->_ind = 0;
80006ee2:	30 08       	mov	r8,0
      p->_on_exit_args._is_cxa = 0;
#endif
#endif
    }

  if (type != __et_atexit)
80006ee4:	99 18       	st.w	r12[0x4],r8
80006ee6:	58 07       	cp.w	r7,0
    {
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
80006ee8:	c2 80       	breq	80006f38 <__register_exitproc+0x90>
80006eea:	e8 fc 00 88 	ld.w	r12,r4[136]
      if (args == NULL)
80006eee:	58 0c       	cp.w	r12,0
	{
	  args = malloc (sizeof * p->_on_exit_args_ptr);
80006ef0:	c0 d1       	brne	80006f0a <__register_exitproc+0x62>
80006ef2:	e0 6c 01 08 	mov	r12,264
80006ef6:	fe b0 fc cd 	rcall	80006890 <malloc>
#ifndef __SINGLE_THREAD__
	      __lock_release(lock);
#endif
	      return -1;
	    }
	  args->_fntypes = 0;
80006efa:	c2 80       	breq	80006f4a <__register_exitproc+0xa2>
	  args->_is_cxa = 0;
	  p->_on_exit_args_ptr = args;
80006efc:	30 08       	mov	r8,0
80006efe:	e9 4c 00 88 	st.w	r4[136],r12
	      __lock_release(lock);
#endif
	      return -1;
	    }
	  args->_fntypes = 0;
	  args->_is_cxa = 0;
80006f02:	f9 48 01 04 	st.w	r12[260],r8
#ifndef __SINGLE_THREAD__
	      __lock_release(lock);
#endif
	      return -1;
	    }
	  args->_fntypes = 0;
80006f06:	f9 48 01 00 	st.w	r12[256],r8
#else
      args = &p->_on_exit_args;
#endif
      args->_fnargs[p->_ind] = arg;
      args->_fntypes |= (1 << p->_ind);
      args->_dso_handle[p->_ind] = d;
80006f0a:	68 18       	ld.w	r8,r4[0x4]
80006f0c:	f0 c9 ff e0 	sub	r9,r8,-32
	  p->_on_exit_args_ptr = args;
	}
#else
      args = &p->_on_exit_args;
#endif
      args->_fnargs[p->_ind] = arg;
80006f10:	f8 08 09 25 	st.w	r12[r8<<0x2],r5
      args->_fntypes |= (1 << p->_ind);
      args->_dso_handle[p->_ind] = d;
80006f14:	f8 09 09 22 	st.w	r12[r9<<0x2],r2
	}
#else
      args = &p->_on_exit_args;
#endif
      args->_fnargs[p->_ind] = arg;
      args->_fntypes |= (1 << p->_ind);
80006f18:	30 1a       	mov	r10,1
80006f1a:	f8 f9 01 00 	ld.w	r9,r12[256]
80006f1e:	f4 08 09 48 	lsl	r8,r10,r8
80006f22:	10 49       	or	r9,r8
80006f24:	f9 49 01 00 	st.w	r12[256],r9
      args->_dso_handle[p->_ind] = d;
      if (type == __et_cxa)
80006f28:	58 27       	cp.w	r7,2
	args->_is_cxa |= (1 << p->_ind);
80006f2a:	c0 71       	brne	80006f38 <__register_exitproc+0x90>
80006f2c:	f8 f9 01 04 	ld.w	r9,r12[260]
80006f30:	f3 e8 10 08 	or	r8,r9,r8
80006f34:	f9 48 01 04 	st.w	r12[260],r8
    }
  p->_fns[p->_ind++] = fn;
80006f38:	68 18       	ld.w	r8,r4[0x4]
80006f3a:	30 0c       	mov	r12,0
80006f3c:	f0 c9 ff ff 	sub	r9,r8,-1
80006f40:	2f e8       	sub	r8,-2
80006f42:	89 19       	st.w	r4[0x4],r9
80006f44:	e8 08 09 26 	st.w	r4[r8<<0x2],r6
#ifndef __SINGLE_THREAD__
  __lock_release(lock);
#endif
  return 0;
80006f48:	d8 32       	popm	r0-r7,pc
80006f4a:	dc 3a       	popm	r0-r7,pc,r12=-1

80006f4c <__call_exitprocs>:
 */

void 
_DEFUN (__call_exitprocs, (code, d),
	int code _AND _PTR d)
{
80006f4c:	d4 31       	pushm	r0-r7,lr
80006f4e:	20 3d       	sub	sp,12
  int i;
  void (*fn) (void);

 restart:

  p = _GLOBAL_REENT->_atexit;
80006f50:	fe c8 f6 58 	sub	r8,pc,-2472
80006f54:	50 2c       	stdsp	sp[0x8],r12
 */

void 
_DEFUN (__call_exitprocs, (code, d),
	int code _AND _PTR d)
{
80006f56:	70 08       	ld.w	r8,r8[0x0]
  int i;
  void (*fn) (void);

 restart:

  p = _GLOBAL_REENT->_atexit;
80006f58:	16 91       	mov	r1,r11
  lastp = &_GLOBAL_REENT->_atexit;
80006f5a:	50 08       	stdsp	sp[0x0],r8
80006f5c:	2b 88       	sub	r8,-72
  int i;
  void (*fn) (void);

 restart:

  p = _GLOBAL_REENT->_atexit;
80006f5e:	50 18       	stdsp	sp[0x4],r8
80006f60:	40 0a       	lddsp	r10,sp[0x0]
80006f62:	40 14       	lddsp	r4,sp[0x4]
  lastp = &_GLOBAL_REENT->_atexit;
  while (p)
80006f64:	75 27       	ld.w	r7,r10[0x48]
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
#endif
      for (n = p->_ind - 1; n >= 0; n--)
80006f66:	c5 48       	rjmp	8000700e <__call_exitprocs+0xc2>
  p = _GLOBAL_REENT->_atexit;
  lastp = &_GLOBAL_REENT->_atexit;
  while (p)
    {
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
80006f68:	6e 15       	ld.w	r5,r7[0x4]
80006f6a:	ee f6 00 88 	ld.w	r6,r7[136]
#else
      args = &p->_on_exit_args;
#endif
      for (n = p->_ind - 1; n >= 0; n--)
80006f6e:	ea c2 ff ff 	sub	r2,r5,-1
80006f72:	20 15       	sub	r5,1
80006f74:	ee 02 00 22 	add	r2,r7,r2<<0x2
80006f78:	ec 05 00 23 	add	r3,r6,r5<<0x2
	  int ind;

	  i = 1 << n;

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
80006f7c:	c3 48       	rjmp	80006fe4 <__call_exitprocs+0x98>
80006f7e:	58 01       	cp.w	r1,0
80006f80:	c0 70       	breq	80006f8e <__call_exitprocs+0x42>
80006f82:	58 06       	cp.w	r6,0
80006f84:	c2 d0       	breq	80006fde <__call_exitprocs+0x92>
80006f86:	e6 f8 00 80 	ld.w	r8,r3[128]
80006f8a:	02 38       	cp.w	r8,r1
	    continue;

	  /* Remove the function now to protect against the
	     function calling exit recursively.  */
	  fn = p->_fns[n];
	  if (n == p->_ind - 1)
80006f8c:	c2 91       	brne	80006fde <__call_exitprocs+0x92>
	  if (d && (!args || args->_dso_handle[n] != d))
	    continue;

	  /* Remove the function now to protect against the
	     function calling exit recursively.  */
	  fn = p->_fns[n];
80006f8e:	6e 19       	ld.w	r9,r7[0x4]
	  if (n == p->_ind - 1)
80006f90:	64 08       	ld.w	r8,r2[0x0]
80006f92:	20 19       	sub	r9,1
80006f94:	12 35       	cp.w	r5,r9
	    p->_ind--;
80006f96:	c0 31       	brne	80006f9c <__call_exitprocs+0x50>
80006f98:	8f 15       	st.w	r7[0x4],r5
	  else
	    p->_fns[n] = NULL;
80006f9a:	c0 38       	rjmp	80006fa0 <__call_exitprocs+0x54>
80006f9c:	30 09       	mov	r9,0

	  /* Skip functions that have already been called.  */
	  if (!fn)
80006f9e:	85 09       	st.w	r2[0x0],r9
80006fa0:	58 08       	cp.w	r8,0
	    continue;

	  ind = p->_ind;
80006fa2:	c1 e0       	breq	80006fde <__call_exitprocs+0x92>

	  /* Call the function.  */
	  if (!args || (args->_fntypes & i) == 0)
80006fa4:	6e 10       	ld.w	r0,r7[0x4]
80006fa6:	58 06       	cp.w	r6,0
80006fa8:	c0 90       	breq	80006fba <__call_exitprocs+0x6e>
80006faa:	30 1a       	mov	r10,1
80006fac:	f4 05 09 49 	lsl	r9,r10,r5
80006fb0:	ec fa 01 00 	ld.w	r10,r6[256]
80006fb4:	f3 ea 00 0a 	and	r10,r9,r10
	    fn ();
80006fb8:	c0 31       	brne	80006fbe <__call_exitprocs+0x72>
	    continue;

	  ind = p->_ind;

	  /* Call the function.  */
	  if (!args || (args->_fntypes & i) == 0)
80006fba:	5d 18       	icall	r8
	    fn ();
	  else if ((args->_is_cxa & i) == 0)
80006fbc:	c0 b8       	rjmp	80006fd2 <__call_exitprocs+0x86>
80006fbe:	ec fa 01 04 	ld.w	r10,r6[260]
80006fc2:	66 0b       	ld.w	r11,r3[0x0]
80006fc4:	14 69       	and	r9,r10
	    (*((void (*)(int, _PTR)) fn))(code, args->_fnargs[n]);
80006fc6:	c0 41       	brne	80006fce <__call_exitprocs+0x82>
80006fc8:	40 2c       	lddsp	r12,sp[0x8]
80006fca:	5d 18       	icall	r8
	  else
	    (*((void (*)(_PTR)) fn))(args->_fnargs[n]);
80006fcc:	c0 38       	rjmp	80006fd2 <__call_exitprocs+0x86>
80006fce:	16 9c       	mov	r12,r11

	  /* The function we called call atexit and registered another
	     function (or functions).  Call these new functions before
	     continuing with the already registered functions.  */
	  if (ind != p->_ind || *lastp != p)
80006fd0:	5d 18       	icall	r8
80006fd2:	6e 18       	ld.w	r8,r7[0x4]
80006fd4:	10 30       	cp.w	r0,r8
80006fd6:	cc 51       	brne	80006f60 <__call_exitprocs+0x14>
80006fd8:	68 08       	ld.w	r8,r4[0x0]
80006fda:	0e 38       	cp.w	r8,r7
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
#endif
      for (n = p->_ind - 1; n >= 0; n--)
80006fdc:	cc 21       	brne	80006f60 <__call_exitprocs+0x14>
80006fde:	20 15       	sub	r5,1
80006fe0:	20 43       	sub	r3,4
80006fe2:	20 42       	sub	r2,4
80006fe4:	58 05       	cp.w	r5,0
#ifndef _ATEXIT_DYNAMIC_ALLOC
      break;
#else
      /* Move to the next block.  Free empty blocks except the last one,
	 which is part of _GLOBAL_REENT.  */
      if (p->_ind == 0 && p->_next)
80006fe6:	cc c4       	brge	80006f7e <__call_exitprocs+0x32>
80006fe8:	6e 18       	ld.w	r8,r7[0x4]
80006fea:	58 08       	cp.w	r8,0
80006fec:	c0 f1       	brne	8000700a <__call_exitprocs+0xbe>
80006fee:	6e 08       	ld.w	r8,r7[0x0]
80006ff0:	58 08       	cp.w	r8,0
	{
	  /* Remove empty block from the list.  */
	  *lastp = p->_next;
80006ff2:	c0 c0       	breq	8000700a <__call_exitprocs+0xbe>
#ifdef _REENT_SMALL
	  if (args)
80006ff4:	89 08       	st.w	r4[0x0],r8
80006ff6:	58 06       	cp.w	r6,0
	    free (args);
80006ff8:	c0 40       	breq	80007000 <__call_exitprocs+0xb4>
80006ffa:	0c 9c       	mov	r12,r6
80006ffc:	fe b0 fc 42 	rcall	80006880 <free>
#endif
	  free (p);
80007000:	0e 9c       	mov	r12,r7
80007002:	fe b0 fc 3f 	rcall	80006880 <free>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      break;
#else
      /* Move to the next block.  Free empty blocks except the last one,
	 which is part of _GLOBAL_REENT.  */
      if (p->_ind == 0 && p->_next)
80007006:	68 07       	ld.w	r7,r4[0x0]
	  free (p);
	  p = *lastp;
	}
      else
	{
	  lastp = &p->_next;
80007008:	c0 38       	rjmp	8000700e <__call_exitprocs+0xc2>
	  p = p->_next;
8000700a:	0e 94       	mov	r4,r7

 restart:

  p = _GLOBAL_REENT->_atexit;
  lastp = &_GLOBAL_REENT->_atexit;
  while (p)
8000700c:	6e 07       	ld.w	r7,r7[0x0]
8000700e:	58 07       	cp.w	r7,0
	  lastp = &p->_next;
	  p = p->_next;
	}
#endif
    }
}
80007010:	ca c1       	brne	80006f68 <__call_exitprocs+0x1c>
80007012:	2f dd       	sub	sp,-12
80007014:	d8 32       	popm	r0-r7,pc
80007016:	d7 03       	nop

80007018 <__errno>:

#ifndef _REENT_ONLY

int *
__errno ()
{
80007018:	e0 68 01 30 	mov	r8,304
  return &_REENT->_errno;
}
8000701c:	70 0c       	ld.w	r12,r8[0x0]
8000701e:	2f 4c       	sub	r12,-12
80007020:	5e fc       	retal	r12
80007022:	d7 03       	nop

80007024 <_malloc_trim_r>:
#if __STD_C
int malloc_trim(RARG size_t pad)
#else
int malloc_trim(RARG pad) RDECL size_t pad;
#endif
{
80007024:	d4 21       	pushm	r4-r7,lr
80007026:	16 95       	mov	r5,r11
80007028:	18 97       	mov	r7,r12
  char* current_brk;     /* address returned by pre-check sbrk call */
  char* new_brk;         /* address returned by negative sbrk call */

  unsigned long pagesz = malloc_getpagesize;

  MALLOC_LOCK;
8000702a:	cf 3e       	rcall	80006e10 <__malloc_lock>
8000702c:	e0 64 01 34 	mov	r4,308

  top_size = chunksize(top);
80007030:	68 28       	ld.w	r8,r4[0x8]
80007032:	70 16       	ld.w	r6,r8[0x4]
80007034:	e0 16 ff fc 	andl	r6,0xfffc
  extra = ((top_size - pad - MINSIZE + (pagesz-1)) / pagesz - 1) * pagesz;
80007038:	ec c8 ff 91 	sub	r8,r6,-111
8000703c:	f0 05 01 05 	sub	r5,r8,r5
80007040:	e0 15 ff 80 	andl	r5,0xff80
80007044:	ea c5 00 80 	sub	r5,r5,128

  if (extra < (long)pagesz)  /* Not enough memory to release */
80007048:	e0 45 00 7f 	cp.w	r5,127
8000704c:	e0 8a 00 22 	brle	80007090 <_malloc_trim_r+0x6c>
  }

  else
  {
    /* Test to make sure no one else called sbrk */
    current_brk = (char*)(MORECORE (0));
80007050:	30 0b       	mov	r11,0
80007052:	0e 9c       	mov	r12,r7
80007054:	ce 0e       	rcall	80006e14 <_sbrk_r>
80007056:	68 28       	ld.w	r8,r4[0x8]
    if (current_brk != (char*)(top) + top_size)
80007058:	0c 08       	add	r8,r6
8000705a:	10 3c       	cp.w	r12,r8
8000705c:	c1 a1       	brne	80007090 <_malloc_trim_r+0x6c>
8000705e:	ea 0b 11 00 	rsub	r11,r5,0
      return 0;     /* Apparently we don't own memory; must fail */
    }

    else
    {
      new_brk = (char*)(MORECORE (-extra));
80007062:	0e 9c       	mov	r12,r7
80007064:	cd 8e       	rcall	80006e14 <_sbrk_r>
80007066:	5b fc       	cp.w	r12,-1
80007068:	c1 71       	brne	80007096 <_malloc_trim_r+0x72>
      
      if (new_brk == (char*)(MORECORE_FAILURE)) /* sbrk failed? */
8000706a:	30 0b       	mov	r11,0
8000706c:	0e 9c       	mov	r12,r7
      {
        /* Try to figure out what we have */
        current_brk = (char*)(MORECORE (0));
8000706e:	cd 3e       	rcall	80006e14 <_sbrk_r>
80007070:	68 28       	ld.w	r8,r4[0x8]
80007072:	f8 08 01 09 	sub	r9,r12,r8
        top_size = current_brk - (char*)top;
80007076:	58 f9       	cp.w	r9,15
80007078:	e0 8a 00 0c 	brle	80007090 <_malloc_trim_r+0x6c>
        if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
8000707c:	a1 a9       	sbr	r9,0x0
8000707e:	91 19       	st.w	r8[0x4],r9
80007080:	e0 68 05 40 	mov	r8,1344
        {
          sbrked_mem = current_brk - sbrk_base;
          set_head(top, top_size | PREV_INUSE);
80007084:	70 09       	ld.w	r9,r8[0x0]
        /* Try to figure out what we have */
        current_brk = (char*)(MORECORE (0));
        top_size = current_brk - (char*)top;
        if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
        {
          sbrked_mem = current_brk - sbrk_base;
80007086:	e0 68 09 84 	mov	r8,2436
8000708a:	f8 09 01 09 	sub	r9,r12,r9
8000708e:	91 09       	st.w	r8[0x0],r9
80007090:	0e 9c       	mov	r12,r7
          set_head(top, top_size | PREV_INUSE);
        }
        check_chunk(top);
	MALLOC_UNLOCK;
80007092:	cc 0e       	rcall	80006e12 <__malloc_unlock>
80007094:	d8 2a       	popm	r4-r7,pc,r12=0
80007096:	68 28       	ld.w	r8,r4[0x8]
80007098:	0a 16       	sub	r6,r5
      }

      else
      {
        /* Success. Adjust top accordingly. */
        set_head(top, (top_size - extra) | PREV_INUSE);
8000709a:	a1 a6       	sbr	r6,0x0
8000709c:	91 16       	st.w	r8[0x4],r6
8000709e:	e0 68 09 84 	mov	r8,2436
        sbrked_mem -= extra;
800070a2:	70 09       	ld.w	r9,r8[0x0]
800070a4:	0a 19       	sub	r9,r5
800070a6:	0e 9c       	mov	r12,r7
        check_chunk(top);
	MALLOC_UNLOCK;
800070a8:	91 09       	st.w	r8[0x0],r9

      else
      {
        /* Success. Adjust top accordingly. */
        set_head(top, (top_size - extra) | PREV_INUSE);
        sbrked_mem -= extra;
800070aa:	cb 4e       	rcall	80006e12 <__malloc_unlock>
        check_chunk(top);
	MALLOC_UNLOCK;
800070ac:	da 2a       	popm	r4-r7,pc,r12=1
800070ae:	d7 03       	nop

800070b0 <_free_r>:
800070b0:	d4 21       	pushm	r4-r7,lr
800070b2:	16 96       	mov	r6,r11
800070b4:	18 97       	mov	r7,r12
800070b6:	58 0b       	cp.w	r11,0
800070b8:	e0 80 00 bc 	breq	80007230 <_free_r+0x180>
800070bc:	ca ae       	rcall	80006e10 <__malloc_lock>
800070be:	20 86       	sub	r6,8
800070c0:	e0 6a 01 34 	mov	r10,308
800070c4:	6c 18       	ld.w	r8,r6[0x4]
800070c6:	74 2e       	ld.w	lr,r10[0x8]
800070c8:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
  }
#endif
  
  check_inuse_chunk(p);
  
  sz = hd & ~PREV_INUSE;
800070cc:	a1 c8       	cbr	r8,0x0
  next = chunk_at_offset(p, sz);
800070ce:	ec 08 00 09 	add	r9,r6,r8
  nextsz = chunksize(next);
800070d2:	72 1b       	ld.w	r11,r9[0x4]
800070d4:	e0 1b ff fc 	andl	r11,0xfffc
  
  if (next == top)                            /* merge with top */
800070d8:	1c 39       	cp.w	r9,lr
800070da:	c1 d1       	brne	80007114 <_free_r+0x64>
  {
    sz += nextsz;
800070dc:	f6 08 00 08 	add	r8,r11,r8

    if (!(hd & PREV_INUSE))                    /* consolidate backward */
800070e0:	58 0c       	cp.w	r12,0
800070e2:	c0 81       	brne	800070f2 <_free_r+0x42>
    {
      prevsz = p->prev_size;
800070e4:	6c 09       	ld.w	r9,r6[0x0]
      p = chunk_at_offset(p, -prevsz);
800070e6:	12 16       	sub	r6,r9
      sz += prevsz;
800070e8:	12 08       	add	r8,r9
      unlink(p, bck, fwd);
800070ea:	6c 3b       	ld.w	r11,r6[0xc]
800070ec:	6c 29       	ld.w	r9,r6[0x8]
800070ee:	97 29       	st.w	r11[0x8],r9
800070f0:	93 3b       	st.w	r9[0xc],r11
    }

    set_head(p, sz | PREV_INUSE);
800070f2:	10 99       	mov	r9,r8
    top = p;
800070f4:	95 26       	st.w	r10[0x8],r6
      p = chunk_at_offset(p, -prevsz);
      sz += prevsz;
      unlink(p, bck, fwd);
    }

    set_head(p, sz | PREV_INUSE);
800070f6:	a1 a9       	sbr	r9,0x0
800070f8:	8d 19       	st.w	r6[0x4],r9
    top = p;
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
800070fa:	e0 69 05 3c 	mov	r9,1340
800070fe:	72 09       	ld.w	r9,r9[0x0]
80007100:	12 38       	cp.w	r8,r9
      malloc_trim(RCALL top_pad); 
80007102:	c0 63       	brcs	8000710e <_free_r+0x5e>
80007104:	e0 68 09 80 	mov	r8,2432
80007108:	0e 9c       	mov	r12,r7
8000710a:	70 0b       	ld.w	r11,r8[0x0]
    MALLOC_UNLOCK;
8000710c:	c8 cf       	rcall	80007024 <_malloc_trim_r>
8000710e:	0e 9c       	mov	r12,r7
80007110:	c8 1e       	rcall	80006e12 <__malloc_unlock>
    return;
80007112:	d8 22       	popm	r4-r7,pc
  }

  set_head(next, nextsz);                    /* clear inuse bit */
80007114:	93 1b       	st.w	r9[0x4],r11

  islr = 0;

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
80007116:	58 0c       	cp.w	r12,0
80007118:	c0 30       	breq	8000711e <_free_r+0x6e>
8000711a:	30 0c       	mov	r12,0
8000711c:	c0 e8       	rjmp	80007138 <_free_r+0x88>
  {
    prevsz = p->prev_size;
8000711e:	6c 0e       	ld.w	lr,r6[0x0]
    p = chunk_at_offset(p, -prevsz);
    sz += prevsz;
    
    if (p->fd == last_remainder)             /* keep as last_remainder */
80007120:	f4 c5 ff f8 	sub	r5,r10,-8

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
  {
    prevsz = p->prev_size;
    p = chunk_at_offset(p, -prevsz);
    sz += prevsz;
80007124:	1c 08       	add	r8,lr
  islr = 0;

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
  {
    prevsz = p->prev_size;
    p = chunk_at_offset(p, -prevsz);
80007126:	1c 16       	sub	r6,lr
    sz += prevsz;
    
    if (p->fd == last_remainder)             /* keep as last_remainder */
80007128:	6c 2e       	ld.w	lr,r6[0x8]
8000712a:	0a 3e       	cp.w	lr,r5
8000712c:	c0 31       	brne	80007132 <_free_r+0x82>
8000712e:	30 1c       	mov	r12,1
80007130:	c0 48       	rjmp	80007138 <_free_r+0x88>
      islr = 1;
    else
      unlink(p, bck, fwd);
80007132:	6c 35       	ld.w	r5,r6[0xc]
80007134:	8b 2e       	st.w	r5[0x8],lr
80007136:	9d 35       	st.w	lr[0xc],r5
  }
  
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
80007138:	f2 0b 00 0e 	add	lr,r9,r11
8000713c:	7c 1e       	ld.w	lr,lr[0x4]
8000713e:	ed be 00 00 	bld	lr,0x0
80007142:	c1 40       	breq	8000716a <_free_r+0xba>
  {
    sz += nextsz;
80007144:	16 08       	add	r8,r11
    
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
80007146:	58 0c       	cp.w	r12,0
80007148:	c0 d1       	brne	80007162 <_free_r+0xb2>
8000714a:	e0 6e 01 34 	mov	lr,308
8000714e:	72 2b       	ld.w	r11,r9[0x8]
80007150:	2f 8e       	sub	lr,-8
80007152:	1c 3b       	cp.w	r11,lr
    {
      islr = 1;
      link_last_remainder(p);   
80007154:	c0 71       	brne	80007162 <_free_r+0xb2>
80007156:	97 36       	st.w	r11[0xc],r6
80007158:	97 26       	st.w	r11[0x8],r6
8000715a:	8d 2b       	st.w	r6[0x8],r11
8000715c:	8d 3b       	st.w	r6[0xc],r11
  
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  {
    sz += nextsz;
    
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
8000715e:	30 1c       	mov	r12,1
    {
      islr = 1;
      link_last_remainder(p);   
    }
    else
      unlink(next, bck, fwd);
80007160:	c0 58       	rjmp	8000716a <_free_r+0xba>
80007162:	72 2b       	ld.w	r11,r9[0x8]
80007164:	72 39       	ld.w	r9,r9[0xc]
80007166:	93 2b       	st.w	r9[0x8],r11
  }


  set_head(p, sz | PREV_INUSE);
80007168:	97 39       	st.w	r11[0xc],r9
  set_foot(p, sz);
8000716a:	10 99       	mov	r9,r8
8000716c:	ec 08 09 08 	st.w	r6[r8],r8
    else
      unlink(next, bck, fwd);
  }


  set_head(p, sz | PREV_INUSE);
80007170:	a1 a9       	sbr	r9,0x0
  set_foot(p, sz);
  if (!islr)
80007172:	8d 19       	st.w	r6[0x4],r9
80007174:	58 0c       	cp.w	r12,0
    frontlink(p, sz, idx, bck, fwd);  
80007176:	c5 a1       	brne	8000722a <_free_r+0x17a>
80007178:	e0 48 01 ff 	cp.w	r8,511
8000717c:	e0 8b 00 13 	brhi	800071a2 <_free_r+0xf2>
80007180:	a3 98       	lsr	r8,0x3
80007182:	f4 08 00 39 	add	r9,r10,r8<<0x3
80007186:	72 2b       	ld.w	r11,r9[0x8]
80007188:	8d 39       	st.w	r6[0xc],r9
8000718a:	8d 2b       	st.w	r6[0x8],r11
8000718c:	97 36       	st.w	r11[0xc],r6
8000718e:	93 26       	st.w	r9[0x8],r6
80007190:	a3 48       	asr	r8,0x2
80007192:	74 19       	ld.w	r9,r10[0x4]
80007194:	30 1b       	mov	r11,1
80007196:	f6 08 09 48 	lsl	r8,r11,r8
8000719a:	f3 e8 10 08 	or	r8,r9,r8
8000719e:	95 18       	st.w	r10[0x4],r8
800071a0:	c4 58       	rjmp	8000722a <_free_r+0x17a>
800071a2:	f0 0b 16 09 	lsr	r11,r8,0x9
800071a6:	58 4b       	cp.w	r11,4
800071a8:	e0 8b 00 06 	brhi	800071b4 <_free_r+0x104>
800071ac:	f0 0b 16 06 	lsr	r11,r8,0x6
800071b0:	2c 8b       	sub	r11,-56
800071b2:	c2 08       	rjmp	800071f2 <_free_r+0x142>
800071b4:	59 4b       	cp.w	r11,20
800071b6:	e0 8b 00 04 	brhi	800071be <_free_r+0x10e>
800071ba:	2a 5b       	sub	r11,-91
800071bc:	c1 b8       	rjmp	800071f2 <_free_r+0x142>
800071be:	e0 4b 00 54 	cp.w	r11,84
800071c2:	e0 8b 00 06 	brhi	800071ce <_free_r+0x11e>
800071c6:	f0 0b 16 0c 	lsr	r11,r8,0xc
800071ca:	29 2b       	sub	r11,-110
800071cc:	c1 38       	rjmp	800071f2 <_free_r+0x142>
800071ce:	e0 4b 01 54 	cp.w	r11,340
800071d2:	e0 8b 00 06 	brhi	800071de <_free_r+0x12e>
800071d6:	f0 0b 16 0f 	lsr	r11,r8,0xf
800071da:	28 9b       	sub	r11,-119
800071dc:	c0 b8       	rjmp	800071f2 <_free_r+0x142>
800071de:	e0 4b 05 54 	cp.w	r11,1364
800071e2:	e0 88 00 05 	brls	800071ec <_free_r+0x13c>
800071e6:	37 eb       	mov	r11,126
800071e8:	c0 58       	rjmp	800071f2 <_free_r+0x142>
800071ea:	d7 03       	nop
800071ec:	f0 0b 16 12 	lsr	r11,r8,0x12
800071f0:	28 4b       	sub	r11,-124
800071f2:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
800071f6:	78 29       	ld.w	r9,r12[0x8]
800071f8:	18 39       	cp.w	r9,r12
800071fa:	c0 e1       	brne	80007216 <_free_r+0x166>
800071fc:	74 18       	ld.w	r8,r10[0x4]
800071fe:	a3 4b       	asr	r11,0x2
80007200:	30 1c       	mov	r12,1
80007202:	f8 0b 09 4b 	lsl	r11,r12,r11
80007206:	f1 eb 10 0b 	or	r11,r8,r11
8000720a:	12 98       	mov	r8,r9
8000720c:	95 1b       	st.w	r10[0x4],r11
8000720e:	c0 a8       	rjmp	80007222 <_free_r+0x172>
80007210:	72 29       	ld.w	r9,r9[0x8]
80007212:	18 39       	cp.w	r9,r12
80007214:	c0 60       	breq	80007220 <_free_r+0x170>
80007216:	72 1a       	ld.w	r10,r9[0x4]
80007218:	e0 1a ff fc 	andl	r10,0xfffc
8000721c:	14 38       	cp.w	r8,r10
8000721e:	cf 93       	brcs	80007210 <_free_r+0x160>
80007220:	72 38       	ld.w	r8,r9[0xc]
80007222:	8d 38       	st.w	r6[0xc],r8
80007224:	8d 29       	st.w	r6[0x8],r9
80007226:	93 36       	st.w	r9[0xc],r6
80007228:	91 26       	st.w	r8[0x8],r6
8000722a:	0e 9c       	mov	r12,r7
8000722c:	fe b0 fd f3 	rcall	80006e12 <__malloc_unlock>
80007230:	d8 22       	popm	r4-r7,pc
80007232:	d7 03       	nop

80007234 <__do_global_ctors_aux>:
80007234:	d4 21       	pushm	r4-r7,lr
80007236:	30 c7       	mov	r7,12
80007238:	c0 28       	rjmp	8000723c <__do_global_ctors_aux+0x8>
8000723a:	5d 18       	icall	r8
8000723c:	20 47       	sub	r7,4

  MALLOC_UNLOCK;
8000723e:	6e 08       	ld.w	r8,r7[0x0]
80007240:	5b f8       	cp.w	r8,-1
80007242:	cf c1       	brne	8000723a <__do_global_ctors_aux+0x6>
80007244:	d8 22       	popm	r4-r7,pc
80007246:	d7 03       	nop

Disassembly of section .exception:

80007400 <_evba>:
80007400:	c0 08       	rjmp	80007400 <_evba>
	...

80007404 <_handle_TLB_Multiple_Hit>:
80007404:	c0 08       	rjmp	80007404 <_handle_TLB_Multiple_Hit>
	...

80007408 <_handle_Bus_Error_Data_Fetch>:
80007408:	c0 08       	rjmp	80007408 <_handle_Bus_Error_Data_Fetch>
	...

8000740c <_handle_Bus_Error_Instruction_Fetch>:
8000740c:	c0 08       	rjmp	8000740c <_handle_Bus_Error_Instruction_Fetch>
	...

80007410 <_handle_NMI>:
80007410:	c0 08       	rjmp	80007410 <_handle_NMI>
	...

80007414 <_handle_Instruction_Address>:
80007414:	c0 08       	rjmp	80007414 <_handle_Instruction_Address>
	...

80007418 <_handle_ITLB_Protection>:
80007418:	c0 08       	rjmp	80007418 <_handle_ITLB_Protection>
	...

8000741c <_handle_Breakpoint>:
8000741c:	c0 08       	rjmp	8000741c <_handle_Breakpoint>
	...

80007420 <_handle_Illegal_Opcode>:
80007420:	c0 08       	rjmp	80007420 <_handle_Illegal_Opcode>
	...

80007424 <_handle_Unimplemented_Instruction>:
80007424:	c0 08       	rjmp	80007424 <_handle_Unimplemented_Instruction>
	...

80007428 <_handle_Privilege_Violation>:
80007428:	c0 08       	rjmp	80007428 <_handle_Privilege_Violation>
	...

8000742c <_handle_Floating_Point>:
8000742c:	c0 08       	rjmp	8000742c <_handle_Floating_Point>
	...

80007430 <_handle_Coprocessor_Absent>:
80007430:	c0 08       	rjmp	80007430 <_handle_Coprocessor_Absent>
	...

80007434 <_handle_Data_Address_Read>:
80007434:	c0 08       	rjmp	80007434 <_handle_Data_Address_Read>
	...

80007438 <_handle_Data_Address_Write>:
80007438:	c0 08       	rjmp	80007438 <_handle_Data_Address_Write>
	...

8000743c <_handle_DTLB_Protection_Read>:
8000743c:	c0 08       	rjmp	8000743c <_handle_DTLB_Protection_Read>
	...

80007440 <_handle_DTLB_Protection_Write>:
80007440:	c0 08       	rjmp	80007440 <_handle_DTLB_Protection_Write>
	...

80007444 <_handle_DTLB_Modified>:
80007444:	c0 08       	rjmp	80007444 <_handle_DTLB_Modified>
	...

80007450 <_handle_ITLB_Miss>:
80007450:	c0 08       	rjmp	80007450 <_handle_ITLB_Miss>
	...

80007460 <_handle_DTLB_Miss_Read>:
80007460:	c0 08       	rjmp	80007460 <_handle_DTLB_Miss_Read>
	...

80007470 <_handle_DTLB_Miss_Write>:
80007470:	c0 08       	rjmp	80007470 <_handle_DTLB_Miss_Write>
	...

80007500 <_handle_Supervisor_Call>:
80007500:	c0 08       	rjmp	80007500 <_handle_Supervisor_Call>
80007502:	d7 03       	nop

80007504 <_int0>:
80007504:	30 0c       	mov	r12,0
80007506:	fe b0 e8 c3 	rcall	8000468c <_get_interrupt_handler>
8000750a:	58 0c       	cp.w	r12,0
8000750c:	f8 0f 17 10 	movne	pc,r12
80007510:	d6 03       	rete

80007512 <_int1>:
80007512:	30 1c       	mov	r12,1
80007514:	fe b0 e8 bc 	rcall	8000468c <_get_interrupt_handler>
80007518:	58 0c       	cp.w	r12,0
8000751a:	f8 0f 17 10 	movne	pc,r12
8000751e:	d6 03       	rete

80007520 <_int2>:
80007520:	30 2c       	mov	r12,2
80007522:	fe b0 e8 b5 	rcall	8000468c <_get_interrupt_handler>
80007526:	58 0c       	cp.w	r12,0
80007528:	f8 0f 17 10 	movne	pc,r12
8000752c:	d6 03       	rete

8000752e <_int3>:
8000752e:	30 3c       	mov	r12,3
80007530:	fe b0 e8 ae 	rcall	8000468c <_get_interrupt_handler>
80007534:	58 0c       	cp.w	r12,0
80007536:	f8 0f 17 10 	movne	pc,r12
8000753a:	d6 03       	rete
8000753c:	d7 03       	nop
8000753e:	d7 03       	nop
80007540:	d7 03       	nop
80007542:	d7 03       	nop
80007544:	d7 03       	nop
80007546:	d7 03       	nop
80007548:	d7 03       	nop
8000754a:	d7 03       	nop
8000754c:	d7 03       	nop
8000754e:	d7 03       	nop
80007550:	d7 03       	nop
80007552:	d7 03       	nop
80007554:	d7 03       	nop
80007556:	d7 03       	nop
80007558:	d7 03       	nop
8000755a:	d7 03       	nop
8000755c:	d7 03       	nop
8000755e:	d7 03       	nop
80007560:	d7 03       	nop
80007562:	d7 03       	nop
80007564:	d7 03       	nop
80007566:	d7 03       	nop
80007568:	d7 03       	nop
8000756a:	d7 03       	nop
8000756c:	d7 03       	nop
8000756e:	d7 03       	nop
80007570:	d7 03       	nop
80007572:	d7 03       	nop
80007574:	d7 03       	nop
80007576:	d7 03       	nop
80007578:	d7 03       	nop
8000757a:	d7 03       	nop
8000757c:	d7 03       	nop
8000757e:	d7 03       	nop
80007580:	d7 03       	nop
80007582:	d7 03       	nop
80007584:	d7 03       	nop
80007586:	d7 03       	nop
80007588:	d7 03       	nop
8000758a:	d7 03       	nop
8000758c:	d7 03       	nop
8000758e:	d7 03       	nop
80007590:	d7 03       	nop
80007592:	d7 03       	nop
80007594:	d7 03       	nop
80007596:	d7 03       	nop
80007598:	d7 03       	nop
8000759a:	d7 03       	nop
8000759c:	d7 03       	nop
8000759e:	d7 03       	nop
800075a0:	d7 03       	nop
800075a2:	d7 03       	nop
800075a4:	d7 03       	nop
800075a6:	d7 03       	nop
800075a8:	d7 03       	nop
800075aa:	d7 03       	nop
800075ac:	d7 03       	nop
800075ae:	d7 03       	nop
800075b0:	d7 03       	nop
800075b2:	d7 03       	nop
800075b4:	d7 03       	nop
800075b6:	d7 03       	nop
800075b8:	d7 03       	nop
800075ba:	d7 03       	nop
800075bc:	d7 03       	nop
800075be:	d7 03       	nop
800075c0:	d7 03       	nop
800075c2:	d7 03       	nop
800075c4:	d7 03       	nop
800075c6:	d7 03       	nop
800075c8:	d7 03       	nop
800075ca:	d7 03       	nop
800075cc:	d7 03       	nop
800075ce:	d7 03       	nop
800075d0:	d7 03       	nop
800075d2:	d7 03       	nop
800075d4:	d7 03       	nop
800075d6:	d7 03       	nop
800075d8:	d7 03       	nop
800075da:	d7 03       	nop
800075dc:	d7 03       	nop
800075de:	d7 03       	nop
800075e0:	d7 03       	nop
800075e2:	d7 03       	nop
800075e4:	d7 03       	nop
800075e6:	d7 03       	nop
800075e8:	d7 03       	nop
800075ea:	d7 03       	nop
800075ec:	d7 03       	nop
800075ee:	d7 03       	nop
800075f0:	d7 03       	nop
800075f2:	d7 03       	nop
800075f4:	d7 03       	nop
800075f6:	d7 03       	nop
800075f8:	d7 03       	nop
800075fa:	d7 03       	nop
800075fc:	d7 03       	nop
800075fe:	d7 03       	nop

Disassembly of section .fini:

80007600 <_fini>:
80007600:	eb cd 40 40 	pushm	r6,lr
80007604:	48 26       	lddpc	r6,8000760c <_fini+0xc>
80007606:	1e 26       	rsub	r6,pc
80007608:	c0 48       	rjmp	80007610 <_fini+0x10>
8000760a:	d7 03       	nop
8000760c:	80 00       	ld.sh	r0,r0[0x0]
8000760e:	75 ea       	ld.w	r10,r10[0x78]
80007610:	fe b0 d5 38 	rcall	80002080 <__do_global_dtors_aux>
80007614:	e3 cd 80 40 	ldm	sp++,r6,pc
