
whitewhale.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init         0000001a  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         00007764  80002020  80002020  00002420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .exception    00000200  80009800  80009800  00009c00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .fini         00000018  80009a00  80009a00  00009e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .rodata       00000608  80009a18  80009a18  00009e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  8 .ctors        00000008  00000008  8000a020  0000a808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .dtors        00000008  00000010  8000a028  0000a810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .jcr          00000004  00000018  8000a030  0000a818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .got          00000000  0000001c  8000a034  0000a81c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000528  0000001c  8000a034  0000a81c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          00001794  00000564  00000564  00000000  2**2
                  ALLOC
 14 .heap         00005308  00001cf8  00001cf8  00000000  2**0
                  ALLOC
 15 .comment      00000028  00000000  00000000  0000ad44  2**0
                  CONTENTS, READONLY
 16 .debug_aranges 00001010  00000000  00000000  0000ad6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_pubnames 000024cb  00000000  00000000  0000bd7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_info   00029268  00000000  00000000  0000e247  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00004e83  00000000  00000000  000374af  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00013393  00000000  00000000  0003c332  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_frame  00002bac  00000000  00000000  0004f6c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    00008be5  00000000  00000000  00052274  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    0000701d  00000000  00000000  0005ae59  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macinfo 010f7999  00000000  00000000  00061e76  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .stack        00001000  00007000  00007000  00000000  2**0
                  ALLOC
 26 .flash_nvram  00007c8c  80030000  8000a55c  0000b000  2**2
                  ALLOC
 27 .debug_ranges 000016e0  00000000  00000000  0115980f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf ff e0 	sub	pc,pc,-32

Disassembly of section .init:

80002004 <_init>:
80002004:	eb cd 40 40 	pushm	r6,lr
80002008:	48 26       	lddpc	r6,80002010 <_init+0xc>
8000200a:	1e 26       	rsub	r6,pc
8000200c:	c0 48       	rjmp	80002014 <_init+0x10>
8000200e:	d7 03       	nop
80002010:	80 00       	ld.sh	r0,r0[0x0]
80002012:	1f ee       	ld.ub	lr,pc[0x6]
80002014:	c5 4c       	rcall	800020bc <frame_dummy>
80002016:	e0 a0 3b ad 	rcall	80009770 <__do_global_ctors_aux>
8000201a:	e3 cd 80 40 	ldm	sp++,r6,pc

Disassembly of section .text:

80002020 <_stext>:
80002020:	30 07       	mov	r7,0
80002022:	e0 6a 80 00 	mov	r10,32768
80002026:	5b fa       	cp.w	r10,-1
80002028:	f4 0d 17 10 	movne	sp,r10
8000202c:	fe cb 80 0c 	sub	r11,pc,-32756
80002030:	30 8c       	mov	r12,8
80002032:	18 3b       	cp.w	r11,r12
80002034:	c0 70       	breq	80002042 <_stext+0x22>
80002036:	e0 6a 05 48 	mov	r10,1352
8000203a:	b7 09       	ld.d	r8,r11++
8000203c:	b9 28       	st.d	r12++,r8
8000203e:	14 3c       	cp.w	r12,r10
80002040:	cf d5       	brlt	8000203a <_stext+0x1a>
80002042:	e0 6a 1c f8 	mov	r10,7416
80002046:	e0 6c 05 48 	mov	r12,1352
8000204a:	30 08       	mov	r8,0
8000204c:	30 09       	mov	r9,0
8000204e:	b9 28       	st.d	r12++,r8
80002050:	14 3c       	cp.w	r12,r10
80002052:	cf e5       	brlt	8000204e <_stext+0x2e>
80002054:	e0 a0 39 a1 	rcall	80009396 <_init_startup>
80002058:	fe cc 86 58 	sub	r12,pc,-31144
8000205c:	e0 a0 36 58 	rcall	80008d0c <atexit>
80002060:	cd 2f       	rcall	80002004 <_init>
80002062:	1a 9c       	mov	r12,sp
80002064:	30 0b       	mov	r11,0
80002066:	e0 a0 39 99 	rcall	80009398 <_init_argv>
8000206a:	5b fc       	cp.w	r12,-1
8000206c:	f9 bc 00 00 	moveq	r12,0
80002070:	f9 ba 00 00 	moveq	r10,0
80002074:	14 1d       	sub	sp,r10
80002076:	e0 a0 13 5b 	rcall	8000472c <main>
8000207a:	e0 a0 36 51 	rcall	80008d1c <exit>
8000207e:	d7 03       	nop

80002080 <__do_global_dtors_aux>:
80002080:	d4 21       	pushm	r4-r7,lr
80002082:	e0 68 05 64 	mov	r8,1380
80002086:	11 89       	ld.ub	r9,r8[0x0]
80002088:	30 08       	mov	r8,0
8000208a:	f0 09 18 00 	cp.b	r9,r8
8000208e:	c1 61       	brne	800020ba <__do_global_dtors_aux+0x3a>
80002090:	31 08       	mov	r8,16
80002092:	31 46       	mov	r6,20
80002094:	10 95       	mov	r5,r8
80002096:	10 16       	sub	r6,r8
80002098:	e0 67 05 68 	mov	r7,1384
8000209c:	a3 46       	asr	r6,0x2
8000209e:	20 16       	sub	r6,1
800020a0:	c0 68       	rjmp	800020ac <__do_global_dtors_aux+0x2c>
800020a2:	2f f8       	sub	r8,-1
800020a4:	8f 08       	st.w	r7[0x0],r8
800020a6:	ea 08 03 28 	ld.w	r8,r5[r8<<0x2]
800020aa:	5d 18       	icall	r8
800020ac:	6e 08       	ld.w	r8,r7[0x0]
800020ae:	0c 38       	cp.w	r8,r6
800020b0:	cf 93       	brcs	800020a2 <__do_global_dtors_aux+0x22>
800020b2:	30 19       	mov	r9,1
800020b4:	e0 68 05 64 	mov	r8,1380
800020b8:	b0 89       	st.b	r8[0x0],r9
800020ba:	d8 22       	popm	r4-r7,pc

800020bc <frame_dummy>:
800020bc:	d4 01       	pushm	lr
800020be:	31 8c       	mov	r12,24
800020c0:	78 08       	ld.w	r8,r12[0x0]
800020c2:	58 08       	cp.w	r8,0
800020c4:	c0 50       	breq	800020ce <frame_dummy+0x12>
800020c6:	48 38       	lddpc	r8,800020d0 <frame_dummy+0x14>
800020c8:	58 08       	cp.w	r8,0
800020ca:	c0 20       	breq	800020ce <frame_dummy+0x12>
800020cc:	5d 18       	icall	r8
800020ce:	d8 02       	popm	pc
800020d0:	00 00       	add	r0,r0
	...

800020d4 <handler_None>:

// check the event queue
static void check_events(void);

// handler protos
static void handler_None(s32 data) { ;; }
800020d4:	5e fc       	retal	r12
800020d6:	d7 03       	nop

800020d8 <clockTimer_callback>:
static softTimer_t monomePollTimer = { .next = NULL, .prev = NULL };
static softTimer_t monomeRefreshTimer  = { .next = NULL, .prev = NULL };



static void clockTimer_callback(void* o) {  
800020d8:	d4 01       	pushm	lr
	// static event_t e;
	// e.type = kEventTimer;
	// e.data = 0;
	// event_post(&e);
	if(clock_external == 0) {
800020da:	e0 68 1b 08 	mov	r8,6920
800020de:	11 89       	ld.ub	r9,r8[0x0]
800020e0:	58 09       	cp.w	r9,0
		// print_dbg("\r\ntimer.");

		clock_phase++;
800020e2:	c1 21       	brne	80002106 <clockTimer_callback+0x2e>
800020e4:	e0 68 1a 98 	mov	r8,6808
800020e8:	11 8a       	ld.ub	r10,r8[0x0]
		if(clock_phase>1) clock_phase=0;
800020ea:	2f fa       	sub	r10,-1
800020ec:	b0 8a       	st.b	r8[0x0],r10
800020ee:	30 1b       	mov	r11,1
800020f0:	f6 0a 18 00 	cp.b	r10,r11
800020f4:	e0 88 00 03 	brls	800020fa <clockTimer_callback+0x22>
		(*clock_pulse)(clock_phase);
800020f8:	b0 89       	st.b	r8[0x0],r9
800020fa:	e0 69 1a 98 	mov	r9,6808
800020fe:	31 c8       	mov	r8,28
80002100:	13 8c       	ld.ub	r12,r9[0x0]
80002102:	70 08       	ld.w	r8,r8[0x0]
80002104:	5d 18       	icall	r8
80002106:	d8 02       	popm	pc

80002108 <handler_MonomePoll>:
80002108:	d4 01       	pushm	lr
8000210a:	33 08       	mov	r8,48
8000210c:	70 08       	ld.w	r8,r8[0x0]
8000210e:	5d 18       	icall	r8
	// monome_set_quadrant_flag(0);
	// monome_set_quadrant_flag(1);
	timers_set_monome();
}

static void handler_MonomePoll(s32 data) { monome_read_serial(); }
80002110:	d8 02       	popm	pc
80002112:	d7 03       	nop

80002114 <handler_Front>:
80002114:	d4 21       	pushm	r4-r7,lr
80002116:	18 97       	mov	r7,r12
	}
}


static void handler_Front(s32 data) {
	print_dbg("\r\n FRONT HOLD");
80002118:	fe cc 84 00 	sub	r12,pc,-31744
8000211c:	e0 a0 31 06 	rcall	80008328 <print_dbg>

	if(data == 0) {
80002120:	e0 68 1a 9a 	mov	r8,6810
		front_timer = 15;
80002124:	58 07       	cp.w	r7,0
80002126:	c0 d1       	brne	80002140 <handler_Front+0x2c>
		if(preset_mode) preset_mode = 0;
80002128:	30 f9       	mov	r9,15
8000212a:	b0 89       	st.b	r8[0x0],r9
8000212c:	e0 68 1a 8c 	mov	r8,6796
80002130:	11 8a       	ld.ub	r10,r8[0x0]
80002132:	ee 0a 18 00 	cp.b	r10,r7
		else preset_mode = 1;
80002136:	c0 30       	breq	8000213c <handler_Front+0x28>
80002138:	b0 87       	st.b	r8[0x0],r7
	}
	else {
		front_timer = 0;
8000213a:	c0 58       	rjmp	80002144 <handler_Front+0x30>
8000213c:	30 19       	mov	r9,1
	}

	monomeFrameDirty++;
8000213e:	c0 28       	rjmp	80002142 <handler_Front+0x2e>
80002140:	30 09       	mov	r9,0
80002142:	b0 89       	st.b	r8[0x0],r9
80002144:	e0 68 07 61 	mov	r8,1889
}
80002148:	11 89       	ld.ub	r9,r8[0x0]
8000214a:	2f f9       	sub	r9,-1
8000214c:	b0 89       	st.b	r8[0x0],r9
8000214e:	d8 22       	popm	r4-r7,pc

80002150 <flash_read>:
80002150:	d4 31       	pushm	r0-r7,lr
80002152:	20 1d       	sub	sp,4
80002154:	fe cc 84 2c 	sub	r12,pc,-31700
80002158:	e0 a0 30 e8 	rcall	80008328 <print_dbg>

void flash_read(void) {
	u8 i1, i2;

	print_dbg("\r\n read preset ");
	print_dbg_ulong(preset_select);
8000215c:	e0 67 0a fc 	mov	r7,2812
80002160:	0f 8c       	ld.ub	r12,r7[0x0]

	for(i1=0;i1<16;i1++) {
		for(i2=0;i2<16;i2++) {
			w.wp[i1].steps[i2] = flashy.w[preset_select].wp[i1].steps[i2];
80002162:	e0 a0 30 dd 	rcall	8000831c <print_dbg_ulong>
80002166:	4d 39       	lddpc	r9,800022b0 <flash_read+0x160>
	u8 i1, i2;

	print_dbg("\r\n read preset ");
	print_dbg_ulong(preset_select);

	for(i1=0;i1<16;i1++) {
80002168:	e0 66 0b 04 	mov	r6,2820
		for(i2=0;i2<16;i2++) {
			w.wp[i1].steps[i2] = flashy.w[preset_select].wp[i1].steps[i2];
8000216c:	0f 84       	ld.ub	r4,r7[0x0]
8000216e:	12 91       	mov	r1,r9
80002170:	e0 68 0f 88 	mov	r8,3976
80002174:	ec c5 ff fc 	sub	r5,r6,-4
	u8 i1, i2;

	print_dbg("\r\n read preset ");
	print_dbg_ulong(preset_select);

	for(i1=0;i1<16;i1++) {
80002178:	e8 08 02 48 	mul	r8,r4,r8
		for(i2=0;i2<16;i2++) {
			w.wp[i1].steps[i2] = flashy.w[preset_select].wp[i1].steps[i2];
8000217c:	30 07       	mov	r7,0
8000217e:	10 92       	mov	r2,r8
80002180:	0c 93       	mov	r3,r6
80002182:	2b 48       	sub	r8,-76
80002184:	f2 08 00 08 	add	r8,r9,r8
80002188:	0c 99       	mov	r9,r6
			w.wp[i1].step_probs[i2] = flashy.w[preset_select].wp[i1].step_probs[i2];
8000218a:	c4 58       	rjmp	80002214 <flash_read+0xc4>
8000218c:	1d 80       	ld.ub	r0,lr[0x0]
8000218e:	b6 80       	st.b	r11[0x0],r0
80002190:	fd 30 00 10 	ld.ub	r0,lr[16]
			w.wp[i1].cv_probs[0][i2] = flashy.w[preset_select].wp[i1].cv_probs[0][i2];
80002194:	f7 60 00 10 	st.b	r11[16],r0
80002198:	fd 30 00 c0 	ld.ub	r0,lr[192]
			w.wp[i1].cv_probs[1][i2] = flashy.w[preset_select].wp[i1].cv_probs[1][i2];
8000219c:	f7 60 00 c0 	st.b	r11[192],r0
800021a0:	fd 30 00 d0 	ld.ub	r0,lr[208]
			w.wp[i1].cv_curves[0][i2] = flashy.w[preset_select].wp[i1].cv_curves[0][i2];
800021a4:	f7 60 00 d0 	st.b	r11[208],r0
			w.wp[i1].cv_curves[1][i2] = flashy.w[preset_select].wp[i1].cv_curves[1][i2];
800021a8:	94 00       	ld.sh	r0,r10[0x0]
800021aa:	b8 00       	st.h	r12[0x0],r0
800021ac:	f5 00 00 20 	ld.sh	r0,r10[32]
			w.wp[i1].cv_steps[0][i2] = flashy.w[preset_select].wp[i1].cv_steps[0][i2];
800021b0:	f9 50 00 20 	st.h	r12[32],r0
800021b4:	f5 00 ff c0 	ld.sh	r0,r10[-64]
			w.wp[i1].cv_steps[1][i2] = flashy.w[preset_select].wp[i1].cv_steps[1][i2];
800021b8:	f9 50 ff c0 	st.h	r12[-64],r0
800021bc:	f5 00 ff e0 	ld.sh	r0,r10[-32]
			w.wp[i1].cv_values[i2] = flashy.w[preset_select].wp[i1].cv_values[i2];
800021c0:	f9 50 ff e0 	st.h	r12[-32],r0
800021c4:	f5 00 ff a0 	ld.sh	r0,r10[-96]
800021c8:	f9 50 ff a0 	st.h	r12[-96],r0
800021cc:	2f fe       	sub	lr,-1

	print_dbg("\r\n read preset ");
	print_dbg_ulong(preset_select);

	for(i1=0;i1<16;i1++) {
		for(i2=0;i2<16;i2++) {
800021ce:	2f fb       	sub	r11,-1
800021d0:	2f ea       	sub	r10,-2
800021d2:	2f ec       	sub	r12,-2
			w.wp[i1].cv_steps[0][i2] = flashy.w[preset_select].wp[i1].cv_steps[0][i2];
			w.wp[i1].cv_steps[1][i2] = flashy.w[preset_select].wp[i1].cv_steps[1][i2];
			w.wp[i1].cv_values[i2] = flashy.w[preset_select].wp[i1].cv_values[i2];
		}

		w.wp[i1].step_choice = flashy.w[preset_select].wp[i1].step_choice;
800021d4:	40 00       	lddsp	r0,sp[0x0]
800021d6:	00 3b       	cp.w	r11,r0
		w.wp[i1].loop_end = flashy.w[preset_select].wp[i1].loop_end;
800021d8:	cd a1       	brne	8000218c <flash_read+0x3c>
800021da:	90 2a       	ld.sh	r10,r8[0x4]
		w.wp[i1].loop_len = flashy.w[preset_select].wp[i1].loop_len;
800021dc:	aa 0a       	st.h	r5[0x0],r10
800021de:	11 9a       	ld.ub	r10,r8[0x1]
		w.wp[i1].loop_start = flashy.w[preset_select].wp[i1].loop_start;
800021e0:	b2 9a       	st.b	r9[0x1],r10
800021e2:	11 aa       	ld.ub	r10,r8[0x2]
		w.wp[i1].loop_dir = flashy.w[preset_select].wp[i1].loop_dir;
800021e4:	b2 aa       	st.b	r9[0x2],r10
800021e6:	11 8a       	ld.ub	r10,r8[0x0]
		w.wp[i1].step_mode = flashy.w[preset_select].wp[i1].step_mode;
800021e8:	b2 8a       	st.b	r9[0x0],r10
800021ea:	11 ba       	ld.ub	r10,r8[0x3]
		w.wp[i1].cv_mode[0] = flashy.w[preset_select].wp[i1].cv_mode[0];
800021ec:	b2 ba       	st.b	r9[0x3],r10
800021ee:	70 3a       	ld.w	r10,r8[0xc]
		w.wp[i1].cv_mode[1] = flashy.w[preset_select].wp[i1].cv_mode[1];
800021f0:	93 3a       	st.w	r9[0xc],r10
800021f2:	11 ea       	ld.ub	r10,r8[0x6]
		w.wp[i1].tr_mode = flashy.w[preset_select].wp[i1].tr_mode;
800021f4:	aa aa       	st.b	r5[0x2],r10
800021f6:	11 fa       	ld.ub	r10,r8[0x7]
800021f8:	b2 fa       	st.b	r9[0x7],r10
800021fa:	f1 3a 00 08 	ld.ub	r10,r8[8]
800021fe:	f3 6a 00 08 	st.b	r9[8],r10
80002202:	2f f7       	sub	r7,-1
80002204:	f0 c8 ff 10 	sub	r8,r8,-240
80002208:	ea c5 ff 10 	sub	r5,r5,-240
	u8 i1, i2;

	print_dbg("\r\n read preset ");
	print_dbg_ulong(preset_select);

	for(i1=0;i1<16;i1++) {
8000220c:	f2 c9 ff 10 	sub	r9,r9,-240
80002210:	59 07       	cp.w	r7,16
80002212:	c1 a0       	breq	80002246 <flash_read+0xf6>
80002214:	ee 0e 15 04 	lsl	lr,r7,0x4
80002218:	f2 c0 ff e0 	sub	r0,r9,-32
8000221c:	0e 1e       	sub	lr,r7
8000221e:	50 00       	stdsp	sp[0x0],r0
80002220:	fc 0a 15 04 	lsl	r10,lr,0x4
80002224:	2f fe       	sub	lr,-1
80002226:	f4 cc ff 70 	sub	r12,r10,-144
8000222a:	a5 6e       	lsl	lr,0x4
8000222c:	04 0a       	add	r10,r2
8000222e:	fc 03 00 0b 	add	r11,lr,r3
80002232:	f4 ca ff 24 	sub	r10,r10,-220
80002236:	04 0e       	add	lr,r2
80002238:	06 0c       	add	r12,r3
8000223a:	2b 4e       	sub	lr,-76
8000223c:	e2 0a 00 0a 	add	r10,r1,r10
		w.wp[i1].cv_mode[0] = flashy.w[preset_select].wp[i1].cv_mode[0];
		w.wp[i1].cv_mode[1] = flashy.w[preset_select].wp[i1].cv_mode[1];
		w.wp[i1].tr_mode = flashy.w[preset_select].wp[i1].tr_mode;
	}

	w.series_start = flashy.w[preset_select].series_start;
80002240:	e2 0e 00 0e 	add	lr,r1,lr
80002244:	ca 4b       	rjmp	8000218c <flash_read+0x3c>
80002246:	49 b9       	lddpc	r9,800022b0 <flash_read+0x160>
	w.tr_mute[0] = flashy.w[preset_select].tr_mute[0];
	w.tr_mute[1] = flashy.w[preset_select].tr_mute[1];
	w.tr_mute[2] = flashy.w[preset_select].tr_mute[2];
	w.tr_mute[3] = flashy.w[preset_select].tr_mute[3];
	w.cv_mute[0] = flashy.w[preset_select].cv_mute[0];
	w.cv_mute[1] = flashy.w[preset_select].cv_mute[1];
80002248:	e0 6b 0f 88 	mov	r11,3976
		w.wp[i1].cv_mode[0] = flashy.w[preset_select].wp[i1].cv_mode[0];
		w.wp[i1].cv_mode[1] = flashy.w[preset_select].wp[i1].cv_mode[1];
		w.wp[i1].tr_mode = flashy.w[preset_select].wp[i1].tr_mode;
	}

	w.series_start = flashy.w[preset_select].series_start;
8000224c:	b7 34       	mul	r4,r11
8000224e:	e8 cb f0 b4 	sub	r11,r4,-3916
	w.tr_mute[0] = flashy.w[preset_select].tr_mute[0];
	w.tr_mute[1] = flashy.w[preset_select].tr_mute[1];
	w.tr_mute[2] = flashy.w[preset_select].tr_mute[2];
	w.tr_mute[3] = flashy.w[preset_select].tr_mute[3];
	w.cv_mute[0] = flashy.w[preset_select].cv_mute[0];
	w.cv_mute[1] = flashy.w[preset_select].cv_mute[1];
80002252:	f2 04 00 04 	add	r4,r9,r4
80002256:	f2 0b 00 0b 	add	r11,r9,r11
8000225a:	e9 39 0f d3 	ld.ub	r9,r4[4051]
		w.wp[i1].cv_mode[0] = flashy.w[preset_select].wp[i1].cv_mode[0];
		w.wp[i1].cv_mode[1] = flashy.w[preset_select].wp[i1].cv_mode[1];
		w.wp[i1].tr_mode = flashy.w[preset_select].wp[i1].tr_mode;
	}

	w.series_start = flashy.w[preset_select].series_start;
8000225e:	e0 68 0b 04 	mov	r8,2820
	w.series_end = flashy.w[preset_select].series_end;

	w.tr_mute[0] = flashy.w[preset_select].tr_mute[0];
80002262:	f1 69 0f 87 	st.b	r8[3975],r9
80002266:	e8 c9 f0 34 	sub	r9,r4,-4044
		w.wp[i1].cv_mode[1] = flashy.w[preset_select].wp[i1].cv_mode[1];
		w.wp[i1].tr_mode = flashy.w[preset_select].wp[i1].tr_mode;
	}

	w.series_start = flashy.w[preset_select].series_start;
	w.series_end = flashy.w[preset_select].series_end;
8000226a:	13 ac       	ld.ub	r12,r9[0x2]
8000226c:	f1 6c 0f 82 	st.b	r8[3970],r12

	w.tr_mute[0] = flashy.w[preset_select].tr_mute[0];
	w.tr_mute[1] = flashy.w[preset_select].tr_mute[1];
80002270:	13 8c       	ld.ub	r12,r9[0x0]
80002272:	13 99       	ld.ub	r9,r9[0x1]
80002274:	f1 69 0f 81 	st.b	r8[3969],r9
	w.tr_mute[2] = flashy.w[preset_select].tr_mute[2];
80002278:	e9 39 0f cf 	ld.ub	r9,r4[4047]
8000227c:	f1 69 0f 83 	st.b	r8[3971],r9
	w.tr_mute[3] = flashy.w[preset_select].tr_mute[3];
80002280:	e9 39 0f d0 	ld.ub	r9,r4[4048]
	flashc_memcpy((void *)&flashy.glyph[preset_select], &glyph, sizeof(glyph), true);
	flashc_memset8((void*)&(flashy.preset_select), preset_select, 1, true);
	flashc_memset32((void*)&(flashy.edit_mode), edit_mode, 4, true);
}

void flash_read(void) {
80002284:	f1 69 0f 84 	st.b	r8[3972],r9
	w.series_end = flashy.w[preset_select].series_end;

	w.tr_mute[0] = flashy.w[preset_select].tr_mute[0];
	w.tr_mute[1] = flashy.w[preset_select].tr_mute[1];
	w.tr_mute[2] = flashy.w[preset_select].tr_mute[2];
	w.tr_mute[3] = flashy.w[preset_select].tr_mute[3];
80002288:	e9 39 0f d1 	ld.ub	r9,r4[4049]
	w.cv_mute[0] = flashy.w[preset_select].cv_mute[0];
	w.cv_mute[1] = flashy.w[preset_select].cv_mute[1];
8000228c:	ec c6 f0 80 	sub	r6,r6,-3968

	w.tr_mute[0] = flashy.w[preset_select].tr_mute[0];
	w.tr_mute[1] = flashy.w[preset_select].tr_mute[1];
	w.tr_mute[2] = flashy.w[preset_select].tr_mute[2];
	w.tr_mute[3] = flashy.w[preset_select].tr_mute[3];
	w.cv_mute[0] = flashy.w[preset_select].cv_mute[0];
80002290:	f1 69 0f 85 	st.b	r8[3973],r9
		w.wp[i1].cv_mode[0] = flashy.w[preset_select].wp[i1].cv_mode[0];
		w.wp[i1].cv_mode[1] = flashy.w[preset_select].wp[i1].cv_mode[1];
		w.wp[i1].tr_mode = flashy.w[preset_select].wp[i1].tr_mode;
	}

	w.series_start = flashy.w[preset_select].series_start;
80002294:	f0 ca f1 00 	sub	r10,r8,-3840

	w.tr_mute[0] = flashy.w[preset_select].tr_mute[0];
	w.tr_mute[1] = flashy.w[preset_select].tr_mute[1];
	w.tr_mute[2] = flashy.w[preset_select].tr_mute[2];
	w.tr_mute[3] = flashy.w[preset_select].tr_mute[3];
	w.cv_mute[0] = flashy.w[preset_select].cv_mute[0];
80002298:	e9 39 0f d2 	ld.ub	r9,r4[4050]
	w.cv_mute[1] = flashy.w[preset_select].cv_mute[1];

	for(i1=0;i1<64;i1++)
		w.series_list[i1] = flashy.w[preset_select].series_list[i1];
8000229c:	f1 6c 0f 80 	st.b	r8[3968],r12
	w.tr_mute[2] = flashy.w[preset_select].tr_mute[2];
	w.tr_mute[3] = flashy.w[preset_select].tr_mute[3];
	w.cv_mute[0] = flashy.w[preset_select].cv_mute[0];
	w.cv_mute[1] = flashy.w[preset_select].cv_mute[1];

	for(i1=0;i1<64;i1++)
800022a0:	f1 69 0f 86 	st.b	r8[3974],r9
		w.series_list[i1] = flashy.w[preset_select].series_list[i1];
}
800022a4:	17 18       	ld.sh	r8,r11++
800022a6:	14 b8       	st.h	r10++,r8
800022a8:	0c 3a       	cp.w	r10,r6
800022aa:	cf d1       	brne	800022a4 <flash_read+0x154>
800022ac:	2f fd       	sub	sp,-4
800022ae:	d8 32       	popm	r0-r7,pc
800022b0:	80 03       	ld.sh	r3,r0[0x0]
	...

800022b4 <flash_unfresh>:
800022b4:	d4 01       	pushm	lr
800022b6:	30 19       	mov	r9,1
800022b8:	30 4a       	mov	r10,4
800022ba:	32 2b       	mov	r11,34
800022bc:	48 2c       	lddpc	r12,800022c4 <flash_unfresh+0x10>
800022be:	e0 a0 22 e9 	rcall	80006890 <flashc_memset8>
}

// write fresh status
void flash_unfresh(void) {
  flashc_memset8((void*)&(flashy.fresh), FIRSTRUN_KEY, 4, true);
}
800022c2:	d8 02       	popm	pc
800022c4:	80 03       	ld.sh	r3,r0[0x0]
	...

800022c8 <flash_write>:
800022c8:	d4 21       	pushm	r4-r7,lr
800022ca:	e0 66 0a fc 	mov	r6,2812

void flash_write(void) {
	// print_dbg("\r write preset ");
	// print_dbg_ulong(preset_select);
	flashc_memcpy((void *)&flashy.w[preset_select], &w, sizeof(w), true);
800022ce:	e0 68 0f 88 	mov	r8,3976
800022d2:	0d 89       	ld.ub	r9,r6[0x0]
800022d4:	10 9a       	mov	r10,r8
800022d6:	f2 08 02 48 	mul	r8,r9,r8
800022da:	49 37       	lddpc	r7,80002324 <flash_write+0x5c>
800022dc:	30 19       	mov	r9,1
800022de:	e0 6b 0b 04 	mov	r11,2820
800022e2:	ee cc ff b4 	sub	r12,r7,-76
800022e6:	10 0c       	add	r12,r8
	flashc_memcpy((void *)&flashy.glyph[preset_select], &glyph, sizeof(glyph), true);
800022e8:	e0 a0 22 da 	rcall	8000689c <flashc_memcpy>
800022ec:	ee c8 ff f7 	sub	r8,r7,-9
800022f0:	0d 8c       	ld.ub	r12,r6[0x0]
800022f2:	30 19       	mov	r9,1
800022f4:	f0 0c 00 3c 	add	r12,r8,r12<<0x3
800022f8:	30 8a       	mov	r10,8
800022fa:	e0 6b 1a a8 	mov	r11,6824
	flashc_memset8((void*)&(flashy.preset_select), preset_select, 1, true);
800022fe:	e0 a0 22 cf 	rcall	8000689c <flashc_memcpy>
80002302:	0d 8b       	ld.ub	r11,r6[0x0]
80002304:	30 19       	mov	r9,1
80002306:	ee cc ff f8 	sub	r12,r7,-8
	flashc_memset32((void*)&(flashy.edit_mode), edit_mode, 4, true);
8000230a:	12 9a       	mov	r10,r9
8000230c:	e0 a0 22 c2 	rcall	80006890 <flashc_memset8>
80002310:	e0 68 1a c4 	mov	r8,6852
80002314:	ee cc ff fc 	sub	r12,r7,-4
80002318:	70 0b       	ld.w	r11,r8[0x0]
}
8000231a:	30 19       	mov	r9,1
8000231c:	30 4a       	mov	r10,4
8000231e:	e0 a0 22 a7 	rcall	8000686c <flashc_memset32>
80002322:	d8 22       	popm	r4-r7,pc
80002324:	80 03       	ld.sh	r3,r0[0x0]
	...

80002328 <handler_SaveFlash>:
80002328:	d4 01       	pushm	lr
8000232a:	cc ff       	rcall	800022c8 <flash_write>
8000232c:	d8 02       	popm	pc
8000232e:	d7 03       	nop

80002330 <timers_set_monome>:
80002330:	d4 01       	pushm	lr
80002332:	30 09       	mov	r9,0
80002334:	fe ca d1 28 	sub	r10,pc,-11992
80002338:	31 4b       	mov	r11,20
8000233a:	e0 6c 05 6c 	mov	r12,1388

// monome: start polling
void timers_set_monome(void) {
	// print_dbg("\r\n setting monome timers");
	timer_add(&monomePollTimer, 20, &monome_poll_timer_callback, NULL );
	timer_add(&monomeRefreshTimer, 30, &monome_refresh_timer_callback, NULL );
8000233e:	e0 a0 1e bd 	rcall	800060b8 <timer_add>
80002342:	30 09       	mov	r9,0
80002344:	fe ca dc f0 	sub	r10,pc,-8976
80002348:	31 eb       	mov	r11,30
}
8000234a:	e0 6c 06 28 	mov	r12,1576
8000234e:	e0 a0 1e b5 	rcall	800060b8 <timer_add>
80002352:	d8 02       	popm	pc

80002354 <handler_MonomeGridKey>:
80002354:	d4 21       	pushm	r4-r7,lr
80002356:	20 1d       	sub	sp,4
80002358:	fa c9 ff ff 	sub	r9,sp,-1
8000235c:	fa ca ff fe 	sub	r10,sp,-2
// application grid code

static void handler_MonomeGridKey(s32 data) { 
	u8 x, y, z, index, i1, found, count;
	s16 delta;
	monome_grid_key_parse_event_data(data, &x, &y, &z);
80002360:	fa cb ff fd 	sub	r11,sp,-3
80002364:	e0 a0 19 a6 	rcall	800056b0 <monome_grid_key_parse_event_data>
	// print_dbg_hex(y); 
	// print_dbg("; z: 0x"); 
	// print_dbg_hex(z);

	//// TRACK LONG PRESSES
	index = y*16 + x;
80002368:	1b b8       	ld.ub	r8,sp[0x3]
8000236a:	1b a9       	ld.ub	r9,sp[0x2]
8000236c:	e0 6a 1a a5 	mov	r10,6821
	if(z) {
80002370:	a5 69       	lsl	r9,0x4
	// print_dbg_hex(y); 
	// print_dbg("; z: 0x"); 
	// print_dbg_hex(z);

	//// TRACK LONG PRESSES
	index = y*16 + x;
80002372:	30 0b       	mov	r11,0
80002374:	f0 09 00 09 	add	r9,r8,r9
80002378:	1b 9c       	ld.ub	r12,sp[0x1]
8000237a:	5c 59       	castu.b	r9
	if(z) {
8000237c:	e0 68 09 cc 	mov	r8,2508
80002380:	f6 0c 18 00 	cp.b	r12,r11
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// application grid code

static void handler_MonomeGridKey(s32 data) { 
80002384:	c0 61       	brne	80002390 <handler_MonomeGridKey+0x3c>
80002386:	15 8b       	ld.ub	r11,r10[0x0]
80002388:	30 0a       	mov	r10,0
8000238a:	f0 0b 00 0c 	add	r12,r8,r11
	// print_dbg_hex(z);

	//// TRACK LONG PRESSES
	index = y*16 + x;
	if(z) {
		held_keys[key_count] = index;
8000238e:	c1 78       	rjmp	800023bc <handler_MonomeGridKey+0x68>
80002390:	15 8b       	ld.ub	r11,r10[0x0]
		key_count++;
80002392:	f0 0b 0b 09 	st.b	r8[r11],r9
80002396:	2f fb       	sub	r11,-1
		key_times[index] = 10;		//// THRESHOLD key hold time
80002398:	e0 68 09 ec 	mov	r8,2540
8000239c:	b4 8b       	st.b	r10[0x0],r11
8000239e:	30 aa       	mov	r10,10
	} else {
		found = 0; // "found"
		for(i1 = 0; i1<key_count; i1++) {
			if(held_keys[i1] == index) 
800023a0:	f0 09 0b 0a 	st.b	r8[r9],r10
800023a4:	c5 d8       	rjmp	8000245e <handler_MonomeGridKey+0x10a>
800023a6:	11 8e       	ld.ub	lr,r8[0x0]
				found++;
800023a8:	f2 0e 18 00 	cp.b	lr,r9
			if(found) 
800023ac:	c0 31       	brne	800023b2 <handler_MonomeGridKey+0x5e>
800023ae:	2f fa       	sub	r10,-1
				held_keys[i1] = held_keys[i1+1];
800023b0:	5c 5a       	castu.b	r10
800023b2:	58 0a       	cp.w	r10,0
800023b4:	c0 30       	breq	800023ba <handler_MonomeGridKey+0x66>
		held_keys[key_count] = index;
		key_count++;
		key_times[index] = 10;		//// THRESHOLD key hold time
	} else {
		found = 0; // "found"
		for(i1 = 0; i1<key_count; i1++) {
800023b6:	11 9e       	ld.ub	lr,r8[0x1]
800023b8:	b0 8e       	st.b	r8[0x0],lr
			if(held_keys[i1] == index) 
				found++;
			if(found) 
				held_keys[i1] = held_keys[i1+1];
		}
		key_count--;
800023ba:	2f f8       	sub	r8,-1
800023bc:	18 38       	cp.w	r8,r12
800023be:	cf 41       	brne	800023a6 <handler_MonomeGridKey+0x52>

		// FAST PRESS
		if(key_times[index] > 0) {
800023c0:	e0 68 1a a5 	mov	r8,6821
800023c4:	20 1b       	sub	r11,1
800023c6:	b0 8b       	st.b	r8[0x0],r11
800023c8:	e0 68 09 ec 	mov	r8,2540
800023cc:	f0 09 07 0a 	ld.ub	r10,r8[r9]
			if(edit_mode != mSeries && preset_mode == 0) {
800023d0:	30 08       	mov	r8,0
800023d2:	f0 0a 18 00 	cp.b	r10,r8
800023d6:	c4 40       	breq	8000245e <handler_MonomeGridKey+0x10a>
800023d8:	e0 6a 1a c4 	mov	r10,6852
800023dc:	74 0a       	ld.w	r10,r10[0x0]
800023de:	58 2a       	cp.w	r10,2
				if(index/16 == 2) {
800023e0:	c1 d0       	breq	8000241a <handler_MonomeGridKey+0xc6>
800023e2:	e0 6a 1a 8c 	mov	r10,6796
800023e6:	15 8a       	ld.ub	r10,r10[0x0]
800023e8:	f0 0a 18 00 	cp.b	r10,r8
800023ec:	c1 71       	brne	8000241a <handler_MonomeGridKey+0xc6>
					i1 = index % 16;
					if(key_alt)
800023ee:	f2 cb 00 20 	sub	r11,r9,32

		// FAST PRESS
		if(key_times[index] > 0) {
			if(edit_mode != mSeries && preset_mode == 0) {
				if(index/16 == 2) {
					i1 = index % 16;
800023f2:	30 f8       	mov	r8,15
					if(key_alt)
800023f4:	f0 0b 18 00 	cp.b	r11,r8
800023f8:	e0 8b 00 33 	brhi	8000245e <handler_MonomeGridKey+0x10a>
800023fc:	e0 68 1a 99 	mov	r8,6809
						next_pattern = i1;
					else {
						pattern = i1;
80002400:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
80002404:	11 8b       	ld.ub	r11,r8[0x0]
						next_pattern = i1;
					}
				}
			}
			// PRESET MODE FAST PRESS DETECT
			else if(preset_mode == 1) {
80002406:	e0 68 1a c0 	mov	r8,6848
8000240a:	f4 0b 18 00 	cp.b	r11,r10
8000240e:	c0 41       	brne	80002416 <handler_MonomeGridKey+0xc2>
80002410:	b0 89       	st.b	r8[0x0],r9
				if(x == 0 && y != preset_select) {
80002412:	e0 68 1a 97 	mov	r8,6807
80002416:	b0 89       	st.b	r8[0x0],r9
80002418:	c2 38       	rjmp	8000245e <handler_MonomeGridKey+0x10a>
8000241a:	e0 67 1a 8c 	mov	r7,6796
8000241e:	30 18       	mov	r8,1
80002420:	0f 89       	ld.ub	r9,r7[0x0]
80002422:	f0 09 18 00 	cp.b	r9,r8
					preset_select = y;
80002426:	c1 c1       	brne	8000245e <handler_MonomeGridKey+0x10a>
80002428:	1b b6       	ld.ub	r6,sp[0x3]
8000242a:	58 06       	cp.w	r6,0
8000242c:	c1 91       	brne	8000245e <handler_MonomeGridKey+0x10a>
8000242e:	e0 69 0a fc 	mov	r9,2812
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// application grid code

static void handler_MonomeGridKey(s32 data) { 
80002432:	1b a8       	ld.ub	r8,sp[0x2]
80002434:	13 8a       	ld.ub	r10,r9[0x0]
			// PRESET MODE FAST PRESS DETECT
			else if(preset_mode == 1) {
				if(x == 0 && y != preset_select) {
					preset_select = y;
					for(i1=0;i1<8;i1++)
						glyph[i1] = flashy.glyph[preset_select][i1];
80002436:	f0 0a 18 00 	cp.b	r10,r8
			}
			// PRESET MODE FAST PRESS DETECT
			else if(preset_mode == 1) {
				if(x == 0 && y != preset_select) {
					preset_select = y;
					for(i1=0;i1<8;i1++)
8000243a:	c1 00       	breq	8000245a <handler_MonomeGridKey+0x106>
8000243c:	b2 88       	st.b	r9[0x0],r8
8000243e:	2f f8       	sub	r8,-1
						glyph[i1] = flashy.glyph[preset_select][i1];
				}
 				else if(x==0 && y == preset_select) {
					flash_read();
80002440:	49 b9       	lddpc	r9,800024ac <handler_MonomeGridKey+0x158>
80002442:	f2 08 00 39 	add	r9,r9,r8<<0x3
			// print_dbg_ulong(key_times[index]);
		}
	}

	// PRESET SCREEN
	if(preset_mode) {
80002446:	e0 68 1a a8 	mov	r8,6824
8000244a:	2f f9       	sub	r9,-1
8000244c:	f0 ca ff f8 	sub	r10,r8,-8
80002450:	13 3b       	ld.ub	r11,r9++
		// glyph magic
		if(z && x>7) {
80002452:	10 cb       	st.b	r8++,r11
80002454:	14 38       	cp.w	r8,r10
80002456:	cf d1       	brne	80002450 <handler_MonomeGridKey+0xfc>
80002458:	c0 38       	rjmp	8000245e <handler_MonomeGridKey+0x10a>
8000245a:	c7 be       	rcall	80002150 <flash_read>
8000245c:	ae 86       	st.b	r7[0x0],r6
8000245e:	e0 68 1a 8c 	mov	r8,6796
80002462:	11 87       	ld.ub	r7,r8[0x0]
80002464:	30 08       	mov	r8,0
80002466:	f0 07 18 00 	cp.b	r7,r8
			glyph[y] ^= 1<<(x-8);
8000246a:	c2 30       	breq	800024b0 <handler_MonomeGridKey+0x15c>
8000246c:	1b 99       	ld.ub	r9,sp[0x1]
			monomeFrameDirty++;	
8000246e:	f0 09 18 00 	cp.b	r9,r8

	// PRESET SCREEN
	if(preset_mode) {
		// glyph magic
		if(z && x>7) {
			glyph[y] ^= 1<<(x-8);
80002472:	e0 80 07 b5 	breq	800033dc <handler_MonomeGridKey+0x1088>
80002476:	1b b8       	ld.ub	r8,sp[0x3]
80002478:	30 79       	mov	r9,7
			monomeFrameDirty++;	
8000247a:	f2 08 18 00 	cp.b	r8,r9

	// PRESET SCREEN
	if(preset_mode) {
		// glyph magic
		if(z && x>7) {
			glyph[y] ^= 1<<(x-8);
8000247e:	e0 88 07 af 	brls	800033dc <handler_MonomeGridKey+0x1088>
80002482:	e0 6a 07 61 	mov	r10,1889
80002486:	f0 cc 00 08 	sub	r12,r8,8
8000248a:	15 8e       	ld.ub	lr,r10[0x0]
8000248c:	1b a8       	ld.ub	r8,sp[0x2]
8000248e:	e0 69 1a a8 	mov	r9,6824
80002492:	2f fe       	sub	lr,-1
80002494:	f2 08 07 0b 	ld.ub	r11,r9[r8]
80002498:	b4 8e       	st.b	r10[0x0],lr
8000249a:	30 1a       	mov	r10,1
8000249c:	f4 0c 09 4a 	lsl	r10,r10,r12
800024a0:	16 5a       	eor	r10,r11
800024a2:	f2 08 0b 0a 	st.b	r9[r8],r10
800024a6:	e0 8f 07 9b 	bral	800033dc <handler_MonomeGridKey+0x1088>
800024aa:	d7 03       	nop
800024ac:	80 03       	ld.sh	r3,r0[0x0]
800024ae:	00 00       	add	r0,r0
800024b0:	1b a8       	ld.ub	r8,sp[0x2]
800024b2:	30 19       	mov	r9,1
800024b4:	f2 08 18 00 	cp.b	r8,r9
800024b8:	e0 81 01 4c 	brne	80002750 <handler_MonomeGridKey+0x3fc>
800024bc:	e0 6e 1a cd 	mov	lr,6861
800024c0:	1b 9c       	ld.ub	r12,sp[0x1]
800024c2:	1d 8b       	ld.ub	r11,lr[0x0]

		// OPTIMIZE: order this if-branch by common priority/use
		//// SORT

		// cut position
		if(y == 1) {
800024c4:	f6 0c 00 1b 	add	r11,r11,r12<<0x1
800024c8:	20 1b       	sub	r11,1
800024ca:	ee 0b 18 00 	cp.b	r11,r7
800024ce:	ee 0b 17 50 	movlt	r11,r7
			keycount_pos += z * 2 - 1;
800024d2:	bc 8b       	st.b	lr[0x0],r11
800024d4:	5c 5b       	castu.b	r11
800024d6:	f2 0b 18 00 	cp.b	r11,r9
800024da:	e0 81 00 de 	brne	80002696 <handler_MonomeGridKey+0x342>
			if(keycount_pos < 0) keycount_pos = 0;
800024de:	ee 0c 18 00 	cp.b	r12,r7
800024e2:	e0 80 07 7d 	breq	800033dc <handler_MonomeGridKey+0x1088>
			// print_dbg("\r\nkeycount: "); 
			// print_dbg_ulong(keycount_pos);

			if(keycount_pos == 1 && z) {
800024e6:	e0 69 1a 99 	mov	r9,6809
800024ea:	13 89       	ld.ub	r9,r9[0x0]
800024ec:	58 09       	cp.w	r9,0
800024ee:	c1 21       	brne	80002512 <handler_MonomeGridKey+0x1be>
800024f0:	e0 6a 1a be 	mov	r10,6846
800024f4:	e0 69 07 61 	mov	r9,1889
				if(key_alt == 0) {
800024f8:	15 8b       	ld.ub	r11,r10[0x0]
800024fa:	2f fb       	sub	r11,-1
800024fc:	b4 8b       	st.b	r10[0x0],r11
800024fe:	13 8a       	ld.ub	r10,r9[0x0]
					next_pos = x;
					cut_pos++;
80002500:	2f fa       	sub	r10,-1
					monomeFrameDirty++;
80002502:	b2 8a       	st.b	r9[0x0],r10
			// print_dbg_ulong(keycount_pos);

			if(keycount_pos == 1 && z) {
				if(key_alt == 0) {
					next_pos = x;
					cut_pos++;
80002504:	e0 69 1a 8f 	mov	r9,6799
80002508:	1b b8       	ld.ub	r8,sp[0x3]
					monomeFrameDirty++;
8000250a:	b2 88       	st.b	r9[0x0],r8
8000250c:	e0 69 1a ce 	mov	r9,6862
			// print_dbg("\r\nkeycount: "); 
			// print_dbg_ulong(keycount_pos);

			if(keycount_pos == 1 && z) {
				if(key_alt == 0) {
					next_pos = x;
80002510:	c7 89       	rjmp	80002800 <handler_MonomeGridKey+0x4ac>
80002512:	f0 09 18 00 	cp.b	r9,r8
					cut_pos++;
					monomeFrameDirty++;
					keyfirst_pos = x;
80002516:	e0 81 07 63 	brne	800033dc <handler_MonomeGridKey+0x1088>
				}
				else if(key_alt == 1) {
8000251a:	e0 68 0a ff 	mov	r8,2815
8000251e:	11 89       	ld.ub	r9,r8[0x0]
80002520:	1b b8       	ld.ub	r8,sp[0x3]
					if(x == LENGTH)
80002522:	f2 08 18 00 	cp.b	r8,r9
80002526:	c1 11       	brne	80002548 <handler_MonomeGridKey+0x1f4>
80002528:	e0 68 1a 97 	mov	r8,6807
8000252c:	11 88       	ld.ub	r8,r8[0x0]
						w.wp[pattern].step_mode = mForward;
8000252e:	f0 09 15 04 	lsl	r9,r8,0x4
80002532:	f2 08 01 08 	sub	r8,r9,r8
80002536:	e0 69 0b 04 	mov	r9,2820
8000253a:	a5 68       	lsl	r8,0x4
8000253c:	f2 08 00 08 	add	r8,r9,r8
80002540:	30 09       	mov	r9,0
80002542:	2f 48       	sub	r8,-12
80002544:	e0 8f 01 e5 	bral	8000290e <handler_MonomeGridKey+0x5ba>
80002548:	f2 ca 00 01 	sub	r10,r9,1
					else if(x == LENGTH-1)
8000254c:	14 38       	cp.w	r8,r10
8000254e:	c0 f1       	brne	8000256c <handler_MonomeGridKey+0x218>
80002550:	e0 68 1a 97 	mov	r8,6807
						w.wp[pattern].step_mode = mReverse;
80002554:	11 88       	ld.ub	r8,r8[0x0]
80002556:	f0 09 15 04 	lsl	r9,r8,0x4
8000255a:	f2 08 01 08 	sub	r8,r9,r8
8000255e:	e0 69 0b 04 	mov	r9,2820
80002562:	a5 68       	lsl	r8,0x4
80002564:	f2 08 00 08 	add	r8,r9,r8
80002568:	30 19       	mov	r9,1
					else if(x == LENGTH-2)
8000256a:	c1 28       	rjmp	8000258e <handler_MonomeGridKey+0x23a>
8000256c:	f2 ca 00 02 	sub	r10,r9,2
80002570:	14 38       	cp.w	r8,r10
						w.wp[pattern].step_mode = mDrunk;
80002572:	c1 11       	brne	80002594 <handler_MonomeGridKey+0x240>
80002574:	e0 68 1a 97 	mov	r8,6807
80002578:	11 88       	ld.ub	r8,r8[0x0]
8000257a:	f0 09 15 04 	lsl	r9,r8,0x4
8000257e:	f2 08 01 08 	sub	r8,r9,r8
80002582:	e0 69 0b 04 	mov	r9,2820
80002586:	a5 68       	lsl	r8,0x4
80002588:	f2 08 00 08 	add	r8,r9,r8
8000258c:	30 29       	mov	r9,2
					else if(x == LENGTH-3)
8000258e:	91 39       	st.w	r8[0xc],r9
80002590:	e0 8f 07 26 	bral	800033dc <handler_MonomeGridKey+0x1088>
80002594:	f2 ca 00 03 	sub	r10,r9,3
						w.wp[pattern].step_mode = mRandom;
80002598:	14 38       	cp.w	r8,r10
8000259a:	c0 f1       	brne	800025b8 <handler_MonomeGridKey+0x264>
8000259c:	e0 68 1a 97 	mov	r8,6807
800025a0:	11 88       	ld.ub	r8,r8[0x0]
800025a2:	f0 09 15 04 	lsl	r9,r8,0x4
800025a6:	f2 08 01 08 	sub	r8,r9,r8
800025aa:	e0 69 0b 04 	mov	r9,2820
					// FIXME
					else if(x == 0) {
800025ae:	a5 68       	lsl	r8,0x4
800025b0:	f2 08 00 08 	add	r8,r9,r8
						if(pos == w.wp[pattern].loop_start)
800025b4:	30 39       	mov	r9,3
800025b6:	ce cb       	rjmp	8000258e <handler_MonomeGridKey+0x23a>
800025b8:	58 08       	cp.w	r8,0
800025ba:	c1 f1       	brne	800025f8 <handler_MonomeGridKey+0x2a4>
800025bc:	e0 68 0a fe 	mov	r8,2814
800025c0:	11 8a       	ld.ub	r10,r8[0x0]
800025c2:	e0 68 1a 97 	mov	r8,6807
800025c6:	11 88       	ld.ub	r8,r8[0x0]
800025c8:	f0 0b 15 04 	lsl	r11,r8,0x4
800025cc:	f6 08 01 08 	sub	r8,r11,r8
800025d0:	e0 6b 0b 04 	mov	r11,2820
							next_pos = w.wp[pattern].loop_end;
800025d4:	a5 68       	lsl	r8,0x4
800025d6:	f9 da b0 08 	bfexts	r12,r10,0x0,0x8
						else if(pos == 0)
800025da:	f6 08 00 08 	add	r8,r11,r8
							next_pos = LENGTH;
						else next_pos--;
800025de:	11 8b       	ld.ub	r11,r8[0x0]
800025e0:	16 3c       	cp.w	r12,r11
800025e2:	c0 31       	brne	800025e8 <handler_MonomeGridKey+0x294>
800025e4:	11 99       	ld.ub	r9,r8[0x1]
800025e6:	c2 08       	rjmp	80002626 <handler_MonomeGridKey+0x2d2>
800025e8:	e0 68 1a 8f 	mov	r8,6799
800025ec:	58 0a       	cp.w	r10,0
800025ee:	c2 70       	breq	8000263c <handler_MonomeGridKey+0x2e8>
800025f0:	11 89       	ld.ub	r9,r8[0x0]
800025f2:	20 19       	sub	r9,1
800025f4:	c2 48       	rjmp	8000263c <handler_MonomeGridKey+0x2e8>
800025f6:	d7 03       	nop
800025f8:	f6 08 18 00 	cp.b	r8,r11
800025fc:	c2 b1       	brne	80002652 <handler_MonomeGridKey+0x2fe>
800025fe:	e0 68 0a fe 	mov	r8,2814
80002602:	f1 2a 00 00 	ld.sb	r10,r8[0]
80002606:	e0 68 1a 97 	mov	r8,6807
8000260a:	11 88       	ld.ub	r8,r8[0x0]
						cut_pos = 1;
						monomeFrameDirty++;
					}
					// FIXME
					else if(x == 1) {
8000260c:	f0 0b 15 04 	lsl	r11,r8,0x4
80002610:	f6 08 01 08 	sub	r8,r11,r8
						if(pos == w.wp[pattern].loop_end) next_pos = w.wp[pattern].loop_start;
80002614:	e0 6b 0b 04 	mov	r11,2820
80002618:	a5 68       	lsl	r8,0x4
8000261a:	f6 08 00 08 	add	r8,r11,r8
8000261e:	11 9b       	ld.ub	r11,r8[0x1]
80002620:	16 3a       	cp.w	r10,r11
80002622:	c0 51       	brne	8000262c <handler_MonomeGridKey+0x2d8>
80002624:	11 89       	ld.ub	r9,r8[0x0]
80002626:	e0 68 1a 8f 	mov	r8,6799
8000262a:	c0 98       	rjmp	8000263c <handler_MonomeGridKey+0x2e8>
8000262c:	e0 68 1a 8f 	mov	r8,6799
80002630:	12 3a       	cp.w	r10,r9
80002632:	c0 31       	brne	80002638 <handler_MonomeGridKey+0x2e4>
80002634:	30 09       	mov	r9,0
80002636:	c0 38       	rjmp	8000263c <handler_MonomeGridKey+0x2e8>
80002638:	11 89       	ld.ub	r9,r8[0x0]
						else if(pos == LENGTH) next_pos = 0;
8000263a:	2f f9       	sub	r9,-1
8000263c:	b0 89       	st.b	r8[0x0],r9
8000263e:	e0 68 07 61 	mov	r8,1889
						else next_pos++;
80002642:	11 89       	ld.ub	r9,r8[0x0]
80002644:	2f f9       	sub	r9,-1
80002646:	b0 89       	st.b	r8[0x0],r9
						cut_pos = 1;
						monomeFrameDirty++;
80002648:	30 19       	mov	r9,1
8000264a:	e0 68 1a be 	mov	r8,6846
8000264e:	e0 8f 06 c6 	bral	800033da <handler_MonomeGridKey+0x1086>
					// FIXME
					else if(x == 1) {
						if(pos == w.wp[pattern].loop_end) next_pos = w.wp[pattern].loop_start;
						else if(pos == LENGTH) next_pos = 0;
						else next_pos++;
						cut_pos = 1;
80002652:	30 29       	mov	r9,2
80002654:	f2 08 18 00 	cp.b	r8,r9
						monomeFrameDirty++;
					}
					else if(x == 2 ) {
80002658:	e0 81 06 c2 	brne	800033dc <handler_MonomeGridKey+0x1088>
8000265c:	e0 a0 1d 6c 	rcall	80006134 <rnd>
80002660:	e0 69 07 61 	mov	r9,1889
						next_pos = (rnd() % (w.wp[pattern].loop_len + 1)) + w.wp[pattern].loop_start;
80002664:	e0 68 1a 97 	mov	r8,6807
80002668:	13 8a       	ld.ub	r10,r9[0x0]
						cut_pos = 1;
						monomeFrameDirty++;					
8000266a:	11 88       	ld.ub	r8,r8[0x0]
						else next_pos++;
						cut_pos = 1;
						monomeFrameDirty++;
					}
					else if(x == 2 ) {
						next_pos = (rnd() % (w.wp[pattern].loop_len + 1)) + w.wp[pattern].loop_start;
8000266c:	2f fa       	sub	r10,-1
						cut_pos = 1;
						monomeFrameDirty++;					
8000266e:	b2 8a       	st.b	r9[0x0],r10
80002670:	f0 09 15 04 	lsl	r9,r8,0x4
						else next_pos++;
						cut_pos = 1;
						monomeFrameDirty++;
					}
					else if(x == 2 ) {
						next_pos = (rnd() % (w.wp[pattern].loop_len + 1)) + w.wp[pattern].loop_start;
80002674:	f2 08 01 08 	sub	r8,r9,r8
80002678:	e0 69 0b 04 	mov	r9,2820
8000267c:	a5 68       	lsl	r8,0x4
8000267e:	f2 08 00 08 	add	r8,r9,r8
80002682:	11 89       	ld.ub	r9,r8[0x0]
80002684:	11 a8       	ld.ub	r8,r8[0x2]
80002686:	2f f8       	sub	r8,-1
80002688:	f8 08 0d 0a 	divu	r10,r12,r8
8000268c:	e0 6a 1a 8f 	mov	r10,6799
80002690:	16 09       	add	r9,r11
80002692:	b4 89       	st.b	r10[0x0],r9
						cut_pos = 1;
						monomeFrameDirty++;					
					}
				}
			}
			else if(keycount_pos == 2 && z) {
80002694:	cd ab       	rjmp	80002648 <handler_MonomeGridKey+0x2f4>
80002696:	30 28       	mov	r8,2
80002698:	f0 0b 18 00 	cp.b	r11,r8
8000269c:	e0 81 06 a0 	brne	800033dc <handler_MonomeGridKey+0x1088>
800026a0:	ee 0c 18 00 	cp.b	r12,r7
800026a4:	e0 80 06 9c 	breq	800033dc <handler_MonomeGridKey+0x1088>
				w.wp[pattern].loop_start = keyfirst_pos;
				w.wp[pattern].loop_end = x;
	 			monomeFrameDirty++;
800026a8:	e0 68 07 61 	mov	r8,1889
800026ac:	11 89       	ld.ub	r9,r8[0x0]
						monomeFrameDirty++;					
					}
				}
			}
			else if(keycount_pos == 2 && z) {
				w.wp[pattern].loop_start = keyfirst_pos;
800026ae:	2f f9       	sub	r9,-1
800026b0:	b0 89       	st.b	r8[0x0],r9
800026b2:	e0 68 1a 97 	mov	r8,6807
800026b6:	11 89       	ld.ub	r9,r8[0x0]
800026b8:	e0 68 1a ce 	mov	r8,6862
800026bc:	11 8a       	ld.ub	r10,r8[0x0]
800026be:	e0 6c 0b 04 	mov	r12,2820
800026c2:	f2 08 15 04 	lsl	r8,r9,0x4
				w.wp[pattern].loop_end = x;
800026c6:	12 18       	sub	r8,r9
800026c8:	a5 68       	lsl	r8,0x4
	 			monomeFrameDirty++;
	 			if(w.wp[pattern].loop_start > w.wp[pattern].loop_end) w.wp[pattern].loop_dir = 2;
800026ca:	f8 08 00 08 	add	r8,r12,r8
800026ce:	b0 8a       	st.b	r8[0x0],r10
800026d0:	1b ba       	ld.ub	r10,sp[0x3]
800026d2:	b0 9a       	st.b	r8[0x1],r10
800026d4:	11 8a       	ld.ub	r10,r8[0x0]
800026d6:	11 9c       	ld.ub	r12,r8[0x1]
800026d8:	f8 0a 18 00 	cp.b	r10,r12
	 			else if(w.wp[pattern].loop_start == 0 && w.wp[pattern].loop_end == LENGTH) w.wp[pattern].loop_dir = 0;
800026dc:	e0 88 00 04 	brls	800026e4 <handler_MonomeGridKey+0x390>
800026e0:	b0 bb       	st.b	r8[0x3],r11
800026e2:	c1 68       	rjmp	8000270e <handler_MonomeGridKey+0x3ba>
800026e4:	58 0a       	cp.w	r10,0
800026e6:	c0 91       	brne	800026f8 <handler_MonomeGridKey+0x3a4>
800026e8:	e0 6b 0a ff 	mov	r11,2815
800026ec:	17 8b       	ld.ub	r11,r11[0x0]
800026ee:	f8 0b 18 00 	cp.b	r11,r12
800026f2:	c0 31       	brne	800026f8 <handler_MonomeGridKey+0x3a4>
800026f4:	b0 ba       	st.b	r8[0x3],r10
800026f6:	c0 c8       	rjmp	8000270e <handler_MonomeGridKey+0x3ba>
800026f8:	f2 08 15 04 	lsl	r8,r9,0x4
800026fc:	f0 09 01 09 	sub	r9,r8,r9
80002700:	e0 68 0b 04 	mov	r8,2820
80002704:	a5 69       	lsl	r9,0x4
80002706:	f0 09 00 09 	add	r9,r8,r9
8000270a:	30 18       	mov	r8,1
8000270c:	b2 b8       	st.b	r9[0x3],r8
8000270e:	e0 68 1a 97 	mov	r8,6807
	 			else w.wp[pattern].loop_dir = 1;
80002712:	11 88       	ld.ub	r8,r8[0x0]
80002714:	f0 09 15 04 	lsl	r9,r8,0x4
80002718:	f2 08 01 08 	sub	r8,r9,r8
8000271c:	e0 69 0b 04 	mov	r9,2820
80002720:	a5 68       	lsl	r8,0x4
80002722:	f2 08 00 08 	add	r8,r9,r8

	 			w.wp[pattern].loop_len = w.wp[pattern].loop_end - w.wp[pattern].loop_start;
80002726:	11 9a       	ld.ub	r10,r8[0x1]
80002728:	11 89       	ld.ub	r9,r8[0x0]
8000272a:	f4 09 01 0c 	sub	r12,r10,r9
8000272e:	b0 ac       	st.b	r8[0x2],r12
80002730:	30 2b       	mov	r11,2
80002732:	11 bc       	ld.ub	r12,r8[0x3]
80002734:	f6 0c 18 00 	cp.b	r12,r11
80002738:	e0 81 06 52 	brne	800033dc <handler_MonomeGridKey+0x1088>
8000273c:	e0 6b 0a ff 	mov	r11,2815
80002740:	17 8b       	ld.ub	r11,r11[0x0]

	 			if(w.wp[pattern].loop_dir == 2)
80002742:	f6 0a 00 0a 	add	r10,r11,r10
80002746:	2f fa       	sub	r10,-1
80002748:	12 1a       	sub	r10,r9
8000274a:	b0 aa       	st.b	r8[0x2],r10
8000274c:	e0 8f 06 48 	bral	800033dc <handler_MonomeGridKey+0x1088>
	 				w.wp[pattern].loop_len = (LENGTH - w.wp[pattern].loop_start) + w.wp[pattern].loop_end + 1;
80002750:	58 08       	cp.w	r8,0
80002752:	e0 81 00 e4 	brne	8000291a <handler_MonomeGridKey+0x5c6>
80002756:	e0 69 0a ff 	mov	r9,2815
8000275a:	13 8b       	ld.ub	r11,r9[0x0]
8000275c:	1b b9       	ld.ub	r9,sp[0x3]
8000275e:	f6 09 18 00 	cp.b	r9,r11
				// print_dbg_ulong(w.wp[pattern].loop_len);
			}
		}

		// top row
		else if(y == 0) {
80002762:	c1 01       	brne	80002782 <handler_MonomeGridKey+0x42e>
80002764:	1b 99       	ld.ub	r9,sp[0x1]
			if(x == LENGTH) {
80002766:	e0 6b 1a 99 	mov	r11,6809
8000276a:	b6 89       	st.b	r11[0x0],r9
8000276c:	ee 09 18 00 	cp.b	r9,r7
80002770:	e0 81 06 31 	brne	800033d2 <handler_MonomeGridKey+0x107e>
				key_alt = z;
80002774:	e0 6a 1a b4 	mov	r10,6836
				if(z == 0) {
80002778:	b4 88       	st.b	r10[0x0],r8
8000277a:	e0 68 1a 90 	mov	r8,6800
8000277e:	e0 8f 05 14 	bral	800031a6 <handler_MonomeGridKey+0xe52>
					param_accept = 0;
80002782:	30 3c       	mov	r12,3
					live_in = 0;
80002784:	f8 09 18 00 	cp.b	r9,r12
80002788:	e0 8b 00 3f 	brhi	80002806 <handler_MonomeGridKey+0x4b2>
				}
				monomeFrameDirty++;
			}
			else if(x < 4 && z) {
8000278c:	1b 9c       	ld.ub	r12,sp[0x1]
8000278e:	ee 0c 18 00 	cp.b	r12,r7
80002792:	c3 a0       	breq	80002806 <handler_MonomeGridKey+0x4b2>
80002794:	e0 6b 1a 99 	mov	r11,6809
80002798:	17 8b       	ld.ub	r11,r11[0x0]
8000279a:	ee 0b 18 00 	cp.b	r11,r7
				if(key_alt)
8000279e:	c1 20       	breq	800027c2 <handler_MonomeGridKey+0x46e>
800027a0:	e0 68 1a 97 	mov	r8,6807
800027a4:	11 88       	ld.ub	r8,r8[0x0]
					w.wp[pattern].tr_mode ^= 1;
800027a6:	e0 69 0b 04 	mov	r9,2820
800027aa:	f0 0a 15 04 	lsl	r10,r8,0x4
800027ae:	10 1a       	sub	r10,r8
800027b0:	a1 7a       	lsl	r10,0x1
800027b2:	2f fa       	sub	r10,-1
800027b4:	f2 0a 07 38 	ld.ub	r8,r9[r10<<0x3]
800027b8:	ec 18 00 01 	eorl	r8,0x1
800027bc:	f2 0a 0b 38 	st.b	r9[r10<<0x3],r8
800027c0:	c1 58       	rjmp	800027ea <handler_MonomeGridKey+0x496>
800027c2:	e0 6a 1a b1 	mov	r10,6833
				else if(scroll)
800027c6:	15 8a       	ld.ub	r10,r10[0x0]
800027c8:	f6 0a 18 00 	cp.b	r10,r11
800027cc:	c0 c0       	breq	800027e4 <handler_MonomeGridKey+0x490>
					w.tr_mute[x] ^= 1;
800027ce:	e0 68 0b 04 	mov	r8,2820
800027d2:	f0 09 00 09 	add	r9,r8,r9
800027d6:	f3 38 0f 82 	ld.ub	r8,r9[3970]
800027da:	ec 18 00 01 	eorl	r8,0x1
800027de:	f3 68 0f 82 	st.b	r9[3970],r8
				else edit_mode = mTrig;
800027e2:	c0 48       	rjmp	800027ea <handler_MonomeGridKey+0x496>
800027e4:	e0 69 1a c4 	mov	r9,6852
				edit_prob = 0;
800027e8:	93 08       	st.w	r9[0x0],r8
800027ea:	e0 69 07 61 	mov	r9,1889
				param_accept = 0;
				monomeFrameDirty++;
800027ee:	e0 6a 1a bd 	mov	r10,6845
800027f2:	30 08       	mov	r8,0
					w.wp[pattern].tr_mode ^= 1;
				else if(scroll)
					w.tr_mute[x] ^= 1;
				else edit_mode = mTrig;
				edit_prob = 0;
				param_accept = 0;
800027f4:	b4 88       	st.b	r10[0x0],r8
800027f6:	13 8a       	ld.ub	r10,r9[0x0]
					param_accept = 0;
					live_in = 0;
				}
				monomeFrameDirty++;
			}
			else if(x < 4 && z) {
800027f8:	2f fa       	sub	r10,-1
800027fa:	b2 8a       	st.b	r9[0x0],r10
				else edit_mode = mTrig;
				edit_prob = 0;
				param_accept = 0;
				monomeFrameDirty++;
			}
			else if(SIZE==16 && x > 3 && x < 12 && z) {
800027fc:	e0 69 1a b4 	mov	r9,6836
80002800:	b2 88       	st.b	r9[0x0],r8
80002802:	e0 8f 05 ed 	bral	800033dc <handler_MonomeGridKey+0x1088>
80002806:	e0 68 0a ec 	mov	r8,2796
8000280a:	31 0a       	mov	r10,16
8000280c:	11 88       	ld.ub	r8,r8[0x0]
8000280e:	f4 08 18 00 	cp.b	r8,r10
80002812:	c1 b1       	brne	80002848 <handler_MonomeGridKey+0x4f4>
80002814:	30 38       	mov	r8,3
80002816:	f0 09 18 00 	cp.b	r9,r8
8000281a:	e0 88 00 64 	brls	800028e2 <handler_MonomeGridKey+0x58e>
8000281e:	30 b8       	mov	r8,11
80002820:	f0 09 18 00 	cp.b	r9,r8
80002824:	e0 8b 00 5f 	brhi	800028e2 <handler_MonomeGridKey+0x58e>
				param_accept = 0;
80002828:	30 08       	mov	r8,0
				edit_cv_ch = (x-4)/4;
8000282a:	1b 9a       	ld.ub	r10,sp[0x1]
8000282c:	f0 0a 18 00 	cp.b	r10,r8
80002830:	c5 90       	breq	800028e2 <handler_MonomeGridKey+0x58e>
80002832:	e0 69 1a b4 	mov	r9,6836
80002836:	b2 88       	st.b	r9[0x0],r8
80002838:	30 49       	mov	r9,4
8000283a:	1b bb       	ld.ub	r11,sp[0x3]
8000283c:	20 4b       	sub	r11,4
8000283e:	f6 09 0c 0a 	divs	r10,r11,r9
80002842:	f3 da c0 08 	bfextu	r9,r10,0x0,0x8
80002846:	c1 78       	rjmp	80002874 <handler_MonomeGridKey+0x520>
80002848:	30 8a       	mov	r10,8
8000284a:	f4 08 18 00 	cp.b	r8,r10
8000284e:	c4 a1       	brne	800028e2 <handler_MonomeGridKey+0x58e>
80002850:	f2 ca 00 04 	sub	r10,r9,4
80002854:	30 18       	mov	r8,1
80002856:	f0 0a 18 00 	cp.b	r10,r8
8000285a:	e0 8b 00 44 	brhi	800028e2 <handler_MonomeGridKey+0x58e>
8000285e:	30 08       	mov	r8,0
80002860:	1b 9a       	ld.ub	r10,sp[0x1]
80002862:	f0 0a 18 00 	cp.b	r10,r8
80002866:	c3 e0       	breq	800028e2 <handler_MonomeGridKey+0x58e>
				else if(scroll)
					w.cv_mute[edit_cv_ch] ^= 1;

				monomeFrameDirty++;
			}
			else if(SIZE==8 && (x == 4 || x == 5) && z) {
80002868:	e0 69 1a b4 	mov	r9,6836
8000286c:	b2 88       	st.b	r9[0x0],r8
8000286e:	1b b9       	ld.ub	r9,sp[0x3]
80002870:	20 49       	sub	r9,4
80002872:	5c 59       	castu.b	r9
80002874:	e0 6a 1a b3 	mov	r10,6835
80002878:	b4 89       	st.b	r10[0x0],r9
8000287a:	e0 6a 1a c4 	mov	r10,6852
8000287e:	30 1b       	mov	r11,1
80002880:	95 0b       	st.w	r10[0x0],r11
80002882:	e0 6a 1a bd 	mov	r10,6845
80002886:	b4 88       	st.b	r10[0x0],r8
				param_accept = 0;
80002888:	e0 6a 1a 99 	mov	r10,6809
				edit_cv_ch = x-4;
8000288c:	15 8a       	ld.ub	r10,r10[0x0]
8000288e:	f0 0a 18 00 	cp.b	r10,r8
80002892:	c1 50       	breq	800028bc <handler_MonomeGridKey+0x568>
80002894:	e0 68 1a 97 	mov	r8,6807
				edit_mode = mMap;
80002898:	11 88       	ld.ub	r8,r8[0x0]
8000289a:	f0 0a 15 04 	lsl	r10,r8,0x4
				edit_prob = 0;
8000289e:	f4 08 01 08 	sub	r8,r10,r8

				if(key_alt)
800028a2:	e0 6a 0b 04 	mov	r10,2820
800028a6:	a5 68       	lsl	r8,0x4
800028a8:	f4 08 00 08 	add	r8,r10,r8
					w.wp[pattern].cv_mode[edit_cv_ch] ^= 1;
800028ac:	f0 09 00 09 	add	r9,r8,r9
800028b0:	2f c9       	sub	r9,-4
800028b2:	13 a8       	ld.ub	r8,r9[0x2]
800028b4:	16 58       	eor	r8,r11
800028b6:	b2 a8       	st.b	r9[0x2],r8
800028b8:	e0 8f 05 8d 	bral	800033d2 <handler_MonomeGridKey+0x107e>
800028bc:	e0 68 1a b1 	mov	r8,6833
800028c0:	11 88       	ld.ub	r8,r8[0x0]
800028c2:	f4 08 18 00 	cp.b	r8,r10
800028c6:	e0 80 05 86 	breq	800033d2 <handler_MonomeGridKey+0x107e>
800028ca:	e0 68 0b 04 	mov	r8,2820
				else if(scroll)
800028ce:	f0 09 00 09 	add	r9,r8,r9
800028d2:	f3 38 0f 86 	ld.ub	r8,r9[3974]
800028d6:	ec 18 00 01 	eorl	r8,0x1
					w.cv_mute[edit_cv_ch] ^= 1;
800028da:	f3 68 0f 86 	st.b	r9[3974],r8
800028de:	e0 8f 05 7a 	bral	800033d2 <handler_MonomeGridKey+0x107e>
800028e2:	20 1b       	sub	r11,1
800028e4:	16 39       	cp.w	r9,r11
800028e6:	e0 81 05 7b 	brne	800033dc <handler_MonomeGridKey+0x1088>
800028ea:	1b 98       	ld.ub	r8,sp[0x1]
800028ec:	58 08       	cp.w	r8,0
800028ee:	c1 30       	breq	80002914 <handler_MonomeGridKey+0x5c0>

				monomeFrameDirty++;
			}
			else if(x == LENGTH-1 && z && key_alt) {
800028f0:	e0 69 1a 99 	mov	r9,6809
800028f4:	13 8a       	ld.ub	r10,r9[0x0]
800028f6:	30 09       	mov	r9,0
800028f8:	f2 0a 18 00 	cp.b	r10,r9
800028fc:	c0 c0       	breq	80002914 <handler_MonomeGridKey+0x5c0>
800028fe:	e0 68 07 61 	mov	r8,1889
80002902:	11 89       	ld.ub	r9,r8[0x0]
80002904:	2f f9       	sub	r9,-1
80002906:	b0 89       	st.b	r8[0x0],r9
80002908:	30 29       	mov	r9,2
				edit_mode = mSeries;
				monomeFrameDirty++;
8000290a:	e0 68 1a c4 	mov	r8,6852
8000290e:	91 09       	st.w	r8[0x0],r9
80002910:	e0 8f 05 66 	bral	800033dc <handler_MonomeGridKey+0x1088>
					w.cv_mute[edit_cv_ch] ^= 1;

				monomeFrameDirty++;
			}
			else if(x == LENGTH-1 && z && key_alt) {
				edit_mode = mSeries;
80002914:	e0 69 1a b1 	mov	r9,6833
				else if(scroll)
					w.cv_mute[edit_cv_ch] ^= 1;

				monomeFrameDirty++;
			}
			else if(x == LENGTH-1 && z && key_alt) {
80002918:	c7 4b       	rjmp	80002800 <handler_MonomeGridKey+0x4ac>
8000291a:	e0 6b 1a c4 	mov	r11,6852
				edit_mode = mSeries;
				monomeFrameDirty++;
			}
			else if(x == LENGTH-1)
				scroll = z;
8000291e:	76 0b       	ld.w	r11,r11[0x0]
		}


		// toggle steps and prob control
		else if(edit_mode == mTrig) {
80002920:	58 0b       	cp.w	r11,0
80002922:	e0 81 00 da 	brne	80002ad6 <handler_MonomeGridKey+0x782>
80002926:	1b 9b       	ld.ub	r11,sp[0x1]
80002928:	58 0b       	cp.w	r11,0
			if(z && y>3 && edit_prob == 0) {
8000292a:	c7 d0       	breq	80002a24 <handler_MonomeGridKey+0x6d0>
8000292c:	30 3c       	mov	r12,3
8000292e:	f8 08 18 00 	cp.b	r8,r12
80002932:	e0 88 00 56 	brls	800029de <handler_MonomeGridKey+0x68a>
80002936:	e0 69 1a bd 	mov	r9,6845
8000293a:	13 89       	ld.ub	r9,r9[0x0]
8000293c:	ee 09 18 00 	cp.b	r9,r7
80002940:	c7 21       	brne	80002a24 <handler_MonomeGridKey+0x6d0>
80002942:	e0 6a 1a 99 	mov	r10,6809
				if(key_alt)
80002946:	15 8c       	ld.ub	r12,r10[0x0]
80002948:	f2 0c 18 00 	cp.b	r12,r9
8000294c:	c1 a0       	breq	80002980 <handler_MonomeGridKey+0x62c>
8000294e:	e0 69 1a 97 	mov	r9,6807
					w.wp[pattern].steps[pos] |=  1 << (y-4);
80002952:	13 8a       	ld.ub	r10,r9[0x0]
80002954:	e0 69 0a fe 	mov	r9,2814
80002958:	f3 2b 00 00 	ld.sb	r11,r9[0]
8000295c:	f4 09 15 04 	lsl	r9,r10,0x4
80002960:	f2 0a 01 0a 	sub	r10,r9,r10
80002964:	a5 6a       	lsl	r10,0x4
80002966:	e0 69 0b 04 	mov	r9,2820
8000296a:	14 09       	add	r9,r10
8000296c:	30 1a       	mov	r10,1
8000296e:	20 48       	sub	r8,4
80002970:	16 09       	add	r9,r11
80002972:	f4 08 09 48 	lsl	r8,r10,r8
80002976:	2f 09       	sub	r9,-16
80002978:	13 8a       	ld.ub	r10,r9[0x0]
8000297a:	14 48       	or	r8,r10
				else if(scroll) {
8000297c:	e0 8f 01 ca 	bral	80002d10 <handler_MonomeGridKey+0x9bc>
80002980:	e0 69 1a b1 	mov	r9,6833
80002984:	1b ba       	ld.ub	r10,sp[0x3]
80002986:	13 8e       	ld.ub	lr,r9[0x0]
80002988:	e0 6b 1a 97 	mov	r11,6807
					w.wp[pattern].step_choice ^= (1<<x);
8000298c:	e0 69 0b 04 	mov	r9,2820
80002990:	f8 0e 18 00 	cp.b	lr,r12
80002994:	c1 20       	breq	800029b8 <handler_MonomeGridKey+0x664>
80002996:	17 88       	ld.ub	r8,r11[0x0]
80002998:	30 1b       	mov	r11,1
8000299a:	f6 0a 09 4a 	lsl	r10,r11,r10
8000299e:	f0 0b 15 04 	lsl	r11,r8,0x4
800029a2:	f6 08 01 08 	sub	r8,r11,r8
800029a6:	a3 68       	lsl	r8,0x2
800029a8:	2f f8       	sub	r8,-1
800029aa:	f2 08 04 2b 	ld.sh	r11,r9[r8<<0x2]
800029ae:	16 5a       	eor	r10,r11
800029b0:	f2 08 0a 2a 	st.h	r9[r8<<0x2],r10
800029b4:	e0 8f 05 0f 	bral	800033d2 <handler_MonomeGridKey+0x107e>
800029b8:	17 8b       	ld.ub	r11,r11[0x0]
800029ba:	f6 0c 15 04 	lsl	r12,r11,0x4
800029be:	f8 0b 01 0b 	sub	r11,r12,r11
800029c2:	a5 6b       	lsl	r11,0x4
800029c4:	16 09       	add	r9,r11
800029c6:	f2 0a 00 0a 	add	r10,r9,r10
800029ca:	30 19       	mov	r9,1
800029cc:	2f 0a       	sub	r10,-16
800029ce:	20 48       	sub	r8,4
800029d0:	f2 08 09 48 	lsl	r8,r9,r8
800029d4:	15 89       	ld.ub	r9,r10[0x0]
800029d6:	12 58       	eor	r8,r9
				}
				else
					w.wp[pattern].steps[x] ^= (1<<(y-4));
800029d8:	b4 88       	st.b	r10[0x0],r8
800029da:	e0 8f 04 fc 	bral	800033d2 <handler_MonomeGridKey+0x107e>
800029de:	f8 08 18 00 	cp.b	r8,r12
800029e2:	c2 11       	brne	80002a24 <handler_MonomeGridKey+0x6d0>
800029e4:	e0 68 1a 99 	mov	r8,6809
800029e8:	11 8b       	ld.ub	r11,r8[0x0]
800029ea:	ee 0b 18 00 	cp.b	r11,r7
800029ee:	c0 50       	breq	800029f8 <handler_MonomeGridKey+0x6a4>
800029f0:	e0 68 1a bd 	mov	r8,6845
800029f4:	e0 8f 03 d9 	bral	800031a6 <handler_MonomeGridKey+0xe52>
800029f8:	e0 68 1a 97 	mov	r8,6807
800029fc:	1b ba       	ld.ub	r10,sp[0x3]
				monomeFrameDirty++;
			}
			// step probs
			else if(z && y==3) {
800029fe:	11 89       	ld.ub	r9,r8[0x0]
80002a00:	f2 08 15 04 	lsl	r8,r9,0x4
				if(key_alt)
80002a04:	f0 09 01 09 	sub	r9,r8,r9
80002a08:	a5 69       	lsl	r9,0x4
80002a0a:	e0 68 0b 04 	mov	r8,2820
					edit_prob = 1;
80002a0e:	12 08       	add	r8,r9
80002a10:	3f f9       	mov	r9,-1
80002a12:	14 08       	add	r8,r10
				else {
					if(w.wp[pattern].step_probs[x] == 255) w.wp[pattern].step_probs[x] = 0;
80002a14:	2e 08       	sub	r8,-32
80002a16:	11 8a       	ld.ub	r10,r8[0x0]
80002a18:	f2 0a 18 00 	cp.b	r10,r9
80002a1c:	f6 09 17 00 	moveq	r9,r11
80002a20:	e0 8f 03 c3 	bral	800031a6 <handler_MonomeGridKey+0xe52>
80002a24:	e0 69 1a bd 	mov	r9,6845
80002a28:	13 8a       	ld.ub	r10,r9[0x0]
80002a2a:	30 19       	mov	r9,1
80002a2c:	f2 0a 18 00 	cp.b	r10,r9
80002a30:	e0 81 04 d6 	brne	800033dc <handler_MonomeGridKey+0x1088>
80002a34:	58 0b       	cp.w	r11,0
80002a36:	e0 80 04 d3 	breq	800033dc <handler_MonomeGridKey+0x1088>
80002a3a:	30 49       	mov	r9,4
					else w.wp[pattern].step_probs[x] = 255;
				}	
				monomeFrameDirty++;
			}
			else if(edit_prob == 1) {
80002a3c:	f2 08 18 00 	cp.b	r8,r9
80002a40:	c1 11       	brne	80002a62 <handler_MonomeGridKey+0x70e>
80002a42:	1b b9       	ld.ub	r9,sp[0x3]
80002a44:	e0 68 1a 97 	mov	r8,6807
80002a48:	11 88       	ld.ub	r8,r8[0x0]
				if(z) {
80002a4a:	f0 0a 15 04 	lsl	r10,r8,0x4
80002a4e:	f4 08 01 08 	sub	r8,r10,r8
					if(y == 4) w.wp[pattern].step_probs[x] = 192;
80002a52:	e0 6a 0b 04 	mov	r10,2820
80002a56:	a5 68       	lsl	r8,0x4
80002a58:	f4 08 00 08 	add	r8,r10,r8
80002a5c:	12 08       	add	r8,r9
80002a5e:	3c 09       	mov	r9,-64
80002a60:	c1 48       	rjmp	80002a88 <handler_MonomeGridKey+0x734>
80002a62:	30 59       	mov	r9,5
80002a64:	f2 08 18 00 	cp.b	r8,r9
80002a68:	c1 41       	brne	80002a90 <handler_MonomeGridKey+0x73c>
80002a6a:	1b b9       	ld.ub	r9,sp[0x3]
80002a6c:	e0 68 1a 97 	mov	r8,6807
80002a70:	11 88       	ld.ub	r8,r8[0x0]
80002a72:	f0 0a 15 04 	lsl	r10,r8,0x4
					else if(y == 5) w.wp[pattern].step_probs[x] = 128;
80002a76:	f4 08 01 08 	sub	r8,r10,r8
80002a7a:	e0 6a 0b 04 	mov	r10,2820
80002a7e:	a5 68       	lsl	r8,0x4
80002a80:	f4 08 00 08 	add	r8,r10,r8
80002a84:	12 08       	add	r8,r9
80002a86:	38 09       	mov	r9,-128
80002a88:	f1 69 00 20 	st.b	r8[32],r9
80002a8c:	e0 8f 04 a8 	bral	800033dc <handler_MonomeGridKey+0x1088>
80002a90:	1b ba       	ld.ub	r10,sp[0x3]
80002a92:	e0 6b 1a 97 	mov	r11,6807
80002a96:	e0 69 0b 04 	mov	r9,2820
80002a9a:	30 6c       	mov	r12,6
80002a9c:	f8 08 18 00 	cp.b	r8,r12
80002aa0:	c0 f1       	brne	80002abe <handler_MonomeGridKey+0x76a>
80002aa2:	17 88       	ld.ub	r8,r11[0x0]
					else if(y == 6) w.wp[pattern].step_probs[x] = 64;
80002aa4:	f0 0b 15 04 	lsl	r11,r8,0x4
80002aa8:	f6 08 01 08 	sub	r8,r11,r8
80002aac:	a5 68       	lsl	r8,0x4
80002aae:	10 09       	add	r9,r8
80002ab0:	34 08       	mov	r8,64
80002ab2:	f2 0a 00 0a 	add	r10,r9,r10
80002ab6:	f5 68 00 20 	st.b	r10[32],r8
80002aba:	e0 8f 04 91 	bral	800033dc <handler_MonomeGridKey+0x1088>
80002abe:	17 88       	ld.ub	r8,r11[0x0]
80002ac0:	f0 0b 15 04 	lsl	r11,r8,0x4
80002ac4:	f6 08 01 08 	sub	r8,r11,r8
					else w.wp[pattern].step_probs[x] = 0;
80002ac8:	a5 68       	lsl	r8,0x4
80002aca:	10 09       	add	r9,r8
80002acc:	f2 0a 00 0a 	add	r10,r9,r10
80002ad0:	2e 0a       	sub	r10,-32
80002ad2:	e0 8f 03 cd 	bral	8000326c <handler_MonomeGridKey+0xf18>
80002ad6:	58 1b       	cp.w	r11,1
80002ad8:	e0 81 03 ce 	brne	80003274 <handler_MonomeGridKey+0xf20>
80002adc:	1b 99       	ld.ub	r9,sp[0x1]
80002ade:	58 09       	cp.w	r9,0
				}
			}
		}	
		
		// edit map and probs
		else if(edit_mode == mMap) {
80002ae0:	c2 c0       	breq	80002b38 <handler_MonomeGridKey+0x7e4>
80002ae2:	30 3c       	mov	r12,3
80002ae4:	f8 08 18 00 	cp.b	r8,r12
			// step probs
			if(z && y==3) {
80002ae8:	c2 81       	brne	80002b38 <handler_MonomeGridKey+0x7e4>
80002aea:	e0 68 1a 99 	mov	r8,6809
80002aee:	11 89       	ld.ub	r9,r8[0x0]
80002af0:	ee 09 18 00 	cp.b	r9,r7
				if(key_alt)
80002af4:	c0 60       	breq	80002b00 <handler_MonomeGridKey+0x7ac>
80002af6:	e0 68 1a bd 	mov	r8,6845
80002afa:	b0 8b       	st.b	r8[0x0],r11
80002afc:	e0 8f 04 6b 	bral	800033d2 <handler_MonomeGridKey+0x107e>
					edit_prob = 1;
80002b00:	e0 68 1a 97 	mov	r8,6807
80002b04:	11 8a       	ld.ub	r10,r8[0x0]
				else  {
					if(w.wp[pattern].cv_probs[edit_cv_ch][x] == 255) w.wp[pattern].cv_probs[edit_cv_ch][x] = 0;
80002b06:	e0 68 1a b3 	mov	r8,6835
80002b0a:	1b bb       	ld.ub	r11,sp[0x3]
80002b0c:	11 8c       	ld.ub	r12,r8[0x0]
80002b0e:	f4 08 15 04 	lsl	r8,r10,0x4
80002b12:	14 18       	sub	r8,r10
80002b14:	e0 6a 0b 04 	mov	r10,2820
80002b18:	18 08       	add	r8,r12
80002b1a:	a5 68       	lsl	r8,0x4
80002b1c:	f4 08 00 08 	add	r8,r10,r8
80002b20:	3f fa       	mov	r10,-1
80002b22:	16 08       	add	r8,r11
80002b24:	f0 c8 ff 30 	sub	r8,r8,-208
80002b28:	11 8b       	ld.ub	r11,r8[0x0]
80002b2a:	f4 0b 18 00 	cp.b	r11,r10
80002b2e:	f2 0a 17 00 	moveq	r10,r9
80002b32:	b0 8a       	st.b	r8[0x0],r10
80002b34:	e0 8f 04 4f 	bral	800033d2 <handler_MonomeGridKey+0x107e>
80002b38:	e0 6a 1a bd 	mov	r10,6845
80002b3c:	15 8a       	ld.ub	r10,r10[0x0]
80002b3e:	58 0a       	cp.w	r10,0
80002b40:	e0 81 03 35 	brne	800031aa <handler_MonomeGridKey+0xe56>
80002b44:	e0 6b 1a 97 	mov	r11,6807
80002b48:	17 87       	ld.ub	r7,r11[0x0]
80002b4a:	e0 6b 1a b3 	mov	r11,6835
				}
					
				monomeFrameDirty++;
			}
			// edit data
			else if(edit_prob == 0) {
80002b4e:	ee 0c 15 04 	lsl	r12,r7,0x4
80002b52:	17 86       	ld.ub	r6,r11[0x0]
80002b54:	0e 1c       	sub	r12,r7
				// CURVES
				if(w.wp[pattern].cv_mode[edit_cv_ch] == 0) {
80002b56:	e0 6b 0b 04 	mov	r11,2820
80002b5a:	f8 0e 15 04 	lsl	lr,r12,0x4
80002b5e:	f6 0e 00 05 	add	r5,r11,lr
80002b62:	0c 05       	add	r5,r6
80002b64:	0b e4       	ld.ub	r4,r5[0x6]
80002b66:	08 95       	mov	r5,r4
80002b68:	f4 04 18 00 	cp.b	r4,r10
80002b6c:	e0 81 01 22 	brne	80002db0 <handler_MonomeGridKey+0xa5c>
80002b70:	30 4a       	mov	r10,4
80002b72:	f4 08 18 00 	cp.b	r8,r10
80002b76:	c3 01       	brne	80002bd6 <handler_MonomeGridKey+0x882>
80002b78:	58 09       	cp.w	r9,0
80002b7a:	e0 80 00 8d 	breq	80002c94 <handler_MonomeGridKey+0x940>
					if(y == 4 && z) {
80002b7e:	e0 68 1a 9b 	mov	r8,6811
80002b82:	11 88       	ld.ub	r8,r8[0x0]
80002b84:	e8 08 18 00 	cp.b	r8,r4
80002b88:	c0 30       	breq	80002b8e <handler_MonomeGridKey+0x83a>
						if(center) 
80002b8a:	30 39       	mov	r9,3
80002b8c:	c0 a8       	rjmp	80002ba0 <handler_MonomeGridKey+0x84c>
80002b8e:	e0 69 1a 99 	mov	r9,6809
80002b92:	13 8a       	ld.ub	r10,r9[0x0]
80002b94:	e0 69 01 99 	mov	r9,409
							delta = 3;
						else if(key_alt)
80002b98:	f0 0a 18 00 	cp.b	r10,r8
80002b9c:	f9 b9 00 22 	moveq	r9,34
80002ba0:	1b ba       	ld.ub	r10,sp[0x3]
80002ba2:	ee 0b 15 04 	lsl	r11,r7,0x4
80002ba6:	a5 66       	lsl	r6,0x4
							delta = 409;
						else						
							delta = 34;

						// saturate
						if(w.wp[pattern].cv_curves[edit_cv_ch][x] + delta < 4092)
80002ba8:	f6 07 01 07 	sub	r7,r11,r7
80002bac:	e0 68 0b 04 	mov	r8,2820
80002bb0:	ec 07 00 37 	add	r7,r6,r7<<0x3
80002bb4:	14 07       	add	r7,r10
80002bb6:	2b 87       	sub	r7,-72
80002bb8:	f0 07 04 1a 	ld.sh	r10,r8[r7<<0x1]
80002bbc:	f7 da c0 10 	bfextu	r11,r10,0x0,0x10
80002bc0:	f2 0b 00 0b 	add	r11,r9,r11
80002bc4:	e0 4b 0f fb 	cp.w	r11,4091
80002bc8:	e0 89 00 04 	brgt	80002bd0 <handler_MonomeGridKey+0x87c>
80002bcc:	14 09       	add	r9,r10
80002bce:	c3 28       	rjmp	80002c32 <handler_MonomeGridKey+0x8de>
80002bd0:	e0 69 0f fc 	mov	r9,4092
							w.wp[pattern].cv_curves[edit_cv_ch][x] += delta;
80002bd4:	c2 f8       	rjmp	80002c32 <handler_MonomeGridKey+0x8de>
						else
							w.wp[pattern].cv_curves[edit_cv_ch][x] = 4092;
80002bd6:	30 6a       	mov	r10,6
80002bd8:	f4 08 18 00 	cp.b	r8,r10
					}
					else if(y == 6 && z) {
80002bdc:	c2 f1       	brne	80002c3a <handler_MonomeGridKey+0x8e6>
80002bde:	58 09       	cp.w	r9,0
80002be0:	c5 a0       	breq	80002c94 <handler_MonomeGridKey+0x940>
80002be2:	e0 68 1a 9b 	mov	r8,6811
80002be6:	11 88       	ld.ub	r8,r8[0x0]
						if(center)
80002be8:	e8 08 18 00 	cp.b	r8,r4
80002bec:	c0 30       	breq	80002bf2 <handler_MonomeGridKey+0x89e>
80002bee:	30 39       	mov	r9,3
80002bf0:	c0 a8       	rjmp	80002c04 <handler_MonomeGridKey+0x8b0>
80002bf2:	e0 69 1a 99 	mov	r9,6809
							delta = 3;
						else if(key_alt)
80002bf6:	13 8a       	ld.ub	r10,r9[0x0]
80002bf8:	e0 69 01 99 	mov	r9,409
80002bfc:	f0 0a 18 00 	cp.b	r10,r8
80002c00:	f9 b9 00 22 	moveq	r9,34
80002c04:	1b ba       	ld.ub	r10,sp[0x3]
							delta = 409;
						else
							delta = 34;

						// saturate
						if(w.wp[pattern].cv_curves[edit_cv_ch][x] > delta)
80002c06:	ee 0b 15 04 	lsl	r11,r7,0x4
80002c0a:	a5 66       	lsl	r6,0x4
80002c0c:	f6 07 01 07 	sub	r7,r11,r7
80002c10:	e0 68 0b 04 	mov	r8,2820
80002c14:	ec 07 00 37 	add	r7,r6,r7<<0x3
80002c18:	14 07       	add	r7,r10
80002c1a:	2b 87       	sub	r7,-72
80002c1c:	f0 07 04 1a 	ld.sh	r10,r8[r7<<0x1]
80002c20:	f7 da c0 10 	bfextu	r11,r10,0x0,0x10
80002c24:	12 3b       	cp.w	r11,r9
80002c26:	e0 8a 00 05 	brle	80002c30 <handler_MonomeGridKey+0x8dc>
							w.wp[pattern].cv_curves[edit_cv_ch][x] -= delta;
80002c2a:	f4 09 01 09 	sub	r9,r10,r9
80002c2e:	c0 28       	rjmp	80002c32 <handler_MonomeGridKey+0x8de>
						else
							w.wp[pattern].cv_curves[edit_cv_ch][x] = 0;
80002c30:	30 09       	mov	r9,0
80002c32:	f0 07 0a 19 	st.h	r8[r7<<0x1],r9
80002c36:	e0 8f 03 d3 	bral	800033dc <handler_MonomeGridKey+0x1088>

					}
					else if(y == 5) {
80002c3a:	30 5a       	mov	r10,5
80002c3c:	f4 08 18 00 	cp.b	r8,r10
80002c40:	c2 a1       	brne	80002c94 <handler_MonomeGridKey+0x940>
80002c42:	e0 68 1a 9b 	mov	r8,6811
						if(z == 1) {
80002c46:	30 1a       	mov	r10,1
80002c48:	f4 09 18 00 	cp.b	r9,r10
	 						center = 1;
80002c4c:	c2 01       	brne	80002c8c <handler_MonomeGridKey+0x938>
	 						if(key_alt)
80002c4e:	b0 89       	st.b	r8[0x0],r9
80002c50:	e0 68 1a 99 	mov	r8,6809
80002c54:	a5 66       	lsl	r6,0x4
80002c56:	11 89       	ld.ub	r9,r8[0x0]
80002c58:	1b ba       	ld.ub	r10,sp[0x3]
80002c5a:	e0 68 0a f6 	mov	r8,2806
								w.wp[pattern].cv_curves[edit_cv_ch][x] = clip;
80002c5e:	e8 09 18 00 	cp.b	r9,r4
80002c62:	c0 b0       	breq	80002c78 <handler_MonomeGridKey+0x924>
80002c64:	ec 0c 00 36 	add	r6,r6,r12<<0x3
80002c68:	90 08       	ld.sh	r8,r8[0x0]
80002c6a:	ec 0a 00 0a 	add	r10,r6,r10
80002c6e:	2b 8a       	sub	r10,-72
80002c70:	f6 0a 0a 18 	st.h	r11[r10<<0x1],r8
							else
								clip = w.wp[pattern].cv_curves[edit_cv_ch][x];
80002c74:	e0 8f 03 b4 	bral	800033dc <handler_MonomeGridKey+0x1088>
80002c78:	ec 0c 00 36 	add	r6,r6,r12<<0x3
80002c7c:	ec 0a 00 0a 	add	r10,r6,r10
80002c80:	2b 8a       	sub	r10,-72
80002c82:	f6 0a 04 19 	ld.sh	r9,r11[r10<<0x1]
						}
						else
							center = 0;
80002c86:	b0 09       	st.h	r8[0x0],r9
80002c88:	e0 8f 03 aa 	bral	800033dc <handler_MonomeGridKey+0x1088>
80002c8c:	b0 84       	st.b	r8[0x0],r4
80002c8e:	e0 8f 03 a7 	bral	800033dc <handler_MonomeGridKey+0x1088>
80002c92:	d7 03       	nop
80002c94:	30 7a       	mov	r10,7
80002c96:	f4 08 18 00 	cp.b	r8,r10
80002c9a:	e0 81 03 a1 	brne	800033dc <handler_MonomeGridKey+0x1088>
80002c9e:	e0 68 1a 99 	mov	r8,6809
80002ca2:	11 8a       	ld.ub	r10,r8[0x0]
80002ca4:	30 08       	mov	r8,0
80002ca6:	f0 0a 18 00 	cp.b	r10,r8
					}
					else if(y == 7) {
80002caa:	c3 60       	breq	80002d16 <handler_MonomeGridKey+0x9c2>
80002cac:	58 09       	cp.w	r9,0
80002cae:	c3 40       	breq	80002d16 <handler_MonomeGridKey+0x9c2>
80002cb0:	ee 0a 15 04 	lsl	r10,r7,0x4
						if(key_alt && z) {
80002cb4:	e0 6b 0a f0 	mov	r11,2800
80002cb8:	e0 69 0b 04 	mov	r9,2820
80002cbc:	f4 07 01 07 	sub	r7,r10,r7
80002cc0:	a5 66       	lsl	r6,0x4
							param_dest = &w.wp[pattern].cv_curves[edit_cv_ch][pos];
80002cc2:	a5 67       	lsl	r7,0x4
80002cc4:	e0 6a 0a fe 	mov	r10,2814
80002cc8:	ee c7 ff 70 	sub	r7,r7,-144
80002ccc:	f5 2a 00 00 	ld.sb	r10,r10[0]
80002cd0:	12 07       	add	r7,r9
80002cd2:	14 06       	add	r6,r10
80002cd4:	ee 06 00 16 	add	r6,r7,r6<<0x1
80002cd8:	97 06       	st.w	r11[0x0],r6
80002cda:	e0 6b 1a b3 	mov	r11,6835
80002cde:	e0 6c 1a 9c 	mov	r12,6812
80002ce2:	17 8e       	ld.ub	lr,r11[0x0]
80002ce4:	98 1c       	ld.sh	r12,r12[0x2]
							w.wp[pattern].cv_curves[edit_cv_ch][pos] = adc[1];
80002ce6:	a5 6e       	lsl	lr,0x4
80002ce8:	e0 6b 1a 97 	mov	r11,6807
80002cec:	17 8b       	ld.ub	r11,r11[0x0]
80002cee:	f6 07 15 04 	lsl	r7,r11,0x4
80002cf2:	ee 0b 01 0b 	sub	r11,r7,r11
80002cf6:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
80002cfa:	f6 0a 00 0a 	add	r10,r11,r10
80002cfe:	2b 8a       	sub	r10,-72
80002d00:	f2 0a 0a 1c 	st.h	r9[r10<<0x1],r12
80002d04:	e0 69 1a b4 	mov	r9,6836
80002d08:	30 18       	mov	r8,1
							param_accept = 1;
80002d0a:	b2 88       	st.b	r9[0x0],r8
80002d0c:	e0 69 1a 90 	mov	r9,6800
							live_in = 1;
80002d10:	b2 88       	st.b	r9[0x0],r8
80002d12:	e0 8f 03 60 	bral	800033d2 <handler_MonomeGridKey+0x107e>
						}
						else
							center = 0;
					}
					else if(y == 7) {
						if(key_alt && z) {
80002d16:	e0 68 1a 9b 	mov	r8,6811
							param_dest = &w.wp[pattern].cv_curves[edit_cv_ch][pos];
							w.wp[pattern].cv_curves[edit_cv_ch][pos] = adc[1];
							param_accept = 1;
							live_in = 1;
						}
						else if(center && z) {
80002d1a:	11 8a       	ld.ub	r10,r8[0x0]
80002d1c:	30 08       	mov	r8,0
80002d1e:	f0 0a 18 00 	cp.b	r10,r8
80002d22:	c1 a0       	breq	80002d56 <handler_MonomeGridKey+0xa02>
80002d24:	58 09       	cp.w	r9,0
80002d26:	c1 80       	breq	80002d56 <handler_MonomeGridKey+0xa02>
							w.wp[pattern].cv_curves[edit_cv_ch][x] = rand() % 4092;
80002d28:	1b b5       	ld.ub	r5,sp[0x3]
80002d2a:	e0 a0 32 d3 	rcall	800092d0 <rand>
80002d2e:	ee 08 15 04 	lsl	r8,r7,0x4
80002d32:	a5 66       	lsl	r6,0x4
80002d34:	f0 07 01 07 	sub	r7,r8,r7
80002d38:	e0 69 0b 04 	mov	r9,2820
80002d3c:	ec 07 00 37 	add	r7,r6,r7<<0x3
80002d40:	e0 68 0f fc 	mov	r8,4092
80002d44:	ee 05 00 05 	add	r5,r7,r5
80002d48:	f8 08 0c 0a 	divs	r10,r12,r8
80002d4c:	2b 85       	sub	r5,-72
80002d4e:	f2 05 0a 1b 	st.h	r9[r5<<0x1],r11
							param_dest = &w.wp[pattern].cv_curves[edit_cv_ch][pos];
							w.wp[pattern].cv_curves[edit_cv_ch][pos] = adc[1];
							param_accept = 1;
							live_in = 1;
						}
						else if(center && z) {
80002d52:	e0 8f 03 40 	bral	800033d2 <handler_MonomeGridKey+0x107e>
							w.wp[pattern].cv_curves[edit_cv_ch][x] = rand() % 4092;
						}
						else {
							param_accept = z;
80002d56:	e0 68 1a b4 	mov	r8,6836
							param_dest = &w.wp[pattern].cv_curves[edit_cv_ch][x];
80002d5a:	b0 89       	st.b	r8[0x0],r9
80002d5c:	e0 68 1a 97 	mov	r8,6807
80002d60:	11 89       	ld.ub	r9,r8[0x0]
80002d62:	f2 0b 15 04 	lsl	r11,r9,0x4
80002d66:	12 1b       	sub	r11,r9
80002d68:	e0 69 1a b3 	mov	r9,6835
80002d6c:	13 8a       	ld.ub	r10,r9[0x0]
80002d6e:	1b b9       	ld.ub	r9,sp[0x3]
80002d70:	a5 6a       	lsl	r10,0x4
80002d72:	f4 09 00 0c 	add	r12,r10,r9
80002d76:	e0 68 0b 04 	mov	r8,2820
80002d7a:	f6 0e 15 04 	lsl	lr,r11,0x4
80002d7e:	fc ce ff 70 	sub	lr,lr,-144
							if(z) w.wp[pattern].cv_curves[edit_cv_ch][x] = adc[1];
80002d82:	10 0e       	add	lr,r8
80002d84:	fc 0c 00 1e 	add	lr,lr,r12<<0x1
80002d88:	e0 6c 0a f0 	mov	r12,2800
80002d8c:	99 0e       	st.w	r12[0x0],lr
80002d8e:	30 0c       	mov	r12,0
80002d90:	1b 9e       	ld.ub	lr,sp[0x1]
80002d92:	f8 0e 18 00 	cp.b	lr,r12
80002d96:	e0 80 03 1e 	breq	800033d2 <handler_MonomeGridKey+0x107e>
80002d9a:	f4 0b 00 3a 	add	r10,r10,r11<<0x3
80002d9e:	f4 09 00 09 	add	r9,r10,r9
80002da2:	e0 6a 1a 9c 	mov	r10,6812
80002da6:	2b 89       	sub	r9,-72
80002da8:	94 1a       	ld.sh	r10,r10[0x2]
80002daa:	e0 8f 03 12 	bral	800033ce <handler_MonomeGridKey+0x107a>
80002dae:	d7 03       	nop
80002db0:	e0 6a 1a bc 	mov	r10,6844
80002db4:	15 85       	ld.ub	r5,r10[0x0]
80002db6:	58 05       	cp.w	r5,0
80002db8:	c3 40       	breq	80002e20 <handler_MonomeGridKey+0xacc>
80002dba:	58 09       	cp.w	r9,0
80002dbc:	c6 a0       	breq	80002e90 <handler_MonomeGridKey+0xb3c>
80002dbe:	1b b9       	ld.ub	r9,sp[0x3]
80002dc0:	f0 c7 00 04 	sub	r7,r8,4
80002dc4:	f2 07 00 37 	add	r7,r9,r7<<0x3
80002dc8:	31 79       	mov	r9,23
80002dca:	5c 57       	castu.b	r7
						monomeFrameDirty++;
					}
				}
				// MAP
				else {
					if(scale_select && z) {
80002dcc:	f2 07 18 00 	cp.b	r7,r9
80002dd0:	e0 8b 00 1e 	brhi	80002e0c <handler_MonomeGridKey+0xab8>
80002dd4:	30 79       	mov	r9,7
80002dd6:	f2 08 18 00 	cp.b	r8,r9
						// index -= 64;
						index = (y-4) * 8 + x;
80002dda:	e0 8b 00 19 	brhi	80002e0c <handler_MonomeGridKey+0xab8>
80002dde:	fe c9 93 c6 	sub	r9,pc,-27706
						if(index < 24 && y<8) {
80002de2:	ee 08 15 05 	lsl	r8,r7,0x5
80002de6:	2d 0e       	sub	lr,-48
80002de8:	f2 ca ff e0 	sub	r10,r9,-32
80002dec:	fc 0b 00 0b 	add	r11,lr,r11
80002df0:	10 0a       	add	r10,r8
80002df2:	f2 08 00 08 	add	r8,r9,r8
80002df6:	11 19       	ld.sh	r9,r8++
80002df8:	16 b9       	st.h	r11++,r9
80002dfa:	14 38       	cp.w	r8,r10
80002dfc:	cf d1       	brne	80002df6 <handler_MonomeGridKey+0xaa2>
80002dfe:	fe cc 90 c6 	sub	r12,pc,-28474
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// application grid code

static void handler_MonomeGridKey(s32 data) { 
80002e02:	e0 a0 2a 93 	rcall	80008328 <print_dbg>
				// MAP
				else {
					if(scale_select && z) {
						// index -= 64;
						index = (y-4) * 8 + x;
						if(index < 24 && y<8) {
80002e06:	0e 9c       	mov	r12,r7
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// application grid code

static void handler_MonomeGridKey(s32 data) { 
80002e08:	e0 a0 2a 8a 	rcall	8000831c <print_dbg_ulong>
				// MAP
				else {
					if(scale_select && z) {
						// index -= 64;
						index = (y-4) * 8 + x;
						if(index < 24 && y<8) {
80002e0c:	e0 68 07 61 	mov	r8,1889
							for(i1=0;i1<16;i1++)
								w.wp[pattern].cv_values[i1] = SCALES[index][i1];
80002e10:	11 89       	ld.ub	r9,r8[0x0]
				else {
					if(scale_select && z) {
						// index -= 64;
						index = (y-4) * 8 + x;
						if(index < 24 && y<8) {
							for(i1=0;i1<16;i1++)
80002e12:	2f f9       	sub	r9,-1
80002e14:	b0 89       	st.b	r8[0x0],r9
								w.wp[pattern].cv_values[i1] = SCALES[index][i1];
							print_dbg("\rNEW SCALE ");
80002e16:	30 09       	mov	r9,0
80002e18:	e0 68 1a bc 	mov	r8,6844
							print_dbg_ulong(index);
80002e1c:	e0 8f 02 df 	bral	800033da <handler_MonomeGridKey+0x1086>
80002e20:	58 09       	cp.w	r9,0
						}

						scale_select = 0;
						monomeFrameDirty++;
80002e22:	c3 70       	breq	80002e90 <handler_MonomeGridKey+0xb3c>
80002e24:	30 4a       	mov	r10,4
80002e26:	f4 08 18 00 	cp.b	r8,r10
								w.wp[pattern].cv_values[i1] = SCALES[index][i1];
							print_dbg("\rNEW SCALE ");
							print_dbg_ulong(index);
						}

						scale_select = 0;
80002e2a:	c3 31       	brne	80002e90 <handler_MonomeGridKey+0xb3c>
80002e2c:	1b b9       	ld.ub	r9,sp[0x3]
80002e2e:	e0 6a 1a 96 	mov	r10,6806
						monomeFrameDirty++;
					}
					else {
						if(z && y==4) {
80002e32:	a5 66       	lsl	r6,0x4
80002e34:	ec 0c 00 3c 	add	r12,r6,r12<<0x3
80002e38:	12 0c       	add	r12,r9
80002e3a:	2d 8c       	sub	r12,-40
80002e3c:	f6 0c 05 1b 	ld.uh	r11,r11[r12<<0x1]
							edit_cv_step = x;
80002e40:	b4 89       	st.b	r10[0x0],r9
							count = 0;
							for(i1=0;i1<16;i1++)
									if((w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] >> i1) & 1) {
80002e42:	e0 69 1a a4 	mov	r9,6820
80002e46:	0a 98       	mov	r8,r5
80002e48:	13 8a       	ld.ub	r10,r9[0x0]
80002e4a:	0a 99       	mov	r9,r5
80002e4c:	f6 08 08 4e 	asr	lr,r11,r8
						scale_select = 0;
						monomeFrameDirty++;
					}
					else {
						if(z && y==4) {
							edit_cv_step = x;
80002e50:	f2 cc ff ff 	sub	r12,r9,-1
							count = 0;
							for(i1=0;i1<16;i1++)
									if((w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] >> i1) & 1) {
80002e54:	fd de c0 01 	bfextu	lr,lr,0x0,0x1
80002e58:	c0 50       	breq	80002e62 <handler_MonomeGridKey+0xb0e>
80002e5a:	f3 dc c0 08 	bfextu	r9,r12,0x0,0x8
										count++;
80002e5e:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
					else {
						if(z && y==4) {
							edit_cv_step = x;
							count = 0;
							for(i1=0;i1<16;i1++)
									if((w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] >> i1) & 1) {
80002e62:	2f f8       	sub	r8,-1
80002e64:	59 08       	cp.w	r8,16
80002e66:	cf 31       	brne	80002e4c <handler_MonomeGridKey+0xaf8>
										count++;
80002e68:	e0 68 1a a4 	mov	r8,6820
80002e6c:	b0 8a       	st.b	r8[0x0],r10
80002e6e:	30 1a       	mov	r10,1
80002e70:	f4 09 18 00 	cp.b	r9,r10
					}
					else {
						if(z && y==4) {
							edit_cv_step = x;
							count = 0;
							for(i1=0;i1<16;i1++)
80002e74:	e0 88 00 04 	brls	80002e7c <handler_MonomeGridKey+0xb28>
80002e78:	3f f9       	mov	r9,-1
									if((w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] >> i1) & 1) {
										count++;
										edit_cv_value = i1;
									}
							if(count>1)
80002e7a:	b0 89       	st.b	r8[0x0],r9
80002e7c:	e0 68 07 61 	mov	r8,1889
80002e80:	11 89       	ld.ub	r9,r8[0x0]
80002e82:	2f f9       	sub	r9,-1
								edit_cv_value = -1;
80002e84:	b0 89       	st.b	r8[0x0],r9
80002e86:	30 09       	mov	r9,0

							keycount_cv = 0;

							monomeFrameDirty++;
80002e88:	e0 68 1a 8e 	mov	r8,6798
80002e8c:	e0 8f 02 a7 	bral	800033da <handler_MonomeGridKey+0x1086>
										edit_cv_value = i1;
									}
							if(count>1)
								edit_cv_value = -1;

							keycount_cv = 0;
80002e90:	e0 6a 1a 99 	mov	r10,6809
80002e94:	15 8b       	ld.ub	r11,r10[0x0]
80002e96:	58 0b       	cp.w	r11,0

							monomeFrameDirty++;
						}
						// load scale
						else if(key_alt && y==7 && x == 0 && z) {
80002e98:	c3 a0       	breq	80002f0c <handler_MonomeGridKey+0xbb8>
80002e9a:	30 7a       	mov	r10,7
80002e9c:	f4 08 18 00 	cp.b	r8,r10
80002ea0:	c3 61       	brne	80002f0c <handler_MonomeGridKey+0xbb8>
80002ea2:	1b bc       	ld.ub	r12,sp[0x3]
80002ea4:	58 0c       	cp.w	r12,0
80002ea6:	c0 d1       	brne	80002ec0 <handler_MonomeGridKey+0xb6c>
80002ea8:	58 09       	cp.w	r9,0
80002eaa:	c0 b0       	breq	80002ec0 <handler_MonomeGridKey+0xb6c>
80002eac:	2f f5       	sub	r5,-1
80002eae:	e0 69 07 61 	mov	r9,1889
							scale_select++;
80002eb2:	e0 6a 1a bc 	mov	r10,6844
80002eb6:	13 88       	ld.ub	r8,r9[0x0]
							monomeFrameDirty++;
80002eb8:	b4 85       	st.b	r10[0x0],r5

							monomeFrameDirty++;
						}
						// load scale
						else if(key_alt && y==7 && x == 0 && z) {
							scale_select++;
80002eba:	2f f8       	sub	r8,-1
							monomeFrameDirty++;
80002ebc:	fe 9f fc a2 	bral	80002800 <handler_MonomeGridKey+0x4ac>
80002ec0:	e0 6a 1a a4 	mov	r10,6820
						}
						// read pot					
						else if(y==7 && key_alt && edit_cv_value != -1 && x==LENGTH) {
80002ec4:	3f fe       	mov	lr,-1
80002ec6:	15 86       	ld.ub	r6,r10[0x0]
80002ec8:	fc 06 18 00 	cp.b	r6,lr
80002ecc:	c2 00       	breq	80002f0c <handler_MonomeGridKey+0xbb8>
80002ece:	e0 6e 0a ff 	mov	lr,2815
80002ed2:	1d 8e       	ld.ub	lr,lr[0x0]
80002ed4:	f8 0e 18 00 	cp.b	lr,r12
							param_accept = z;
80002ed8:	c1 a1       	brne	80002f0c <handler_MonomeGridKey+0xbb8>
80002eda:	e0 68 1a b4 	mov	r8,6836
							param_dest = &(w.wp[pattern].cv_values[edit_cv_value]);
80002ede:	b0 89       	st.b	r8[0x0],r9
80002ee0:	e0 68 1a 97 	mov	r8,6807
80002ee4:	11 88       	ld.ub	r8,r8[0x0]
80002ee6:	f0 09 15 04 	lsl	r9,r8,0x4
80002eea:	f2 08 01 08 	sub	r8,r9,r8
80002eee:	e0 69 0b 04 	mov	r9,2820
80002ef2:	f5 2a 00 00 	ld.sb	r10,r10[0]
80002ef6:	f4 08 00 38 	add	r8,r10,r8<<0x3
80002efa:	2e 88       	sub	r8,-24
						else if(key_alt && y==7 && x == 0 && z) {
							scale_select++;
							monomeFrameDirty++;
						}
						// read pot					
						else if(y==7 && key_alt && edit_cv_value != -1 && x==LENGTH) {
80002efc:	f2 08 00 18 	add	r8,r9,r8<<0x1
80002f00:	e0 69 0a f0 	mov	r9,2800
80002f04:	93 08       	st.w	r9[0x0],r8
80002f06:	e0 8f 02 6b 	bral	800033dc <handler_MonomeGridKey+0x1088>
80002f0a:	d7 03       	nop
80002f0c:	f0 ca 00 05 	sub	r10,r8,5
80002f10:	30 1c       	mov	r12,1
80002f12:	f8 0a 18 00 	cp.b	r10,r12
80002f16:	e0 8b 00 7e 	brhi	80003012 <handler_MonomeGridKey+0xcbe>
80002f1a:	58 09       	cp.w	r9,0
80002f1c:	e0 80 02 60 	breq	800033dc <handler_MonomeGridKey+0x1088>
80002f20:	1b ba       	ld.ub	r10,sp[0x3]
80002f22:	30 39       	mov	r9,3
80002f24:	f2 0a 18 00 	cp.b	r10,r9
80002f28:	e0 8b 02 5a 	brhi	800033dc <handler_MonomeGridKey+0x1088>
80002f2c:	58 0a       	cp.w	r10,0
80002f2e:	c0 41       	brne	80002f36 <handler_MonomeGridKey+0xbe2>
80002f30:	e0 6a 01 99 	mov	r10,409
80002f34:	c0 c8       	rjmp	80002f4c <handler_MonomeGridKey+0xbf8>
80002f36:	f8 0a 18 00 	cp.b	r10,r12
80002f3a:	c0 41       	brne	80002f42 <handler_MonomeGridKey+0xbee>
							param_accept = z;
							param_dest = &(w.wp[pattern].cv_values[edit_cv_value]);
							// print_dbg("\r\nparam: ");
							// print_dbg_ulong(*param_dest);
						}
						else if((y == 5 || y == 6) && z && x<4 && edit_cv_step != -1) {
80002f3c:	e0 6a 00 ef 	mov	r10,239
80002f40:	c0 68       	rjmp	80002f4c <handler_MonomeGridKey+0xbf8>
80002f42:	58 2a       	cp.w	r10,2
80002f44:	f9 ba 00 22 	moveq	r10,34
80002f48:	f9 ba 01 03 	movne	r10,3
80002f4c:	30 69       	mov	r9,6
80002f4e:	f2 08 18 00 	cp.b	r8,r9
80002f52:	c0 31       	brne	80002f58 <handler_MonomeGridKey+0xc04>
80002f54:	5c 3a       	neg	r10
80002f56:	5c 8a       	casts.h	r10
80002f58:	e0 69 0b 04 	mov	r9,2820
							delta = 0;
	 						if(x == 0)
80002f5c:	ee 08 10 0f 	mul	r8,r7,15
80002f60:	58 0b       	cp.w	r11,0
80002f62:	c2 70       	breq	80002fb0 <handler_MonomeGridKey+0xc5c>
80002f64:	a5 68       	lsl	r8,0x4
								delta = 409;
							else if(x == 1)
80002f66:	2d 08       	sub	r8,-48
80002f68:	f4 06 11 00 	rsub	r6,r10,0
80002f6c:	10 09       	add	r9,r8
80002f6e:	e0 67 0f fc 	mov	r7,4092
								delta = 239;
							else if(x == 2)
80002f72:	30 08       	mov	r8,0
80002f74:	31 0e       	mov	lr,16
80002f76:	10 9b       	mov	r11,r8
80002f78:	92 0c       	ld.sh	r12,r9[0x0]
80002f7a:	f4 0c 00 05 	add	r5,r10,r12
								delta = 34;
							else if(x == 3)
								delta = 3;

							if(y == 6)
80002f7e:	5c 7c       	castu.h	r12
80002f80:	f4 0c 00 04 	add	r4,r10,r12
								delta *= -1;
80002f84:	e0 44 0f fc 	cp.w	r4,4092
80002f88:	e0 8a 00 04 	brle	80002f90 <handler_MonomeGridKey+0xc3c>
80002f8c:	b2 07       	st.h	r9[0x0],r7
							
							if(key_alt) {
80002f8e:	c0 98       	rjmp	80002fa0 <handler_MonomeGridKey+0xc4c>
80002f90:	f6 0a 19 00 	cp.h	r10,r11
80002f94:	c0 54       	brge	80002f9e <handler_MonomeGridKey+0xc4a>
								for(i1=0;i1<16;i1++) {
									if(w.wp[pattern].cv_values[i1] + delta > 4092)
										w.wp[pattern].cv_values[i1] = 4092;
									else if(delta < 0 && w.wp[pattern].cv_values[i1] < -1*delta)
80002f96:	0c 3c       	cp.w	r12,r6
80002f98:	c0 34       	brge	80002f9e <handler_MonomeGridKey+0xc4a>
								delta = 3;

							if(y == 6)
								delta *= -1;
							
							if(key_alt) {
80002f9a:	b2 0b       	st.h	r9[0x0],r11
								for(i1=0;i1<16;i1++) {
									if(w.wp[pattern].cv_values[i1] + delta > 4092)
										w.wp[pattern].cv_values[i1] = 4092;
80002f9c:	c0 28       	rjmp	80002fa0 <handler_MonomeGridKey+0xc4c>
80002f9e:	b2 05       	st.h	r9[0x0],r5
								delta = 3;

							if(y == 6)
								delta *= -1;
							
							if(key_alt) {
80002fa0:	2f f8       	sub	r8,-1
								for(i1=0;i1<16;i1++) {
80002fa2:	2f e9       	sub	r9,-2
									if(w.wp[pattern].cv_values[i1] + delta > 4092)
										w.wp[pattern].cv_values[i1] = 4092;
									else if(delta < 0 && w.wp[pattern].cv_values[i1] < -1*delta)
80002fa4:	5c 58       	castu.b	r8
							if(y == 6)
								delta *= -1;
							
							if(key_alt) {
								for(i1=0;i1<16;i1++) {
									if(w.wp[pattern].cv_values[i1] + delta > 4092)
80002fa6:	fc 08 18 00 	cp.b	r8,lr
										w.wp[pattern].cv_values[i1] = 4092;
									else if(delta < 0 && w.wp[pattern].cv_values[i1] < -1*delta)
										w.wp[pattern].cv_values[i1] = 0;
									else
										w.wp[pattern].cv_values[i1] += delta;
80002faa:	ce 71       	brne	80002f78 <handler_MonomeGridKey+0xc24>
							if(y == 6)
								delta *= -1;
							
							if(key_alt) {
								for(i1=0;i1<16;i1++) {
									if(w.wp[pattern].cv_values[i1] + delta > 4092)
80002fac:	e0 8f 02 13 	bral	800033d2 <handler_MonomeGridKey+0x107e>
80002fb0:	e0 6c 1a a4 	mov	r12,6820
80002fb4:	f9 2c 00 00 	ld.sb	r12,r12[0]
80002fb8:	f8 08 00 38 	add	r8,r12,r8<<0x3
										w.wp[pattern].cv_values[i1] = 4092;
80002fbc:	2e 88       	sub	r8,-24
									else if(delta < 0 && w.wp[pattern].cv_values[i1] < -1*delta)
80002fbe:	f2 08 04 16 	ld.sh	r6,r9[r8<<0x1]
80002fc2:	eb d6 c0 10 	bfextu	r5,r6,0x0,0x10
80002fc6:	f4 05 00 0e 	add	lr,r10,r5
80002fca:	e0 4e 0f fc 	cp.w	lr,4092

							if(y == 6)
								delta *= -1;
							
							if(key_alt) {
								for(i1=0;i1<16;i1++) {
80002fce:	e0 8a 00 08 	brle	80002fde <handler_MonomeGridKey+0xc8a>
80002fd2:	e0 6a 0f fc 	mov	r10,4092
80002fd6:	f2 08 0a 1a 	st.h	r9[r8<<0x1],r10
80002fda:	e0 8f 01 fc 	bral	800033d2 <handler_MonomeGridKey+0x107e>
									else
										w.wp[pattern].cv_values[i1] += delta;
								}
							}
							else {
								if(w.wp[pattern].cv_values[edit_cv_value] + delta > 4092)
80002fde:	16 9e       	mov	lr,r11
80002fe0:	f6 0a 19 00 	cp.h	r10,r11
80002fe4:	c0 94       	brge	80002ff6 <handler_MonomeGridKey+0xca2>
80002fe6:	f4 0e 11 00 	rsub	lr,r10,0
80002fea:	1c 35       	cp.w	r5,lr
80002fec:	c0 54       	brge	80002ff6 <handler_MonomeGridKey+0xca2>
80002fee:	f2 08 0a 1b 	st.h	r9[r8<<0x1],r11
80002ff2:	e0 8f 01 f0 	bral	800033d2 <handler_MonomeGridKey+0x107e>
80002ff6:	ee 08 15 04 	lsl	r8,r7,0x4
80002ffa:	0c 0a       	add	r10,r6
80002ffc:	f0 07 01 07 	sub	r7,r8,r7
									w.wp[pattern].cv_values[edit_cv_value] = 4092;
80003000:	e0 68 0b 04 	mov	r8,2820
80003004:	f8 07 00 3c 	add	r12,r12,r7<<0x3
80003008:	2e 8c       	sub	r12,-24
								else if(delta < 0 && w.wp[pattern].cv_values[edit_cv_value] < -1*delta)
8000300a:	f0 0c 0a 1a 	st.h	r8[r12<<0x1],r10
8000300e:	e0 8f 01 e2 	bral	800033d2 <handler_MonomeGridKey+0x107e>
80003012:	30 7a       	mov	r10,7
80003014:	f4 08 18 00 	cp.b	r8,r10
80003018:	e0 81 01 e2 	brne	800033dc <handler_MonomeGridKey+0x1088>
									w.wp[pattern].cv_values[edit_cv_value] = 0;
8000301c:	e0 68 1a 8e 	mov	r8,6798
								}
							}
							else {
								if(w.wp[pattern].cv_values[edit_cv_value] + delta > 4092)
									w.wp[pattern].cv_values[edit_cv_value] = 4092;
								else if(delta < 0 && w.wp[pattern].cv_values[edit_cv_value] < -1*delta)
80003020:	11 8a       	ld.ub	r10,r8[0x0]
									w.wp[pattern].cv_values[edit_cv_value] = 0;
								else
									w.wp[pattern].cv_values[edit_cv_value] += delta;
80003022:	f4 09 00 19 	add	r9,r10,r9<<0x1
80003026:	20 19       	sub	r9,1
80003028:	b0 89       	st.b	r8[0x0],r9
8000302a:	30 0a       	mov	r10,0
8000302c:	f4 09 18 00 	cp.b	r9,r10
80003030:	c0 24       	brge	80003034 <handler_MonomeGridKey+0xce0>
80003032:	b0 8a       	st.b	r8[0x0],r10
80003034:	30 08       	mov	r8,0
80003036:	1b 99       	ld.ub	r9,sp[0x1]
80003038:	f0 09 18 00 	cp.b	r9,r8
							}

							monomeFrameDirty++;
						}
						// choose values
						else if(y==7) {
8000303c:	e0 80 01 d0 	breq	800033dc <handler_MonomeGridKey+0x1088>
80003040:	e0 69 1a b3 	mov	r9,6835
80003044:	13 8c       	ld.ub	r12,r9[0x0]
							keycount_cv += z*2-1;
80003046:	e0 69 1a 96 	mov	r9,6806
8000304a:	13 8b       	ld.ub	r11,r9[0x0]
8000304c:	f8 09 15 04 	lsl	r9,r12,0x4
80003050:	e0 68 1a 97 	mov	r8,6807
							if(keycount_cv < 0)
80003054:	11 88       	ld.ub	r8,r8[0x0]
80003056:	f0 0a 15 04 	lsl	r10,r8,0x4
								keycount_cv = 0;
8000305a:	10 1a       	sub	r10,r8

							if(z) {
8000305c:	f2 0a 00 3a 	add	r10,r9,r10<<0x3
80003060:	e0 69 0b 04 	mov	r9,2820
80003064:	16 0a       	add	r10,r11
80003066:	2d 8a       	sub	r10,-40
								count = 0;
								for(i1=0;i1<16;i1++)
									if((w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] >> i1) & 1)
80003068:	f2 0a 04 17 	ld.sh	r7,r9[r10<<0x1]
8000306c:	30 09       	mov	r9,0
8000306e:	0e 9e       	mov	lr,r7
80003070:	12 9a       	mov	r10,r9
80003072:	5c 7e       	castu.h	lr
80003074:	f4 c6 ff ff 	sub	r6,r10,-1
80003078:	fc 09 08 45 	asr	r5,lr,r9
8000307c:	ed b5 00 00 	bld	r5,0x0
80003080:	c0 31       	brne	80003086 <handler_MonomeGridKey+0xd32>
80003082:	f5 d6 c0 08 	bfextu	r10,r6,0x0,0x8
80003086:	2f f9       	sub	r9,-1
80003088:	59 09       	cp.w	r9,16
8000308a:	cf 51       	brne	80003074 <handler_MonomeGridKey+0xd20>
8000308c:	e0 6e 1a 8e 	mov	lr,6798
80003090:	30 19       	mov	r9,1
80003092:	1d 85       	ld.ub	r5,lr[0x0]
										count++;
80003094:	f2 05 18 00 	cp.b	r5,r9
								keycount_cv = 0;

							if(z) {
								count = 0;
								for(i1=0;i1<16;i1++)
									if((w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] >> i1) & 1)
80003098:	5f 0e       	sreq	lr
8000309a:	f2 0a 18 00 	cp.b	r10,r9
8000309e:	5f 86       	srls	r6
800030a0:	1c 66       	and	r6,lr
										count++;
800030a2:	30 0e       	mov	lr,0
800030a4:	fc 06 18 00 	cp.b	r6,lr
							if(keycount_cv < 0)
								keycount_cv = 0;

							if(z) {
								count = 0;
								for(i1=0;i1<16;i1++)
800030a8:	c1 60       	breq	800030d4 <handler_MonomeGridKey+0xd80>
800030aa:	f0 0a 15 04 	lsl	r10,r8,0x4
									if((w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] >> i1) & 1)
										count++;

								// single press toggle
								if(keycount_cv == 1 && count < 2) {
800030ae:	a5 6c       	lsl	r12,0x4
800030b0:	f4 08 01 08 	sub	r8,r10,r8
800030b4:	f8 08 00 38 	add	r8,r12,r8<<0x3
800030b8:	1b b9       	ld.ub	r9,sp[0x3]
800030ba:	f0 0b 00 0b 	add	r11,r8,r11
800030be:	30 18       	mov	r8,1
800030c0:	f0 09 09 48 	lsl	r8,r8,r9
800030c4:	2d 8b       	sub	r11,-40
800030c6:	e0 6a 0b 04 	mov	r10,2820
									w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] = (1<<x);
800030ca:	f4 0b 0a 18 	st.h	r10[r11<<0x1],r8
800030ce:	e0 68 1a a4 	mov	r8,6820
800030d2:	c6 a8       	rjmp	800031a6 <handler_MonomeGridKey+0xe52>
800030d4:	f2 05 18 00 	cp.b	r5,r9
800030d8:	5f 9e       	srgt	lr
800030da:	f2 0a 18 00 	cp.b	r10,r9
800030de:	5f b9       	srhi	r9
800030e0:	1c 49       	or	r9,lr
800030e2:	ec 09 18 00 	cp.b	r9,r6
800030e6:	e0 80 01 76 	breq	800033d2 <handler_MonomeGridKey+0x107e>
									edit_cv_value = x;
800030ea:	a5 6c       	lsl	r12,0x4
800030ec:	f0 0a 15 04 	lsl	r10,r8,0x4
800030f0:	f4 08 01 08 	sub	r8,r10,r8
800030f4:	f8 08 00 38 	add	r8,r12,r8<<0x3
800030f8:	f0 0b 00 0b 	add	r11,r8,r11
800030fc:	1b b8       	ld.ub	r8,sp[0x3]
800030fe:	2d 8b       	sub	r11,-40
80003100:	30 1a       	mov	r10,1
80003102:	f4 08 09 4a 	lsl	r10,r10,r8
80003106:	e0 68 1a 97 	mov	r8,6807
								}
								// multiselect
								else if(keycount_cv > 1 || count > 1) {
8000310a:	e0 69 0b 04 	mov	r9,2820
8000310e:	14 57       	eor	r7,r10
80003110:	f2 0b 0a 17 	st.h	r9[r11<<0x1],r7
80003114:	11 8b       	ld.ub	r11,r8[0x0]
80003116:	e0 68 1a b3 	mov	r8,6835
8000311a:	11 8e       	ld.ub	lr,r8[0x0]
8000311c:	e0 68 1a 96 	mov	r8,6806
									w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] ^= (1<<x);
80003120:	11 8c       	ld.ub	r12,r8[0x0]
80003122:	a5 6e       	lsl	lr,0x4
80003124:	f6 08 15 04 	lsl	r8,r11,0x4
80003128:	16 18       	sub	r8,r11
8000312a:	30 0b       	mov	r11,0
8000312c:	fc 08 00 38 	add	r8,lr,r8<<0x3
80003130:	18 08       	add	r8,r12
80003132:	2d 88       	sub	r8,-40
80003134:	f2 08 04 1c 	ld.sh	r12,r9[r8<<0x1]
80003138:	f6 0c 19 00 	cp.h	r12,r11
8000313c:	c0 31       	brne	80003142 <handler_MonomeGridKey+0xdee>
8000313e:	f2 08 0a 1a 	st.h	r9[r8<<0x1],r10
80003142:	e0 68 1a 96 	mov	r8,6806

									if(!w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step])
80003146:	11 89       	ld.ub	r9,r8[0x0]
80003148:	e0 68 1a b3 	mov	r8,6835
8000314c:	11 8b       	ld.ub	r11,r8[0x0]
8000314e:	e0 68 1a 97 	mov	r8,6807
80003152:	a5 6b       	lsl	r11,0x4
80003154:	11 88       	ld.ub	r8,r8[0x0]
80003156:	f0 0c 15 04 	lsl	r12,r8,0x4
8000315a:	f8 08 01 08 	sub	r8,r12,r8
8000315e:	f6 08 00 38 	add	r8,r11,r8<<0x3
80003162:	12 08       	add	r8,r9
80003164:	e0 69 0b 04 	mov	r9,2820
80003168:	2d 88       	sub	r8,-40
										w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] = (1<<x);
8000316a:	e0 6a 1a a4 	mov	r10,6820

									count = 0;
									for(i1=0;i1<16;i1++)
										if((w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] >> i1) & 1) {
8000316e:	f2 08 05 1b 	ld.uh	r11,r9[r8<<0x1]
80003172:	15 8a       	ld.ub	r10,r10[0x0]
80003174:	30 08       	mov	r8,0
80003176:	10 99       	mov	r9,r8
80003178:	f6 08 08 4e 	asr	lr,r11,r8
8000317c:	f2 cc ff ff 	sub	r12,r9,-1
80003180:	fd de c0 01 	bfextu	lr,lr,0x0,0x1
80003184:	c0 50       	breq	8000318e <handler_MonomeGridKey+0xe3a>
80003186:	f3 dc c0 08 	bfextu	r9,r12,0x0,0x8
8000318a:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8000318e:	2f f8       	sub	r8,-1
80003190:	59 08       	cp.w	r8,16
80003192:	cf 31       	brne	80003178 <handler_MonomeGridKey+0xe24>
80003194:	e0 68 1a a4 	mov	r8,6820
80003198:	b0 8a       	st.b	r8[0x0],r10
8000319a:	30 1a       	mov	r10,1
8000319c:	f4 09 18 00 	cp.b	r9,r10
											count++;
800031a0:	e0 88 01 19 	brls	800033d2 <handler_MonomeGridKey+0x107e>
									if(!w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step])
										w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] = (1<<x);

									count = 0;
									for(i1=0;i1<16;i1++)
										if((w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] >> i1) & 1) {
800031a4:	3f f9       	mov	r9,-1
800031a6:	b0 89       	st.b	r8[0x0],r9
											count++;
800031a8:	c1 59       	rjmp	800033d2 <handler_MonomeGridKey+0x107e>
800031aa:	30 1b       	mov	r11,1
800031ac:	f6 0a 18 00 	cp.b	r10,r11
800031b0:	e0 81 01 16 	brne	800033dc <handler_MonomeGridKey+0x1088>

									if(!w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step])
										w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] = (1<<x);

									count = 0;
									for(i1=0;i1<16;i1++)
800031b4:	58 09       	cp.w	r9,0
800031b6:	e0 80 01 13 	breq	800033dc <handler_MonomeGridKey+0x1088>
										if((w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] >> i1) & 1) {
											count++;
											edit_cv_value = i1;
										}

									if(count > 1)
800031ba:	30 49       	mov	r9,4
800031bc:	f2 08 18 00 	cp.b	r8,r9
800031c0:	c1 51       	brne	800031ea <handler_MonomeGridKey+0xe96>
800031c2:	1b b9       	ld.ub	r9,sp[0x3]
										edit_cv_value = -1;
800031c4:	e0 68 1a b3 	mov	r8,6835
800031c8:	11 8a       	ld.ub	r10,r8[0x0]
							}
						}
					}
				}
			}
			else if(edit_prob == 1) {
800031ca:	e0 68 1a 97 	mov	r8,6807
800031ce:	11 88       	ld.ub	r8,r8[0x0]
800031d0:	f0 0b 15 04 	lsl	r11,r8,0x4
				if(z) {
800031d4:	f6 08 01 08 	sub	r8,r11,r8
800031d8:	14 08       	add	r8,r10
					if(y == 4) w.wp[pattern].cv_probs[edit_cv_ch][x] = 192;
800031da:	e0 6a 0b 04 	mov	r10,2820
800031de:	a5 68       	lsl	r8,0x4
800031e0:	f4 08 00 08 	add	r8,r10,r8
800031e4:	12 08       	add	r8,r9
800031e6:	3c 09       	mov	r9,-64
800031e8:	c1 88       	rjmp	80003218 <handler_MonomeGridKey+0xec4>
800031ea:	30 59       	mov	r9,5
800031ec:	f2 08 18 00 	cp.b	r8,r9
800031f0:	c1 71       	brne	8000321e <handler_MonomeGridKey+0xeca>
800031f2:	1b b9       	ld.ub	r9,sp[0x3]
800031f4:	e0 68 1a b3 	mov	r8,6835
800031f8:	11 8a       	ld.ub	r10,r8[0x0]
800031fa:	e0 68 1a 97 	mov	r8,6807
800031fe:	11 88       	ld.ub	r8,r8[0x0]
80003200:	f0 0b 15 04 	lsl	r11,r8,0x4
					else if(y == 5) w.wp[pattern].cv_probs[edit_cv_ch][x] = 128;
80003204:	f6 08 01 08 	sub	r8,r11,r8
80003208:	14 08       	add	r8,r10
8000320a:	e0 6a 0b 04 	mov	r10,2820
8000320e:	a5 68       	lsl	r8,0x4
80003210:	f4 08 00 08 	add	r8,r10,r8
80003214:	12 08       	add	r8,r9
80003216:	38 09       	mov	r9,-128
80003218:	f1 69 00 d0 	st.b	r8[208],r9
8000321c:	ce 08       	rjmp	800033dc <handler_MonomeGridKey+0x1088>
8000321e:	1b ba       	ld.ub	r10,sp[0x3]
80003220:	e0 6b 1a 97 	mov	r11,6807
80003224:	e0 69 0b 04 	mov	r9,2820
80003228:	e0 6c 1a b3 	mov	r12,6835
8000322c:	30 6e       	mov	lr,6
8000322e:	fc 08 18 00 	cp.b	r8,lr
80003232:	c1 01       	brne	80003252 <handler_MonomeGridKey+0xefe>
80003234:	17 88       	ld.ub	r8,r11[0x0]
80003236:	19 8b       	ld.ub	r11,r12[0x0]
80003238:	f0 0c 15 04 	lsl	r12,r8,0x4
					else if(y == 6) w.wp[pattern].cv_probs[edit_cv_ch][x] = 64;
8000323c:	f8 08 01 08 	sub	r8,r12,r8
80003240:	16 08       	add	r8,r11
80003242:	a5 68       	lsl	r8,0x4
80003244:	10 09       	add	r9,r8
80003246:	34 08       	mov	r8,64
80003248:	f2 0a 00 0a 	add	r10,r9,r10
8000324c:	f5 68 00 d0 	st.b	r10[208],r8
80003250:	cc 68       	rjmp	800033dc <handler_MonomeGridKey+0x1088>
80003252:	17 88       	ld.ub	r8,r11[0x0]
80003254:	19 8b       	ld.ub	r11,r12[0x0]
80003256:	f0 0c 15 04 	lsl	r12,r8,0x4
8000325a:	f8 08 01 08 	sub	r8,r12,r8
8000325e:	16 08       	add	r8,r11
					else w.wp[pattern].cv_probs[edit_cv_ch][x] = 0;
80003260:	a5 68       	lsl	r8,0x4
80003262:	10 09       	add	r9,r8
80003264:	f2 0a 00 0a 	add	r10,r9,r10
80003268:	f4 ca ff 30 	sub	r10,r10,-208
8000326c:	30 08       	mov	r8,0
8000326e:	b4 88       	st.b	r10[0x0],r8
80003270:	cb 68       	rjmp	800033dc <handler_MonomeGridKey+0x1088>
80003272:	d7 03       	nop
80003274:	58 2b       	cp.w	r11,2
80003276:	e0 81 00 b3 	brne	800033dc <handler_MonomeGridKey+0x1088>
8000327a:	1b 99       	ld.ub	r9,sp[0x1]
8000327c:	58 09       	cp.w	r9,0
8000327e:	c3 f0       	breq	800032fc <handler_MonomeGridKey+0xfa8>
80003280:	e0 6b 1a 99 	mov	r11,6809
80003284:	17 8b       	ld.ub	r11,r11[0x0]
80003286:	ee 0b 18 00 	cp.b	r11,r7
8000328a:	c3 90       	breq	800032fc <handler_MonomeGridKey+0xfa8>
8000328c:	1b b9       	ld.ub	r9,sp[0x3]
8000328e:	58 09       	cp.w	r9,0
80003290:	c0 b1       	brne	800032a6 <handler_MonomeGridKey+0xf52>
80003292:	e0 69 1a bf 	mov	r9,6847
				}
			}
		}

		// series mode
		else if(edit_mode == mSeries) {
80003296:	13 89       	ld.ub	r9,r9[0x0]
80003298:	f2 08 00 08 	add	r8,r9,r8
			if(z && key_alt) {
8000329c:	e0 69 0b 00 	mov	r9,2816
800032a0:	20 28       	sub	r8,2
800032a2:	b2 88       	st.b	r9[0x0],r8
800032a4:	c2 08       	rjmp	800032e4 <handler_MonomeGridKey+0xf90>
800032a6:	e0 6a 0a ff 	mov	r10,2815
				if(x == 0)
800032aa:	15 8a       	ld.ub	r10,r10[0x0]
800032ac:	f4 cb 00 01 	sub	r11,r10,1
					series_next = y-2+scroll_pos;
800032b0:	16 39       	cp.w	r9,r11
800032b2:	c0 c1       	brne	800032ca <handler_MonomeGridKey+0xf76>
800032b4:	e0 69 1a bf 	mov	r9,6847
800032b8:	13 89       	ld.ub	r9,r9[0x0]
800032ba:	f2 08 00 08 	add	r8,r9,r8
800032be:	e0 69 0b 04 	mov	r9,2820
				else if(x == LENGTH-1)
800032c2:	20 28       	sub	r8,2
800032c4:	f3 68 0f 80 	st.b	r9[3968],r8
800032c8:	c0 e8       	rjmp	800032e4 <handler_MonomeGridKey+0xf90>
800032ca:	f4 09 18 00 	cp.b	r9,r10
					w.series_start = y-2+scroll_pos;
800032ce:	c0 b1       	brne	800032e4 <handler_MonomeGridKey+0xf90>
800032d0:	e0 69 1a bf 	mov	r9,6847
800032d4:	13 89       	ld.ub	r9,r9[0x0]
800032d6:	f2 08 00 08 	add	r8,r9,r8
800032da:	e0 69 0b 04 	mov	r9,2820
				else if(x == LENGTH)
800032de:	20 28       	sub	r8,2
800032e0:	f3 68 0f 81 	st.b	r9[3969],r8
					w.series_end = y-2+scroll_pos;
800032e4:	e0 68 0b 04 	mov	r8,2820
800032e8:	f1 39 0f 80 	ld.ub	r9,r8[3968]
800032ec:	f1 3a 0f 81 	ld.ub	r10,r8[3969]
800032f0:	f2 0a 18 00 	cp.b	r10,r9

				if(w.series_end < w.series_start)
800032f4:	c6 f2       	brcc	800033d2 <handler_MonomeGridKey+0x107e>
800032f6:	f1 69 0f 81 	st.b	r8[3969],r9
800032fa:	c6 c8       	rjmp	800033d2 <handler_MonomeGridKey+0x107e>
800032fc:	e0 68 0a f4 	mov	r8,2804
80003300:	11 8a       	ld.ub	r10,r8[0x0]
80003302:	f4 09 00 1a 	add	r10,r10,r9<<0x1
					w.series_end = w.series_start;
80003306:	20 1a       	sub	r10,1
80003308:	b0 8a       	st.b	r8[0x0],r10
			}
			else {
				keycount_series += z*2-1;
8000330a:	30 09       	mov	r9,0
8000330c:	f2 0a 18 00 	cp.b	r10,r9
80003310:	c0 24       	brge	80003314 <handler_MonomeGridKey+0xfc0>
80003312:	b0 89       	st.b	r8[0x0],r9
80003314:	30 08       	mov	r8,0
				if(keycount_series < 0)
80003316:	1b 99       	ld.ub	r9,sp[0x1]
80003318:	f0 09 18 00 	cp.b	r9,r8
8000331c:	c5 b0       	breq	800033d2 <handler_MonomeGridKey+0x107e>
					keycount_series = 0;
8000331e:	e0 68 1a bf 	mov	r8,6847

				if(z) {
80003322:	11 88       	ld.ub	r8,r8[0x0]
80003324:	1b aa       	ld.ub	r10,sp[0x2]
80003326:	10 0a       	add	r10,r8
80003328:	e0 68 0b 04 	mov	r8,2820
					count = 0;
					for(i1=0;i1<16;i1++)
						count += (w.series_list[y-2+scroll_pos] >> i1) & 1;
8000332c:	f4 c9 f8 82 	sub	r9,r10,-1918
80003330:	20 2a       	sub	r10,2
80003332:	f0 09 04 1b 	ld.sh	r11,r8[r9<<0x1]
80003336:	30 08       	mov	r8,0
80003338:	f9 db c0 10 	bfextu	r12,r11,0x0,0x10
8000333c:	10 99       	mov	r9,r8
8000333e:	f8 08 08 4e 	asr	lr,r12,r8
80003342:	2f f8       	sub	r8,-1
80003344:	fd de c0 01 	bfextu	lr,lr,0x0,0x1
80003348:	fc 09 00 09 	add	r9,lr,r9
8000334c:	5c 59       	castu.b	r9
8000334e:	59 08       	cp.w	r8,16
80003350:	cf 71       	brne	8000333e <handler_MonomeGridKey+0xfea>
80003352:	30 18       	mov	r8,1
80003354:	e0 6c 0a f4 	mov	r12,2804
				if(keycount_series < 0)
					keycount_series = 0;

				if(z) {
					count = 0;
					for(i1=0;i1<16;i1++)
80003358:	f0 09 18 00 	cp.b	r9,r8
						count += (w.series_list[y-2+scroll_pos] >> i1) & 1;

					// single press toggle
					if(keycount_series == 1 && count < 2) {
8000335c:	5f 8e       	srls	lr
8000335e:	19 87       	ld.ub	r7,r12[0x0]
80003360:	f0 07 18 00 	cp.b	r7,r8
80003364:	5f 0c       	sreq	r12
80003366:	fd ec 00 0c 	and	r12,lr,r12
8000336a:	30 0e       	mov	lr,0
8000336c:	fc 0c 18 00 	cp.b	r12,lr
80003370:	c0 c0       	breq	80003388 <handler_MonomeGridKey+0x1034>
80003372:	1b b8       	ld.ub	r8,sp[0x3]
80003374:	f4 ca f8 80 	sub	r10,r10,-1920
						w.series_list[y-2+scroll_pos] = (1<<x);
80003378:	30 19       	mov	r9,1
8000337a:	f2 08 09 49 	lsl	r9,r9,r8
8000337e:	e0 68 0b 04 	mov	r8,2820
80003382:	f0 0a 0a 19 	st.h	r8[r10<<0x1],r9
80003386:	c2 68       	rjmp	800033d2 <handler_MonomeGridKey+0x107e>
80003388:	f0 07 18 00 	cp.b	r7,r8
					}
					// multi-select
					else if(keycount_series > 1 || count > 1) {
8000338c:	5f 9e       	srgt	lr
8000338e:	f0 09 18 00 	cp.b	r9,r8
80003392:	5f b8       	srhi	r8
80003394:	1c 48       	or	r8,lr
80003396:	f8 08 18 00 	cp.b	r8,r12
8000339a:	c1 c0       	breq	800033d2 <handler_MonomeGridKey+0x107e>
8000339c:	f4 c9 f8 80 	sub	r9,r10,-1920
						w.series_list[y-2+scroll_pos] ^= (1<<x);
800033a0:	30 1c       	mov	r12,1
800033a2:	1b ba       	ld.ub	r10,sp[0x3]
800033a4:	f8 0a 09 4a 	lsl	r10,r12,r10
800033a8:	14 5b       	eor	r11,r10
800033aa:	e0 68 0b 04 	mov	r8,2820
800033ae:	f0 09 0a 1b 	st.h	r8[r9<<0x1],r11
800033b2:	1b ab       	ld.ub	r11,sp[0x2]

						// ensure not fully clear
						if(!w.series_list[y-2+scroll_pos])
800033b4:	e0 69 1a bf 	mov	r9,6847
800033b8:	13 89       	ld.ub	r9,r9[0x0]
800033ba:	f6 09 00 09 	add	r9,r11,r9
800033be:	30 0b       	mov	r11,0
800033c0:	f2 c9 f8 82 	sub	r9,r9,-1918
800033c4:	f0 09 04 1c 	ld.sh	r12,r8[r9<<0x1]
800033c8:	f6 0c 19 00 	cp.h	r12,r11
800033cc:	c0 31       	brne	800033d2 <handler_MonomeGridKey+0x107e>
							w.series_list[y-2+scroll_pos] = (1<<x);
800033ce:	f0 09 0a 1a 	st.h	r8[r9<<0x1],r10
					}
				}
			}

			monomeFrameDirty++;
800033d2:	e0 68 07 61 	mov	r8,1889
800033d6:	11 89       	ld.ub	r9,r8[0x0]
800033d8:	2f f9       	sub	r9,-1
		}
	}
}
800033da:	b0 89       	st.b	r8[0x0],r9
800033dc:	2f fd       	sub	sp,-4
800033de:	d8 22       	popm	r4-r7,pc

800033e0 <handler_MonomeRefresh>:
800033e0:	d4 21       	pushm	r4-r7,lr
800033e2:	e0 68 07 61 	mov	r8,1889
800033e6:	11 89       	ld.ub	r9,r8[0x0]
800033e8:	30 08       	mov	r8,0
800033ea:	f0 09 18 00 	cp.b	r9,r8
800033ee:	c4 60       	breq	8000347a <handler_MonomeRefresh+0x9a>
800033f0:	e0 69 1a 8c 	mov	r9,6796
800033f4:	13 89       	ld.ub	r9,r9[0x0]
800033f6:	f0 09 18 00 	cp.b	r9,r8
800033fa:	c0 61       	brne	80003406 <handler_MonomeRefresh+0x26>
}

static void handler_MonomePoll(s32 data) { monome_read_serial(); }
static void handler_MonomeRefresh(s32 data) {
	if(monomeFrameDirty) {
		if(preset_mode == 0) (*re)(); //refresh_mono();
800033fc:	e0 68 0a f8 	mov	r8,2808
80003400:	70 08       	ld.w	r8,r8[0x0]

static void refresh_preset() {
	u8 i1,i2;

	for(i1=0;i1<128;i1++)
		monomeLedBuffer[i1] = 0;
80003402:	5d 18       	icall	r8
80003404:	c3 78       	rjmp	80003472 <handler_MonomeRefresh+0x92>


static void refresh_preset() {
	u8 i1,i2;

	for(i1=0;i1<128;i1++)
80003406:	30 08       	mov	r8,0
		monomeLedBuffer[i1] = 0;
80003408:	e0 6c 1b 18 	mov	r12,6936
8000340c:	10 9b       	mov	r11,r8


static void refresh_preset() {
	u8 i1,i2;

	for(i1=0;i1<128;i1++)
8000340e:	38 0a       	mov	r10,-128
80003410:	f8 08 0b 0b 	st.b	r12[r8],r11
80003414:	e0 69 1b 18 	mov	r9,6936
		monomeLedBuffer[i1] = 0;

	monomeLedBuffer[preset_select * 16] = 11;
80003418:	2f f8       	sub	r8,-1
8000341a:	5c 58       	castu.b	r8
8000341c:	f4 08 18 00 	cp.b	r8,r10

	for(i1=0;i1<8;i1++)
		for(i2=0;i2<8;i2++)
			if(glyph[i1] & (1<<i2))
				monomeLedBuffer[i1*16+i2+8] = 11;
80003420:	cf 81       	brne	80003410 <handler_MonomeRefresh+0x30>
	u8 i1,i2;

	for(i1=0;i1<128;i1++)
		monomeLedBuffer[i1] = 0;

	monomeLedBuffer[preset_select * 16] = 11;
80003422:	30 b8       	mov	r8,11
80003424:	e0 6a 0a fc 	mov	r10,2812
80003428:	15 8a       	ld.ub	r10,r10[0x0]
	// monome_set_quadrant_flag(1);
	timers_set_monome();
}

static void handler_MonomePoll(s32 data) { monome_read_serial(); }
static void handler_MonomeRefresh(s32 data) {
8000342a:	a5 6a       	lsl	r10,0x4
8000342c:	10 9e       	mov	lr,r8
8000342e:	f2 0a 0b 08 	st.b	r9[r10],r8

	monomeLedBuffer[preset_select * 16] = 11;

	for(i1=0;i1<8;i1++)
		for(i2=0;i2<8;i2++)
			if(glyph[i1] & (1<<i2))
80003432:	12 97       	mov	r7,r9
80003434:	e0 68 1a a8 	mov	r8,6824
80003438:	30 8a       	mov	r10,8
8000343a:	f0 0a 00 0c 	add	r12,r8,r10
				monomeLedBuffer[i1*16+i2+8] = 11;
8000343e:	c0 f8       	rjmp	8000345c <handler_MonomeRefresh+0x7c>
80003440:	ec 09 08 45 	asr	r5,r6,r9
		monomeLedBuffer[i1] = 0;

	monomeLedBuffer[preset_select * 16] = 11;

	for(i1=0;i1<8;i1++)
		for(i2=0;i2<8;i2++)
80003444:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
80003448:	c0 20       	breq	8000344c <handler_MonomeRefresh+0x6c>
	for(i1=0;i1<128;i1++)
		monomeLedBuffer[i1] = 0;

	monomeLedBuffer[preset_select * 16] = 11;

	for(i1=0;i1<8;i1++)
8000344a:	b6 8e       	st.b	r11[0x0],lr
8000344c:	2f f9       	sub	r9,-1
		for(i2=0;i2<8;i2++)
			if(glyph[i1] & (1<<i2))
8000344e:	2f fb       	sub	r11,-1
80003450:	58 89       	cp.w	r9,8
80003452:	cf 71       	brne	80003440 <handler_MonomeRefresh+0x60>
80003454:	2f f8       	sub	r8,-1
80003456:	2f 0a       	sub	r10,-16
				monomeLedBuffer[i1*16+i2+8] = 11;

	monome_set_quadrant_flag(0);
80003458:	18 38       	cp.w	r8,r12
8000345a:	c0 60       	breq	80003466 <handler_MonomeRefresh+0x86>
8000345c:	11 86       	ld.ub	r6,r8[0x0]
	monome_set_quadrant_flag(1);
8000345e:	f4 07 00 0b 	add	r11,r10,r7
80003462:	30 09       	mov	r9,0
static void handler_MonomeRefresh(s32 data) {
	if(monomeFrameDirty) {
		if(preset_mode == 0) (*re)(); //refresh_mono();
		else refresh_preset();

		(*monome_refresh)();
80003464:	ce eb       	rjmp	80003440 <handler_MonomeRefresh+0x60>
80003466:	30 0c       	mov	r12,0
80003468:	e0 a0 11 30 	rcall	800056c8 <monome_set_quadrant_flag>
8000346c:	30 1c       	mov	r12,1
8000346e:	e0 a0 11 2d 	rcall	800056c8 <monome_set_quadrant_flag>
80003472:	e0 68 1b 0c 	mov	r8,6924
80003476:	70 08       	ld.w	r8,r8[0x0]
80003478:	5d 18       	icall	r8
8000347a:	d8 22       	popm	r4-r7,pc

8000347c <refresh_mono>:
8000347c:	d4 31       	pushm	r0-r7,lr
8000347e:	20 5d       	sub	sp,20
80003480:	e0 68 1b 18 	mov	r8,6936
80003484:	30 09       	mov	r9,0
80003486:	f0 ca ff f0 	sub	r10,r8,-16
8000348a:	b0 89       	st.b	r8[0x0],r9
	u8 i1,i2;

	// clear top, cut, pattern, prob
	for(i1=0;i1<16;i1++) {
		monomeLedBuffer[i1] = 0;
		monomeLedBuffer[16+i1] = 0;
8000348c:	f1 69 00 10 	st.b	r8[16],r9
		monomeLedBuffer[32+i1] = 0;
80003490:	f1 69 00 20 	st.b	r8[32],r9
		monomeLedBuffer[48+i1] = 0;
80003494:	f1 69 00 30 	st.b	r8[48],r9
// application grid redraw without varibright
static void refresh_mono() {
	u8 i1,i2;

	// clear top, cut, pattern, prob
	for(i1=0;i1<16;i1++) {
80003498:	2f f8       	sub	r8,-1
8000349a:	14 38       	cp.w	r8,r10
		monomeLedBuffer[32+i1] = 0;
		monomeLedBuffer[48+i1] = 0;
	}

	// show mode
	if(edit_mode == mTrig) {
8000349c:	cf 71       	brne	8000348a <refresh_mono+0xe>
8000349e:	e0 68 1a c4 	mov	r8,6852
800034a2:	70 09       	ld.w	r9,r8[0x0]
		monomeLedBuffer[0] = 11;
800034a4:	58 09       	cp.w	r9,0
800034a6:	c0 91       	brne	800034b8 <refresh_mono+0x3c>
		monomeLedBuffer[1] = 11;
		monomeLedBuffer[2] = 11;
		monomeLedBuffer[3] = 11;
800034a8:	e0 68 1b 18 	mov	r8,6936
	}

	// show mode
	if(edit_mode == mTrig) {
		monomeLedBuffer[0] = 11;
		monomeLedBuffer[1] = 11;
800034ac:	30 ba       	mov	r10,11
		monomeLedBuffer[2] = 11;
800034ae:	b0 ba       	st.b	r8[0x3],r10
800034b0:	b0 8a       	st.b	r8[0x0],r10
		monomeLedBuffer[3] = 11;
	}
	else if(edit_mode == mMap) {
800034b2:	b0 9a       	st.b	r8[0x1],r10
800034b4:	b0 aa       	st.b	r8[0x2],r10
		if(SIZE==16) {
800034b6:	c2 b8       	rjmp	8000350c <refresh_mono+0x90>
800034b8:	58 19       	cp.w	r9,1
800034ba:	c1 d1       	brne	800034f4 <refresh_mono+0x78>
800034bc:	e0 68 0a ec 	mov	r8,2796
800034c0:	e0 6a 1b 18 	mov	r10,6936
800034c4:	11 8c       	ld.ub	r12,r8[0x0]
			monomeLedBuffer[4+(edit_cv_ch*4)] = 11;
800034c6:	31 0b       	mov	r11,16
800034c8:	e0 68 1a b3 	mov	r8,6835
800034cc:	f6 0c 18 00 	cp.b	r12,r11
800034d0:	c0 d1       	brne	800034ea <refresh_mono+0x6e>
			monomeLedBuffer[5+(edit_cv_ch*4)] = 11;
800034d2:	11 8b       	ld.ub	r11,r8[0x0]
800034d4:	30 b8       	mov	r8,11
			monomeLedBuffer[6+(edit_cv_ch*4)] = 11;
			monomeLedBuffer[7+(edit_cv_ch*4)] = 11;
800034d6:	f6 cc ff ff 	sub	r12,r11,-1
	}
	else if(edit_mode == mMap) {
		if(SIZE==16) {
			monomeLedBuffer[4+(edit_cv_ch*4)] = 11;
			monomeLedBuffer[5+(edit_cv_ch*4)] = 11;
			monomeLedBuffer[6+(edit_cv_ch*4)] = 11;
800034da:	f4 0c 0b 28 	st.b	r10[r12<<0x2],r8
			monomeLedBuffer[7+(edit_cv_ch*4)] = 11;
		}
		else
			monomeLedBuffer[4+edit_cv_ch] = 11;
800034de:	f4 0b 00 2a 	add	r10,r10,r11<<0x2
800034e2:	b4 f8       	st.b	r10[0x7],r8
800034e4:	b4 d8       	st.b	r10[0x5],r8
800034e6:	b4 e8       	st.b	r10[0x6],r8
	}
	else if(edit_mode == mSeries) {
800034e8:	c1 28       	rjmp	8000350c <refresh_mono+0x90>
800034ea:	11 88       	ld.ub	r8,r8[0x0]
		monomeLedBuffer[LENGTH-1] = 11;
800034ec:	10 0a       	add	r10,r8
800034ee:	30 b8       	mov	r8,11
800034f0:	b4 c8       	st.b	r10[0x4],r8
800034f2:	c0 d8       	rjmp	8000350c <refresh_mono+0x90>
800034f4:	58 29       	cp.w	r9,2
800034f6:	c0 b1       	brne	8000350c <refresh_mono+0x90>
800034f8:	e0 6a 1b 18 	mov	r10,6936
	}

	if(scroll) {
800034fc:	e0 68 0a ff 	mov	r8,2815
80003500:	11 88       	ld.ub	r8,r8[0x0]
80003502:	f4 08 00 08 	add	r8,r10,r8
		monomeLedBuffer[0] = 11 * w.tr_mute[0];
80003506:	30 ba       	mov	r10,11
80003508:	f1 6a ff ff 	st.b	r8[-1],r10
8000350c:	e0 68 1a b1 	mov	r8,6833
80003510:	11 85       	ld.ub	r5,r8[0x0]
80003512:	58 05       	cp.w	r5,0
80003514:	c5 40       	breq	800035bc <refresh_mono+0x140>
		monomeLedBuffer[1] = 11 * w.tr_mute[1];
80003516:	e0 6a 0b 04 	mov	r10,2820
	else if(edit_mode == mSeries) {
		monomeLedBuffer[LENGTH-1] = 11;
	}

	if(scroll) {
		monomeLedBuffer[0] = 11 * w.tr_mute[0];
8000351a:	f5 3e 0f 82 	ld.ub	lr,r10[3970]
		monomeLedBuffer[1] = 11 * w.tr_mute[1];
8000351e:	1c 9b       	mov	r11,lr
80003520:	fc 0e 00 2e 	add	lr,lr,lr<<0x2
80003524:	f6 0e 00 1b 	add	r11,r11,lr<<0x1
		monomeLedBuffer[2] = 11 * w.tr_mute[2];
80003528:	e0 68 1b 18 	mov	r8,6936
8000352c:	f5 3c 0f 83 	ld.ub	r12,r10[3971]
80003530:	b0 8b       	st.b	r8[0x0],r11
80003532:	18 9b       	mov	r11,r12
80003534:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
		monomeLedBuffer[3] = 11 * w.tr_mute[3];
80003538:	f6 0c 00 1b 	add	r11,r11,r12<<0x1
8000353c:	f5 3e 0f 84 	ld.ub	lr,r10[3972]
80003540:	b0 9b       	st.b	r8[0x1],r11
80003542:	1c 9b       	mov	r11,lr
80003544:	fc 0e 00 2e 	add	lr,lr,lr<<0x2
80003548:	f6 0e 00 1b 	add	r11,r11,lr<<0x1

		if(SIZE == 16) {
8000354c:	f5 3c 0f 85 	ld.ub	r12,r10[3973]
80003550:	b0 ab       	st.b	r8[0x2],r11
80003552:	18 9b       	mov	r11,r12
80003554:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
80003558:	f6 0c 00 1b 	add	r11,r11,r12<<0x1
			monomeLedBuffer[4] = 11 * w.cv_mute[0];
8000355c:	e0 6c 0a ec 	mov	r12,2796
80003560:	b0 bb       	st.b	r8[0x3],r11
80003562:	19 8e       	ld.ub	lr,r12[0x0]
80003564:	f5 3b 0f 87 	ld.ub	r11,r10[3975]
80003568:	31 0c       	mov	r12,16
			monomeLedBuffer[5] = 11 * w.cv_mute[0];
8000356a:	f5 3a 0f 86 	ld.ub	r10,r10[3974]
			monomeLedBuffer[6] = 11 * w.cv_mute[0];
			monomeLedBuffer[7] = 11 * w.cv_mute[0];
			monomeLedBuffer[8] = 11 * w.cv_mute[1];
8000356e:	f8 0e 18 00 	cp.b	lr,r12
80003572:	c1 91       	brne	800035a4 <refresh_mono+0x128>
80003574:	14 9c       	mov	r12,r10
80003576:	f4 0a 00 2a 	add	r10,r10,r10<<0x2
			monomeLedBuffer[9] = 11 * w.cv_mute[1];
			monomeLedBuffer[10] = 11 * w.cv_mute[1];
			monomeLedBuffer[11] = 11 * w.cv_mute[1];
8000357a:	f8 0a 00 1a 	add	r10,r12,r10<<0x1
		if(SIZE == 16) {
			monomeLedBuffer[4] = 11 * w.cv_mute[0];
			monomeLedBuffer[5] = 11 * w.cv_mute[0];
			monomeLedBuffer[6] = 11 * w.cv_mute[0];
			monomeLedBuffer[7] = 11 * w.cv_mute[0];
			monomeLedBuffer[8] = 11 * w.cv_mute[1];
8000357e:	b0 fa       	st.b	r8[0x7],r10
			monomeLedBuffer[9] = 11 * w.cv_mute[1];
80003580:	b0 ca       	st.b	r8[0x4],r10
80003582:	b0 da       	st.b	r8[0x5],r10
			monomeLedBuffer[10] = 11 * w.cv_mute[1];
80003584:	b0 ea       	st.b	r8[0x6],r10
80003586:	16 9a       	mov	r10,r11
80003588:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000358c:	f4 0b 00 1b 	add	r11,r10,r11<<0x1
80003590:	f1 6b 00 0b 	st.b	r8[11],r11
80003594:	f1 6b 00 08 	st.b	r8[8],r11
80003598:	f1 6b 00 09 	st.b	r8[9],r11
8000359c:	f1 6b 00 0a 	st.b	r8[10],r11
800035a0:	c0 e8       	rjmp	800035bc <refresh_mono+0x140>
800035a2:	d7 03       	nop
800035a4:	14 9c       	mov	r12,r10
800035a6:	f4 0a 00 2a 	add	r10,r10,r10<<0x2
			monomeLedBuffer[11] = 11 * w.cv_mute[1];
		} else {
			monomeLedBuffer[4] = 11 * w.cv_mute[0];
800035aa:	f8 0a 00 1c 	add	r12,r12,r10<<0x1
800035ae:	16 9a       	mov	r10,r11
800035b0:	b0 cc       	st.b	r8[0x4],r12
			monomeLedBuffer[5] = 11 * w.cv_mute[1];
800035b2:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
800035b6:	f4 0b 00 1a 	add	r10,r10,r11<<0x1
800035ba:	b0 da       	st.b	r8[0x5],r10
800035bc:	e0 68 1a 99 	mov	r8,6809


	}

	// alt
	if(key_alt) monomeLedBuffer[LENGTH] = 11;
800035c0:	11 86       	ld.ub	r6,r8[0x0]
800035c2:	58 06       	cp.w	r6,0
800035c4:	c0 90       	breq	800035d6 <refresh_mono+0x15a>
800035c6:	e0 68 0a ff 	mov	r8,2815
800035ca:	30 bb       	mov	r11,11
800035cc:	11 88       	ld.ub	r8,r8[0x0]
800035ce:	e0 6a 1b 18 	mov	r10,6936
800035d2:	f4 08 0b 0b 	st.b	r10[r8],r11

	// show position
	monomeLedBuffer[16+pos] = 15;
800035d6:	e0 68 0a fe 	mov	r8,2814
800035da:	e0 67 1b 18 	mov	r7,6936
800035de:	30 fa       	mov	r10,15
800035e0:	11 81       	ld.ub	r1,r8[0x0]
800035e2:	f1 d1 b0 08 	bfexts	r8,r1,0x0,0x8
800035e6:	ee 08 00 08 	add	r8,r7,r8

	// show pattern
	monomeLedBuffer[32+pattern] = 11;
800035ea:	f1 6a 00 10 	st.b	r8[16],r10
800035ee:	30 bc       	mov	r12,11
800035f0:	e0 68 1a 97 	mov	r8,6807
800035f4:	11 88       	ld.ub	r8,r8[0x0]

	// show step data
	if(edit_mode == mTrig) {
800035f6:	ee 08 00 0a 	add	r10,r7,r8
		if(edit_prob == 0) {
800035fa:	f5 6c 00 20 	st.b	r10[32],r12
800035fe:	58 09       	cp.w	r9,0
80003600:	c7 01       	brne	800036e0 <refresh_mono+0x264>
80003602:	e0 6a 1a bd 	mov	r10,6845
80003606:	15 8a       	ld.ub	r10,r10[0x0]
80003608:	58 0a       	cp.w	r10,0
8000360a:	c3 01       	brne	8000366a <refresh_mono+0x1ee>
8000360c:	f0 0a 15 04 	lsl	r10,r8,0x4
80003610:	f4 08 01 08 	sub	r8,r10,r8
			for(i1=0;i1<SIZE;i1++) {
	 			for(i2=0;i2<4;i2++) {
					if(w.wp[pattern].steps[i1] & (1<<i2)) monomeLedBuffer[(i2+4)*16+i1] = 11;
80003614:	e0 6a 0b 04 	mov	r10,2820
	// show pattern
	monomeLedBuffer[32+pattern] = 11;

	// show step data
	if(edit_mode == mTrig) {
		if(edit_prob == 0) {
80003618:	a5 68       	lsl	r8,0x4
	monome_set_quadrant_flag(1);
}


// application grid redraw without varibright
static void refresh_mono() {
8000361a:	2e 08       	sub	r8,-32
8000361c:	14 08       	add	r8,r10
8000361e:	e0 6a 0a ec 	mov	r10,2796
	// show step data
	if(edit_mode == mTrig) {
		if(edit_prob == 0) {
			for(i1=0;i1<SIZE;i1++) {
	 			for(i2=0;i2<4;i2++) {
					if(w.wp[pattern].steps[i1] & (1<<i2)) monomeLedBuffer[(i2+4)*16+i1] = 11;
80003622:	0e 94       	mov	r4,r7
80003624:	15 85       	ld.ub	r5,r10[0x0]
80003626:	2d 07       	sub	r7,-48
80003628:	2c 05       	sub	r5,-64
8000362a:	34 0a       	mov	r10,64
8000362c:	c1 68       	rjmp	80003658 <refresh_mono+0x1dc>
8000362e:	e6 0b 08 46 	asr	r6,r3,r11
					else monomeLedBuffer[(i2+4)*16+i1] = 0;
80003632:	ed d6 c0 01 	bfextu	r6,r6,0x0,0x1

	// show step data
	if(edit_mode == mTrig) {
		if(edit_prob == 0) {
			for(i1=0;i1<SIZE;i1++) {
	 			for(i2=0;i2<4;i2++) {
80003636:	f8 02 17 10 	movne	r2,r12
					if(w.wp[pattern].steps[i1] & (1<<i2)) monomeLedBuffer[(i2+4)*16+i1] = 11;
					else monomeLedBuffer[(i2+4)*16+i1] = 0;
				}

				// probs
				if(w.wp[pattern].step_probs[i1] > 0) monomeLedBuffer[48+i1] = 11;
8000363a:	ec 02 17 00 	moveq	r2,r6
8000363e:	bc 82       	st.b	lr[0x0],r2
80003640:	2f fb       	sub	r11,-1
80003642:	2f 0e       	sub	lr,-16
80003644:	58 4b       	cp.w	r11,4
80003646:	cf 41       	brne	8000362e <refresh_mono+0x1b2>
80003648:	11 8b       	ld.ub	r11,r8[0x0]
	monomeLedBuffer[32+pattern] = 11;

	// show step data
	if(edit_mode == mTrig) {
		if(edit_prob == 0) {
			for(i1=0;i1<SIZE;i1++) {
8000364a:	f2 0b 18 00 	cp.b	r11,r9
8000364e:	c0 20       	breq	80003652 <refresh_mono+0x1d6>
	 			for(i2=0;i2<4;i2++) {
					if(w.wp[pattern].steps[i1] & (1<<i2)) monomeLedBuffer[(i2+4)*16+i1] = 11;
80003650:	ae 8c       	st.b	r7[0x0],r12
80003652:	2f f8       	sub	r8,-1
80003654:	2f f7       	sub	r7,-1
80003656:	2f fa       	sub	r10,-1
80003658:	0a 3a       	cp.w	r10,r5
8000365a:	e0 80 01 f9 	breq	80003a4c <refresh_mono+0x5d0>

				// probs
				if(w.wp[pattern].step_probs[i1] > 0) monomeLedBuffer[48+i1] = 11;
			}
		}
		else if(edit_prob == 1) {
8000365e:	f1 33 ff f0 	ld.ub	r3,r8[-16]
80003662:	f4 04 00 0e 	add	lr,r10,r4
			for(i1=0;i1<SIZE;i1++) {
80003666:	30 0b       	mov	r11,0
80003668:	ce 3b       	rjmp	8000362e <refresh_mono+0x1b2>
8000366a:	30 1b       	mov	r11,1
8000366c:	f6 0a 18 00 	cp.b	r10,r11
80003670:	e0 81 01 ee 	brne	80003a4c <refresh_mono+0x5d0>
					monomeLedBuffer[48+i1] = 0;
					monomeLedBuffer[112+i1] = 11;
				}
				else if(w.wp[pattern].step_probs[i1]) {
					monomeLedBuffer[48+i1] = 11;
					monomeLedBuffer[64+16*(3-(w.wp[pattern].step_probs[i1]>>6))+i1] = 11;
80003674:	e0 6a 0a ec 	mov	r10,2796
				if(w.wp[pattern].step_probs[i1] > 0) monomeLedBuffer[48+i1] = 11;
			}
		}
		else if(edit_prob == 1) {
			for(i1=0;i1<SIZE;i1++) {
				monomeLedBuffer[64+i1] = 0;
80003678:	15 85       	ld.ub	r5,r10[0x0]
				// probs
				if(w.wp[pattern].step_probs[i1] > 0) monomeLedBuffer[48+i1] = 11;
			}
		}
		else if(edit_prob == 1) {
			for(i1=0;i1<SIZE;i1++) {
8000367a:	f0 0a 15 04 	lsl	r10,r8,0x4
8000367e:	f4 08 01 08 	sub	r8,r10,r8
80003682:	e0 6a 0b 04 	mov	r10,2820
80003686:	0e 94       	mov	r4,r7
				monomeLedBuffer[64+i1] = 0;
80003688:	a5 68       	lsl	r8,0x4
8000368a:	12 9b       	mov	r11,r9
				monomeLedBuffer[80+i1] = 0;
8000368c:	2e 08       	sub	r8,-32
8000368e:	3f f6       	mov	r6,-1
				monomeLedBuffer[96+i1] = 0;
80003690:	14 08       	add	r8,r10
80003692:	ee ca ff d0 	sub	r10,r7,-48
				monomeLedBuffer[112+i1] = 0;

				if(w.wp[pattern].step_probs[i1] == 255)
80003696:	29 07       	sub	r7,-112
80003698:	c1 f8       	rjmp	800036d6 <refresh_mono+0x25a>
8000369a:	f5 6b 00 10 	st.b	r10[16],r11
					monomeLedBuffer[48+i1] = 11;
8000369e:	f5 6b 00 20 	st.b	r10[32],r11
				else if(w.wp[pattern].step_probs[i1] == 0) {
800036a2:	f5 6b 00 30 	st.b	r10[48],r11
					monomeLedBuffer[48+i1] = 0;
800036a6:	ae 8b       	st.b	r7[0x0],r11
					monomeLedBuffer[112+i1] = 11;
800036a8:	11 8e       	ld.ub	lr,r8[0x0]
800036aa:	ec 0e 18 00 	cp.b	lr,r6
				}
				else if(w.wp[pattern].step_probs[i1]) {
					monomeLedBuffer[48+i1] = 11;
					monomeLedBuffer[64+16*(3-(w.wp[pattern].step_probs[i1]>>6))+i1] = 11;
800036ae:	c0 31       	brne	800036b4 <refresh_mono+0x238>
800036b0:	b4 8c       	st.b	r10[0x0],r12
800036b2:	c0 e8       	rjmp	800036ce <refresh_mono+0x252>
800036b4:	58 0e       	cp.w	lr,0
800036b6:	c0 41       	brne	800036be <refresh_mono+0x242>
800036b8:	b4 8e       	st.b	r10[0x0],lr
800036ba:	ae 8c       	st.b	r7[0x0],r12
800036bc:	c0 98       	rjmp	800036ce <refresh_mono+0x252>
800036be:	b4 8c       	st.b	r10[0x0],r12
800036c0:	a7 8e       	lsr	lr,0x6
800036c2:	fc 0e 11 07 	rsub	lr,lr,7
				// probs
				if(w.wp[pattern].step_probs[i1] > 0) monomeLedBuffer[48+i1] = 11;
			}
		}
		else if(edit_prob == 1) {
			for(i1=0;i1<SIZE;i1++) {
800036c6:	a5 6e       	lsl	lr,0x4
800036c8:	12 0e       	add	lr,r9
800036ca:	e8 0e 0b 0c 	st.b	r4[lr],r12
800036ce:	2f f9       	sub	r9,-1
800036d0:	2f fa       	sub	r10,-1
800036d2:	2f f7       	sub	r7,-1
800036d4:	2f f8       	sub	r8,-1
800036d6:	ea 09 18 00 	cp.b	r9,r5
800036da:	ce 03       	brcs	8000369a <refresh_mono+0x21e>
800036dc:	e0 8f 01 b8 	bral	80003a4c <refresh_mono+0x5d0>
800036e0:	58 19       	cp.w	r9,1
800036e2:	e0 81 01 2e 	brne	8000393e <refresh_mono+0x4c2>
800036e6:	e0 6a 1a bd 	mov	r10,6845
800036ea:	15 8a       	ld.ub	r10,r10[0x0]
800036ec:	58 0a       	cp.w	r10,0
800036ee:	e0 81 00 ea 	brne	800038c2 <refresh_mono+0x446>
			}
		}
	}

	// show map
	else if(edit_mode == mMap) {
800036f2:	e0 69 1a b3 	mov	r9,6835
		if(edit_prob == 0) {
800036f6:	e0 6b 0b 04 	mov	r11,2820
800036fa:	13 89       	ld.ub	r9,r9[0x0]
800036fc:	f0 0e 15 04 	lsl	lr,r8,0x4
			// CURVES
			if(w.wp[pattern].cv_mode[edit_cv_ch] == 0) {
80003700:	fc 08 01 08 	sub	r8,lr,r8
80003704:	f0 06 15 04 	lsl	r6,r8,0x4
80003708:	f6 06 00 05 	add	r5,r11,r6
8000370c:	12 05       	add	r5,r9
8000370e:	0b e5       	ld.ub	r5,r5[0x6]
80003710:	0a 94       	mov	r4,r5
80003712:	f4 05 18 00 	cp.b	r5,r10
80003716:	c4 61       	brne	800037a2 <refresh_mono+0x326>
80003718:	f2 08 00 08 	add	r8,r9,r8
8000371c:	a5 79       	lsl	r9,0x5
8000371e:	f2 06 00 06 	add	r6,r9,r6
80003722:	e0 69 0a ec 	mov	r9,2796
80003726:	ec c6 ff 70 	sub	r6,r6,-144
8000372a:	13 83       	ld.ub	r3,r9[0x0]
	monome_set_quadrant_flag(1);
}


// application grid redraw without varibright
static void refresh_mono() {
8000372c:	2c 07       	sub	r7,-64

	// show map
	else if(edit_mode == mMap) {
		if(edit_prob == 0) {
			// CURVES
			if(w.wp[pattern].cv_mode[edit_cv_ch] == 0) {
8000372e:	2f 38       	sub	r8,-13
80003730:	ee 03 00 03 	add	r3,r7,r3
80003734:	a5 68       	lsl	r8,0x4
80003736:	e0 64 01 ff 	mov	r4,511
	monome_set_quadrant_flag(1);
}


// application grid redraw without varibright
static void refresh_mono() {
8000373a:	16 08       	add	r8,r11

	// show map
	else if(edit_mode == mMap) {
		if(edit_prob == 0) {
			// CURVES
			if(w.wp[pattern].cv_mode[edit_cv_ch] == 0) {
8000373c:	e0 6e 09 ff 	mov	lr,2559
				for(i1=0;i1<SIZE;i1++) {
					// probs
					if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 11;

					monomeLedBuffer[112+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 511) * 11;
80003740:	ec 0b 00 0b 	add	r11,r6,r11
					monomeLedBuffer[96+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 1535) * 11;
					monomeLedBuffer[80+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 2559) * 11;
80003744:	e0 69 0d ff 	mov	r9,3583

	// show map
	else if(edit_mode == mMap) {
		if(edit_prob == 0) {
			// CURVES
			if(w.wp[pattern].cv_mode[edit_cv_ch] == 0) {
80003748:	e0 66 05 ff 	mov	r6,1535
					if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 11;

					monomeLedBuffer[112+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 511) * 11;
					monomeLedBuffer[96+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 1535) * 11;
					monomeLedBuffer[80+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 2559) * 11;
					monomeLedBuffer[64+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 3583) * 11;
8000374c:	c2 88       	rjmp	8000379c <refresh_mono+0x320>
8000374e:	11 8a       	ld.ub	r10,r8[0x0]
				for(i1=0;i1<SIZE;i1++) {
					// probs
					if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 11;

					monomeLedBuffer[112+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 511) * 11;
					monomeLedBuffer[96+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 1535) * 11;
80003750:	ea 0a 18 00 	cp.b	r10,r5
80003754:	c0 30       	breq	8000375a <refresh_mono+0x2de>
		if(edit_prob == 0) {
			// CURVES
			if(w.wp[pattern].cv_mode[edit_cv_ch] == 0) {
				for(i1=0;i1<SIZE;i1++) {
					// probs
					if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 11;
80003756:	ef 6c ff f0 	st.b	r7[-16],r12
8000375a:	17 1a       	ld.sh	r10,r11++
8000375c:	f4 04 19 00 	cp.h	r4,r10
80003760:	f9 b1 03 0b 	movlo	r1,11

					monomeLedBuffer[112+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 511) * 11;
80003764:	f9 b1 02 00 	movhs	r1,0
80003768:	f4 09 19 00 	cp.h	r9,r10
8000376c:	f9 b2 03 0b 	movlo	r2,11
					monomeLedBuffer[96+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 1535) * 11;
					monomeLedBuffer[80+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 2559) * 11;
					monomeLedBuffer[64+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 3583) * 11;
80003770:	f9 b2 02 00 	movhs	r2,0
80003774:	ef 61 00 30 	st.b	r7[48],r1
80003778:	2f f8       	sub	r8,-1
8000377a:	f4 06 19 00 	cp.h	r6,r10
			if(w.wp[pattern].cv_mode[edit_cv_ch] == 0) {
				for(i1=0;i1<SIZE;i1++) {
					// probs
					if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 11;

					monomeLedBuffer[112+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 511) * 11;
8000377e:	f9 b1 03 0b 	movlo	r1,11
					monomeLedBuffer[96+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 1535) * 11;
80003782:	f9 b1 02 00 	movhs	r1,0
80003786:	f4 0e 19 00 	cp.h	lr,r10
8000378a:	f9 ba 03 0b 	movlo	r10,11
					monomeLedBuffer[80+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 2559) * 11;
8000378e:	f9 ba 02 00 	movhs	r10,0
80003792:	ef 61 00 20 	st.b	r7[32],r1
80003796:	ef 6a 00 10 	st.b	r7[16],r10
				for(i1=0;i1<SIZE;i1++) {
					// probs
					if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 11;

					monomeLedBuffer[112+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 511) * 11;
					monomeLedBuffer[96+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 1535) * 11;
8000379a:	0e c2       	st.b	r7++,r2
8000379c:	06 37       	cp.w	r7,r3
					monomeLedBuffer[80+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 2559) * 11;
8000379e:	cd 81       	brne	8000374e <refresh_mono+0x2d2>
800037a0:	c5 69       	rjmp	80003a4c <refresh_mono+0x5d0>
					monomeLedBuffer[64+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 3583) * 11;
800037a2:	e0 66 1a bc 	mov	r6,6844
	// show map
	else if(edit_mode == mMap) {
		if(edit_prob == 0) {
			// CURVES
			if(w.wp[pattern].cv_mode[edit_cv_ch] == 0) {
				for(i1=0;i1<SIZE;i1++) {
800037a6:	0d 85       	ld.ub	r5,r6[0x0]
800037a8:	e0 66 0a ec 	mov	r6,2796
					monomeLedBuffer[64+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 3583) * 11;
				}
			}
			// MAP
			else {
				if(!scale_select) {
800037ac:	f4 05 18 00 	cp.b	r5,r10
800037b0:	c0 b0       	breq	800037c6 <refresh_mono+0x34a>
800037b2:	10 09       	add	r9,r8
800037b4:	2c 07       	sub	r7,-64
800037b6:	2f 39       	sub	r9,-13
800037b8:	0d 88       	ld.ub	r8,r6[0x0]
800037ba:	a5 69       	lsl	r9,0x4
	monome_set_quadrant_flag(1);
}


// application grid redraw without varibright
static void refresh_mono() {
800037bc:	ee 08 00 08 	add	r8,r7,r8
800037c0:	f2 0b 00 0b 	add	r11,r9,r11
					monomeLedBuffer[64+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 3583) * 11;
				}
			}
			// MAP
			else {
				if(!scale_select) {
800037c4:	c7 78       	rjmp	800038b2 <refresh_mono+0x436>
800037c6:	f0 0e 15 03 	lsl	lr,r8,0x3
						// clear edit row
						monomeLedBuffer[64+i1] = 0;

						// show current edit value, selected
						if(edit_cv_value != -1) {
							if((w.wp[pattern].cv_values[edit_cv_value] >> 8) >= i1)
800037ca:	0d 83       	ld.ub	r3,r6[0x0]
800037cc:	e0 66 1a a4 	mov	r6,6820

						// clear edit row
						monomeLedBuffer[64+i1] = 0;

						// show current edit value, selected
						if(edit_cv_value != -1) {
800037d0:	ee cc ff b0 	sub	r12,r7,-80
							monomeLedBuffer[80+i1] = 0;
							monomeLedBuffer[96+i1] = 0;
						}

						// show steps
						if(w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] & (1<<i1)) monomeLedBuffer[112+i1] = 11;
800037d4:	0d 84       	ld.ub	r4,r6[0x0]

						// clear edit row
						monomeLedBuffer[64+i1] = 0;

						// show current edit value, selected
						if(edit_cv_value != -1) {
800037d6:	f2 08 00 08 	add	r8,r9,r8
							monomeLedBuffer[80+i1] = 0;
							monomeLedBuffer[96+i1] = 0;
						}

						// show steps
						if(w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] & (1<<i1)) monomeLedBuffer[112+i1] = 11;
800037da:	e0 66 1a 96 	mov	r6,6806
						// clear edit row
						monomeLedBuffer[64+i1] = 0;

						// show current edit value, selected
						if(edit_cv_value != -1) {
							if((w.wp[pattern].cv_values[edit_cv_value] >> 8) >= i1)
800037de:	08 92       	mov	r2,r4
							monomeLedBuffer[80+i1] = 0;
							monomeLedBuffer[96+i1] = 0;
						}

						// show steps
						if(w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] & (1<<i1)) monomeLedBuffer[112+i1] = 11;
800037e0:	0d 85       	ld.ub	r5,r6[0x0]
						// clear edit row
						monomeLedBuffer[64+i1] = 0;

						// show current edit value, selected
						if(edit_cv_value != -1) {
							if((w.wp[pattern].cv_values[edit_cv_value] >> 8) >= i1)
800037e2:	5c 62       	casts.b	r2
							monomeLedBuffer[80+i1] = 0;
							monomeLedBuffer[96+i1] = 0;
						}

						// show steps
						if(w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] & (1<<i1)) monomeLedBuffer[112+i1] = 11;
800037e4:	2f 38       	sub	r8,-13
						// clear edit row
						monomeLedBuffer[64+i1] = 0;

						// show current edit value, selected
						if(edit_cv_value != -1) {
							if((w.wp[pattern].cv_values[edit_cv_value] >> 8) >= i1)
800037e6:	fc 02 00 02 	add	r2,lr,r2
							monomeLedBuffer[80+i1] = 0;
							monomeLedBuffer[96+i1] = 0;
						}

						// show steps
						if(w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] & (1<<i1)) monomeLedBuffer[112+i1] = 11;
800037ea:	a5 68       	lsl	r8,0x4
800037ec:	f2 01 15 04 	lsl	r1,r9,0x4
						// clear edit row
						monomeLedBuffer[64+i1] = 0;

						// show current edit value, selected
						if(edit_cv_value != -1) {
							if((w.wp[pattern].cv_values[edit_cv_value] >> 8) >= i1)
800037f0:	2e 82       	sub	r2,-24
							monomeLedBuffer[80+i1] = 0;
							monomeLedBuffer[96+i1] = 0;
						}

						// show steps
						if(w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] & (1<<i1)) monomeLedBuffer[112+i1] = 11;
800037f2:	1c 01       	add	r1,lr
800037f4:	f0 0b 00 0b 	add	r11,r8,r11
800037f8:	0a 01       	add	r1,r5
800037fa:	ee ce ff 90 	sub	lr,r7,-112
800037fe:	2d 81       	sub	r1,-40
80003800:	2a 07       	sub	r7,-96
80003802:	c3 78       	rjmp	80003870 <refresh_mono+0x3f4>
			// MAP
			else {
				if(!scale_select) {
					for(i1=0;i1<SIZE;i1++) {
						// probs
						if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 11;
80003804:	17 86       	ld.ub	r6,r11[0x0]
80003806:	30 08       	mov	r8,0
80003808:	f0 06 18 00 	cp.b	r6,r8
8000380c:	c0 40       	breq	80003814 <refresh_mono+0x398>
8000380e:	30 b8       	mov	r8,11
80003810:	ef 68 ff d0 	st.b	r7[-48],r8

						// clear edit row
						monomeLedBuffer[64+i1] = 0;
80003814:	30 08       	mov	r8,0
80003816:	ef 68 ff e0 	st.b	r7[-32],r8

						// show current edit value, selected
						if(edit_cv_value != -1) {
8000381a:	3f f6       	mov	r6,-1
8000381c:	08 90       	mov	r0,r4
8000381e:	ec 04 18 00 	cp.b	r4,r6
80003822:	c1 50       	breq	8000384c <refresh_mono+0x3d0>
							if((w.wp[pattern].cv_values[edit_cv_value] >> 8) >= i1)
80003824:	e0 66 0b 04 	mov	r6,2820
80003828:	ec 02 04 16 	ld.sh	r6,r6[r2<<0x1]
8000382c:	e1 d6 c1 08 	bfextu	r0,r6,0x8,0x8
80003830:	f4 00 19 00 	cp.h	r0,r10
								monomeLedBuffer[80+i1] = 11;
80003834:	c0 23       	brcs	80003838 <refresh_mono+0x3bc>
							else
								monomeLedBuffer[80+i1] = 0;
80003836:	30 b8       	mov	r8,11

							if(((w.wp[pattern].cv_values[edit_cv_value] >> 4) & 0xf) >= i1)
80003838:	b8 88       	st.b	r12[0x0],r8
8000383a:	ed d6 c0 84 	bfextu	r6,r6,0x4,0x4
8000383e:	14 36       	cp.w	r6,r10
								monomeLedBuffer[96+i1] = 11;
80003840:	c0 35       	brlt	80003846 <refresh_mono+0x3ca>
80003842:	30 b8       	mov	r8,11
							else
								monomeLedBuffer[96+i1] = 0;
80003844:	c0 58       	rjmp	8000384e <refresh_mono+0x3d2>
80003846:	30 08       	mov	r8,0
80003848:	c0 38       	rjmp	8000384e <refresh_mono+0x3d2>
8000384a:	d7 03       	nop
8000384c:	b8 88       	st.b	r12[0x0],r8
8000384e:	ae 88       	st.b	r7[0x0],r8
80003850:	e0 68 0b 04 	mov	r8,2820
80003854:	f0 01 05 18 	ld.uh	r8,r8[r1<<0x1]
80003858:	f0 0a 08 48 	asr	r8,r8,r10
8000385c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003860:	c0 20       	breq	80003864 <refresh_mono+0x3e8>
80003862:	30 b8       	mov	r8,11
						}
						else {
							monomeLedBuffer[80+i1] = 0;
80003864:	bc 88       	st.b	lr[0x0],r8
							monomeLedBuffer[96+i1] = 0;
80003866:	2f fa       	sub	r10,-1
						}

						// show steps
						if(w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] & (1<<i1)) monomeLedBuffer[112+i1] = 11;
80003868:	2f fe       	sub	lr,-1
8000386a:	2f f7       	sub	r7,-1
8000386c:	2f fc       	sub	r12,-1
8000386e:	2f fb       	sub	r11,-1
80003870:	e6 0a 18 00 	cp.b	r10,r3
80003874:	cc 83       	brcs	80003804 <refresh_mono+0x388>
80003876:	e0 6a 1b 18 	mov	r10,6936
						else monomeLedBuffer[112+i1] = 0;
8000387a:	30 b8       	mov	r8,11
8000387c:	f4 05 00 05 	add	r5,r10,r5
80003880:	eb 68 00 40 	st.b	r5[64],r8
80003884:	e0 6b 1a 94 	mov	r11,6804
				}
			}
			// MAP
			else {
				if(!scale_select) {
					for(i1=0;i1<SIZE;i1++) {
80003888:	f6 09 07 09 	ld.ub	r9,r11[r9]
						if(w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] & (1<<i1)) monomeLedBuffer[112+i1] = 11;
						else monomeLedBuffer[112+i1] = 0;
					}

					// show edit position
					monomeLedBuffer[64+edit_cv_step] = 11;
8000388c:	12 0a       	add	r10,r9
8000388e:	f5 68 00 70 	st.b	r10[112],r8
80003892:	cd d8       	rjmp	80003a4c <refresh_mono+0x5d0>
80003894:	17 89       	ld.ub	r9,r11[0x0]
80003896:	f4 09 18 00 	cp.b	r9,r10
					// show playing note
					monomeLedBuffer[112+cv_chosen[edit_cv_ch]] = 11;
8000389a:	c0 30       	breq	800038a0 <refresh_mono+0x424>
8000389c:	ef 6c ff f0 	st.b	r7[-16],r12
800038a0:	ae 8a       	st.b	r7[0x0],r10
800038a2:	ef 6a 00 10 	st.b	r7[16],r10
				}
				else {
					for(i1=0;i1<SIZE;i1++) {
						// probs
						if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 11;
800038a6:	ef 6a 00 20 	st.b	r7[32],r10
800038aa:	ef 6a 00 30 	st.b	r7[48],r10
800038ae:	2f fb       	sub	r11,-1
800038b0:	2f f7       	sub	r7,-1

						monomeLedBuffer[64+i1] = 0;						
800038b2:	10 37       	cp.w	r7,r8
						monomeLedBuffer[80+i1] = 0;						
800038b4:	cf 01       	brne	80003894 <refresh_mono+0x418>
800038b6:	30 b9       	mov	r9,11
						monomeLedBuffer[96+i1] = 0;						
800038b8:	e0 68 1b 18 	mov	r8,6936
						monomeLedBuffer[112+i1] = 0;
800038bc:	f1 69 00 70 	st.b	r8[112],r9
800038c0:	cc 68       	rjmp	80003a4c <refresh_mono+0x5d0>
800038c2:	f2 0a 18 00 	cp.b	r10,r9
					monomeLedBuffer[64+edit_cv_step] = 11;
					// show playing note
					monomeLedBuffer[112+cv_chosen[edit_cv_ch]] = 11;
				}
				else {
					for(i1=0;i1<SIZE;i1++) {
800038c6:	e0 81 00 c3 	brne	80003a4c <refresh_mono+0x5d0>
						monomeLedBuffer[80+i1] = 0;						
						monomeLedBuffer[96+i1] = 0;						
						monomeLedBuffer[112+i1] = 0;
					}

					monomeLedBuffer[112] = 11;
800038ca:	e0 69 0a ec 	mov	r9,2796
800038ce:	13 85       	ld.ub	r5,r9[0x0]
800038d0:	e0 69 1a b3 	mov	r9,6835
				}

			}
		}
		else if(edit_prob == 1) {
800038d4:	13 8e       	ld.ub	lr,r9[0x0]
800038d6:	f0 09 15 04 	lsl	r9,r8,0x4
			for(i1=0;i1<SIZE;i1++) {
800038da:	f2 08 01 08 	sub	r8,r9,r8
800038de:	e0 69 0b 04 	mov	r9,2820
800038e2:	10 0e       	add	lr,r8
800038e4:	0e 94       	mov	r4,r7
800038e6:	2f 3e       	sub	lr,-13
800038e8:	ee c8 ff d0 	sub	r8,r7,-48
800038ec:	a5 6e       	lsl	lr,0x4
					monomeLedBuffer[48+i1] = 0;
					monomeLedBuffer[112+i1] = 11;
				}
				else if(w.wp[pattern].cv_probs[edit_cv_ch][i1]) {
					monomeLedBuffer[48+i1] = 11;
					monomeLedBuffer[64+16*(3-(w.wp[pattern].cv_probs[edit_cv_ch][i1]>>6))+i1] = 11;
800038ee:	29 07       	sub	r7,-112
				}

			}
		}
		else if(edit_prob == 1) {
			for(i1=0;i1<SIZE;i1++) {
800038f0:	12 0e       	add	lr,r9
800038f2:	3f f6       	mov	r6,-1
800038f4:	30 09       	mov	r9,0
800038f6:	12 9a       	mov	r10,r9
800038f8:	c1 f8       	rjmp	80003936 <refresh_mono+0x4ba>
800038fa:	f1 6a 00 10 	st.b	r8[16],r10
800038fe:	f1 6a 00 20 	st.b	r8[32],r10
				monomeLedBuffer[64+i1] = 0;
80003902:	f1 6a 00 30 	st.b	r8[48],r10
80003906:	ae 8a       	st.b	r7[0x0],r10
				monomeLedBuffer[80+i1] = 0;
80003908:	1d 8b       	ld.ub	r11,lr[0x0]
8000390a:	ec 0b 18 00 	cp.b	r11,r6
				monomeLedBuffer[96+i1] = 0;
8000390e:	c0 31       	brne	80003914 <refresh_mono+0x498>
				monomeLedBuffer[112+i1] = 0;
80003910:	b0 8c       	st.b	r8[0x0],r12

				if(w.wp[pattern].cv_probs[edit_cv_ch][i1] == 255)
80003912:	c0 e8       	rjmp	8000392e <refresh_mono+0x4b2>
80003914:	58 0b       	cp.w	r11,0
80003916:	c0 41       	brne	8000391e <refresh_mono+0x4a2>
80003918:	b0 8b       	st.b	r8[0x0],r11
					monomeLedBuffer[48+i1] = 11;
8000391a:	ae 8c       	st.b	r7[0x0],r12
8000391c:	c0 98       	rjmp	8000392e <refresh_mono+0x4b2>
				else if(w.wp[pattern].cv_probs[edit_cv_ch][i1] == 0) {
8000391e:	b0 8c       	st.b	r8[0x0],r12
80003920:	a7 8b       	lsr	r11,0x6
					monomeLedBuffer[48+i1] = 0;
80003922:	f6 0b 11 07 	rsub	r11,r11,7
					monomeLedBuffer[112+i1] = 11;
80003926:	a5 6b       	lsl	r11,0x4
				}
				else if(w.wp[pattern].cv_probs[edit_cv_ch][i1]) {
					monomeLedBuffer[48+i1] = 11;
80003928:	12 0b       	add	r11,r9
					monomeLedBuffer[64+16*(3-(w.wp[pattern].cv_probs[edit_cv_ch][i1]>>6))+i1] = 11;
8000392a:	e8 0b 0b 0c 	st.b	r4[r11],r12
8000392e:	2f f9       	sub	r9,-1
80003930:	2f f8       	sub	r8,-1
80003932:	2f f7       	sub	r7,-1
80003934:	2f fe       	sub	lr,-1
80003936:	ea 09 18 00 	cp.b	r9,r5
8000393a:	ce 03       	brcs	800038fa <refresh_mono+0x47e>
8000393c:	c8 88       	rjmp	80003a4c <refresh_mono+0x5d0>
8000393e:	58 29       	cp.w	r9,2
				}

			}
		}
		else if(edit_prob == 1) {
			for(i1=0;i1<SIZE;i1++) {
80003940:	e0 81 00 86 	brne	80003a4c <refresh_mono+0x5d0>
80003944:	e0 6a 0b 04 	mov	r10,2820
		}

	}

	// series
	else if(edit_mode == mSeries) {
80003948:	e0 68 0a ec 	mov	r8,2796
8000394c:	f5 3b 0f 80 	ld.ub	r11,r10[3968]
		for(i1 = 0;i1<6;i1++) {
			for(i2=0;i2<SIZE;i2++) {
80003950:	e0 69 0a ff 	mov	r9,2815
				// start/end bars, clear
				if((scroll || key_alt) && (i1+scroll_pos == w.series_start || i1+scroll_pos == w.series_end)) monomeLedBuffer[32+i1*16+i2] = 11;
80003954:	13 89       	ld.ub	r9,r9[0x0]
80003956:	2e 09       	sub	r9,-32
80003958:	11 80       	ld.ub	r0,r8[0x0]
8000395a:	f2 07 00 07 	add	r7,r9,r7
8000395e:	e0 68 1a bf 	mov	r8,6847
80003962:	50 3b       	stdsp	sp[0xc],r11
80003964:	11 88       	ld.ub	r8,r8[0x0]
80003966:	30 09       	mov	r9,0
80003968:	f0 ce f8 80 	sub	lr,r8,-1920
8000396c:	32 0b       	mov	r11,32
8000396e:	f4 0e 00 1e 	add	lr,r10,lr<<0x1
80003972:	f5 3a 0f 81 	ld.ub	r10,r10[3969]
80003976:	50 2a       	stdsp	sp[0x8],r10
80003978:	c4 08       	rjmp	800039f8 <refresh_mono+0x57c>
8000397a:	58 05       	cp.w	r5,0
8000397c:	c0 31       	brne	80003982 <refresh_mono+0x506>
8000397e:	58 06       	cp.w	r6,0
80003980:	c0 a0       	breq	80003994 <refresh_mono+0x518>
80003982:	40 49       	lddsp	r9,sp[0x10]
80003984:	40 38       	lddsp	r8,sp[0xc]
80003986:	10 39       	cp.w	r9,r8
80003988:	c0 40       	breq	80003990 <refresh_mono+0x514>
8000398a:	40 28       	lddsp	r8,sp[0x8]
8000398c:	10 39       	cp.w	r9,r8
8000398e:	c0 31       	brne	80003994 <refresh_mono+0x518>
80003990:	a8 8c       	st.b	r4[0x0],r12
80003992:	c0 38       	rjmp	80003998 <refresh_mono+0x51c>
80003994:	30 09       	mov	r9,0
80003996:	a6 89       	st.b	r3[0x0],r9
80003998:	2f f2       	sub	r2,-1
8000399a:	2f f4       	sub	r4,-1
8000399c:	5c 52       	castu.b	r2
8000399e:	2f f3       	sub	r3,-1
800039a0:	e0 02 18 00 	cp.b	r2,r0
800039a4:	ce b3       	brcs	8000397a <refresh_mono+0x4fe>
800039a6:	40 09       	lddsp	r9,sp[0x0]
800039a8:	40 18       	lddsp	r8,sp[0x4]
800039aa:	58 05       	cp.w	r5,0
800039ac:	c0 31       	brne	800039b2 <refresh_mono+0x536>
800039ae:	58 06       	cp.w	r6,0
800039b0:	c0 f0       	breq	800039ce <refresh_mono+0x552>
800039b2:	f2 08 00 04 	add	r4,r9,r8
				else monomeLedBuffer[32+i1*16+i2] = 0;
800039b6:	40 33       	lddsp	r3,sp[0xc]
	}

	// series
	else if(edit_mode == mSeries) {
		for(i1 = 0;i1<6;i1++) {
			for(i2=0;i2<SIZE;i2++) {
800039b8:	06 34       	cp.w	r4,r3
800039ba:	e0 8a 00 0a 	brle	800039ce <refresh_mono+0x552>
800039be:	40 22       	lddsp	r2,sp[0x8]
800039c0:	04 34       	cp.w	r4,r2
800039c2:	c0 64       	brge	800039ce <refresh_mono+0x552>
800039c4:	e0 64 1b 18 	mov	r4,6936
800039c8:	e8 0b 0b 0c 	st.b	r4[r11],r12

			// scroll position helper
			// monomeLedBuffer[32+i1*16+((scroll_pos+i1)/(64/SIZE))] = 4;
			
			// sidebar selection indicators
			if((scroll || key_alt) && i1+scroll_pos > w.series_start && i1+scroll_pos < w.series_end) {
800039cc:	ae 8c       	st.b	r7[0x0],r12
800039ce:	30 04       	mov	r4,0
800039d0:	c0 a8       	rjmp	800039e4 <refresh_mono+0x568>
800039d2:	9c 83       	ld.uh	r3,lr[0x0]
800039d4:	e6 04 08 43 	asr	r3,r3,r4
800039d8:	ed b3 00 00 	bld	r3,0x0
800039dc:	c0 21       	brne	800039e0 <refresh_mono+0x564>
800039de:	b4 8c       	st.b	r10[0x0],r12
800039e0:	2f f4       	sub	r4,-1
800039e2:	2f fa       	sub	r10,-1
				monomeLedBuffer[32+i1*16] = 11;
800039e4:	08 93       	mov	r3,r4
800039e6:	e0 04 18 00 	cp.b	r4,r0
				monomeLedBuffer[32+i1*16+LENGTH] = 11;
800039ea:	cf 43       	brcs	800039d2 <refresh_mono+0x556>
800039ec:	2f f9       	sub	r9,-1
800039ee:	2f 0b       	sub	r11,-16
			}

			for(i2=0;i2<SIZE;i2++) {
				// show possible states
				if((w.series_list[i1+scroll_pos] >> i2) & 1)
800039f0:	2f ee       	sub	lr,-2
800039f2:	2f 07       	sub	r7,-16
800039f4:	58 69       	cp.w	r9,6
800039f6:	c1 00       	breq	80003a16 <refresh_mono+0x59a>
800039f8:	e0 62 1b 18 	mov	r2,6936
					monomeLedBuffer[32+(i1*16)+i2] = 11;
800039fc:	30 04       	mov	r4,0
800039fe:	f6 02 00 0a 	add	r10,r11,r2
			if((scroll || key_alt) && i1+scroll_pos > w.series_start && i1+scroll_pos < w.series_end) {
				monomeLedBuffer[32+i1*16] = 11;
				monomeLedBuffer[32+i1*16+LENGTH] = 11;
			}

			for(i2=0;i2<SIZE;i2++) {
80003a02:	50 14       	stdsp	sp[0x4],r4
80003a04:	f2 08 00 02 	add	r2,r9,r8
80003a08:	14 93       	mov	r3,r10
80003a0a:	50 42       	stdsp	sp[0x10],r2
80003a0c:	14 94       	mov	r4,r10
80003a0e:	40 12       	lddsp	r2,sp[0x4]
80003a10:	50 09       	stdsp	sp[0x0],r9

	}

	// series
	else if(edit_mode == mSeries) {
		for(i1 = 0;i1<6;i1++) {
80003a12:	50 18       	stdsp	sp[0x4],r8
80003a14:	cc 6b       	rjmp	800039a0 <refresh_mono+0x524>
80003a16:	e0 69 0a fd 	mov	r9,2813
80003a1a:	13 89       	ld.ub	r9,r9[0x0]
80003a1c:	f0 09 18 00 	cp.b	r9,r8
			for(i2=0;i2<SIZE;i2++) {
				// start/end bars, clear
				if((scroll || key_alt) && (i1+scroll_pos == w.series_start || i1+scroll_pos == w.series_end)) monomeLedBuffer[32+i1*16+i2] = 11;
80003a20:	c1 63       	brcs	80003a4c <refresh_mono+0x5d0>
80003a22:	f0 ca ff fb 	sub	r10,r8,-5
80003a26:	12 3a       	cp.w	r10,r9

	}

	// series
	else if(edit_mode == mSeries) {
		for(i1 = 0;i1<6;i1++) {
80003a28:	c1 25       	brlt	80003a4c <refresh_mono+0x5d0>
80003a2a:	e3 d1 c0 01 	bfextu	r1,r1,0x0,0x1
80003a2e:	c0 f0       	breq	80003a4c <refresh_mono+0x5d0>
80003a30:	2f e9       	sub	r9,-2
			}

		}

		// highlight playhead
		if(series_pos >= scroll_pos && series_pos < scroll_pos+6 && (pos & 1)) {
80003a32:	f2 08 01 08 	sub	r8,r9,r8
80003a36:	e0 69 1a cc 	mov	r9,6860
80003a3a:	13 8a       	ld.ub	r10,r9[0x0]
80003a3c:	e0 69 1b 18 	mov	r9,6936
80003a40:	a5 68       	lsl	r8,0x4
80003a42:	14 08       	add	r8,r10
80003a44:	f2 08 00 08 	add	r8,r9,r8
80003a48:	30 09       	mov	r9,0
			monomeLedBuffer[32+(series_pos-scroll_pos)*16+series_playing] = 0;
80003a4a:	b0 89       	st.b	r8[0x0],r9
80003a4c:	30 0c       	mov	r12,0
80003a4e:	e0 a0 0e 3d 	rcall	800056c8 <monome_set_quadrant_flag>
80003a52:	30 1c       	mov	r12,1
80003a54:	e0 a0 0e 3a 	rcall	800056c8 <monome_set_quadrant_flag>
80003a58:	2f bd       	sub	sp,-20
80003a5a:	d8 32       	popm	r0-r7,pc

80003a5c <refresh>:
80003a5c:	d4 31       	pushm	r0-r7,lr
80003a5e:	20 7d       	sub	sp,28
80003a60:	e0 69 1b 18 	mov	r9,6936
		}
	}

	monome_set_quadrant_flag(0);
80003a64:	30 0a       	mov	r10,0
80003a66:	f2 cb ff f0 	sub	r11,r9,-16
	monome_set_quadrant_flag(1);
80003a6a:	30 48       	mov	r8,4
80003a6c:	b2 8a       	st.b	r9[0x0],r10
}
80003a6e:	f3 6a 00 10 	st.b	r9[16],r10
80003a72:	f3 68 00 20 	st.b	r9[32],r8
80003a76:	f3 6a 00 30 	st.b	r9[48],r10
80003a7a:	2f f9       	sub	r9,-1
80003a7c:	16 39       	cp.w	r9,r11
80003a7e:	cf 71       	brne	80003a6c <refresh+0x10>
80003a80:	e0 69 1a c4 	mov	r9,6852
		monomeLedBuffer[32+i1] = 4;
		monomeLedBuffer[48+i1] = 0;
	}

	// dim mode
	if(edit_mode == mTrig) {
80003a84:	72 09       	ld.w	r9,r9[0x0]
		monomeLedBuffer[0] = 4;
80003a86:	58 09       	cp.w	r9,0
		monomeLedBuffer[1] = 4;
		monomeLedBuffer[2] = 4;
		monomeLedBuffer[3] = 4;
80003a88:	c0 81       	brne	80003a98 <refresh+0x3c>
		monomeLedBuffer[48+i1] = 0;
	}

	// dim mode
	if(edit_mode == mTrig) {
		monomeLedBuffer[0] = 4;
80003a8a:	e0 6a 1b 18 	mov	r10,6936
		monomeLedBuffer[1] = 4;
		monomeLedBuffer[2] = 4;
80003a8e:	b4 b8       	st.b	r10[0x3],r8
80003a90:	b4 88       	st.b	r10[0x0],r8
		monomeLedBuffer[3] = 4;
	}
	else if(edit_mode == mMap) {
80003a92:	b4 98       	st.b	r10[0x1],r8
80003a94:	b4 a8       	st.b	r10[0x2],r8
		if(SIZE==16) {
80003a96:	c2 98       	rjmp	80003ae8 <refresh+0x8c>
80003a98:	58 19       	cp.w	r9,1
80003a9a:	c1 b1       	brne	80003ad0 <refresh+0x74>
80003a9c:	e0 6a 0a ec 	mov	r10,2796
80003aa0:	e0 6b 1b 18 	mov	r11,6936
80003aa4:	15 8e       	ld.ub	lr,r10[0x0]
			monomeLedBuffer[4+(edit_cv_ch*4)] = 4;
80003aa6:	31 0c       	mov	r12,16
80003aa8:	e0 6a 1a b3 	mov	r10,6835
80003aac:	f8 0e 18 00 	cp.b	lr,r12
			monomeLedBuffer[5+(edit_cv_ch*4)] = 4;
80003ab0:	c0 c1       	brne	80003ac8 <refresh+0x6c>
80003ab2:	15 8a       	ld.ub	r10,r10[0x0]
			monomeLedBuffer[6+(edit_cv_ch*4)] = 4;
			monomeLedBuffer[7+(edit_cv_ch*4)] = 4;
80003ab4:	f4 cc ff ff 	sub	r12,r10,-1
	}
	else if(edit_mode == mMap) {
		if(SIZE==16) {
			monomeLedBuffer[4+(edit_cv_ch*4)] = 4;
			monomeLedBuffer[5+(edit_cv_ch*4)] = 4;
			monomeLedBuffer[6+(edit_cv_ch*4)] = 4;
80003ab8:	f6 0c 0b 28 	st.b	r11[r12<<0x2],r8
			monomeLedBuffer[7+(edit_cv_ch*4)] = 4;
		}
		else
			monomeLedBuffer[4+edit_cv_ch] = 4;
80003abc:	f6 0a 00 2b 	add	r11,r11,r10<<0x2
80003ac0:	b6 f8       	st.b	r11[0x7],r8
80003ac2:	b6 d8       	st.b	r11[0x5],r8
	}
	else if(edit_mode == mSeries) {
80003ac4:	b6 e8       	st.b	r11[0x6],r8
80003ac6:	c1 18       	rjmp	80003ae8 <refresh+0x8c>
		monomeLedBuffer[LENGTH-1] = 7;
80003ac8:	15 8a       	ld.ub	r10,r10[0x0]
80003aca:	14 0b       	add	r11,r10
80003acc:	b6 c8       	st.b	r11[0x4],r8
80003ace:	c0 d8       	rjmp	80003ae8 <refresh+0x8c>
80003ad0:	58 29       	cp.w	r9,2
80003ad2:	c0 b1       	brne	80003ae8 <refresh+0x8c>
80003ad4:	e0 6a 1b 18 	mov	r10,6936
	}

	// alt
	monomeLedBuffer[LENGTH] = 4;
80003ad8:	e0 68 0a ff 	mov	r8,2815
80003adc:	11 88       	ld.ub	r8,r8[0x0]
80003ade:	f4 08 00 08 	add	r8,r10,r8
80003ae2:	30 7a       	mov	r10,7
	if(key_alt) monomeLedBuffer[LENGTH] = 11;
80003ae4:	f1 6a ff ff 	st.b	r8[-1],r10
80003ae8:	e0 68 0a ff 	mov	r8,2815
80003aec:	30 4a       	mov	r10,4
80003aee:	11 84       	ld.ub	r4,r8[0x0]
80003af0:	e0 68 1b 18 	mov	r8,6936
80003af4:	f0 04 0b 0a 	st.b	r8[r4],r10

	// show mutes or on steps
	if(scroll) {
80003af8:	e0 6a 1a 99 	mov	r10,6809
80003afc:	15 8b       	ld.ub	r11,r10[0x0]
80003afe:	30 0a       	mov	r10,0
80003b00:	f4 0b 18 00 	cp.b	r11,r10
		if(w.tr_mute[0]) monomeLedBuffer[0] = 11;
80003b04:	c0 40       	breq	80003b0c <refresh+0xb0>
80003b06:	30 ba       	mov	r10,11
80003b08:	f0 04 0b 0a 	st.b	r8[r4],r10
80003b0c:	e0 68 1a b1 	mov	r8,6833
80003b10:	11 8b       	ld.ub	r11,r8[0x0]
80003b12:	30 08       	mov	r8,0
		if(w.tr_mute[1]) monomeLedBuffer[1] = 11;
80003b14:	f0 0b 18 00 	cp.b	r11,r8
80003b18:	c3 20       	breq	80003b7c <refresh+0x120>
80003b1a:	e0 6a 0b 04 	mov	r10,2820
80003b1e:	f5 3a 0f 82 	ld.ub	r10,r10[3970]
80003b22:	f0 0a 18 00 	cp.b	r10,r8
80003b26:	c0 50       	breq	80003b30 <refresh+0xd4>
		if(w.tr_mute[2]) monomeLedBuffer[2] = 11;
80003b28:	30 ba       	mov	r10,11
80003b2a:	e0 68 1b 18 	mov	r8,6936
80003b2e:	b0 8a       	st.b	r8[0x0],r10
80003b30:	e0 68 0b 04 	mov	r8,2820
80003b34:	f1 3a 0f 83 	ld.ub	r10,r8[3971]
80003b38:	30 08       	mov	r8,0
80003b3a:	f0 0a 18 00 	cp.b	r10,r8
		if(w.tr_mute[3]) monomeLedBuffer[3] = 11;
80003b3e:	c0 50       	breq	80003b48 <refresh+0xec>
80003b40:	30 ba       	mov	r10,11
80003b42:	e0 68 1b 18 	mov	r8,6936
80003b46:	b0 9a       	st.b	r8[0x1],r10
80003b48:	e0 68 0b 04 	mov	r8,2820
80003b4c:	f1 3a 0f 84 	ld.ub	r10,r8[3972]
80003b50:	30 08       	mov	r8,0
80003b52:	f0 0a 18 00 	cp.b	r10,r8
80003b56:	c0 50       	breq	80003b60 <refresh+0x104>
80003b58:	30 ba       	mov	r10,11
80003b5a:	e0 68 1b 18 	mov	r8,6936
80003b5e:	b0 aa       	st.b	r8[0x2],r10
80003b60:	e0 68 0b 04 	mov	r8,2820
80003b64:	f1 3a 0f 85 	ld.ub	r10,r8[3973]
80003b68:	30 08       	mov	r8,0
80003b6a:	f0 0a 18 00 	cp.b	r10,r8
80003b6e:	e0 80 00 8d 	breq	80003c88 <refresh+0x22c>
80003b72:	30 ba       	mov	r10,11
	}
	else if(triggered) {
80003b74:	e0 68 1b 18 	mov	r8,6936
80003b78:	b0 ba       	st.b	r8[0x3],r10
80003b7a:	c8 78       	rjmp	80003c88 <refresh+0x22c>
80003b7c:	e0 68 1a b5 	mov	r8,6837
		if(triggered & 0x1 && w.tr_mute[0]) monomeLedBuffer[0] = 11 - 4 * w.wp[pattern].tr_mode;
80003b80:	11 88       	ld.ub	r8,r8[0x0]
80003b82:	58 08       	cp.w	r8,0
80003b84:	e0 80 03 f2 	breq	80004368 <refresh+0x90c>
80003b88:	5c 58       	castu.b	r8
80003b8a:	ed b8 00 00 	bld	r8,0x0
80003b8e:	c1 c1       	brne	80003bc6 <refresh+0x16a>
80003b90:	e0 6a 0b 04 	mov	r10,2820
80003b94:	f5 3c 0f 82 	ld.ub	r12,r10[3970]
80003b98:	f6 0c 18 00 	cp.b	r12,r11
80003b9c:	c1 50       	breq	80003bc6 <refresh+0x16a>
80003b9e:	e0 6b 1a 97 	mov	r11,6807
80003ba2:	17 8b       	ld.ub	r11,r11[0x0]
80003ba4:	f6 0c 15 04 	lsl	r12,r11,0x4
80003ba8:	f8 0b 01 0b 	sub	r11,r12,r11
80003bac:	a1 7b       	lsl	r11,0x1
80003bae:	2f fb       	sub	r11,-1
80003bb0:	f4 0b 07 3a 	ld.ub	r10,r10[r11<<0x3]
80003bb4:	f4 0b 15 06 	lsl	r11,r10,0x6
		if(triggered & 0x2 && w.tr_mute[1]) monomeLedBuffer[1] = 11 - 4 * w.wp[pattern].tr_mode;
80003bb8:	f6 0a 01 0a 	sub	r10,r11,r10
80003bbc:	e0 6b 1b 18 	mov	r11,6936
80003bc0:	a3 6a       	lsl	r10,0x2
80003bc2:	2f 5a       	sub	r10,-11
80003bc4:	b6 8a       	st.b	r11[0x0],r10
80003bc6:	ed b8 00 01 	bld	r8,0x1
80003bca:	c1 d1       	brne	80003c04 <refresh+0x1a8>
80003bcc:	e0 6a 0b 04 	mov	r10,2820
80003bd0:	30 0b       	mov	r11,0
80003bd2:	f5 3c 0f 83 	ld.ub	r12,r10[3971]
80003bd6:	f6 0c 18 00 	cp.b	r12,r11
80003bda:	c1 50       	breq	80003c04 <refresh+0x1a8>
80003bdc:	e0 6b 1a 97 	mov	r11,6807
80003be0:	17 8b       	ld.ub	r11,r11[0x0]
80003be2:	f6 0c 15 04 	lsl	r12,r11,0x4
80003be6:	f8 0b 01 0b 	sub	r11,r12,r11
80003bea:	a1 7b       	lsl	r11,0x1
80003bec:	2f fb       	sub	r11,-1
		if(triggered & 0x4 && w.tr_mute[2]) monomeLedBuffer[2] = 11 - 4 * w.wp[pattern].tr_mode;
80003bee:	f4 0b 07 3a 	ld.ub	r10,r10[r11<<0x3]
80003bf2:	f4 0b 15 06 	lsl	r11,r10,0x6
80003bf6:	f6 0a 01 0a 	sub	r10,r11,r10
80003bfa:	e0 6b 1b 18 	mov	r11,6936
80003bfe:	a3 6a       	lsl	r10,0x2
80003c00:	2f 5a       	sub	r10,-11
80003c02:	b6 9a       	st.b	r11[0x1],r10
80003c04:	ed b8 00 02 	bld	r8,0x2
80003c08:	c1 d1       	brne	80003c42 <refresh+0x1e6>
80003c0a:	e0 6a 0b 04 	mov	r10,2820
80003c0e:	30 0b       	mov	r11,0
80003c10:	f5 3c 0f 84 	ld.ub	r12,r10[3972]
80003c14:	f6 0c 18 00 	cp.b	r12,r11
80003c18:	c1 50       	breq	80003c42 <refresh+0x1e6>
80003c1a:	e0 6b 1a 97 	mov	r11,6807
80003c1e:	17 8b       	ld.ub	r11,r11[0x0]
80003c20:	f6 0c 15 04 	lsl	r12,r11,0x4
80003c24:	f8 0b 01 0b 	sub	r11,r12,r11
		if(triggered & 0x8 && w.tr_mute[3]) monomeLedBuffer[3] = 11 - 4 * w.wp[pattern].tr_mode;
80003c28:	a1 7b       	lsl	r11,0x1
80003c2a:	2f fb       	sub	r11,-1
80003c2c:	f4 0b 07 3a 	ld.ub	r10,r10[r11<<0x3]
80003c30:	f4 0b 15 06 	lsl	r11,r10,0x6
80003c34:	f6 0a 01 0a 	sub	r10,r11,r10
80003c38:	e0 6b 1b 18 	mov	r11,6936
80003c3c:	a3 6a       	lsl	r10,0x2
80003c3e:	2f 5a       	sub	r10,-11
80003c40:	b6 aa       	st.b	r11[0x2],r10
80003c42:	ed b8 00 03 	bld	r8,0x3
80003c46:	e0 81 03 91 	brne	80004368 <refresh+0x90c>
80003c4a:	e0 68 0b 04 	mov	r8,2820
80003c4e:	30 0a       	mov	r10,0
80003c50:	f1 3b 0f 85 	ld.ub	r11,r8[3973]
80003c54:	f4 0b 18 00 	cp.b	r11,r10
80003c58:	e0 80 03 88 	breq	80004368 <refresh+0x90c>
80003c5c:	e0 6a 1a 97 	mov	r10,6807
80003c60:	15 8a       	ld.ub	r10,r10[0x0]
80003c62:	f4 0b 15 04 	lsl	r11,r10,0x4
	}

	// cv indication
	if(scroll) {
		if(SIZE==16) {
80003c66:	f6 0a 01 0a 	sub	r10,r11,r10
80003c6a:	a1 7a       	lsl	r10,0x1
80003c6c:	2f fa       	sub	r10,-1
80003c6e:	f0 0a 07 38 	ld.ub	r8,r8[r10<<0x3]
80003c72:	f0 0a 15 06 	lsl	r10,r8,0x6
			if(w.cv_mute[0]) {
80003c76:	f4 08 01 08 	sub	r8,r10,r8
80003c7a:	e0 6a 1b 18 	mov	r10,6936
80003c7e:	a3 68       	lsl	r8,0x2
				monomeLedBuffer[4] = 11;
80003c80:	2f 58       	sub	r8,-11
80003c82:	b4 b8       	st.b	r10[0x3],r8
				monomeLedBuffer[5] = 11;
				monomeLedBuffer[6] = 11;
				monomeLedBuffer[7] = 11;
80003c84:	e0 8f 03 72 	bral	80004368 <refresh+0x90c>
	// cv indication
	if(scroll) {
		if(SIZE==16) {
			if(w.cv_mute[0]) {
				monomeLedBuffer[4] = 11;
				monomeLedBuffer[5] = 11;
80003c88:	e0 68 0a ec 	mov	r8,2796
				monomeLedBuffer[6] = 11;
				monomeLedBuffer[7] = 11;
			}
			if(w.cv_mute[1]) {
80003c8c:	31 0a       	mov	r10,16
80003c8e:	11 8b       	ld.ub	r11,r8[0x0]
80003c90:	e0 68 0b 04 	mov	r8,2820
80003c94:	f4 0b 18 00 	cp.b	r11,r10
80003c98:	c2 21       	brne	80003cdc <refresh+0x280>
				monomeLedBuffer[8] = 11;
80003c9a:	f1 3a 0f 86 	ld.ub	r10,r8[3974]
				monomeLedBuffer[9] = 11;
				monomeLedBuffer[10] = 11;
				monomeLedBuffer[11] = 11;
80003c9e:	30 08       	mov	r8,0
80003ca0:	f0 0a 18 00 	cp.b	r10,r8
				monomeLedBuffer[5] = 11;
				monomeLedBuffer[6] = 11;
				monomeLedBuffer[7] = 11;
			}
			if(w.cv_mute[1]) {
				monomeLedBuffer[8] = 11;
80003ca4:	c0 80       	breq	80003cb4 <refresh+0x258>
				monomeLedBuffer[9] = 11;
80003ca6:	e0 68 1b 18 	mov	r8,6936
				monomeLedBuffer[10] = 11;
80003caa:	30 ba       	mov	r10,11
80003cac:	b0 fa       	st.b	r8[0x7],r10
80003cae:	b0 ca       	st.b	r8[0x4],r10
80003cb0:	b0 da       	st.b	r8[0x5],r10
80003cb2:	b0 ea       	st.b	r8[0x6],r10
80003cb4:	e0 68 0b 04 	mov	r8,2820
80003cb8:	f1 3a 0f 87 	ld.ub	r10,r8[3975]
80003cbc:	30 08       	mov	r8,0
80003cbe:	f0 0a 18 00 	cp.b	r10,r8
80003cc2:	c3 50       	breq	80003d2c <refresh+0x2d0>
				monomeLedBuffer[11] = 11;
			}
		}
		else {
			if(w.cv_mute[0])
80003cc4:	e0 68 1b 18 	mov	r8,6936
80003cc8:	30 ba       	mov	r10,11
80003cca:	f1 6a 00 0b 	st.b	r8[11],r10
80003cce:	f1 6a 00 08 	st.b	r8[8],r10
				monomeLedBuffer[4] = 11;
80003cd2:	f1 6a 00 09 	st.b	r8[9],r10
			if(w.cv_mute[1])
80003cd6:	f1 6a 00 0a 	st.b	r8[10],r10
80003cda:	c2 98       	rjmp	80003d2c <refresh+0x2d0>
80003cdc:	f1 3a 0f 86 	ld.ub	r10,r8[3974]
80003ce0:	30 08       	mov	r8,0
80003ce2:	f0 0a 18 00 	cp.b	r10,r8
				monomeLedBuffer[5] = 11;
80003ce6:	c0 50       	breq	80003cf0 <refresh+0x294>
80003ce8:	30 ba       	mov	r10,11
80003cea:	e0 68 1b 18 	mov	r8,6936
		}

	}
	else if(SIZE==16) {
		monomeLedBuffer[cv0 / 1024 + 4] = 11;
80003cee:	b0 ca       	st.b	r8[0x4],r10
80003cf0:	e0 68 0b 04 	mov	r8,2820
80003cf4:	f1 3a 0f 87 	ld.ub	r10,r8[3975]
80003cf8:	30 08       	mov	r8,0
80003cfa:	f0 0a 18 00 	cp.b	r10,r8
		monomeLedBuffer[cv1 / 1024 + 8] = 11;
80003cfe:	c1 70       	breq	80003d2c <refresh+0x2d0>
80003d00:	30 ba       	mov	r10,11
80003d02:	e0 68 1b 18 	mov	r8,6936
80003d06:	b0 da       	st.b	r8[0x5],r10
	}

	// show pos loop dim
	if(w.wp[pattern].loop_dir) {	
80003d08:	c1 28       	rjmp	80003d2c <refresh+0x2d0>
80003d0a:	e0 6a 1b 18 	mov	r10,6936
80003d0e:	30 b8       	mov	r8,11
80003d10:	e0 6b 1a 92 	mov	r11,6802
80003d14:	96 8b       	ld.uh	r11,r11[0x0]
80003d16:	ab 8b       	lsr	r11,0xa
80003d18:	f4 0b 00 0b 	add	r11,r10,r11
80003d1c:	b6 c8       	st.b	r11[0x4],r8
80003d1e:	e0 6b 1a a6 	mov	r11,6822
		for(i1=0;i1<SIZE;i1++) {
80003d22:	96 8b       	ld.uh	r11,r11[0x0]
80003d24:	ab 8b       	lsr	r11,0xa
80003d26:	16 0a       	add	r10,r11
80003d28:	f5 68 00 08 	st.b	r10[8],r8
			if(w.wp[pattern].loop_dir == 1 && i1 >= w.wp[pattern].loop_start && i1 <= w.wp[pattern].loop_end)
				monomeLedBuffer[16+i1] = 4;
			else if(w.wp[pattern].loop_dir == 2 && (i1 <= w.wp[pattern].loop_end || i1 >= w.wp[pattern].loop_start)) 
80003d2c:	e0 68 1a 97 	mov	r8,6807
				monomeLedBuffer[16+i1] = 4;
80003d30:	11 8c       	ld.ub	r12,r8[0x0]
	}

	// show pos loop dim
	if(w.wp[pattern].loop_dir) {	
		for(i1=0;i1<SIZE;i1++) {
			if(w.wp[pattern].loop_dir == 1 && i1 >= w.wp[pattern].loop_start && i1 <= w.wp[pattern].loop_end)
80003d32:	e0 68 0b 04 	mov	r8,2820
80003d36:	f8 0b 15 04 	lsl	r11,r12,0x4
80003d3a:	18 1b       	sub	r11,r12
80003d3c:	a5 6b       	lsl	r11,0x4
80003d3e:	f0 0b 00 0b 	add	r11,r8,r11
80003d42:	17 be       	ld.ub	lr,r11[0x3]
80003d44:	58 0e       	cp.w	lr,0
80003d46:	c2 c0       	breq	80003d9e <refresh+0x342>
80003d48:	e0 68 0a ec 	mov	r8,2796
				monomeLedBuffer[16+i1] = 4;
			else if(w.wp[pattern].loop_dir == 2 && (i1 <= w.wp[pattern].loop_end || i1 >= w.wp[pattern].loop_start)) 
80003d4c:	e0 6a 1b 18 	mov	r10,6936
80003d50:	11 83       	ld.ub	r3,r8[0x0]
80003d52:	2f 0a       	sub	r10,-16
80003d54:	30 08       	mov	r8,0
80003d56:	30 15       	mov	r5,1
80003d58:	30 26       	mov	r6,2
80003d5a:	30 47       	mov	r7,4
80003d5c:	c1 e8       	rjmp	80003d98 <refresh+0x33c>
80003d5e:	ea 0e 18 00 	cp.b	lr,r5
80003d62:	c0 b1       	brne	80003d78 <refresh+0x31c>
				monomeLedBuffer[16+i1] = 4;
80003d64:	17 82       	ld.ub	r2,r11[0x0]
		monomeLedBuffer[cv1 / 1024 + 8] = 11;
	}

	// show pos loop dim
	if(w.wp[pattern].loop_dir) {	
		for(i1=0;i1<SIZE;i1++) {
80003d66:	f0 02 18 00 	cp.b	r2,r8
80003d6a:	e0 8b 00 14 	brhi	80003d92 <refresh+0x336>
80003d6e:	17 92       	ld.ub	r2,r11[0x1]
80003d70:	f0 02 18 00 	cp.b	r2,r8
				monomeLedBuffer[16+i1] = 4;
		}
	}

	// show position and next cut
	if(cut_pos) monomeLedBuffer[16+next_pos] = 7;
80003d74:	c0 f3       	brcs	80003d92 <refresh+0x336>
80003d76:	c0 d8       	rjmp	80003d90 <refresh+0x334>
80003d78:	ec 0e 18 00 	cp.b	lr,r6
80003d7c:	c0 b1       	brne	80003d92 <refresh+0x336>
80003d7e:	17 92       	ld.ub	r2,r11[0x1]
80003d80:	f0 02 18 00 	cp.b	r2,r8
80003d84:	c0 62       	brcc	80003d90 <refresh+0x334>
80003d86:	17 82       	ld.ub	r2,r11[0x0]
80003d88:	f0 02 18 00 	cp.b	r2,r8
80003d8c:	e0 8b 00 03 	brhi	80003d92 <refresh+0x336>
	monomeLedBuffer[16+pos] = 15;
80003d90:	b4 87       	st.b	r10[0x0],r7
80003d92:	2f f8       	sub	r8,-1
80003d94:	2f fa       	sub	r10,-1
80003d96:	5c 58       	castu.b	r8
80003d98:	e6 08 18 00 	cp.b	r8,r3
80003d9c:	ce 13       	brcs	80003d5e <refresh+0x302>
80003d9e:	e0 68 1a be 	mov	r8,6846

	// show pattern
	monomeLedBuffer[32+pattern] = 11;
80003da2:	11 8a       	ld.ub	r10,r8[0x0]
80003da4:	30 08       	mov	r8,0
80003da6:	f0 0a 18 00 	cp.b	r10,r8
80003daa:	c0 c0       	breq	80003dc2 <refresh+0x366>
	if(pattern != next_pattern) monomeLedBuffer[32+next_pattern] = 7;
80003dac:	e0 6a 1b 18 	mov	r10,6936
80003db0:	e0 68 1a 8f 	mov	r8,6799
80003db4:	f1 28 00 00 	ld.sb	r8,r8[0]
80003db8:	f4 08 00 08 	add	r8,r10,r8
80003dbc:	30 7a       	mov	r10,7

	// show step data
	if(edit_mode == mTrig) {
80003dbe:	f1 6a 00 10 	st.b	r8[16],r10
80003dc2:	e0 6a 1b 18 	mov	r10,6936
		if(edit_prob == 0) {
80003dc6:	30 fe       	mov	lr,15
80003dc8:	e0 68 0a fe 	mov	r8,2814
80003dcc:	f1 28 00 00 	ld.sb	r8,r8[0]
			for(i1=0;i1<SIZE;i1++) {
80003dd0:	f4 08 00 0b 	add	r11,r10,r8
	 			for(i2=0;i2<4;i2++) {
					if((w.wp[pattern].steps[i1] & (1<<i2)) && i1 == pos && (triggered & 1<<i2) && w.tr_mute[i2]) monomeLedBuffer[(i2+4)*16+i1] = 11;
80003dd4:	f7 6e 00 10 	st.b	r11[16],lr
80003dd8:	f4 0c 00 0b 	add	r11,r10,r12
80003ddc:	30 be       	mov	lr,11
80003dde:	f7 6e 00 20 	st.b	r11[32],lr
80003de2:	e0 6b 1a c0 	mov	r11,6848
					else if(w.wp[pattern].steps[i1] & (1<<i2) && (w.wp[pattern].step_choice & 1<<i1)) monomeLedBuffer[(i2+4)*16+i1] = 4;
80003de6:	17 8b       	ld.ub	r11,r11[0x0]
80003de8:	f6 0c 18 00 	cp.b	r12,r11
	// show step data
	if(edit_mode == mTrig) {
		if(edit_prob == 0) {
			for(i1=0;i1<SIZE;i1++) {
	 			for(i2=0;i2<4;i2++) {
					if((w.wp[pattern].steps[i1] & (1<<i2)) && i1 == pos && (triggered & 1<<i2) && w.tr_mute[i2]) monomeLedBuffer[(i2+4)*16+i1] = 11;
80003dec:	c0 50       	breq	80003df6 <refresh+0x39a>
80003dee:	16 0a       	add	r10,r11
80003df0:	30 7b       	mov	r11,7
80003df2:	f5 6b 00 20 	st.b	r10[32],r11
80003df6:	58 09       	cp.w	r9,0
80003df8:	e0 81 00 be 	brne	80003f74 <refresh+0x518>
80003dfc:	e0 6a 1a bd 	mov	r10,6845
80003e00:	15 8a       	ld.ub	r10,r10[0x0]
80003e02:	58 0a       	cp.w	r10,0
80003e04:	c7 81       	brne	80003ef4 <refresh+0x498>
80003e06:	e0 6a 0a ec 	mov	r10,2796
80003e0a:	15 8a       	ld.ub	r10,r10[0x0]
80003e0c:	50 2a       	stdsp	sp[0x8],r10
80003e0e:	e0 6a 1a b5 	mov	r10,6837
80003e12:	f5 2a 00 00 	ld.sb	r10,r10[0]
80003e16:	50 3a       	stdsp	sp[0xc],r10
80003e18:	f8 0a 15 04 	lsl	r10,r12,0x4
80003e1c:	f4 0c 01 0c 	sub	r12,r10,r12
80003e20:	f8 0a 15 02 	lsl	r10,r12,0x2
80003e24:	2f fa       	sub	r10,-1
80003e26:	50 6a       	stdsp	sp[0x18],r10
80003e28:	e0 6a 0b 04 	mov	r10,2820
80003e2c:	e0 6b 1b 18 	mov	r11,6936
80003e30:	a5 6c       	lsl	r12,0x4
80003e32:	16 95       	mov	r5,r11
80003e34:	2e 0c       	sub	r12,-32
80003e36:	14 0c       	add	r12,r10
80003e38:	f0 ca ff c0 	sub	r10,r8,-64
80003e3c:	f6 0a 00 0a 	add	r10,r11,r10
80003e40:	2d 0b       	sub	r11,-48
80003e42:	50 5a       	stdsp	sp[0x14],r10
80003e44:	c3 e8       	rjmp	80003ec0 <refresh+0x464>
80003e46:	d7 03       	nop
80003e48:	40 4b       	lddsp	r11,sp[0x10]
80003e4a:	f6 0a 08 43 	asr	r3,r11,r10
80003e4e:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80003e52:	c1 e0       	breq	80003e8e <refresh+0x432>
80003e54:	10 39       	cp.w	r9,r8
80003e56:	c0 e1       	brne	80003e72 <refresh+0x416>
80003e58:	40 30       	lddsp	r0,sp[0xc]
80003e5a:	e0 0a 08 43 	asr	r3,r0,r10
80003e5e:	ed b3 00 00 	bld	r3,0x0
					else if(w.wp[pattern].steps[i1] & (1<<i2) && (w.wp[pattern].step_choice & 1<<i1)) monomeLedBuffer[(i2+4)*16+i1] = 4;
80003e62:	c0 81       	brne	80003e72 <refresh+0x416>
80003e64:	0d 83       	ld.ub	r3,r6[0x0]
80003e66:	e4 03 18 00 	cp.b	r3,r2
80003e6a:	c0 40       	breq	80003e72 <refresh+0x416>
80003e6c:	30 bb       	mov	r11,11
80003e6e:	bc 8b       	st.b	lr[0x0],r11
80003e70:	c1 48       	rjmp	80003e98 <refresh+0x43c>
80003e72:	40 60       	lddsp	r0,sp[0x18]
80003e74:	e0 6b 0b 04 	mov	r11,2820
80003e78:	f6 00 05 23 	ld.uh	r3,r11[r0<<0x2]
					else if(w.wp[pattern].steps[i1] & (1<<i2)) monomeLedBuffer[(i2+4)*16+i1] = 7;
					else if(i1 == pos) monomeLedBuffer[(i2+4)*16+i1] = 4;
80003e7c:	40 10       	lddsp	r0,sp[0x4]
80003e7e:	e1 e3 00 03 	and	r3,r0,r3
80003e82:	e2 00 17 00 	moveq	r0,r1
					else monomeLedBuffer[(i2+4)*16+i1] = 0;
80003e86:	e8 00 17 10 	movne	r0,r4
80003e8a:	ae 80       	st.b	r7[0x0],r0
80003e8c:	c0 68       	rjmp	80003e98 <refresh+0x43c>

	// show step data
	if(edit_mode == mTrig) {
		if(edit_prob == 0) {
			for(i1=0;i1<SIZE;i1++) {
	 			for(i2=0;i2<4;i2++) {
80003e8e:	10 39       	cp.w	r9,r8
80003e90:	c0 31       	brne	80003e96 <refresh+0x43a>
80003e92:	bc 84       	st.b	lr[0x0],r4
					else if(i1 == pos) monomeLedBuffer[(i2+4)*16+i1] = 4;
					else monomeLedBuffer[(i2+4)*16+i1] = 0;
				}

				// probs
				if(w.wp[pattern].step_probs[i1] == 255) monomeLedBuffer[48+i1] = 11;
80003e94:	c0 28       	rjmp	80003e98 <refresh+0x43c>
80003e96:	ae 83       	st.b	r7[0x0],r3
80003e98:	2f fa       	sub	r10,-1
80003e9a:	2f 0e       	sub	lr,-16
80003e9c:	2f 07       	sub	r7,-16
80003e9e:	2f f6       	sub	r6,-1
80003ea0:	58 4a       	cp.w	r10,4
				else if(w.wp[pattern].step_probs[i1] > 0) monomeLedBuffer[48+i1] = 4;
80003ea2:	cd 31       	brne	80003e48 <refresh+0x3ec>
80003ea4:	40 0b       	lddsp	r11,sp[0x0]
80003ea6:	19 8e       	ld.ub	lr,r12[0x0]
80003ea8:	3f f7       	mov	r7,-1
80003eaa:	ee 0e 18 00 	cp.b	lr,r7
	if(pattern != next_pattern) monomeLedBuffer[32+next_pattern] = 7;

	// show step data
	if(edit_mode == mTrig) {
		if(edit_prob == 0) {
			for(i1=0;i1<SIZE;i1++) {
80003eae:	c0 31       	brne	80003eb4 <refresh+0x458>
80003eb0:	30 ba       	mov	r10,11
80003eb2:	c0 38       	rjmp	80003eb8 <refresh+0x45c>
80003eb4:	58 0e       	cp.w	lr,0
80003eb6:	c0 20       	breq	80003eba <refresh+0x45e>
	 			for(i2=0;i2<4;i2++) {
					if((w.wp[pattern].steps[i1] & (1<<i2)) && i1 == pos && (triggered & 1<<i2) && w.tr_mute[i2]) monomeLedBuffer[(i2+4)*16+i1] = 11;
80003eb8:	b6 8a       	st.b	r11[0x0],r10
80003eba:	2f f9       	sub	r9,-1
80003ebc:	2f fb       	sub	r11,-1
80003ebe:	2f fc       	sub	r12,-1
80003ec0:	40 2e       	lddsp	lr,sp[0x8]
80003ec2:	fc 09 18 00 	cp.b	r9,lr
80003ec6:	e0 82 02 49 	brhs	80004358 <refresh+0x8fc>
80003eca:	30 11       	mov	r1,1
80003ecc:	e2 09 09 41 	lsl	r1,r1,r9
80003ed0:	f9 33 ff f0 	ld.ub	r3,r12[-16]
80003ed4:	e0 66 0b 04 	mov	r6,2820
					else if(w.wp[pattern].steps[i1] & (1<<i2) && (w.wp[pattern].step_choice & 1<<i1)) monomeLedBuffer[(i2+4)*16+i1] = 4;
					else if(w.wp[pattern].steps[i1] & (1<<i2)) monomeLedBuffer[(i2+4)*16+i1] = 7;
80003ed8:	f2 c7 ff c0 	sub	r7,r9,-64
	// show step data
	if(edit_mode == mTrig) {
		if(edit_prob == 0) {
			for(i1=0;i1<SIZE;i1++) {
	 			for(i2=0;i2<4;i2++) {
					if((w.wp[pattern].steps[i1] & (1<<i2)) && i1 == pos && (triggered & 1<<i2) && w.tr_mute[i2]) monomeLedBuffer[(i2+4)*16+i1] = 11;
80003edc:	30 0a       	mov	r10,0
80003ede:	50 11       	stdsp	sp[0x4],r1
				// probs
				if(w.wp[pattern].step_probs[i1] == 255) monomeLedBuffer[48+i1] = 11;
				else if(w.wp[pattern].step_probs[i1] > 0) monomeLedBuffer[48+i1] = 4;
			}
		}
		else if(edit_prob == 1) {
80003ee0:	0a 07       	add	r7,r5
80003ee2:	50 43       	stdsp	sp[0x10],r3
80003ee4:	40 5e       	lddsp	lr,sp[0x14]
80003ee6:	ec c6 f0 7e 	sub	r6,r6,-3970
			for(i1=0;i1<SIZE;i1++) {
80003eea:	30 44       	mov	r4,4
80003eec:	30 71       	mov	r1,7
80003eee:	14 92       	mov	r2,r10
80003ef0:	50 0b       	stdsp	sp[0x0],r11
80003ef2:	ca bb       	rjmp	80003e48 <refresh+0x3ec>
80003ef4:	30 18       	mov	r8,1
80003ef6:	f0 0a 18 00 	cp.b	r10,r8
80003efa:	e0 81 02 2f 	brne	80004358 <refresh+0x8fc>
80003efe:	e0 68 0a ec 	mov	r8,2796
80003f02:	11 84       	ld.ub	r4,r8[0x0]
				monomeLedBuffer[64+i1] = 4;
				monomeLedBuffer[80+i1] = 4;
				monomeLedBuffer[96+i1] = 4;
				monomeLedBuffer[112+i1] = 4;

				if(w.wp[pattern].step_probs[i1] == 255)
80003f04:	f8 08 15 04 	lsl	r8,r12,0x4
				if(w.wp[pattern].step_probs[i1] == 255) monomeLedBuffer[48+i1] = 11;
				else if(w.wp[pattern].step_probs[i1] > 0) monomeLedBuffer[48+i1] = 4;
			}
		}
		else if(edit_prob == 1) {
			for(i1=0;i1<SIZE;i1++) {
80003f08:	f0 0c 01 0c 	sub	r12,r8,r12
80003f0c:	e0 68 0b 04 	mov	r8,2820
				monomeLedBuffer[80+i1] = 4;
				monomeLedBuffer[96+i1] = 4;
				monomeLedBuffer[112+i1] = 4;

				if(w.wp[pattern].step_probs[i1] == 255)
					monomeLedBuffer[48+i1] = 11;
80003f10:	e0 6b 1b 18 	mov	r11,6936
				else if(w.wp[pattern].step_probs[i1] > 0) monomeLedBuffer[48+i1] = 4;
			}
		}
		else if(edit_prob == 1) {
			for(i1=0;i1<SIZE;i1++) {
				monomeLedBuffer[64+i1] = 4;
80003f14:	a5 6c       	lsl	r12,0x4
				monomeLedBuffer[80+i1] = 4;
80003f16:	16 93       	mov	r3,r11
80003f18:	2e 0c       	sub	r12,-32
				monomeLedBuffer[96+i1] = 4;
80003f1a:	30 4a       	mov	r10,4
80003f1c:	10 0c       	add	r12,r8
				monomeLedBuffer[112+i1] = 4;
80003f1e:	3f f5       	mov	r5,-1

				if(w.wp[pattern].step_probs[i1] == 255)
80003f20:	f6 c8 ff d0 	sub	r8,r11,-48
80003f24:	30 77       	mov	r7,7
80003f26:	29 0b       	sub	r11,-112
					monomeLedBuffer[48+i1] = 11;
80003f28:	30 b6       	mov	r6,11
80003f2a:	c1 f8       	rjmp	80003f68 <refresh+0x50c>
				else if(w.wp[pattern].step_probs[i1] == 0) {
80003f2c:	f1 6a 00 10 	st.b	r8[16],r10
					monomeLedBuffer[48+i1] = 0;
80003f30:	f1 6a 00 20 	st.b	r8[32],r10
					monomeLedBuffer[112+i1] = 7;
80003f34:	f1 6a 00 30 	st.b	r8[48],r10
				}
				else if(w.wp[pattern].step_probs[i1]) {
					monomeLedBuffer[48+i1] = 4;
					monomeLedBuffer[64+16*(3-(w.wp[pattern].step_probs[i1]>>6))+i1] = 7;
80003f38:	b6 8a       	st.b	r11[0x0],r10
80003f3a:	19 8e       	ld.ub	lr,r12[0x0]
80003f3c:	ea 0e 18 00 	cp.b	lr,r5
80003f40:	c0 31       	brne	80003f46 <refresh+0x4ea>
80003f42:	b0 86       	st.b	r8[0x0],r6
80003f44:	c0 e8       	rjmp	80003f60 <refresh+0x504>
80003f46:	58 0e       	cp.w	lr,0
80003f48:	c0 41       	brne	80003f50 <refresh+0x4f4>
80003f4a:	b0 8e       	st.b	r8[0x0],lr
80003f4c:	b6 87       	st.b	r11[0x0],r7
				if(w.wp[pattern].step_probs[i1] == 255) monomeLedBuffer[48+i1] = 11;
				else if(w.wp[pattern].step_probs[i1] > 0) monomeLedBuffer[48+i1] = 4;
			}
		}
		else if(edit_prob == 1) {
			for(i1=0;i1<SIZE;i1++) {
80003f4e:	c0 98       	rjmp	80003f60 <refresh+0x504>
80003f50:	b0 8a       	st.b	r8[0x0],r10
80003f52:	a7 8e       	lsr	lr,0x6
80003f54:	fc 0e 11 07 	rsub	lr,lr,7
80003f58:	a5 6e       	lsl	lr,0x4
80003f5a:	12 0e       	add	lr,r9
80003f5c:	e6 0e 0b 07 	st.b	r3[lr],r7
80003f60:	2f f9       	sub	r9,-1
80003f62:	2f f8       	sub	r8,-1
80003f64:	2f fb       	sub	r11,-1
80003f66:	2f fc       	sub	r12,-1
			}
		}
	}

	// show map
	else if(edit_mode == mMap) {
80003f68:	08 90       	mov	r0,r4
80003f6a:	e8 09 18 00 	cp.b	r9,r4
		if(edit_prob == 0) {
80003f6e:	cd f3       	brcs	80003f2c <refresh+0x4d0>
80003f70:	e0 8f 01 f4 	bral	80004358 <refresh+0x8fc>
80003f74:	58 19       	cp.w	r9,1
80003f76:	e0 81 01 7b 	brne	8000426c <refresh+0x810>
			// CURVES
			if(w.wp[pattern].cv_mode[edit_cv_ch] == 0) {
80003f7a:	e0 6a 1a bd 	mov	r10,6845
80003f7e:	15 8a       	ld.ub	r10,r10[0x0]
80003f80:	58 0a       	cp.w	r10,0
80003f82:	e0 81 01 32 	brne	800041e6 <refresh+0x78a>
80003f86:	e0 69 1a b3 	mov	r9,6835
80003f8a:	e0 66 0b 04 	mov	r6,2820
80003f8e:	13 87       	ld.ub	r7,r9[0x0]
80003f90:	f8 09 15 04 	lsl	r9,r12,0x4
80003f94:	f2 0c 01 0c 	sub	r12,r9,r12
				for(i1=0;i1<SIZE;i1++) {
80003f98:	f8 0b 15 04 	lsl	r11,r12,0x4
80003f9c:	ec 0b 00 0e 	add	lr,r6,r11
80003fa0:	0e 0e       	add	lr,r7
80003fa2:	1d e1       	ld.ub	r1,lr[0x6]
80003fa4:	f4 01 18 00 	cp.b	r1,r10
80003fa8:	c7 01       	brne	80004088 <refresh+0x62c>
80003faa:	e0 6e 0a ec 	mov	lr,2796
80003fae:	ee 0c 00 0c 	add	r12,r7,r12
80003fb2:	e0 69 1b 18 	mov	r9,6936
80003fb6:	2f 3c       	sub	r12,-13
					// probs
					if(w.wp[pattern].cv_probs[edit_cv_ch][i1] == 255) monomeLedBuffer[48+i1] = 11;
					else if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 7;
80003fb8:	1d 82       	ld.ub	r2,lr[0x0]
		if(edit_prob == 0) {
			// CURVES
			if(w.wp[pattern].cv_mode[edit_cv_ch] == 0) {
				for(i1=0;i1<SIZE;i1++) {
					// probs
					if(w.wp[pattern].cv_probs[edit_cv_ch][i1] == 255) monomeLedBuffer[48+i1] = 11;
80003fba:	a5 6c       	lsl	r12,0x4
					else if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 7;

					monomeLedBuffer[112+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 1023) * 7;
80003fbc:	ee 0e 15 05 	lsl	lr,r7,0x5
					monomeLedBuffer[96+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 2047) * 7;
80003fc0:	0c 0c       	add	r12,r6
80003fc2:	16 0e       	add	lr,r11
80003fc4:	2d 09       	sub	r9,-48
80003fc6:	fc ce ff 70 	sub	lr,lr,-144
		if(edit_prob == 0) {
			// CURVES
			if(w.wp[pattern].cv_mode[edit_cv_ch] == 0) {
				for(i1=0;i1<SIZE;i1++) {
					// probs
					if(w.wp[pattern].cv_probs[edit_cv_ch][i1] == 255) monomeLedBuffer[48+i1] = 11;
80003fca:	3f f3       	mov	r3,-1
80003fcc:	0c 0e       	add	lr,r6
80003fce:	30 74       	mov	r4,7
80003fd0:	30 b5       	mov	r5,11
80003fd2:	e0 66 03 ff 	mov	r6,1023
					else if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 7;
80003fd6:	e0 67 07 ff 	mov	r7,2047

					monomeLedBuffer[112+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 1023) * 7;
					monomeLedBuffer[96+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 2047) * 7;
					monomeLedBuffer[80+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 3071) * 7;
					monomeLedBuffer[64+i1] = 0;
80003fda:	50 18       	stdsp	sp[0x4],r8
80003fdc:	c3 68       	rjmp	80004048 <refresh+0x5ec>
				for(i1=0;i1<SIZE;i1++) {
					// probs
					if(w.wp[pattern].cv_probs[edit_cv_ch][i1] == 255) monomeLedBuffer[48+i1] = 11;
					else if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 7;

					monomeLedBuffer[112+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 1023) * 7;
80003fde:	19 8b       	ld.ub	r11,r12[0x0]
80003fe0:	e6 0b 18 00 	cp.b	r11,r3
80003fe4:	c0 31       	brne	80003fea <refresh+0x58e>
80003fe6:	b2 85       	st.b	r9[0x0],r5
80003fe8:	c0 48       	rjmp	80003ff0 <refresh+0x594>
80003fea:	58 0b       	cp.w	r11,0
80003fec:	c0 20       	breq	80003ff0 <refresh+0x594>
80003fee:	b2 84       	st.b	r9[0x0],r4
					monomeLedBuffer[96+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 2047) * 7;
80003ff0:	f3 61 00 10 	st.b	r9[16],r1
80003ff4:	1d 1b       	ld.sh	r11,lr++
80003ff6:	f6 06 19 00 	cp.h	r6,r11
80003ffa:	f9 b0 03 07 	movlo	r0,7
					monomeLedBuffer[80+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 3071) * 7;
80003ffe:	f9 b0 02 00 	movhs	r0,0
					// probs
					if(w.wp[pattern].cv_probs[edit_cv_ch][i1] == 255) monomeLedBuffer[48+i1] = 11;
					else if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 7;

					monomeLedBuffer[112+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 1023) * 7;
					monomeLedBuffer[96+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 2047) * 7;
80004002:	f3 60 00 40 	st.b	r9[64],r0
					monomeLedBuffer[80+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 3071) * 7;
80004006:	f6 07 19 00 	cp.h	r7,r11
8000400a:	f9 b0 03 07 	movlo	r0,7
8000400e:	f9 b0 02 00 	movhs	r0,0
80004012:	e0 68 0b ff 	mov	r8,3071
					monomeLedBuffer[64+i1] = 0;
					monomeLedBuffer[64+16*(3-(w.wp[pattern].cv_curves[edit_cv_ch][i1]>>10))+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1]>>7) & 0x7;
80004016:	f3 60 00 30 	st.b	r9[48],r0
8000401a:	f6 08 19 00 	cp.h	r8,r11
8000401e:	f9 b0 03 07 	movlo	r0,7
80004022:	f9 b0 02 00 	movhs	r0,0
80004026:	f3 60 00 20 	st.b	r9[32],r0
8000402a:	5c 7b       	castu.h	r11
8000402c:	e0 68 1b 18 	mov	r8,6936
	// show map
	else if(edit_mode == mMap) {
		if(edit_prob == 0) {
			// CURVES
			if(w.wp[pattern].cv_mode[edit_cv_ch] == 0) {
				for(i1=0;i1<SIZE;i1++) {
80004030:	e1 db c0 e3 	bfextu	r0,r11,0x7,0x3
80004034:	2f f9       	sub	r9,-1
80004036:	ab 8b       	lsr	r11,0xa
					monomeLedBuffer[64+i1] = 0;
					monomeLedBuffer[64+16*(3-(w.wp[pattern].cv_curves[edit_cv_ch][i1]>>10))+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1]>>7) & 0x7;
				}

				// play step highlight
				monomeLedBuffer[64+pos] += 4;
80004038:	2f fc       	sub	r12,-1
8000403a:	f6 0b 11 07 	rsub	r11,r11,7
8000403e:	a5 6b       	lsl	r11,0x4
80004040:	14 0b       	add	r11,r10
80004042:	2f fa       	sub	r10,-1
80004044:	f0 0b 0b 00 	st.b	r8[r11],r0
				monomeLedBuffer[80+pos] += 4;
80004048:	e4 0a 18 00 	cp.b	r10,r2
8000404c:	cc 93       	brcs	80003fde <refresh+0x582>
8000404e:	40 18       	lddsp	r8,sp[0x4]
80004050:	f0 ca ff c0 	sub	r10,r8,-64
80004054:	e0 69 1b 18 	mov	r9,6936
				monomeLedBuffer[96+pos] += 4;
80004058:	f2 0a 07 0b 	ld.ub	r11,r9[r10]
8000405c:	2f cb       	sub	r11,-4
8000405e:	f2 0a 0b 0b 	st.b	r9[r10],r11
80004062:	f0 ca ff b0 	sub	r10,r8,-80
				monomeLedBuffer[112+pos] += 4;
80004066:	f2 0a 07 0b 	ld.ub	r11,r9[r10]
8000406a:	2f cb       	sub	r11,-4
8000406c:	f2 0a 0b 0b 	st.b	r9[r10],r11
			}
			// MAP
			else {
				if(!scale_select) {
80004070:	f0 ca ff a0 	sub	r10,r8,-96
80004074:	29 08       	sub	r8,-112
80004076:	f2 0a 07 0b 	ld.ub	r11,r9[r10]
8000407a:	2f cb       	sub	r11,-4
					monomeLedBuffer[64+edit_cv_step] = 11;
					// show playing note
					monomeLedBuffer[112+cv_chosen[edit_cv_ch]] = 11;
				}
				else {
					for(i1=0;i1<SIZE;i1++) {
8000407c:	f2 0a 0b 0b 	st.b	r9[r10],r11
80004080:	f2 08 07 0a 	ld.ub	r10,r9[r8]
80004084:	2f ca       	sub	r10,-4
80004086:	c6 79       	rjmp	80004354 <refresh+0x8f8>
80004088:	e0 6b 1a bc 	mov	r11,6844
						// probs
						if(w.wp[pattern].cv_probs[edit_cv_ch][i1] == 255) monomeLedBuffer[48+i1] = 11;
8000408c:	e0 65 0a ec 	mov	r5,2796
80004090:	17 8e       	ld.ub	lr,r11[0x0]
						else if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 7;

						monomeLedBuffer[64+i1] = (i1<8) * 4;						
						monomeLedBuffer[80+i1] = (i1<8) * 4;						
						monomeLedBuffer[96+i1] = (i1<8) * 4;						
						monomeLedBuffer[112+i1] = 0;
80004092:	e0 6b 1b 18 	mov	r11,6936
						// clear edit select line
						monomeLedBuffer[64+i1] = 4;

						// show current edit value, selected
						if(edit_cv_value != -1) {
							if((w.wp[pattern].cv_values[edit_cv_value] >> 8) >= i1)
80004096:	f4 0e 18 00 	cp.b	lr,r10

						// clear edit select line
						monomeLedBuffer[64+i1] = 4;

						// show current edit value, selected
						if(edit_cv_value != -1) {
8000409a:	c0 e0       	breq	800040b6 <refresh+0x65a>
							monomeLedBuffer[80+i1] = 0;
							monomeLedBuffer[96+i1] = 0;
						}

						// show steps
						if(w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] & (1<<i1)) monomeLedBuffer[112+i1] = 7;
8000409c:	ee 0c 00 0c 	add	r12,r7,r12
800040a0:	2f 3c       	sub	r12,-13
800040a2:	a5 6c       	lsl	r12,0x4

						// clear edit select line
						monomeLedBuffer[64+i1] = 4;

						// show current edit value, selected
						if(edit_cv_value != -1) {
800040a4:	0b 85       	ld.ub	r5,r5[0x0]
				monomeLedBuffer[112+pos] += 4;
			}
			// MAP
			else {
				if(!scale_select) {
					for(i1=0;i1<SIZE;i1++) {
800040a6:	f8 06 00 06 	add	r6,r12,r6
						// clear edit select line
						monomeLedBuffer[64+i1] = 4;

						// show current edit value, selected
						if(edit_cv_value != -1) {
							if((w.wp[pattern].cv_values[edit_cv_value] >> 8) >= i1)
800040aa:	2d 0b       	sub	r11,-48
800040ac:	3f f7       	mov	r7,-1
							monomeLedBuffer[80+i1] = 0;
							monomeLedBuffer[96+i1] = 0;
						}

						// show steps
						if(w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] & (1<<i1)) monomeLedBuffer[112+i1] = 7;
800040ae:	30 78       	mov	r8,7
						// clear edit select line
						monomeLedBuffer[64+i1] = 4;

						// show current edit value, selected
						if(edit_cv_value != -1) {
							if((w.wp[pattern].cv_values[edit_cv_value] >> 8) >= i1)
800040b0:	30 be       	mov	lr,11
800040b2:	14 9c       	mov	r12,r10
							monomeLedBuffer[80+i1] = 0;
							monomeLedBuffer[96+i1] = 0;
						}

						// show steps
						if(w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] & (1<<i1)) monomeLedBuffer[112+i1] = 7;
800040b4:	c9 08       	rjmp	800041d4 <refresh+0x778>
800040b6:	f8 09 15 03 	lsl	r9,r12,0x3
800040ba:	e0 6e 1a a4 	mov	lr,6820
800040be:	ee 0c 00 0c 	add	r12,r7,r12
800040c2:	2f 3c       	sub	r12,-13
800040c4:	a5 6c       	lsl	r12,0x4
800040c6:	1d 82       	ld.ub	r2,lr[0x0]
800040c8:	0b 81       	ld.ub	r1,r5[0x0]
800040ca:	e0 6e 1a 96 	mov	lr,6806
800040ce:	e1 d2 b0 08 	bfexts	r0,r2,0x0,0x8
			// MAP
			else {
				if(!scale_select) {
					for(i1=0;i1<SIZE;i1++) {
						// probs
						if(w.wp[pattern].cv_probs[edit_cv_ch][i1] == 255) monomeLedBuffer[48+i1] = 11;
800040d2:	1d 83       	ld.ub	r3,lr[0x0]
800040d4:	f2 00 00 00 	add	r0,r9,r0
800040d8:	f8 06 00 06 	add	r6,r12,r6
800040dc:	f6 c5 ff b0 	sub	r5,r11,-80
800040e0:	ee 0c 15 04 	lsl	r12,r7,0x4
800040e4:	2e 80       	sub	r0,-24
800040e6:	12 0c       	add	r12,r9
800040e8:	f6 c4 ff 90 	sub	r4,r11,-112
800040ec:	06 0c       	add	r12,r3
800040ee:	f6 c9 ff a0 	sub	r9,r11,-96
800040f2:	2d 8c       	sub	r12,-40
800040f4:	c3 c8       	rjmp	8000416c <refresh+0x710>
800040f6:	0d 8b       	ld.ub	r11,r6[0x0]
800040f8:	3f fe       	mov	lr,-1
800040fa:	fc 0b 18 00 	cp.b	r11,lr
800040fe:	c0 31       	brne	80004104 <refresh+0x6a8>
						else if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 7;
80004100:	30 bb       	mov	r11,11
80004102:	c0 48       	rjmp	8000410a <refresh+0x6ae>
80004104:	58 0b       	cp.w	r11,0
80004106:	c0 40       	breq	8000410e <refresh+0x6b2>
80004108:	30 7b       	mov	r11,7

						// clear edit select line
						monomeLedBuffer[64+i1] = 4;
8000410a:	f3 6b ff d0 	st.b	r9[-48],r11
8000410e:	30 4b       	mov	r11,4

						// show current edit value, selected
						if(edit_cv_value != -1) {
80004110:	f3 6b ff e0 	st.b	r9[-32],r11
80004114:	3f fb       	mov	r11,-1
80004116:	f6 02 18 00 	cp.b	r2,r11
							if((w.wp[pattern].cv_values[edit_cv_value] >> 8) >= i1)
8000411a:	c1 60       	breq	80004146 <refresh+0x6ea>
8000411c:	e0 6b 0b 04 	mov	r11,2820
80004120:	f6 00 04 1b 	ld.sh	r11,r11[r0<<0x1]
80004124:	fd db c1 08 	bfextu	lr,r11,0x8,0x8
								monomeLedBuffer[80+i1] = 7;
80004128:	f4 0e 19 00 	cp.h	lr,r10
							else
								monomeLedBuffer[80+i1] = 0;
8000412c:	c0 33       	brcs	80004132 <refresh+0x6d6>
8000412e:	30 7e       	mov	lr,7

							if(((w.wp[pattern].cv_values[edit_cv_value] >> 4) & 0xf) >= i1)
80004130:	c0 28       	rjmp	80004134 <refresh+0x6d8>
80004132:	30 0e       	mov	lr,0
80004134:	aa 8e       	st.b	r5[0x0],lr
80004136:	f7 db c0 84 	bfextu	r11,r11,0x4,0x4
								monomeLedBuffer[96+i1] = 4;
8000413a:	14 3b       	cp.w	r11,r10
							else
								monomeLedBuffer[96+i1] = 0;
8000413c:	c0 35       	brlt	80004142 <refresh+0x6e6>
8000413e:	30 4b       	mov	r11,4
						}
						else {
							monomeLedBuffer[80+i1] = 0;
80004140:	c0 58       	rjmp	8000414a <refresh+0x6ee>
80004142:	30 0b       	mov	r11,0
							monomeLedBuffer[96+i1] = 0;
80004144:	c0 38       	rjmp	8000414a <refresh+0x6ee>
						}

						// show steps
						if(w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] & (1<<i1)) monomeLedBuffer[112+i1] = 7;
80004146:	30 0b       	mov	r11,0
80004148:	aa 8b       	st.b	r5[0x0],r11
8000414a:	b2 8b       	st.b	r9[0x0],r11
8000414c:	e0 6b 0b 04 	mov	r11,2820
80004150:	f6 0c 05 1b 	ld.uh	r11,r11[r12<<0x1]
80004154:	f6 0a 08 4b 	asr	r11,r11,r10
						else monomeLedBuffer[112+i1] = 0;
80004158:	f7 db c0 01 	bfextu	r11,r11,0x0,0x1
8000415c:	c0 20       	breq	80004160 <refresh+0x704>
8000415e:	30 7b       	mov	r11,7
80004160:	a8 8b       	st.b	r4[0x0],r11
80004162:	2f fa       	sub	r10,-1
				monomeLedBuffer[112+pos] += 4;
			}
			// MAP
			else {
				if(!scale_select) {
					for(i1=0;i1<SIZE;i1++) {
80004164:	2f f4       	sub	r4,-1
80004166:	2f f9       	sub	r9,-1
80004168:	2f f5       	sub	r5,-1
						if(w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] & (1<<i1)) monomeLedBuffer[112+i1] = 7;
						else monomeLedBuffer[112+i1] = 0;
					}

					// show play position
					monomeLedBuffer[64+pos] = 7;
8000416a:	2f f6       	sub	r6,-1
8000416c:	e2 0a 18 00 	cp.b	r10,r1
80004170:	cc 33       	brcs	800040f6 <refresh+0x69a>
80004172:	e0 69 1b 18 	mov	r9,6936
					// show edit position
					monomeLedBuffer[64+edit_cv_step] = 11;
80004176:	30 7a       	mov	r10,7
80004178:	f2 08 00 08 	add	r8,r9,r8
8000417c:	f1 6a 00 40 	st.b	r8[64],r10
					// show playing note
					monomeLedBuffer[112+cv_chosen[edit_cv_ch]] = 11;
80004180:	f2 03 00 03 	add	r3,r9,r3
80004184:	30 b8       	mov	r8,11
80004186:	e7 68 00 40 	st.b	r3[64],r8
8000418a:	e0 6a 1a 94 	mov	r10,6804
				}
				else {
					for(i1=0;i1<SIZE;i1++) {
						// probs
						if(w.wp[pattern].cv_probs[edit_cv_ch][i1] == 255) monomeLedBuffer[48+i1] = 11;
8000418e:	f4 07 07 0a 	ld.ub	r10,r10[r7]
80004192:	14 09       	add	r9,r10
80004194:	f3 68 00 70 	st.b	r9[112],r8
80004198:	ce 08       	rjmp	80004358 <refresh+0x8fc>
						else if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 7;
8000419a:	0d 89       	ld.ub	r9,r6[0x0]
8000419c:	ee 09 18 00 	cp.b	r9,r7
					monomeLedBuffer[64+edit_cv_step] = 11;
					// show playing note
					monomeLedBuffer[112+cv_chosen[edit_cv_ch]] = 11;
				}
				else {
					for(i1=0;i1<SIZE;i1++) {
800041a0:	c0 31       	brne	800041a6 <refresh+0x74a>
800041a2:	b6 8e       	st.b	r11[0x0],lr
						// probs
						if(w.wp[pattern].cv_probs[edit_cv_ch][i1] == 255) monomeLedBuffer[48+i1] = 11;
						else if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 7;

						monomeLedBuffer[64+i1] = (i1<8) * 4;						
800041a4:	c0 48       	rjmp	800041ac <refresh+0x750>
800041a6:	58 09       	cp.w	r9,0
800041a8:	c0 20       	breq	800041ac <refresh+0x750>
800041aa:	b6 88       	st.b	r11[0x0],r8
800041ac:	f4 c9 ff ff 	sub	r9,r10,-1
						monomeLedBuffer[80+i1] = (i1<8) * 4;						
						monomeLedBuffer[96+i1] = (i1<8) * 4;						
						monomeLedBuffer[112+i1] = 0;
800041b0:	f4 08 18 00 	cp.b	r8,r10
						if(w.wp[pattern].cv_probs[edit_cv_ch][i1] == 255) monomeLedBuffer[48+i1] = 11;
						else if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 7;

						monomeLedBuffer[64+i1] = (i1<8) * 4;						
						monomeLedBuffer[80+i1] = (i1<8) * 4;						
						monomeLedBuffer[96+i1] = (i1<8) * 4;						
800041b4:	f9 ba 02 04 	movhs	r10,4
					for(i1=0;i1<SIZE;i1++) {
						// probs
						if(w.wp[pattern].cv_probs[edit_cv_ch][i1] == 255) monomeLedBuffer[48+i1] = 11;
						else if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 7;

						monomeLedBuffer[64+i1] = (i1<8) * 4;						
800041b8:	f9 ba 03 00 	movlo	r10,0
						monomeLedBuffer[80+i1] = (i1<8) * 4;						
800041bc:	f7 6c 00 40 	st.b	r11[64],r12
					monomeLedBuffer[64+edit_cv_step] = 11;
					// show playing note
					monomeLedBuffer[112+cv_chosen[edit_cv_ch]] = 11;
				}
				else {
					for(i1=0;i1<SIZE;i1++) {
800041c0:	f7 6a 00 30 	st.b	r11[48],r10
800041c4:	f7 6a 00 10 	st.b	r11[16],r10
800041c8:	f7 6a 00 20 	st.b	r11[32],r10
800041cc:	2f f6       	sub	r6,-1
						monomeLedBuffer[80+i1] = (i1<8) * 4;						
						monomeLedBuffer[96+i1] = (i1<8) * 4;						
						monomeLedBuffer[112+i1] = 0;
					}

					monomeLedBuffer[112] = 7;
800041ce:	f5 d9 c0 08 	bfextu	r10,r9,0x0,0x8
800041d2:	2f fb       	sub	r11,-1
800041d4:	ea 0a 18 00 	cp.b	r10,r5
				}

			}
		}
		else if(edit_prob == 1) {
800041d8:	ce 11       	brne	8000419a <refresh+0x73e>
800041da:	30 79       	mov	r9,7
800041dc:	e0 68 1b 18 	mov	r8,6936
			for(i1=0;i1<SIZE;i1++) {
800041e0:	f1 69 00 70 	st.b	r8[112],r9
800041e4:	cb a8       	rjmp	80004358 <refresh+0x8fc>
800041e6:	f2 0a 18 00 	cp.b	r10,r9
800041ea:	e0 81 00 b7 	brne	80004358 <refresh+0x8fc>
800041ee:	e0 68 0a ec 	mov	r8,2796
800041f2:	11 84       	ld.ub	r4,r8[0x0]
800041f4:	e0 68 1a b3 	mov	r8,6835
800041f8:	11 8e       	ld.ub	lr,r8[0x0]
800041fa:	f8 08 15 04 	lsl	r8,r12,0x4
				monomeLedBuffer[64+i1] = 4;
800041fe:	f0 0c 01 0c 	sub	r12,r8,r12
				monomeLedBuffer[80+i1] = 4;
				monomeLedBuffer[96+i1] = 4;
				monomeLedBuffer[112+i1] = 4;

				if(w.wp[pattern].cv_probs[edit_cv_ch][i1] == 255)
80004202:	e0 68 0b 04 	mov	r8,2820
				}

			}
		}
		else if(edit_prob == 1) {
			for(i1=0;i1<SIZE;i1++) {
80004206:	e0 6b 1b 18 	mov	r11,6936
8000420a:	18 0e       	add	lr,r12
				monomeLedBuffer[80+i1] = 4;
				monomeLedBuffer[96+i1] = 4;
				monomeLedBuffer[112+i1] = 4;

				if(w.wp[pattern].cv_probs[edit_cv_ch][i1] == 255)
					monomeLedBuffer[48+i1] = 11;
8000420c:	16 93       	mov	r3,r11
8000420e:	2f 3e       	sub	lr,-13

			}
		}
		else if(edit_prob == 1) {
			for(i1=0;i1<SIZE;i1++) {
				monomeLedBuffer[64+i1] = 4;
80004210:	30 0a       	mov	r10,0
80004212:	a5 6e       	lsl	lr,0x4
				monomeLedBuffer[80+i1] = 4;
80004214:	30 49       	mov	r9,4
80004216:	10 0e       	add	lr,r8
				monomeLedBuffer[96+i1] = 4;
80004218:	3f f5       	mov	r5,-1
8000421a:	f6 c8 ff d0 	sub	r8,r11,-48
				monomeLedBuffer[112+i1] = 4;

				if(w.wp[pattern].cv_probs[edit_cv_ch][i1] == 255)
8000421e:	30 77       	mov	r7,7
80004220:	29 0b       	sub	r11,-112
80004222:	30 b6       	mov	r6,11
80004224:	c1 f8       	rjmp	80004262 <refresh+0x806>
					monomeLedBuffer[48+i1] = 11;
80004226:	f1 69 00 10 	st.b	r8[16],r9
				else if(w.wp[pattern].cv_probs[edit_cv_ch][i1] == 0) {
8000422a:	f1 69 00 20 	st.b	r8[32],r9
					monomeLedBuffer[48+i1] = 0;
8000422e:	f1 69 00 30 	st.b	r8[48],r9
					monomeLedBuffer[112+i1] = 7;
80004232:	b6 89       	st.b	r11[0x0],r9
				}
				else if(w.wp[pattern].cv_probs[edit_cv_ch][i1]) {
					monomeLedBuffer[48+i1] = 4;
80004234:	1d 8c       	ld.ub	r12,lr[0x0]
					monomeLedBuffer[64+16*(3-(w.wp[pattern].cv_probs[edit_cv_ch][i1]>>6))+i1] = 7;
80004236:	ea 0c 18 00 	cp.b	r12,r5
8000423a:	c0 31       	brne	80004240 <refresh+0x7e4>
8000423c:	b0 86       	st.b	r8[0x0],r6
8000423e:	c0 e8       	rjmp	8000425a <refresh+0x7fe>
80004240:	58 0c       	cp.w	r12,0
80004242:	c0 41       	brne	8000424a <refresh+0x7ee>
80004244:	b0 8c       	st.b	r8[0x0],r12
80004246:	b6 87       	st.b	r11[0x0],r7
80004248:	c0 98       	rjmp	8000425a <refresh+0x7fe>
8000424a:	b0 89       	st.b	r8[0x0],r9
				}

			}
		}
		else if(edit_prob == 1) {
			for(i1=0;i1<SIZE;i1++) {
8000424c:	a7 8c       	lsr	r12,0x6
8000424e:	f8 0c 11 07 	rsub	r12,r12,7
80004252:	a5 6c       	lsl	r12,0x4
80004254:	14 0c       	add	r12,r10
80004256:	e6 0c 0b 07 	st.b	r3[r12],r7
8000425a:	2f fa       	sub	r10,-1
8000425c:	2f f8       	sub	r8,-1
8000425e:	2f fb       	sub	r11,-1
80004260:	2f fe       	sub	lr,-1
80004262:	08 91       	mov	r1,r4
80004264:	e8 0a 18 00 	cp.b	r10,r4
80004268:	cd f3       	brcs	80004226 <refresh+0x7ca>
8000426a:	c7 78       	rjmp	80004358 <refresh+0x8fc>
		}

	}

	// series
	else if(edit_mode == mSeries) {
8000426c:	58 29       	cp.w	r9,2
8000426e:	c7 51       	brne	80004358 <refresh+0x8fc>
		for(i1 = 0;i1<6;i1++) {
			for(i2=0;i2<SIZE;i2++) {
80004270:	e0 68 0a ec 	mov	r8,2796
80004274:	e0 6a 0b 04 	mov	r10,2820
				// start/end bars, clear
				if(i1+scroll_pos == w.series_start || i1+scroll_pos == w.series_end) monomeLedBuffer[32+i1*16+i2] = 4;
80004278:	11 87       	ld.ub	r7,r8[0x0]
8000427a:	f5 30 0f 80 	ld.ub	r0,r10[3968]
8000427e:	e0 68 1a bf 	mov	r8,6847
80004282:	11 88       	ld.ub	r8,r8[0x0]
80004284:	f0 c6 f8 80 	sub	r6,r8,-1920
80004288:	f4 06 00 16 	add	r6,r10,r6<<0x1
8000428c:	f5 3a 0f 81 	ld.ub	r10,r10[3969]
80004290:	2e 04       	sub	r4,-32
				else monomeLedBuffer[32+i1*16+i2] = 0;
			}

			// scroll position helper
			monomeLedBuffer[32+i1*16+((scroll_pos+i1)/(64/SIZE))] = 4;
80004292:	e0 65 1b 18 	mov	r5,6936
	// series
	else if(edit_mode == mSeries) {
		for(i1 = 0;i1<6;i1++) {
			for(i2=0;i2<SIZE;i2++) {
				// start/end bars, clear
				if(i1+scroll_pos == w.series_start || i1+scroll_pos == w.series_end) monomeLedBuffer[32+i1*16+i2] = 4;
80004296:	34 03       	mov	r3,64
80004298:	50 1a       	stdsp	sp[0x4],r10
				else monomeLedBuffer[32+i1*16+i2] = 0;
			}

			// scroll position helper
			monomeLedBuffer[32+i1*16+((scroll_pos+i1)/(64/SIZE))] = 4;
8000429a:	e6 07 0c 02 	divs	r2,r3,r7
	// series
	else if(edit_mode == mSeries) {
		for(i1 = 0;i1<6;i1++) {
			for(i2=0;i2<SIZE;i2++) {
				// start/end bars, clear
				if(i1+scroll_pos == w.series_start || i1+scroll_pos == w.series_end) monomeLedBuffer[32+i1*16+i2] = 4;
8000429e:	0a 04       	add	r4,r5
800042a0:	30 09       	mov	r9,0
800042a2:	50 22       	stdsp	sp[0x8],r2
800042a4:	32 0a       	mov	r10,32
800042a6:	30 4e       	mov	lr,4
800042a8:	c3 88       	rjmp	80004318 <refresh+0x8bc>
800042aa:	00 3b       	cp.w	r11,r0
800042ac:	c0 40       	breq	800042b4 <refresh+0x858>
800042ae:	40 18       	lddsp	r8,sp[0x4]
				else monomeLedBuffer[32+i1*16+i2] = 0;
800042b0:	10 3b       	cp.w	r11,r8
800042b2:	c0 31       	brne	800042b8 <refresh+0x85c>
	}

	// series
	else if(edit_mode == mSeries) {
		for(i1 = 0;i1<6;i1++) {
			for(i2=0;i2<SIZE;i2++) {
800042b4:	a6 8e       	st.b	r3[0x0],lr
800042b6:	c0 38       	rjmp	800042bc <refresh+0x860>
800042b8:	30 08       	mov	r8,0
800042ba:	a4 88       	st.b	r2[0x0],r8
800042bc:	2f f1       	sub	r1,-1
800042be:	2f f3       	sub	r3,-1
800042c0:	5c 51       	castu.b	r1
				if(i1+scroll_pos == w.series_start || i1+scroll_pos == w.series_end) monomeLedBuffer[32+i1*16+i2] = 4;
				else monomeLedBuffer[32+i1*16+i2] = 0;
			}

			// scroll position helper
			monomeLedBuffer[32+i1*16+((scroll_pos+i1)/(64/SIZE))] = 4;
800042c2:	2f f2       	sub	r2,-1
800042c4:	ee 01 18 00 	cp.b	r1,r7
800042c8:	cf 13       	brcs	800042aa <refresh+0x84e>
800042ca:	40 21       	lddsp	r1,sp[0x8]
800042cc:	f6 01 0c 02 	divs	r2,r11,r1
800042d0:	ea 0a 00 01 	add	r1,r5,r10
			
			// sidebar selection indicators
			if(i1+scroll_pos > w.series_start && i1+scroll_pos < w.series_end) {
800042d4:	e2 02 0b 0e 	st.b	r1[r2],lr
800042d8:	40 38       	lddsp	r8,sp[0xc]
800042da:	00 3b       	cp.w	r11,r0
800042dc:	e0 8a 00 08 	brle	800042ec <refresh+0x890>
				monomeLedBuffer[32+i1*16] = 4;
800042e0:	40 13       	lddsp	r3,sp[0x4]
				monomeLedBuffer[32+i1*16+LENGTH] = 4;
800042e2:	06 3b       	cp.w	r11,r3
800042e4:	c0 44       	brge	800042ec <refresh+0x890>
800042e6:	ea 0a 0b 0e 	st.b	r5[r10],lr
			}

			for(i2=0;i2<SIZE;i2++) {
				// show possible states
				if((w.series_list[i1+scroll_pos] >> i2) & 1)
800042ea:	a8 8e       	st.b	r4[0x0],lr
800042ec:	30 0b       	mov	r11,0
800042ee:	c0 b8       	rjmp	80004304 <refresh+0x8a8>
800042f0:	8c 83       	ld.uh	r3,r6[0x0]
800042f2:	e6 0b 08 43 	asr	r3,r3,r11
					monomeLedBuffer[32+(i1*16)+i2] = 7;
800042f6:	ed b3 00 00 	bld	r3,0x0
800042fa:	c0 31       	brne	80004300 <refresh+0x8a4>
			if(i1+scroll_pos > w.series_start && i1+scroll_pos < w.series_end) {
				monomeLedBuffer[32+i1*16] = 4;
				monomeLedBuffer[32+i1*16+LENGTH] = 4;
			}

			for(i2=0;i2<SIZE;i2++) {
800042fc:	30 71       	mov	r1,7
800042fe:	b8 81       	st.b	r12[0x0],r1
80004300:	2f fb       	sub	r11,-1
80004302:	2f fc       	sub	r12,-1
80004304:	0e 93       	mov	r3,r7
80004306:	ee 0b 18 00 	cp.b	r11,r7
8000430a:	cf 33       	brcs	800042f0 <refresh+0x894>

	}

	// series
	else if(edit_mode == mSeries) {
		for(i1 = 0;i1<6;i1++) {
8000430c:	2f f9       	sub	r9,-1
8000430e:	2f 0a       	sub	r10,-16
80004310:	2f e6       	sub	r6,-2
80004312:	2f 04       	sub	r4,-16
80004314:	58 69       	cp.w	r9,6
80004316:	c0 a0       	breq	8000432a <refresh+0x8ce>
80004318:	f4 05 00 0c 	add	r12,r10,r5
8000431c:	30 01       	mov	r1,0
8000431e:	18 92       	mov	r2,r12
80004320:	18 93       	mov	r3,r12
			}

		}

		// highlight playhead
		if(series_pos >= scroll_pos && series_pos < scroll_pos+6) {
80004322:	f2 08 00 0b 	add	r11,r9,r8
80004326:	50 38       	stdsp	sp[0xc],r8
80004328:	cc eb       	rjmp	800042c4 <refresh+0x868>
8000432a:	e0 69 0a fd 	mov	r9,2813
8000432e:	13 89       	ld.ub	r9,r9[0x0]
80004330:	f0 09 18 00 	cp.b	r9,r8
			monomeLedBuffer[32+(series_pos-scroll_pos)*16+series_playing] = 11;
80004334:	c1 23       	brcs	80004358 <refresh+0x8fc>
80004336:	f0 ca ff fb 	sub	r10,r8,-5
8000433a:	12 3a       	cp.w	r10,r9
8000433c:	c0 e5       	brlt	80004358 <refresh+0x8fc>
8000433e:	2f e9       	sub	r9,-2
80004340:	f2 08 01 08 	sub	r8,r9,r8
80004344:	e0 69 1a cc 	mov	r9,6860
80004348:	13 8a       	ld.ub	r10,r9[0x0]
		}
	}

	monome_set_quadrant_flag(0);
8000434a:	a5 68       	lsl	r8,0x4
8000434c:	e0 69 1b 18 	mov	r9,6936
	monome_set_quadrant_flag(1);
80004350:	14 08       	add	r8,r10
80004352:	30 ba       	mov	r10,11
80004354:	f2 08 0b 0a 	st.b	r9[r8],r10
}
80004358:	30 0c       	mov	r12,0
			if(w.cv_mute[1])
				monomeLedBuffer[5] = 11;
		}

	}
	else if(SIZE==16) {
8000435a:	e0 a0 09 b7 	rcall	800056c8 <monome_set_quadrant_flag>
8000435e:	30 1c       	mov	r12,1
80004360:	e0 a0 09 b4 	rcall	800056c8 <monome_set_quadrant_flag>
80004364:	2f 9d       	sub	sp,-28
80004366:	d8 32       	popm	r0-r7,pc
80004368:	e0 68 0a ec 	mov	r8,2796
8000436c:	11 8a       	ld.ub	r10,r8[0x0]
8000436e:	31 08       	mov	r8,16
80004370:	f0 0a 18 00 	cp.b	r10,r8
80004374:	fe 91 fc dc 	brne	80003d2c <refresh+0x2d0>
80004378:	fe 9f fc c9 	bral	80003d0a <refresh+0x2ae>

8000437c <handler_MonomeConnect>:
8000437c:	d4 01       	pushm	lr
8000437e:	e0 69 1a cd 	mov	r9,6861
80004382:	30 08       	mov	r8,0
80004384:	b2 88       	st.b	r9[0x0],r8
80004386:	e0 69 1a a5 	mov	r9,6821
static void handler_MonomeConnect(s32 data) {
	u8 i1;
	// print_dbg("\r\n// monome connect /////////////////"); 
	keycount_pos = 0;
	key_count = 0;
	SIZE = monome_size_x();
8000438a:	b2 88       	st.b	r9[0x0],r8
8000438c:	e0 a0 09 a8 	rcall	800056dc <monome_size_x>
	LENGTH = SIZE - 1;
80004390:	e0 68 0a ec 	mov	r8,2796
80004394:	f8 c9 00 01 	sub	r9,r12,1
	// print_dbg("\r monome size: ");
	// print_dbg_ulong(SIZE);
	VARI = monome_is_vari();
80004398:	b0 8c       	st.b	r8[0x0],r12
8000439a:	e0 68 0a ff 	mov	r8,2815
8000439e:	b0 89       	st.b	r8[0x0],r9
800043a0:	e0 a0 09 a2 	rcall	800056e4 <monome_is_vari>
	// print_dbg("\r monome vari: ");
	// print_dbg_ulong(VARI);

	if(VARI) re = &refresh;
800043a4:	e0 68 1a 8d 	mov	r8,6797
800043a8:	b0 8c       	st.b	r8[0x0],r12
	else re = &refresh_mono;

	for(i1=0;i1<16;i1++)
		if(w.wp[i1].loop_end > LENGTH)
800043aa:	e0 68 0a f8 	mov	r8,2808
	timers_unset_monome();
	// event_t e = { .type = kEventMonomeDisconnect };
	// event_post(&e);
}

static void handler_MonomeConnect(s32 data) {
800043ae:	58 0c       	cp.w	r12,0
800043b0:	c0 d0       	breq	800043ca <handler_MonomeConnect+0x4e>

	if(VARI) re = &refresh;
	else re = &refresh_mono;

	for(i1=0;i1<16;i1++)
		if(w.wp[i1].loop_end > LENGTH)
800043b2:	fe c9 09 56 	sub	r9,pc,2390
800043b6:	91 09       	st.w	r8[0x0],r9
	VARI = monome_is_vari();
	// print_dbg("\r monome vari: ");
	// print_dbg_ulong(VARI);

	if(VARI) re = &refresh;
	else re = &refresh_mono;
800043b8:	e0 68 0b 04 	mov	r8,2820

	for(i1=0;i1<16;i1++)
		if(w.wp[i1].loop_end > LENGTH)
800043bc:	e0 69 0a ff 	mov	r9,2815
800043c0:	f0 ca f0 ff 	sub	r10,r8,-3841
800043c4:	13 89       	ld.ub	r9,r9[0x0]
			w.wp[i1].loop_end = LENGTH;
800043c6:	2f f8       	sub	r8,-1
800043c8:	c0 48       	rjmp	800043d0 <handler_MonomeConnect+0x54>
800043ca:	fe c9 0f 4e 	sub	r9,pc,3918
	// print_dbg_ulong(VARI);

	if(VARI) re = &refresh;
	else re = &refresh_mono;

	for(i1=0;i1<16;i1++)
800043ce:	cf 4b       	rjmp	800043b6 <handler_MonomeConnect+0x3a>
			w.wp[i1].loop_end = LENGTH;
	

	// monome_set_quadrant_flag(0);
	// monome_set_quadrant_flag(1);
	timers_set_monome();
800043d0:	11 8b       	ld.ub	r11,r8[0x0]
800043d2:	f2 0b 18 00 	cp.b	r11,r9
}
800043d6:	e0 88 00 03 	brls	800043dc <handler_MonomeConnect+0x60>
800043da:	b0 89       	st.b	r8[0x0],r9
800043dc:	f0 c8 ff 10 	sub	r8,r8,-240
800043e0:	14 38       	cp.w	r8,r10
800043e2:	cf 71       	brne	800043d0 <handler_MonomeConnect+0x54>
800043e4:	fe b0 ef a6 	rcall	80002330 <timers_set_monome>
800043e8:	d8 02       	popm	pc
800043ea:	d7 03       	nop

800043ec <handler_FtdiConnect>:
800043ec:	d4 01       	pushm	lr
800043ee:	e0 a0 0e e7 	rcall	800061bc <ftdi_setup>
800043f2:	d8 02       	popm	pc

800043f4 <handler_KeyTimer>:
800043f4:	d4 31       	pushm	r0-r7,lr
800043f6:	20 fd       	sub	sp,60
800043f8:	e0 67 1a 9a 	mov	r7,6810
800043fc:	0f 88       	ld.ub	r8,r7[0x0]
800043fe:	58 08       	cp.w	r8,0
80004400:	c1 60       	breq	8000442c <handler_KeyTimer+0x38>
80004402:	30 19       	mov	r9,1
80004404:	f2 08 18 00 	cp.b	r8,r9
	static u16 i1,x,n1;

	if(front_timer) {
		if(front_timer == 1) {
			static event_t e;
			e.type = kEventSaveFlash;
80004408:	c1 01       	brne	80004428 <handler_KeyTimer+0x34>
8000440a:	e0 68 05 cc 	mov	r8,1484
8000440e:	30 59       	mov	r9,5
			event_post(&e);
80004410:	10 9c       	mov	r12,r8
80004412:	91 09       	st.w	r8[0x0],r9

			preset_mode = 0;
			front_timer--;
80004414:	e0 a0 07 cc 	rcall	800053ac <event_post>
		if(front_timer == 1) {
			static event_t e;
			e.type = kEventSaveFlash;
			event_post(&e);

			preset_mode = 0;
80004418:	0f 88       	ld.ub	r8,r7[0x0]
			front_timer--;
8000441a:	20 18       	sub	r8,1
		if(front_timer == 1) {
			static event_t e;
			e.type = kEventSaveFlash;
			event_post(&e);

			preset_mode = 0;
8000441c:	30 09       	mov	r9,0
8000441e:	ae 88       	st.b	r7[0x0],r8
80004420:	e0 68 1a 8c 	mov	r8,6796
			front_timer--;
		}
		else front_timer--;
80004424:	b0 89       	st.b	r8[0x0],r9
	}

	for(i1=0;i1<key_count;i1++) {
80004426:	c0 38       	rjmp	8000442c <handler_KeyTimer+0x38>
80004428:	20 18       	sub	r8,1
8000442a:	ae 88       	st.b	r7[0x0],r8
8000442c:	e0 68 05 9e 	mov	r8,1438

					// print_dbg("\r\n saved pattern: ");
					// print_dbg_ulong(x);
				}
			}
			else if(preset_mode == 1) {
80004430:	30 09       	mov	r9,0
80004432:	e0 67 0b 04 	mov	r7,2820
		}
		else front_timer--;
	}

	for(i1=0;i1<key_count;i1++) {
		if(key_times[held_keys[i1]])
80004436:	10 94       	mov	r4,r8
80004438:	b0 09       	st.h	r8[0x0],r9
8000443a:	e0 65 1a 8c 	mov	r5,6796
8000443e:	0e 96       	mov	r6,r7
80004440:	ce 88       	rjmp	80004610 <handler_KeyTimer+0x21c>
80004442:	5c 78       	castu.h	r8
80004444:	e0 6e 09 cc 	mov	lr,2508
80004448:	e0 6b 09 ec 	mov	r11,2540
		if(--key_times[held_keys[i1]]==0) {
8000444c:	fc 08 07 02 	ld.ub	r2,lr[r8]
80004450:	f6 02 07 08 	ld.ub	r8,r11[r2]
80004454:	58 08       	cp.w	r8,0
			if(edit_mode != mSeries && preset_mode == 0) {
80004456:	e0 80 00 da 	breq	8000460a <handler_KeyTimer+0x216>
8000445a:	20 18       	sub	r8,1
8000445c:	5c 58       	castu.b	r8
8000445e:	f6 02 0b 08 	st.b	r11[r2],r8
80004462:	e0 81 00 d4 	brne	8000460a <handler_KeyTimer+0x216>
80004466:	e0 6a 1a c4 	mov	r10,6852
				// preset copy
				if(held_keys[i1] / 16 == 2) {
8000446a:	74 09       	ld.w	r9,r10[0x0]
8000446c:	58 29       	cp.w	r9,2
8000446e:	e0 80 00 ba 	breq	800045e2 <handler_KeyTimer+0x1ee>
80004472:	0b 8a       	ld.ub	r10,r5[0x0]
80004474:	f0 0a 18 00 	cp.b	r10,r8
					x = held_keys[i1] % 16;
80004478:	e0 81 00 b5 	brne	800045e2 <handler_KeyTimer+0x1ee>
8000447c:	e4 ca 00 20 	sub	r10,r2,32
					for(n1=0;n1<16;n1++) {
						w.wp[x].steps[n1] = w.wp[pattern].steps[n1];
80004480:	30 f9       	mov	r9,15
80004482:	f2 0a 18 00 	cp.b	r10,r9
80004486:	e0 8b 00 c2 	brhi	8000460a <handler_KeyTimer+0x216>
8000448a:	e0 69 05 c0 	mov	r9,1472
8000448e:	e5 d2 c0 04 	bfextu	r2,r2,0x0,0x4
80004492:	b2 02       	st.h	r9[0x0],r2
80004494:	e0 69 1a 97 	mov	r9,6807
80004498:	13 8b       	ld.ub	r11,r9[0x0]
8000449a:	f6 09 15 04 	lsl	r9,r11,0x4
8000449e:	f9 d2 c0 10 	bfextu	r12,r2,0x0,0x10
						w.wp[x].step_probs[n1] = w.wp[pattern].step_probs[n1];
						w.wp[x].cv_values[n1] = w.wp[pattern].cv_values[n1];
800044a2:	50 19       	stdsp	sp[0x4],r9
			if(edit_mode != mSeries && preset_mode == 0) {
				// preset copy
				if(held_keys[i1] / 16 == 2) {
					x = held_keys[i1] % 16;
					for(n1=0;n1<16;n1++) {
						w.wp[x].steps[n1] = w.wp[pattern].steps[n1];
800044a4:	f8 00 15 04 	lsl	r0,r12,0x4
						w.wp[x].step_probs[n1] = w.wp[pattern].step_probs[n1];
						w.wp[x].cv_values[n1] = w.wp[pattern].cv_values[n1];
800044a8:	18 10       	sub	r0,r12
			if(edit_mode != mSeries && preset_mode == 0) {
				// preset copy
				if(held_keys[i1] / 16 == 2) {
					x = held_keys[i1] % 16;
					for(n1=0;n1<16;n1++) {
						w.wp[x].steps[n1] = w.wp[pattern].steps[n1];
800044aa:	e0 09 15 04 	lsl	r9,r0,0x4
						w.wp[x].step_probs[n1] = w.wp[pattern].step_probs[n1];
						w.wp[x].cv_values[n1] = w.wp[pattern].cv_values[n1];
800044ae:	ee 09 00 09 	add	r9,r7,r9
			if(edit_mode != mSeries && preset_mode == 0) {
				// preset copy
				if(held_keys[i1] / 16 == 2) {
					x = held_keys[i1] % 16;
					for(n1=0;n1<16;n1++) {
						w.wp[x].steps[n1] = w.wp[pattern].steps[n1];
800044b2:	f6 01 10 0f 	mul	r1,r11,15
		if(--key_times[held_keys[i1]]==0) {
			if(edit_mode != mSeries && preset_mode == 0) {
				// preset copy
				if(held_keys[i1] / 16 == 2) {
					x = held_keys[i1] % 16;
					for(n1=0;n1<16;n1++) {
800044b6:	50 c9       	stdsp	sp[0x30],r9
800044b8:	40 1e       	lddsp	lr,sp[0x4]
800044ba:	e2 09 15 04 	lsl	r9,r1,0x4
800044be:	16 1e       	sub	lr,r11
800044c0:	ee 09 00 09 	add	r9,r7,r9
800044c4:	50 ee       	stdsp	sp[0x38],lr
800044c6:	50 d9       	stdsp	sp[0x34],r9
800044c8:	50 0b       	stdsp	sp[0x0],r11
800044ca:	c3 08       	rjmp	8000452a <handler_KeyTimer+0x136>
800044cc:	f3 38 00 10 	ld.ub	r8,r9[16]
800044d0:	f5 68 00 10 	st.b	r10[16],r8
800044d4:	f3 38 00 20 	ld.ub	r8,r9[32]
800044d8:	f5 68 00 20 	st.b	r10[32],r8
800044dc:	40 3e       	lddsp	lr,sp[0xc]
800044de:	ee 0e 04 18 	ld.sh	r8,r7[lr<<0x1]
800044e2:	40 2e       	lddsp	lr,sp[0x8]
						w.wp[x].steps[n1] = w.wp[pattern].steps[n1];
800044e4:	ee 0e 0a 18 	st.h	r7[lr<<0x1],r8
800044e8:	40 5e       	lddsp	lr,sp[0x14]
800044ea:	ee 0e 04 18 	ld.sh	r8,r7[lr<<0x1]
						w.wp[x].step_probs[n1] = w.wp[pattern].step_probs[n1];
800044ee:	40 4e       	lddsp	lr,sp[0x10]
800044f0:	ee 0e 0a 18 	st.h	r7[lr<<0x1],r8
						w.wp[x].cv_values[n1] = w.wp[pattern].cv_values[n1];
800044f4:	40 7e       	lddsp	lr,sp[0x1c]
800044f6:	ee 0e 04 18 	ld.sh	r8,r7[lr<<0x1]
800044fa:	40 6e       	lddsp	lr,sp[0x18]
800044fc:	ee 0e 0a 18 	st.h	r7[lr<<0x1],r8
						w.wp[x].cv_steps[0][n1] = w.wp[pattern].cv_steps[0][n1];
80004500:	f3 38 00 d0 	ld.ub	r8,r9[208]
80004504:	f5 68 00 d0 	st.b	r10[208],r8
80004508:	40 9e       	lddsp	lr,sp[0x24]
8000450a:	ee 0e 04 18 	ld.sh	r8,r7[lr<<0x1]
						w.wp[x].cv_curves[0][n1] = w.wp[pattern].cv_curves[0][n1];
8000450e:	40 8e       	lddsp	lr,sp[0x20]
80004510:	ee 0e 0a 18 	st.h	r7[lr<<0x1],r8
80004514:	ee 0b 04 18 	ld.sh	r8,r7[r11<<0x1]
						w.wp[x].cv_probs[0][n1] = w.wp[pattern].cv_probs[0][n1];
80004518:	40 ab       	lddsp	r11,sp[0x28]
8000451a:	ee 0b 0a 18 	st.h	r7[r11<<0x1],r8
8000451e:	f1 d3 b0 10 	bfexts	r8,r3,0x0,0x10
						w.wp[x].cv_steps[1][n1] = w.wp[pattern].cv_steps[1][n1];
80004522:	f3 39 00 e0 	ld.ub	r9,r9[224]
80004526:	f5 69 00 e0 	st.b	r10[224],r9
8000452a:	40 eb       	lddsp	r11,sp[0x38]
						w.wp[x].cv_curves[1][n1] = w.wp[pattern].cv_curves[1][n1];
8000452c:	e7 d8 c0 10 	bfextu	r3,r8,0x0,0x10
80004530:	e6 0b 00 3e 	add	lr,r3,r11<<0x3
80004534:	fc cb ff e8 	sub	r11,lr,-24
						w.wp[x].cv_probs[1][n1] = w.wp[pattern].cv_probs[1][n1];
80004538:	40 ca       	lddsp	r10,sp[0x30]
8000453a:	40 d9       	lddsp	r9,sp[0x34]
8000453c:	06 0a       	add	r10,r3
8000453e:	06 09       	add	r9,r3
80004540:	50 3b       	stdsp	sp[0xc],r11
				if(held_keys[i1] / 16 == 2) {
					x = held_keys[i1] % 16;
					for(n1=0;n1<16;n1++) {
						w.wp[x].steps[n1] = w.wp[pattern].steps[n1];
						w.wp[x].step_probs[n1] = w.wp[pattern].step_probs[n1];
						w.wp[x].cv_values[n1] = w.wp[pattern].cv_values[n1];
80004542:	e6 00 00 33 	add	r3,r3,r0<<0x3
			if(edit_mode != mSeries && preset_mode == 0) {
				// preset copy
				if(held_keys[i1] / 16 == 2) {
					x = held_keys[i1] % 16;
					for(n1=0;n1<16;n1++) {
						w.wp[x].steps[n1] = w.wp[pattern].steps[n1];
80004546:	e6 cb ff e8 	sub	r11,r3,-24
						w.wp[x].step_probs[n1] = w.wp[pattern].step_probs[n1];
						w.wp[x].cv_values[n1] = w.wp[pattern].cv_values[n1];
8000454a:	50 2b       	stdsp	sp[0x8],r11
8000454c:	e6 cb ff d8 	sub	r11,r3,-40
			if(edit_mode != mSeries && preset_mode == 0) {
				// preset copy
				if(held_keys[i1] / 16 == 2) {
					x = held_keys[i1] % 16;
					for(n1=0;n1<16;n1++) {
						w.wp[x].steps[n1] = w.wp[pattern].steps[n1];
80004550:	50 4b       	stdsp	sp[0x10],r11
80004552:	fc cb ff d8 	sub	r11,lr,-40
80004556:	50 5b       	stdsp	sp[0x14],r11
						w.wp[x].step_probs[n1] = w.wp[pattern].step_probs[n1];
						w.wp[x].cv_values[n1] = w.wp[pattern].cv_values[n1];
80004558:	e6 cb ff b8 	sub	r11,r3,-72
8000455c:	50 6b       	stdsp	sp[0x18],r11
8000455e:	fc cb ff b8 	sub	r11,lr,-72
80004562:	50 7b       	stdsp	sp[0x1c],r11
						w.wp[x].cv_steps[0][n1] = w.wp[pattern].cv_steps[0][n1];
80004564:	e6 cb ff c8 	sub	r11,r3,-56
80004568:	2a 83       	sub	r3,-88
8000456a:	50 8b       	stdsp	sp[0x20],r11
8000456c:	50 a3       	stdsp	sp[0x28],r3
8000456e:	fc cb ff c8 	sub	r11,lr,-56
						w.wp[x].cv_curves[0][n1] = w.wp[pattern].cv_curves[0][n1];
80004572:	50 9b       	stdsp	sp[0x24],r11
80004574:	f0 c3 ff ff 	sub	r3,r8,-1
80004578:	fc cb ff a8 	sub	r11,lr,-88
						w.wp[x].cv_probs[0][n1] = w.wp[pattern].cv_probs[0][n1];
						w.wp[x].cv_steps[1][n1] = w.wp[pattern].cv_steps[1][n1];
8000457c:	30 fe       	mov	lr,15
8000457e:	fc 08 19 00 	cp.h	r8,lr
80004582:	fe 98 ff a5 	brls	800044cc <handler_KeyTimer+0xd8>
80004586:	f8 09 15 04 	lsl	r9,r12,0x4
8000458a:	a5 61       	lsl	r1,0x4
						w.wp[x].cv_curves[1][n1] = w.wp[pattern].cv_curves[1][n1];
						w.wp[x].cv_probs[1][n1] = w.wp[pattern].cv_probs[1][n1];
8000458c:	ec 01 00 01 	add	r1,r6,r1
						w.wp[x].cv_values[n1] = w.wp[pattern].cv_values[n1];
						w.wp[x].cv_steps[0][n1] = w.wp[pattern].cv_steps[0][n1];
						w.wp[x].cv_curves[0][n1] = w.wp[pattern].cv_curves[0][n1];
						w.wp[x].cv_probs[0][n1] = w.wp[pattern].cv_probs[0][n1];
						w.wp[x].cv_steps[1][n1] = w.wp[pattern].cv_steps[1][n1];
						w.wp[x].cv_curves[1][n1] = w.wp[pattern].cv_curves[1][n1];
80004590:	03 ea       	ld.ub	r10,r1[0x6]
80004592:	40 0b       	lddsp	r11,sp[0x0]
		if(--key_times[held_keys[i1]]==0) {
			if(edit_mode != mSeries && preset_mode == 0) {
				// preset copy
				if(held_keys[i1] / 16 == 2) {
					x = held_keys[i1] % 16;
					for(n1=0;n1<16;n1++) {
80004594:	f2 0c 01 0c 	sub	r12,r9,r12
80004598:	f8 09 15 04 	lsl	r9,r12,0x4
8000459c:	ec 09 00 09 	add	r9,r6,r9
						w.wp[x].cv_steps[1][n1] = w.wp[pattern].cv_steps[1][n1];
						w.wp[x].cv_curves[1][n1] = w.wp[pattern].cv_curves[1][n1];
						w.wp[x].cv_probs[1][n1] = w.wp[pattern].cv_probs[1][n1];
					}

					w.wp[x].cv_mode[0] = w.wp[pattern].cv_mode[0];
800045a0:	b2 ea       	st.b	r9[0x6],r10
800045a2:	40 1a       	lddsp	r10,sp[0x4]
800045a4:	12 9c       	mov	r12,r9
800045a6:	f4 0b 01 0b 	sub	r11,r10,r11
800045aa:	a5 6b       	lsl	r11,0x4
800045ac:	ec 0b 00 0b 	add	r11,r6,r11
800045b0:	17 fa       	ld.ub	r10,r11[0x7]
800045b2:	b8 fa       	st.b	r12[0x7],r10
800045b4:	e0 69 07 61 	mov	r9,1889
800045b8:	13 8a       	ld.ub	r10,r9[0x0]
					w.wp[x].cv_mode[1] = w.wp[pattern].cv_mode[1];
800045ba:	2f fa       	sub	r10,-1
800045bc:	b2 8a       	st.b	r9[0x0],r10
800045be:	17 89       	ld.ub	r9,r11[0x0]
800045c0:	b8 89       	st.b	r12[0x0],r9
800045c2:	e0 69 06 24 	mov	r9,1572
800045c6:	b2 08       	st.h	r9[0x0],r8
800045c8:	17 98       	ld.ub	r8,r11[0x1]
800045ca:	b8 98       	st.b	r12[0x1],r8
					w.wp[x].loop_len = w.wp[pattern].loop_len;
					w.wp[x].loop_dir = w.wp[pattern].loop_dir;

					pattern = x;
					next_pattern = x;
					monomeFrameDirty++;
800045cc:	e0 68 1a 97 	mov	r8,6807
800045d0:	b0 82       	st.b	r8[0x0],r2
800045d2:	17 a8       	ld.ub	r8,r11[0x2]
					}

					w.wp[x].cv_mode[0] = w.wp[pattern].cv_mode[0];
					w.wp[x].cv_mode[1] = w.wp[pattern].cv_mode[1];

					w.wp[x].loop_start = w.wp[pattern].loop_start;
800045d4:	b8 a8       	st.b	r12[0x2],r8
800045d6:	17 b8       	ld.ub	r8,r11[0x3]
		if(--key_times[held_keys[i1]]==0) {
			if(edit_mode != mSeries && preset_mode == 0) {
				// preset copy
				if(held_keys[i1] / 16 == 2) {
					x = held_keys[i1] % 16;
					for(n1=0;n1<16;n1++) {
800045d8:	b8 b8       	st.b	r12[0x3],r8
800045da:	e0 68 1a c0 	mov	r8,6848

					w.wp[x].cv_mode[0] = w.wp[pattern].cv_mode[0];
					w.wp[x].cv_mode[1] = w.wp[pattern].cv_mode[1];

					w.wp[x].loop_start = w.wp[pattern].loop_start;
					w.wp[x].loop_end = w.wp[pattern].loop_end;
800045de:	b0 82       	st.b	r8[0x0],r2
					w.wp[x].loop_len = w.wp[pattern].loop_len;
					w.wp[x].loop_dir = w.wp[pattern].loop_dir;

					pattern = x;
800045e0:	c1 58       	rjmp	8000460a <handler_KeyTimer+0x216>
800045e2:	0b 88       	ld.ub	r8,r5[0x0]
					w.wp[x].cv_mode[0] = w.wp[pattern].cv_mode[0];
					w.wp[x].cv_mode[1] = w.wp[pattern].cv_mode[1];

					w.wp[x].loop_start = w.wp[pattern].loop_start;
					w.wp[x].loop_end = w.wp[pattern].loop_end;
					w.wp[x].loop_len = w.wp[pattern].loop_len;
800045e4:	30 19       	mov	r9,1
800045e6:	f2 08 18 00 	cp.b	r8,r9
					w.wp[x].loop_dir = w.wp[pattern].loop_dir;
800045ea:	c1 01       	brne	8000460a <handler_KeyTimer+0x216>

					pattern = x;
					next_pattern = x;
800045ec:	e7 d2 c0 04 	bfextu	r3,r2,0x0,0x4
800045f0:	c0 d1       	brne	8000460a <handler_KeyTimer+0x216>

					// print_dbg("\r\n saved pattern: ");
					// print_dbg_ulong(x);
				}
			}
			else if(preset_mode == 1) {
800045f2:	e0 69 0a fc 	mov	r9,2812
800045f6:	e0 68 05 dc 	mov	r8,1500
800045fa:	a5 82       	lsr	r2,0x4
				if(held_keys[i1] % 16 == 0) {
800045fc:	b2 82       	st.b	r9[0x0],r2
800045fe:	30 59       	mov	r9,5
80004600:	10 9c       	mov	r12,r8
					preset_select = held_keys[i1] / 16;
80004602:	91 09       	st.w	r8[0x0],r9
					// flash_write();
					static event_t e;
					e.type = kEventSaveFlash;
80004604:	e0 a0 06 d4 	rcall	800053ac <event_post>
					// print_dbg_ulong(x);
				}
			}
			else if(preset_mode == 1) {
				if(held_keys[i1] % 16 == 0) {
					preset_select = held_keys[i1] / 16;
80004608:	aa 83       	st.b	r5[0x0],r3
					// flash_write();
					static event_t e;
					e.type = kEventSaveFlash;
8000460a:	88 08       	ld.sh	r8,r4[0x0]
					event_post(&e);
8000460c:	2f f8       	sub	r8,-1
			else if(preset_mode == 1) {
				if(held_keys[i1] % 16 == 0) {
					preset_select = held_keys[i1] / 16;
					// flash_write();
					static event_t e;
					e.type = kEventSaveFlash;
8000460e:	a8 08       	st.h	r4[0x0],r8
					event_post(&e);
80004610:	e0 6e 1a a5 	mov	lr,6821
					preset_mode = 0;
80004614:	88 08       	ld.sh	r8,r4[0x0]
			front_timer--;
		}
		else front_timer--;
	}

	for(i1=0;i1<key_count;i1++) {
80004616:	1d 89       	ld.ub	r9,lr[0x0]
80004618:	f0 09 19 00 	cp.h	r9,r8
8000461c:	fe 9b ff 13 	brhi	80004442 <handler_KeyTimer+0x4e>
80004620:	2f 1d       	sub	sp,-60
80004622:	d8 32       	popm	r0-r7,pc

80004624 <adcTimer_callback>:
80004624:	d4 01       	pushm	lr
80004626:	30 39       	mov	r9,3
80004628:	e0 68 05 b8 	mov	r8,1464

			// print_dbg("\rlong press: "); 
			// print_dbg_ulong(held_keys[i1]);
		}
	}
}
8000462c:	91 09       	st.w	r8[0x0],r9
8000462e:	30 09       	mov	r9,0
80004630:	10 9c       	mov	r12,r8
80004632:	91 19       	st.w	r8[0x4],r9
80004634:	e0 a0 06 bc 	rcall	800053ac <event_post>
80004638:	d8 02       	popm	pc
8000463a:	d7 03       	nop

8000463c <keyTimer_callback>:
8000463c:	d4 01       	pushm	lr
8000463e:	30 49       	mov	r9,4
80004640:	e0 68 05 d4 	mov	r8,1492
80004644:	91 09       	st.w	r8[0x0],r9
80004646:	30 09       	mov	r9,0
80004648:	10 9c       	mov	r12,r8
8000464a:	91 19       	st.w	r8[0x4],r9
8000464c:	e0 a0 06 b0 	rcall	800053ac <event_post>
static void keyTimer_callback(void* o) {  
	static event_t e;
	e.type = kEventKeyTimer;
	e.data = 0;
	event_post(&e);
}
80004650:	d8 02       	popm	pc
80004652:	d7 03       	nop

80004654 <monome_refresh_timer_callback>:
80004654:	d4 01       	pushm	lr
80004656:	e0 68 07 61 	mov	r8,1889
	ftdi_read();
}

// monome refresh callback
static void monome_refresh_timer_callback(void* obj) {
	if(monomeFrameDirty > 0) {
8000465a:	11 89       	ld.ub	r9,r8[0x0]
8000465c:	30 08       	mov	r8,0
8000465e:	f0 09 18 00 	cp.b	r9,r8
		static event_t e;
		e.type = kEventMonomeRefresh;
80004662:	c0 80       	breq	80004672 <monome_refresh_timer_callback+0x1e>
80004664:	e0 68 05 c4 	mov	r8,1476
80004668:	30 b9       	mov	r9,11
		event_post(&e);
8000466a:	10 9c       	mov	r12,r8
8000466c:	91 09       	st.w	r8[0x0],r9
8000466e:	e0 a0 06 9f 	rcall	800053ac <event_post>
80004672:	d8 02       	popm	pc

80004674 <handler_PollADC>:
80004674:	d4 21       	pushm	r4-r7,lr
80004676:	e0 67 1a 9c 	mov	r7,6812
8000467a:	0e 9c       	mov	r12,r7
	monomeFrameDirty++;
}

static void handler_PollADC(s32 data) {
	u16 i;
	adc_convert(&adc);
8000467c:	e0 a0 06 0a 	rcall	80005290 <adc_convert>

	// CLOCK POT INPUT
	i = adc[0];
	i = i>>2;
80004680:	e0 68 1a c8 	mov	r8,6856
80004684:	8e 87       	ld.uh	r7,r7[0x0]
	if(i != clock_temp) {
80004686:	90 08       	ld.sh	r8,r8[0x0]
80004688:	a3 87       	lsr	r7,0x2
8000468a:	ee 08 19 00 	cp.h	r8,r7
		// 1000ms - 24ms
		clock_time = 25000 / (i + 25);
8000468e:	c1 00       	breq	800046ae <handler_PollADC+0x3a>
80004690:	ee c9 ff e7 	sub	r9,r7,-25
80004694:	e0 68 61 a8 	mov	r8,25000
80004698:	f0 09 0c 08 	divs	r8,r8,r9
		// print_dbg("\r\nnew clock (ms): ");
		// print_dbg_ulong(clock_time);

		timer_set(&clockTimer, clock_time);
8000469c:	e0 69 1a c2 	mov	r9,6850
	// CLOCK POT INPUT
	i = adc[0];
	i = i>>2;
	if(i != clock_temp) {
		// 1000ms - 24ms
		clock_time = 25000 / (i + 25);
800046a0:	e0 6c 06 0c 	mov	r12,1548
		// print_dbg("\r\nnew clock (ms): ");
		// print_dbg_ulong(clock_time);

		timer_set(&clockTimer, clock_time);
800046a4:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
	}
	clock_temp = i;
800046a8:	b2 08       	st.h	r9[0x0],r8

	// PARAM POT INPUT
	if(param_accept && edit_prob) {
800046aa:	e0 a0 0c cb 	rcall	80006040 <timer_set>
800046ae:	e0 68 1a c8 	mov	r8,6856
800046b2:	b0 07       	st.h	r8[0x0],r7
800046b4:	30 09       	mov	r9,0
800046b6:	e0 68 1a b4 	mov	r8,6836
800046ba:	11 88       	ld.ub	r8,r8[0x0]
800046bc:	f2 08 18 00 	cp.b	r8,r9
800046c0:	c1 a0       	breq	800046f4 <handler_PollADC+0x80>
		*param_dest8 = adc[1] >> 4; // scale to 0-255;
800046c2:	e0 68 1a bd 	mov	r8,6845
800046c6:	11 8a       	ld.ub	r10,r8[0x0]
800046c8:	e0 68 1a 9c 	mov	r8,6812
		// print_dbg_ulong(*param_dest8);
		// print_dbg("\t" );
		// print_dbg_ulong(adc[1]);
	}
	else if(param_accept) {
		*param_dest = adc[1];
800046cc:	f2 0a 18 00 	cp.b	r10,r9
800046d0:	c0 70       	breq	800046de <handler_PollADC+0x6a>
800046d2:	90 99       	ld.uh	r9,r8[0x2]
		monomeFrameDirty++;
800046d4:	e0 68 1a b8 	mov	r8,6840
800046d8:	a5 89       	lsr	r9,0x4
800046da:	70 08       	ld.w	r8,r8[0x0]
800046dc:	c0 a8       	rjmp	800046f0 <handler_PollADC+0x7c>
	}
	else if(scroll) {
800046de:	90 19       	ld.sh	r9,r8[0x2]
800046e0:	e0 68 0a f0 	mov	r8,2800
800046e4:	70 08       	ld.w	r8,r8[0x0]
800046e6:	b0 09       	st.h	r8[0x0],r9
		i = adc[1]>>6;
800046e8:	e0 68 07 61 	mov	r8,1889
800046ec:	11 89       	ld.ub	r9,r8[0x0]
800046ee:	2f f9       	sub	r9,-1
800046f0:	b0 89       	st.b	r8[0x0],r9
800046f2:	d8 22       	popm	r4-r7,pc
800046f4:	e0 69 1a b1 	mov	r9,6833
		if(i > 58) i = 58;
		if(i != scroll_pos) {
800046f8:	13 89       	ld.ub	r9,r9[0x0]
800046fa:	f0 09 18 00 	cp.b	r9,r8
800046fe:	c1 60       	breq	8000472a <handler_PollADC+0xb6>
80004700:	e0 68 1a 9c 	mov	r8,6812
			scroll_pos = i;
			monomeFrameDirty++;
80004704:	90 99       	ld.uh	r9,r8[0x2]
80004706:	33 a8       	mov	r8,58
80004708:	a7 89       	lsr	r9,0x6
8000470a:	f2 08 19 00 	cp.h	r8,r9
8000470e:	f9 b9 03 3a 	movlo	r9,58
80004712:	e0 68 1a bf 	mov	r8,6847
80004716:	11 8a       	ld.ub	r10,r8[0x0]
80004718:	f2 0a 19 00 	cp.h	r10,r9
8000471c:	c0 70       	breq	8000472a <handler_PollADC+0xb6>
8000471e:	b0 89       	st.b	r8[0x0],r9
80004720:	e0 68 07 61 	mov	r8,1889
80004724:	11 89       	ld.ub	r9,r8[0x0]
80004726:	2f f9       	sub	r9,-1
80004728:	b0 89       	st.b	r8[0x0],r9
8000472a:	d8 22       	popm	r4-r7,pc

8000472c <main>:
8000472c:	d4 31       	pushm	r0-r7,lr
8000472e:	20 2d       	sub	sp,8
80004730:	e0 a0 21 84 	rcall	80008a38 <sysclk_init>
80004734:	e0 6c 87 00 	mov	r12,34560
80004738:	ea 1c 03 93 	orh	r12,0x393
8000473c:	e0 a0 1e 18 	rcall	8000836c <init_dbg_rs232>
80004740:	e0 a0 06 f4 	rcall	80005528 <init_gpio>
}


// assign event handlers
static inline void assign_main_event_handlers(void) {
	app_event_handlers[ kEventFront ]	= &handler_Front;
80004744:	fe c9 26 30 	sub	r9,pc,9776
80004748:	e0 68 1a d0 	mov	r8,6864
	// app_event_handlers[ kEventTimer ]	= &handler_Timer;
	app_event_handlers[ kEventPollADC ]	= &handler_PollADC;
8000474c:	91 19       	st.w	r8[0x4],r9
	app_event_handlers[ kEventKeyTimer ] = &handler_KeyTimer;
8000474e:	fe c9 00 da 	sub	r9,pc,218
	app_event_handlers[ kEventSaveFlash ] = &handler_SaveFlash;
80004752:	91 39       	st.w	r8[0xc],r9
80004754:	fe c9 03 60 	sub	r9,pc,864
	app_event_handlers[ kEventFtdiConnect ]	= &handler_FtdiConnect ;
80004758:	91 49       	st.w	r8[0x10],r9
	app_event_handlers[ kEventFtdiDisconnect ]	= &handler_FtdiDisconnect ;
8000475a:	fe c9 24 32 	sub	r9,pc,9266
	app_event_handlers[ kEventMonomeConnect ]	= &handler_MonomeConnect ;
8000475e:	91 59       	st.w	r8[0x14],r9
80004760:	fe c9 03 74 	sub	r9,pc,884
	app_event_handlers[ kEventMonomeDisconnect ]	= &handler_None ;
80004764:	91 69       	st.w	r8[0x18],r9
	app_event_handlers[ kEventMonomePoll ]	= &handler_MonomePoll ;
80004766:	fe c9 f5 62 	sub	r9,pc,-2718
	app_event_handlers[ kEventMonomeRefresh ]	= &handler_MonomeRefresh ;
8000476a:	91 79       	st.w	r8[0x1c],r9
8000476c:	fe c9 03 f0 	sub	r9,pc,1008
	app_event_handlers[ kEventMonomeGridKey ]	= &handler_MonomeGridKey ;
80004770:	91 89       	st.w	r8[0x20],r9

	init_dbg_rs232(FMCK_HZ);

	init_gpio();
	assign_main_event_handlers();
	init_events();
80004772:	fe c9 26 9e 	sub	r9,pc,9886
	init_tc();
80004776:	91 99       	st.w	r8[0x24],r9
80004778:	fe c9 26 70 	sub	r9,pc,9840
	init_spi();
8000477c:	91 a9       	st.w	r8[0x28],r9
	init_adc();
8000477e:	fe c9 13 9e 	sub	r9,pc,5022

	irq_initialize_vectors();
80004782:	91 b9       	st.w	r8[0x2c],r9
80004784:	fe c9 24 30 	sub	r9,pc,9264
	register_interrupts();
80004788:	91 c9       	st.w	r8[0x30],r9
	cpu_irq_enable();
8000478a:	e0 a0 05 ff 	rcall	80005388 <init_events>

	init_usb_host();
8000478e:	e0 a0 06 b1 	rcall	800054f0 <init_tc>
	init_monome();
80004792:	e0 a0 06 5f 	rcall	80005450 <init_spi>


	print_dbg("\r\n\n// white whale //////////////////////////////// ");
80004796:	e0 a0 05 3f 	rcall	80005214 <init_adc>
	print_dbg_ulong(sizeof(flashy));
8000479a:	e0 a0 11 b5 	rcall	80006b04 <INTC_init_interrupts>
8000479e:	e0 a0 06 ed 	rcall	80005578 <register_interrupts>

	print_dbg(" ");
800047a2:	d5 03       	csrf	0x10
800047a4:	e0 a0 06 52 	rcall	80005448 <init_usb_host>
	print_dbg_ulong(sizeof(w));
800047a8:	e0 a0 07 7a 	rcall	8000569c <init_monome>
800047ac:	fe cc aa 68 	sub	r12,pc,-21912

	print_dbg(" ");
800047b0:	e0 a0 1d bc 	rcall	80008328 <print_dbg>
800047b4:	e0 6c 7c 8c 	mov	r12,31884
	print_dbg_ulong(sizeof(glyph));
800047b8:	e0 a0 1d b2 	rcall	8000831c <print_dbg_ulong>

	if(flash_is_fresh()) {
800047bc:	fe cc aa 44 	sub	r12,pc,-21948
800047c0:	e0 a0 1d b4 	rcall	80008328 <print_dbg>
800047c4:	e0 6c 0f 88 	mov	r12,3976
800047c8:	e0 a0 1d aa 	rcall	8000831c <print_dbg_ulong>
		print_dbg("\r\nfirst run.");
800047cc:	fe cc aa 54 	sub	r12,pc,-21932
		flash_unfresh();
800047d0:	e0 a0 1d ac 	rcall	80008328 <print_dbg>
		flashc_memset8((void*)&(flashy.edit_mode), mTrig, 4, true);
800047d4:	30 8c       	mov	r12,8
800047d6:	e0 a0 1d a3 	rcall	8000831c <print_dbg_ulong>
800047da:	32 28       	mov	r8,34
800047dc:	49 57       	lddpc	r7,80004830 <main+0x104>
800047de:	0f 89       	ld.ub	r9,r7[0x0]
800047e0:	f0 09 18 00 	cp.b	r9,r8
		flashc_memset32((void*)&(flashy.preset_select), 0, 4, true);
800047e4:	e0 80 00 a6 	breq	80004930 <main+0x204>
800047e8:	fe cc aa 6c 	sub	r12,pc,-21908
800047ec:	e0 a0 1d 9e 	rcall	80008328 <print_dbg>


		// clear out some reasonable defaults
		for(i1=0;i1<16;i1++) {
800047f0:	fe b0 ed 62 	rcall	800022b4 <flash_unfresh>

	if(flash_is_fresh()) {
		print_dbg("\r\nfirst run.");
		flash_unfresh();
		flashc_memset8((void*)&(flashy.edit_mode), mTrig, 4, true);
		flashc_memset32((void*)&(flashy.preset_select), 0, 4, true);
800047f4:	30 4a       	mov	r10,4
800047f6:	30 19       	mov	r9,1


		// clear out some reasonable defaults
		for(i1=0;i1<16;i1++) {
800047f8:	ee 0a 00 0c 	add	r12,r7,r10

	if(flash_is_fresh()) {
		print_dbg("\r\nfirst run.");
		flash_unfresh();
		flashc_memset8((void*)&(flashy.edit_mode), mTrig, 4, true);
		flashc_memset32((void*)&(flashy.preset_select), 0, 4, true);
800047fc:	30 0b       	mov	r11,0
800047fe:	e0 a0 10 49 	rcall	80006890 <flashc_memset8>


		// clear out some reasonable defaults
		for(i1=0;i1<16;i1++) {
			for(i2=0;i2<16;i2++) {
				w.wp[i1].steps[i2] = 0;
80004802:	ee cc ff f8 	sub	r12,r7,-8
80004806:	30 19       	mov	r9,1
				w.wp[i1].step_probs[i2] = 255;
				w.wp[i1].cv_probs[0][i2] = 255;
				w.wp[i1].cv_probs[1][i2] = 255;
				w.wp[i1].cv_curves[0][i2] = 0;
80004808:	30 4a       	mov	r10,4
8000480a:	30 0b       	mov	r11,0
8000480c:	e0 a0 10 30 	rcall	8000686c <flashc_memset32>
80004810:	fe c8 ad f8 	sub	r8,pc,-21000
80004814:	2c 08       	sub	r8,-64
80004816:	30 09       	mov	r9,0
80004818:	e0 63 0b 04 	mov	r3,2820
8000481c:	50 18       	stdsp	sp[0x4],r8
8000481e:	12 96       	mov	r6,r9
80004820:	e6 c5 ff fc 	sub	r5,r3,-4
80004824:	06 98       	mov	r8,r3
80004826:	12 97       	mov	r7,r9
80004828:	3f fe       	mov	lr,-1
8000482a:	12 90       	mov	r0,r9
8000482c:	12 91       	mov	r1,r9
8000482e:	c3 18       	rjmp	80004890 <main+0x164>
80004830:	80 03       	ld.sh	r3,r0[0x0]
80004832:	00 00       	add	r0,r0
80004834:	b8 87       	st.b	r12[0x0],r7
80004836:	f9 6e 00 10 	st.b	r12[16],lr
8000483a:	f9 6e 00 c0 	st.b	r12[192],lr
8000483e:	f9 6e 00 d0 	st.b	r12[208],lr
80004842:	30 18       	mov	r8,1
80004844:	f0 04 09 4a 	lsl	r10,r8,r4
80004848:	b6 06       	st.h	r11[0x0],r6
8000484a:	f7 5a ff e0 	st.h	r11[-32],r10
8000484e:	f7 5a ff c0 	st.h	r11[-64],r10
80004852:	f7 56 00 20 	st.h	r11[32],r6
80004856:	05 1a       	ld.sh	r10,r2++
80004858:	f7 5a ff a0 	st.h	r11[-96],r10
8000485c:	10 04       	add	r4,r8
8000485e:	10 0c       	add	r12,r8
80004860:	2f eb       	sub	r11,-2
80004862:	10 9a       	mov	r10,r8
80004864:	59 04       	cp.w	r4,16
80004866:	ce 71       	brne	80004834 <main+0x108>
80004868:	40 08       	lddsp	r8,sp[0x0]
8000486a:	30 fb       	mov	r11,15
8000486c:	aa 01       	st.h	r5[0x0],r1
8000486e:	b0 ab       	st.b	r8[0x2],r11
80004870:	b0 9b       	st.b	r8[0x1],r11
80004872:	b0 80       	st.b	r8[0x0],r0
80004874:	b0 b6       	st.b	r8[0x3],r6
80004876:	30 0b       	mov	r11,0
80004878:	91 3b       	st.w	r8[0xc],r11
8000487a:	aa a7       	st.b	r5[0x2],r7
8000487c:	b0 f7       	st.b	r8[0x7],r7
8000487e:	f1 67 00 08 	st.b	r8[8],r7
80004882:	14 09       	add	r9,r10
80004884:	ea c5 ff 10 	sub	r5,r5,-240
80004888:	f0 c8 ff 10 	sub	r8,r8,-240
8000488c:	59 09       	cp.w	r9,16
8000488e:	c1 20       	breq	800048b2 <main+0x186>
80004890:	e0 6a 0b 04 	mov	r10,2820


		// clear out some reasonable defaults
		for(i1=0;i1<16;i1++) {
			for(i2=0;i2<16;i2++) {
				w.wp[i1].steps[i2] = 0;
80004894:	f2 0c 15 04 	lsl	r12,r9,0x4
				w.wp[i1].step_probs[i2] = 255;
80004898:	40 12       	lddsp	r2,sp[0x4]
				w.wp[i1].cv_probs[0][i2] = 255;
8000489a:	12 1c       	sub	r12,r9
8000489c:	30 04       	mov	r4,0
				w.wp[i1].cv_probs[1][i2] = 255;
8000489e:	f8 0b 15 04 	lsl	r11,r12,0x4
				w.wp[i1].cv_curves[0][i2] = 0;
				w.wp[i1].cv_curves[1][i2] = 0;
				w.wp[i1].cv_values[i2] = SCALES[2][i2];
				w.wp[i1].cv_steps[0][i2] = 1<<i2;
800048a2:	50 08       	stdsp	sp[0x0],r8
800048a4:	f6 cb ff 70 	sub	r11,r11,-144
			for(i2=0;i2<16;i2++) {
				w.wp[i1].steps[i2] = 0;
				w.wp[i1].step_probs[i2] = 255;
				w.wp[i1].cv_probs[0][i2] = 255;
				w.wp[i1].cv_probs[1][i2] = 255;
				w.wp[i1].cv_curves[0][i2] = 0;
800048a8:	2f fc       	sub	r12,-1
				w.wp[i1].cv_curves[1][i2] = 0;
				w.wp[i1].cv_values[i2] = SCALES[2][i2];
				w.wp[i1].cv_steps[0][i2] = 1<<i2;
				w.wp[i1].cv_steps[1][i2] = 1<<i2;
800048aa:	14 0b       	add	r11,r10
800048ac:	a5 6c       	lsl	r12,0x4
				w.wp[i1].cv_probs[0][i2] = 255;
				w.wp[i1].cv_probs[1][i2] = 255;
				w.wp[i1].cv_curves[0][i2] = 0;
				w.wp[i1].cv_curves[1][i2] = 0;
				w.wp[i1].cv_values[i2] = SCALES[2][i2];
				w.wp[i1].cv_steps[0][i2] = 1<<i2;
800048ae:	14 0c       	add	r12,r10
800048b0:	cc 2b       	rjmp	80004834 <main+0x108>
				w.wp[i1].steps[i2] = 0;
				w.wp[i1].step_probs[i2] = 255;
				w.wp[i1].cv_probs[0][i2] = 255;
				w.wp[i1].cv_probs[1][i2] = 255;
				w.wp[i1].cv_curves[0][i2] = 0;
				w.wp[i1].cv_curves[1][i2] = 0;
800048b2:	e0 68 0b 04 	mov	r8,2820
				w.wp[i1].cv_values[i2] = SCALES[2][i2];
800048b6:	14 9b       	mov	r11,r10
800048b8:	f1 6a 0f 82 	st.b	r8[3970],r10
				w.wp[i1].cv_steps[0][i2] = 1<<i2;
				w.wp[i1].cv_steps[1][i2] = 1<<i2;
800048bc:	f1 6a 0f 83 	st.b	r8[3971],r10
800048c0:	f1 6a 0f 84 	st.b	r8[3972],r10
		flashc_memset32((void*)&(flashy.preset_select), 0, 4, true);


		// clear out some reasonable defaults
		for(i1=0;i1<16;i1++) {
			for(i2=0;i2<16;i2++) {
800048c4:	f1 6a 0f 85 	st.b	r8[3973],r10
800048c8:	f1 6a 0f 86 	st.b	r8[3974],r10
				w.wp[i1].cv_curves[1][i2] = 0;
				w.wp[i1].cv_values[i2] = SCALES[2][i2];
				w.wp[i1].cv_steps[0][i2] = 1<<i2;
				w.wp[i1].cv_steps[1][i2] = 1<<i2;
			}
			w.wp[i1].step_choice = 0;
800048cc:	f1 6a 0f 87 	st.b	r8[3975],r10
			w.wp[i1].loop_end = 15;
800048d0:	e6 c3 f0 80 	sub	r3,r3,-3968
			w.wp[i1].loop_len = 15;
			w.wp[i1].loop_start = 0;
			w.wp[i1].loop_dir = 0;
800048d4:	30 3a       	mov	r10,3
			w.wp[i1].step_mode = mForward;
800048d6:	f1 67 0f 80 	st.b	r8[3968],r7
			w.wp[i1].cv_mode[0] = 0;
800048da:	f0 c9 f1 00 	sub	r9,r8,-3840
			w.wp[i1].cv_mode[1] = 0;
			w.wp[i1].tr_mode = 0;
800048de:	f1 6a 0f 81 	st.b	r8[3969],r10
800048e2:	12 bb       	st.h	r9++,r11
800048e4:	06 39       	cp.w	r9,r3
800048e6:	cf e1       	brne	800048e2 <main+0x1b6>
800048e8:	49 16       	lddpc	r6,8000492c <main+0x200>
800048ea:	30 07       	mov	r7,0
		flashc_memset8((void*)&(flashy.edit_mode), mTrig, 4, true);
		flashc_memset32((void*)&(flashy.preset_select), 0, 4, true);


		// clear out some reasonable defaults
		for(i1=0;i1<16;i1++) {
800048ec:	ec c5 ff f7 	sub	r5,r6,-9
800048f0:	30 14       	mov	r4,1
800048f2:	2b 46       	sub	r6,-76
800048f4:	e0 63 1a a8 	mov	r3,6824
800048f8:	30 19       	mov	r9,1
800048fa:	e0 6a 0f 88 	mov	r10,3976
800048fe:	e0 6b 0b 04 	mov	r11,2820
80004902:	0c 9c       	mov	r12,r6
80004904:	e0 a0 0f cc 	rcall	8000689c <flashc_memcpy>
80004908:	e8 07 09 48 	lsl	r8,r4,r7
8000490c:	0a 9c       	mov	r12,r5
8000490e:	e6 07 0b 08 	st.b	r3[r7],r8
		w.tr_mute[3] = 1;
		w.cv_mute[0] = 1;
		w.cv_mute[1] = 1;

		for(i1=0;i1<64;i1++)
			w.series_list[i1] = 1;
80004912:	ec c6 f0 78 	sub	r6,r6,-3976
		}

		w.series_start = 0;
		w.series_end = 3;

		w.tr_mute[0] = 1;
80004916:	2f f7       	sub	r7,-1
		w.tr_mute[1] = 1;
80004918:	2f 85       	sub	r5,-8
8000491a:	30 19       	mov	r9,1
		w.tr_mute[2] = 1;
8000491c:	30 8a       	mov	r10,8
8000491e:	e0 6b 1a a8 	mov	r11,6824
		w.tr_mute[3] = 1;
80004922:	e0 a0 0f bd 	rcall	8000689c <flashc_memcpy>
		w.cv_mute[0] = 1;
80004926:	58 87       	cp.w	r7,8
		w.cv_mute[1] = 1;
80004928:	ce 81       	brne	800048f8 <main+0x1cc>
8000492a:	c1 b8       	rjmp	80004960 <main+0x234>
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// main

int main(void)
8000492c:	80 03       	ld.sh	r3,r0[0x0]
8000492e:	00 00       	add	r0,r0
			w.wp[i1].cv_mode[1] = 0;
			w.wp[i1].tr_mode = 0;
		}

		w.series_start = 0;
		w.series_end = 3;
80004930:	ef 38 00 08 	ld.ub	r8,r7[8]
			w.wp[i1].cv_mode[0] = 0;
			w.wp[i1].cv_mode[1] = 0;
			w.wp[i1].tr_mode = 0;
		}

		w.series_start = 0;
80004934:	6e 19       	ld.w	r9,r7[0x4]
		w.tr_mute[0] = 1;
		w.tr_mute[1] = 1;
		w.tr_mute[2] = 1;
		w.tr_mute[3] = 1;
		w.cv_mute[0] = 1;
		w.cv_mute[1] = 1;
80004936:	e0 66 0a fc 	mov	r6,2812
			w.wp[i1].cv_mode[1] = 0;
			w.wp[i1].tr_mode = 0;
		}

		w.series_start = 0;
		w.series_end = 3;
8000493a:	ac 88       	st.b	r6[0x0],r8
8000493c:	e0 68 1a c4 	mov	r8,6852
		w.tr_mute[2] = 1;
		w.tr_mute[3] = 1;
		w.cv_mute[0] = 1;
		w.cv_mute[1] = 1;

		for(i1=0;i1<64;i1++)
80004940:	91 09       	st.w	r8[0x0],r9
80004942:	fe b0 ec 07 	rcall	80002150 <flash_read>
80004946:	0d 88       	ld.ub	r8,r6[0x0]
80004948:	2f f8       	sub	r8,-1
8000494a:	ee 08 00 37 	add	r7,r7,r8<<0x3
8000494e:	e0 68 1a a8 	mov	r8,6824
			w.series_list[i1] = 1;

		// save all presets, clear glyphs
		for(i1=0;i1<8;i1++) {
			flashc_memcpy((void *)&flashy.w[i1], &w, sizeof(w), true);
80004952:	2f f7       	sub	r7,-1
80004954:	f0 c9 ff f8 	sub	r9,r8,-8
80004958:	0f 3a       	ld.ub	r10,r7++
8000495a:	10 ca       	st.b	r8++,r10
8000495c:	12 38       	cp.w	r8,r9
8000495e:	cf d1       	brne	80004958 <main+0x22c>
			glyph[i1] = (1<<i1);
80004960:	30 f9       	mov	r9,15
80004962:	e0 68 0a ff 	mov	r8,2815
80004966:	b0 89       	st.b	r8[0x0],r9
80004968:	31 09       	mov	r9,16
			flashc_memcpy((void *)&flashy.glyph[i1], &glyph, sizeof(glyph), true);
8000496a:	e0 68 0a ec 	mov	r8,2796
8000496e:	b0 89       	st.b	r8[0x0],r9
80004970:	fe c9 0f 14 	sub	r9,pc,3860
80004974:	e0 68 0a f8 	mov	r8,2808
80004978:	91 09       	st.w	r8[0x0],r9
8000497a:	fe c9 ff 8e 	sub	r9,pc,-114

		for(i1=0;i1<64;i1++)
			w.series_list[i1] = 1;

		// save all presets, clear glyphs
		for(i1=0;i1<8;i1++) {
8000497e:	31 c8       	mov	r8,28
80004980:	32 9c       	mov	r12,41
80004982:	91 09       	st.w	r8[0x0],r9
80004984:	e0 a0 10 2d 	rcall	800069de <gpio_get_pin_value>
80004988:	e0 68 1b 08 	mov	r8,6920
8000498c:	ec 1c 00 01 	eorl	r12,0x1
80004990:	30 09       	mov	r9,0
80004992:	b0 8c       	st.b	r8[0x0],r12
			flashc_memcpy((void *)&flashy.glyph[i1], &glyph, sizeof(glyph), true);
		}
	}
	else {
		// load from flash at startup
		preset_select = flashy.preset_select;
80004994:	fe ca 28 bc 	sub	r10,pc,10428
		edit_mode = flashy.edit_mode;
80004998:	37 8b       	mov	r11,120
			flashc_memcpy((void *)&flashy.glyph[i1], &glyph, sizeof(glyph), true);
		}
	}
	else {
		// load from flash at startup
		preset_select = flashy.preset_select;
8000499a:	e0 6c 06 0c 	mov	r12,1548
		edit_mode = flashy.edit_mode;
8000499e:	e0 a0 0b 8d 	rcall	800060b8 <timer_add>
		flash_read();
800049a2:	30 09       	mov	r9,0
800049a4:	fe ca 03 68 	sub	r10,pc,872
800049a8:	33 2b       	mov	r11,50
800049aa:	e0 6c 05 a0 	mov	r12,1440
800049ae:	e0 a0 0b 85 	rcall	800060b8 <timer_add>
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// main

int main(void)
800049b2:	30 09       	mov	r9,0
800049b4:	fe ca 03 90 	sub	r10,pc,912
		// load from flash at startup
		preset_select = flashy.preset_select;
		edit_mode = flashy.edit_mode;
		flash_read();
		for(i1=0;i1<8;i1++)
			glyph[i1] = flashy.glyph[preset_select][i1];
800049b8:	36 4b       	mov	r11,100
	else {
		// load from flash at startup
		preset_select = flashy.preset_select;
		edit_mode = flashy.edit_mode;
		flash_read();
		for(i1=0;i1<8;i1++)
800049ba:	e0 6c 05 84 	mov	r12,1412
			glyph[i1] = flashy.glyph[preset_select][i1];
	}

	LENGTH = 15;
800049be:	e0 a0 0b 7d 	rcall	800060b8 <timer_add>
800049c2:	e0 69 27 10 	mov	r9,10000
	SIZE = 16;
800049c6:	e0 68 1a c8 	mov	r8,6856

	re = &refresh;
800049ca:	e0 67 06 04 	mov	r7,1540
800049ce:	b0 09       	st.h	r8[0x0],r9

	clock_pulse = &clock;
800049d0:	e0 66 1a d0 	mov	r6,6864
	clock_external = !gpio_get_pin_value(B09);
800049d4:	e0 6c 06 04 	mov	r12,1540
800049d8:	e0 a0 05 12 	rcall	800053fc <event_next>
800049dc:	cf c0       	breq	800049d4 <main+0x2a8>
800049de:	6e 08       	ld.w	r8,r7[0x0]
800049e0:	6e 1c       	ld.w	r12,r7[0x4]

	timer_add(&clockTimer,120,&clockTimer_callback, NULL);
800049e2:	ec 08 03 28 	ld.w	r8,r6[r8<<0x2]
800049e6:	5d 18       	icall	r8
800049e8:	cf 6b       	rjmp	800049d4 <main+0x2a8>
800049ea:	d7 03       	nop

800049ec <clock>:
800049ec:	d4 21       	pushm	r4-r7,lr
800049ee:	18 97       	mov	r7,r12
	timer_add(&keyTimer,50,&keyTimer_callback, NULL);
800049f0:	58 0c       	cp.w	r12,0
800049f2:	e0 80 03 df 	breq	800051b0 <clock+0x7c4>
800049f6:	32 ac       	mov	r12,42
800049f8:	e0 a0 0f fe 	rcall	800069f4 <gpio_set_gpio_pin>
	timer_add(&adcTimer,100,&adcTimer_callback, NULL);
800049fc:	e0 68 1a b2 	mov	r8,6834
80004a00:	30 09       	mov	r9,0
80004a02:	11 8a       	ld.ub	r10,r8[0x0]
80004a04:	f2 0a 18 00 	cp.b	r10,r9
	clock_temp = 10000; // out of ADC range to force tempo
80004a08:	c0 80       	breq	80004a18 <clock+0x2c>
80004a0a:	b0 89       	st.b	r8[0x0],r9
80004a0c:	e0 68 1a c0 	mov	r8,6848
80004a10:	11 89       	ld.ub	r9,r8[0x0]

// app event loop
void check_events(void) {
	static event_t e;
	if( event_next(&e) ) {
		(app_event_handlers)[e.type](e.data);
80004a12:	e0 68 1a 97 	mov	r8,6807
}

// app event loop
void check_events(void) {
	static event_t e;
	if( event_next(&e) ) {
80004a16:	b0 89       	st.b	r8[0x0],r9
80004a18:	e0 68 1a ca 	mov	r8,6858
		(app_event_handlers)[e.type](e.data);
80004a1c:	11 89       	ld.ub	r9,r8[0x0]
80004a1e:	30 08       	mov	r8,0
80004a20:	f0 09 18 00 	cp.b	r9,r8
80004a24:	c6 70       	breq	80004af2 <clock+0x106>
80004a26:	e0 6a 0a fd 	mov	r10,2813
80004a2a:	e0 68 0b 00 	mov	r8,2816
80004a2e:	11 89       	ld.ub	r9,r8[0x0]
80004a30:	b4 89       	st.b	r10[0x0],r9
80004a32:	e0 6a 0b 04 	mov	r10,2820
80004a36:	f5 3c 0f 81 	ld.ub	r12,r10[3969]
80004a3a:	f2 0c 18 00 	cp.b	r12,r9
80004a3e:	c0 41       	brne	80004a46 <clock+0x5a>
80004a40:	f5 39 0f 80 	ld.ub	r9,r10[3968]
80004a44:	c0 28       	rjmp	80004a48 <clock+0x5c>
80004a46:	2f f9       	sub	r9,-1
80004a48:	b0 89       	st.b	r8[0x0],r9
80004a4a:	e0 68 0a fd 	mov	r8,2813
80004a4e:	30 fc       	mov	r12,15
80004a50:	11 87       	ld.ub	r7,r8[0x0]
80004a52:	e0 6b 0b 04 	mov	r11,2820
80004a56:	30 08       	mov	r8,0
80004a58:	ee c7 f8 80 	sub	r7,r7,-1920
80004a5c:	10 99       	mov	r9,r8
80004a5e:	e0 6a 05 e4 	mov	r10,1508
80004a62:	c1 28       	rjmp	80004a86 <clock+0x9a>
80004a64:	f6 07 05 15 	ld.uh	r5,r11[r7<<0x1]
80004a68:	f0 ce ff ff 	sub	lr,r8,-1
80004a6c:	f2 c6 ff ff 	sub	r6,r9,-1
80004a70:	ea 08 08 45 	asr	r5,r5,r8
80004a74:	ed b5 00 00 	bld	r5,0x0
80004a78:	c0 51       	brne	80004a82 <clock+0x96>
80004a7a:	f4 09 0a 18 	st.h	r10[r9<<0x1],r8
80004a7e:	f3 d6 c0 08 	bfextu	r9,r6,0x0,0x8
80004a82:	f1 de c0 08 	bfextu	r8,lr,0x0,0x8
					found[count] = i1;
					count++;
				}
			}

			if(count == 1)
80004a86:	f8 08 18 00 	cp.b	r8,r12
80004a8a:	fe 98 ff ed 	brls	80004a64 <clock+0x78>
				next_pattern = found[0];
80004a8e:	e0 65 05 9c 	mov	r5,1436
80004a92:	e0 6a 05 9d 	mov	r10,1437
80004a96:	aa 89       	st.b	r5[0x0],r9
80004a98:	b4 88       	st.b	r10[0x0],r8
80004a9a:	e0 66 1a c0 	mov	r6,6848
80004a9e:	e0 67 05 e4 	mov	r7,1508
80004aa2:	30 18       	mov	r8,1
80004aa4:	f0 09 18 00 	cp.b	r9,r8
80004aa8:	c0 41       	brne	80004ab0 <clock+0xc4>
80004aaa:	8e 08       	ld.sh	r8,r7[0x0]
80004aac:	c0 98       	rjmp	80004abe <clock+0xd2>
80004aae:	d7 03       	nop
80004ab0:	e0 a0 0b 42 	rcall	80006134 <rnd>
80004ab4:	0b 88       	ld.ub	r8,r5[0x0]
80004ab6:	f8 08 0d 08 	divu	r8,r12,r8
80004aba:	ee 09 04 18 	ld.sh	r8,r7[r9<<0x1]
80004abe:	e0 69 1a 97 	mov	r9,6807
			else {

				next_pattern = found[rnd()%count];
80004ac2:	ac 88       	st.b	r6[0x0],r8
80004ac4:	e0 68 1a c0 	mov	r8,6848
80004ac8:	11 88       	ld.ub	r8,r8[0x0]
80004aca:	b2 88       	st.b	r9[0x0],r8
80004acc:	e0 69 1a cc 	mov	r9,6860
80004ad0:	b2 88       	st.b	r9[0x0],r8
			}

			pattern = next_pattern;
80004ad2:	f0 09 15 04 	lsl	r9,r8,0x4
80004ad6:	f2 08 01 08 	sub	r8,r9,r8
			series_playing = pattern;
80004ada:	a5 68       	lsl	r8,0x4
			next_pos = w.wp[pattern].loop_start;
80004adc:	e0 69 0b 04 	mov	r9,2820
80004ae0:	f2 08 07 09 	ld.ub	r9,r9[r8]
80004ae4:	e0 68 1a 8f 	mov	r8,6799
80004ae8:	b0 89       	st.b	r8[0x0],r9
80004aea:	30 09       	mov	r9,0
80004aec:	e0 68 1a ca 	mov	r8,6858

			series_jump = 0;
80004af0:	b0 89       	st.b	r8[0x0],r9
80004af2:	e0 68 1a 8f 	mov	r8,6799
		}

		pos = next_pos;
80004af6:	11 89       	ld.ub	r9,r8[0x0]
80004af8:	e0 68 0a fe 	mov	r8,2814
80004afc:	b0 89       	st.b	r8[0x0],r9

		// live param record
		if(param_accept && live_in) {
80004afe:	e0 68 1a b4 	mov	r8,6836
80004b02:	11 8a       	ld.ub	r10,r8[0x0]
80004b04:	30 08       	mov	r8,0
80004b06:	f0 0a 18 00 	cp.b	r10,r8
80004b0a:	c2 80       	breq	80004b5a <clock+0x16e>
80004b0c:	e0 6a 1a 90 	mov	r10,6800
80004b10:	15 8a       	ld.ub	r10,r10[0x0]
80004b12:	f0 0a 18 00 	cp.b	r10,r8
			param_dest = &w.wp[pattern].cv_curves[edit_cv_ch][pos];
80004b16:	c2 20       	breq	80004b5a <clock+0x16e>
80004b18:	e0 6a 1a 97 	mov	r10,6807
80004b1c:	15 8a       	ld.ub	r10,r10[0x0]
80004b1e:	5c 69       	casts.b	r9
80004b20:	e0 68 0b 04 	mov	r8,2820
80004b24:	f4 0b 15 04 	lsl	r11,r10,0x4
80004b28:	e0 67 0a f0 	mov	r7,2800
			w.wp[pattern].cv_curves[edit_cv_ch][pos] = adc[1];
80004b2c:	14 1b       	sub	r11,r10

		pos = next_pos;

		// live param record
		if(param_accept && live_in) {
			param_dest = &w.wp[pattern].cv_curves[edit_cv_ch][pos];
80004b2e:	e0 6a 1a b3 	mov	r10,6835
80004b32:	15 8a       	ld.ub	r10,r10[0x0]
80004b34:	a5 6a       	lsl	r10,0x4
80004b36:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80004b3a:	a5 6b       	lsl	r11,0x4
80004b3c:	12 0c       	add	r12,r9
80004b3e:	f6 cb ff 70 	sub	r11,r11,-144
			w.wp[pattern].cv_curves[edit_cv_ch][pos] = adc[1];
80004b42:	f4 09 00 09 	add	r9,r10,r9
80004b46:	10 0b       	add	r11,r8
80004b48:	f6 09 00 19 	add	r9,r11,r9<<0x1
		}

		// calc next step
		if(w.wp[pattern].step_mode == mForward) { 		// FORWARD
80004b4c:	8f 09       	st.w	r7[0x0],r9
80004b4e:	2b 8c       	sub	r12,-72
80004b50:	e0 69 1a 9c 	mov	r9,6812
80004b54:	92 19       	ld.sh	r9,r9[0x2]
80004b56:	f0 0c 0a 19 	st.h	r8[r12<<0x1],r9
80004b5a:	e0 66 1a 97 	mov	r6,6807
80004b5e:	0d 88       	ld.ub	r8,r6[0x0]
80004b60:	f0 09 15 04 	lsl	r9,r8,0x4
80004b64:	e0 67 0b 04 	mov	r7,2820
			if(pos == w.wp[pattern].loop_end) next_pos = w.wp[pattern].loop_start;
80004b68:	f2 08 01 08 	sub	r8,r9,r8
80004b6c:	a5 68       	lsl	r8,0x4
80004b6e:	ee 08 00 08 	add	r8,r7,r8
80004b72:	70 39       	ld.w	r9,r8[0xc]
80004b74:	58 09       	cp.w	r9,0
			else if(pos >= LENGTH) next_pos = 0;
80004b76:	c1 41       	brne	80004b9e <clock+0x1b2>
80004b78:	e0 6a 0a fe 	mov	r10,2814
80004b7c:	11 9b       	ld.ub	r11,r8[0x1]
80004b7e:	f5 2a 00 00 	ld.sb	r10,r10[0]
			else next_pos++;
80004b82:	16 3a       	cp.w	r10,r11
80004b84:	c0 31       	brne	80004b8a <clock+0x19e>
			cut_pos = 0;
		}
		else if(w.wp[pattern].step_mode == mReverse) {	// REVERSE
80004b86:	11 89       	ld.ub	r9,r8[0x0]
80004b88:	c1 68       	rjmp	80004bb4 <clock+0x1c8>
			if(pos == w.wp[pattern].loop_start)
80004b8a:	e0 68 0a ff 	mov	r8,2815
80004b8e:	11 8b       	ld.ub	r11,r8[0x0]
80004b90:	e0 68 1a 8f 	mov	r8,6799
80004b94:	16 3a       	cp.w	r10,r11
80004b96:	c1 f4       	brge	80004bd4 <clock+0x1e8>
				next_pos = w.wp[pattern].loop_end;
80004b98:	11 89       	ld.ub	r9,r8[0x0]
80004b9a:	2f f9       	sub	r9,-1
80004b9c:	c1 c8       	rjmp	80004bd4 <clock+0x1e8>
80004b9e:	58 19       	cp.w	r9,1
			else if(pos <= 0)
80004ba0:	c1 e1       	brne	80004bdc <clock+0x1f0>
80004ba2:	e0 69 0a fe 	mov	r9,2814
80004ba6:	11 8a       	ld.ub	r10,r8[0x0]
80004ba8:	13 89       	ld.ub	r9,r9[0x0]
				next_pos = LENGTH;
80004baa:	f7 d9 b0 08 	bfexts	r11,r9,0x0,0x8
80004bae:	14 3b       	cp.w	r11,r10
			else next_pos--;
80004bb0:	c0 51       	brne	80004bba <clock+0x1ce>
80004bb2:	11 99       	ld.ub	r9,r8[0x1]
80004bb4:	e0 68 1a 8f 	mov	r8,6799
			cut_pos = 0;
80004bb8:	c0 e8       	rjmp	80004bd4 <clock+0x1e8>
80004bba:	e0 68 1a 8f 	mov	r8,6799
80004bbe:	30 0a       	mov	r10,0
80004bc0:	f4 09 18 00 	cp.b	r9,r10
80004bc4:	e0 89 00 06 	brgt	80004bd0 <clock+0x1e4>
80004bc8:	e0 69 0a ff 	mov	r9,2815
80004bcc:	13 89       	ld.ub	r9,r9[0x0]
80004bce:	c0 38       	rjmp	80004bd4 <clock+0x1e8>
80004bd0:	11 89       	ld.ub	r9,r8[0x0]
80004bd2:	20 19       	sub	r9,1
80004bd4:	b0 89       	st.b	r8[0x0],r9
80004bd6:	30 09       	mov	r9,0
80004bd8:	c7 d8       	rjmp	80004cd2 <clock+0x2e6>
80004bda:	d7 03       	nop
80004bdc:	58 29       	cp.w	r9,2
80004bde:	c5 91       	brne	80004c90 <clock+0x2a4>
80004be0:	e0 67 1a b0 	mov	r7,6832
80004be4:	0f 86       	ld.ub	r6,r7[0x0]
80004be6:	e0 a0 0a a7 	rcall	80006134 <rnd>
80004bea:	20 16       	sub	r6,1
80004bec:	30 38       	mov	r8,3
80004bee:	f8 08 0d 08 	divu	r8,r12,r8
80004bf2:	12 06       	add	r6,r9
		}
		else if(w.wp[pattern].step_mode == mDrunk) {	// DRUNK
80004bf4:	5c 56       	castu.b	r6
80004bf6:	ae 86       	st.b	r7[0x0],r6
			drunk_step += (rnd() % 3) - 1; // -1 to 1
80004bf8:	3f f8       	mov	r8,-1
80004bfa:	f0 06 18 00 	cp.b	r6,r8
80004bfe:	c0 65       	brlt	80004c0a <clock+0x21e>
80004c00:	30 18       	mov	r8,1
80004c02:	f0 06 18 00 	cp.b	r6,r8
80004c06:	e0 8a 00 03 	brle	80004c0c <clock+0x220>
80004c0a:	ae 88       	st.b	r7[0x0],r8
80004c0c:	e0 69 1a b0 	mov	r9,6832
			if(drunk_step < -1) drunk_step = -1;
80004c10:	e0 68 1a 8f 	mov	r8,6799
80004c14:	13 87       	ld.ub	r7,r9[0x0]
			else if(drunk_step > 1) drunk_step = 1;
80004c16:	11 89       	ld.ub	r9,r8[0x0]
80004c18:	ee 09 00 09 	add	r9,r7,r9
80004c1c:	5c 59       	castu.b	r9
80004c1e:	b0 89       	st.b	r8[0x0],r9
80004c20:	30 0a       	mov	r10,0

			next_pos += drunk_step;
80004c22:	e0 6b 0a ff 	mov	r11,2815
80004c26:	f4 09 18 00 	cp.b	r9,r10
80004c2a:	c0 34       	brge	80004c30 <clock+0x244>
80004c2c:	17 89       	ld.ub	r9,r11[0x0]
80004c2e:	c5 08       	rjmp	80004cce <clock+0x2e2>
80004c30:	5c 69       	casts.b	r9
			if(next_pos < 0) 
80004c32:	17 8b       	ld.ub	r11,r11[0x0]
80004c34:	16 39       	cp.w	r9,r11
80004c36:	e0 89 00 1a 	brgt	80004c6a <clock+0x27e>
80004c3a:	e0 6a 1a 97 	mov	r10,6807
				next_pos = LENGTH;
80004c3e:	15 8a       	ld.ub	r10,r10[0x0]
			else if(next_pos > LENGTH) 
80004c40:	f4 0b 15 04 	lsl	r11,r10,0x4
80004c44:	f6 0a 01 0a 	sub	r10,r11,r10
80004c48:	e0 6b 0b 04 	mov	r11,2820
				next_pos = 0;
			else if(w.wp[pattern].loop_dir == 1 && next_pos < w.wp[pattern].loop_start)
80004c4c:	a5 6a       	lsl	r10,0x4
80004c4e:	30 1c       	mov	r12,1
80004c50:	f6 0a 00 0a 	add	r10,r11,r10
80004c54:	15 bb       	ld.ub	r11,r10[0x3]
80004c56:	f8 0b 18 00 	cp.b	r11,r12
80004c5a:	c0 a1       	brne	80004c6e <clock+0x282>
80004c5c:	15 9b       	ld.ub	r11,r10[0x1]
80004c5e:	15 8a       	ld.ub	r10,r10[0x0]
80004c60:	14 39       	cp.w	r9,r10
80004c62:	c1 55       	brlt	80004c8c <clock+0x2a0>
80004c64:	16 39       	cp.w	r9,r11
80004c66:	e0 8a 00 35 	brle	80004cd0 <clock+0x2e4>
80004c6a:	b0 8a       	st.b	r8[0x0],r10
80004c6c:	c3 28       	rjmp	80004cd0 <clock+0x2e4>
80004c6e:	30 26       	mov	r6,2
				next_pos = w.wp[pattern].loop_end;
			else if(w.wp[pattern].loop_dir == 1 && next_pos > w.wp[pattern].loop_end)
80004c70:	ec 0b 18 00 	cp.b	r11,r6
80004c74:	c2 e1       	brne	80004cd0 <clock+0x2e4>
				next_pos = w.wp[pattern].loop_start;
80004c76:	15 8b       	ld.ub	r11,r10[0x0]
				next_pos = LENGTH;
			else if(next_pos > LENGTH) 
				next_pos = 0;
			else if(w.wp[pattern].loop_dir == 1 && next_pos < w.wp[pattern].loop_start)
				next_pos = w.wp[pattern].loop_end;
			else if(w.wp[pattern].loop_dir == 1 && next_pos > w.wp[pattern].loop_end)
80004c78:	16 39       	cp.w	r9,r11
				next_pos = w.wp[pattern].loop_start;
			else if(w.wp[pattern].loop_dir == 2 && next_pos < w.wp[pattern].loop_start && next_pos > w.wp[pattern].loop_end) {
80004c7a:	c2 b4       	brge	80004cd0 <clock+0x2e4>
80004c7c:	15 9a       	ld.ub	r10,r10[0x1]
80004c7e:	14 39       	cp.w	r9,r10
80004c80:	e0 8a 00 28 	brle	80004cd0 <clock+0x2e4>
80004c84:	f8 07 18 00 	cp.b	r7,r12
80004c88:	f4 0b 17 10 	movne	r11,r10
80004c8c:	b0 8b       	st.b	r8[0x0],r11
80004c8e:	c2 18       	rjmp	80004cd0 <clock+0x2e4>
				if(drunk_step == 1)
					next_pos = w.wp[pattern].loop_start;
80004c90:	58 39       	cp.w	r9,3
80004c92:	c2 31       	brne	80004cd8 <clock+0x2ec>
80004c94:	e0 a0 0a 50 	rcall	80006134 <rnd>
80004c98:	0d 89       	ld.ub	r9,r6[0x0]
80004c9a:	f2 0a 15 04 	lsl	r10,r9,0x4
					next_pos = w.wp[pattern].loop_end;
			}

			cut_pos = 1;
 		}
		else if(w.wp[pattern].step_mode == mRandom) {	// RANDOM
80004c9e:	f4 09 01 09 	sub	r9,r10,r9
			next_pos = (rnd() % (w.wp[pattern].loop_len + 1)) + w.wp[pattern].loop_start;
80004ca2:	a5 69       	lsl	r9,0x4
80004ca4:	e0 68 1a 8f 	mov	r8,6799
80004ca8:	12 07       	add	r7,r9
80004caa:	0f 89       	ld.ub	r9,r7[0x0]
80004cac:	0f aa       	ld.ub	r10,r7[0x2]
80004cae:	2f fa       	sub	r10,-1
80004cb0:	f8 0a 0d 0a 	divu	r10,r12,r10
80004cb4:	16 09       	add	r9,r11
80004cb6:	5c 59       	castu.b	r9
80004cb8:	b0 89       	st.b	r8[0x0],r9
80004cba:	e0 6a 0a ff 	mov	r10,2815
80004cbe:	f7 d9 b0 08 	bfexts	r11,r9,0x0,0x8
80004cc2:	15 8a       	ld.ub	r10,r10[0x0]
			// print_dbg("\r\nnext pos:");
			// print_dbg_ulong(next_pos);
			if(next_pos > LENGTH) next_pos -= LENGTH + 1;
80004cc4:	14 3b       	cp.w	r11,r10
80004cc6:	e0 8a 00 05 	brle	80004cd0 <clock+0x2e4>
80004cca:	5c da       	com	r10
80004ccc:	14 09       	add	r9,r10
80004cce:	b0 89       	st.b	r8[0x0],r9
80004cd0:	30 19       	mov	r9,1
80004cd2:	e0 68 1a be 	mov	r8,6846
80004cd6:	b0 89       	st.b	r8[0x0],r9
			cut_pos = 1;
80004cd8:	e0 69 0a fe 	mov	r9,2814
80004cdc:	e0 68 1a 97 	mov	r8,6807
		}

		// next pattern?
		if(pos == w.wp[pattern].loop_end) {
80004ce0:	f3 2a 00 00 	ld.sb	r10,r9[0]
80004ce4:	11 88       	ld.ub	r8,r8[0x0]
80004ce6:	e0 6b 0b 04 	mov	r11,2820
80004cea:	f0 09 15 04 	lsl	r9,r8,0x4
80004cee:	10 19       	sub	r9,r8
80004cf0:	a5 69       	lsl	r9,0x4
80004cf2:	f6 09 00 09 	add	r9,r11,r9
80004cf6:	13 99       	ld.ub	r9,r9[0x1]
80004cf8:	12 3a       	cp.w	r10,r9
80004cfa:	c1 41       	brne	80004d22 <clock+0x336>
			if(edit_mode == mSeries) 
80004cfc:	e0 69 1a c4 	mov	r9,6852
80004d00:	72 09       	ld.w	r9,r9[0x0]
80004d02:	58 29       	cp.w	r9,2
				series_jump++;
80004d04:	c0 41       	brne	80004d0c <clock+0x320>
80004d06:	e0 68 1a ca 	mov	r8,6858
80004d0a:	c0 98       	rjmp	80004d1c <clock+0x330>
80004d0c:	e0 69 1a c0 	mov	r9,6848
80004d10:	13 89       	ld.ub	r9,r9[0x0]
80004d12:	f0 09 18 00 	cp.b	r9,r8
80004d16:	c0 60       	breq	80004d22 <clock+0x336>
80004d18:	e0 68 1a b2 	mov	r8,6834
80004d1c:	11 89       	ld.ub	r9,r8[0x0]
80004d1e:	2f f9       	sub	r9,-1
80004d20:	b0 89       	st.b	r8[0x0],r9
80004d22:	30 08       	mov	r8,0
80004d24:	e0 67 1a b5 	mov	r7,6837
80004d28:	ae 88       	st.b	r7[0x0],r8
80004d2a:	e0 a0 0a 05 	rcall	80006134 <rnd>
80004d2e:	e0 6a 00 ff 	mov	r10,255
			else if(next_pattern != pattern)
80004d32:	f8 0a 0d 0a 	divu	r10,r12,r10
80004d36:	e0 68 1a 97 	mov	r8,6807
				pattern_jump++;
80004d3a:	16 9a       	mov	r10,r11
80004d3c:	11 89       	ld.ub	r9,r8[0x0]
80004d3e:	f2 0b 15 04 	lsl	r11,r9,0x4
		}



		// TRIGGER
		triggered = 0;
80004d42:	e0 68 0a fe 	mov	r8,2814
80004d46:	e0 66 0b 04 	mov	r6,2820
		if((rnd() % 255) < w.wp[pattern].step_probs[pos]) {
80004d4a:	f1 28 00 00 	ld.sb	r8,r8[0]
80004d4e:	f6 09 01 09 	sub	r9,r11,r9
80004d52:	f2 0b 15 04 	lsl	r11,r9,0x4
80004d56:	ec 0b 00 0b 	add	r11,r6,r11
80004d5a:	10 0b       	add	r11,r8
80004d5c:	f7 35 00 20 	ld.ub	r5,r11[32]
80004d60:	0a 3a       	cp.w	r10,r5
80004d62:	e0 82 00 ee 	brhs	80004f3e <clock+0x552>
80004d66:	a3 69       	lsl	r9,0x2
80004d68:	2f f9       	sub	r9,-1
80004d6a:	ec 09 05 29 	ld.uh	r9,r6[r9<<0x2]
80004d6e:	f2 08 08 48 	asr	r8,r9,r8
80004d72:	ed b8 00 00 	bld	r8,0x0
80004d76:	c3 f1       	brne	80004df4 <clock+0x408>
80004d78:	30 09       	mov	r9,0
80004d7a:	2f 0b       	sub	r11,-16
80004d7c:	30 3c       	mov	r12,3
			
			if(w.wp[pattern].step_choice & 1<<pos) {
80004d7e:	12 98       	mov	r8,r9
80004d80:	e0 6a 05 e4 	mov	r10,1508
80004d84:	c1 18       	rjmp	80004da6 <clock+0x3ba>
80004d86:	17 86       	ld.ub	r6,r11[0x0]
80004d88:	f2 ce ff ff 	sub	lr,r9,-1
80004d8c:	f0 c7 ff ff 	sub	r7,r8,-1
80004d90:	ec 09 08 46 	asr	r6,r6,r9
				count = 0;
				for(i1=0;i1<4;i1++)
80004d94:	ed b6 00 00 	bld	r6,0x0
					if(w.wp[pattern].steps[pos] >> i1 & 1) {
						found[count] = i1;
80004d98:	c0 51       	brne	80004da2 <clock+0x3b6>
		triggered = 0;
		if((rnd() % 255) < w.wp[pattern].step_probs[pos]) {
			
			if(w.wp[pattern].step_choice & 1<<pos) {
				count = 0;
				for(i1=0;i1<4;i1++)
80004d9a:	f4 08 0a 19 	st.h	r10[r8<<0x1],r9
					if(w.wp[pattern].steps[pos] >> i1 & 1) {
						found[count] = i1;
						count++;
80004d9e:	f1 d7 c0 08 	bfextu	r8,r7,0x0,0x8
80004da2:	f3 de c0 08 	bfextu	r9,lr,0x0,0x8
		if((rnd() % 255) < w.wp[pattern].step_probs[pos]) {
			
			if(w.wp[pattern].step_choice & 1<<pos) {
				count = 0;
				for(i1=0;i1<4;i1++)
					if(w.wp[pattern].steps[pos] >> i1 & 1) {
80004da6:	f8 09 18 00 	cp.b	r9,r12
80004daa:	fe 98 ff ee 	brls	80004d86 <clock+0x39a>
80004dae:	e0 65 05 9c 	mov	r5,1436
						found[count] = i1;
80004db2:	e0 6a 05 9d 	mov	r10,1437
						count++;
80004db6:	aa 88       	st.b	r5[0x0],r8
80004db8:	b4 89       	st.b	r10[0x0],r9
80004dba:	58 08       	cp.w	r8,0
		triggered = 0;
		if((rnd() % 255) < w.wp[pattern].step_probs[pos]) {
			
			if(w.wp[pattern].step_choice & 1<<pos) {
				count = 0;
				for(i1=0;i1<4;i1++)
80004dbc:	c0 51       	brne	80004dc6 <clock+0x3da>
80004dbe:	e0 69 1a b5 	mov	r9,6837
80004dc2:	b2 88       	st.b	r9[0x0],r8
80004dc4:	c1 b8       	rjmp	80004dfa <clock+0x40e>
80004dc6:	e0 67 05 e4 	mov	r7,1508
80004dca:	e0 66 1a b5 	mov	r6,6837
					if(w.wp[pattern].steps[pos] >> i1 & 1) {
						found[count] = i1;
						count++;
					}

				if(count == 0)
80004dce:	30 19       	mov	r9,1
					triggered = 0;
80004dd0:	f2 08 18 00 	cp.b	r8,r9
80004dd4:	c0 31       	brne	80004dda <clock+0x3ee>
80004dd6:	8e 88       	ld.uh	r8,r7[0x0]
80004dd8:	c0 88       	rjmp	80004de8 <clock+0x3fc>
				else if(count == 1)
80004dda:	e0 a0 09 ad 	rcall	80006134 <rnd>
80004dde:	0b 88       	ld.ub	r8,r5[0x0]
80004de0:	f8 08 0d 08 	divu	r8,r12,r8
					triggered = 1<<found[0];
80004de4:	ee 09 05 18 	ld.uh	r8,r7[r9<<0x1]
				else
					triggered = 1<<found[rnd()%count];
80004de8:	30 19       	mov	r9,1
80004dea:	f2 08 09 48 	lsl	r8,r9,r8
80004dee:	ac 88       	st.b	r6[0x0],r8
80004df0:	c0 58       	rjmp	80004dfa <clock+0x40e>
80004df2:	d7 03       	nop
80004df4:	f7 38 00 10 	ld.ub	r8,r11[16]
80004df8:	ae 88       	st.b	r7[0x0],r8
80004dfa:	e0 69 1a 97 	mov	r9,6807
80004dfe:	e0 68 0b 04 	mov	r8,2820
80004e02:	13 8a       	ld.ub	r10,r9[0x0]
80004e04:	30 09       	mov	r9,0
80004e06:	f4 0b 15 04 	lsl	r11,r10,0x4
80004e0a:	f6 0a 01 0a 	sub	r10,r11,r10
80004e0e:	a1 7a       	lsl	r10,0x1
80004e10:	2f fa       	sub	r10,-1
80004e12:	f0 0a 07 3a 	ld.ub	r10,r8[r10<<0x3]
80004e16:	f2 0a 18 00 	cp.b	r10,r9
80004e1a:	c4 01       	brne	80004e9a <clock+0x4ae>
80004e1c:	e0 69 1a b5 	mov	r9,6837
80004e20:	13 89       	ld.ub	r9,r9[0x0]
80004e22:	ed b9 00 00 	bld	r9,0x0
80004e26:	c0 91       	brne	80004e38 <clock+0x44c>
			}	
			else {
				triggered = w.wp[pattern].steps[pos];
80004e28:	f1 38 0f 82 	ld.ub	r8,r8[3970]
80004e2c:	f4 08 18 00 	cp.b	r8,r10
			}
			
			if(w.wp[pattern].tr_mode == 0) {
80004e30:	c0 40       	breq	80004e38 <clock+0x44c>
80004e32:	32 0c       	mov	r12,32
80004e34:	e0 a0 0d e0 	rcall	800069f4 <gpio_set_gpio_pin>
80004e38:	e0 68 1a b5 	mov	r8,6837
80004e3c:	11 88       	ld.ub	r8,r8[0x0]
80004e3e:	ed b8 00 01 	bld	r8,0x1
80004e42:	c0 c1       	brne	80004e5a <clock+0x46e>
80004e44:	e0 68 0b 04 	mov	r8,2820
80004e48:	f1 39 0f 83 	ld.ub	r9,r8[3971]
				if(triggered & 0x1 && w.tr_mute[0]) gpio_set_gpio_pin(B00);
80004e4c:	30 08       	mov	r8,0
80004e4e:	f0 09 18 00 	cp.b	r9,r8
80004e52:	c0 40       	breq	80004e5a <clock+0x46e>
80004e54:	32 1c       	mov	r12,33
80004e56:	e0 a0 0d cf 	rcall	800069f4 <gpio_set_gpio_pin>
80004e5a:	e0 68 1a b5 	mov	r8,6837
80004e5e:	11 88       	ld.ub	r8,r8[0x0]
80004e60:	ed b8 00 02 	bld	r8,0x2
80004e64:	c0 c1       	brne	80004e7c <clock+0x490>
				if(triggered & 0x2 && w.tr_mute[1]) gpio_set_gpio_pin(B01);
80004e66:	e0 68 0b 04 	mov	r8,2820
80004e6a:	f1 39 0f 84 	ld.ub	r9,r8[3972]
80004e6e:	30 08       	mov	r8,0
80004e70:	f0 09 18 00 	cp.b	r9,r8
80004e74:	c0 40       	breq	80004e7c <clock+0x490>
80004e76:	32 2c       	mov	r12,34
80004e78:	e0 a0 0d be 	rcall	800069f4 <gpio_set_gpio_pin>
80004e7c:	e0 68 1a b5 	mov	r8,6837
80004e80:	11 88       	ld.ub	r8,r8[0x0]
80004e82:	ed b8 00 03 	bld	r8,0x3
				if(triggered & 0x4 && w.tr_mute[2]) gpio_set_gpio_pin(B02);
80004e86:	c5 c1       	brne	80004f3e <clock+0x552>
80004e88:	e0 68 0b 04 	mov	r8,2820
80004e8c:	f1 39 0f 85 	ld.ub	r9,r8[3973]
80004e90:	30 08       	mov	r8,0
80004e92:	f0 09 18 00 	cp.b	r9,r8
80004e96:	c5 40       	breq	80004f3e <clock+0x552>
80004e98:	c4 b8       	rjmp	80004f2e <clock+0x542>
80004e9a:	f1 38 0f 82 	ld.ub	r8,r8[3970]
80004e9e:	f2 08 18 00 	cp.b	r8,r9
				if(triggered & 0x8 && w.tr_mute[3]) gpio_set_gpio_pin(B03);
80004ea2:	c0 e0       	breq	80004ebe <clock+0x4d2>
80004ea4:	e0 68 1a b5 	mov	r8,6837
80004ea8:	11 88       	ld.ub	r8,r8[0x0]
80004eaa:	ed b8 00 00 	bld	r8,0x0
80004eae:	c0 51       	brne	80004eb8 <clock+0x4cc>
80004eb0:	32 0c       	mov	r12,32
80004eb2:	e0 a0 0d a1 	rcall	800069f4 <gpio_set_gpio_pin>
80004eb6:	c0 48       	rjmp	80004ebe <clock+0x4d2>
80004eb8:	32 0c       	mov	r12,32
80004eba:	e0 a0 0d aa 	rcall	80006a0e <gpio_clr_gpio_pin>
			} else {
				if(w.tr_mute[0]) {
80004ebe:	e0 68 0b 04 	mov	r8,2820
80004ec2:	f1 39 0f 83 	ld.ub	r9,r8[3971]
					if(triggered & 0x1) gpio_set_gpio_pin(B00);
80004ec6:	30 08       	mov	r8,0
80004ec8:	f0 09 18 00 	cp.b	r9,r8
80004ecc:	c0 e0       	breq	80004ee8 <clock+0x4fc>
80004ece:	e0 68 1a b5 	mov	r8,6837
80004ed2:	11 88       	ld.ub	r8,r8[0x0]
80004ed4:	ed b8 00 01 	bld	r8,0x1
					else gpio_clr_gpio_pin(B00);
80004ed8:	c0 51       	brne	80004ee2 <clock+0x4f6>
80004eda:	32 1c       	mov	r12,33
80004edc:	e0 a0 0d 8c 	rcall	800069f4 <gpio_set_gpio_pin>
				}
				if(w.tr_mute[1]) {
80004ee0:	c0 48       	rjmp	80004ee8 <clock+0x4fc>
80004ee2:	32 1c       	mov	r12,33
80004ee4:	e0 a0 0d 95 	rcall	80006a0e <gpio_clr_gpio_pin>
80004ee8:	e0 68 0b 04 	mov	r8,2820
					if(triggered & 0x2) gpio_set_gpio_pin(B01);
80004eec:	f1 39 0f 84 	ld.ub	r9,r8[3972]
80004ef0:	30 08       	mov	r8,0
80004ef2:	f0 09 18 00 	cp.b	r9,r8
80004ef6:	c0 e0       	breq	80004f12 <clock+0x526>
80004ef8:	e0 68 1a b5 	mov	r8,6837
80004efc:	11 88       	ld.ub	r8,r8[0x0]
					else gpio_clr_gpio_pin(B01);
80004efe:	ed b8 00 02 	bld	r8,0x2
80004f02:	c0 51       	brne	80004f0c <clock+0x520>
				}
				if(w.tr_mute[2]) {
80004f04:	32 2c       	mov	r12,34
80004f06:	e0 a0 0d 77 	rcall	800069f4 <gpio_set_gpio_pin>
80004f0a:	c0 48       	rjmp	80004f12 <clock+0x526>
80004f0c:	32 2c       	mov	r12,34
80004f0e:	e0 a0 0d 80 	rcall	80006a0e <gpio_clr_gpio_pin>
					if(triggered & 0x4) gpio_set_gpio_pin(B02);
80004f12:	e0 68 0b 04 	mov	r8,2820
80004f16:	f1 39 0f 85 	ld.ub	r9,r8[3973]
80004f1a:	30 08       	mov	r8,0
80004f1c:	f0 09 18 00 	cp.b	r9,r8
80004f20:	c0 f0       	breq	80004f3e <clock+0x552>
80004f22:	e0 68 1a b5 	mov	r8,6837
					else gpio_clr_gpio_pin(B02);
80004f26:	11 88       	ld.ub	r8,r8[0x0]
80004f28:	ed b8 00 03 	bld	r8,0x3
				}
				if(w.tr_mute[3]) {
80004f2c:	c0 61       	brne	80004f38 <clock+0x54c>
80004f2e:	32 3c       	mov	r12,35
80004f30:	e0 a0 0d 62 	rcall	800069f4 <gpio_set_gpio_pin>
80004f34:	c0 58       	rjmp	80004f3e <clock+0x552>
80004f36:	d7 03       	nop
					if(triggered & 0x8) gpio_set_gpio_pin(B03);
80004f38:	32 3c       	mov	r12,35
80004f3a:	e0 a0 0d 6a 	rcall	80006a0e <gpio_clr_gpio_pin>
80004f3e:	e0 68 07 61 	mov	r8,1889
80004f42:	11 89       	ld.ub	r9,r8[0x0]
80004f44:	2f f9       	sub	r9,-1
80004f46:	b0 89       	st.b	r8[0x0],r9
80004f48:	e0 a0 08 f6 	rcall	80006134 <rnd>
80004f4c:	e0 68 1a 97 	mov	r8,6807
80004f50:	e0 6a 00 ff 	mov	r10,255
80004f54:	11 89       	ld.ub	r9,r8[0x0]
80004f56:	f8 0a 0d 0a 	divu	r10,r12,r10
80004f5a:	f2 0c 15 04 	lsl	r12,r9,0x4
80004f5e:	e0 68 0a fe 	mov	r8,2814
					else gpio_clr_gpio_pin(B03);
80004f62:	16 9a       	mov	r10,r11
80004f64:	f1 28 00 00 	ld.sb	r8,r8[0]
				}

			}
		}

		monomeFrameDirty++;
80004f68:	e0 6b 0b 04 	mov	r11,2820
80004f6c:	f8 09 01 09 	sub	r9,r12,r9


		// PARAM 0
		if((rnd() % 255) < w.wp[pattern].cv_probs[0][pos] && w.cv_mute[0]) {
80004f70:	f2 0c 15 04 	lsl	r12,r9,0x4
80004f74:	f6 0c 00 0c 	add	r12,r11,r12
80004f78:	10 0c       	add	r12,r8
80004f7a:	f9 37 00 d0 	ld.ub	r7,r12[208]
80004f7e:	0e 3a       	cp.w	r10,r7
80004f80:	c6 02       	brcc	80005040 <clock+0x654>
80004f82:	f7 3c 0f 86 	ld.ub	r12,r11[3974]
80004f86:	30 0a       	mov	r10,0
80004f88:	f4 0c 18 00 	cp.b	r12,r10
80004f8c:	c5 a0       	breq	80005040 <clock+0x654>
80004f8e:	f2 0c 15 04 	lsl	r12,r9,0x4
80004f92:	f6 0c 00 0c 	add	r12,r11,r12
80004f96:	19 ec       	ld.ub	r12,r12[0x6]
80004f98:	f4 0c 18 00 	cp.b	r12,r10
80004f9c:	c0 71       	brne	80004faa <clock+0x5be>
80004f9e:	f0 09 00 39 	add	r9,r8,r9<<0x3
80004fa2:	2b 89       	sub	r9,-72
80004fa4:	f6 09 04 19 	ld.sh	r9,r11[r9<<0x1]
80004fa8:	c4 98       	rjmp	8000503a <clock+0x64e>
80004faa:	f0 09 00 39 	add	r9,r8,r9<<0x3
			if(w.wp[pattern].cv_mode[0] == 0) {
80004fae:	30 0a       	mov	r10,0
80004fb0:	16 98       	mov	r8,r11
80004fb2:	2d 89       	sub	r9,-40
80004fb4:	30 f7       	mov	r7,15
80004fb6:	14 9b       	mov	r11,r10
80004fb8:	e0 6c 05 e4 	mov	r12,1508
80004fbc:	c1 28       	rjmp	80004fe0 <clock+0x5f4>
				cv0 = w.wp[pattern].cv_curves[0][pos];
80004fbe:	f0 09 05 15 	ld.uh	r5,r8[r9<<0x1]
80004fc2:	f4 ce ff ff 	sub	lr,r10,-1
80004fc6:	f6 c6 ff ff 	sub	r6,r11,-1
			}
			else {
				count = 0;
				for(i1=0;i1<16;i1++)
					if(w.wp[pattern].cv_steps[0][pos] & (1<<i1)) {
80004fca:	ea 0a 08 45 	asr	r5,r5,r10


		// PARAM 0
		if((rnd() % 255) < w.wp[pattern].cv_probs[0][pos] && w.cv_mute[0]) {
			if(w.wp[pattern].cv_mode[0] == 0) {
				cv0 = w.wp[pattern].cv_curves[0][pos];
80004fce:	ed b5 00 00 	bld	r5,0x0
			}
			else {
				count = 0;
				for(i1=0;i1<16;i1++)
					if(w.wp[pattern].cv_steps[0][pos] & (1<<i1)) {
80004fd2:	c0 51       	brne	80004fdc <clock+0x5f0>
			if(w.wp[pattern].cv_mode[0] == 0) {
				cv0 = w.wp[pattern].cv_curves[0][pos];
			}
			else {
				count = 0;
				for(i1=0;i1<16;i1++)
80004fd4:	f8 0b 0a 1a 	st.h	r12[r11<<0x1],r10
					if(w.wp[pattern].cv_steps[0][pos] & (1<<i1)) {
						found[count] = i1;
80004fd8:	f7 d6 c0 08 	bfextu	r11,r6,0x0,0x8
				cv0 = w.wp[pattern].cv_curves[0][pos];
			}
			else {
				count = 0;
				for(i1=0;i1<16;i1++)
					if(w.wp[pattern].cv_steps[0][pos] & (1<<i1)) {
80004fdc:	f5 de c0 08 	bfextu	r10,lr,0x0,0x8
						found[count] = i1;
						count++;
80004fe0:	ee 0a 18 00 	cp.b	r10,r7
80004fe4:	fe 98 ff ed 	brls	80004fbe <clock+0x5d2>
				cv0 = w.wp[pattern].cv_curves[0][pos];
			}
			else {
				count = 0;
				for(i1=0;i1<16;i1++)
					if(w.wp[pattern].cv_steps[0][pos] & (1<<i1)) {
80004fe8:	e0 68 05 9d 	mov	r8,1437
80004fec:	e0 65 05 9c 	mov	r5,1436
80004ff0:	b0 8a       	st.b	r8[0x0],r10
						found[count] = i1;
80004ff2:	aa 8b       	st.b	r5[0x0],r11
80004ff4:	e0 67 05 e4 	mov	r7,1508
						count++;
80004ff8:	e0 66 1a 94 	mov	r6,6804
80004ffc:	30 18       	mov	r8,1
			if(w.wp[pattern].cv_mode[0] == 0) {
				cv0 = w.wp[pattern].cv_curves[0][pos];
			}
			else {
				count = 0;
				for(i1=0;i1<16;i1++)
80004ffe:	f0 0b 18 00 	cp.b	r11,r8
80005002:	c0 31       	brne	80005008 <clock+0x61c>
80005004:	8e 08       	ld.sh	r8,r7[0x0]
80005006:	c0 88       	rjmp	80005016 <clock+0x62a>
80005008:	e0 a0 08 96 	rcall	80006134 <rnd>
8000500c:	0b 88       	ld.ub	r8,r5[0x0]
8000500e:	f8 08 0d 08 	divu	r8,r12,r8
					if(w.wp[pattern].cv_steps[0][pos] & (1<<i1)) {
						found[count] = i1;
						count++;
					}
				if(count == 1) 
80005012:	ee 09 04 18 	ld.sh	r8,r7[r9<<0x1]
80005016:	ac 88       	st.b	r6[0x0],r8
80005018:	e0 68 1a 94 	mov	r8,6804
					cv_chosen[0] = found[0];
8000501c:	11 89       	ld.ub	r9,r8[0x0]
				else
					cv_chosen[0] = found[rnd() % count];
8000501e:	e0 68 1a 97 	mov	r8,6807
80005022:	11 88       	ld.ub	r8,r8[0x0]
80005024:	f0 0a 15 04 	lsl	r10,r8,0x4
80005028:	f4 08 01 08 	sub	r8,r10,r8
8000502c:	f2 08 00 38 	add	r8,r9,r8<<0x3
				cv0 = w.wp[pattern].cv_values[cv_chosen[0]];			
80005030:	e0 69 0b 04 	mov	r9,2820
80005034:	2e 88       	sub	r8,-24
80005036:	f2 08 04 19 	ld.sh	r9,r9[r8<<0x1]
8000503a:	e0 68 1a 92 	mov	r8,6802
8000503e:	b0 09       	st.h	r8[0x0],r9
80005040:	e0 a0 08 7a 	rcall	80006134 <rnd>
80005044:	e0 68 1a 97 	mov	r8,6807
80005048:	e0 6a 00 ff 	mov	r10,255
8000504c:	11 89       	ld.ub	r9,r8[0x0]
			}
		}

		// PARAM 1
		if((rnd() % 255) < w.wp[pattern].cv_probs[1][pos] && w.cv_mute[1]) {
8000504e:	f8 0a 0d 0a 	divu	r10,r12,r10
80005052:	f2 0c 15 04 	lsl	r12,r9,0x4
80005056:	e0 68 0a fe 	mov	r8,2814
8000505a:	f8 09 01 09 	sub	r9,r12,r9
8000505e:	f1 28 00 00 	ld.sb	r8,r8[0]
80005062:	16 9a       	mov	r10,r11
80005064:	f2 07 15 04 	lsl	r7,r9,0x4
80005068:	e0 6b 0b 04 	mov	r11,2820
8000506c:	f6 07 00 07 	add	r7,r11,r7
80005070:	ee 08 00 0c 	add	r12,r7,r8
80005074:	f9 36 00 e0 	ld.ub	r6,r12[224]
80005078:	0c 3a       	cp.w	r10,r6
8000507a:	c5 c2       	brcc	80005132 <clock+0x746>
8000507c:	f7 3c 0f 87 	ld.ub	r12,r11[3975]
80005080:	30 0a       	mov	r10,0
80005082:	f4 0c 18 00 	cp.b	r12,r10
80005086:	c5 60       	breq	80005132 <clock+0x746>
80005088:	0f fc       	ld.ub	r12,r7[0x7]
8000508a:	f4 0c 18 00 	cp.b	r12,r10
8000508e:	c0 71       	brne	8000509c <clock+0x6b0>
			if(w.wp[pattern].cv_mode[1] == 0) {
80005090:	f0 09 00 39 	add	r9,r8,r9<<0x3
80005094:	2a 89       	sub	r9,-88
80005096:	f6 09 04 19 	ld.sh	r9,r11[r9<<0x1]
				cv1 = w.wp[pattern].cv_curves[1][pos];
8000509a:	c4 98       	rjmp	8000512c <clock+0x740>
8000509c:	f0 09 00 39 	add	r9,r8,r9<<0x3
800050a0:	30 0a       	mov	r10,0
800050a2:	16 98       	mov	r8,r11
800050a4:	2c 89       	sub	r9,-56
800050a6:	30 f7       	mov	r7,15
800050a8:	14 9b       	mov	r11,r10
800050aa:	e0 6c 05 e4 	mov	r12,1508
800050ae:	c1 28       	rjmp	800050d2 <clock+0x6e6>
800050b0:	f0 09 05 1e 	ld.uh	lr,r8[r9<<0x1]
800050b4:	f4 c6 ff ff 	sub	r6,r10,-1
800050b8:	f6 c5 ff ff 	sub	r5,r11,-1
800050bc:	fc 0a 08 4e 	asr	lr,lr,r10
800050c0:	ed be 00 00 	bld	lr,0x0
800050c4:	c0 51       	brne	800050ce <clock+0x6e2>
800050c6:	f8 0b 0a 1a 	st.h	r12[r11<<0x1],r10
800050ca:	f7 d5 c0 08 	bfextu	r11,r5,0x0,0x8
800050ce:	f5 d6 c0 08 	bfextu	r10,r6,0x0,0x8
			}
			else {
				count = 0;
				for(i1=0;i1<16;i1++)
					if(w.wp[pattern].cv_steps[1][pos] & (1<<i1)) {
800050d2:	ee 0a 18 00 	cp.b	r10,r7
800050d6:	fe 98 ff ed 	brls	800050b0 <clock+0x6c4>
			if(w.wp[pattern].cv_mode[1] == 0) {
				cv1 = w.wp[pattern].cv_curves[1][pos];
			}
			else {
				count = 0;
				for(i1=0;i1<16;i1++)
800050da:	e0 68 05 9d 	mov	r8,1437
					if(w.wp[pattern].cv_steps[1][pos] & (1<<i1)) {
						found[count] = i1;
800050de:	e0 65 05 9c 	mov	r5,1436
				cv1 = w.wp[pattern].cv_curves[1][pos];
			}
			else {
				count = 0;
				for(i1=0;i1<16;i1++)
					if(w.wp[pattern].cv_steps[1][pos] & (1<<i1)) {
800050e2:	b0 8a       	st.b	r8[0x0],r10
800050e4:	aa 8b       	st.b	r5[0x0],r11
						found[count] = i1;
						count++;
800050e6:	e0 67 05 e4 	mov	r7,1508
800050ea:	e0 66 1a 94 	mov	r6,6804
				cv1 = w.wp[pattern].cv_curves[1][pos];
			}
			else {
				count = 0;
				for(i1=0;i1<16;i1++)
					if(w.wp[pattern].cv_steps[1][pos] & (1<<i1)) {
800050ee:	30 18       	mov	r8,1
800050f0:	f0 0b 18 00 	cp.b	r11,r8
800050f4:	c0 31       	brne	800050fa <clock+0x70e>
800050f6:	8e 08       	ld.sh	r8,r7[0x0]
						found[count] = i1;
800050f8:	c0 88       	rjmp	80005108 <clock+0x71c>
800050fa:	e0 a0 08 1d 	rcall	80006134 <rnd>
						count++;
800050fe:	0b 88       	ld.ub	r8,r5[0x0]
80005100:	f8 08 0d 08 	divu	r8,r12,r8
			if(w.wp[pattern].cv_mode[1] == 0) {
				cv1 = w.wp[pattern].cv_curves[1][pos];
			}
			else {
				count = 0;
				for(i1=0;i1<16;i1++)
80005104:	ee 09 04 18 	ld.sh	r8,r7[r9<<0x1]
80005108:	ac 98       	st.b	r6[0x1],r8
8000510a:	e0 68 1a 94 	mov	r8,6804
8000510e:	11 99       	ld.ub	r9,r8[0x1]
80005110:	e0 68 1a 97 	mov	r8,6807
80005114:	11 88       	ld.ub	r8,r8[0x0]
80005116:	f0 0a 15 04 	lsl	r10,r8,0x4
					if(w.wp[pattern].cv_steps[1][pos] & (1<<i1)) {
						found[count] = i1;
						count++;
					}
				if(count == 1) 
8000511a:	f4 08 01 08 	sub	r8,r10,r8
8000511e:	f2 08 00 38 	add	r8,r9,r8<<0x3
					cv_chosen[1] = found[0];
80005122:	e0 69 0b 04 	mov	r9,2820
				else
					cv_chosen[1] = found[rnd() % count];
80005126:	2e 88       	sub	r8,-24
80005128:	f2 08 04 19 	ld.sh	r9,r9[r8<<0x1]
8000512c:	e0 68 1a a6 	mov	r8,6822
80005130:	b0 09       	st.h	r8[0x0],r9
80005132:	30 0b       	mov	r11,0

				cv1 = w.wp[pattern].cv_values[cv_chosen[1]];			
80005134:	fe 7c 24 00 	mov	r12,-56320
80005138:	e0 a0 0d 66 	rcall	80006c04 <spi_selectChip>
8000513c:	33 1b       	mov	r11,49
8000513e:	fe 7c 24 00 	mov	r12,-56320
80005142:	e0 a0 0d f0 	rcall	80006d22 <spi_write>
80005146:	fe 7c 24 00 	mov	r12,-56320
8000514a:	e0 67 1a 92 	mov	r7,6802
8000514e:	8e 8b       	ld.uh	r11,r7[0x0]
80005150:	a5 8b       	lsr	r11,0x4
80005152:	e0 a0 0d e8 	rcall	80006d22 <spi_write>
			}
		}


		// write to DAC
		spi_selectChip(SPI,DAC_SPI);
80005156:	8e 0b       	ld.sh	r11,r7[0x0]
80005158:	fe 7c 24 00 	mov	r12,-56320
8000515c:	a5 6b       	lsl	r11,0x4
		 // spi_write(SPI,0x39);	// update both
		spi_write(SPI,0x31);	// update A
8000515e:	e2 1b ff f0 	andl	r11,0xfff0,COH
80005162:	e0 a0 0d e0 	rcall	80006d22 <spi_write>
80005166:	30 0b       	mov	r11,0
		// spi_write(SPI,0x38);	// update B
		// spi_write(SPI,pos*15);	// send position
 		// spi_write(SPI,0);
 		spi_write(SPI,cv0>>4);
80005168:	fe 7c 24 00 	mov	r12,-56320
8000516c:	e0 a0 0d 74 	rcall	80006c54 <spi_unselectChip>
80005170:	30 0b       	mov	r11,0
80005172:	fe 7c 24 00 	mov	r12,-56320
 		spi_write(SPI,cv0<<4);
80005176:	e0 a0 0d 47 	rcall	80006c04 <spi_selectChip>
8000517a:	33 8b       	mov	r11,56
8000517c:	fe 7c 24 00 	mov	r12,-56320
80005180:	e0 a0 0d d1 	rcall	80006d22 <spi_write>
80005184:	fe 7c 24 00 	mov	r12,-56320
		spi_unselectChip(SPI,DAC_SPI);
80005188:	e0 67 1a a6 	mov	r7,6822
8000518c:	8e 8b       	ld.uh	r11,r7[0x0]
8000518e:	a5 8b       	lsr	r11,0x4

		spi_selectChip(SPI,DAC_SPI);
80005190:	e0 a0 0d c9 	rcall	80006d22 <spi_write>
80005194:	8e 0b       	ld.sh	r11,r7[0x0]
80005196:	fe 7c 24 00 	mov	r12,-56320
		spi_write(SPI,0x38);	// update B
8000519a:	a5 6b       	lsl	r11,0x4
8000519c:	e2 1b ff f0 	andl	r11,0xfff0,COH
800051a0:	e0 a0 0d c1 	rcall	80006d22 <spi_write>
		spi_write(SPI,cv1>>4);
800051a4:	30 0b       	mov	r11,0
800051a6:	fe 7c 24 00 	mov	r12,-56320
800051aa:	e0 a0 0d 55 	rcall	80006c54 <spi_unselectChip>
800051ae:	d8 22       	popm	r4-r7,pc
800051b0:	32 ac       	mov	r12,42
		spi_write(SPI,cv1<<4);
800051b2:	e0 a0 0c 2e 	rcall	80006a0e <gpio_clr_gpio_pin>
800051b6:	e0 68 1a 97 	mov	r8,6807
800051ba:	11 88       	ld.ub	r8,r8[0x0]
800051bc:	f0 09 15 04 	lsl	r9,r8,0x4
800051c0:	f2 08 01 08 	sub	r8,r9,r8
		spi_unselectChip(SPI,DAC_SPI);
800051c4:	e0 69 0b 04 	mov	r9,2820
800051c8:	a1 78       	lsl	r8,0x1
800051ca:	2f f8       	sub	r8,-1
800051cc:	f2 08 07 38 	ld.ub	r8,r9[r8<<0x3]
	}
	else {
		gpio_clr_gpio_pin(B10);
800051d0:	ee 08 18 00 	cp.b	r8,r7

		if(w.wp[pattern].tr_mode == 0) {
800051d4:	c0 d1       	brne	800051ee <clock+0x802>
800051d6:	32 0c       	mov	r12,32
800051d8:	e0 a0 0c 1b 	rcall	80006a0e <gpio_clr_gpio_pin>
800051dc:	32 1c       	mov	r12,33
800051de:	e0 a0 0c 18 	rcall	80006a0e <gpio_clr_gpio_pin>
800051e2:	32 2c       	mov	r12,34
800051e4:	e0 a0 0c 15 	rcall	80006a0e <gpio_clr_gpio_pin>
800051e8:	32 3c       	mov	r12,35
800051ea:	e0 a0 0c 12 	rcall	80006a0e <gpio_clr_gpio_pin>
800051ee:	d8 22       	popm	r4-r7,pc

800051f0 <timers_unset_monome>:
			gpio_clr_gpio_pin(B00);
800051f0:	d4 01       	pushm	lr
800051f2:	e0 6c 05 6c 	mov	r12,1388
			gpio_clr_gpio_pin(B01);
800051f6:	e0 a0 07 2b 	rcall	8000604c <timer_remove>
800051fa:	e0 6c 06 28 	mov	r12,1576
			gpio_clr_gpio_pin(B02);
800051fe:	e0 a0 07 27 	rcall	8000604c <timer_remove>
			gpio_clr_gpio_pin(B03);
80005202:	d8 02       	popm	pc

80005204 <handler_FtdiDisconnect>:
80005204:	d4 01       	pushm	lr
80005206:	cf 5f       	rcall	800051f0 <timers_unset_monome>
80005208:	d8 02       	popm	pc
8000520a:	d7 03       	nop

8000520c <monome_poll_timer_callback>:
8000520c:	d4 01       	pushm	lr
8000520e:	e0 a0 07 f9 	rcall	80006200 <ftdi_read>
80005212:	d8 02       	popm	pc

80005214 <init_adc>:
  (*dst)[3] = val & 0xfff;

}

// setup ad7923
void init_adc(void) {
80005214:	d4 21       	pushm	r4-r7,lr
  u16 cmd;

  // at powerup, the part wants a dummy conversion with DIN high
  spi_selectChip(SPI, ADC_SPI);
80005216:	30 1b       	mov	r11,1
80005218:	fe 7c 24 00 	mov	r12,-56320
8000521c:	e0 a0 0c f4 	rcall	80006c04 <spi_selectChip>
  spi_write(SPI, 0xffff);
80005220:	e0 6b ff ff 	mov	r11,65535
80005224:	fe 7c 24 00 	mov	r12,-56320
80005228:	e0 a0 0d 7d 	rcall	80006d22 <spi_write>
  spi_unselectChip(SPI, ADC_SPI);
8000522c:	30 1b       	mov	r11,1
8000522e:	fe 7c 24 00 	mov	r12,-56320
80005232:	e0 a0 0d 11 	rcall	80006c54 <spi_unselectChip>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005236:	e1 b7 00 42 	mfsr	r7,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000523a:	ee 78 42 40 	mov	r8,1000000
8000523e:	30 09       	mov	r9,0
80005240:	e0 6a e5 3f 	mov	r10,58687
80005244:	ea 1a 11 f0 	orh	r10,0x11f0
80005248:	30 0b       	mov	r11,0
8000524a:	e0 a0 1c 1d 	rcall	80008a84 <__avr32_udiv64>
8000524e:	ee 0a 00 0a 	add	r10,r7,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005252:	e1 b8 00 42 	mfsr	r8,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005256:	14 37       	cp.w	r7,r10
80005258:	e0 88 00 05 	brls	80005262 <init_adc+0x4e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000525c:	0e 38       	cp.w	r8,r7
8000525e:	cf a2       	brcc	80005252 <init_adc+0x3e>
80005260:	c0 38       	rjmp	80005266 <init_adc+0x52>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005262:	0e 38       	cp.w	r8,r7
80005264:	c0 43       	brcs	8000526c <init_adc+0x58>
80005266:	14 38       	cp.w	r8,r10
80005268:	fe 98 ff f5 	brls	80005252 <init_adc+0x3e>
  // wait for powerup time (5us in datasheet)
  delay_us(5);
  
  // write base configuration
  cmd = AD7923_CMD_BASE << 4;
  spi_selectChip(SPI, ADC_SPI );
8000526c:	30 1b       	mov	r11,1
8000526e:	fe 7c 24 00 	mov	r12,-56320
80005272:	e0 a0 0c c9 	rcall	80006c04 <spi_selectChip>
  spi_write(SPI, cmd );
80005276:	e0 6b 83 10 	mov	r11,33552
8000527a:	fe 7c 24 00 	mov	r12,-56320
8000527e:	e0 a0 0d 52 	rcall	80006d22 <spi_write>
  spi_unselectChip(SPI, ADC_SPI );
80005282:	30 1b       	mov	r11,1
80005284:	fe 7c 24 00 	mov	r12,-56320
80005288:	e0 a0 0c e6 	rcall	80006c54 <spi_unselectChip>

}
8000528c:	d8 22       	popm	r4-r7,pc
8000528e:	d7 03       	nop

80005290 <adc_convert>:
80005290:	d4 21       	pushm	r4-r7,lr
80005292:	20 1d       	sub	sp,4
80005294:	30 1b       	mov	r11,1
80005296:	18 97       	mov	r7,r12
80005298:	fe 7c 24 00 	mov	r12,-56320
8000529c:	e0 a0 0c b4 	rcall	80006c04 <spi_selectChip>

  // data into AD7923 is a left-justified 12-bit value in a 16-bit word
  // so, always lshift the command before sending
  cmd = ( AD7923_CMD_BASE ) << 4;
  spi_selectChip(SPI, ADC_SPI);
  spi_write(SPI, cmd);
800052a0:	e0 6b 83 10 	mov	r11,33552
800052a4:	fe 7c 24 00 	mov	r12,-56320
800052a8:	e0 a0 0d 3d 	rcall	80006d22 <spi_write>
  spi_unselectChip(SPI, ADC_SPI);
800052ac:	30 1b       	mov	r11,1
800052ae:	fe 7c 24 00 	mov	r12,-56320
800052b2:	e0 a0 0c d1 	rcall	80006c54 <spi_unselectChip>

  // get channel 0, setup channel 1
  cmd = ( AD7923_CMD_BASE | AD7923_CTL_ADD0 ) << 4;
  spi_selectChip(SPI, ADC_SPI);
800052b6:	30 1b       	mov	r11,1
800052b8:	fe 7c 24 00 	mov	r12,-56320
800052bc:	e0 a0 0c a4 	rcall	80006c04 <spi_selectChip>
  spi_write(SPI, cmd);
800052c0:	e0 6b 87 10 	mov	r11,34576
800052c4:	fe 7c 24 00 	mov	r12,-56320
800052c8:	e0 a0 0d 2d 	rcall	80006d22 <spi_write>
  spi_read(SPI, &val);
800052cc:	fa c6 ff fe 	sub	r6,sp,-2
800052d0:	fe 7c 24 00 	mov	r12,-56320
800052d4:	0c 9b       	mov	r11,r6
800052d6:	e0 a0 0d 34 	rcall	80006d3e <spi_read>
  spi_unselectChip(SPI, ADC_SPI);
800052da:	30 1b       	mov	r11,1
800052dc:	fe 7c 24 00 	mov	r12,-56320
800052e0:	e0 a0 0c ba 	rcall	80006c54 <spi_unselectChip>
  (*dst)[0] = val & 0xfff; 
800052e4:	9a 18       	ld.sh	r8,sp[0x2]
800052e6:	f1 d8 c0 0c 	bfextu	r8,r8,0x0,0xc

  // get channel 1, setup channel 2
  cmd = ( AD7923_CMD_BASE | AD7923_CTL_ADD1 ) << 4;
  spi_selectChip(SPI, ADC_SPI);
800052ea:	30 1b       	mov	r11,1
  cmd = ( AD7923_CMD_BASE | AD7923_CTL_ADD0 ) << 4;
  spi_selectChip(SPI, ADC_SPI);
  spi_write(SPI, cmd);
  spi_read(SPI, &val);
  spi_unselectChip(SPI, ADC_SPI);
  (*dst)[0] = val & 0xfff; 
800052ec:	ae 08       	st.h	r7[0x0],r8

  // get channel 1, setup channel 2
  cmd = ( AD7923_CMD_BASE | AD7923_CTL_ADD1 ) << 4;
  spi_selectChip(SPI, ADC_SPI);
800052ee:	fe 7c 24 00 	mov	r12,-56320
800052f2:	e0 a0 0c 89 	rcall	80006c04 <spi_selectChip>
  spi_write(SPI, cmd);
800052f6:	e0 6b 8b 10 	mov	r11,35600
800052fa:	fe 7c 24 00 	mov	r12,-56320
800052fe:	e0 a0 0d 12 	rcall	80006d22 <spi_write>
  spi_read(SPI, &val);
80005302:	0c 9b       	mov	r11,r6
80005304:	fe 7c 24 00 	mov	r12,-56320
80005308:	e0 a0 0d 1b 	rcall	80006d3e <spi_read>
  spi_unselectChip(SPI, ADC_SPI);
8000530c:	30 1b       	mov	r11,1
8000530e:	fe 7c 24 00 	mov	r12,-56320
80005312:	e0 a0 0c a1 	rcall	80006c54 <spi_unselectChip>
  (*dst)[1] = val & 0xfff;
80005316:	9a 18       	ld.sh	r8,sp[0x2]
80005318:	f1 d8 c0 0c 	bfextu	r8,r8,0x0,0xc

  // get channel 2, setup channel 3
  cmd = ( AD7923_CMD_BASE | AD7923_CTL_ADD1 | AD7923_CTL_ADD0 ) << 4;
  spi_selectChip(SPI, ADC_SPI);
8000531c:	30 1b       	mov	r11,1
  cmd = ( AD7923_CMD_BASE | AD7923_CTL_ADD1 ) << 4;
  spi_selectChip(SPI, ADC_SPI);
  spi_write(SPI, cmd);
  spi_read(SPI, &val);
  spi_unselectChip(SPI, ADC_SPI);
  (*dst)[1] = val & 0xfff;
8000531e:	ae 18       	st.h	r7[0x2],r8

  // get channel 2, setup channel 3
  cmd = ( AD7923_CMD_BASE | AD7923_CTL_ADD1 | AD7923_CTL_ADD0 ) << 4;
  spi_selectChip(SPI, ADC_SPI);
80005320:	fe 7c 24 00 	mov	r12,-56320
80005324:	e0 a0 0c 70 	rcall	80006c04 <spi_selectChip>
  spi_write(SPI, cmd);
80005328:	e0 6b 8f 10 	mov	r11,36624
8000532c:	fe 7c 24 00 	mov	r12,-56320
80005330:	e0 a0 0c f9 	rcall	80006d22 <spi_write>
  spi_read(SPI, &val);
80005334:	0c 9b       	mov	r11,r6
80005336:	fe 7c 24 00 	mov	r12,-56320
8000533a:	e0 a0 0d 02 	rcall	80006d3e <spi_read>
  spi_unselectChip(SPI, ADC_SPI);
8000533e:	30 1b       	mov	r11,1
80005340:	fe 7c 24 00 	mov	r12,-56320
80005344:	e0 a0 0c 88 	rcall	80006c54 <spi_unselectChip>
  (*dst)[2] = val & 0xfff;
80005348:	9a 18       	ld.sh	r8,sp[0x2]
8000534a:	f1 d8 c0 0c 	bfextu	r8,r8,0x0,0xc

  // get channel 3, dummy write
  cmd = ( AD7923_CMD_BASE ) << 4;
  spi_selectChip(SPI, ADC_SPI);
8000534e:	30 1b       	mov	r11,1
  cmd = ( AD7923_CMD_BASE | AD7923_CTL_ADD1 | AD7923_CTL_ADD0 ) << 4;
  spi_selectChip(SPI, ADC_SPI);
  spi_write(SPI, cmd);
  spi_read(SPI, &val);
  spi_unselectChip(SPI, ADC_SPI);
  (*dst)[2] = val & 0xfff;
80005350:	ae 28       	st.h	r7[0x4],r8

  // get channel 3, dummy write
  cmd = ( AD7923_CMD_BASE ) << 4;
  spi_selectChip(SPI, ADC_SPI);
80005352:	fe 7c 24 00 	mov	r12,-56320
80005356:	e0 a0 0c 57 	rcall	80006c04 <spi_selectChip>
  spi_write(SPI, cmd);
8000535a:	e0 6b 83 10 	mov	r11,33552
8000535e:	fe 7c 24 00 	mov	r12,-56320
80005362:	e0 a0 0c e0 	rcall	80006d22 <spi_write>
  spi_read(SPI, &val);
80005366:	0c 9b       	mov	r11,r6
80005368:	fe 7c 24 00 	mov	r12,-56320
8000536c:	e0 a0 0c e9 	rcall	80006d3e <spi_read>
  spi_unselectChip(SPI, ADC_SPI);
80005370:	30 1b       	mov	r11,1
80005372:	fe 7c 24 00 	mov	r12,-56320
80005376:	e0 a0 0c 6f 	rcall	80006c54 <spi_unselectChip>
  (*dst)[3] = val & 0xfff;
8000537a:	9a 18       	ld.sh	r8,sp[0x2]
8000537c:	f1 d8 c0 0c 	bfextu	r8,r8,0x0,0xc
80005380:	ae 38       	st.h	r7[0x6],r8

}
80005382:	2f fd       	sub	sp,-4
80005384:	d8 22       	popm	r4-r7,pc
80005386:	d7 03       	nop

80005388 <init_events>:
// initializes (or re-initializes)  the system event queue.
 void init_events( void ) {
  int k;
  
  // set queue (circular list) to empty
  putIdx = 0;
80005388:	e0 6a 06 40 	mov	r10,1600
8000538c:	30 08       	mov	r8,0
  getIdx = 0;
8000538e:	95 08       	st.w	r10[0x0],r8

  // zero out the event records
  for ( k = 0; k < MAX_EVENTS; k++ ) {
    sysEvents[ k ].type = 0;
80005390:	e0 6a 06 44 	mov	r10,1604
 void init_events( void ) {
  int k;
  
  // set queue (circular list) to empty
  putIdx = 0;
  getIdx = 0;
80005394:	10 99       	mov	r9,r8

// The system event queue is a circular array of event records.
 static event_t sysEvents[ MAX_EVENTS ];

// initializes (or re-initializes)  the system event queue.
 void init_events( void ) {
80005396:	95 08       	st.w	r10[0x0],r8
80005398:	e0 68 06 48 	mov	r8,1608
  getIdx = 0;

  // zero out the event records
  for ( k = 0; k < MAX_EVENTS; k++ ) {
    sysEvents[ k ].type = 0;
    sysEvents[ k ].data = 0;
8000539c:	f0 ca ff 00 	sub	r10,r8,-256
  // set queue (circular list) to empty
  putIdx = 0;
  getIdx = 0;

  // zero out the event records
  for ( k = 0; k < MAX_EVENTS; k++ ) {
800053a0:	91 09       	st.w	r8[0x0],r9
800053a2:	91 19       	st.w	r8[0x4],r9
    sysEvents[ k ].type = 0;
    sysEvents[ k ].data = 0;
  }
}
800053a4:	2f 88       	sub	r8,-8
800053a6:	14 38       	cp.w	r8,r10
800053a8:	cf c1       	brne	800053a0 <init_events+0x18>
800053aa:	5e fc       	retal	r12

800053ac <event_post>:
800053ac:	d4 01       	pushm	lr
800053ae:	d3 43       	ssrf	0x14
800053b0:	e0 68 06 40 	mov	r8,1600

  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);
  
  // increment write idx, posbily wrapping
  saveIndex = putIdx;
  INCR_EVENT_INDEX( putIdx );
800053b4:	70 0a       	ld.w	r10,r8[0x0]
800053b6:	f4 c9 ff ff 	sub	r9,r10,-1
800053ba:	91 09       	st.w	r8[0x0],r9
800053bc:	e0 49 00 20 	cp.w	r9,32
800053c0:	c0 31       	brne	800053c6 <event_post+0x1a>
800053c2:	30 09       	mov	r9,0
  if ( putIdx != getIdx  ) {
800053c4:	91 09       	st.w	r8[0x0],r9
800053c6:	e0 68 06 44 	mov	r8,1604
800053ca:	e0 69 06 40 	mov	r9,1600
800053ce:	70 0b       	ld.w	r11,r8[0x0]
    sysEvents[ putIdx ].type = e->type;
800053d0:	72 08       	ld.w	r8,r9[0x0]
800053d2:	16 38       	cp.w	r8,r11
800053d4:	c0 c0       	breq	800053ec <event_post+0x40>
800053d6:	e0 69 06 48 	mov	r9,1608
    sysEvents[ putIdx ].data = e->data;
800053da:	78 0a       	ld.w	r10,r12[0x0]
800053dc:	f2 08 09 3a 	st.w	r9[r8<<0x3],r10
800053e0:	f2 08 00 38 	add	r8,r9,r8<<0x3
    status = true;
  } else {
    // idx wrapped, so queue is full, restore idx
    putIdx = saveIndex;
    print_dbg("\r\n event queue full!");
800053e4:	78 19       	ld.w	r9,r12[0x4]
    sysEvents[ putIdx ].type = e->type;
    sysEvents[ putIdx ].data = e->data;
    status = true;
  } else {
    // idx wrapped, so queue is full, restore idx
    putIdx = saveIndex;
800053e6:	30 1c       	mov	r12,1
    print_dbg("\r\n event queue full!");
800053e8:	91 19       	st.w	r8[0x4],r9
800053ea:	c0 78       	rjmp	800053f8 <event_post+0x4c>
800053ec:	fe cc b6 60 	sub	r12,pc,-18848
  } 

  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
  return status;
800053f0:	93 0a       	st.w	r9[0x0],r10
800053f2:	e0 a0 17 9b 	rcall	80008328 <print_dbg>
800053f6:	30 0c       	mov	r12,0
800053f8:	d5 43       	csrf	0x14
800053fa:	d8 02       	popm	pc

800053fc <event_next>:
800053fc:	18 98       	mov	r8,r12
800053fe:	d3 43       	ssrf	0x14
80005400:	e0 6a 06 40 	mov	r10,1600
80005404:	e0 69 06 44 	mov	r9,1604
u8 event_next( event_t *e ) {
  u8 status;
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);
  
  // if pointers are equal, the queue is empty... don't allow idx's to wrap!
  if ( getIdx != putIdx ) {
80005408:	74 0b       	ld.w	r11,r10[0x0]
8000540a:	72 0a       	ld.w	r10,r9[0x0]
    INCR_EVENT_INDEX( getIdx );
8000540c:	16 3a       	cp.w	r10,r11
8000540e:	c1 60       	breq	8000543a <event_next+0x3e>
80005410:	2f fa       	sub	r10,-1
80005412:	93 0a       	st.w	r9[0x0],r10
80005414:	e0 4a 00 20 	cp.w	r10,32
80005418:	c0 31       	brne	8000541e <event_next+0x22>
    e->type = sysEvents[ getIdx ].type;
8000541a:	30 0a       	mov	r10,0
8000541c:	93 0a       	st.w	r9[0x0],r10
8000541e:	e0 69 06 48 	mov	r9,1608
    e->data = sysEvents[ getIdx ].data;
80005422:	e0 6a 06 44 	mov	r10,1604
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);
  
  // if pointers are equal, the queue is empty... don't allow idx's to wrap!
  if ( getIdx != putIdx ) {
    INCR_EVENT_INDEX( getIdx );
    e->type = sysEvents[ getIdx ].type;
80005426:	74 0a       	ld.w	r10,r10[0x0]
    e->data = sysEvents[ getIdx ].data;
80005428:	f2 0a 00 3b 	add	r11,r9,r10<<0x3
8000542c:	f2 0a 03 39 	ld.w	r9,r9[r10<<0x3]
80005430:	30 1c       	mov	r12,1
    status = true;
  } else {
    e->type  = 0xff;
    e->data = 0;
80005432:	91 09       	st.w	r8[0x0],r9
    INCR_EVENT_INDEX( getIdx );
    e->type = sysEvents[ getIdx ].type;
    e->data = sysEvents[ getIdx ].data;
    status = true;
  } else {
    e->type  = 0xff;
80005434:	76 19       	ld.w	r9,r11[0x4]
80005436:	91 19       	st.w	r8[0x4],r9
    e->data = 0;
80005438:	c0 68       	rjmp	80005444 <event_next+0x48>
    INCR_EVENT_INDEX( getIdx );
    e->type = sysEvents[ getIdx ].type;
    e->data = sysEvents[ getIdx ].data;
    status = true;
  } else {
    e->type  = 0xff;
8000543a:	30 0c       	mov	r12,0
    e->data = 0;
    status = false;
  }

  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
8000543c:	e0 69 00 ff 	mov	r9,255
  return status;
}
80005440:	91 1c       	st.w	r8[0x4],r12
80005442:	91 09       	st.w	r8[0x0],r9
80005444:	d5 43       	csrf	0x14
80005446:	5e fc       	retal	r12

80005448 <init_usb_host>:
  gpio_enable_module(TWI_GPIO_MAP, sizeof(TWI_GPIO_MAP) / sizeof(TWI_GPIO_MAP[0]));
}
*/

// initialize USB host stack
void init_usb_host (void) {
80005448:	d4 01       	pushm	lr
  uhc_start();
8000544a:	e0 a0 17 ed 	rcall	80008424 <uhc_start>
}
8000544e:	d8 02       	popm	pc

80005450 <init_spi>:
80005450:	d4 21       	pushm	r4-r7,lr
80005452:	20 4d       	sub	sp,16
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80005454:	30 5b       	mov	r11,5
80005456:	30 2c       	mov	r12,2
80005458:	e0 a0 1a 7c 	rcall	80008950 <sysclk_priv_enable_module>
    {SPI_NPCS0_PIN,  SPI_NPCS0_FUNCTION },
    {SPI_NPCS1_PIN,  SPI_NPCS1_FUNCTION },
  };

  // Assign GPIO to SPI.
  gpio_enable_module(SPI_GPIO_MAP, sizeof(SPI_GPIO_MAP) / sizeof(SPI_GPIO_MAP[0]));
8000545c:	30 5b       	mov	r11,5
8000545e:	fe cc b6 9e 	sub	r12,pc,-18786
80005462:	e0 a0 0a a3 	rcall	800069a8 <gpio_enable_module>
    .trans_delay = 0,
    .spck_delay = 0,
    .stay_act = 1,
    .spi_mode = 1,
    .modfdis = 1
  };
80005466:	fe c8 b6 b6 	sub	r8,pc,-18762
8000546a:	f0 ea 00 08 	ld.d	r10,r8[8]
8000546e:	fa eb 00 08 	st.d	sp[8],r10
80005472:	f0 e8 00 00 	ld.d	r8,r8[0]
80005476:	1a 97       	mov	r7,sp


  // Initialize as master.
  spi_initMaster(SPI, &spiOptions);
80005478:	fa e9 00 00 	st.d	sp[0],r8
8000547c:	1a 9b       	mov	r11,sp
8000547e:	fe 7c 24 00 	mov	r12,-56320
  // Set SPI selection mode: variable_ps, pcs_decode, delay.
  spi_selectionMode(SPI, 0, 0, 0);
80005482:	e0 a0 0b 8d 	rcall	80006b9c <spi_initMaster>
80005486:	30 09       	mov	r9,0
80005488:	fe 7c 24 00 	mov	r12,-56320
8000548c:	12 9a       	mov	r10,r9
8000548e:	12 9b       	mov	r11,r9
  // Enable SPI module.
  spi_enable(SPI);
80005490:	e0 a0 0b a5 	rcall	80006bda <spi_selectionMode>
80005494:	fe 7c 24 00 	mov	r12,-56320

  // spi_setupChipReg( SPI, &spiOptions, FPBA_HZ );
  spi_setupChipReg(SPI, &spiOptions, sysclk_get_pba_hz() );
80005498:	e0 a0 0c 42 	rcall	80006d1c <spi_enable>
8000549c:	e0 66 87 00 	mov	r6,34560
800054a0:	ea 16 03 93 	orh	r6,0x393
800054a4:	1a 9b       	mov	r11,sp
800054a6:	0c 9a       	mov	r10,r6
800054a8:	fe 7c 24 00 	mov	r12,-56320
  // add ADC chip register
  spiOptions.reg          = ADC_SPI;
  spiOptions.baudrate     = 20000000;
  spiOptions.bits         = 16;
  spiOptions.spi_mode     = 2;
  spiOptions.spck_delay   = 0;
800054ac:	e0 a0 0b e8 	rcall	80006c7c <spi_setupChipReg>
  spiOptions.trans_delay  = 5;
  spiOptions.stay_act     = 0;
  spiOptions.modfdis      = 0;
800054b0:	30 08       	mov	r8,0
  // add ADC chip register
  spiOptions.reg          = ADC_SPI;
  spiOptions.baudrate     = 20000000;
  spiOptions.bits         = 16;
  spiOptions.spi_mode     = 2;
  spiOptions.spck_delay   = 0;
800054b2:	fb 68 00 0d 	st.b	sp[13],r8
  spiOptions.trans_delay  = 5;
  spiOptions.stay_act     = 0;
800054b6:	fb 68 00 09 	st.b	sp[9],r8
  // spi_setupChipReg( SPI, &spiOptions, FPBA_HZ );
  spi_setupChipReg(SPI, &spiOptions, sysclk_get_pba_hz() );


  // add ADC chip register
  spiOptions.reg          = ADC_SPI;
800054ba:	fb 68 00 0b 	st.b	sp[11],r8
  spiOptions.baudrate     = 20000000;
800054be:	30 18       	mov	r8,1
800054c0:	ba 88       	st.b	sp[0x0],r8
800054c2:	e0 68 2d 00 	mov	r8,11520
800054c6:	ea 18 01 31 	orh	r8,0x131
  spiOptions.bits         = 16;
800054ca:	50 18       	stdsp	sp[0x4],r8
800054cc:	31 08       	mov	r8,16
  spiOptions.spi_mode     = 2;
800054ce:	fb 68 00 08 	st.b	sp[8],r8
800054d2:	30 28       	mov	r8,2
  spiOptions.spck_delay   = 0;
  spiOptions.trans_delay  = 5;
800054d4:	fb 68 00 0c 	st.b	sp[12],r8
  spiOptions.stay_act     = 0;
  spiOptions.modfdis      = 0;

  spi_setupChipReg( SPI, &spiOptions, FPBA_HZ );
800054d8:	30 58       	mov	r8,5
  spiOptions.reg          = ADC_SPI;
  spiOptions.baudrate     = 20000000;
  spiOptions.bits         = 16;
  spiOptions.spi_mode     = 2;
  spiOptions.spck_delay   = 0;
  spiOptions.trans_delay  = 5;
800054da:	0c 9a       	mov	r10,r6
800054dc:	1a 9b       	mov	r11,sp
  spiOptions.stay_act     = 0;
  spiOptions.modfdis      = 0;

  spi_setupChipReg( SPI, &spiOptions, FPBA_HZ );
800054de:	fb 68 00 0a 	st.b	sp[10],r8
800054e2:	fe 7c 24 00 	mov	r12,-56320

  // spi_enable(SPI);
 }
800054e6:	e0 a0 0b cb 	rcall	80006c7c <spi_setupChipReg>
800054ea:	2f cd       	sub	sp,-16
800054ec:	d8 22       	popm	r4-r7,pc
800054ee:	d7 03       	nop

800054f0 <init_tc>:
800054f0:	d4 01       	pushm	lr
800054f2:	fe cb b7 4a 	sub	r11,pc,-18614
800054f6:	fe 7c 38 00 	mov	r12,-51200
800054fa:	e0 a0 0c 33 	rcall	80006d60 <tc_init_waveform>
800054fe:	e0 6a 01 d4 	mov	r10,468
80005502:	30 0b       	mov	r11,0
80005504:	fe 7c 38 00 	mov	r12,-51200
80005508:	e0 a0 0c 8e 	rcall	80006e24 <tc_write_rc>
  // so RC = fPBA / 128 / 1000
  //  tc_write_rc(tc, APP_TC_CHANNEL, (FPBA_HZ / 128000));
  tc_write_rc(tc, APP_TC_CHANNEL, (FPBA_HZ / 128000));

  // configure the timer interrupt
  tc_configure_interrupts(tc, APP_TC_CHANNEL, &tc_interrupt);
8000550c:	30 0b       	mov	r11,0
8000550e:	fe ca b7 6a 	sub	r10,pc,-18582
80005512:	fe 7c 38 00 	mov	r12,-51200
  // Start the timer/counter.
  tc_start(tc, APP_TC_CHANNEL);
80005516:	e0 a0 0c a1 	rcall	80006e58 <tc_configure_interrupts>
8000551a:	30 0b       	mov	r11,0
8000551c:	fe 7c 38 00 	mov	r12,-51200
}
80005520:	e0 a0 0c 70 	rcall	80006e00 <tc_start>
80005524:	d8 02       	popm	pc
80005526:	d7 03       	nop

80005528 <init_gpio>:
80005528:	d4 01       	pushm	lr
8000552a:	32 0c       	mov	r12,32
8000552c:	e0 a0 0a 4e 	rcall	800069c8 <gpio_enable_gpio_pin>
80005530:	32 1c       	mov	r12,33
80005532:	e0 a0 0a 4b 	rcall	800069c8 <gpio_enable_gpio_pin>
80005536:	32 2c       	mov	r12,34
80005538:	e0 a0 0a 48 	rcall	800069c8 <gpio_enable_gpio_pin>

extern void init_gpio(void) {
    gpio_enable_gpio_pin(B00);
    gpio_enable_gpio_pin(B01);
    gpio_enable_gpio_pin(B02);
    gpio_enable_gpio_pin(B03);
8000553c:	32 3c       	mov	r12,35
8000553e:	e0 a0 0a 45 	rcall	800069c8 <gpio_enable_gpio_pin>
    gpio_enable_gpio_pin(B04);
80005542:	32 4c       	mov	r12,36
80005544:	e0 a0 0a 42 	rcall	800069c8 <gpio_enable_gpio_pin>
    gpio_enable_gpio_pin(B05);
80005548:	32 5c       	mov	r12,37
8000554a:	e0 a0 0a 3f 	rcall	800069c8 <gpio_enable_gpio_pin>
    gpio_enable_gpio_pin(B06);
8000554e:	32 6c       	mov	r12,38
80005550:	e0 a0 0a 3c 	rcall	800069c8 <gpio_enable_gpio_pin>
    gpio_enable_gpio_pin(B07);
80005554:	32 7c       	mov	r12,39
80005556:	e0 a0 0a 39 	rcall	800069c8 <gpio_enable_gpio_pin>
    gpio_enable_gpio_pin(B08);
8000555a:	32 8c       	mov	r12,40
8000555c:	e0 a0 0a 36 	rcall	800069c8 <gpio_enable_gpio_pin>
    gpio_enable_gpio_pin(B09);
80005560:	32 9c       	mov	r12,41
80005562:	e0 a0 0a 33 	rcall	800069c8 <gpio_enable_gpio_pin>
    gpio_enable_gpio_pin(B10);
80005566:	32 ac       	mov	r12,42
80005568:	e0 a0 0a 30 	rcall	800069c8 <gpio_enable_gpio_pin>
    gpio_enable_gpio_pin(NMI);
8000556c:	30 dc       	mov	r12,13
8000556e:	e0 a0 0a 2d 	rcall	800069c8 <gpio_enable_gpio_pin>
}
80005572:	d8 02       	popm	pc

80005574 <clock_null>:
#include "timers.h"
#include "types.h"

//#define UI_IRQ_PRIORITY AVR32_INTC_INT2

void clock_null(u8 phase) {;;}
80005574:	5e fc       	retal	r12
80005576:	d7 03       	nop

80005578 <register_interrupts>:

//-----------------------------
//---- external function definitions

// register interrupts
void register_interrupts(void) {
80005578:	d4 01       	pushm	lr
  // enable interrupts on GPIO inputs
  gpio_enable_pin_interrupt( NMI, GPIO_PIN_CHANGE);
8000557a:	30 0b       	mov	r11,0
8000557c:	30 dc       	mov	r12,13
8000557e:	e0 a0 0a 55 	rcall	80006a28 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( B08, GPIO_PIN_CHANGE);
80005582:	30 0b       	mov	r11,0
80005584:	32 8c       	mov	r12,40
80005586:	e0 a0 0a 51 	rcall	80006a28 <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( B09,	GPIO_PIN_CHANGE);
8000558a:	30 0b       	mov	r11,0
8000558c:	32 9c       	mov	r12,41
8000558e:	e0 a0 0a 4d 	rcall	80006a28 <gpio_enable_pin_interrupt>


  // PA08 - PA15
  INTC_register_interrupt( &irq_port0_line1, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PA08 / 8), UI_IRQ_PRIORITY);
80005592:	30 2a       	mov	r10,2
80005594:	34 1b       	mov	r11,65
80005596:	fe cc ff 2a 	sub	r12,pc,-214
8000559a:	e0 a0 0a 7f 	rcall	80006a98 <INTC_register_interrupt>

  // PB08 - PB15
  INTC_register_interrupt( &irq_port1_line1, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PB08 / 8), UI_IRQ_PRIORITY);
8000559e:	30 2a       	mov	r10,2
800055a0:	34 5b       	mov	r11,69
800055a2:	fe cc ff 8a 	sub	r12,pc,-118

  // register TC interrupt
  INTC_register_interrupt(&irq_tc, APP_TC_IRQ, UI_IRQ_PRIORITY);
800055a6:	e0 a0 0a 79 	rcall	80006a98 <INTC_register_interrupt>
800055aa:	30 2a       	mov	r10,2
800055ac:	e0 6b 01 c0 	mov	r11,448
800055b0:	fe cc ff f4 	sub	r12,pc,-12

  // register uart interrupt
  // INTC_register_interrupt(&irq_usart, AVR32_USART0_IRQ, UI_IRQ_PRIORITY);
}
800055b4:	e0 a0 0a 72 	rcall	80006a98 <INTC_register_interrupt>
800055b8:	d8 02       	popm	pc
800055ba:	d7 03       	nop

800055bc <irq_tc>:
800055bc:	eb cd 40 c0 	pushm	r6-r7,lr
800055c0:	e0 68 07 54 	mov	r8,1876
800055c4:	30 1a       	mov	r10,1
800055c6:	f0 e6 00 00 	ld.d	r6,r8[0]


// timer irq
__attribute__((__interrupt__))
static void irq_tc(void) {
  tcTicks++;
800055ca:	30 0b       	mov	r11,0
800055cc:	ec 0a 00 0a 	add	r10,r6,r10
800055d0:	ee 0b 00 4b 	adc	r11,r7,r11
800055d4:	f0 eb 00 00 	st.d	r8[0],r10
  // overflow control
  if(tcTicks > tcMax) { 
800055d8:	e0 69 07 50 	mov	r9,1872
800055dc:	f0 ea 00 00 	ld.d	r10,r8[0]
800055e0:	e0 66 ff ff 	mov	r6,65535
800055e4:	ea 16 7f ff 	orh	r6,0x7fff
800055e8:	30 07       	mov	r7,0
800055ea:	0c 3a       	cp.w	r10,r6
800055ec:	ee 0b 13 00 	cpc	r11,r7
    tcTicks = 0;
800055f0:	e0 88 00 08 	brls	80005600 <irq_tc+0x44>
800055f4:	30 0a       	mov	r10,0
800055f6:	30 0b       	mov	r11,0
    tcOverflow = 1;
800055f8:	f0 eb 00 00 	st.d	r8[0],r10
  } else {
    tcOverflow = 0;
800055fc:	30 18       	mov	r8,1
800055fe:	c0 28       	rjmp	80005602 <irq_tc+0x46>
  }
  process_timers();
80005600:	30 08       	mov	r8,0
80005602:	b2 88       	st.b	r9[0x0],r8
  // clear interrupt flag by reading timer SR
  tc_read_sr(APP_TC, APP_TC_CHANNEL);
80005604:	e0 a0 04 fa 	rcall	80005ff8 <process_timers>
80005608:	30 0b       	mov	r11,0
8000560a:	fe 7c 38 00 	mov	r12,-51200
}
8000560e:	e0 a0 0c 02 	rcall	80006e12 <tc_read_sr>
80005612:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80005616:	d6 03       	rete

80005618 <irq_port1_line1>:
80005618:	eb cd 40 80 	pushm	r7,lr
8000561c:	32 9c       	mov	r12,41
8000561e:	e0 a0 0a 26 	rcall	80006a6a <gpio_get_pin_interrupt_flag>
80005622:	c0 c0       	breq	8000563a <irq_port1_line1+0x22>
    // e.data = gpio_get_pin_value(kSwitchPins[swIdx]); 
    // event_post(&e);

    // clock norm
    if(gpio_get_pin_interrupt_flag(B09)) {
      clock_external = !gpio_get_pin_value(B09); 
80005624:	32 9c       	mov	r12,41
80005626:	e0 a0 09 dc 	rcall	800069de <gpio_get_pin_value>
8000562a:	e0 68 1b 08 	mov	r8,6920
8000562e:	ec 1c 00 01 	eorl	r12,0x1

      gpio_clear_pin_interrupt_flag(B09);
80005632:	b0 8c       	st.b	r8[0x0],r12
80005634:	32 9c       	mov	r12,41
80005636:	e0 a0 0a 26 	rcall	80006a82 <gpio_clear_pin_interrupt_flag>
    }

    // clock in
    if(gpio_get_pin_interrupt_flag(B08)) {
8000563a:	32 8c       	mov	r12,40
8000563c:	e0 a0 0a 17 	rcall	80006a6a <gpio_get_pin_interrupt_flag>
      // CLOCK BOUNCY WITHOUT THESE PRINTS
      print_dbg("\rclk: ");
80005640:	c1 30       	breq	80005666 <irq_port1_line1+0x4e>
80005642:	fe cc b8 5a 	sub	r12,pc,-18342
      print_dbg_ulong(gpio_get_pin_value(B08));
80005646:	e0 a0 16 71 	rcall	80008328 <print_dbg>
8000564a:	32 8c       	mov	r12,40
8000564c:	e0 a0 09 c9 	rcall	800069de <gpio_get_pin_value>
      (*clock_pulse)(gpio_get_pin_value(B08));
80005650:	e0 a0 16 66 	rcall	8000831c <print_dbg_ulong>
80005654:	31 c8       	mov	r8,28
80005656:	32 8c       	mov	r12,40
80005658:	70 07       	ld.w	r7,r8[0x0]
8000565a:	e0 a0 09 c2 	rcall	800069de <gpio_get_pin_value>
      gpio_clear_pin_interrupt_flag(B08);
8000565e:	5d 17       	icall	r7
80005660:	32 8c       	mov	r12,40
    }
}
80005662:	e0 a0 0a 10 	rcall	80006a82 <gpio_clear_pin_interrupt_flag>
80005666:	e3 cd 40 80 	ldm	sp++,r7,lr
8000566a:	d6 03       	rete

8000566c <irq_port0_line1>:
8000566c:	eb cd 40 80 	pushm	r7,lr
80005670:	30 dc       	mov	r12,13
80005672:	e0 a0 09 fc 	rcall	80006a6a <gpio_get_pin_interrupt_flag>
80005676:	c0 e0       	breq	80005692 <irq_port0_line1+0x26>
80005678:	30 dc       	mov	r12,13
8000567a:	e0 a0 0a 04 	rcall	80006a82 <gpio_clear_pin_interrupt_flag>
8000567e:	30 18       	mov	r8,1
80005680:	e0 67 07 48 	mov	r7,1864
80005684:	30 dc       	mov	r12,13
80005686:	8f 08       	st.w	r7[0x0],r8
    if(gpio_get_pin_interrupt_flag(NMI)) {
      gpio_clear_pin_interrupt_flag(NMI);
      // print_dbg("\r\n ### NMI ### ");
      static event_t e;
      e.type = kEventFront;
      e.data = gpio_get_pin_value(NMI);
80005688:	e0 a0 09 ab 	rcall	800069de <gpio_get_pin_value>
      event_post(&e);
8000568c:	8f 1c       	st.w	r7[0x4],r12
8000568e:	0e 9c       	mov	r12,r7
80005690:	c8 ee       	rcall	800053ac <event_post>
    }
}
80005692:	e3 cd 40 80 	ldm	sp++,r7,lr
80005696:	d6 03       	rete

80005698 <read_serial_dummy>:
  u8 vari; // is variable brightness, true/false
} monomeDesc;


//// dummy functions
static void read_serial_dummy(void) { return; }
80005698:	5e fc       	retal	r12
8000569a:	d7 03       	nop

8000569c <init_monome>:

//================================================
//----- extern function definitions

// init
void init_monome(void) {
8000569c:	e0 68 1b 18 	mov	r8,6936
800056a0:	30 0a       	mov	r10,0
800056a2:	f0 c9 ff 00 	sub	r9,r8,-256
  u32 i;
  for(i=0; i<MONOME_MAX_LED_BYTES; i++) {
800056a6:	10 ca       	st.b	r8++,r10
800056a8:	12 38       	cp.w	r8,r9
    monomeLedBuffer[i] = 0;
  }
  //  print_dbg("\r\n finished monome class init");
}
800056aa:	cf e1       	brne	800056a6 <init_monome+0xa>
800056ac:	5e fc       	retal	r12
800056ae:	d7 03       	nop

800056b0 <monome_grid_key_parse_event_data>:

  ev.type = kEventMonomeGridKey;
  event_post(&ev);
}

void monome_grid_key_parse_event_data(u32 data, u8* x, u8* y, u8* val) {
800056b0:	20 1d       	sub	sp,4
  u8* bdata = (u8*)(&data);
  *x = bdata[0];
800056b2:	f8 08 16 18 	lsr	r8,r12,0x18
800056b6:	b6 88       	st.b	r11[0x0],r8
  *y = bdata[1];
800056b8:	f1 dc c2 08 	bfextu	r8,r12,0x10,0x8
800056bc:	b4 88       	st.b	r10[0x0],r8
  *val = bdata[2];
800056be:	f9 dc c1 08 	bfextu	r12,r12,0x8,0x8
800056c2:	b2 8c       	st.b	r9[0x0],r12
}
800056c4:	2f fd       	sub	sp,-4
800056c6:	5e fc       	retal	r12

800056c8 <monome_set_quadrant_flag>:
  /* print_dbg_hex(monomeFrameDirty); */
}

// set given quadrant dirty flag
extern void monome_set_quadrant_flag(u8 q) {
  monomeFrameDirty |= (1 << q);
800056c8:	e0 68 07 61 	mov	r8,1889
800056cc:	30 19       	mov	r9,1
800056ce:	11 8a       	ld.ub	r10,r8[0x0]
800056d0:	f2 0c 09 49 	lsl	r9,r9,r12
800056d4:	14 49       	or	r9,r10
}
800056d6:	b0 89       	st.b	r8[0x0],r9
800056d8:	5e fc       	retal	r12
800056da:	d7 03       	nop

800056dc <monome_size_x>:
  monomeLedBuffer[monome_xy_idx(x,y)] ^= 0xff;
  monome_calc_quadrant_flag(x, y);  
}


u8 monome_size_x(void) { return mdesc.cols; }
800056dc:	32 08       	mov	r8,32
800056de:	f1 3c 00 08 	ld.ub	r12,r8[8]
800056e2:	5e fc       	retal	r12

800056e4 <monome_is_vari>:
800056e4:	32 08       	mov	r8,32
800056e6:	f1 3c 00 0c 	ld.ub	r12,r8[12]
u8 monome_size_y(void) {  return mdesc.rows; }
u8 monome_is_vari(void) {  return mdesc.vari; }
800056ea:	5e fc       	retal	r12

800056ec <set_intense_mext>:
800056ec:	5e fc       	retal	r12
800056ee:	d7 03       	nop

800056f0 <monome_grid_refresh>:
  }
  return 0;
}

// check dirty flags and refresh leds
void monome_grid_refresh(void) {
800056f0:	d4 01       	pushm	lr
  // may need to wait after each quad until tx transfer is complete
  u8 busy = ftdi_tx_busy();
800056f2:	e0 a0 05 61 	rcall	800061b4 <ftdi_tx_busy>

  // check quad 0
  if( monomeFrameDirty & 0b0001 ) {
800056f6:	e0 68 07 61 	mov	r8,1889
800056fa:	11 88       	ld.ub	r8,r8[0x0]
800056fc:	ed b8 00 00 	bld	r8,0x0
80005700:	c0 40       	breq	80005708 <monome_grid_refresh+0x18>
    while( busy ) { busy = ftdi_tx_busy(); }
80005702:	c1 38       	rjmp	80005728 <monome_grid_refresh+0x38>
80005704:	e0 a0 05 58 	rcall	800061b4 <ftdi_tx_busy>
80005708:	58 0c       	cp.w	r12,0
    (*monome_grid_map)(0, 0, monomeLedBuffer);
8000570a:	cf d1       	brne	80005704 <monome_grid_refresh+0x14>
8000570c:	18 9b       	mov	r11,r12
8000570e:	e0 68 1b 10 	mov	r8,6928
80005712:	e0 6a 1b 18 	mov	r10,6936
    monomeFrameDirty &= 0b1110;
80005716:	70 08       	ld.w	r8,r8[0x0]
80005718:	5d 18       	icall	r8
8000571a:	e0 69 07 61 	mov	r9,1889
8000571e:	30 1c       	mov	r12,1
    busy = 1;
  }
  // check quad 1
  if( monomeFrameDirty & 0b0010 ) {
80005720:	13 88       	ld.ub	r8,r9[0x0]
80005722:	e2 18 00 0e 	andl	r8,0xe,COH
80005726:	b2 88       	st.b	r9[0x0],r8
80005728:	e0 68 07 61 	mov	r8,1889
    if ( mdesc.cols > 7 ) {
8000572c:	11 88       	ld.ub	r8,r8[0x0]
8000572e:	ed b8 00 01 	bld	r8,0x1
80005732:	c1 e1       	brne	8000576e <monome_grid_refresh+0x7e>
80005734:	32 08       	mov	r8,32
80005736:	f1 39 00 08 	ld.ub	r9,r8[8]
8000573a:	30 78       	mov	r8,7
      while( busy ) { busy = ftdi_tx_busy(); }
8000573c:	f0 09 18 00 	cp.b	r9,r8
80005740:	e0 8b 00 05 	brhi	8000574a <monome_grid_refresh+0x5a>
      (*monome_grid_map)(8, 0, monomeLedBuffer + 8);
80005744:	c1 58       	rjmp	8000576e <monome_grid_refresh+0x7e>
80005746:	e0 a0 05 37 	rcall	800061b4 <ftdi_tx_busy>
8000574a:	58 0c       	cp.w	r12,0
8000574c:	cf d1       	brne	80005746 <monome_grid_refresh+0x56>
8000574e:	18 9b       	mov	r11,r12
80005750:	e0 68 1b 10 	mov	r8,6928
      monomeFrameDirty &= 0b1101;
80005754:	30 8c       	mov	r12,8
80005756:	70 08       	ld.w	r8,r8[0x0]
80005758:	e0 6a 1b 18 	mov	r10,6936
8000575c:	2f 8a       	sub	r10,-8
      busy = 1;
    }
  }
  // check quad 2
  if( monomeFrameDirty &  0b0100 ) { 
8000575e:	5d 18       	icall	r8
80005760:	e0 69 07 61 	mov	r9,1889
80005764:	30 1c       	mov	r12,1
80005766:	13 88       	ld.ub	r8,r9[0x0]
    if( mdesc.rows > 7 ) {
80005768:	e2 18 00 0d 	andl	r8,0xd,COH
8000576c:	b2 88       	st.b	r9[0x0],r8
8000576e:	e0 68 07 61 	mov	r8,1889
80005772:	11 88       	ld.ub	r8,r8[0x0]
80005774:	ed b8 00 02 	bld	r8,0x2
80005778:	c1 d1       	brne	800057b2 <monome_grid_refresh+0xc2>
      while( busy ) { busy = ftdi_tx_busy(); }
8000577a:	32 08       	mov	r8,32
8000577c:	f1 39 00 09 	ld.ub	r9,r8[9]
80005780:	30 78       	mov	r8,7
      (*monome_grid_map)(0, 8, monomeLedBuffer + 128);
80005782:	f0 09 18 00 	cp.b	r9,r8
80005786:	e0 8b 00 05 	brhi	80005790 <monome_grid_refresh+0xa0>
8000578a:	c1 48       	rjmp	800057b2 <monome_grid_refresh+0xc2>
8000578c:	e0 a0 05 14 	rcall	800061b4 <ftdi_tx_busy>
      monomeFrameDirty &= 0b1011;
80005790:	58 0c       	cp.w	r12,0
80005792:	cf d1       	brne	8000578c <monome_grid_refresh+0x9c>
80005794:	e0 68 1b 10 	mov	r8,6928
80005798:	e0 6a 1b 18 	mov	r10,6936
      busy = 1;
    }
  }
  // check quad 3
  if( monomeFrameDirty & 0b1000 ) {
8000579c:	70 08       	ld.w	r8,r8[0x0]
8000579e:	28 0a       	sub	r10,-128
800057a0:	30 8b       	mov	r11,8
800057a2:	5d 18       	icall	r8
    if( (mdesc.rows > 7) && (mdesc.cols > 7) )  {
800057a4:	e0 69 07 61 	mov	r9,1889
800057a8:	30 1c       	mov	r12,1
800057aa:	13 88       	ld.ub	r8,r9[0x0]
800057ac:	e2 18 00 0b 	andl	r8,0xb,COH
800057b0:	b2 88       	st.b	r9[0x0],r8
800057b2:	e0 68 07 61 	mov	r8,1889
800057b6:	11 88       	ld.ub	r8,r8[0x0]
800057b8:	ed b8 00 03 	bld	r8,0x3
800057bc:	c2 81       	brne	8000580c <monome_grid_refresh+0x11c>
800057be:	32 09       	mov	r9,32
800057c0:	30 78       	mov	r8,7
      while( busy ) { busy = ftdi_tx_busy(); }
800057c2:	f3 3a 00 09 	ld.ub	r10,r9[9]
800057c6:	f0 0a 18 00 	cp.b	r10,r8
      (*monome_grid_map)(8, 8, monomeLedBuffer + 136);
800057ca:	e0 88 00 21 	brls	8000580c <monome_grid_refresh+0x11c>
800057ce:	f3 39 00 08 	ld.ub	r9,r9[8]
800057d2:	f0 09 18 00 	cp.b	r9,r8
800057d6:	e0 8b 00 05 	brhi	800057e0 <monome_grid_refresh+0xf0>
      monomeFrameDirty &= 0b0111;
800057da:	c1 98       	rjmp	8000580c <monome_grid_refresh+0x11c>
800057dc:	e0 a0 04 ec 	rcall	800061b4 <ftdi_tx_busy>
800057e0:	58 0c       	cp.w	r12,0
800057e2:	cf d1       	brne	800057dc <monome_grid_refresh+0xec>
800057e4:	30 8b       	mov	r11,8
800057e6:	e0 68 1b 10 	mov	r8,6928
      busy = 1;
    }
  }
  while( busy ) { busy = ftdi_tx_busy(); }
800057ea:	16 9c       	mov	r12,r11
800057ec:	70 08       	ld.w	r8,r8[0x0]
800057ee:	e0 6a 1b 18 	mov	r10,6936
}
800057f2:	f4 ca ff 78 	sub	r10,r10,-136
800057f6:	5d 18       	icall	r8
800057f8:	e0 68 07 61 	mov	r8,1889
800057fc:	30 1c       	mov	r12,1
800057fe:	11 89       	ld.ub	r9,r8[0x0]
80005800:	f3 d9 c0 03 	bfextu	r9,r9,0x0,0x3
80005804:	b0 89       	st.b	r8[0x0],r9
80005806:	c0 38       	rjmp	8000580c <monome_grid_refresh+0x11c>
80005808:	e0 a0 04 d6 	rcall	800061b4 <ftdi_tx_busy>
8000580c:	58 0c       	cp.w	r12,0
8000580e:	cf d1       	brne	80005808 <monome_grid_refresh+0x118>
80005810:	d8 02       	popm	pc
80005812:	d7 03       	nop

80005814 <monome_arc_refresh>:


// check flags and refresh arc
void monome_arc_refresh(void) {
80005814:	d4 31       	pushm	r0-r7,lr
  // may need to wait after each quad until tx transfer is complete
  u8 busy = ftdi_tx_busy();
80005816:	30 07       	mov	r7,0
  u8 i;

  for(i=0;i<mdesc.encs;i++) {
80005818:	32 01       	mov	r1,32


// check flags and refresh arc
void monome_arc_refresh(void) {
  // may need to wait after each quad until tx transfer is complete
  u8 busy = ftdi_tx_busy();
8000581a:	e0 a0 04 cd 	rcall	800061b4 <ftdi_tx_busy>
  u8 i;

  for(i=0;i<mdesc.encs;i++) {
    if(monomeFrameDirty & (1<<i)) {
8000581e:	e0 66 07 61 	mov	r6,1889
      if(i==1) print_dbg("\r\nsecond");
      while(busy) { busy = ftdi_tx_busy(); }
      (*monome_ring_map)(i, monomeLedBuffer + (i<<6));
80005822:	30 12       	mov	r2,1
80005824:	e0 63 1b 14 	mov	r3,6932


// check flags and refresh arc
void monome_arc_refresh(void) {
  // may need to wait after each quad until tx transfer is complete
  u8 busy = ftdi_tx_busy();
80005828:	e0 64 1b 18 	mov	r4,6936
  u8 i;

  for(i=0;i<mdesc.encs;i++) {
    if(monomeFrameDirty & (1<<i)) {
8000582c:	30 15       	mov	r5,1
8000582e:	18 90       	mov	r0,r12
80005830:	c2 48       	rjmp	80005878 <monome_arc_refresh+0x64>
80005832:	0d 88       	ld.ub	r8,r6[0x0]
80005834:	f0 07 08 48 	asr	r8,r8,r7
      if(i==1) print_dbg("\r\nsecond");
80005838:	ed b8 00 00 	bld	r8,0x0
8000583c:	c1 c1       	brne	80005874 <monome_arc_refresh+0x60>
8000583e:	e4 07 18 00 	cp.b	r7,r2
80005842:	c0 91       	brne	80005854 <monome_arc_refresh+0x40>
80005844:	fe cc ba 30 	sub	r12,pc,-17872
      while(busy) { busy = ftdi_tx_busy(); }
80005848:	e0 a0 15 70 	rcall	80008328 <print_dbg>
8000584c:	c0 48       	rjmp	80005854 <monome_arc_refresh+0x40>
8000584e:	e0 a0 04 b3 	rcall	800061b4 <ftdi_tx_busy>
      (*monome_ring_map)(i, monomeLedBuffer + (i<<6));
80005852:	18 90       	mov	r0,r12
80005854:	58 00       	cp.w	r0,0
80005856:	cf c1       	brne	8000584e <monome_arc_refresh+0x3a>
80005858:	66 08       	ld.w	r8,r3[0x0]
8000585a:	ee 0b 15 06 	lsl	r11,r7,0x6
      monomeFrameDirty &= ~(1<<i);
8000585e:	0e 9c       	mov	r12,r7
80005860:	e8 0b 00 0b 	add	r11,r4,r11
80005864:	5d 18       	icall	r8
80005866:	0d 89       	ld.ub	r9,r6[0x0]
80005868:	ea 07 09 48 	lsl	r8,r5,r7
void monome_arc_refresh(void) {
  // may need to wait after each quad until tx transfer is complete
  u8 busy = ftdi_tx_busy();
  u8 i;

  for(i=0;i<mdesc.encs;i++) {
8000586c:	30 10       	mov	r0,1
8000586e:	5c d8       	com	r8
80005870:	12 68       	and	r8,r9
80005872:	ac 88       	st.b	r6[0x0],r8
80005874:	2f f7       	sub	r7,-1
80005876:	5c 57       	castu.b	r7
80005878:	e3 38 00 0a 	ld.ub	r8,r1[10]
8000587c:	ee 08 18 00 	cp.b	r8,r7
      monomeFrameDirty &= ~(1<<i);
      busy = 1;
    }
  }

  while( busy ) { busy = ftdi_tx_busy(); }
80005880:	fe 9b ff d9 	brhi	80005832 <monome_arc_refresh+0x1e>
80005884:	c0 48       	rjmp	8000588c <monome_arc_refresh+0x78>
80005886:	e0 a0 04 97 	rcall	800061b4 <ftdi_tx_busy>
}
8000588a:	18 90       	mov	r0,r12
8000588c:	58 00       	cp.w	r0,0
8000588e:	cf c1       	brne	80005886 <monome_arc_refresh+0x72>
80005890:	d8 32       	popm	r0-r7,pc
80005892:	d7 03       	nop

80005894 <set_intense_series>:
80005894:	d4 01       	pushm	lr
80005896:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
8000589a:	ea 18 ff ff 	orh	r8,0xffff
8000589e:	e8 18 ff a0 	orl	r8,0xffa0
800058a2:	e0 6c 07 74 	mov	r12,1908
800058a6:	30 1b       	mov	r11,1
			b (brightness) = 0-15 (4 bits)
encode:		byte 0 = ((id) << 4) | b = 160 + b
*/
  txBuf[0] = 0xa0;
  txBuf[0] |= (v & 0x0f);
  ftdi_write(txBuf, 1);
800058a8:	b8 88       	st.b	r12[0x0],r8
800058aa:	e0 a0 04 c1 	rcall	8000622c <ftdi_write>
}
800058ae:	d8 02       	popm	pc

800058b0 <ring_map_mext>:
800058b0:	d4 01       	pushm	lr
800058b2:	e0 68 07 74 	mov	r8,1908
800058b6:	39 2a       	mov	r10,-110
  //  static u8 tx[11] = { 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  static u8* ptx;
  static u8 i;

  txBuf[0] = 0x92;
  txBuf[1] = n;
800058b8:	b0 9c       	st.b	r8[0x1],r12
800058ba:	f0 c9 ff fe 	sub	r9,r8,-2
  
  ptx = txBuf + 2;
  
  // smash 64 LEDs together, nibbles
  for(i=0; i<32; i++) {
800058be:	b0 8a       	st.b	r8[0x0],r10
  //  static u8 tx[11] = { 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  static u8* ptx;
  static u8 i;

  txBuf[0] = 0x92;
  txBuf[1] = n;
800058c0:	31 fc       	mov	r12,31
  
  ptx = txBuf + 2;
  
  // smash 64 LEDs together, nibbles
  for(i=0; i<32; i++) {
800058c2:	30 08       	mov	r8,0
    *ptx = *data << 4;
800058c4:	c0 b8       	rjmp	800058da <ring_map_mext+0x2a>
800058c6:	17 8a       	ld.ub	r10,r11[0x0]
800058c8:	a5 6a       	lsl	r10,0x4
800058ca:	5c 5a       	castu.b	r10

/* static void grid_map_level_mext(u8 x, u8 y, const u8* data) { */
/*   // TODO */
/* } */

static void ring_map_mext(u8 n, u8* data) {
800058cc:	b2 8a       	st.b	r9[0x0],r10
  
  // smash 64 LEDs together, nibbles
  for(i=0; i<32; i++) {
    *ptx = *data << 4;
    data++;
    *ptx |= *data;
800058ce:	2f f8       	sub	r8,-1

/* static void grid_map_level_mext(u8 x, u8 y, const u8* data) { */
/*   // TODO */
/* } */

static void ring_map_mext(u8 n, u8* data) {
800058d0:	17 9e       	ld.ub	lr,r11[0x1]
  
  // smash 64 LEDs together, nibbles
  for(i=0; i<32; i++) {
    *ptx = *data << 4;
    data++;
    *ptx |= *data;
800058d2:	5c 58       	castu.b	r8

/* static void grid_map_level_mext(u8 x, u8 y, const u8* data) { */
/*   // TODO */
/* } */

static void ring_map_mext(u8 n, u8* data) {
800058d4:	1c 4a       	or	r10,lr
  
  // smash 64 LEDs together, nibbles
  for(i=0; i<32; i++) {
    *ptx = *data << 4;
    data++;
    *ptx |= *data;
800058d6:	2f eb       	sub	r11,-2
  txBuf[1] = n;
  
  ptx = txBuf + 2;
  
  // smash 64 LEDs together, nibbles
  for(i=0; i<32; i++) {
800058d8:	12 ca       	st.b	r9++,r10
800058da:	f8 08 18 00 	cp.b	r8,r12
800058de:	fe 98 ff f4 	brls	800058c6 <ring_map_mext+0x16>
800058e2:	e0 6a 07 6c 	mov	r10,1900
    *ptx |= *data;
    data++;
    ptx++;
  }

  ftdi_write(txBuf, 32 + 2);
800058e6:	95 09       	st.w	r10[0x0],r9
  txBuf[1] = n;
  
  ptx = txBuf + 2;
  
  // smash 64 LEDs together, nibbles
  for(i=0; i<32; i++) {
800058e8:	e0 69 07 bc 	mov	r9,1980
    *ptx |= *data;
    data++;
    ptx++;
  }

  ftdi_write(txBuf, 32 + 2);
800058ec:	32 2b       	mov	r11,34
800058ee:	b2 88       	st.b	r9[0x0],r8
}
800058f0:	e0 6c 07 74 	mov	r12,1908
800058f4:	e0 a0 04 9c 	rcall	8000622c <ftdi_write>
800058f8:	d8 02       	popm	pc
800058fa:	d7 03       	nop

800058fc <grid_map_mext>:
800058fc:	d4 21       	pushm	r4-r7,lr
800058fe:	e0 68 07 74 	mov	r8,1908
80005902:	b0 9c       	st.b	r8[0x1],r12
static void grid_map_mext( u8 x, u8 y, const u8* data ) {
  //  static u8 tx[11] = { 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  static u8* ptx;
  static u8 i, j;

  txBuf[0] = 0x1A;  
80005904:	b0 ab       	st.b	r8[0x2],r11
  txBuf[1] = x;
  txBuf[2] = y;
  
  ptx = txBuf + 3;
80005906:	31 ac       	mov	r12,26
80005908:	f0 cb ff fd 	sub	r11,r8,-3
8000590c:	b0 8c       	st.b	r8[0x0],r12
8000590e:	e0 68 07 c8 	mov	r8,1992
80005912:	91 0b       	st.w	r8[0x0],r11
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
80005914:	e0 68 07 72 	mov	r8,1906

  txBuf[0] = 0x1A;  
  txBuf[1] = x;
  txBuf[2] = y;
  
  ptx = txBuf + 3;
80005918:	16 99       	mov	r9,r11
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
8000591a:	30 76       	mov	r6,7
8000591c:	11 8b       	ld.ub	r11,r8[0x0]
8000591e:	30 08       	mov	r8,0
80005920:	c1 38       	rjmp	80005946 <grid_map_mext+0x4a>
    // *ptx = 0;
    for(j=0; j<4; j++) {
      // binary value of data byte to bitfield of tx byte
      // *ptx |= ((*data > 0) << j);
      *ptx = (*data) << 4;
80005922:	12 9e       	mov	lr,r9
80005924:	14 9c       	mov	r12,r10
80005926:	30 0b       	mov	r11,0
80005928:	19 87       	ld.ub	r7,r12[0x0]
      data++;
      *ptx |= *data;
8000592a:	a5 67       	lsl	r7,0x4
8000592c:	5c 57       	castu.b	r7
8000592e:	bc 87       	st.b	lr[0x0],r7
// this will hopefully help optimize operator routines,
// which cannot be called less often than refresh/tx, and are therefore prioritized.
////////////////////////////////////////////////
// HACKED to always do var-bright update
////////////////////////////////////////////////
static void grid_map_mext( u8 x, u8 y, const u8* data ) {
80005930:	19 95       	ld.ub	r5,r12[0x1]
80005932:	0a 47       	or	r7,r5
  ptx = txBuf + 3;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    // *ptx = 0;
    for(j=0; j<4; j++) {
80005934:	1c c7       	st.b	lr++,r7
80005936:	2f ec       	sub	r12,-2
// this will hopefully help optimize operator routines,
// which cannot be called less often than refresh/tx, and are therefore prioritized.
////////////////////////////////////////////////
// HACKED to always do var-bright update
////////////////////////////////////////////////
static void grid_map_mext( u8 x, u8 y, const u8* data ) {
80005938:	2f fb       	sub	r11,-1
8000593a:	58 4b       	cp.w	r11,4
8000593c:	cf 61       	brne	80005928 <grid_map_mext+0x2c>
8000593e:	2f f8       	sub	r8,-1
  txBuf[2] = y;
  
  ptx = txBuf + 3;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
80005940:	2f 0a       	sub	r10,-16
80005942:	5c 58       	castu.b	r8
80005944:	2f c9       	sub	r9,-4
80005946:	ec 08 18 00 	cp.b	r8,r6
8000594a:	fe 98 ff ec 	brls	80005922 <grid_map_mext+0x26>
8000594e:	e0 6a 07 72 	mov	r10,1906
      ptx++;
    }
    data += MONOME_QUAD_LEDS; // skip the rest of the row to get back in target quad
    // ptx++;
  }
  ftdi_write(txBuf, 32 + 3);
80005952:	b4 8b       	st.b	r10[0x0],r11
  txBuf[2] = y;
  
  ptx = txBuf + 3;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
80005954:	e0 6a 07 c8 	mov	r10,1992
      ptx++;
    }
    data += MONOME_QUAD_LEDS; // skip the rest of the row to get back in target quad
    // ptx++;
  }
  ftdi_write(txBuf, 32 + 3);
80005958:	95 09       	st.w	r10[0x0],r9
8000595a:	e0 69 07 71 	mov	r9,1905
}
8000595e:	32 3b       	mov	r11,35
80005960:	b2 88       	st.b	r9[0x0],r8
80005962:	e0 6c 07 74 	mov	r12,1908
80005966:	e0 a0 04 63 	rcall	8000622c <ftdi_write>
8000596a:	d8 22       	popm	r4-r7,pc

8000596c <grid_map_series>:
8000596c:	d4 21       	pushm	r4-r7,lr
8000596e:	30 78       	mov	r8,7
80005970:	f0 0c 18 00 	cp.b	r12,r8
  static u8 * ptx;
  static u8 i, j;
  // command (upper nibble)
  txBuf[0] = 0x80;
  // quadrant index (lower nibble, 0-3)
  txBuf[0] |= ( (x > 7) | ((y > 7) << 1) );
80005974:	5f b9       	srhi	r9
80005976:	f6 08 18 00 	cp.b	r8,r11
8000597a:	f9 bb 03 02 	movlo	r11,2
8000597e:	f9 bb 02 00 	movhs	r11,0
80005982:	ea 19 ff ff 	orh	r9,0xffff
80005986:	e8 19 ff 80 	orl	r9,0xff80
8000598a:	16 49       	or	r9,r11
8000598c:	e0 6c 07 74 	mov	r12,1908
80005990:	18 c9       	st.b	r12++,r9
80005992:	e0 69 07 73 	mov	r9,1907
  // pointer to tx data
  ptx = txBuf + 1;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
80005996:	13 8b       	ld.ub	r11,r9[0x0]

  // pointer to tx data
  ptx = txBuf + 1;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
80005998:	30 09       	mov	r9,0
    *ptx = 0;
8000599a:	12 9e       	mov	lr,r9
    // print_dbg_hex(txBuf[(i*2) + 1]);
  }
  ftdi_write(txBuf, 16);
}

static void grid_map_series(u8 x, u8 y, const u8* data) {
8000599c:	c1 98       	rjmp	800059ce <grid_map_series+0x62>
8000599e:	b8 8e       	st.b	r12[0x0],lr
800059a0:	f4 c7 ff f8 	sub	r7,r10,-8
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > VB_CUTOFF) << j);
800059a4:	14 9b       	mov	r11,r10
800059a6:	c0 a8       	rjmp	800059ba <grid_map_series+0x4e>
800059a8:	17 35       	ld.ub	r5,r11++
800059aa:	f0 05 18 00 	cp.b	r5,r8
800059ae:	5f b5       	srhi	r5
800059b0:	ea 06 09 46 	lsl	r6,r5,r6
800059b4:	19 85       	ld.ub	r5,r12[0x0]
      ++data;
800059b6:	0a 46       	or	r6,r5
800059b8:	b8 86       	st.b	r12[0x0],r6
800059ba:	f6 0a 01 06 	sub	r6,r11,r10
  ptx = txBuf + 1;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
800059be:	5c 56       	castu.b	r6
800059c0:	0e 3b       	cp.w	r11,r7
800059c2:	cf 31       	brne	800059a8 <grid_map_series+0x3c>
800059c4:	2f f9       	sub	r9,-1
800059c6:	2f 0a       	sub	r10,-16
800059c8:	5c 59       	castu.b	r9

  // pointer to tx data
  ptx = txBuf + 1;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
800059ca:	2f fc       	sub	r12,-1
800059cc:	30 8b       	mov	r11,8
800059ce:	f0 09 18 00 	cp.b	r9,r8
800059d2:	fe 98 ff e6 	brls	8000599e <grid_map_series+0x32>
800059d6:	e0 68 07 5c 	mov	r8,1884
800059da:	91 0c       	st.w	r8[0x0],r12
    // print_dbg_hex(*ptx);

    data += MONOME_QUAD_LEDS; // skip the rest of the row to get back in target quad
    ++ptx;
  }
  ftdi_write(txBuf, MONOME_QUAD_LEDS + 1);  
800059dc:	e0 68 07 73 	mov	r8,1907
800059e0:	b0 8b       	st.b	r8[0x0],r11
800059e2:	e0 68 07 68 	mov	r8,1896
}
800059e6:	30 9b       	mov	r11,9
800059e8:	b0 89       	st.b	r8[0x0],r9
800059ea:	e0 6c 07 74 	mov	r12,1908
800059ee:	e0 a0 04 1f 	rcall	8000622c <ftdi_write>
800059f2:	d8 22       	popm	r4-r7,pc

800059f4 <grid_map_40h>:
800059f4:	d4 21       	pushm	r4-r7,lr
800059f6:	30 08       	mov	r8,0
800059f8:	18 4b       	or	r11,r12
800059fa:	f0 0b 18 00 	cp.b	r11,r8

static void grid_map_40h(u8 x, u8 y, const u8* data) {
  // print_dbg("\n\r=== grid_map_40h ===");
  static u8 i, j;
  // ignore all but first quadrant -- do any devices larger than 8x8 speak 40h?
  if (x != 0 || y != 0) {
800059fe:	c3 a1       	brne	80005a72 <grid_map_40h+0x7e>
80005a00:	e0 68 07 69 	mov	r8,1897
80005a04:	30 77       	mov	r7,7
80005a06:	11 8b       	ld.ub	r11,r8[0x0]
80005a08:	e0 69 07 74 	mov	r9,1908
    return;
  }
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
80005a0c:	30 08       	mov	r8,0
    // led row command + row number
    txBuf[(i*2)] = 0x70 + i;
80005a0e:	10 9e       	mov	lr,r8
80005a10:	c2 28       	rjmp	80005a54 <grid_map_40h+0x60>
80005a12:	f0 0c 15 01 	lsl	r12,r8,0x1
80005a16:	f0 cb ff 90 	sub	r11,r8,-112
  }
  ftdi_write(txBuf, 32 + 3);
}


static void grid_map_40h(u8 x, u8 y, const u8* data) {
80005a1a:	f2 0c 0b 0b 	st.b	r9[r12],r11
    return;
  }
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    // led row command + row number
    txBuf[(i*2)] = 0x70 + i;
    txBuf[(i*2)+1] = 0;
80005a1e:	f4 c6 ff f8 	sub	r6,r10,-8
80005a22:	2f fc       	sub	r12,-1
80005a24:	14 9b       	mov	r11,r10
    // print_dbg("\r\n * data bytes: ");
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
80005a26:	f2 0c 0b 0e 	st.b	r9[r12],lr
      // set row bit if led should be on
      // print_dbg("0x");
      // print_dbg_hex(*data);
      // print_dbg(" ");
      txBuf[(i*2)+1] |= ((*data > 0) << j);
80005a2a:	c0 c8       	rjmp	80005a42 <grid_map_40h+0x4e>
80005a2c:	17 34       	ld.ub	r4,r11++
80005a2e:	fc 04 18 00 	cp.b	r4,lr
80005a32:	5f 14       	srne	r4
80005a34:	e8 05 09 45 	lsl	r5,r4,r5
80005a38:	f2 0c 07 04 	ld.ub	r4,r9[r12]
80005a3c:	08 45       	or	r5,r4
      // advance data to next bit
      ++data;
80005a3e:	f2 0c 0b 05 	st.b	r9[r12],r5
80005a42:	f6 0a 01 05 	sub	r5,r11,r10
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    // led row command + row number
    txBuf[(i*2)] = 0x70 + i;
    txBuf[(i*2)+1] = 0;
    // print_dbg("\r\n * data bytes: ");
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
80005a46:	5c 55       	castu.b	r5
80005a48:	0c 3b       	cp.w	r11,r6
80005a4a:	cf 11       	brne	80005a2c <grid_map_40h+0x38>
80005a4c:	2f f8       	sub	r8,-1
80005a4e:	2f 0a       	sub	r10,-16
  static u8 i, j;
  // ignore all but first quadrant -- do any devices larger than 8x8 speak 40h?
  if (x != 0 || y != 0) {
    return;
  }
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
80005a50:	5c 58       	castu.b	r8
80005a52:	30 8b       	mov	r11,8
80005a54:	ee 08 18 00 	cp.b	r8,r7
80005a58:	fe 98 ff dd 	brls	80005a12 <grid_map_40h+0x1e>
80005a5c:	e0 69 07 69 	mov	r9,1897
80005a60:	b2 8b       	st.b	r9[0x0],r11
    // print_dbg("\n\r 40h: send led_row command: ");
    // print_dbg_hex(txBuf[i*2]);
    // print_dbg(" row data: 0x");
    // print_dbg_hex(txBuf[(i*2) + 1]);
  }
  ftdi_write(txBuf, 16);
80005a62:	e0 69 07 62 	mov	r9,1890
80005a66:	31 0b       	mov	r11,16
80005a68:	b2 88       	st.b	r9[0x0],r8
80005a6a:	e0 6c 07 74 	mov	r12,1908
80005a6e:	e0 a0 03 df 	rcall	8000622c <ftdi_write>
80005a72:	d8 22       	popm	r4-r7,pc

80005a74 <read_serial_series>:
80005a74:	d4 31       	pushm	r0-r7,lr
80005a76:	e0 a0 03 93 	rcall	8000619c <ftdi_rx_buf>
80005a7a:	e0 65 07 c0 	mov	r5,1984
}

static void read_serial_series(void) {
  u8* prx = ftdi_rx_buf();
  u8 i;
  rxBytes = ftdi_rx_bytes();
80005a7e:	18 94       	mov	r4,r12
80005a80:	18 97       	mov	r7,r12
80005a82:	e0 63 07 cc 	mov	r3,1996
  *h = *pdata;
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
80005a86:	e0 a0 03 8f 	rcall	800061a4 <ftdi_rx_bytes>
  /* print_dbg("; y: 0x"); */
  /* print_dbg_hex(y); */
  /* print_dbg("; z: 0x"); */
  /* print_dbg_hex(val); */

  ev.type = kEventMonomeGridKey;
80005a8a:	ea c6 ff fc 	sub	r6,r5,-4
  // print_dbg_hex(prx[0]);
  // print_dbg(" , 0x");
  // print_dbg_hex(prx[1]);
  // print_dbg(" ]");
  i = 0;
  while(i < rxBytes) {
80005a8e:	30 c2       	mov	r2,12
    /* print_dbg(" ; z : 0x"); */
    /* print_dbg_hex(	 ((prx[0] & 0xf0) == 0) ); */
    
    // process consecutive pairs of bytes
    monome_grid_key_write_event( ((prx[1] & 0xf0) >> 4) ,
				 prx[1] & 0xf,
80005a90:	a6 8c       	st.b	r3[0x0],r12
80005a92:	c1 28       	rjmp	80005ab6 <read_serial_series+0x42>

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
  data[1] = y;
80005a94:	0f 99       	ld.ub	r9,r7[0x1]
80005a96:	0f 88       	ld.ub	r8,r7[0x0]
    /* print_dbg(" ; z : 0x"); */
    /* print_dbg_hex(	 ((prx[0] & 0xf0) == 0) ); */
    
    // process consecutive pairs of bytes
    monome_grid_key_write_event( ((prx[1] & 0xf0) >> 4) ,
				 prx[1] & 0xf,
80005a98:	f5 d9 c0 04 	bfextu	r10,r9,0x0,0x4

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
  data[1] = y;
80005a9c:	e2 18 00 f0 	andl	r8,0xf0,COH
  data[2] = val;
80005aa0:	ac 9a       	st.b	r6[0x1],r10
  /* print_dbg("; y: 0x"); */
  /* print_dbg_hex(y); */
  /* print_dbg("; z: 0x"); */
  /* print_dbg_hex(val); */

  ev.type = kEventMonomeGridKey;
80005aa2:	5f 08       	sreq	r8
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
80005aa4:	ac a8       	st.b	r6[0x2],r8
    monome_grid_key_write_event( ((prx[1] & 0xf0) >> 4) ,
				 prx[1] & 0xf,
				 ((prx[0] & 0xf0) == 0)
				 );
    i += 2;
    prx += 2;
80005aa6:	8b 02       	st.w	r5[0x0],r2
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
80005aa8:	a5 89       	lsr	r9,0x4
  /* print_dbg_hex(y); */
  /* print_dbg("; z: 0x"); */
  /* print_dbg_hex(val); */

  ev.type = kEventMonomeGridKey;
  event_post(&ev);
80005aaa:	2f e7       	sub	r7,-2
80005aac:	ac 89       	st.b	r6[0x0],r9
80005aae:	e0 6c 07 c0 	mov	r12,1984
  // print_dbg_hex(prx[0]);
  // print_dbg(" , 0x");
  // print_dbg_hex(prx[1]);
  // print_dbg(" ]");
  i = 0;
  while(i < rxBytes) {
80005ab2:	fe b0 fc 7d 	rcall	800053ac <event_post>
80005ab6:	0e 99       	mov	r9,r7
80005ab8:	07 88       	ld.ub	r8,r3[0x0]
80005aba:	08 19       	sub	r9,r4
				 );
    i += 2;
    prx += 2;
  }

}
80005abc:	f0 09 18 00 	cp.b	r9,r8
80005ac0:	ce a3       	brcs	80005a94 <read_serial_series+0x20>
80005ac2:	d8 32       	popm	r0-r7,pc

80005ac4 <read_serial_40h>:
80005ac4:	d4 31       	pushm	r0-r7,lr
80005ac6:	e0 a0 03 6b 	rcall	8000619c <ftdi_rx_buf>
80005aca:	e0 65 07 c0 	mov	r5,1984
80005ace:	18 94       	mov	r4,r12
80005ad0:	18 97       	mov	r7,r12
80005ad2:	e0 63 07 cc 	mov	r3,1996
  *h = *pdata;
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
80005ad6:	e0 a0 03 67 	rcall	800061a4 <ftdi_rx_bytes>
  /* print_dbg("; y: 0x"); */
  /* print_dbg_hex(y); */
  /* print_dbg("; z: 0x"); */
  /* print_dbg_hex(val); */

  ev.type = kEventMonomeGridKey;
80005ada:	ea c6 ff fc 	sub	r6,r5,-4
  // print_dbg_hex(prx[0]);
  // print_dbg(" , 0x");
  // print_dbg_hex(prx[1]);
  // print_dbg(" ]");
  i = 0;
  while(i < rxBytes) {
80005ade:	30 c2       	mov	r2,12
    // print_dbg_hex(prx[1] & 0xf);
    // print_dbg(" ; z : 0x");
    // print_dbg_hex(   ((prx[0] & 0xf) != 0) );

    // press event
    if ((prx[0] & 0xf0) == 0) {
80005ae0:	a6 8c       	st.b	r3[0x0],r12
80005ae2:	c1 68       	rjmp	80005b0e <read_serial_40h+0x4a>
80005ae4:	0f 88       	ld.ub	r8,r7[0x0]
80005ae6:	10 99       	mov	r9,r8
80005ae8:	e2 19 00 f0 	andl	r9,0xf0,COH
// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
  data[1] = y;
  data[2] = val;
80005aec:	c1 01       	brne	80005b0c <read_serial_40h+0x48>
80005aee:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80005af2:	5f 19       	srne	r9

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
  data[1] = y;
80005af4:	0f 98       	ld.ub	r8,r7[0x1]
80005af6:	ac a9       	st.b	r6[0x2],r9
80005af8:	f3 d8 c0 04 	bfextu	r9,r8,0x0,0x4
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
80005afc:	ac 99       	st.b	r6[0x1],r9
  /* print_dbg_hex(y); */
  /* print_dbg("; z: 0x"); */
  /* print_dbg_hex(val); */

  ev.type = kEventMonomeGridKey;
  event_post(&ev);
80005afe:	8b 02       	st.w	r5[0x0],r2
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
80005b00:	a5 88       	lsr	r8,0x4
  /* print_dbg_hex(y); */
  /* print_dbg("; z: 0x"); */
  /* print_dbg_hex(val); */

  ev.type = kEventMonomeGridKey;
  event_post(&ev);
80005b02:	e0 6c 07 c0 	mov	r12,1984
        ((prx[0] & 0xf) != 0)
      );
    }
    
    i += 2;
    prx += 2;
80005b06:	ac 88       	st.b	r6[0x0],r8
  // print_dbg_hex(prx[0]);
  // print_dbg(" , 0x");
  // print_dbg_hex(prx[1]);
  // print_dbg(" ]");
  i = 0;
  while(i < rxBytes) {
80005b08:	fe b0 fc 52 	rcall	800053ac <event_post>
80005b0c:	2f e7       	sub	r7,-2
80005b0e:	0e 99       	mov	r9,r7
80005b10:	07 88       	ld.ub	r8,r3[0x0]
80005b12:	08 19       	sub	r9,r4
    }
    
    i += 2;
    prx += 2;
  }
}
80005b14:	f0 09 18 00 	cp.b	r9,r8
80005b18:	ce 63       	brcs	80005ae4 <read_serial_40h+0x20>
80005b1a:	d8 32       	popm	r0-r7,pc

80005b1c <read_serial_mext>:
80005b1c:	d4 31       	pushm	r0-r7,lr
80005b1e:	e0 67 07 cc 	mov	r7,1996
80005b22:	e0 a0 03 41 	rcall	800061a4 <ftdi_rx_bytes>
80005b26:	ae 8c       	st.b	r7[0x0],r12
80005b28:	c5 e0       	breq	80005be4 <read_serial_mext+0xc8>
80005b2a:	e0 68 07 70 	mov	r8,1904
  static u8* prx; // pointer to rx buf
  static u8 com;
  
  rxBytes = ftdi_rx_bytes();
  if( rxBytes ) {
    nbp = 0;
80005b2e:	30 09       	mov	r9,0
  // TODO
}

// ring encoder
static inline void monome_ring_enc_write_event( u8 n, u8 val) {
  u8* data = (u8*)(&(ev.data));
80005b30:	10 96       	mov	r6,r8
  static u8 com;
  
  rxBytes = ftdi_rx_bytes();
  if( rxBytes ) {
    nbp = 0;
    prx = ftdi_rx_buf();
80005b32:	b0 89       	st.b	r8[0x0],r9
80005b34:	e0 64 07 c0 	mov	r4,1984
80005b38:	e0 a0 03 32 	rcall	8000619c <ftdi_rx_buf>
  // TODO
}

// ring encoder
static inline void monome_ring_enc_write_event( u8 n, u8 val) {
  u8* data = (u8*)(&(ev.data));
80005b3c:	e0 60 07 60 	mov	r0,1888
   // print_dbg("\r\n monome.c wrote event; n: 0x"); 
   // print_dbg_hex(n); 
   // print_dbg("; d: 0x"); 
   // print_dbg_hex(val); 

  ev.type = kEventMonomeRingEnc;
80005b40:	e0 67 07 64 	mov	r7,1892
  static u8 com;
  
  rxBytes = ftdi_rx_bytes();
  if( rxBytes ) {
    nbp = 0;
    prx = ftdi_rx_buf();
80005b44:	35 03       	mov	r3,80
    while(nbp < rxBytes) {
80005b46:	e8 c5 ff fc 	sub	r5,r4,-4
      com = (u8)(*(prx++));
      nbp++;
80005b4a:	30 d1       	mov	r1,13
80005b4c:	35 12       	mov	r2,81
  rxBytes = ftdi_rx_bytes();
  if( rxBytes ) {
    nbp = 0;
    prx = ftdi_rx_buf();
    while(nbp < rxBytes) {
      com = (u8)(*(prx++));
80005b4e:	8f 0c       	st.w	r7[0x0],r12
80005b50:	c4 28       	rjmp	80005bd4 <read_serial_mext+0xb8>
      nbp++;
80005b52:	2f f8       	sub	r8,-1
  rxBytes = ftdi_rx_bytes();
  if( rxBytes ) {
    nbp = 0;
    prx = ftdi_rx_buf();
    while(nbp < rxBytes) {
      com = (u8)(*(prx++));
80005b54:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
      nbp++;
      switch(com) {
80005b58:	6e 08       	ld.w	r8,r7[0x0]
80005b5a:	11 39       	ld.ub	r9,r8++
80005b5c:	ac 8a       	st.b	r6[0x0],r10
80005b5e:	a0 89       	st.b	r0[0x0],r9
80005b60:	8f 08       	st.w	r7[0x0],r8
80005b62:	e6 09 18 00 	cp.b	r9,r3
80005b66:	c2 30       	breq	80005bac <read_serial_mext+0x90>
80005b68:	e0 8b 00 0b 	brhi	80005b7e <read_serial_mext+0x62>
80005b6c:	32 0a       	mov	r10,32
80005b6e:	f4 09 18 00 	cp.b	r9,r10
80005b72:	c0 e0       	breq	80005b8e <read_serial_mext+0x72>
80005b74:	32 1a       	mov	r10,33
80005b76:	f4 09 18 00 	cp.b	r9,r10
80005b7a:	c3 51       	brne	80005be4 <read_serial_mext+0xc8>
80005b7c:	c0 f8       	rjmp	80005b9a <read_serial_mext+0x7e>
80005b7e:	e4 09 18 00 	cp.b	r9,r2
80005b82:	c2 20       	breq	80005bc6 <read_serial_mext+0xaa>
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
80005b84:	35 2b       	mov	r11,82
    while(nbp < rxBytes) {
      com = (u8)(*(prx++));
      nbp++;
      switch(com) {
      case 0x20: // grid key up
      	monome_grid_key_write_event( *prx, *(prx+1), 0);
80005b86:	f6 09 18 00 	cp.b	r9,r11

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
  data[1] = y;
80005b8a:	c2 d1       	brne	80005be4 <read_serial_mext+0xc8>
  data[2] = val;
80005b8c:	c2 08       	rjmp	80005bcc <read_serial_mext+0xb0>
80005b8e:	11 89       	ld.ub	r9,r8[0x0]
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
80005b90:	11 98       	ld.ub	r8,r8[0x1]
      	monome_grid_key_write_event( *prx, *(prx+1), 0);
      	nbp += 2;
      	prx += 2;
      	break;
      case 0x21: // grid key down
      	monome_grid_key_write_event( *prx, *(prx+1), 1);
80005b92:	aa 89       	st.b	r5[0x0],r9
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
80005b94:	aa 98       	st.b	r5[0x1],r8
  data[1] = y;
80005b96:	30 08       	mov	r8,0
  data[2] = val;
80005b98:	c0 68       	rjmp	80005ba4 <read_serial_mext+0x88>
80005b9a:	11 89       	ld.ub	r9,r8[0x0]
  /* print_dbg("; y: 0x"); */
  /* print_dbg_hex(y); */
  /* print_dbg("; z: 0x"); */
  /* print_dbg_hex(val); */

  ev.type = kEventMonomeGridKey;
80005b9c:	11 98       	ld.ub	r8,r8[0x1]
80005b9e:	aa 89       	st.b	r5[0x0],r9
80005ba0:	aa 98       	st.b	r5[0x1],r8
}

// ring encoder
static inline void monome_ring_enc_write_event( u8 n, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = n;
80005ba2:	30 18       	mov	r8,1
      	monome_grid_key_write_event( *prx, *(prx+1), 1);
      	nbp += 2;
      	prx += 2;
      	break;
    	case 0x50: // ring delta
      	monome_ring_enc_write_event( *prx, *(prx+1));
80005ba4:	aa a8       	st.b	r5[0x2],r8
}

// ring encoder
static inline void monome_ring_enc_write_event( u8 n, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = n;
80005ba6:	30 c8       	mov	r8,12
  data[1] = val;
80005ba8:	89 08       	st.w	r4[0x0],r8
   // print_dbg("\r\n monome.c wrote event; n: 0x"); 
   // print_dbg_hex(n); 
   // print_dbg("; d: 0x"); 
   // print_dbg_hex(val); 

  ev.type = kEventMonomeRingEnc;
80005baa:	c0 68       	rjmp	80005bb6 <read_serial_mext+0x9a>
  event_post(&ev);
80005bac:	11 89       	ld.ub	r9,r8[0x0]
80005bae:	11 98       	ld.ub	r8,r8[0x1]
80005bb0:	aa 89       	st.b	r5[0x0],r9
      	nbp += 2;
      	prx += 2;
      	break;
    	case 0x50: // ring delta
      	monome_ring_enc_write_event( *prx, *(prx+1));
      	nbp += 2;
80005bb2:	aa 98       	st.b	r5[0x1],r8
80005bb4:	89 01       	st.w	r4[0x0],r1
80005bb6:	e0 6c 07 c0 	mov	r12,1984
      	prx += 2;
      	break;
      case 0x51 : // ring key up
      	monome_ring_key_write_event( *prx++, 0);
      	prx++;
80005bba:	fe b0 fb f9 	rcall	800053ac <event_post>
      	break;
80005bbe:	0d 88       	ld.ub	r8,r6[0x0]
      case 0x52 : // ring key down
      	monome_ring_key_write_event( *prx++, 1);
80005bc0:	2f e8       	sub	r8,-2
      	nbp++;
80005bc2:	ac 88       	st.b	r6[0x0],r8
      case 0x51 : // ring key up
      	monome_ring_key_write_event( *prx++, 0);
      	prx++;
      	break;
      case 0x52 : // ring key down
      	monome_ring_key_write_event( *prx++, 1);
80005bc4:	6e 08       	ld.w	r8,r7[0x0]
      	nbp++;
80005bc6:	2f e8       	sub	r8,-2
  
  rxBytes = ftdi_rx_bytes();
  if( rxBytes ) {
    nbp = 0;
    prx = ftdi_rx_buf();
    while(nbp < rxBytes) {
80005bc8:	8f 08       	st.w	r7[0x0],r8
80005bca:	c0 58       	rjmp	80005bd4 <read_serial_mext+0xb8>
80005bcc:	2f f8       	sub	r8,-1
80005bce:	2f fa       	sub	r10,-1
80005bd0:	8f 08       	st.w	r7[0x0],r8
80005bd2:	ac 8a       	st.b	r6[0x0],r10
80005bd4:	e0 6a 07 cc 	mov	r10,1996
80005bd8:	0d 88       	ld.ub	r8,r6[0x0]
80005bda:	15 89       	ld.ub	r9,r10[0x0]
80005bdc:	f0 09 18 00 	cp.b	r9,r8
80005be0:	fe 9b ff b9 	brhi	80005b52 <read_serial_mext+0x36>
80005be4:	d8 32       	popm	r0-r7,pc
80005be6:	d7 03       	nop

80005be8 <monome_connect_write_event>:
80005be8:	d4 01       	pushm	lr
80005bea:	32 09       	mov	r9,32
80005bec:	f3 3b 00 09 	ld.ub	r11,r9[9]
80005bf0:	e0 68 07 c0 	mov	r8,1984
80005bf4:	f0 ca ff fb 	sub	r10,r8,-5
  // print_dbg_ulong(mdesc.cols);
  // print_dbg(" rows: ");
  // print_dbg_ulong(mdesc.rows);

  ev.type = kEventMonomeConnect;
  ev.type = kEventMonomeConnect;
80005bf8:	b4 9b       	st.b	r10[0x1],r11
  *data++ = (u8)(mdesc.device); 	// device (8bits)
  *data++ = mdesc.cols;		// width / count
  *data++ = mdesc.rows;		// height / resolution
  //  *data = 0; 		// unused
  event_post(&ev);
80005bfa:	30 8b       	mov	r11,8
  // print_dbg_ulong(mdesc.cols);
  // print_dbg(" rows: ");
  // print_dbg_ulong(mdesc.rows);

  ev.type = kEventMonomeConnect;
  ev.type = kEventMonomeConnect;
80005bfc:	10 9c       	mov	r12,r8
  *data++ = (u8)(mdesc.device); 	// device (8bits)
80005bfe:	91 0b       	st.w	r8[0x0],r11
80005c00:	72 1b       	ld.w	r11,r9[0x4]
  *data++ = mdesc.cols;		// width / count
80005c02:	b0 cb       	st.b	r8[0x4],r11
80005c04:	f3 38 00 08 	ld.ub	r8,r9[8]
  *data++ = mdesc.rows;		// height / resolution
  //  *data = 0; 		// unused
  event_post(&ev);
80005c08:	b4 88       	st.b	r10[0x0],r8
80005c0a:	fe b0 fb d1 	rcall	800053ac <event_post>
}
80005c0e:	d8 02       	popm	pc

80005c10 <setup_series>:
80005c10:	d4 01       	pushm	lr
80005c12:	30 1a       	mov	r10,1
80005c14:	32 08       	mov	r8,32
80005c16:	f1 6a 00 0b 	st.b	r8[11],r10
80005c1a:	91 0a       	st.w	r8[0x0],r10
//----  function pointer arrays

// read serial and spawn events
static const read_serial_t readSerialFuncs[eProtocolNumProtocols] = {
  &read_serial_40h,
  &read_serial_series,
80005c1c:	33 0a       	mov	r10,48

// setup series device
static void setup_series(u8 cols, u8 rows) {
  // print_dbg("\r\n setup series device");
  mdesc.protocol = eProtocolSeries;
  mdesc.device = eDeviceGrid;
80005c1e:	30 09       	mov	r9,0
  mdesc.cols = cols;
80005c20:	f1 6c 00 08 	st.b	r8[8],r12
  mdesc.rows = rows;
80005c24:	f1 6b 00 09 	st.b	r8[9],r11

// setup series device
static void setup_series(u8 cols, u8 rows) {
  // print_dbg("\r\n setup series device");
  mdesc.protocol = eProtocolSeries;
  mdesc.device = eDeviceGrid;
80005c28:	91 19       	st.w	r8[0x4],r9
  mdesc.cols = cols;
  mdesc.rows = rows;
  mdesc.vari = 0;
80005c2a:	f1 69 00 0c 	st.b	r8[12],r9
//----  function pointer arrays

// read serial and spawn events
static const read_serial_t readSerialFuncs[eProtocolNumProtocols] = {
  &read_serial_40h,
  &read_serial_series,
80005c2e:	fe cb 01 ba 	sub	r11,pc,442
80005c32:	fe c8 02 c6 	sub	r8,pc,710
// set function pointers
static inline void set_funcs(void) {
  // print_dbg("\r\n setting monome functions, protocol idx: ");
  // print_dbg_ulong(mdesc.protocol);
  monome_read_serial = readSerialFuncs[mdesc.protocol];
  monome_grid_map = gridMapFuncs[mdesc.protocol];
80005c36:	95 0b       	st.w	r10[0x0],r11
  monome_grid_level_map = gridMapFuncs[mdesc.protocol];
80005c38:	e0 6a 1b 10 	mov	r10,6928
  monome_ring_map = ringMapFuncs[mdesc.protocol];
80005c3c:	95 08       	st.w	r10[0x0],r8
80005c3e:	e0 6a 1c 1c 	mov	r10,7196
};

// set intensity
static const set_intense_t intenseFuncs[eProtocolNumProtocols] = {
  NULL, // unsupported
  &set_intense_series,
80005c42:	95 08       	st.w	r10[0x0],r8
80005c44:	e0 68 1b 14 	mov	r8,6932
  &ring_map_mext,
};

// grid vs arc refresh
static const refresh_t refreshFuncs[eProtocolNumProtocols] = {
  &monome_grid_refresh,
80005c48:	91 09       	st.w	r8[0x0],r9
80005c4a:	fe c9 03 b6 	sub	r9,pc,950
  mdesc.cols = cols;
  mdesc.rows = rows;
  mdesc.vari = 0;
  mdesc.tilt = 1;
  set_funcs();
  monome_connect_write_event();
80005c4e:	e0 68 1c 18 	mov	r8,7192
  //  monomeConnect = 1;
  //  test_draw();
}
80005c52:	91 09       	st.w	r8[0x0],r9
80005c54:	fe c9 05 64 	sub	r9,pc,1380
80005c58:	e0 68 1b 0c 	mov	r8,6924
80005c5c:	91 09       	st.w	r8[0x0],r9
80005c5e:	cc 5f       	rcall	80005be8 <monome_connect_write_event>
80005c60:	d8 02       	popm	pc
80005c62:	d7 03       	nop

80005c64 <check_monome_device_desc>:
80005c64:	d4 31       	pushm	r0-r7,lr
80005c66:	20 5d       	sub	sp,20
80005c68:	14 96       	mov	r6,r10
80005c6a:	1a 97       	mov	r7,sp
80005c6c:	fa c9 ff fa 	sub	r9,sp,-6
80005c70:	1a 98       	mov	r8,sp
80005c72:	19 8a       	ld.ub	r10,r12[0x0]
80005c74:	2f ec       	sub	r12,-2
80005c76:	10 ca       	st.b	r8++,r10
80005c78:	12 38       	cp.w	r8,r9
80005c7a:	cf c1       	brne	80005c72 <check_monome_device_desc+0xe>
80005c7c:	30 08       	mov	r8,0
80005c7e:	30 6a       	mov	r10,6
80005c80:	ba e8       	st.b	sp[0x6],r8
80005c82:	fe cb be 62 	sub	r11,pc,-16798
  // manufacturer
  for(i=0; i<MONOME_MANSTR_LEN; i++) {
    buf[i] = mstr[i*2];
  }
  buf[i] = 0;
  matchMan = ( strncmp(buf, "monome", MONOME_MANSTR_LEN) == 0 );
80005c86:	1a 9c       	mov	r12,sp
80005c88:	e0 a0 1b 74 	rcall	80009370 <strncmp>
  }
  //  print_dbg("\r\n finished monome class init");
}

// determine if FTDI string descriptors match monome device pattern
u8 check_monome_device_desc(char* mstr, char* pstr, char* sstr) { 
80005c8c:	ee c8 ff f7 	sub	r8,r7,-9
  /* print_dbg("\r\n manstring: "); */
  /* print_dbg(buf); */
 
  // serial number string
  for(i=0; i<MONOME_SERSTR_LEN; i++) {
    buf[i] = sstr[i*2];
80005c90:	18 94       	mov	r4,r12
80005c92:	0d 89       	ld.ub	r9,r6[0x0]
80005c94:	2f e6       	sub	r6,-2
  matchMan = ( strncmp(buf, "monome", MONOME_MANSTR_LEN) == 0 );
  /* print_dbg("\r\n manstring: "); */
  /* print_dbg(buf); */
 
  // serial number string
  for(i=0; i<MONOME_SERSTR_LEN; i++) {
80005c96:	0e c9       	st.b	r7++,r9
80005c98:	10 37       	cp.w	r7,r8
    buf[i] = sstr[i*2];
  }
  buf[i] = 0;
80005c9a:	cf c1       	brne	80005c92 <check_monome_device_desc+0x2e>
80005c9c:	30 05       	mov	r5,0
80005c9e:	fb 65 00 09 	st.b	sp[9],r5
  /* print_dbg("\r\n serial string: "); */
  /* print_dbg(buf); */
  if(matchMan == 0) {
80005ca2:	58 04       	cp.w	r4,0
    // didn't match the manufacturer string, but check the serial for DIYs
    if( strncmp(buf, "a40h", 4) == 0) {
80005ca4:	c1 40       	breq	80005ccc <check_monome_device_desc+0x68>
80005ca6:	30 4a       	mov	r10,4
80005ca8:	fe cb be 80 	sub	r11,pc,-16768
80005cac:	1a 9c       	mov	r12,sp
80005cae:	e0 a0 1b 61 	rcall	80009370 <strncmp>
80005cb2:	18 99       	mov	r9,r12
      // this is probably an arduinome      
      mdesc.protocol = eProtocol40h;
80005cb4:	e0 81 01 81 	brne	80005fb6 <check_monome_device_desc+0x352>
      mdesc.device = eDeviceGrid;
80005cb8:	32 08       	mov	r8,32
      mdesc.cols = 8;
80005cba:	91 09       	st.w	r8[0x0],r9
      mdesc.rows = 8;
80005cbc:	91 19       	st.w	r8[0x4],r9
80005cbe:	30 89       	mov	r9,8
    // didn't match the manufacturer string, but check the serial for DIYs
    if( strncmp(buf, "a40h", 4) == 0) {
      // this is probably an arduinome      
      mdesc.protocol = eProtocol40h;
      mdesc.device = eDeviceGrid;
      mdesc.cols = 8;
80005cc0:	f1 69 00 09 	st.b	r8[9],r9
    // if we got here, serial number didn't match series or 40h patterns.
    // so this is probably an extended-protocol device.
    // we need to query for device attributes
    return setup_mext();
  }
  return 0;
80005cc4:	f1 69 00 08 	st.b	r8[8],r9
    } else {
      // not a monome
      return 0;
    }
  } else { // matched manufctrr string
    if(buf[0] != 'm') {
80005cc8:	e0 8f 01 78 	bral	80005fb8 <check_monome_device_desc+0x354>
80005ccc:	36 d8       	mov	r8,109
80005cce:	1b 89       	ld.ub	r9,sp[0x0]
80005cd0:	f0 09 18 00 	cp.b	r9,r8
      // not a monome, somehow. shouldn't happen
      return 0;
    }
    if(buf[3] == 'h') {
80005cd4:	e0 81 01 71 	brne	80005fb6 <check_monome_device_desc+0x352>
80005cd8:	36 88       	mov	r8,104
80005cda:	1b b9       	ld.ub	r9,sp[0x3]
80005cdc:	f0 09 18 00 	cp.b	r9,r8
// setup

// setup 40h-protocol device
static void setup_40h(u8 cols, u8 rows) {
  // print_dbg("\r\n setup 40h device");
  mdesc.protocol = eProtocol40h;
80005ce0:	c2 01       	brne	80005d20 <check_monome_device_desc+0xbc>
  mdesc.device = eDeviceGrid;
  mdesc.cols = 8;
  mdesc.rows = 8;
80005ce2:	30 89       	mov	r9,8
80005ce4:	32 08       	mov	r8,32
// setup 40h-protocol device
static void setup_40h(u8 cols, u8 rows) {
  // print_dbg("\r\n setup 40h device");
  mdesc.protocol = eProtocol40h;
  mdesc.device = eDeviceGrid;
  mdesc.cols = 8;
80005ce6:	f1 69 00 09 	st.b	r8[9],r9

//----  function pointer arrays

// read serial and spawn events
static const read_serial_t readSerialFuncs[eProtocolNumProtocols] = {
  &read_serial_40h,
80005cea:	f1 69 00 08 	st.b	r8[8],r9
  // print_dbg("\r\n setup 40h device");
  mdesc.protocol = eProtocol40h;
  mdesc.device = eDeviceGrid;
  mdesc.cols = 8;
  mdesc.rows = 8;
  mdesc.vari = 0;
80005cee:	33 09       	mov	r9,48
// setup

// setup 40h-protocol device
static void setup_40h(u8 cols, u8 rows) {
  // print_dbg("\r\n setup 40h device");
  mdesc.protocol = eProtocol40h;
80005cf0:	f1 64 00 0c 	st.b	r8[12],r4

//----  function pointer arrays

// read serial and spawn events
static const read_serial_t readSerialFuncs[eProtocolNumProtocols] = {
  &read_serial_40h,
80005cf4:	91 04       	st.w	r8[0x0],r4
/*   &grid_led_mext, */
/* }; */

// grid/map
static const grid_map_t gridMapFuncs[eProtocolNumProtocols] = {
  &grid_map_40h,
80005cf6:	91 14       	st.w	r8[0x4],r4

//----  function pointer arrays

// read serial and spawn events
static const read_serial_t readSerialFuncs[eProtocolNumProtocols] = {
  &read_serial_40h,
80005cf8:	fe ca 02 34 	sub	r10,pc,564
// set function pointers
static inline void set_funcs(void) {
  // print_dbg("\r\n setting monome functions, protocol idx: ");
  // print_dbg_ulong(mdesc.protocol);
  monome_read_serial = readSerialFuncs[mdesc.protocol];
  monome_grid_map = gridMapFuncs[mdesc.protocol];
80005cfc:	fe c8 03 08 	sub	r8,pc,776
  monome_grid_level_map = gridMapFuncs[mdesc.protocol];
80005d00:	93 0a       	st.w	r9[0x0],r10
  monome_ring_map = ringMapFuncs[mdesc.protocol];
80005d02:	e0 69 1b 10 	mov	r9,6928
80005d06:	93 08       	st.w	r9[0x0],r8
  monome_set_intense = intenseFuncs[mdesc.protocol];
80005d08:	e0 69 1c 1c 	mov	r9,7196
80005d0c:	93 08       	st.w	r9[0x0],r8
    if(buf[3] == 'h') {
      // this is a 40h
      setup_40h(8, 8);
      return 1;
    }
    if( strncmp(buf, "m64-", 4) == 0 ) {
80005d0e:	e0 68 1b 14 	mov	r8,6932
80005d12:	fe c9 06 22 	sub	r9,pc,1570
80005d16:	91 04       	st.w	r8[0x0],r4
80005d18:	e0 68 1c 18 	mov	r8,7192
      // series 64
      setup_series(8, 8);
80005d1c:	91 04       	st.w	r8[0x0],r4
80005d1e:	c4 69       	rjmp	80005faa <check_monome_device_desc+0x346>
      return 1;
    }
    if( strncmp(buf, "m128-", 5) == 0 ) {
80005d20:	1a 97       	mov	r7,sp
80005d22:	30 4a       	mov	r10,4
80005d24:	fe cb be f4 	sub	r11,pc,-16652
80005d28:	1a 9c       	mov	r12,sp
80005d2a:	e0 a0 1b 23 	rcall	80009370 <strncmp>
      // series 128
      setup_series(16, 8);
80005d2e:	c0 31       	brne	80005d34 <check_monome_device_desc+0xd0>
80005d30:	30 8b       	mov	r11,8
      return 1;
    }
    if( strncmp(buf, "m256-", 5) == 0 ) {
80005d32:	c1 38       	rjmp	80005d58 <check_monome_device_desc+0xf4>
80005d34:	30 5a       	mov	r10,5
80005d36:	fe cb be fe 	sub	r11,pc,-16642
80005d3a:	1a 9c       	mov	r12,sp
80005d3c:	e0 a0 1b 1a 	rcall	80009370 <strncmp>
      // series 256
      setup_series(16, 16);
80005d40:	c0 41       	brne	80005d48 <check_monome_device_desc+0xe4>
80005d42:	30 8b       	mov	r11,8
80005d44:	31 0c       	mov	r12,16
80005d46:	c0 a8       	rjmp	80005d5a <check_monome_device_desc+0xf6>
  u8* prx;
  u8 w = 0;
  u8 busy;

  // print_dbg("\r\n setup mext device");
  mdesc.protocol = eProtocolMext;
80005d48:	1a 9c       	mov	r12,sp
80005d4a:	30 5a       	mov	r10,5
80005d4c:	fe cb bf 0c 	sub	r11,pc,-16628

  mdesc.vari = 1;
80005d50:	e0 a0 1b 10 	rcall	80009370 <strncmp>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80005d54:	c0 51       	brne	80005d5e <check_monome_device_desc+0xfa>
80005d56:	31 0b       	mov	r11,16
80005d58:	16 9c       	mov	r12,r11
80005d5a:	c5 bf       	rcall	80005c10 <setup_series>
80005d5c:	c2 b9       	rjmp	80005fb2 <check_monome_device_desc+0x34e>

  rxBytes = 0;
80005d5e:	30 29       	mov	r9,2
80005d60:	32 08       	mov	r8,32
80005d62:	91 09       	st.w	r8[0x0],r9

  if(rxBytes != 6 ){
    print_dbg("\r\n got unexpected byte count in response to mext setup request;\r\n");
    print_dbg_ulong(*prx);
    
    for(;rxBytes != 0; rxBytes--) {
80005d64:	30 19       	mov	r9,1
80005d66:	f1 69 00 0c 	st.b	r8[12],r9
}

// setup extended device, return success /failure of query
static u8 setup_mext(void) {
  u8* prx;
  u8 w = 0;
80005d6a:	08 99       	mov	r9,r4
80005d6c:	e0 68 87 00 	mov	r8,34560
80005d70:	ea 18 03 93 	orh	r8,0x393
80005d74:	e0 67 07 cc 	mov	r7,1996
80005d78:	08 96       	mov	r6,r4

  mdesc.vari = 1;

  rxBytes = 0;

  while(rxBytes != 6) {
80005d7a:	ae 85       	st.b	r7[0x0],r5
80005d7c:	0a 93       	mov	r3,r5
80005d7e:	e0 6a 03 e7 	mov	r10,999
80005d82:	fa c5 ff ec 	sub	r5,sp,-20
80005d86:	30 0b       	mov	r11,0
80005d88:	0a f4       	st.b	--r5,r4
80005d8a:	f0 0a 00 0a 	add	r10,r8,r10
80005d8e:	f2 0b 00 4b 	adc	r11,r9,r11
80005d92:	30 64       	mov	r4,6
80005d94:	e0 68 03 e8 	mov	r8,1000
80005d98:	30 09       	mov	r9,0
80005d9a:	e0 a0 16 75 	rcall	80008a84 <__avr32_udiv64>
80005d9e:	14 92       	mov	r2,r10
80005da0:	c4 f8       	rjmp	80005e3e <check_monome_device_desc+0x1da>
80005da2:	d7 03       	nop
80005da4:	e1 b8 00 42 	mfsr	r8,0x108
80005da8:	f0 02 00 0a 	add	r10,r8,r2
80005dac:	e1 b9 00 42 	mfsr	r9,0x108
80005db0:	14 38       	cp.w	r8,r10
80005db2:	e0 88 00 05 	brls	80005dbc <check_monome_device_desc+0x158>
80005db6:	10 39       	cp.w	r9,r8
80005db8:	cf a2       	brcc	80005dac <check_monome_device_desc+0x148>
80005dba:	c0 48       	rjmp	80005dc2 <check_monome_device_desc+0x15e>
80005dbc:	10 39       	cp.w	r9,r8
80005dbe:	e0 83 00 ff 	brlo	80005fbc <check_monome_device_desc+0x358>
80005dc2:	14 39       	cp.w	r9,r10
80005dc4:	e0 8b 00 fc 	brhi	80005fbc <check_monome_device_desc+0x358>
80005dc8:	cf 2b       	rjmp	80005dac <check_monome_device_desc+0x148>
80005dca:	e1 b9 00 42 	mfsr	r9,0x108
80005dce:	14 38       	cp.w	r8,r10
80005dd0:	e0 88 00 05 	brls	80005dda <check_monome_device_desc+0x176>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005dd4:	10 39       	cp.w	r9,r8
80005dd6:	cf a2       	brcc	80005dca <check_monome_device_desc+0x166>
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005dd8:	c0 48       	rjmp	80005de0 <check_monome_device_desc+0x17c>
80005dda:	10 39       	cp.w	r9,r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005ddc:	e0 83 00 f8 	brlo	80005fcc <check_monome_device_desc+0x368>
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005de0:	14 39       	cp.w	r9,r10
80005de2:	e0 8b 00 f5 	brhi	80005fcc <check_monome_device_desc+0x368>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005de6:	cf 2b       	rjmp	80005dca <check_monome_device_desc+0x166>
80005de8:	e1 b9 00 42 	mfsr	r9,0x108
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005dec:	14 38       	cp.w	r8,r10
80005dee:	e0 88 00 05 	brls	80005df8 <check_monome_device_desc+0x194>
80005df2:	10 39       	cp.w	r9,r8
80005df4:	cf a2       	brcc	80005de8 <check_monome_device_desc+0x184>
80005df6:	c0 38       	rjmp	80005dfc <check_monome_device_desc+0x198>
80005df8:	10 39       	cp.w	r9,r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005dfa:	c0 43       	brcs	80005e02 <check_monome_device_desc+0x19e>
80005dfc:	14 39       	cp.w	r9,r10
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005dfe:	fe 98 ff f5 	brls	80005de8 <check_monome_device_desc+0x184>
80005e02:	cd 5d       	rcall	800061ac <ftdi_rx_busy>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005e04:	cf f1       	brne	80005e02 <check_monome_device_desc+0x19e>
80005e06:	cc fd       	rcall	800061a4 <ftdi_rx_bytes>
80005e08:	ae 8c       	st.b	r7[0x0],r12
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005e0a:	e8 0c 18 00 	cp.b	r12,r4
80005e0e:	c1 80       	breq	80005e3e <check_monome_device_desc+0x1da>
80005e10:	fe cc bf c8 	sub	r12,pc,-16440
80005e14:	e0 a0 12 8a 	rcall	80008328 <print_dbg>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005e18:	0d 8c       	ld.ub	r12,r6[0x0]
80005e1a:	e0 a0 12 81 	rcall	8000831c <print_dbg_ulong>
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005e1e:	c0 c8       	rjmp	80005e36 <check_monome_device_desc+0x1d2>
80005e20:	2f f6       	sub	r6,-1
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005e22:	0d 8c       	ld.ub	r12,r6[0x0]
80005e24:	e0 a0 12 7c 	rcall	8000831c <print_dbg_ulong>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005e28:	fe cc c0 b0 	sub	r12,pc,-16208
80005e2c:	e0 a0 12 7e 	rcall	80008328 <print_dbg>
80005e30:	0f 88       	ld.ub	r8,r7[0x0]

  // print_dbg("\r\n setup request ftdi read; waiting...");

  //  while(ftdi_rx_busy()) {;;}
  while(busy) {
    busy = ftdi_rx_busy();
80005e32:	20 18       	sub	r8,1
80005e34:	ae 88       	st.b	r7[0x0],r8
  busy = 1;

  // print_dbg("\r\n setup request ftdi read; waiting...");

  //  while(ftdi_rx_busy()) {;;}
  while(busy) {
80005e36:	0f 88       	ld.ub	r8,r7[0x0]
    busy = ftdi_rx_busy();
    // print_dbg("\r\n waiting for transfer complete; busy flag: ");
    // print_dbg_ulong(busy);
    
  }
  rxBytes = ftdi_rx_bytes();
80005e38:	e6 08 18 00 	cp.b	r8,r3
80005e3c:	cf 21       	brne	80005e20 <check_monome_device_desc+0x1bc>

  // print_dbg(" done waiting. bytes read: ");
  // print_dbg_ulong(rxBytes);

  if(rxBytes != 6 ){
80005e3e:	0f 88       	ld.ub	r8,r7[0x0]
80005e40:	e8 08 18 00 	cp.b	r8,r4
    print_dbg("\r\n got unexpected byte count in response to mext setup request;\r\n");
80005e44:	cb 01       	brne	80005da4 <check_monome_device_desc+0x140>
80005e46:	ca bd       	rcall	8000619c <ftdi_rx_buf>
80005e48:	30 1a       	mov	r10,1
    print_dbg_ulong(*prx);
80005e4a:	f8 c7 ff ff 	sub	r7,r12,-1
80005e4e:	0f 8c       	ld.ub	r12,r7[0x0]
80005e50:	f4 0c 18 00 	cp.b	r12,r10
    
    for(;rxBytes != 0; rxBytes--) {
      print_dbg_ulong(*(++prx));
80005e54:	c2 41       	brne	80005e9c <check_monome_device_desc+0x238>
80005e56:	32 08       	mov	r8,32
80005e58:	30 0c       	mov	r12,0
      print_dbg(" ");
80005e5a:	91 1c       	st.w	r8[0x4],r12
80005e5c:	0f 99       	ld.ub	r9,r7[0x1]
80005e5e:	f4 09 18 00 	cp.b	r9,r10

  if(rxBytes != 6 ){
    print_dbg("\r\n got unexpected byte count in response to mext setup request;\r\n");
    print_dbg_ulong(*prx);
    
    for(;rxBytes != 0; rxBytes--) {
80005e62:	c0 31       	brne	80005e68 <check_monome_device_desc+0x204>
80005e64:	30 89       	mov	r9,8
80005e66:	c1 28       	rjmp	80005e8a <check_monome_device_desc+0x226>
80005e68:	30 2a       	mov	r10,2
80005e6a:	f4 09 18 00 	cp.b	r9,r10

  mdesc.vari = 1;

  rxBytes = 0;

  while(rxBytes != 6) {
80005e6e:	c0 81       	brne	80005e7e <check_monome_device_desc+0x21a>
80005e70:	30 89       	mov	r9,8
80005e72:	f1 69 00 09 	st.b	r8[9],r9

    // return 0;
    }
  }
  
  prx = ftdi_rx_buf();
80005e76:	31 09       	mov	r9,16
80005e78:	f1 69 00 08 	st.b	r8[8],r9
  prx++; // 1st returned byte is 0
80005e7c:	c0 b8       	rjmp	80005e92 <check_monome_device_desc+0x22e>
80005e7e:	30 4a       	mov	r10,4
  if(*prx == 1) {
80005e80:	f4 09 18 00 	cp.b	r9,r10
80005e84:	e0 81 00 9a 	brne	80005fb8 <check_monome_device_desc+0x354>
    mdesc.device = eDeviceGrid;
80005e88:	31 09       	mov	r9,16
80005e8a:	f1 69 00 08 	st.b	r8[8],r9
    prx++;
    if(*prx == 1) {
80005e8e:	f1 69 00 09 	st.b	r8[9],r9
80005e92:	30 19       	mov	r9,1
80005e94:	32 08       	mov	r8,32
      // print_dbg("\r\n monome 64");
      mdesc.rows = 8;
80005e96:	f1 69 00 0b 	st.b	r8[11],r9
      mdesc.cols = 8;
    }
    else if(*prx == 2) {
80005e9a:	c1 d8       	rjmp	80005ed4 <check_monome_device_desc+0x270>
80005e9c:	2f f7       	sub	r7,-1
80005e9e:	30 58       	mov	r8,5
80005ea0:	f0 0c 18 00 	cp.b	r12,r8
      // print_dbg("\r\n monome 128");
      mdesc.rows = 8;
80005ea4:	c0 f1       	brne	80005ec2 <check_monome_device_desc+0x25e>
80005ea6:	30 19       	mov	r9,1
      mdesc.cols = 16;
80005ea8:	32 08       	mov	r8,32
80005eaa:	91 19       	st.w	r8[0x4],r9
80005eac:	0f 89       	ld.ub	r9,r7[0x0]
80005eae:	fe cc c0 22 	sub	r12,pc,-16350
    }
    else if(*prx == 4) {
80005eb2:	f1 69 00 0a 	st.b	r8[10],r9
80005eb6:	e0 a0 12 39 	rcall	80008328 <print_dbg>
      // print_dbg("\r\n monome 256");
      mdesc.rows = 16; 
80005eba:	0f 8c       	ld.ub	r12,r7[0x0]
      mdesc.cols = 16;
80005ebc:	e0 a0 12 30 	rcall	8000831c <print_dbg_ulong>
      mdesc.rows = 8;
      mdesc.cols = 16;
    }
    else if(*prx == 4) {
      // print_dbg("\r\n monome 256");
      mdesc.rows = 16; 
80005ec0:	c0 a8       	rjmp	80005ed4 <check_monome_device_desc+0x270>
80005ec2:	e0 a0 12 0f 	rcall	800082e0 <print_dbg_hex>
      mdesc.cols = 16;
    }
    else {
      return 0; // bail
    }		
    mdesc.tilt = 1;
80005ec6:	0f 8c       	ld.ub	r12,r7[0x0]
80005ec8:	e0 a0 12 0c 	rcall	800082e0 <print_dbg_hex>
80005ecc:	0f 9c       	ld.ub	r12,r7[0x1]
80005ece:	e0 a0 12 09 	rcall	800082e0 <print_dbg_hex>
  }
  else if(*prx == 5) {
80005ed2:	c7 28       	rjmp	80005fb6 <check_monome_device_desc+0x352>
80005ed4:	30 18       	mov	r8,1
80005ed6:	fb 68 00 13 	st.b	sp[19],r8
    mdesc.device = eDeviceArc;
80005eda:	e1 b8 00 42 	mfsr	r8,0x108
    mdesc.encs = *(++prx);
80005ede:	f0 02 00 0a 	add	r10,r8,r2
80005ee2:	e1 b9 00 42 	mfsr	r9,0x108
    print_dbg("\r\n monome arc ");
80005ee6:	14 38       	cp.w	r8,r10
80005ee8:	e0 88 00 05 	brls	80005ef2 <check_monome_device_desc+0x28e>
    print_dbg_ulong(*prx);
80005eec:	10 39       	cp.w	r9,r8
80005eee:	cf a2       	brcc	80005ee2 <check_monome_device_desc+0x27e>
80005ef0:	c0 38       	rjmp	80005ef6 <check_monome_device_desc+0x292>
  } else {
    print_dbg_hex(*prx);
80005ef2:	10 39       	cp.w	r9,r8
80005ef4:	c7 23       	brcs	80005fd8 <check_monome_device_desc+0x374>
    print_dbg_hex(*(++prx));
80005ef6:	14 39       	cp.w	r9,r10
80005ef8:	e0 8b 00 70 	brhi	80005fd8 <check_monome_device_desc+0x374>
    print_dbg_hex(*(++prx));
80005efc:	cf 3b       	rjmp	80005ee2 <check_monome_device_desc+0x27e>
80005efe:	e1 b9 00 42 	mfsr	r9,0x108
80005f02:	14 38       	cp.w	r8,r10
    return 0; // bail
  }

  // get id
  w = 1;
80005f04:	e0 88 00 05 	brls	80005f0e <check_monome_device_desc+0x2aa>
80005f08:	10 39       	cp.w	r9,r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005f0a:	cf a2       	brcc	80005efe <check_monome_device_desc+0x29a>
80005f0c:	c0 38       	rjmp	80005f12 <check_monome_device_desc+0x2ae>
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005f0e:	10 39       	cp.w	r9,r8
80005f10:	c6 d3       	brcs	80005fea <check_monome_device_desc+0x386>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005f12:	14 39       	cp.w	r9,r10
80005f14:	e0 8b 00 6b 	brhi	80005fea <check_monome_device_desc+0x386>
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005f18:	cf 3b       	rjmp	80005efe <check_monome_device_desc+0x29a>
80005f1a:	e1 b9 00 42 	mfsr	r9,0x108
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005f1e:	04 38       	cp.w	r8,r2
80005f20:	e0 88 00 06 	brls	80005f2c <check_monome_device_desc+0x2c8>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005f24:	10 39       	cp.w	r9,r8
80005f26:	cf a2       	brcc	80005f1a <check_monome_device_desc+0x2b6>
80005f28:	c0 48       	rjmp	80005f30 <check_monome_device_desc+0x2cc>
80005f2a:	d7 03       	nop
80005f2c:	10 39       	cp.w	r9,r8
80005f2e:	c0 43       	brcs	80005f36 <check_monome_device_desc+0x2d2>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005f30:	04 39       	cp.w	r9,r2
80005f32:	fe 98 ff f4 	brls	80005f1a <check_monome_device_desc+0x2b6>
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005f36:	c3 bd       	rcall	800061ac <ftdi_rx_busy>
80005f38:	18 97       	mov	r7,r12
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005f3a:	cf e1       	brne	80005f36 <check_monome_device_desc+0x2d2>
80005f3c:	c3 4d       	rcall	800061a4 <ftdi_rx_bytes>
80005f3e:	e0 68 07 cc 	mov	r8,1996
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005f42:	b0 8c       	st.b	r8[0x0],r12
80005f44:	c2 cd       	rcall	8000619c <ftdi_rx_buf>
80005f46:	36 b8       	mov	r8,107
80005f48:	19 a9       	ld.ub	r9,r12[0x2]
80005f4a:	f0 09 18 00 	cp.b	r9,r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005f4e:	c0 41       	brne	80005f56 <check_monome_device_desc+0x2f2>
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005f50:	32 08       	mov	r8,32
80005f52:	f1 67 00 0c 	st.b	r8[12],r7
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005f56:	fe c9 c1 66 	sub	r9,pc,-16026
80005f5a:	32 08       	mov	r8,32
80005f5c:	70 1a       	ld.w	r10,r8[0x4]
80005f5e:	70 08       	ld.w	r8,r8[0x0]
80005f60:	f2 08 03 2b 	ld.w	r11,r9[r8<<0x2]
80005f64:	33 09       	mov	r9,48
80005f66:	93 0b       	st.w	r9[0x0],r11
80005f68:	e0 6b 1b 10 	mov	r11,6928
80005f6c:	fe c9 c0 c4 	sub	r9,pc,-16188
80005f70:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
80005f74:	97 09       	st.w	r11[0x0],r9
80005f76:	e0 6b 1c 1c 	mov	r11,7196
80005f7a:	97 09       	st.w	r11[0x0],r9
80005f7c:	fe c9 c1 74 	sub	r9,pc,-16012
80005f80:	f2 08 03 2b 	ld.w	r11,r9[r8<<0x2]
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005f84:	e0 69 1b 14 	mov	r9,6932
80005f88:	93 0b       	st.w	r9[0x0],r11
80005f8a:	fe c9 c0 ee 	sub	r9,pc,-16146
  delay_ms(1);
  ftdi_read();
  delay_ms(1);
  busy = 1;
  while(busy) {
    busy = ftdi_rx_busy();
80005f8e:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
80005f92:	e0 68 1c 18 	mov	r8,7192
  }
  rxBytes = ftdi_rx_bytes();
80005f96:	58 1a       	cp.w	r10,1
80005f98:	f9 ba 01 00 	movne	r10,0
80005f9c:	f9 ba 00 04 	moveq	r10,4
  prx = ftdi_rx_buf();
80005fa0:	91 09       	st.w	r8[0x0],r9
  if(*(prx+2) == 'k')
80005fa2:	fe c8 c1 a6 	sub	r8,pc,-15962
80005fa6:	f0 0a 03 09 	ld.w	r9,r8[r10]
80005faa:	e0 68 1b 0c 	mov	r8,6924
      mdesc.vari = 0;
80005fae:	91 09       	st.w	r8[0x0],r9
80005fb0:	c1 ce       	rcall	80005be8 <monome_connect_write_event>

// set function pointers
static inline void set_funcs(void) {
  // print_dbg("\r\n setting monome functions, protocol idx: ");
  // print_dbg_ulong(mdesc.protocol);
  monome_read_serial = readSerialFuncs[mdesc.protocol];
80005fb2:	30 1c       	mov	r12,1
80005fb4:	c0 28       	rjmp	80005fb8 <check_monome_device_desc+0x354>
  monome_grid_map = gridMapFuncs[mdesc.protocol];
  monome_grid_level_map = gridMapFuncs[mdesc.protocol];
  monome_ring_map = ringMapFuncs[mdesc.protocol];
  monome_set_intense = intenseFuncs[mdesc.protocol];
  monome_refresh = refreshFuncs[mdesc.device == eDeviceArc];   // toggle on grid vs arc
80005fb6:	30 0c       	mov	r12,0

// set function pointers
static inline void set_funcs(void) {
  // print_dbg("\r\n setting monome functions, protocol idx: ");
  // print_dbg_ulong(mdesc.protocol);
  monome_read_serial = readSerialFuncs[mdesc.protocol];
80005fb8:	2f bd       	sub	sp,-20
80005fba:	d8 32       	popm	r0-r7,pc
80005fbc:	30 1b       	mov	r11,1
80005fbe:	0a 9c       	mov	r12,r5
80005fc0:	c3 6d       	rcall	8000622c <ftdi_write>
  monome_grid_map = gridMapFuncs[mdesc.protocol];
80005fc2:	e1 b8 00 42 	mfsr	r8,0x108
80005fc6:	f0 02 00 0a 	add	r10,r8,r2
80005fca:	c0 0b       	rjmp	80005dca <check_monome_device_desc+0x166>
  monome_grid_level_map = gridMapFuncs[mdesc.protocol];
80005fcc:	c1 ad       	rcall	80006200 <ftdi_read>
80005fce:	e1 b8 00 42 	mfsr	r8,0x108
  monome_ring_map = ringMapFuncs[mdesc.protocol];
80005fd2:	f0 02 00 0a 	add	r10,r8,r2
80005fd6:	c0 9b       	rjmp	80005de8 <check_monome_device_desc+0x184>
80005fd8:	30 1b       	mov	r11,1
  monome_set_intense = intenseFuncs[mdesc.protocol];
80005fda:	fa cc ff ed 	sub	r12,sp,-19
80005fde:	c2 7d       	rcall	8000622c <ftdi_write>
80005fe0:	e1 b8 00 42 	mfsr	r8,0x108
  monome_refresh = refreshFuncs[mdesc.device == eDeviceArc];   // toggle on grid vs arc
80005fe4:	f0 02 00 0a 	add	r10,r8,r2
80005fe8:	c8 bb       	rjmp	80005efe <check_monome_device_desc+0x29a>
80005fea:	c0 bd       	rcall	80006200 <ftdi_read>
  // print_dbg_ulong(mdesc.protocol);
  monome_read_serial = readSerialFuncs[mdesc.protocol];
  monome_grid_map = gridMapFuncs[mdesc.protocol];
  monome_grid_level_map = gridMapFuncs[mdesc.protocol];
  monome_ring_map = ringMapFuncs[mdesc.protocol];
  monome_set_intense = intenseFuncs[mdesc.protocol];
80005fec:	e1 b8 00 42 	mfsr	r8,0x108
  monome_refresh = refreshFuncs[mdesc.device == eDeviceArc];   // toggle on grid vs arc
80005ff0:	f0 02 00 02 	add	r2,r8,r2
80005ff4:	c9 3b       	rjmp	80005f1a <check_monome_device_desc+0x2b6>
80005ff6:	d7 03       	nop

80005ff8 <process_timers>:
   tail = NULL;
   num = 0;
}

// process the timer list, presumably from TC interrupt
void process_timers( void ) {
80005ff8:	d4 21       	pushm	r4-r7,lr
  u32 i;
  volatile softTimer_t* t = head;
80005ffa:	e0 68 07 d0 	mov	r8,2000

  //  print_dbg("\r\n processing timers. head: 0x");
  //  print_dbg_hex((u32)head);

  // ... important...  
  if ( (head == NULL) || (tail == NULL) || (num == 0) ) { 
80005ffe:	70 07       	ld.w	r7,r8[0x0]
80006000:	58 07       	cp.w	r7,0
80006002:	c1 d0       	breq	8000603c <process_timers+0x44>
80006004:	e0 68 07 d8 	mov	r8,2008
80006008:	70 08       	ld.w	r8,r8[0x0]
8000600a:	58 08       	cp.w	r8,0
8000600c:	c1 80       	breq	8000603c <process_timers+0x44>
8000600e:	e0 65 07 d4 	mov	r5,2004
80006012:	6a 08       	ld.w	r8,r5[0x0]
80006014:	58 08       	cp.w	r8,0
    //    print_dbg("\r\n processing empty timer list");
    return; 
  }

  for(i = 0; i<num; ++i) {
    --(t->ticksRemain);
80006016:	c1 30       	breq	8000603c <process_timers+0x44>
80006018:	30 06       	mov	r6,0
8000601a:	c0 e8       	rjmp	80006036 <process_timers+0x3e>
  if ( (head == NULL) || (tail == NULL) || (num == 0) ) { 
    //    print_dbg("\r\n processing empty timer list");
    return; 
  }

  for(i = 0; i<num; ++i) {
8000601c:	6e 08       	ld.w	r8,r7[0x0]
    --(t->ticksRemain);
    if(t->ticksRemain == 0) {
8000601e:	20 18       	sub	r8,1
80006020:	8f 08       	st.w	r7[0x0],r8
80006022:	2f f6       	sub	r6,-1
      (*(t->callback))(t->caller);   
80006024:	6e 08       	ld.w	r8,r7[0x0]
80006026:	58 08       	cp.w	r8,0
80006028:	c0 61       	brne	80006034 <process_timers+0x3c>
      t->ticksRemain = t->ticks;
8000602a:	6e 28       	ld.w	r8,r7[0x8]
8000602c:	6e 5c       	ld.w	r12,r7[0x14]
      //      print_dbg("\r\n triggered timer callback @ 0x");
      //      print_dbg_hex((u32)t);
    }
    t = t->next;
8000602e:	5d 18       	icall	r8
  if ( (head == NULL) || (tail == NULL) || (num == 0) ) { 
    //    print_dbg("\r\n processing empty timer list");
    return; 
  }

  for(i = 0; i<num; ++i) {
80006030:	6e 18       	ld.w	r8,r7[0x4]
80006032:	8f 08       	st.w	r7[0x0],r8
80006034:	6e 37       	ld.w	r7,r7[0xc]
80006036:	6a 08       	ld.w	r8,r5[0x0]
80006038:	10 36       	cp.w	r6,r8
8000603a:	cf 13       	brcs	8000601c <process_timers+0x24>
8000603c:	d8 22       	popm	r4-r7,pc
8000603e:	d7 03       	nop

80006040 <timer_set>:
80006040:	99 1b       	st.w	r12[0x4],r11
80006042:	78 08       	ld.w	r8,r12[0x0]
}


void timer_set(softTimer_t* timer, u32 ticks) {
  timer->ticks = ticks;
  if(timer->ticksRemain > ticks) timer->ticksRemain = ticks;
80006044:	16 38       	cp.w	r8,r11
80006046:	5e 8c       	retls	r12
80006048:	99 0b       	st.w	r12[0x0],r11
8000604a:	5e fc       	retal	r12

8000604c <timer_remove>:
  int i;
  volatile softTimer_t* pt = NULL;
  u8 found = 0;

  // disable timer interrupts
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);
8000604c:	d3 43       	ssrf	0x14


  // not linked
  if( (t->next == NULL) || (t->prev == NULL)) { return 0; }
8000604e:	78 38       	ld.w	r8,r12[0xc]
80006050:	58 08       	cp.w	r8,0
80006052:	c3 20       	breq	800060b6 <timer_remove+0x6a>
80006054:	78 48       	ld.w	r8,r12[0x10]
80006056:	58 08       	cp.w	r8,0
80006058:	c2 f0       	breq	800060b6 <timer_remove+0x6a>

  // check head
  if(t == head) { 
8000605a:	e0 69 07 d0 	mov	r9,2000
8000605e:	72 08       	ld.w	r8,r9[0x0]
80006060:	10 3c       	cp.w	r12,r8
    found = 1;
    head = t->next;
80006062:	c0 31       	brne	80006068 <timer_remove+0x1c>
80006064:	78 38       	ld.w	r8,r12[0xc]
  }
  // check tail
  else if(t == tail) { 
80006066:	c0 b8       	rjmp	8000607c <timer_remove+0x30>
80006068:	e0 69 07 d8 	mov	r9,2008
8000606c:	72 0a       	ld.w	r10,r9[0x0]
8000606e:	14 3c       	cp.w	r12,r10
    found = 1;
    tail = t->prev; 
  } else {
    // search 
    pt = head;
    for(i=0; i<num; ++i) {
80006070:	c0 50       	breq	8000607a <timer_remove+0x2e>
80006072:	30 09       	mov	r9,0
    head = t->next;
  }
  // check tail
  else if(t == tail) { 
    found = 1;
    tail = t->prev; 
80006074:	e0 6a 07 d4 	mov	r10,2004
80006078:	c0 88       	rjmp	80006088 <timer_remove+0x3c>
  } else {
    // search 
    pt = head;
    for(i=0; i<num; ++i) {
      if(pt == t) {
8000607a:	78 48       	ld.w	r8,r12[0x10]
8000607c:	93 08       	st.w	r9[0x0],r8
	// found it
	found = 1;
	break;
      }
      pt = pt->next;
8000607e:	c0 a8       	rjmp	80006092 <timer_remove+0x46>
    found = 1;
    tail = t->prev; 
  } else {
    // search 
    pt = head;
    for(i=0; i<num; ++i) {
80006080:	18 38       	cp.w	r8,r12
80006082:	c0 80       	breq	80006092 <timer_remove+0x46>
80006084:	70 38       	ld.w	r8,r8[0xc]
80006086:	2f f9       	sub	r9,-1
80006088:	74 0b       	ld.w	r11,r10[0x0]
8000608a:	16 39       	cp.w	r9,r11
      pt = pt->next;
    }
  }
  if(found) {
    // unlink and decrement
    (t->next)->prev = t->prev;
8000608c:	cf a3       	brcs	80006080 <timer_remove+0x34>
8000608e:	30 0c       	mov	r12,0
80006090:	c1 18       	rjmp	800060b2 <timer_remove+0x66>
    (t->prev)->next = t->next;
80006092:	78 38       	ld.w	r8,r12[0xc]
80006094:	78 49       	ld.w	r9,r12[0x10]
80006096:	91 49       	st.w	r8[0x10],r9
    t->next = t->prev = 0;
80006098:	78 48       	ld.w	r8,r12[0x10]
8000609a:	78 39       	ld.w	r9,r12[0xc]
8000609c:	91 39       	st.w	r8[0xc],r9
8000609e:	30 08       	mov	r8,0
    --num;
800060a0:	99 48       	st.w	r12[0x10],r8
800060a2:	78 48       	ld.w	r8,r12[0x10]
800060a4:	99 38       	st.w	r12[0xc],r8
800060a6:	e0 68 07 d4 	mov	r8,2004
  }

  // enable timer interrupts
  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
800060aa:	30 1c       	mov	r12,1
  return found;
800060ac:	70 09       	ld.w	r9,r8[0x0]
800060ae:	20 19       	sub	r9,1
800060b0:	91 09       	st.w	r8[0x0],r9
800060b2:	d5 43       	csrf	0x14
800060b4:	5e fc       	retal	r12
800060b6:	5e fd       	retal	0

800060b8 <timer_add>:
800060b8:	d4 21       	pushm	r4-r7,lr
800060ba:	d3 43       	ssrf	0x14
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);

  // print_dbg("\r\n timer_add, @ 0x");
  // print_dbg_hex((u32)t);

  if(t->prev == NULL || t->next == NULL) {
800060bc:	78 48       	ld.w	r8,r12[0x10]
800060be:	58 08       	cp.w	r8,0
800060c0:	c0 60       	breq	800060cc <timer_add+0x14>
800060c2:	78 38       	ld.w	r8,r12[0xc]
800060c4:	58 08       	cp.w	r8,0
800060c6:	c0 30       	breq	800060cc <timer_add+0x14>
800060c8:	30 0c       	mov	r12,0
800060ca:	c2 a8       	rjmp	8000611e <timer_add+0x66>
    // print_dbg(" ; timer is unlinked ");
    // is list empty?
    if( (head == NULL) || (tail == NULL)) {
800060cc:	e0 68 07 d0 	mov	r8,2000
800060d0:	70 08       	ld.w	r8,r8[0x0]
800060d2:	58 08       	cp.w	r8,0
800060d4:	c0 60       	breq	800060e0 <timer_add+0x28>
800060d6:	e0 67 07 d8 	mov	r7,2008
800060da:	6e 0e       	ld.w	lr,r7[0x0]
      // print_dbg(" ; list was empty ");
      head = tail = t;
800060dc:	58 0e       	cp.w	lr,0
800060de:	c0 e1       	brne	800060fa <timer_add+0x42>
800060e0:	e0 68 07 d8 	mov	r8,2008
      t->next = t->prev = t;
800060e4:	91 0c       	st.w	r8[0x0],r12
800060e6:	e0 68 07 d0 	mov	r8,2000
800060ea:	91 0c       	st.w	r8[0x0],r12
      num = 1;
800060ec:	99 4c       	st.w	r12[0x10],r12
800060ee:	78 48       	ld.w	r8,r12[0x10]
      // print_dbg(" ; added timer as sole element ");

    } else {
      // list not empty, add to tail
      tail->next = t;
800060f0:	30 1e       	mov	lr,1
      head->prev = t;
800060f2:	99 38       	st.w	r12[0xc],r8
      t->prev = tail;
800060f4:	e0 68 07 d4 	mov	r8,2004
      t->next = head;
      tail = t;
800060f8:	c0 a8       	rjmp	8000610c <timer_add+0x54>
      ++num; 
800060fa:	9d 3c       	st.w	lr[0xc],r12
800060fc:	91 4c       	st.w	r8[0x10],r12
800060fe:	99 4e       	st.w	r12[0x10],lr
80006100:	99 38       	st.w	r12[0xc],r8

    } 
    t->callback = callback; 
80006102:	8f 0c       	st.w	r7[0x0],r12
    t->caller = obj;
80006104:	e0 68 07 d4 	mov	r8,2004
    if(ticks < 1) { ticks = 1; }
80006108:	70 0e       	ld.w	lr,r8[0x0]
8000610a:	2f fe       	sub	lr,-1
    t->ticksRemain = ticks;
8000610c:	91 0e       	st.w	r8[0x0],lr
    t->ticks = ticks;
8000610e:	99 2a       	st.w	r12[0x8],r10
80006110:	99 59       	st.w	r12[0x14],r9
    // print_dbg(" ; timer was already linked, aborting ");
    ret = 0;
  }

  // enable timer interrupts
  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
80006112:	58 0b       	cp.w	r11,0
  return ret;
}
80006114:	f9 bb 00 01 	moveq	r11,1
80006118:	99 0b       	st.w	r12[0x0],r11
8000611a:	99 1b       	st.w	r12[0x4],r11
8000611c:	30 1c       	mov	r12,1
8000611e:	d5 43       	csrf	0x14
80006120:	d8 22       	popm	r4-r7,pc
80006122:	d7 03       	nop

80006124 <usb_mode_change>:
   */

// usb mode change callback
void usb_mode_change(bool b_host_mode) {
  // print_dbg("\r\n mode change (ignore) ");
}
80006124:	5e fc       	retal	r12

80006126 <usb_vbus_change>:
 
// usb Vbus change callback
void usb_vbus_change(bool b_vbus_present) {
  // print_dbg("\r\n usb vbus change, new status: ");
  // print_dbg_ulong(b_vbus_present);
}
80006126:	5e fc       	retal	r12

80006128 <usb_vbus_error>:

// usb vbus error callback
void usb_vbus_error(void) {
  // print_dbg("\r\n ******************* usb vbus error");

}
80006128:	5e fc       	retal	r12

8000612a <usb_connection>:
void usb_connection(uhc_device_t *dev, bool b_present) {
    // print_dbg("\r\n usb device connection: ");
    // print_dbg_hex(dev);
    // print_dbg(" , ");
    // print_dbg_ulong(b_present);
}
8000612a:	5e fc       	retal	r12

8000612c <usb_wakeup>:

// usb wakeup callback
void usb_wakeup(void) {
    // print_dbg("\r\n usb wakeup");
}
8000612c:	5e fc       	retal	r12

8000612e <usb_sof>:

// usb start-of-frame callback
void usb_sof(void) {
     // print_dbg("\r\n usb sof");
}
8000612e:	5e fc       	retal	r12

80006130 <usb_enum>:
  // print_dbg("\r\n usb enumerated: ");
  // print_dbg_hex(dev);
  // print_dbg(" , ");
  // print_dbg_hex(status);

}
80006130:	5e fc       	retal	r12
80006132:	d7 03       	nop

80006134 <rnd>:
#include "types.h"
#include "util.h"

u32 rnd(void) {
  x1 = x1 * c1 + a1;
80006134:	33 49       	mov	r9,52
80006136:	e0 6b f3 5f 	mov	r11,62303
8000613a:	ea 1b 3c 6e 	orh	r11,0x3c6e
8000613e:	72 08       	ld.w	r8,r9[0x0]
80006140:	e0 6a 66 0d 	mov	r10,26125
80006144:	ea 1a 00 19 	orh	r10,0x19
80006148:	b7 38       	mul	r8,r11
8000614a:	14 08       	add	r8,r10
8000614c:	93 08       	st.w	r9[0x0],r8
  x2 = x2 * c2 + a2;
8000614e:	33 88       	mov	r8,56
80006150:	70 0c       	ld.w	r12,r8[0x0]
80006152:	f8 0b 03 4a 	mac	r10,r12,r11
80006156:	91 0a       	st.w	r8[0x0],r10
  return (x1>>16) | (x2>>16);
80006158:	72 09       	ld.w	r9,r9[0x0]
8000615a:	70 0c       	ld.w	r12,r8[0x0]
8000615c:	f2 08 16 10 	lsr	r8,r9,0x10
}
80006160:	f1 ec 13 0c 	or	r12,r8,r12>>0x10
80006164:	5e fc       	retal	r12
80006166:	d7 03       	nop

80006168 <ftdi_rx_done>:
//------- static functions

static void ftdi_rx_done(  usb_add_t add,
			   usb_ep_t ep,
			   uhd_trans_status_t stat,
			   iram_size_t nb) {
80006168:	d4 01       	pushm	lr
  status = stat;
8000616a:	e0 68 08 30 	mov	r8,2096
  rxBusy = 0;
8000616e:	91 0a       	st.w	r8[0x0],r10
  rxBytes = nb - FTDI_STATUS_BYTES;
80006170:	e0 68 08 20 	mov	r8,2080
static void ftdi_rx_done(  usb_add_t add,
			   usb_ep_t ep,
			   uhd_trans_status_t stat,
			   iram_size_t nb) {
  status = stat;
  rxBusy = 0;
80006174:	20 29       	sub	r9,2
  rxBytes = nb - FTDI_STATUS_BYTES;
80006176:	30 0a       	mov	r10,0
80006178:	b0 8a       	st.b	r8[0x0],r10
  /* print_dbg_ulong(nb); */
  /* print_dbg(" ; status bytes: 0x"); */
  /* print_dbg_hex(rxBuf[0]); */
  /* print_dbg(" 0x"); */
  /* print_dbg_hex(rxBuf[1]); */			    
  if(rxBytes) {
8000617a:	e0 68 08 24 	mov	r8,2084
    // check for monome events
    //    if(monome_read_serial != NULL) { 
      (*monome_read_serial)(); 
8000617e:	91 09       	st.w	r8[0x0],r9
80006180:	58 09       	cp.w	r9,0
80006182:	c0 40       	breq	8000618a <ftdi_rx_done+0x22>
80006184:	33 08       	mov	r8,48
80006186:	70 08       	ld.w	r8,r8[0x0]
80006188:	5d 18       	icall	r8
8000618a:	d8 02       	popm	pc

8000618c <ftdi_tx_done>:
8000618c:	e0 68 08 30 	mov	r8,2096
80006190:	30 09       	mov	r9,0
80006192:	91 0a       	st.w	r8[0x0],r10
80006194:	e0 68 07 dc 	mov	r8,2012
  if (status != UHD_TRANS_NOERROR) {
    // print_dbg("\r\n ftdi tx error");
    return;
  }
  
}
80006198:	b0 89       	st.b	r8[0x0],r9
8000619a:	5e fc       	retal	r12

8000619c <ftdi_rx_buf>:
8000619c:	e0 6c 07 e0 	mov	r12,2016


// rx buffer (no status bytes)
extern u8* ftdi_rx_buf() {
  return rxBuf + 2;
}
800061a0:	2f ec       	sub	r12,-2
800061a2:	5e fc       	retal	r12

800061a4 <ftdi_rx_bytes>:
800061a4:	e0 68 08 24 	mov	r8,2084

// number of bytes from last rx trasnfer
extern volatile u8 ftdi_rx_bytes() {
  return rxBytes;
}
800061a8:	11 bc       	ld.ub	r12,r8[0x3]
800061aa:	5e fc       	retal	r12

800061ac <ftdi_rx_busy>:
800061ac:	e0 68 08 20 	mov	r8,2080

// busy flags
extern volatile u8 ftdi_rx_busy() {
  return rxBusy;
}
800061b0:	11 8c       	ld.ub	r12,r8[0x0]
800061b2:	5e fc       	retal	r12

800061b4 <ftdi_tx_busy>:
800061b4:	e0 68 07 dc 	mov	r8,2012

extern volatile u8 ftdi_tx_busy() {
  return txBusy;
}
800061b8:	11 8c       	ld.ub	r12,r8[0x0]
800061ba:	5e fc       	retal	r12

800061bc <ftdi_setup>:
800061bc:	d4 01       	pushm	lr
800061be:	20 3d       	sub	sp,12
  char * serstr;
  //  u8 matchMonome;
  // print_dbg("\r\n FTDI setup routine");

  // get string data...
  ftdi_get_strings(&manstr, &prodstr, &serstr);  
800061c0:	1a 9a       	mov	r10,sp
800061c2:	fa cb ff fc 	sub	r11,sp,-4
800061c6:	fa cc ff f8 	sub	r12,sp,-8
800061ca:	c5 bc       	rcall	80006280 <ftdi_get_strings>
800061cc:	40 0a       	lddsp	r10,sp[0x0]
  // print the strings
  // print_unicode_string(manstr, FTDI_STRING_MAX_LEN);
  //  print_unicode_string(prodstr, FTDI_STRING_MAX_LEN);
  //  print_unicode_string(serstr, FTDI_STRING_MAX_LEN);
  //// query if this is a monome device
  check_monome_device_desc(manstr, prodstr, serstr);
800061ce:	40 1b       	lddsp	r11,sp[0x4]
800061d0:	40 2c       	lddsp	r12,sp[0x8]
800061d2:	fe b0 fd 49 	rcall	80005c64 <check_monome_device_desc>
800061d6:	30 19       	mov	r9,1
  //// TODO: other protocols??

  // set connection flag
  ftdiConnect = 1;
800061d8:	e0 68 07 dd 	mov	r8,2013
800061dc:	b0 89       	st.b	r8[0x0],r9
}
800061de:	2f dd       	sub	sp,-12
800061e0:	d8 02       	popm	pc
800061e2:	d7 03       	nop

800061e4 <ftdi_change>:
800061e4:	d4 01       	pushm	lr
800061e6:	e0 68 08 28 	mov	r8,2088
800061ea:	58 0b       	cp.w	r11,0
800061ec:	c0 30       	breq	800061f2 <ftdi_change+0xe>
800061ee:	30 69       	mov	r9,6
void ftdi_change(uhc_device_t* dev, u8 plug) {
  // print_dbg("\r\n changed FTDI connection status");
  if(plug) { 
    e.type = kEventFtdiConnect; 
  } else {
    e.type = kEventFtdiDisconnect;
800061f0:	c0 28       	rjmp	800061f4 <ftdi_change+0x10>
800061f2:	30 79       	mov	r9,7
  }
  // posting an event so the main loop can respond
  event_post(&e); 
800061f4:	91 09       	st.w	r8[0x0],r9
800061f6:	e0 6c 08 28 	mov	r12,2088
}
800061fa:	fe b0 f8 d9 	rcall	800053ac <event_post>
800061fe:	d8 02       	popm	pc

80006200 <ftdi_read>:
80006200:	d4 01       	pushm	lr
80006202:	30 09       	mov	r9,0
    // print_dbg("\r\n error requesting ftdi output pipe");
  }
}
    
void ftdi_read(void) {
  rxBytes = 0;
80006204:	e0 68 08 24 	mov	r8,2084
  rxBusy = true;
80006208:	91 09       	st.w	r8[0x0],r9
8000620a:	30 19       	mov	r9,1
  if (!uhi_ftdi_in_run((u8*)rxBuf,
8000620c:	e0 68 08 20 	mov	r8,2080
80006210:	fe ca 00 a8 	sub	r10,pc,168
80006214:	b0 89       	st.b	r8[0x0],r9
80006216:	34 0b       	mov	r11,64
80006218:	e0 6c 07 e0 	mov	r12,2016
		       FTDI_RX_BUF_SIZE, &ftdi_rx_done)) {
    print_dbg("\r\n ftdi rx transfer error");
8000621c:	cb 2c       	rcall	80006380 <uhi_ftdi_in_run>
8000621e:	c0 51       	brne	80006228 <ftdi_read+0x28>
80006220:	fe cc c3 6c 	sub	r12,pc,-15508
80006224:	e0 a0 10 82 	rcall	80008328 <print_dbg>
80006228:	d8 02       	popm	pc
8000622a:	d7 03       	nop

8000622c <ftdi_write>:
8000622c:	d4 01       	pushm	lr
8000622e:	30 19       	mov	r9,1
80006230:	e0 68 07 dc 	mov	r8,2012
80006234:	fe ca 00 a8 	sub	r10,pc,168
80006238:	b0 89       	st.b	r8[0x0],r9
8000623a:	c9 1c       	rcall	8000635c <uhi_ftdi_out_run>
8000623c:	d8 02       	popm	pc
8000623e:	d7 03       	nop

80006240 <ctl_req_end>:
		uhd_trans_status_t status,
		uint16_t payload_trans) {
  // last transfer ok?
  //  print_dbg("\r\n ctl request end, status: ");
  //  print_dbg_hex((u32)status);
  ctlReadBusy = 0;
80006240:	30 09       	mov	r9,0
80006242:	e0 68 08 3c 	mov	r8,2108
}
80006246:	b0 89       	st.b	r8[0x0],r9
80006248:	5e fc       	retal	r12
8000624a:	d7 03       	nop

8000624c <send_ctl_request>:

// send control request
static u8 send_ctl_request(u8 reqtype, u8 reqnum, 
			   u8* data, u16 size,
			     u16 index, u16 val, 
			     uhd_callback_setup_end_t callbackEnd) {
8000624c:	d4 21       	pushm	r4-r7,lr
8000624e:	20 2d       	sub	sp,8
  /* } */

  req.bmRequestType = reqtype;
  req.bRequest = reqnum;
  req.wValue = (val);
  req.wIndex = (index);
80006250:	ba 28       	st.h	sp[0x4],r8

// send control request
static u8 send_ctl_request(u8 reqtype, u8 reqnum, 
			   u8* data, u16 size,
			     u16 index, u16 val, 
			     uhd_callback_setup_end_t callbackEnd) {
80006252:	fa c4 ff e4 	sub	r4,sp,-28
80006256:	68 18       	ld.w	r8,r4[0x4]
  /* if (uhi_ftdi_dev.dev != dev) { */
  /*   return;  // No interface to enable */
  /* } */

  req.bmRequestType = reqtype;
  req.bRequest = reqnum;
80006258:	ba 9b       	st.b	sp[0x1],r11
 
  /* if (uhi_ftdi_dev.dev != dev) { */
  /*   return;  // No interface to enable */
  /* } */

  req.bmRequestType = reqtype;
8000625a:	ba 8c       	st.b	sp[0x0],r12
  req.bRequest = reqnum;
  req.wValue = (val);
  req.wIndex = (index);
  req.wLength = (size);
  return uhd_setup_request(
8000625c:	1a d8       	st.w	--sp,r8

// send control request
static u8 send_ctl_request(u8 reqtype, u8 reqnum, 
			   u8* data, u16 size,
			     u16 index, u16 val, 
			     uhd_callback_setup_end_t callbackEnd) {
8000625e:	68 08       	ld.w	r8,r4[0x0]
  /*   return;  // No interface to enable */
  /* } */

  req.bmRequestType = reqtype;
  req.bRequest = reqnum;
  req.wValue = (val);
80006260:	ba 38       	st.h	sp[0x6],r8
  req.wIndex = (index);
  req.wLength = (size);
  return uhd_setup_request(
80006262:	e0 68 08 34 	mov	r8,2100

  req.bmRequestType = reqtype;
  req.bRequest = reqnum;
  req.wValue = (val);
  req.wIndex = (index);
  req.wLength = (size);
80006266:	70 08       	ld.w	r8,r8[0x0]
  return uhd_setup_request(
80006268:	ba 59       	st.h	sp[0xa],r9
8000626a:	fa cb ff fc 	sub	r11,sp,-4
8000626e:	5c 79       	castu.h	r9
80006270:	f1 3c 00 12 	ld.ub	r12,r8[18]
80006274:	30 08       	mov	r8,0
80006276:	e0 a0 0a 41 	rcall	800076f8 <uhd_setup_request>
			   data,
			   size,
			   NULL,
			   callbackEnd
			   );
}
8000627a:	2f fd       	sub	sp,-4
8000627c:	2f ed       	sub	sp,-8
8000627e:	d8 22       	popm	r4-r7,pc

80006280 <ftdi_get_strings>:
80006280:	d4 21       	pushm	r4-r7,lr
80006282:	30 18       	mov	r8,1
80006284:	e0 67 08 3c 	mov	r7,2108

  // get manufacturer string
  ctlReadBusy = 1;
  //  print_dbg("\r\n sending ctl request for manufacturer string, index : ");
  //  print_dbg_hex(uhi_ftdi_dev.dev->dev_desc.iManufacturer);
  if(!(send_ctl_request(
80006288:	ae 88       	st.b	r7[0x0],r8
8000628a:	fe c8 00 4a 	sub	r8,pc,74
8000628e:	1a d8       	st.w	--sp,r8
80006290:	e0 68 08 34 	mov	r8,2100
80006294:	70 08       	ld.w	r8,r8[0x0]
80006296:	f1 38 00 0e 	ld.ub	r8,r8[14]
8000629a:	e8 18 03 00 	orl	r8,0x300
  //  print_dbg_hex((u32)status);
  ctlReadBusy = 0;
}

// read eeprom
void ftdi_get_strings(char** pManufacturer, char** pProduct, char** pSerial) {
8000629e:	18 96       	mov	r6,r12

  // get manufacturer string
  ctlReadBusy = 1;
  //  print_dbg("\r\n sending ctl request for manufacturer string, index : ");
  //  print_dbg_hex(uhi_ftdi_dev.dev->dev_desc.iManufacturer);
  if(!(send_ctl_request(
800062a0:	1a d8       	st.w	--sp,r8
800062a2:	16 95       	mov	r5,r11
800062a4:	14 94       	mov	r4,r10
800062a6:	e0 68 04 09 	mov	r8,1033
800062aa:	34 09       	mov	r9,64
800062ac:	e0 6a 1c 20 	mov	r10,7200
800062b0:	30 6b       	mov	r11,6
800062b2:	e0 6c 00 80 	mov	r12,128
800062b6:	cc bf       	rcall	8000624c <send_ctl_request>
       )) {
    // print_dbg("\r\n control request for string descriptor failed");
    return;
  }
  // wait for transfer end
  while(ctlReadBusy) { ;; } 
800062b8:	2f ed       	sub	sp,-8
800062ba:	58 0c       	cp.w	r12,0
800062bc:	c4 e0       	breq	80006358 <ftdi_get_strings+0xd8>
800062be:	0e 98       	mov	r8,r7
800062c0:	e0 67 08 3c 	mov	r7,2108

  // get product string
  ctlReadBusy = 1;
800062c4:	11 89       	ld.ub	r9,r8[0x0]
  //  print_dbg("\r\n sending ctl request for product string, index : ");
  //  print_dbg_ulong( uhi_ftdi_dev.dev->dev_desc.iProduct);
  if(!(send_ctl_request(
800062c6:	58 09       	cp.w	r9,0
800062c8:	cf c1       	brne	800062c0 <ftdi_get_strings+0x40>
800062ca:	30 18       	mov	r8,1
800062cc:	ae 88       	st.b	r7[0x0],r8
800062ce:	fe c8 00 8e 	sub	r8,pc,142
800062d2:	1a d8       	st.w	--sp,r8
800062d4:	e0 68 08 34 	mov	r8,2100
800062d8:	70 08       	ld.w	r8,r8[0x0]
800062da:	f1 38 00 0f 	ld.ub	r8,r8[15]
800062de:	e8 18 03 00 	orl	r8,0x300
800062e2:	34 09       	mov	r9,64
800062e4:	1a d8       	st.w	--sp,r8
800062e6:	e0 6a 1c a0 	mov	r10,7328
800062ea:	e0 68 04 09 	mov	r8,1033
800062ee:	30 6b       	mov	r11,6
       )) {
    // print_dbg("\r\n control request for string descriptor failed");
    return;
  }
  // wait for transfer end
  while(ctlReadBusy) { ;; } 
800062f0:	e0 6c 00 80 	mov	r12,128
800062f4:	ca cf       	rcall	8000624c <send_ctl_request>
800062f6:	2f ed       	sub	sp,-8
800062f8:	58 0c       	cp.w	r12,0

  // get serial string
  ctlReadBusy = 1;
800062fa:	c2 f0       	breq	80006358 <ftdi_get_strings+0xd8>
800062fc:	0e 98       	mov	r8,r7
  // print_dbg("\r\n sending ctl request for serial string : ");
  if(!(send_ctl_request(
800062fe:	e0 67 08 3c 	mov	r7,2108
80006302:	11 89       	ld.ub	r9,r8[0x0]
80006304:	58 09       	cp.w	r9,0
80006306:	cf c1       	brne	800062fe <ftdi_get_strings+0x7e>
80006308:	30 18       	mov	r8,1
8000630a:	ae 88       	st.b	r7[0x0],r8
8000630c:	fe c8 00 cc 	sub	r8,pc,204
80006310:	1a d8       	st.w	--sp,r8
80006312:	e0 68 08 34 	mov	r8,2100
80006316:	70 08       	ld.w	r8,r8[0x0]
80006318:	f1 38 00 10 	ld.ub	r8,r8[16]
8000631c:	e8 18 03 00 	orl	r8,0x300
80006320:	34 09       	mov	r9,64
80006322:	1a d8       	st.w	--sp,r8
80006324:	e0 6a 1c 60 	mov	r10,7264
       )) {
    // print_dbg("\r\n control request for string descriptor failed");
    return;
  }
  // wait for transfer end
  while(ctlReadBusy) { ;; }
80006328:	e0 68 04 09 	mov	r8,1033
8000632c:	30 6b       	mov	r11,6

  //  print_dbg("\r\n requested all string descriptors.");
  *pManufacturer = manufacturer_string + FTDI_STRING_DESC_OFFSET;
8000632e:	e0 6c 00 80 	mov	r12,128
80006332:	c8 df       	rcall	8000624c <send_ctl_request>
  *pProduct = product_string + FTDI_STRING_DESC_OFFSET;
80006334:	2f ed       	sub	sp,-8
80006336:	58 0c       	cp.w	r12,0
80006338:	c1 00       	breq	80006358 <ftdi_get_strings+0xd8>
  *pSerial = serial_string + FTDI_STRING_DESC_OFFSET;
8000633a:	0f 88       	ld.ub	r8,r7[0x0]
8000633c:	58 08       	cp.w	r8,0
8000633e:	cf e1       	brne	8000633a <ftdi_get_strings+0xba>
80006340:	e0 68 1c 20 	mov	r8,7200
80006344:	2f e8       	sub	r8,-2
80006346:	8d 08       	st.w	r6[0x0],r8
80006348:	e0 68 1c a0 	mov	r8,7328
8000634c:	2f e8       	sub	r8,-2
8000634e:	8b 08       	st.w	r5[0x0],r8
80006350:	e0 68 1c 60 	mov	r8,7264
80006354:	2f e8       	sub	r8,-2
80006356:	89 08       	st.w	r4[0x0],r8
80006358:	d8 22       	popm	r4-r7,pc
8000635a:	d7 03       	nop

8000635c <uhi_ftdi_out_run>:
8000635c:	d4 01       	pushm	lr
8000635e:	1a da       	st.w	--sp,r10
}

// run the output endpoint (bulk)
bool uhi_ftdi_out_run(uint8_t * buf, iram_size_t buf_size,
		      uhd_callback_trans_t callback) {
  return uhd_ep_run(uhi_ftdi_dev.dev->address,
80006360:	16 98       	mov	r8,r11
80006362:	18 99       	mov	r9,r12
80006364:	e0 6a 08 34 	mov	r10,2100
80006368:	e0 6c 4e 20 	mov	r12,20000
8000636c:	15 db       	ld.ub	r11,r10[0x5]
8000636e:	74 0a       	ld.w	r10,r10[0x0]
80006370:	1a dc       	st.w	--sp,r12
80006372:	f5 3c 00 12 	ld.ub	r12,r10[18]
80006376:	30 1a       	mov	r10,1
80006378:	e0 a0 08 f6 	rcall	80007564 <uhd_ep_run>
		    uhi_ftdi_dev.ep_out, true, buf, buf_size,
		    UHI_FTDI_TIMEOUT, callback);
}
8000637c:	2f ed       	sub	sp,-8
8000637e:	d8 02       	popm	pc

80006380 <uhi_ftdi_in_run>:
80006380:	d4 01       	pushm	lr
80006382:	1a da       	st.w	--sp,r10
80006384:	16 98       	mov	r8,r11
80006386:	18 99       	mov	r9,r12
}

// run the input endpoint (bulk)
bool uhi_ftdi_in_run(uint8_t * buf, iram_size_t buf_size,
		     uhd_callback_trans_t callback) {
  return uhd_ep_run(uhi_ftdi_dev.dev->address,
80006388:	e0 6a 08 34 	mov	r10,2100
8000638c:	e0 6c 4e 20 	mov	r12,20000
80006390:	15 cb       	ld.ub	r11,r10[0x4]
80006392:	74 0a       	ld.w	r10,r10[0x0]
80006394:	1a dc       	st.w	--sp,r12
80006396:	f5 3c 00 12 	ld.ub	r12,r10[18]
8000639a:	30 0a       	mov	r10,0
8000639c:	e0 a0 08 e4 	rcall	80007564 <uhd_ep_run>
		    uhi_ftdi_dev.ep_in, false, buf, buf_size,
		    UHI_FTDI_TIMEOUT, callback);
}
800063a0:	2f ed       	sub	sp,-8
800063a2:	d8 02       	popm	pc

800063a4 <uhi_ftdi_uninstall>:
800063a4:	d4 01       	pushm	lr
800063a6:	e0 68 08 34 	mov	r8,2100
800063aa:	70 0a       	ld.w	r10,r8[0x0]

  ftdi_change(dev, true);  
}

void uhi_ftdi_uninstall(uhc_device_t* dev) {
  if (uhi_ftdi_dev.dev != dev) {
800063ac:	18 3a       	cp.w	r10,r12
    return; // Device not enabled in this interface
  }
  uhi_ftdi_dev.dev = NULL;
800063ae:	c0 41       	brne	800063b6 <uhi_ftdi_uninstall+0x12>
800063b0:	30 0b       	mov	r11,0
  Assert(uhi_ftdi_dev.report!=NULL);
  ftdi_change(dev, false);  
800063b2:	91 0b       	st.w	r8[0x0],r11
800063b4:	c1 8f       	rcall	800061e4 <ftdi_change>
800063b6:	d8 02       	popm	pc

800063b8 <uhi_ftdi_enable>:
800063b8:	d4 21       	pushm	r4-r7,lr
800063ba:	e0 68 08 34 	mov	r8,2100
800063be:	70 06       	ld.w	r6,r8[0x0]
  return UHC_ENUM_UNSUPPORTED; // No interface supported
}

void uhi_ftdi_enable(uhc_device_t* dev) {

  if (uhi_ftdi_dev.dev != dev) {
800063c0:	18 36       	cp.w	r6,r12
  }
  /// bit mode (not bitbang? )
  /// todo: what do these mean???
  // val : ff
  // indx : 1
  send_ctl_request(FTDI_DEVICE_OUT_REQTYPE, 
800063c2:	c3 e1       	brne	8000643e <uhi_ftdi_enable+0x86>
800063c4:	e0 68 00 ff 	mov	r8,255
800063c8:	30 07       	mov	r7,0
800063ca:	30 bb       	mov	r11,11
800063cc:	1a d7       	st.w	--sp,r7
800063ce:	0e 99       	mov	r9,r7
800063d0:	1a d8       	st.w	--sp,r8
800063d2:	0e 9a       	mov	r10,r7
800063d4:	30 18       	mov	r8,1
800063d6:	34 0c       	mov	r12,64
800063d8:	c3 af       	rcall	8000624c <send_ctl_request>
		   NULL);
  /// line property
  /// todo: what do these mean???
  // index 1
  // val : 8
  send_ctl_request(FTDI_DEVICE_OUT_REQTYPE, 
800063da:	30 88       	mov	r8,8
800063dc:	1a d7       	st.w	--sp,r7
800063de:	0e 99       	mov	r9,r7
800063e0:	1a d8       	st.w	--sp,r8
800063e2:	0e 9a       	mov	r10,r7
800063e4:	30 18       	mov	r8,1
800063e6:	30 4b       	mov	r11,4
800063e8:	34 0c       	mov	r12,64
800063ea:	c3 1f       	rcall	8000624c <send_ctl_request>
800063ec:	e0 69 c0 36 	mov	r9,49206
  /// baud rate
  // rq : 3
  // value: 26 (baudrate: 115200)
  // value: 49206 (baudrate : 57600)
  // index: 0
  send_ctl_request(FTDI_DEVICE_OUT_REQTYPE, 
800063f0:	1a d7       	st.w	--sp,r7
800063f2:	0e 98       	mov	r8,r7
800063f4:	1a d9       	st.w	--sp,r9
800063f6:	0e 9a       	mov	r10,r7
800063f8:	0e 99       	mov	r9,r7
800063fa:	30 3b       	mov	r11,3
800063fc:	34 0c       	mov	r12,64
800063fe:	c2 7f       	rcall	8000624c <send_ctl_request>
80006400:	e0 68 03 e8 	mov	r8,1000
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80006404:	30 09       	mov	r9,0
80006406:	e0 6a 7b e7 	mov	r10,31719
8000640a:	ea 1a cb 41 	orh	r10,0xcb41
8000640e:	30 2b       	mov	r11,2
80006410:	e0 a0 13 3a 	rcall	80008a84 <__avr32_udiv64>
80006414:	e1 b8 00 42 	mfsr	r8,0x108
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80006418:	f0 0a 00 0a 	add	r10,r8,r10
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000641c:	2f ad       	sub	sp,-24
8000641e:	e1 b9 00 42 	mfsr	r9,0x108
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80006422:	14 38       	cp.w	r8,r10
80006424:	e0 88 00 05 	brls	8000642e <uhi_ftdi_enable+0x76>
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80006428:	10 39       	cp.w	r9,r8
8000642a:	cf a2       	brcc	8000641e <uhi_ftdi_enable+0x66>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000642c:	c0 38       	rjmp	80006432 <uhi_ftdi_enable+0x7a>
8000642e:	10 39       	cp.w	r9,r8
80006430:	c0 43       	brcs	80006438 <uhi_ftdi_enable+0x80>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006432:	14 39       	cp.w	r9,r10
80006434:	fe 98 ff f5 	brls	8000641e <uhi_ftdi_enable+0x66>
80006438:	0c 9c       	mov	r12,r6
8000643a:	30 1b       	mov	r11,1
		   0, 49206,
		   NULL);

  delay_ms(200);

  ftdi_change(dev, true);  
8000643c:	cd 4e       	rcall	800061e4 <ftdi_change>
8000643e:	d8 22       	popm	r4-r7,pc

80006440 <uhi_ftdi_install>:
80006440:	d4 31       	pushm	r0-r7,lr
80006442:	20 1d       	sub	sp,4
80006444:	e0 63 08 34 	mov	r3,2100
80006448:	18 96       	mov	r6,r12
8000644a:	66 05       	ld.w	r5,r3[0x0]
8000644c:	58 05       	cp.w	r5,0
8000644e:	c0 30       	breq	80006454 <uhi_ftdi_install+0x14>
80006450:	30 5c       	mov	r12,5
80006452:	c6 58       	rjmp	8000651c <uhi_ftdi_install+0xdc>
80006454:	98 d9       	ld.uh	r9,r12[0xa]
80006456:	f2 0a 16 08 	lsr	r10,r9,0x8

  // check vid/pid
  vid = le16_to_cpu(dev->dev_desc.idVendor);
  pid = le16_to_cpu(dev->dev_desc.idProduct);

  if( (vid == FTDI_VID) && (pid == FTDI_PID) ) {
8000645a:	f5 e9 10 89 	or	r9,r10,r9<<0x8
8000645e:	e0 6a 60 01 	mov	r10,24577
80006462:	98 c8       	ld.uh	r8,r12[0x8]
80006464:	f4 09 19 00 	cp.h	r9,r10
80006468:	5f 09       	sreq	r9
8000646a:	f0 0a 16 08 	lsr	r10,r8,0x8
8000646e:	f5 e8 10 88 	or	r8,r10,r8<<0x8
80006472:	e0 6a 04 03 	mov	r10,1027
80006476:	f4 08 19 00 	cp.h	r8,r10
8000647a:	5f 08       	sreq	r8
8000647c:	10 69       	and	r9,r8
8000647e:	ea 09 18 00 	cp.b	r9,r5
    ;; // this is an FTDI device, so continue
  } else {
    return UHC_ENUM_UNSUPPORTED;
  }

  conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
80006482:	c4 c0       	breq	8000651a <uhi_ftdi_install+0xda>
80006484:	78 68       	ld.w	r8,r12[0x18]
  ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
80006486:	11 a4       	ld.ub	r4,r8[0x2]
    ;; // this is an FTDI device, so continue
  } else {
    return UHC_ENUM_UNSUPPORTED;
  }

  conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
80006488:	10 97       	mov	r7,r8
8000648a:	11 b8       	ld.ub	r8,r8[0x3]
8000648c:	f1 e4 10 84 	or	r4,r8,r4<<0x8
80006490:	e8 08 16 08 	lsr	r8,r4,0x8
80006494:	30 40       	mov	r0,4
80006496:	f1 e4 10 84 	or	r4,r8,r4<<0x8
8000649a:	3f f1       	mov	r1,-1
    case USB_DT_INTERFACE:
      if ((ptr_iface->bInterfaceClass == FTDI_CLASS)
	  && (ptr_iface->bInterfaceProtocol == FTDI_PROTOCOL) ) {
	// print_dbg("\r\n class/protocol matches FTDI. ");
	b_iface_supported = true;
	uhi_ftdi_dev.ep_in = 0;
8000649c:	5c 84       	casts.h	r4
  conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
  ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
  b_iface_supported = false;

  while(conf_desc_lgt) {
    switch (ptr_iface->bDescriptorType) {
8000649e:	0a 92       	mov	r2,r5

  conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
  ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
  b_iface_supported = false;

  while(conf_desc_lgt) {
800064a0:	30 58       	mov	r8,5
    switch (ptr_iface->bDescriptorType) {
800064a2:	c3 38       	rjmp	80006508 <uhi_ftdi_install+0xc8>
800064a4:	0f 99       	ld.ub	r9,r7[0x1]
800064a6:	e0 09 18 00 	cp.b	r9,r0
800064aa:	c0 50       	breq	800064b4 <uhi_ftdi_install+0x74>
800064ac:	f0 09 18 00 	cp.b	r9,r8
800064b0:	c2 81       	brne	80006500 <uhi_ftdi_install+0xc0>

    case USB_DT_INTERFACE:
      if ((ptr_iface->bInterfaceClass == FTDI_CLASS)
800064b2:	c0 d8       	rjmp	800064cc <uhi_ftdi_install+0x8c>
800064b4:	0f d9       	ld.ub	r9,r7[0x5]
800064b6:	e2 09 18 00 	cp.b	r9,r1
	  && (ptr_iface->bInterfaceProtocol == FTDI_PROTOCOL) ) {
800064ba:	c2 21       	brne	800064fe <uhi_ftdi_install+0xbe>
800064bc:	0f f9       	ld.ub	r9,r7[0x7]
800064be:	e2 09 18 00 	cp.b	r9,r1
	// print_dbg("\r\n class/protocol matches FTDI. ");
	b_iface_supported = true;
	uhi_ftdi_dev.ep_in = 0;
800064c2:	c1 e1       	brne	800064fe <uhi_ftdi_install+0xbe>
	uhi_ftdi_dev.ep_out = 0;
800064c4:	a6 c2       	st.b	r3[0x4],r2
800064c6:	a6 d2       	st.b	r3[0x5],r2

  while(conf_desc_lgt) {
    switch (ptr_iface->bDescriptorType) {

    case USB_DT_INTERFACE:
      if ((ptr_iface->bInterfaceClass == FTDI_CLASS)
800064c8:	30 15       	mov	r5,1
	b_iface_supported = false;
      }
      break;

    case USB_DT_ENDPOINT:
      if (!b_iface_supported) {
800064ca:	c1 b8       	rjmp	80006500 <uhi_ftdi_install+0xc0>
800064cc:	58 05       	cp.w	r5,0
	break;
      }
      if (!uhd_ep_alloc(dev->address, (usb_ep_desc_t*)ptr_iface)) {
800064ce:	c1 90       	breq	80006500 <uhi_ftdi_install+0xc0>
800064d0:	ed 3c 00 12 	ld.ub	r12,r6[18]
800064d4:	0e 9b       	mov	r11,r7
800064d6:	50 08       	stdsp	sp[0x0],r8
800064d8:	e0 a0 09 9e 	rcall	80007814 <uhd_ep_alloc>
800064dc:	40 08       	lddsp	r8,sp[0x0]
800064de:	c0 31       	brne	800064e4 <uhi_ftdi_install+0xa4>
800064e0:	30 4c       	mov	r12,4
	// print_dbg("\r\n endpoint allocation failed");
	return UHC_ENUM_HARDWARE_LIMIT;
      }

      switch(((usb_ep_desc_t*)ptr_iface)->bmAttributes & USB_EP_TYPE_MASK) {
800064e2:	c1 d8       	rjmp	8000651c <uhi_ftdi_install+0xdc>
800064e4:	0f b9       	ld.ub	r9,r7[0x3]
800064e6:	f3 d9 c0 02 	bfextu	r9,r9,0x0,0x2
800064ea:	58 29       	cp.w	r9,2
      case USB_EP_TYPE_BULK:
	//	print_dbg("\r\n allocating bulk endpoint: ");
	if (((usb_ep_desc_t*)ptr_iface)->bEndpointAddress & USB_EP_DIR_IN) {
800064ec:	c0 a1       	brne	80006500 <uhi_ftdi_install+0xc0>
800064ee:	0f a9       	ld.ub	r9,r7[0x2]
800064f0:	e4 09 18 00 	cp.b	r9,r2
	  uhi_ftdi_dev.ep_in = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
800064f4:	c0 34       	brge	800064fa <uhi_ftdi_install+0xba>
800064f6:	a6 c9       	st.b	r3[0x4],r9
	} else {
	  uhi_ftdi_dev.ep_out = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
800064f8:	c0 48       	rjmp	80006500 <uhi_ftdi_install+0xc0>
800064fa:	a6 d9       	st.b	r3[0x5],r9
800064fc:	c0 28       	rjmp	80006500 <uhi_ftdi_install+0xc0>
    default:
      // print_dbg("\r\n ignoring descriptor in ftdi device enumeration");
      break;
    }
    Assert(conf_desc_lgt>=ptr_iface->bLength);
    conf_desc_lgt -= ptr_iface->bLength;
800064fe:	30 05       	mov	r5,0
80006500:	0f 89       	ld.ub	r9,r7[0x0]
    ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
80006502:	12 14       	sub	r4,r9
    default:
      // print_dbg("\r\n ignoring descriptor in ftdi device enumeration");
      break;
    }
    Assert(conf_desc_lgt>=ptr_iface->bLength);
    conf_desc_lgt -= ptr_iface->bLength;
80006504:	12 07       	add	r7,r9

  conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
  ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
  b_iface_supported = false;

  while(conf_desc_lgt) {
80006506:	5c 84       	casts.h	r4
80006508:	58 04       	cp.w	r4,0
    Assert(conf_desc_lgt>=ptr_iface->bLength);
    conf_desc_lgt -= ptr_iface->bLength;
    ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
  }

  if (b_iface_supported) {
8000650a:	cc d1       	brne	800064a4 <uhi_ftdi_install+0x64>
8000650c:	58 05       	cp.w	r5,0
    uhi_ftdi_dev.dev = dev;
8000650e:	c0 60       	breq	8000651a <uhi_ftdi_install+0xda>
80006510:	e0 68 08 34 	mov	r8,2100
    // print_dbg("\r\n completed FTDI device install");
    return UHC_ENUM_SUCCESS;
80006514:	08 9c       	mov	r12,r4
80006516:	91 06       	st.w	r8[0x0],r6
  }
  return UHC_ENUM_UNSUPPORTED; // No interface supported
}
80006518:	c0 28       	rjmp	8000651c <uhi_ftdi_install+0xdc>
8000651a:	30 1c       	mov	r12,1
8000651c:	2f fd       	sub	sp,-4
8000651e:	d8 32       	popm	r0-r7,pc

80006520 <flashc_set_bus_freq>:
}


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
80006520:	e0 68 8a 3f 	mov	r8,35391
80006524:	ea 18 01 f7 	orh	r8,0x1f7
80006528:	10 3c       	cp.w	r12,r8
8000652a:	e0 88 00 07 	brls	80006538 <flashc_set_bus_freq+0x18>
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
8000652e:	fe 68 14 00 	mov	r8,-125952
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80006532:	30 1a       	mov	r10,1
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80006534:	70 09       	ld.w	r9,r8[0x0]
80006536:	c0 58       	rjmp	80006540 <flashc_set_bus_freq+0x20>
80006538:	fe 68 14 00 	mov	r8,-125952
	u_avr32_flashc_fcr.FCR.fws = wait_state;
8000653c:	30 0a       	mov	r10,0
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
8000653e:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80006540:	f3 da d0 c1 	bfins	r9,r10,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80006544:	91 09       	st.w	r8[0x0],r9
80006546:	5e fc       	retal	r12

80006548 <flashc_default_wait_until_ready>:
//! @{


bool flashc_is_ready(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
80006548:	fe 69 14 00 	mov	r9,-125952
}


void flashc_default_wait_until_ready(void)
{
	while (!flashc_is_ready());
8000654c:	30 08       	mov	r8,0
//! @{


bool flashc_is_ready(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
8000654e:	72 2a       	ld.w	r10,r9[0x8]
}


void flashc_default_wait_until_ready(void)
{
	while (!flashc_is_ready());
80006550:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80006554:	f0 0a 18 00 	cp.b	r10,r8
80006558:	cf b0       	breq	8000654e <flashc_default_wait_until_ready+0x6>
}
8000655a:	5e fc       	retal	r12

8000655c <flashc_issue_command>:
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
8000655c:	d4 21       	pushm	r4-r7,lr
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
8000655e:	33 c8       	mov	r8,60
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
80006560:	18 97       	mov	r7,r12
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80006562:	70 08       	ld.w	r8,r8[0x0]
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
80006564:	16 96       	mov	r6,r11
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80006566:	5d 18       	icall	r8
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
80006568:	fe 68 14 00 	mov	r8,-125952
8000656c:	70 18       	ld.w	r8,r8[0x4]
	u_avr32_flashc_fcmd.FCMD.cmd = command;
8000656e:	f1 d7 d0 06 	bfins	r8,r7,0x0,0x6
	if (page_number >= 0) {
80006572:	58 06       	cp.w	r6,0
80006574:	c0 35       	brlt	8000657a <flashc_issue_command+0x1e>
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
80006576:	f1 d6 d1 10 	bfins	r8,r6,0x8,0x10
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
8000657a:	fe 69 14 00 	mov	r9,-125952
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
	u_avr32_flashc_fcmd.FCMD.cmd = command;
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
8000657e:	3a 5a       	mov	r10,-91
80006580:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
80006584:	93 18       	st.w	r9[0x4],r8
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
80006586:	72 28       	ld.w	r8,r9[0x8]
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
80006588:	e0 69 08 40 	mov	r9,2112
8000658c:	e2 18 00 0c 	andl	r8,0xc,COH
	flashc_wait_until_ready();
80006590:	93 08       	st.w	r9[0x0],r8
80006592:	33 c8       	mov	r8,60
80006594:	70 08       	ld.w	r8,r8[0x0]
}
80006596:	5d 18       	icall	r8
80006598:	d8 22       	popm	r4-r7,pc
8000659a:	d7 03       	nop

8000659c <flashc_clear_page_buffer>:
8000659c:	d4 01       	pushm	lr
8000659e:	3f fb       	mov	r11,-1
//! @{


void flashc_clear_page_buffer(void)
{
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_CPB, -1);
800065a0:	30 3c       	mov	r12,3
800065a2:	cd df       	rcall	8000655c <flashc_issue_command>
800065a4:	d8 02       	popm	pc
}
800065a6:	d7 03       	nop

800065a8 <flashc_quick_page_read>:
800065a8:	d4 01       	pushm	lr
800065aa:	18 9b       	mov	r11,r12
}


bool flashc_quick_page_read(int page_number)
{
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPR, page_number);
800065ac:	30 cc       	mov	r12,12
800065ae:	cd 7f       	rcall	8000655c <flashc_issue_command>
800065b0:	fe 68 14 00 	mov	r8,-125952
}


bool flashc_is_page_erased(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_QPRR_MASK) != 0);
800065b4:	70 2c       	ld.w	r12,r8[0x8]
800065b6:	f9 dc c0 a1 	bfextu	r12,r12,0x5,0x1

bool flashc_quick_page_read(int page_number)
{
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPR, page_number);
	return flashc_is_page_erased();
}
800065ba:	d8 02       	popm	pc

800065bc <flashc_erase_page>:
800065bc:	d4 21       	pushm	r4-r7,lr
800065be:	16 97       	mov	r7,r11
800065c0:	18 9b       	mov	r11,r12
800065c2:	30 2c       	mov	r12,2

bool flashc_erase_page(int page_number, bool check)
{
	bool page_erased = true;

	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EP, page_number);
800065c4:	cc cf       	rcall	8000655c <flashc_issue_command>
800065c6:	58 07       	cp.w	r7,0
	if (check) {
800065c8:	c0 21       	brne	800065cc <flashc_erase_page+0x10>
800065ca:	da 2a       	popm	r4-r7,pc,r12=1
800065cc:	e0 67 08 40 	mov	r7,2112
		unsigned int error_status = flashc_error_status;
		page_erased = flashc_quick_page_read(-1);
800065d0:	3f fc       	mov	r12,-1
{
	bool page_erased = true;

	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EP, page_number);
	if (check) {
		unsigned int error_status = flashc_error_status;
800065d2:	6e 06       	ld.w	r6,r7[0x0]
		page_erased = flashc_quick_page_read(-1);
800065d4:	ce af       	rcall	800065a8 <flashc_quick_page_read>
800065d6:	6e 08       	ld.w	r8,r7[0x0]
		flashc_error_status |= error_status;
800065d8:	f1 e6 10 06 	or	r6,r8,r6
800065dc:	8f 06       	st.w	r7[0x0],r6
800065de:	d8 22       	popm	r4-r7,pc

800065e0 <flashc_write_page>:
	}
	return page_erased;
}
800065e0:	d4 01       	pushm	lr
800065e2:	18 9b       	mov	r11,r12
800065e4:	30 1c       	mov	r12,1
800065e6:	cb bf       	rcall	8000655c <flashc_issue_command>
800065e8:	d8 02       	popm	pc
800065ea:	d7 03       	nop

800065ec <flashc_quick_user_page_read>:
800065ec:	d4 01       	pushm	lr
800065ee:	30 fc       	mov	r12,15
}


bool flashc_quick_user_page_read(void)
{
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPRUP, -1);
800065f0:	3f fb       	mov	r11,-1
800065f2:	cb 5f       	rcall	8000655c <flashc_issue_command>
800065f4:	fe 68 14 00 	mov	r8,-125952
}


bool flashc_is_page_erased(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_QPRR_MASK) != 0);
800065f8:	70 2c       	ld.w	r12,r8[0x8]
800065fa:	f9 dc c0 a1 	bfextu	r12,r12,0x5,0x1

bool flashc_quick_user_page_read(void)
{
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPRUP, -1);
	return flashc_is_page_erased();
}
800065fe:	d8 02       	popm	pc

80006600 <flashc_erase_user_page>:
80006600:	d4 21       	pushm	r4-r7,lr
80006602:	3f fb       	mov	r11,-1
80006604:	18 97       	mov	r7,r12
80006606:	30 ec       	mov	r12,14


bool flashc_erase_user_page(bool check)
{
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EUP, -1);
80006608:	ca af       	rcall	8000655c <flashc_issue_command>
8000660a:	58 07       	cp.w	r7,0
	return (check) ? flashc_quick_user_page_read() : true;
8000660c:	c0 21       	brne	80006610 <flashc_erase_user_page+0x10>
8000660e:	da 2a       	popm	r4-r7,pc,r12=1
80006610:	ce ef       	rcall	800065ec <flashc_quick_user_page_read>
80006612:	d8 22       	popm	r4-r7,pc

80006614 <flashc_write_user_page>:
80006614:	d4 01       	pushm	lr
}
80006616:	3f fb       	mov	r11,-1
80006618:	30 dc       	mov	r12,13
8000661a:	ca 1f       	rcall	8000655c <flashc_issue_command>
8000661c:	d8 02       	popm	pc
8000661e:	d7 03       	nop

80006620 <flashc_memset64>:


void flashc_write_user_page(void)
{
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WUP, -1);
}
80006620:	d4 31       	pushm	r0-r7,lr
80006622:	21 2d       	sub	sp,72
	return flashc_memset64(dst, src | (uint64_t)src << 32, nbytes, erase);
}


volatile void *flashc_memset64(volatile void *dst, uint64_t src, size_t nbytes, bool erase)
{
80006624:	50 58       	stdsp	sp[0x14],r8
80006626:	12 96       	mov	r6,r9
	// Use aggregated pointers to have several alignments available for a same address.
	UnionCVPtr flash_array_end;
	UnionVPtr dest;
	Union64 source = {0};
80006628:	30 08       	mov	r8,0
8000662a:	30 09       	mov	r9,0
	return flashc_memset64(dst, src | (uint64_t)src << 32, nbytes, erase);
}


volatile void *flashc_memset64(volatile void *dst, uint64_t src, size_t nbytes, bool erase)
{
8000662c:	18 97       	mov	r7,r12
	// Use aggregated pointers to have several alignments available for a same address.
	UnionCVPtr flash_array_end;
	UnionVPtr dest;
	Union64 source = {0};
8000662e:	fa e9 00 38 	st.d	sp[56],r8
	return flashc_memset64(dst, src | (uint64_t)src << 32, nbytes, erase);
}


volatile void *flashc_memset64(volatile void *dst, uint64_t src, size_t nbytes, bool erase)
{
80006632:	14 94       	mov	r4,r10
80006634:	16 95       	mov	r5,r11
		256,
		384,
		512,
		768,
		1024,
	};
80006636:	31 0a       	mov	r10,16
80006638:	fe cb c7 6a 	sub	r11,pc,-14486
8000663c:	fa cc ff e0 	sub	r12,sp,-32
80006640:	e0 a0 15 a2 	rcall	80009184 <memcpy>
	return ((unsigned int)FLASH_SIZE[(AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FSZ_MASK)
80006644:	fe 68 14 00 	mov	r8,-125952
	UnionVPtr tmp;
	unsigned int error_status = 0;
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
80006648:	fa cb ff b8 	sub	r11,sp,-72
8000664c:	70 28       	ld.w	r8,r8[0x8]
8000664e:	f1 d8 c1 a3 	bfextu	r8,r8,0xd,0x3
80006652:	f6 08 00 18 	add	r8,r11,r8<<0x1
80006656:	f1 13 ff d8 	ld.uh	r3,r8[-40]
8000665a:	30 08       	mov	r8,0
8000665c:	ea 18 80 00 	orh	r8,0x8000
	dest.u8ptr = dst;
80006660:	ab 63       	lsl	r3,0xa
	UnionVPtr tmp;
	unsigned int error_status = 0;
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
80006662:	51 17       	stdsp	sp[0x44],r7
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
80006664:	10 03       	add	r3,r8
80006666:	ee c8 ff f9 	sub	r8,r7,-7
8000666a:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
8000666e:	c1 38       	rjmp	80006694 <flashc_memset64+0x74>
80006670:	f0 c9 00 01 	sub	r9,r8,1
		source.u8[i] = src;
80006674:	fa ca ff b8 	sub	r10,sp,-72
80006678:	f4 08 00 08 	add	r8,r10,r8
		src >>= 8;
8000667c:	ea 0a 16 08 	lsr	r10,r5,0x8
	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
		source.u8[i] = src;
80006680:	f1 64 ff f0 	st.b	r8[-16],r4

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
80006684:	f1 d9 c0 03 	bfextu	r8,r9,0x0,0x3
		source.u8[i] = src;
		src >>= 8;
80006688:	e8 09 16 08 	lsr	r9,r4,0x8
8000668c:	f3 e5 11 89 	or	r9,r9,r5<<0x18
80006690:	14 95       	mov	r5,r10
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
80006692:	12 94       	mov	r4,r9
80006694:	58 04       	cp.w	r4,0
80006696:	5c 25       	cpc	r5
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
		source.u8[i] = src;
		src >>= 8;
	}
	dest_end.u8ptr = dest.u8ptr + nbytes;
80006698:	ce c1       	brne	80006670 <flashc_memset64+0x50>
8000669a:	ee 06 00 06 	add	r6,r7,r6

	// If destination is outside flash, go to next flash page if any.
	if (dest.u8ptr < AVR32_FLASH) {
8000669e:	e0 69 ff ff 	mov	r9,65535
800066a2:	ea 19 7f ff 	orh	r9,0x7fff
800066a6:	12 37       	cp.w	r7,r9
800066a8:	e0 8b 00 06 	brhi	800066b4 <flashc_memset64+0x94>
		dest.u8ptr = AVR32_FLASH;
800066ac:	30 08       	mov	r8,0
800066ae:	ea 18 80 00 	orh	r8,0x8000
	} else if (flash_array_end.u8ptr <= dest.u8ptr && dest.u8ptr < AVR32_FLASHC_USER_PAGE) {
800066b2:	c0 e8       	rjmp	800066ce <flashc_memset64+0xae>
800066b4:	0e 33       	cp.w	r3,r7
800066b6:	e0 8b 00 0d 	brhi	800066d0 <flashc_memset64+0xb0>
800066ba:	e0 68 ff ff 	mov	r8,65535
800066be:	ea 18 80 7f 	orh	r8,0x807f
800066c2:	10 37       	cp.w	r7,r8
800066c4:	e0 8b 00 06 	brhi	800066d0 <flashc_memset64+0xb0>
		dest.u8ptr = AVR32_FLASHC_USER_PAGE;
800066c8:	30 08       	mov	r8,0
800066ca:	ea 18 80 80 	orh	r8,0x8080
	}

	// If end of destination is outside flash, move it to the end of the previous flash page if any.
	if (dest_end.u8ptr > AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE) {
800066ce:	51 18       	stdsp	sp[0x44],r8
800066d0:	e0 61 02 00 	mov	r1,512
800066d4:	ea 11 80 80 	orh	r1,0x8080
800066d8:	02 36       	cp.w	r6,r1
800066da:	e0 88 00 04 	brls	800066e2 <flashc_memset64+0xc2>
800066de:	02 96       	mov	r6,r1
		dest_end.u8ptr = AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE;
	} else if (AVR32_FLASHC_USER_PAGE >= dest_end.u8ptr && dest_end.u8ptr > flash_array_end.u8ptr) {
800066e0:	c0 a8       	rjmp	800066f4 <flashc_memset64+0xd4>
800066e2:	30 00       	mov	r0,0
800066e4:	ea 10 80 80 	orh	r0,0x8080
800066e8:	00 36       	cp.w	r6,r0
800066ea:	e0 8b 00 05 	brhi	800066f4 <flashc_memset64+0xd4>
800066ee:	06 36       	cp.w	r6,r3
800066f0:	e6 06 17 b0 	movhi	r6,r3
		// Determine if the current destination page has an incomplete end.
		incomplete_flash_page_end = (Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
				Align_down((uint32_t)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;
800066f4:	fa ea 00 38 	ld.d	r10,sp[56]
			// pages that have already been written to.
			{
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
800066f8:	e5 d6 c0 03 	bfextu	r2,r6,0x0,0x3
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
800066fc:	0c 91       	mov	r1,r6
800066fe:	ec 02 01 08 	sub	r8,r6,r2
		// Determine if the current destination page has an incomplete end.
		incomplete_flash_page_end = (Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
				Align_down((uint32_t)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;
80006702:	fa eb 00 04 	st.d	sp[4],r10
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
			*dest.u64ptr++ = source.u64;
		}

		// If the current destination page has an incomplete end...
		if (incomplete_flash_page_end) {
80006706:	2f 88       	sub	r8,-8
	}

	// Align each end of destination pointer with its natural boundary.
	dest_end.u16ptr = (uint16_t *)Align_down((uint32_t)dest_end.u8ptr, sizeof(uint16_t));
	dest_end.u32ptr = (uint32_t *)Align_down((uint32_t)dest_end.u16ptr, sizeof(uint32_t));
	dest_end.u64ptr = (uint64_t *)Align_down((uint32_t)dest_end.u32ptr, sizeof(uint64_t));
80006708:	0c 9a       	mov	r10,r6
8000670a:	e0 11 ff f8 	andl	r1,0xfff8
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
			*dest.u64ptr++ = source.u64;
		}

		// If the current destination page has an incomplete end...
		if (incomplete_flash_page_end) {
8000670e:	e0 1a fe 00 	andl	r10,0xfe00
		// Determine if the current destination page has an incomplete end.
		incomplete_flash_page_end = (Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
				Align_down((uint32_t)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;
80006712:	50 78       	stdsp	sp[0x1c],r8
80006714:	30 05       	mov	r5,0
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
			*dest.u64ptr++ = source.u64;
		}

		// If the current destination page has an incomplete end...
		if (incomplete_flash_page_end) {
80006716:	e0 64 08 40 	mov	r4,2112
	dest_end.u64ptr = (uint64_t *)Align_down((uint32_t)dest_end.u32ptr, sizeof(uint64_t));

	// While end of destination is not reached...
	while (dest.u8ptr < dest_end.u8ptr) {
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
8000671a:	50 6a       	stdsp	sp[0x18],r10
8000671c:	c9 d8       	rjmp	80006856 <flashc_memset64+0x236>
		// Determine if the current destination page has an incomplete end.
		incomplete_flash_page_end = (Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
				Align_down((uint32_t)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;
8000671e:	c3 ff       	rcall	8000659c <flashc_clear_page_buffer>
80006720:	fa e8 00 04 	ld.d	r8,sp[4]
80006724:	fa e9 00 30 	st.d	sp[48],r8
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Determine where the source data will end in the current flash page.
		flash_page_source_end.u64ptr =
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
80006728:	68 08       	ld.w	r8,r4[0x0]

	// While end of destination is not reached...
	while (dest.u8ptr < dest_end.u8ptr) {
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;
8000672a:	00 99       	mov	r9,r0

		// Determine where the source data will end in the current flash page.
		flash_page_source_end.u64ptr =
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
8000672c:	10 45       	or	r5,r8
8000672e:	e0 19 fe 00 	andl	r9,0xfe00

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;

		// If destination does not point to the beginning of the current flash page...
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
80006732:	f1 d0 c0 09 	bfextu	r8,r0,0x0,0x9
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Determine where the source data will end in the current flash page.
		flash_page_source_end.u64ptr =
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
80006736:	f2 cc fe 00 	sub	r12,r9,-512
8000673a:	e2 0c 0d 4c 	min	r12,r1,r12

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;

		// If destination does not point to the beginning of the current flash page...
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
8000673e:	58 08       	cp.w	r8,0
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
80006740:	c3 20       	breq	800067a4 <flashc_memset64+0x184>
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
80006742:	00 9a       	mov	r10,r0
80006744:	51 09       	stdsp	sp[0x40],r9
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
80006746:	12 9b       	mov	r11,r9
80006748:	e0 1a ff f8 	andl	r10,0xfff8
8000674c:	0c 9e       	mov	lr,r6
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
8000674e:	50 07       	stdsp	sp[0x0],r7
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
					tmp.u64ptr++) {
				*tmp.u64ptr = *tmp.u64ptr;
80006750:	c0 58       	rjmp	8000675a <flashc_memset64+0x13a>
80006752:	f0 e6 00 00 	ld.d	r6,r8[0]
80006756:	f0 e7 00 00 	st.d	r8[0],r6
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
8000675a:	16 98       	mov	r8,r11
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
8000675c:	2f 8b       	sub	r11,-8
8000675e:	14 38       	cp.w	r8,r10
80006760:	cf 93       	brcs	80006752 <flashc_memset64+0x132>
80006762:	51 08       	stdsp	sp[0x40],r8
80006764:	1c 96       	mov	r6,lr
					tmp.u64ptr++) {
				*tmp.u64ptr = *tmp.u64ptr;
			}

			// If destination is not 64-bit aligned...
			if (!Test_align((uint32_t)dest.u8ptr, sizeof(uint64_t))) {
80006766:	40 07       	lddsp	r7,sp[0x0]
80006768:	e1 d0 c0 03 	bfextu	r0,r0,0x0,0x3
8000676c:	c1 c0       	breq	800067a4 <flashc_memset64+0x184>
8000676e:	30 0b       	mov	r11,0
80006770:	50 39       	stdsp	sp[0xc],r9
80006772:	f0 0b 00 0e 	add	lr,r8,r11
				// flash page data.
				// This is required by the hardware, even if page erase is not
				// requested, in order to be able to write successfully to erased parts
				// of flash pages that have already been written to.
				for (i = 0; i < Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)); i++) {
					flash_dword.u8[i] = *tmp.u8ptr++;
80006776:	fa c9 ff d0 	sub	r9,sp,-48
8000677a:	1d 8e       	ld.ub	lr,lr[0x0]
8000677c:	f2 0b 0b 0e 	st.b	r9[r11],lr
				// Fill the beginning of the flash double-word buffer with the current
				// flash page data.
				// This is required by the hardware, even if page erase is not
				// requested, in order to be able to write successfully to erased parts
				// of flash pages that have already been written to.
				for (i = 0; i < Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)); i++) {
80006780:	2f fb       	sub	r11,-1
80006782:	00 3b       	cp.w	r11,r0
80006784:	cf 71       	brne	80006772 <flashc_memset64+0x152>
					flash_dword.u8[i] = *tmp.u8ptr++;
				}

				// Align the destination pointer with its 64-bit boundary.
				dest.u64ptr = (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
80006786:	16 08       	add	r8,r11
				// Fill the beginning of the flash double-word buffer with the current
				// flash page data.
				// This is required by the hardware, even if page erase is not
				// requested, in order to be able to write successfully to erased parts
				// of flash pages that have already been written to.
				for (i = 0; i < Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)); i++) {
80006788:	51 1a       	stdsp	sp[0x44],r10
8000678a:	51 08       	stdsp	sp[0x40],r8

				// Align the destination pointer with its 64-bit boundary.
				dest.u64ptr = (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));

				// If the current destination double-word is not the last one...
				if (dest.u64ptr < dest_end.u64ptr) {
8000678c:	40 39       	lddsp	r9,sp[0xc]
8000678e:	02 3a       	cp.w	r10,r1
					// Write the flash double-word buffer to the page buffer and reinitialize it.
					*dest.u64ptr++ = flash_dword.u64;
80006790:	c0 a2       	brcc	800067a4 <flashc_memset64+0x184>
80006792:	14 98       	mov	r8,r10
80006794:	fa ea 00 30 	ld.d	r10,sp[48]
					flash_dword.u64 = source.u64;
80006798:	b1 2a       	st.d	r8++,r10
8000679a:	fa ea 00 04 	ld.d	r10,sp[4]
8000679e:	51 18       	stdsp	sp[0x44],r8
800067a0:	fa eb 00 30 	st.d	sp[48],r10
				}
			}
		}

		// Write the source data to the page buffer with 64-bit alignment.
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
800067a4:	41 18       	lddsp	r8,sp[0x44]
800067a6:	02 9e       	mov	lr,r1
800067a8:	10 1c       	sub	r12,r8
800067aa:	10 9b       	mov	r11,r8
800067ac:	a3 5c       	asr	r12,0x3
800067ae:	18 9a       	mov	r10,r12
800067b0:	c0 68       	rjmp	800067bc <flashc_memset64+0x19c>
800067b2:	d7 03       	nop
800067b4:	fa e0 00 04 	ld.d	r0,sp[4]
800067b8:	20 1a       	sub	r10,1
800067ba:	b7 20       	st.d	r11++,r0
800067bc:	58 0a       	cp.w	r10,0
800067be:	cf b1       	brne	800067b4 <flashc_memset64+0x194>
			*dest.u64ptr++ = source.u64;
800067c0:	f0 0c 00 3c 	add	r12,r8,r12<<0x3
				}
			}
		}

		// Write the source data to the page buffer with 64-bit alignment.
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
800067c4:	51 1c       	stdsp	sp[0x44],r12
			*dest.u64ptr++ = source.u64;
800067c6:	1c 91       	mov	r1,lr
				}
			}
		}

		// Write the source data to the page buffer with 64-bit alignment.
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
800067c8:	40 60       	lddsp	r0,sp[0x18]
800067ca:	00 39       	cp.w	r9,r0
800067cc:	c2 13       	brcs	8000680e <flashc_memset64+0x1ee>
800067ce:	51 06       	stdsp	sp[0x40],r6
800067d0:	58 02       	cp.w	r2,0
800067d2:	c1 10       	breq	800067f4 <flashc_memset64+0x1d4>
			*dest.u64ptr++ = source.u64;
		}

		// If the current destination page has an incomplete end...
		if (incomplete_flash_page_end) {
800067d4:	fa c8 ff d0 	sub	r8,sp,-48
800067d8:	0c 99       	mov	r9,r6
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			{
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;
800067da:	04 08       	add	r8,r2

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
800067dc:	fa ca ff c8 	sub	r10,sp,-56
800067e0:	13 3b       	ld.ub	r11,r9++
800067e2:	10 cb       	st.b	r8++,r11
800067e4:	14 38       	cp.w	r8,r10
800067e6:	cf d1       	brne	800067e0 <flashc_memset64+0x1c0>
{
	return flashc_memset64(dst, src | (uint64_t)src << 32, nbytes, erase);
}


volatile void *flashc_memset64(volatile void *dst, uint64_t src, size_t nbytes, bool erase)
800067e8:	40 7b       	lddsp	r11,sp[0x1c]
800067ea:	51 0b       	stdsp	sp[0x40],r11

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
						flash_dword.u8[i] = *tmp.u8ptr++;
800067ec:	fa e8 00 30 	ld.d	r8,sp[48]
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
800067f0:	b9 28       	st.d	r12++,r8
800067f2:	51 1c       	stdsp	sp[0x44],r12
800067f4:	41 08       	lddsp	r8,sp[0x40]
800067f6:	c0 58       	rjmp	80006800 <flashc_memset64+0x1e0>
						flash_dword.u8[i] = *tmp.u8ptr++;

					// Write the flash double-word buffer to the page buffer.
					*dest.u64ptr++ = flash_dword.u64;
800067f8:	f2 ea 00 00 	ld.d	r10,r9[0]
800067fc:	f2 eb 00 00 	st.d	r9[0],r10
80006800:	10 99       	mov	r9,r8
80006802:	f5 d8 c0 09 	bfextu	r10,r8,0x0,0x9
				}

				// Fill the end of the page buffer with the current flash page data.
				for (; !Test_align((uint32_t)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++) {
					*tmp.u64ptr = *tmp.u64ptr;
80006806:	2f 88       	sub	r8,-8
80006808:	58 0a       	cp.w	r10,0
8000680a:	cf 71       	brne	800067f8 <flashc_memset64+0x1d8>
8000680c:	51 09       	stdsp	sp[0x40],r9
					// Write the flash double-word buffer to the page buffer.
					*dest.u64ptr++ = flash_dword.u64;
				}

				// Fill the end of the page buffer with the current flash page data.
				for (; !Test_align((uint32_t)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++) {
8000680e:	41 10       	lddsp	r0,sp[0x44]
80006810:	30 0a       	mov	r10,0
80006812:	ea 1a 80 80 	orh	r10,0x8080
80006816:	14 30       	cp.w	r0,r10
80006818:	e0 8b 00 15 	brhi	80006842 <flashc_memset64+0x222>
				}
			}
		}

		// If the current flash page is in the flash array...
		if (dest.u8ptr <= AVR32_FLASHC_USER_PAGE) {
8000681c:	40 59       	lddsp	r9,sp[0x14]
8000681e:	58 09       	cp.w	r9,0
80006820:	c0 60       	breq	8000682c <flashc_memset64+0x20c>
80006822:	30 0b       	mov	r11,0
80006824:	3f fc       	mov	r12,-1
80006826:	cc be       	rcall	800065bc <flashc_erase_page>
			// Erase the current page if requested and write it from the page buffer.
			if (erase) {
80006828:	68 08       	ld.w	r8,r4[0x0]
8000682a:	10 45       	or	r5,r8
8000682c:	3f fc       	mov	r12,-1
				flashc_erase_page(-1, false);
8000682e:	cd 9e       	rcall	800065e0 <flashc_write_page>
80006830:	68 08       	ld.w	r8,r4[0x0]
80006832:	10 45       	or	r5,r8
80006834:	06 30       	cp.w	r0,r3
				error_status |= flashc_error_status;
80006836:	c1 03       	brcs	80006856 <flashc_memset64+0x236>
80006838:	30 08       	mov	r8,0
			}
			flashc_write_page(-1);
8000683a:	ea 18 80 80 	orh	r8,0x8080
8000683e:	51 18       	stdsp	sp[0x44],r8
			error_status |= flashc_error_status;
80006840:	c0 b8       	rjmp	80006856 <flashc_memset64+0x236>
80006842:	40 58       	lddsp	r8,sp[0x14]

			// If the end of the flash array is reached, go to the User page.
			if (dest.u8ptr >= flash_array_end.u8ptr) {
80006844:	58 08       	cp.w	r8,0
80006846:	c0 50       	breq	80006850 <flashc_memset64+0x230>
				dest.u8ptr = AVR32_FLASHC_USER_PAGE;
80006848:	30 0c       	mov	r12,0
8000684a:	cd be       	rcall	80006600 <flashc_erase_user_page>
8000684c:	68 08       	ld.w	r8,r4[0x0]
8000684e:	10 45       	or	r5,r8
80006850:	ce 2e       	rcall	80006614 <flashc_write_user_page>
			}
		} else {
			// Erase the User page if requested and write it from the page buffer.
			if (erase) {
80006852:	68 08       	ld.w	r8,r4[0x0]
80006854:	10 45       	or	r5,r8
80006856:	41 10       	lddsp	r0,sp[0x44]
				flashc_erase_user_page(false);
80006858:	0c 30       	cp.w	r0,r6
8000685a:	fe 93 ff 62 	brlo	8000671e <flashc_memset64+0xfe>
				error_status |= flashc_error_status;
8000685e:	e0 68 08 40 	mov	r8,2112
			}
			flashc_write_user_page();
80006862:	0e 9c       	mov	r12,r7
80006864:	91 05       	st.w	r8[0x0],r5
			error_status |= flashc_error_status;
80006866:	2e ed       	sub	sp,-72
80006868:	d8 32       	popm	r0-r7,pc
	dest_end.u16ptr = (uint16_t *)Align_down((uint32_t)dest_end.u8ptr, sizeof(uint16_t));
	dest_end.u32ptr = (uint32_t *)Align_down((uint32_t)dest_end.u16ptr, sizeof(uint32_t));
	dest_end.u64ptr = (uint64_t *)Align_down((uint32_t)dest_end.u32ptr, sizeof(uint64_t));

	// While end of destination is not reached...
	while (dest.u8ptr < dest_end.u8ptr) {
8000686a:	d7 03       	nop

8000686c <flashc_memset32>:
8000686c:	d4 21       	pushm	r4-r7,lr
8000686e:	30 0e       	mov	lr,0
80006870:	16 96       	mov	r6,r11
			error_status |= flashc_error_status;
		}
	}

	// Update the FLASHC error status.
	flashc_error_status = error_status;
80006872:	1c 97       	mov	r7,lr

	// Return the initial destination pointer as the standard memset function does.
	return dst;
}
80006874:	12 98       	mov	r8,r9
			error_status |= flashc_error_status;
		}
	}

	// Update the FLASHC error status.
	flashc_error_status = error_status;
80006876:	0c 9b       	mov	r11,r6

	// Return the initial destination pointer as the standard memset function does.
	return dst;
}
80006878:	14 99       	mov	r9,r10
8000687a:	0e 4b       	or	r11,r7
8000687c:	0e 9a       	mov	r10,r7
8000687e:	0c 4a       	or	r10,r6
80006880:	cd 0e       	rcall	80006620 <flashc_memset64>
80006882:	d8 22       	popm	r4-r7,pc

80006884 <flashc_memset16>:
80006884:	d4 01       	pushm	lr
80006886:	f7 db d2 10 	bfins	r11,r11,0x10,0x10
8000688a:	cf 1f       	rcall	8000686c <flashc_memset32>
8000688c:	d8 02       	popm	pc
8000688e:	d7 03       	nop

80006890 <flashc_memset8>:


volatile void *flashc_memset16(volatile void *dst, uint16_t src, size_t nbytes, bool erase)
{
	return flashc_memset32(dst, src | (uint32_t)src << 16, nbytes, erase);
}
80006890:	d4 01       	pushm	lr
80006892:	f7 eb 10 8b 	or	r11,r11,r11<<0x8
}


volatile void *flashc_memset8(volatile void *dst, uint8_t src, size_t nbytes, bool erase)
{
	return flashc_memset16(dst, src | (uint16_t)src << 8, nbytes, erase);
80006896:	5c 7b       	castu.h	r11
80006898:	cf 6f       	rcall	80006884 <flashc_memset16>
8000689a:	d8 02       	popm	pc

8000689c <flashc_memcpy>:
}
8000689c:	d4 31       	pushm	r0-r7,lr
8000689e:	20 4d       	sub	sp,16
800068a0:	e0 6e ff ff 	mov	lr,65535
	Assert( (((uint8_t *)dst >= AVR32_FLASH)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASH + flashc_get_flash_size())))
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;
800068a4:	ea 1e 80 7f 	orh	lr,0x807f

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));
800068a8:	18 94       	mov	r4,r12
	Assert( (((uint8_t *)dst >= AVR32_FLASH)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASH + flashc_get_flash_size())))
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;
800068aa:	1c 3c       	cp.w	r12,lr
800068ac:	5f b5       	srhi	r5
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
800068ae:	18 97       	mov	r7,r12
	Union64 flash_dword;
	uint8_t i;
	bool b_user_page;
	unsigned int error_status = 0;
	uint8_t* flash_add;
	uint8_t* dest_add=(uint8_t*)dst;
800068b0:	18 92       	mov	r2,r12
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
800068b2:	14 96       	mov	r6,r10
	// Return the initial destination pointer as the standard memset function does.
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
800068b4:	fa cc ff f0 	sub	r12,sp,-16
{
800068b8:	50 19       	stdsp	sp[0x4],r9
	uint8_t i;
	bool b_user_page;
	unsigned int error_status = 0;
	uint8_t* flash_add;
	uint8_t* dest_add=(uint8_t*)dst;
	const uint8_t* src_buf=(const uint8_t*)src;
800068ba:	16 90       	mov	r0,r11
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));
800068bc:	30 01       	mov	r1,0
800068be:	e0 14 fe 00 	andl	r4,0xfe00
800068c2:	e0 63 08 40 	mov	r3,2112

	while (nbytes) {
800068c6:	50 0c       	stdsp	sp[0x0],r12
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
800068c8:	c4 08       	rjmp	80006948 <flashc_memcpy+0xac>
800068ca:	c6 9e       	rcall	8000659c <flashc_clear_page_buffer>
		error_status |= flashc_error_status;
800068cc:	66 08       	ld.w	r8,r3[0x0]
800068ce:	e8 cb fe 00 	sub	r11,r4,-512
800068d2:	10 41       	or	r1,r8
800068d4:	16 9c       	mov	r12,r11
800068d6:	08 98       	mov	r8,r4

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;
800068d8:	f0 ea 00 00 	ld.d	r10,r8[0]
800068dc:	fa c9 ff f8 	sub	r9,sp,-8
800068e0:	fa eb 00 08 	st.d	sp[8],r10
	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));

	while (nbytes) {
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;
800068e4:	10 9a       	mov	r10,r8

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;
800068e6:	18 9b       	mov	r11,r12

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
800068e8:	04 3a       	cp.w	r10,r2
800068ea:	5f 0e       	sreq	lr
800068ec:	58 06       	cp.w	r6,0
800068ee:	5f 1c       	srne	r12
800068f0:	fd ec 00 0c 	and	r12,lr,r12
800068f4:	30 0e       	mov	lr,0
800068f6:	fc 0c 18 00 	cp.b	r12,lr
800068fa:	c0 50       	breq	80006904 <flashc_memcpy+0x68>
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
800068fc:	01 3c       	ld.ub	r12,r0++
	// Return the initial destination pointer as the standard memset function does.
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
800068fe:	2f f2       	sub	r2,-1
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
					dest_add++;
					nbytes--;
80006900:	20 16       	sub	r6,1

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
80006902:	b2 8c       	st.b	r9[0x0],r12
					dest_add++;
					nbytes--;
				}
				flash_add++;
80006904:	2f fa       	sub	r10,-1
80006906:	2f f9       	sub	r9,-1
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
80006908:	40 0c       	lddsp	r12,sp[0x0]
8000690a:	18 39       	cp.w	r9,r12
8000690c:	ce e1       	brne	800068e8 <flashc_memcpy+0x4c>
8000690e:	16 9c       	mov	r12,r11
				}
				flash_add++;
			}

			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
80006910:	fa ea 00 08 	ld.d	r10,sp[8]
80006914:	b1 2a       	st.d	r8++,r10
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
80006916:	18 38       	cp.w	r8,r12
80006918:	ce 01       	brne	800068d8 <flashc_memcpy+0x3c>
8000691a:	e8 c4 fe 00 	sub	r4,r4,-512
			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
		}

		// Erase the current page if requested and write it from the page buffer.
		if (erase) {
8000691e:	40 1a       	lddsp	r10,sp[0x4]
80006920:	58 0a       	cp.w	r10,0
80006922:	c0 b0       	breq	80006938 <flashc_memcpy+0x9c>
			(b_user_page)? flashc_erase_user_page(false) : flashc_erase_page(-1, false);
80006924:	58 05       	cp.w	r5,0
80006926:	c0 40       	breq	8000692e <flashc_memcpy+0x92>
80006928:	30 0c       	mov	r12,0
8000692a:	c6 be       	rcall	80006600 <flashc_erase_user_page>
8000692c:	c0 48       	rjmp	80006934 <flashc_memcpy+0x98>
8000692e:	0a 9b       	mov	r11,r5
80006930:	3f fc       	mov	r12,-1
80006932:	c4 5e       	rcall	800065bc <flashc_erase_page>
80006934:	66 08       	ld.w	r8,r3[0x0]
80006936:	10 41       	or	r1,r8
			error_status |= flashc_error_status;
80006938:	58 05       	cp.w	r5,0
8000693a:	c0 30       	breq	80006940 <flashc_memcpy+0xa4>
		}

		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
8000693c:	c6 ce       	rcall	80006614 <flashc_write_user_page>
8000693e:	c0 38       	rjmp	80006944 <flashc_memcpy+0xa8>
80006940:	3f fc       	mov	r12,-1
80006942:	c4 fe       	rcall	800065e0 <flashc_write_page>
80006944:	66 08       	ld.w	r8,r3[0x0]
80006946:	10 41       	or	r1,r8
80006948:	58 06       	cp.w	r6,0
8000694a:	cc 01       	brne	800068ca <flashc_memcpy+0x2e>
		error_status |= flashc_error_status;
8000694c:	e0 68 08 40 	mov	r8,2112

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));

	while (nbytes) {
80006950:	0e 9c       	mov	r12,r7
80006952:	91 01       	st.w	r8[0x0],r1
		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
		error_status |= flashc_error_status;
	}
	// Update the FLASHC error status.
	flashc_error_status = error_status;
80006954:	2f cd       	sub	sp,-16

	// Return the initial destination pointer as the standard memcpy function does.
	return dst;
}
80006956:	d8 32       	popm	r0-r7,pc

80006958 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80006958:	f8 08 16 05 	lsr	r8,r12,0x5
8000695c:	a9 68       	lsl	r8,0x8
8000695e:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
80006962:	58 1b       	cp.w	r11,1
80006964:	c0 d0       	breq	8000697e <gpio_enable_module_pin+0x26>
80006966:	c0 63       	brcs	80006972 <gpio_enable_module_pin+0x1a>
80006968:	58 2b       	cp.w	r11,2
8000696a:	c0 f0       	breq	80006988 <gpio_enable_module_pin+0x30>
8000696c:	58 3b       	cp.w	r11,3
8000696e:	c1 20       	breq	80006992 <gpio_enable_module_pin+0x3a>
80006970:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80006972:	30 19       	mov	r9,1
80006974:	f2 0c 09 49 	lsl	r9,r9,r12
80006978:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000697a:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
8000697c:	c1 08       	rjmp	8000699c <gpio_enable_module_pin+0x44>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000697e:	f6 0c 09 4b 	lsl	r11,r11,r12
80006982:	91 5b       	st.w	r8[0x14],r11
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80006984:	91 ab       	st.w	r8[0x28],r11
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80006986:	c0 b8       	rjmp	8000699c <gpio_enable_module_pin+0x44>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80006988:	30 19       	mov	r9,1
8000698a:	f2 0c 09 49 	lsl	r9,r9,r12
8000698e:	91 69       	st.w	r8[0x18],r9
80006990:	c0 58       	rjmp	8000699a <gpio_enable_module_pin+0x42>
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80006992:	30 19       	mov	r9,1
80006994:	f2 0c 09 49 	lsl	r9,r9,r12
80006998:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000699a:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
8000699c:	30 19       	mov	r9,1
8000699e:	f2 0c 09 4c 	lsl	r12,r9,r12
800069a2:	91 2c       	st.w	r8[0x8],r12
800069a4:	5e fd       	retal	0
800069a6:	d7 03       	nop

800069a8 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800069a8:	d4 21       	pushm	r4-r7,lr
800069aa:	30 07       	mov	r7,0
800069ac:	18 96       	mov	r6,r12
800069ae:	16 94       	mov	r4,r11
800069b0:	0e 95       	mov	r5,r7
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800069b2:	c0 78       	rjmp	800069c0 <gpio_enable_module+0x18>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800069b4:	6c 1b       	ld.w	r11,r6[0x4]
800069b6:	6c 0c       	ld.w	r12,r6[0x0]
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800069b8:	2f f7       	sub	r7,-1
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
800069ba:	2f 86       	sub	r6,-8
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800069bc:	cc ef       	rcall	80006958 <gpio_enable_module_pin>
800069be:	18 45       	or	r5,r12
800069c0:	08 37       	cp.w	r7,r4
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800069c2:	cf 93       	brcs	800069b4 <gpio_enable_module+0xc>
800069c4:	0a 9c       	mov	r12,r5
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
800069c6:	d8 22       	popm	r4-r7,pc

800069c8 <gpio_enable_gpio_pin>:
800069c8:	30 18       	mov	r8,1
800069ca:	f0 0c 09 48 	lsl	r8,r8,r12
800069ce:	a5 9c       	lsr	r12,0x5
 *            AVR32_PWM_3_PIN for PWM channel 3 can also be used to release
 *            module pins for GPIO.
 */
void gpio_enable_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800069d0:	a9 6c       	lsl	r12,0x8
800069d2:	e0 2c f0 00 	sub	r12,61440
	
	gpio_port->oderc = 1 << (pin & 0x1F);
800069d6:	f9 48 00 48 	st.w	r12[72],r8
	gpio_port->gpers = 1 << (pin & 0x1F);
800069da:	99 18       	st.w	r12[0x4],r8
}
800069dc:	5e fc       	retal	r12

800069de <gpio_get_pin_value>:
 *
 * \return The pin value.
 */
bool gpio_get_pin_value(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800069de:	f8 08 16 05 	lsr	r8,r12,0x5
800069e2:	a9 68       	lsl	r8,0x8
800069e4:	e0 28 f0 00 	sub	r8,61440
	
	return (gpio_port->pvr >> (pin & 0x1F)) & 1;
800069e8:	71 88       	ld.w	r8,r8[0x60]
800069ea:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
800069ee:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800069f2:	5e fc       	retal	r12

800069f4 <gpio_set_gpio_pin>:
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
800069f4:	30 18       	mov	r8,1
800069f6:	f0 0c 09 48 	lsl	r8,r8,r12
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800069fa:	a5 9c       	lsr	r12,0x5
800069fc:	a9 6c       	lsl	r12,0x8
800069fe:	e0 2c f0 00 	sub	r12,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80006a02:	f9 48 00 54 	st.w	r12[84],r8
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
80006a06:	f9 48 00 44 	st.w	r12[68],r8
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80006a0a:	99 18       	st.w	r12[0x4],r8
}
80006a0c:	5e fc       	retal	r12

80006a0e <gpio_clr_gpio_pin>:
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80006a0e:	30 18       	mov	r8,1
80006a10:	f0 0c 09 48 	lsl	r8,r8,r12
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80006a14:	a5 9c       	lsr	r12,0x5
80006a16:	a9 6c       	lsl	r12,0x8
80006a18:	e0 2c f0 00 	sub	r12,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80006a1c:	f9 48 00 58 	st.w	r12[88],r8
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
80006a20:	f9 48 00 44 	st.w	r12[68],r8
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80006a24:	99 18       	st.w	r12[0x4],r8
}
80006a26:	5e fc       	retal	r12

80006a28 <gpio_enable_pin_interrupt>:
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
80006a28:	30 1a       	mov	r10,1
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80006a2a:	f8 08 16 05 	lsr	r8,r12,0x5

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
80006a2e:	f4 0c 09 49 	lsl	r9,r10,r12
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80006a32:	a9 68       	lsl	r8,0x8
80006a34:	e0 28 f0 00 	sub	r8,61440

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
80006a38:	f1 49 00 c4 	st.w	r8[196],r9
static uint32_t gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Configure the edge detector. */
	switch (mode) {
80006a3c:	14 3b       	cp.w	r11,r10
80006a3e:	c0 80       	breq	80006a4e <gpio_enable_pin_interrupt+0x26>
80006a40:	c0 43       	brcs	80006a48 <gpio_enable_pin_interrupt+0x20>
80006a42:	58 2b       	cp.w	r11,2
80006a44:	c0 f1       	brne	80006a62 <gpio_enable_pin_interrupt+0x3a>
80006a46:	c0 98       	rjmp	80006a58 <gpio_enable_pin_interrupt+0x30>
	case GPIO_PIN_CHANGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
80006a48:	f1 49 00 a8 	st.w	r8[168],r9
80006a4c:	c0 38       	rjmp	80006a52 <gpio_enable_pin_interrupt+0x2a>
		gpio_port->imr1c = 1 << (pin & 0x1F);
		break;

	case GPIO_RISING_EDGE:
		gpio_port->imr0s = 1 << (pin & 0x1F);
80006a4e:	f1 49 00 a4 	st.w	r8[164],r9
		gpio_port->imr1c = 1 << (pin & 0x1F);
80006a52:	f1 49 00 b8 	st.w	r8[184],r9
80006a56:	c0 78       	rjmp	80006a64 <gpio_enable_pin_interrupt+0x3c>
		break;

	case GPIO_FALLING_EDGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
80006a58:	f1 49 00 a8 	st.w	r8[168],r9
		gpio_port->imr1s = 1 << (pin & 0x1F);
80006a5c:	f1 49 00 b4 	st.w	r8[180],r9
80006a60:	c0 28       	rjmp	80006a64 <gpio_enable_pin_interrupt+0x3c>
80006a62:	5e fa       	retal	r10
	if (GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode)) {
		return(GPIO_INVALID_ARGUMENT);
	}

	/* Enable interrupt. */
	gpio_port->iers = 1 << (pin & 0x1F);
80006a64:	f1 49 00 94 	st.w	r8[148],r9
80006a68:	5e fd       	retal	0

80006a6a <gpio_get_pin_interrupt_flag>:
 *
 * \return The pin interrupt flag.
 */
bool gpio_get_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80006a6a:	f8 08 16 05 	lsr	r8,r12,0x5
80006a6e:	a9 68       	lsl	r8,0x8
80006a70:	e0 28 f0 00 	sub	r8,61440
	
	return (gpio_port->ifr >> (pin & 0x1F)) & 1;
80006a74:	f0 f8 00 d0 	ld.w	r8,r8[208]
80006a78:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
80006a7c:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80006a80:	5e fc       	retal	r12

80006a82 <gpio_clear_pin_interrupt_flag>:
	gpio_port->ifrc = 1 << (pin & 0x1F);

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
80006a82:	30 18       	mov	r8,1
80006a84:	f0 0c 09 48 	lsl	r8,r8,r12
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80006a88:	a5 9c       	lsr	r12,0x5
80006a8a:	a9 6c       	lsl	r12,0x8
80006a8c:	e0 2c f0 00 	sub	r12,61440
	gpio_port->ifrc = 1 << (pin & 0x1F);

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
80006a90:	f9 48 00 d8 	st.w	r12[216],r8
#endif
}
80006a94:	5e fc       	retal	r12

80006a96 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80006a96:	c0 08       	rjmp	80006a96 <_unhandled_interrupt>

80006a98 <INTC_register_interrupt>:

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80006a98:	f3 db c0 05 	bfextu	r9,r11,0x0,0x5
80006a9c:	fe c8 cb bc 	sub	r8,pc,-13380
80006aa0:	a5 9b       	lsr	r11,0x5
80006aa2:	f0 0b 00 38 	add	r8,r8,r11<<0x3
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80006aa6:	70 18       	ld.w	r8,r8[0x4]
80006aa8:	f0 09 09 2c 	st.w	r8[r9<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80006aac:	58 0a       	cp.w	r10,0
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80006aae:	c0 c1       	brne	80006ac6 <INTC_register_interrupt+0x2e>
80006ab0:	fe 78 08 00 	mov	r8,-63488
80006ab4:	fe c9 d2 b4 	sub	r9,pc,-11596
80006ab8:	fe ca d1 b4 	sub	r10,pc,-11852
80006abc:	f4 09 01 09 	sub	r9,r10,r9
	} else if (int_level == AVR32_INTC_INT1) {
80006ac0:	f0 0b 09 29 	st.w	r8[r11<<0x2],r9
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80006ac4:	5e fc       	retal	r12
80006ac6:	58 1a       	cp.w	r10,1
80006ac8:	c0 91       	brne	80006ada <INTC_register_interrupt+0x42>
80006aca:	fe c8 d2 ca 	sub	r8,pc,-11574
80006ace:	fe c9 d1 bc 	sub	r9,pc,-11844
	} else if (int_level == AVR32_INTC_INT2) {
80006ad2:	f2 08 01 08 	sub	r8,r9,r8
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80006ad6:	bf a8       	sbr	r8,0x1e
80006ad8:	c1 18       	rjmp	80006afa <INTC_register_interrupt+0x62>
80006ada:	fe c8 d2 da 	sub	r8,pc,-11558
80006ade:	58 2a       	cp.w	r10,2
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80006ae0:	c0 71       	brne	80006aee <INTC_register_interrupt+0x56>
80006ae2:	fe c9 d1 c2 	sub	r9,pc,-11838
80006ae6:	f2 08 01 08 	sub	r8,r9,r8
80006aea:	bf b8       	sbr	r8,0x1f
80006aec:	c0 78       	rjmp	80006afa <INTC_register_interrupt+0x62>
80006aee:	fe c9 d1 c0 	sub	r9,pc,-11840
80006af2:	f2 08 01 08 	sub	r8,r9,r8
80006af6:	ea 18 c0 00 	orh	r8,0xc000
80006afa:	fe 79 08 00 	mov	r9,-63488
80006afe:	f2 0b 09 28 	st.w	r9[r11<<0x2],r8
80006b02:	5e fc       	retal	r12

80006b04 <INTC_init_interrupts>:
80006b04:	d4 21       	pushm	r4-r7,lr
80006b06:	fe c8 d3 06 	sub	r8,pc,-11514
80006b0a:	e3 b8 00 01 	mtsr	0x4,r8
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80006b0e:	fe ce d2 0a 	sub	lr,pc,-11766
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80006b12:	fe c9 cc 32 	sub	r9,pc,-13262

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80006b16:	10 1e       	sub	lr,r8
80006b18:	fe cc 00 82 	sub	r12,pc,130
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80006b1c:	30 08       	mov	r8,0
80006b1e:	fe 7b 08 00 	mov	r11,-63488
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80006b22:	c0 e8       	rjmp	80006b3e <INTC_init_interrupts+0x3a>
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80006b24:	72 16       	ld.w	r6,r9[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80006b26:	ec 0a 00 26 	add	r6,r6,r10<<0x2

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80006b2a:	2f fa       	sub	r10,-1
80006b2c:	8d 0c       	st.w	r6[0x0],r12
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80006b2e:	0e 3a       	cp.w	r10,r7
80006b30:	cf a3       	brcs	80006b24 <INTC_init_interrupts+0x20>
80006b32:	f6 08 09 2e 	st.w	r11[r8<<0x2],lr
80006b36:	2f 89       	sub	r9,-8
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80006b38:	2f f8       	sub	r8,-1
80006b3a:	59 28       	cp.w	r8,18
80006b3c:	c0 40       	breq	80006b44 <INTC_init_interrupts+0x40>
80006b3e:	30 0a       	mov	r10,0
80006b40:	72 07       	ld.w	r7,r9[0x0]
80006b42:	cf 6b       	rjmp	80006b2e <INTC_init_interrupts+0x2a>
80006b44:	d8 22       	popm	r4-r7,pc
80006b46:	d7 03       	nop

80006b48 <_get_interrupt_handler>:
80006b48:	e0 68 00 83 	mov	r8,131
80006b4c:	fe 79 08 00 	mov	r9,-63488
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80006b50:	f0 0c 01 0c 	sub	r12,r8,r12
80006b54:	f2 0c 03 28 	ld.w	r8,r9[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80006b58:	f0 ca ff c0 	sub	r10,r8,-64
80006b5c:	f2 0a 03 2c 	ld.w	r12,r9[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80006b60:	58 0c       	cp.w	r12,0
80006b62:	5e 0c       	reteq	r12
		? _int_handler_table[int_grp]._int_line_handler_table[32
80006b64:	fe c9 cc 84 	sub	r9,pc,-13180
80006b68:	f8 0c 12 00 	clz	r12,r12
80006b6c:	f2 08 00 38 	add	r8,r9,r8<<0x3
80006b70:	f8 0c 11 1f 	rsub	r12,r12,31
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80006b74:	70 18       	ld.w	r8,r8[0x4]
80006b76:	f0 0c 03 2c 	ld.w	r12,r8[r12<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80006b7a:	5e fc       	retal	r12

80006b7c <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
80006b7c:	f8 c8 00 01 	sub	r8,r12,1
80006b80:	f0 0b 00 0b 	add	r11,r8,r11
80006b84:	f6 0c 0d 0a 	divu	r10,r11,r12
80006b88:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
80006b8a:	f4 c8 00 01 	sub	r8,r10,1
80006b8e:	e0 48 00 fe 	cp.w	r8,254
80006b92:	e0 88 00 03 	brls	80006b98 <getBaudDiv+0x1c>
80006b96:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
80006b98:	5c 8c       	casts.h	r12
}
80006b9a:	5e fc       	retal	r12

80006b9c <spi_initMaster>:
	return SPI_OK;
}

spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
80006b9c:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
80006b9e:	30 18       	mov	r8,1
	return SPI_OK;
}

spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
80006ba0:	18 99       	mov	r9,r12
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
80006ba2:	f7 3a 00 0d 	ld.ub	r10,r11[13]
80006ba6:	f0 0a 18 00 	cp.b	r10,r8
80006baa:	e0 88 00 04 	brls	80006bb2 <spi_initMaster+0x16>
80006bae:	30 2c       	mov	r12,2
80006bb0:	d8 02       	popm	pc

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
	u_avr32_spi_mr.MR.mstr = 1;
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
	u_avr32_spi_mr.MR.llb = 0;
80006bb2:	30 0a       	mov	r10,0
	if (options->modfdis > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
80006bb4:	e0 68 00 80 	mov	r8,128
80006bb8:	99 08       	st.w	r12[0x0],r8

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
	u_avr32_spi_mr.MR.mstr = 1;
80006bba:	30 1e       	mov	lr,1

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
80006bbc:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.mstr = 1;
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
80006bbe:	f7 3b 00 0d 	ld.ub	r11,r11[13]
	u_avr32_spi_mr.MR.llb = 0;
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
	spi->mr = u_avr32_spi_mr.mr;
80006bc2:	14 9c       	mov	r12,r10
	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
	u_avr32_spi_mr.MR.mstr = 1;
80006bc4:	f1 de d0 01 	bfins	r8,lr,0x0,0x1
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
80006bc8:	f1 db d0 81 	bfins	r8,r11,0x4,0x1
	u_avr32_spi_mr.MR.llb = 0;
80006bcc:	f1 da d0 e1 	bfins	r8,r10,0x7,0x1
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
80006bd0:	30 fa       	mov	r10,15
80006bd2:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
	spi->mr = u_avr32_spi_mr.mr;
80006bd6:	93 18       	st.w	r9[0x4],r8

	return SPI_OK;
}
80006bd8:	d8 02       	popm	pc

80006bda <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
80006bda:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
80006bdc:	30 18       	mov	r8,1
80006bde:	f0 0b 18 00 	cp.b	r11,r8
80006be2:	5f be       	srhi	lr
80006be4:	f0 0a 18 00 	cp.b	r10,r8
80006be8:	5f b8       	srhi	r8
80006bea:	1c 48       	or	r8,lr
80006bec:	c0 30       	breq	80006bf2 <spi_selectionMode+0x18>
80006bee:	30 2c       	mov	r12,2
80006bf0:	d8 02       	popm	pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
80006bf2:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
80006bf4:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80006bf8:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
80006bfc:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
80006c00:	99 18       	st.w	r12[0x4],r8
80006c02:	d8 0a       	popm	pc,r12=0

80006c04 <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80006c04:	78 19       	ld.w	r9,r12[0x4]

	return SPI_OK;
}

spi_status_t spi_selectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80006c06:	18 98       	mov	r8,r12
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80006c08:	ea 19 00 0f 	orh	r9,0xf
80006c0c:	99 19       	st.w	r12[0x4],r9

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
80006c0e:	78 1c       	ld.w	r12,r12[0x4]
80006c10:	e2 1c 00 04 	andl	r12,0x4,COH
80006c14:	c1 00       	breq	80006c34 <spi_selectChip+0x30>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
80006c16:	30 e9       	mov	r9,14
80006c18:	f2 0b 18 00 	cp.b	r11,r9
80006c1c:	e0 8b 00 1a 	brhi	80006c50 <spi_selectChip+0x4c>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
80006c20:	70 19       	ld.w	r9,r8[0x4]
80006c22:	b1 6b       	lsl	r11,0x10
80006c24:	30 0c       	mov	r12,0
80006c26:	ea 1b ff f0 	orh	r11,0xfff0
80006c2a:	e8 1b ff ff 	orl	r11,0xffff
80006c2e:	12 6b       	and	r11,r9
80006c30:	91 1b       	st.w	r8[0x4],r11
80006c32:	5e fc       	retal	r12
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
80006c34:	30 39       	mov	r9,3
80006c36:	f2 0b 18 00 	cp.b	r11,r9
80006c3a:	e0 8b 00 0b 	brhi	80006c50 <spi_selectChip+0x4c>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80006c3e:	70 19       	ld.w	r9,r8[0x4]
80006c40:	2f 0b       	sub	r11,-16
80006c42:	30 1a       	mov	r10,1
80006c44:	f4 0b 09 4b 	lsl	r11,r10,r11
80006c48:	5c db       	com	r11
80006c4a:	12 6b       	and	r11,r9
80006c4c:	91 1b       	st.w	r8[0x4],r11
80006c4e:	5e fc       	retal	r12
80006c50:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
80006c52:	5e fc       	retal	r12

80006c54 <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80006c54:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80006c58:	c0 58       	rjmp	80006c62 <spi_unselectChip+0xe>
		if (!timeout--) {
80006c5a:	58 08       	cp.w	r8,0
80006c5c:	c0 21       	brne	80006c60 <spi_unselectChip+0xc>
80006c5e:	5e ff       	retal	1
80006c60:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80006c62:	78 49       	ld.w	r9,r12[0x10]
80006c64:	ed b9 00 09 	bld	r9,0x9
80006c68:	cf 91       	brne	80006c5a <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80006c6a:	78 18       	ld.w	r8,r12[0x4]
80006c6c:	ea 18 00 0f 	orh	r8,0xf
80006c70:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80006c72:	30 08       	mov	r8,0
80006c74:	ea 18 01 00 	orh	r8,0x100
80006c78:	99 08       	st.w	r12[0x0],r8
80006c7a:	5e fd       	retal	0

80006c7c <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
80006c7c:	d4 31       	pushm	r0-r7,lr
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80006c7e:	30 32       	mov	r2,3
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
80006c80:	16 97       	mov	r7,r11
80006c82:	18 96       	mov	r6,r12
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80006c84:	f7 34 00 0c 	ld.ub	r4,r11[12]
80006c88:	e4 04 18 00 	cp.b	r4,r2
80006c8c:	e0 8b 00 46 	brhi	80006d18 <spi_setupChipReg+0x9c>
			options->stay_act > 1 ||
80006c90:	f7 31 00 0b 	ld.ub	r1,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80006c94:	30 15       	mov	r5,1
80006c96:	ea 01 18 00 	cp.b	r1,r5
80006c9a:	e0 8b 00 3f 	brhi	80006d18 <spi_setupChipReg+0x9c>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
80006c9e:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80006ca2:	30 78       	mov	r8,7
80006ca4:	f0 03 18 00 	cp.b	r3,r8
80006ca8:	e0 88 00 38 	brls	80006d18 <spi_setupChipReg+0x9c>
80006cac:	31 08       	mov	r8,16
80006cae:	f0 03 18 00 	cp.b	r3,r8
80006cb2:	e0 8b 00 33 	brhi	80006d18 <spi_setupChipReg+0x9c>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
80006cb6:	14 9b       	mov	r11,r10
80006cb8:	6e 1c       	ld.w	r12,r7[0x4]
80006cba:	c6 1f       	rcall	80006b7c <getBaudDiv>
80006cbc:	c2 e5       	brlt	80006d18 <spi_setupChipReg+0x9c>

	if (baudDiv < 0) {
80006cbe:	08 9a       	mov	r10,r4
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80006cc0:	ec 1a 00 01 	eorl	r10,0x1
80006cc4:	30 08       	mov	r8,0
	if (baudDiv < 0) {
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
80006cc6:	a1 94       	lsr	r4,0x1
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
80006cc8:	f1 d4 d0 01 	bfins	r8,r4,0x0,0x1
80006ccc:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80006cd0:	ef 3a 00 09 	ld.ub	r10,r7[9]
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80006cd4:	20 83       	sub	r3,8
	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80006cd6:	f1 d1 d0 61 	bfins	r8,r1,0x3,0x1

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80006cda:	0f 89       	ld.ub	r9,r7[0x0]
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;

	switch (options->reg) {
80006cdc:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80006ce0:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
80006ce4:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80006ce8:	ef 3a 00 0a 	ld.ub	r10,r7[10]
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80006cec:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
80006cf0:	ea 09 18 00 	cp.b	r9,r5

	switch (options->reg) {
80006cf4:	c0 c0       	breq	80006d0c <spi_setupChipReg+0x90>
80006cf6:	c0 93       	brcs	80006d08 <spi_setupChipReg+0x8c>
80006cf8:	30 2a       	mov	r10,2
80006cfa:	f4 09 18 00 	cp.b	r9,r10
80006cfe:	c0 90       	breq	80006d10 <spi_setupChipReg+0x94>
80006d00:	e4 09 18 00 	cp.b	r9,r2
80006d04:	c0 a1       	brne	80006d18 <spi_setupChipReg+0x9c>
80006d06:	c0 78       	rjmp	80006d14 <spi_setupChipReg+0x98>
80006d08:	8d c8       	st.w	r6[0x30],r8
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
80006d0a:	c0 68       	rjmp	80006d16 <spi_setupChipReg+0x9a>
80006d0c:	8d d8       	st.w	r6[0x34],r8
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
80006d0e:	c0 48       	rjmp	80006d16 <spi_setupChipReg+0x9a>
80006d10:	8d e8       	st.w	r6[0x38],r8
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80006d12:	c0 28       	rjmp	80006d16 <spi_setupChipReg+0x9a>
80006d14:	8d f8       	st.w	r6[0x3c],r8
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
80006d16:	d8 3a       	popm	r0-r7,pc,r12=0
80006d18:	30 2c       	mov	r12,2
		break;
80006d1a:	d8 32       	popm	r0-r7,pc

80006d1c <spi_enable>:
		}
	}
#endif

	return SPI_OK;
}
80006d1c:	30 18       	mov	r8,1
80006d1e:	99 08       	st.w	r12[0x0],r8
80006d20:	5e fc       	retal	r12

80006d22 <spi_write>:
80006d22:	e0 68 3a 98 	mov	r8,15000

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80006d26:	c0 58       	rjmp	80006d30 <spi_write+0xe>
		if (!timeout--) {
80006d28:	58 08       	cp.w	r8,0
80006d2a:	c0 21       	brne	80006d2e <spi_write+0xc>
80006d2c:	5e ff       	retal	1
80006d2e:	20 18       	sub	r8,1

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80006d30:	78 49       	ld.w	r9,r12[0x10]
80006d32:	ed b9 00 01 	bld	r9,0x1
80006d36:	cf 91       	brne	80006d28 <spi_write+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80006d38:	5c 7b       	castu.h	r11
80006d3a:	99 3b       	st.w	r12[0xc],r11
80006d3c:	5e fd       	retal	0

80006d3e <spi_read>:
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
80006d3e:	e0 68 3a 98 	mov	r8,15000
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80006d42:	c0 58       	rjmp	80006d4c <spi_read+0xe>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
80006d44:	58 08       	cp.w	r8,0
80006d46:	c0 21       	brne	80006d4a <spi_read+0xc>
80006d48:	5e ff       	retal	1
80006d4a:	20 18       	sub	r8,1

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80006d4c:	78 49       	ld.w	r9,r12[0x10]
80006d4e:	e2 19 02 01 	andl	r9,0x201,COH
80006d52:	e0 49 02 01 	cp.w	r9,513
80006d56:	cf 71       	brne	80006d44 <spi_read+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
80006d58:	78 28       	ld.w	r8,r12[0x8]
80006d5a:	30 0c       	mov	r12,0
80006d5c:	b6 08       	st.h	r11[0x0],r8

	return SPI_OK;
}
80006d5e:	5e fc       	retal	r12

80006d60 <tc_init_waveform>:
  return 0;
}


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
80006d60:	d4 01       	pushm	lr
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
80006d62:	76 09       	ld.w	r9,r11[0x0]
80006d64:	58 29       	cp.w	r9,2
80006d66:	e0 88 00 03 	brls	80006d6c <tc_init_waveform+0xc>
80006d6a:	dc 0a       	popm	pc,r12=-1
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80006d6c:	76 18       	ld.w	r8,r11[0x4]
80006d6e:	a5 69       	lsl	r9,0x4
80006d70:	10 9e       	mov	lr,r8
80006d72:	e6 1e c0 00 	andh	lr,0xc000,COH
80006d76:	f2 ca ff ff 	sub	r10,r9,-1
80006d7a:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
80006d7e:	af b9       	sbr	r9,0xf
80006d80:	1c 49       	or	r9,lr
80006d82:	10 9e       	mov	lr,r8
80006d84:	e6 1e 30 00 	andh	lr,0x3000,COH
80006d88:	1c 49       	or	r9,lr
80006d8a:	10 9e       	mov	lr,r8
80006d8c:	e6 1e 0c 00 	andh	lr,0xc00,COH
80006d90:	1c 49       	or	r9,lr
80006d92:	10 9e       	mov	lr,r8
80006d94:	e6 1e 03 00 	andh	lr,0x300,COH
80006d98:	1c 49       	or	r9,lr
80006d9a:	10 9e       	mov	lr,r8
80006d9c:	e6 1e 00 c0 	andh	lr,0xc0,COH
80006da0:	1c 49       	or	r9,lr
80006da2:	10 9e       	mov	lr,r8
80006da4:	e6 1e 00 30 	andh	lr,0x30,COH
80006da8:	1c 49       	or	r9,lr
80006daa:	10 9e       	mov	lr,r8
80006dac:	e6 1e 00 0c 	andh	lr,0xc,COH
80006db0:	1c 49       	or	r9,lr
80006db2:	10 9e       	mov	lr,r8
80006db4:	e6 1e 00 03 	andh	lr,0x3,COH
80006db8:	1c 49       	or	r9,lr
80006dba:	10 9e       	mov	lr,r8
80006dbc:	e2 1e 60 00 	andl	lr,0x6000,COH
80006dc0:	1c 49       	or	r9,lr
80006dc2:	10 9e       	mov	lr,r8
80006dc4:	e2 1e 10 00 	andl	lr,0x1000,COH
80006dc8:	1c 49       	or	r9,lr
80006dca:	10 9e       	mov	lr,r8
80006dcc:	e2 1e 0c 00 	andl	lr,0xc00,COH
80006dd0:	1c 49       	or	r9,lr
80006dd2:	10 9e       	mov	lr,r8
80006dd4:	e2 1e 03 00 	andl	lr,0x300,COH
80006dd8:	1c 49       	or	r9,lr
80006dda:	10 9e       	mov	lr,r8
80006ddc:	e2 1e 00 80 	andl	lr,0x80,COH
80006de0:	10 9b       	mov	r11,r8
80006de2:	1c 49       	or	r9,lr
80006de4:	e2 1b 00 08 	andl	r11,0x8,COH
80006de8:	10 9e       	mov	lr,r8
80006dea:	e2 18 00 30 	andl	r8,0x30,COH
80006dee:	e2 1e 00 40 	andl	lr,0x40,COH
80006df2:	1c 49       	or	r9,lr
80006df4:	f3 e8 10 08 	or	r8,r9,r8
80006df8:	16 48       	or	r8,r11
80006dfa:	f8 0a 09 28 	st.w	r12[r10<<0x2],r8
80006dfe:	d8 0a       	popm	pc,r12=0

80006e00 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80006e00:	58 2b       	cp.w	r11,2
80006e02:	e0 88 00 03 	brls	80006e08 <tc_start+0x8>
80006e06:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
80006e08:	a7 6b       	lsl	r11,0x6
80006e0a:	16 0c       	add	r12,r11
80006e0c:	30 58       	mov	r8,5
80006e0e:	99 08       	st.w	r12[0x0],r8
80006e10:	5e fd       	retal	0

80006e12 <tc_read_sr>:


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80006e12:	58 2b       	cp.w	r11,2
80006e14:	e0 88 00 03 	brls	80006e1a <tc_read_sr+0x8>
80006e18:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  return tc->channel[channel].sr;
80006e1a:	a7 6b       	lsl	r11,0x6
80006e1c:	2e 0b       	sub	r11,-32
80006e1e:	16 0c       	add	r12,r11
80006e20:	78 0c       	ld.w	r12,r12[0x0]
}
80006e22:	5e fc       	retal	r12

80006e24 <tc_write_rc>:


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80006e24:	58 2b       	cp.w	r11,2
80006e26:	e0 88 00 03 	brls	80006e2c <tc_write_rc+0x8>
80006e2a:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
80006e2c:	f6 08 15 04 	lsl	r8,r11,0x4
80006e30:	2f f8       	sub	r8,-1
80006e32:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
80006e36:	ed b8 00 0f 	bld	r8,0xf
80006e3a:	c0 c1       	brne	80006e52 <tc_write_rc+0x2e>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
80006e3c:	a7 6b       	lsl	r11,0x6
80006e3e:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
80006e42:	16 0c       	add	r12,r11
80006e44:	2e 4c       	sub	r12,-28
80006e46:	78 08       	ld.w	r8,r12[0x0]
80006e48:	e0 18 00 00 	andl	r8,0x0
80006e4c:	f3 e8 10 08 	or	r8,r9,r8
80006e50:	99 08       	st.w	r12[0x0],r8

  return value;
80006e52:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
}
80006e56:	5e fc       	retal	r12

80006e58 <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
80006e58:	d4 21       	pushm	r4-r7,lr
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80006e5a:	e1 b9 00 00 	mfsr	r9,0x0

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80006e5e:	58 2b       	cp.w	r11,2
80006e60:	e0 88 00 03 	brls	80006e66 <tc_configure_interrupts+0xe>
80006e64:	dc 2a       	popm	r4-r7,pc,r12=-1
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80006e66:	74 08       	ld.w	r8,r10[0x0]
80006e68:	10 9e       	mov	lr,r8
80006e6a:	e2 1e 00 02 	andl	lr,0x2,COH
80006e6e:	e2 18 00 fd 	andl	r8,0xfd,COH
80006e72:	1c 48       	or	r8,lr
80006e74:	f6 0e 15 06 	lsl	lr,r11,0x6
80006e78:	f8 0e 00 0e 	add	lr,r12,lr
80006e7c:	2d ce       	sub	lr,-36
80006e7e:	9d 08       	st.w	lr[0x0],r8
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
80006e80:	ee 19 00 01 	eorh	r9,0x1
80006e84:	f3 d9 c2 01 	bfextu	r9,r9,0x10,0x1
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
80006e88:	c0 20       	breq	80006e8c <tc_configure_interrupts+0x34>
80006e8a:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80006e8c:	74 08       	ld.w	r8,r10[0x0]
80006e8e:	e0 67 00 80 	mov	r7,128
80006e92:	ed d8 c0 e1 	bfextu	r6,r8,0x7,0x1
80006e96:	f9 b7 01 00 	movne	r7,0
80006e9a:	f5 d8 c0 01 	bfextu	r10,r8,0x0,0x1
80006e9e:	ec 1a 00 01 	eorl	r10,0x1
80006ea2:	ef ea 10 0a 	or	r10,r7,r10
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
80006ea6:	ef d8 c0 c1 	bfextu	r7,r8,0x6,0x1
80006eaa:	f9 b7 00 40 	moveq	r7,64
80006eae:	f9 b7 01 00 	movne	r7,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80006eb2:	0e 4a       	or	r10,r7
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
80006eb4:	ef d8 c0 a1 	bfextu	r7,r8,0x5,0x1
80006eb8:	f9 b7 00 20 	moveq	r7,32
80006ebc:	f9 b7 01 00 	movne	r7,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80006ec0:	0e 4a       	or	r10,r7
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
80006ec2:	ef d8 c0 81 	bfextu	r7,r8,0x4,0x1
80006ec6:	f9 b7 00 10 	moveq	r7,16
80006eca:	f9 b7 01 00 	movne	r7,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80006ece:	0e 4a       	or	r10,r7
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
80006ed0:	ef d8 c0 61 	bfextu	r7,r8,0x3,0x1
80006ed4:	f9 b7 00 08 	moveq	r7,8
80006ed8:	f9 b7 01 00 	movne	r7,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80006edc:	0e 4a       	or	r10,r7
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80006ede:	ef d8 c0 41 	bfextu	r7,r8,0x2,0x1
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
80006ee2:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80006ee6:	58 07       	cp.w	r7,0
80006ee8:	f9 b7 00 04 	moveq	r7,4
80006eec:	f9 b7 01 00 	movne	r7,0
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
80006ef0:	58 08       	cp.w	r8,0
80006ef2:	f9 b8 00 02 	moveq	r8,2
80006ef6:	f9 b8 01 00 	movne	r8,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80006efa:	0e 4a       	or	r10,r7
80006efc:	f5 e8 10 08 	or	r8,r10,r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80006f00:	f6 0e 15 06 	lsl	lr,r11,0x6
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80006f04:	a7 6b       	lsl	r11,0x6
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80006f06:	2e 0e       	sub	lr,-32
80006f08:	f8 0e 00 0e 	add	lr,r12,lr
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80006f0c:	16 0c       	add	r12,r11
80006f0e:	2d 8c       	sub	r12,-40
80006f10:	99 08       	st.w	r12[0x0],r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80006f12:	7c 08       	ld.w	r8,lr[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
80006f14:	58 09       	cp.w	r9,0
80006f16:	c0 31       	brne	80006f1c <tc_configure_interrupts+0xc4>
80006f18:	12 9c       	mov	r12,r9
80006f1a:	d8 22       	popm	r4-r7,pc
80006f1c:	d5 03       	csrf	0x10
80006f1e:	d8 2a       	popm	r4-r7,pc,r12=0

80006f20 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80006f20:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80006f22:	f6 0e 15 04 	lsl	lr,r11,0x4
80006f26:	1c 3a       	cp.w	r10,lr
80006f28:	f9 be 02 10 	movhs	lr,16
80006f2c:	f9 be 03 08 	movlo	lr,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80006f30:	fc 0b 02 4b 	mul	r11,lr,r11
80006f34:	f6 08 16 01 	lsr	r8,r11,0x1
80006f38:	f0 0a 00 3a 	add	r10,r8,r10<<0x3
80006f3c:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80006f40:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80006f44:	f2 c8 00 01 	sub	r8,r9,1
80006f48:	e0 48 ff fe 	cp.w	r8,65534
80006f4c:	e0 88 00 03 	brls	80006f52 <usart_set_async_baudrate+0x32>
80006f50:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80006f52:	78 18       	ld.w	r8,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80006f54:	e8 6b 00 00 	mov	r11,524288
80006f58:	e4 18 ff f7 	andh	r8,0xfff7
80006f5c:	e0 18 fe cf 	andl	r8,0xfecf
80006f60:	59 0e       	cp.w	lr,16
80006f62:	f6 0e 17 10 	movne	lr,r11
80006f66:	f9 be 00 00 	moveq	lr,0
80006f6a:	fd e8 10 08 	or	r8,lr,r8
80006f6e:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80006f70:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80006f74:	f3 ea 11 09 	or	r9,r9,r10<<0x10
80006f78:	99 89       	st.w	r12[0x20],r9
80006f7a:	d8 0a       	popm	pc,r12=0

80006f7c <usart_write_line>:
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80006f7c:	c0 e8       	rjmp	80006f98 <usart_write_line+0x1c>
80006f7e:	e0 68 27 10 	mov	r8,10000
{
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80006f82:	20 18       	sub	r8,1
80006f84:	5b f8       	cp.w	r8,-1
80006f86:	c0 80       	breq	80006f96 <usart_write_line+0x1a>
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80006f88:	78 59       	ld.w	r9,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80006f8a:	ed b9 00 01 	bld	r9,0x1
80006f8e:	cf a1       	brne	80006f82 <usart_write_line+0x6>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80006f90:	f5 da c0 09 	bfextu	r10,r10,0x0,0x9
80006f94:	99 7a       	st.w	r12[0x1c],r10


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
    usart_putchar(usart, *string++);
80006f96:	2f fb       	sub	r11,-1
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80006f98:	17 8a       	ld.ub	r10,r11[0x0]
80006f9a:	58 0a       	cp.w	r10,0
80006f9c:	cf 11       	brne	80006f7e <usart_write_line+0x2>
    usart_putchar(usart, *string++);
}
80006f9e:	5e fc       	retal	r12

80006fa0 <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80006fa0:	e1 b8 00 00 	mfsr	r8,0x0
80006fa4:	ee 18 00 01 	eorh	r8,0x1
80006fa8:	f1 d8 c2 01 	bfextu	r8,r8,0x10,0x1

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80006fac:	c0 20       	breq	80006fb0 <usart_reset+0x10>
80006fae:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80006fb0:	3f f9       	mov	r9,-1
80006fb2:	99 39       	st.w	r12[0xc],r9
  usart->csr;
80006fb4:	78 59       	ld.w	r9,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80006fb6:	58 08       	cp.w	r8,0
80006fb8:	c0 20       	breq	80006fbc <usart_reset+0x1c>
80006fba:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80006fbc:	30 08       	mov	r8,0
80006fbe:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80006fc0:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
80006fc2:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80006fc4:	ea 68 61 0c 	mov	r8,680204
80006fc8:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80006fca:	5e fc       	retal	r12

80006fcc <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80006fcc:	d4 21       	pushm	r4-r7,lr
80006fce:	20 1d       	sub	sp,4
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80006fd0:	50 0a       	stdsp	sp[0x0],r10
              AVR32_USART_CR_RTSDIS_MASK;
}


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80006fd2:	16 96       	mov	r6,r11
80006fd4:	18 97       	mov	r7,r12
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80006fd6:	ce 5f       	rcall	80006fa0 <usart_reset>
80006fd8:	40 0a       	lddsp	r10,sp[0x0]

  // Check input values.
  if (!opt || // Null pointer.
80006fda:	58 06       	cp.w	r6,0
80006fdc:	c5 40       	breq	80007084 <usart_init_rs232+0xb8>
80006fde:	0d c8       	ld.ub	r8,r6[0x4]
      opt->charlength < 5 || opt->charlength > 9 ||
80006fe0:	30 49       	mov	r9,4
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80006fe2:	f2 08 18 00 	cp.b	r8,r9
80006fe6:	e0 88 00 4f 	brls	80007084 <usart_init_rs232+0xb8>
80006fea:	30 95       	mov	r5,9
80006fec:	ea 08 18 00 	cp.b	r8,r5
80006ff0:	e0 8b 00 4a 	brhi	80007084 <usart_init_rs232+0xb8>
80006ff4:	0d d9       	ld.ub	r9,r6[0x5]
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80006ff6:	30 78       	mov	r8,7
80006ff8:	f0 09 18 00 	cp.b	r9,r8
80006ffc:	e0 8b 00 44 	brhi	80007084 <usart_init_rs232+0xb8>
80007000:	8c 39       	ld.sh	r9,r6[0x6]
      opt->stopbits > 2 + 255 ||
80007002:	e0 68 01 01 	mov	r8,257
80007006:	f0 09 19 00 	cp.h	r9,r8
8000700a:	e0 8b 00 3d 	brhi	80007084 <usart_init_rs232+0xb8>
8000700e:	ed 39 00 08 	ld.ub	r9,r6[8]
      opt->channelmode > 3 ||
80007012:	30 38       	mov	r8,3
80007014:	f0 09 18 00 	cp.b	r9,r8
80007018:	e0 8b 00 36 	brhi	80007084 <usart_init_rs232+0xb8>
8000701c:	6c 0b       	ld.w	r11,r6[0x0]
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
8000701e:	0e 9c       	mov	r12,r7
80007020:	c8 0f       	rcall	80006f20 <usart_set_async_baudrate>
80007022:	58 1c       	cp.w	r12,1
80007024:	c3 00       	breq	80007084 <usart_init_rs232+0xb8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80007026:	0d c8       	ld.ub	r8,r6[0x4]
80007028:	ea 08 18 00 	cp.b	r8,r5
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
8000702c:	c0 41       	brne	80007034 <usart_init_rs232+0x68>
8000702e:	6e 18       	ld.w	r8,r7[0x4]
80007030:	b1 b8       	sbr	r8,0x11
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80007032:	c0 58       	rjmp	8000703c <usart_init_rs232+0x70>
80007034:	20 58       	sub	r8,5
80007036:	6e 19       	ld.w	r9,r7[0x4]
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80007038:	f3 e8 10 68 	or	r8,r9,r8<<0x6
8000703c:	8f 18       	st.w	r7[0x4],r8
8000703e:	6e 19       	ld.w	r9,r7[0x4]
80007040:	ed 3a 00 08 	ld.ub	r10,r6[8]
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80007044:	0d d8       	ld.ub	r8,r6[0x5]
80007046:	a9 78       	lsl	r8,0x9
80007048:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
8000704c:	12 48       	or	r8,r9
8000704e:	8f 18       	st.w	r7[0x4],r8
80007050:	30 29       	mov	r9,2
80007052:	8c 38       	ld.sh	r8,r6[0x6]
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80007054:	f2 08 19 00 	cp.h	r8,r9
80007058:	e0 88 00 09 	brls	8000706a <usart_init_rs232+0x9e>
8000705c:	6e 18       	ld.w	r8,r7[0x4]
8000705e:	ad b8       	sbr	r8,0xd
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80007060:	8f 18       	st.w	r7[0x4],r8
80007062:	8c b8       	ld.uh	r8,r6[0x6]
80007064:	20 28       	sub	r8,2
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80007066:	8f a8       	st.w	r7[0x28],r8
80007068:	c0 68       	rjmp	80007074 <usart_init_rs232+0xa8>
8000706a:	6e 19       	ld.w	r9,r7[0x4]
8000706c:	5c 78       	castu.h	r8
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8000706e:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
80007072:	8f 18       	st.w	r7[0x4],r8
80007074:	6e 18       	ld.w	r8,r7[0x4]
80007076:	e0 18 ff f0 	andl	r8,0xfff0

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8000707a:	8f 18       	st.w	r7[0x4],r8
8000707c:	30 0c       	mov	r12,0
8000707e:	35 08       	mov	r8,80
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80007080:	8f 08       	st.w	r7[0x0],r8
80007082:	c0 28       	rjmp	80007086 <usart_init_rs232+0xba>
80007084:	30 1c       	mov	r12,1
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80007086:	2f fd       	sub	sp,-4
80007088:	d8 22       	popm	r4-r7,pc
}
8000708a:	d7 03       	nop

8000708c <uhd_get_speed>:
	cpu_irq_restore(flags);
}

uhd_speed_t uhd_get_speed(void)
{
	switch (uhd_get_speed_mode()) {
8000708c:	fe 68 08 04 	mov	r8,-129020
80007090:	70 08       	ld.w	r8,r8[0x0]
80007092:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
80007096:	58 38       	cp.w	r8,3
80007098:	c0 21       	brne	8000709c <uhd_get_speed+0x10>
8000709a:	5e fd       	retal	0
8000709c:	fe c9 d1 2c 	sub	r9,pc,-11988
800070a0:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]

	default:
		Assert(false);
		return UHD_SPEED_LOW;
	}
}
800070a4:	5e fc       	retal	r12
800070a6:	d7 03       	nop

800070a8 <uhd_send_reset>:
	return uhd_get_microsof_number();
}

void uhd_send_reset(uhd_callback_reset_t callback)
{
	uhd_reset_callback = callback;
800070a8:	e0 69 08 ec 	mov	r9,2284
	uhd_start_reset();
800070ac:	93 0c       	st.w	r9[0x0],r12
800070ae:	fe 68 04 00 	mov	r8,-130048
800070b2:	70 09       	ld.w	r9,r8[0x0]
800070b4:	a9 b9       	sbr	r9,0x9
}
800070b6:	91 09       	st.w	r8[0x0],r9
800070b8:	5e fc       	retal	r12
800070ba:	d7 03       	nop

800070bc <uhd_suspend>:

void uhd_suspend(void)
{
800070bc:	d4 01       	pushm	lr
	if (uhd_ctrl_request_timeout) {
800070be:	e0 68 1c f0 	mov	r8,7408
800070c2:	90 08       	ld.sh	r8,r8[0x0]
800070c4:	58 08       	cp.w	r8,0
		// Delay suspend after setup requests
		uhd_b_suspend_requested = true;
800070c6:	c0 50       	breq	800070d0 <uhd_suspend+0x14>
800070c8:	30 19       	mov	r9,1
800070ca:	e0 68 09 6b 	mov	r8,2411
		return;
800070ce:	c1 d8       	rjmp	80007108 <uhd_suspend+0x4c>
800070d0:	fe 69 05 c4 	mov	r9,-129596
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
		uhd_freeze_pipe(pipe);
800070d4:	10 9a       	mov	r10,r8
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
800070d6:	e2 6c 00 00 	mov	r12,131072
		uhd_freeze_pipe(pipe);
800070da:	72 0b       	ld.w	r11,r9[0x0]
800070dc:	93 cc       	st.w	r9[0x30],r12
{
	uhd_reset_callback = callback;
	uhd_start_reset();
}

void uhd_suspend(void)
800070de:	f2 ce ff d0 	sub	lr,r9,-48
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
800070e2:	2f f8       	sub	r8,-1
		uhd_freeze_pipe(pipe);
800070e4:	ee 1b 00 02 	eorh	r11,0x2
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
800070e8:	2f c9       	sub	r9,-4
800070ea:	f7 db c2 21 	bfextu	r11,r11,0x11,0x1
800070ee:	f6 08 09 4b 	lsl	r11,r11,r8
800070f2:	f7 ea 10 0a 	or	r10,r11,r10
		uhd_b_suspend_requested = true;
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
800070f6:	5c 5a       	castu.b	r10
800070f8:	58 68       	cp.w	r8,6
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
		uhd_freeze_pipe(pipe);
	}
	// Wait three SOFs before entering in suspend state
	uhd_suspend_start = 3;
800070fa:	cf 01       	brne	800070da <uhd_suspend+0x1e>
		uhd_b_suspend_requested = true;
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
800070fc:	e0 68 09 69 	mov	r8,2409
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
		uhd_freeze_pipe(pipe);
	}
	// Wait three SOFs before entering in suspend state
	uhd_suspend_start = 3;
80007100:	30 39       	mov	r9,3
80007102:	b0 8a       	st.b	r8[0x0],r10
80007104:	e0 68 09 68 	mov	r8,2408
80007108:	b0 89       	st.b	r8[0x0],r9
8000710a:	d8 02       	popm	pc

8000710c <uhd_ctrl_phase_data_out>:
8000710c:	d4 21       	pushm	r4-r7,lr
8000710e:	e0 68 1c e4 	mov	r8,7396
80007112:	e0 6b 1c e0 	mov	r11,7392
	uint8_t *ptr_ep_data;
	uint8_t ep_ctrl_size;

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_OUT;

	if (uhd_ctrl_nb_trans == uhd_ctrl_request_first->req.wLength) {
80007116:	70 0a       	ld.w	r10,r8[0x0]
static void uhd_ctrl_phase_data_out(void)
{
	uint8_t *ptr_ep_data;
	uint8_t ep_ctrl_size;

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_OUT;
80007118:	30 19       	mov	r9,1

	if (uhd_ctrl_nb_trans == uhd_ctrl_request_first->req.wLength) {
8000711a:	e0 68 1c e8 	mov	r8,7400
8000711e:	97 09       	st.w	r11[0x0],r9
80007120:	90 0c       	ld.sh	r12,r8[0x0]
80007122:	15 fe       	ld.ub	lr,r10[0x7]
80007124:	f5 38 00 08 	ld.ub	r8,r10[8]
80007128:	f1 ee 10 88 	or	r8,r8,lr<<0x8
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_IN);
8000712c:	f0 0c 19 00 	cp.h	r12,r8
80007130:	c1 91       	brne	80007162 <uhd_ctrl_phase_data_out+0x56>
80007132:	fe 6a 05 00 	mov	r10,-129792
80007136:	74 08       	ld.w	r8,r10[0x0]
80007138:	e0 18 fc ff 	andl	r8,0xfcff
	uhd_ack_in_received(0);
8000713c:	a9 a8       	sbr	r8,0x8
8000713e:	95 08       	st.w	r10[0x0],r8
	uhd_ack_short_packet(0);
80007140:	fe 68 05 60 	mov	r8,-129696
80007144:	91 09       	st.w	r8[0x0],r9
	uhd_enable_in_received_interrupt(0);
80007146:	e0 6a 00 80 	mov	r10,128
8000714a:	91 0a       	st.w	r8[0x0],r10
	uhd_ack_fifocon(0);
8000714c:	fe 68 05 f0 	mov	r8,-129552
80007150:	91 09       	st.w	r8[0x0],r9
80007152:	e0 69 40 00 	mov	r9,16384
 * \internal
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
80007156:	fe 68 06 20 	mov	r8,-129504
8000715a:	91 09       	st.w	r8[0x0],r9
		// End of DATA phase
		uhd_ctrl_phase_zlp_in();
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
8000715c:	30 39       	mov	r9,3
8000715e:	97 09       	st.w	r11[0x0],r9
80007160:	c7 a8       	rjmp	80007254 <uhd_ctrl_phase_data_out+0x148>
80007162:	f5 09 00 10 	ld.sh	r9,r10[16]
80007166:	30 08       	mov	r8,0
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
				|| !uhd_ctrl_request_first->callback_run(
80007168:	f0 09 19 00 	cp.h	r9,r8
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
8000716c:	c2 91       	brne	800071be <uhd_ctrl_phase_data_out+0xb2>
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
8000716e:	74 58       	ld.w	r8,r10[0x14]
80007170:	58 08       	cp.w	r8,0
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
80007172:	c0 b0       	breq	80007188 <uhd_ctrl_phase_data_out+0x7c>
80007174:	fe 69 04 24 	mov	r9,-130012
80007178:	f4 cb ff f4 	sub	r11,r10,-12
8000717c:	72 0c       	ld.w	r12,r9[0x0]
8000717e:	2f 0a       	sub	r10,-16
80007180:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_IN);
80007184:	5d 18       	icall	r8
80007186:	c1 c1       	brne	800071be <uhd_ctrl_phase_data_out+0xb2>
80007188:	fe 69 05 00 	mov	r9,-129792
8000718c:	72 08       	ld.w	r8,r9[0x0]
8000718e:	e0 18 fc ff 	andl	r8,0xfcff
	uhd_ack_in_received(0);
80007192:	a9 a8       	sbr	r8,0x8
80007194:	93 08       	st.w	r9[0x0],r8
80007196:	fe 69 05 60 	mov	r9,-129696
	uhd_ack_short_packet(0);
8000719a:	30 18       	mov	r8,1
8000719c:	93 08       	st.w	r9[0x0],r8
	uhd_enable_in_received_interrupt(0);
8000719e:	e0 6a 00 80 	mov	r10,128
800071a2:	93 0a       	st.w	r9[0x0],r10
	uhd_ack_fifocon(0);
800071a4:	fe 69 05 f0 	mov	r9,-129552
800071a8:	93 08       	st.w	r9[0x0],r8
800071aa:	e0 69 40 00 	mov	r9,16384
 * \internal
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
800071ae:	fe 68 06 20 	mov	r8,-129504
800071b2:	91 09       	st.w	r8[0x0],r9
800071b4:	30 3a       	mov	r10,3
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
800071b6:	e0 69 1c e0 	mov	r9,7392
800071ba:	93 0a       	st.w	r9[0x0],r10
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
800071bc:	c4 c8       	rjmp	80007254 <uhd_ctrl_phase_data_out+0x148>
800071be:	fe 69 05 00 	mov	r9,-129792
800071c2:	72 06       	ld.w	r6,r9[0x0]
800071c4:	72 08       	ld.w	r8,r9[0x0]
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
800071c6:	e0 18 fc ff 	andl	r8,0xfcff
800071ca:	a9 b8       	sbr	r8,0x9
800071cc:	93 08       	st.w	r9[0x0],r8
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
800071ce:	30 88       	mov	r8,8
800071d0:	30 29       	mov	r9,2
800071d2:	ed d6 c0 83 	bfextu	r6,r6,0x4,0x3
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
800071d6:	30 0a       	mov	r10,0

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
800071d8:	ea 1a d0 00 	orh	r10,0xd000
	ep_ctrl_size = uhd_get_pipe_size(0);
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
800071dc:	f0 06 09 46 	lsl	r6,r8,r6
800071e0:	e0 6e 1c e4 	mov	lr,7396
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
800071e4:	fe 68 05 60 	mov	r8,-129696
800071e8:	5c 56       	castu.b	r6
			&& ep_ctrl_size && uhd_ctrl_request_first->payload_size) {
		*ptr_ep_data++ = *uhd_ctrl_request_first->payload++;
800071ea:	91 09       	st.w	r8[0x0],r9
800071ec:	30 0c       	mov	r12,0
800071ee:	e0 69 1c e8 	mov	r9,7400
		uhd_ctrl_nb_trans++;
800071f2:	30 07       	mov	r7,0
800071f4:	c0 e8       	rjmp	80007210 <uhd_ctrl_phase_data_out+0x104>
800071f6:	70 3b       	ld.w	r11,r8[0xc]
		ep_ctrl_size--;
		uhd_ctrl_request_first->payload_size--;
800071f8:	17 35       	ld.ub	r5,r11++
800071fa:	14 c5       	st.b	r10++,r5
800071fc:	91 3b       	st.w	r8[0xc],r11
800071fe:	92 08       	ld.sh	r8,r9[0x0]
80007200:	2f f8       	sub	r8,-1
80007202:	b2 08       	st.h	r9[0x0],r8

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
80007204:	7c 08       	ld.w	r8,lr[0x0]
80007206:	f1 0b 00 10 	ld.sh	r11,r8[16]
8000720a:	20 1b       	sub	r11,1
8000720c:	f1 5b 00 10 	st.h	r8[16],r11
80007210:	92 05       	ld.sh	r5,r9[0x0]
80007212:	7c 08       	ld.w	r8,lr[0x0]
80007214:	11 f4       	ld.ub	r4,r8[0x7]
80007216:	f1 3b 00 08 	ld.ub	r11,r8[8]
8000721a:	f7 e4 10 8b 	or	r11,r11,r4<<0x8
8000721e:	f6 05 19 00 	cp.h	r5,r11
80007222:	5f 3b       	srlo	r11
80007224:	ec 0a 01 05 	sub	r5,r6,r10
80007228:	f8 05 18 00 	cp.b	r5,r12
			&& ep_ctrl_size && uhd_ctrl_request_first->payload_size) {
8000722c:	5f 15       	srne	r5
8000722e:	eb eb 00 0b 	and	r11,r5,r11
80007232:	f8 0b 18 00 	cp.b	r11,r12
		*ptr_ep_data++ = *uhd_ctrl_request_first->payload++;
		uhd_ctrl_nb_trans++;
		ep_ctrl_size--;
		uhd_ctrl_request_first->payload_size--;
	}
	uhd_enable_out_ready_interrupt(0);
80007236:	c0 60       	breq	80007242 <uhd_ctrl_phase_data_out+0x136>
80007238:	f1 0b 00 10 	ld.sh	r11,r8[16]
8000723c:	ee 0b 19 00 	cp.h	r11,r7
	uhd_ack_fifocon(0);
80007240:	cd b1       	brne	800071f6 <uhd_ctrl_phase_data_out+0xea>
80007242:	30 29       	mov	r9,2
80007244:	fe 68 05 f0 	mov	r8,-129552
	uhd_unfreeze_pipe(0);
80007248:	91 09       	st.w	r8[0x0],r9
8000724a:	fe 68 06 20 	mov	r8,-129504
8000724e:	e0 69 40 00 	mov	r9,16384
80007252:	91 09       	st.w	r8[0x0],r9
80007254:	e2 69 00 00 	mov	r9,131072
80007258:	91 09       	st.w	r8[0x0],r9
8000725a:	d8 22       	popm	r4-r7,pc

8000725c <uhd_get_pipe>:
 * \param endp  Endpoint number
 *
 * \return Pipe number
 */
static uint8_t uhd_get_pipe(usb_add_t add, usb_ep_t endp)
{
8000725c:	d4 31       	pushm	r0-r7,lr
8000725e:	fe 6a 05 00 	mov	r10,-129792
80007262:	18 98       	mov	r8,r12
80007264:	30 09       	mov	r9,0
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80007266:	fe 64 00 00 	mov	r4,-131072
8000726a:	30 15       	mov	r5,1
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
8000726c:	37 f6       	mov	r6,127
			continue;
		}
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
8000726e:	e0 67 00 80 	mov	r7,128
{
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80007272:	e8 f2 04 1c 	ld.w	r2,r4[1052]
 * \param endp  Endpoint number
 *
 * \return Pipe number
 */
static uint8_t uhd_get_pipe(usb_add_t add, usb_ep_t endp)
{
80007276:	f9 d9 c0 08 	bfextu	r12,r9,0x0,0x8
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
8000727a:	ea 09 09 41 	lsl	r1,r5,r9
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
8000727e:	18 9e       	mov	lr,r12
			continue;
		}
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
80007280:	f8 c3 ff ff 	sub	r3,r12,-1
	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80007284:	e2 1e 00 fc 	andl	lr,0xfc,COH
{
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80007288:	e3 e2 00 02 	and	r2,r1,r2
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
8000728c:	e0 3e fb dc 	sub	lr,130012
{
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80007290:	58 02       	cp.w	r2,0
80007292:	c1 d0       	breq	800072cc <uhd_get_pipe+0x70>
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80007294:	7c 02       	ld.w	r2,lr[0x0]
80007296:	fd d9 c0 02 	bfextu	lr,r9,0x0,0x2
8000729a:	a3 7e       	lsl	lr,0x3
8000729c:	ec 0e 09 4e 	lsl	lr,r6,lr
800072a0:	1c 62       	and	r2,lr
800072a2:	5c 9e       	brev	lr
800072a4:	fc 0e 12 00 	clz	lr,lr
800072a8:	e4 0e 0a 4e 	lsr	lr,r2,lr
800072ac:	1c 38       	cp.w	r8,lr
800072ae:	c0 f1       	brne	800072cc <uhd_get_pipe+0x70>
			continue;
		}
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
800072b0:	74 02       	ld.w	r2,r10[0x0]
800072b2:	74 0e       	ld.w	lr,r10[0x0]
800072b4:	e5 d2 c2 04 	bfextu	r2,r2,0x10,0x4
800072b8:	fd de c1 02 	bfextu	lr,lr,0x8,0x2
800072bc:	58 1e       	cp.w	lr,1
800072be:	ee 0e 17 00 	moveq	lr,r7
800072c2:	f9 be 01 00 	movne	lr,0
800072c6:	04 4e       	or	lr,r2
800072c8:	1c 3b       	cp.w	r11,lr
800072ca:	c0 70       	breq	800072d8 <uhd_get_pipe+0x7c>
800072cc:	f9 d3 c0 08 	bfextu	r12,r3,0x0,0x8
800072d0:	2f f9       	sub	r9,-1
800072d2:	2f ca       	sub	r10,-4
static uint8_t uhd_get_pipe(usb_add_t add, usb_ep_t endp)
{
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
800072d4:	58 79       	cp.w	r9,7
800072d6:	cc e1       	brne	80007272 <uhd_get_pipe+0x16>
			continue;
		}
		break;
	}
	return pipe;
}
800072d8:	d8 32       	popm	r0-r7,pc
800072da:	d7 03       	nop

800072dc <uhd_pipe_finish_job>:
 *
 * \param pipe   Pipe number
 * \param status Status of the transfer
 */
static void uhd_pipe_finish_job(uint8_t pipe, uhd_trans_status_t status)
{
800072dc:	d4 21       	pushm	r4-r7,lr
	uhd_pipe_job_t *ptr_job;

	// Get job corresponding at endpoint
	ptr_job = &uhd_pipe_job[pipe - 1];
800072de:	e0 68 08 f0 	mov	r8,2288
800072e2:	f8 c9 00 01 	sub	r9,r12,1
800072e6:	16 9a       	mov	r10,r11
800072e8:	f2 09 00 29 	add	r9,r9,r9<<0x2
800072ec:	f0 09 00 29 	add	r9,r8,r9<<0x2
	if (ptr_job->busy == false) {
800072f0:	72 08       	ld.w	r8,r9[0x0]
800072f2:	58 08       	cp.w	r8,0
		return; // No job running
	}
	ptr_job->busy = false;
800072f4:	c2 f4       	brge	80007352 <uhd_pipe_finish_job+0x76>
800072f6:	30 0b       	mov	r11,0
800072f8:	f1 db d3 e1 	bfins	r8,r11,0x1f,0x1
	if (NULL == ptr_job->call_end) {
800072fc:	93 08       	st.w	r9[0x0],r8
800072fe:	72 48       	ld.w	r8,r9[0x10]
80007300:	58 08       	cp.w	r8,0
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
			uhd_get_pipe_endpoint_address(pipe),
80007302:	c2 80       	breq	80007352 <uhd_pipe_finish_job+0x76>
80007304:	f8 0e 15 02 	lsl	lr,r12,0x2
80007308:	e0 3e fb 00 	sub	lr,129792
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_end) {
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
8000730c:	ef dc c0 02 	bfextu	r7,r12,0x0,0x2
80007310:	7c 06       	ld.w	r6,lr[0x0]
80007312:	e2 1c 03 fc 	andl	r12,0x3fc,COH
80007316:	7c 0b       	ld.w	r11,lr[0x0]
80007318:	e0 3c fb dc 	sub	r12,130012
8000731c:	fd d6 c2 04 	bfextu	lr,r6,0x10,0x4
80007320:	a3 77       	lsl	r7,0x3
80007322:	f7 db c1 02 	bfextu	r11,r11,0x8,0x2
80007326:	e0 66 00 80 	mov	r6,128
8000732a:	58 1b       	cp.w	r11,1
8000732c:	ec 0b 17 00 	moveq	r11,r6
80007330:	f9 bb 01 00 	movne	r11,0
80007334:	1c 4b       	or	r11,lr
80007336:	78 0e       	ld.w	lr,r12[0x0]
80007338:	37 fc       	mov	r12,127
8000733a:	f8 07 09 4c 	lsl	r12,r12,r7
8000733e:	f9 ee 00 0e 	and	lr,r12,lr
80007342:	72 39       	ld.w	r9,r9[0xc]
80007344:	5c 9c       	brev	r12
80007346:	f8 0c 12 00 	clz	r12,r12
8000734a:	fc 0c 0a 4c 	lsr	r12,lr,r12
8000734e:	5c 5c       	castu.b	r12
80007350:	5d 18       	icall	r8
80007352:	d8 22       	popm	r4-r7,pc

80007354 <uhd_ep_abort_pipe>:
80007354:	d4 01       	pushm	lr
80007356:	fe 68 00 00 	mov	r8,-131072
 * \param status Reason of abort
 */
static void uhd_ep_abort_pipe(uint8_t pipe, uhd_trans_status_t status)
{
	// Stop transfer
	uhd_reset_pipe(pipe);
8000735a:	e0 7a 00 00 	mov	r10,65536
8000735e:	f0 fe 04 1c 	ld.w	lr,r8[1052]
80007362:	f4 0c 09 4a 	lsl	r10,r10,r12
80007366:	f5 ee 10 0e 	or	lr,r10,lr
8000736a:	5c da       	com	r10
8000736c:	f1 4e 04 1c 	st.w	r8[1052],lr
80007370:	f0 fe 04 1c 	ld.w	lr,r8[1052]
80007374:	1c 6a       	and	r10,lr
80007376:	f1 4a 04 1c 	st.w	r8[1052],r10

	// Autoswitch bank and interrupts has been reseted, then re-enable it
	uhd_enable_pipe_bank_autoswitch(pipe);
8000737a:	f8 08 15 02 	lsl	r8,r12,0x2
8000737e:	fe 6a 05 00 	mov	r10,-129792
80007382:	f0 0a 00 0e 	add	lr,r8,r10
80007386:	7c 0a       	ld.w	r10,lr[0x0]
80007388:	ab aa       	sbr	r10,0xa
8000738a:	9d 0a       	st.w	lr[0x0],r10
	uhd_enable_stall_interrupt(pipe);
8000738c:	fe 6e 05 f0 	mov	lr,-129552
80007390:	f0 0e 00 0a 	add	r10,r8,lr
80007394:	34 0e       	mov	lr,64
80007396:	95 0e       	st.w	r10[0x0],lr
	uhd_enable_pipe_error_interrupt(pipe);

	uhd_disable_out_ready_interrupt(pipe);
80007398:	e0 38 f9 e0 	sub	r8,129504
	uhd_reset_pipe(pipe);

	// Autoswitch bank and interrupts has been reseted, then re-enable it
	uhd_enable_pipe_bank_autoswitch(pipe);
	uhd_enable_stall_interrupt(pipe);
	uhd_enable_pipe_error_interrupt(pipe);
8000739c:	30 8e       	mov	lr,8
8000739e:	95 0e       	st.w	r10[0x0],lr

	uhd_disable_out_ready_interrupt(pipe);
	uhd_pipe_dma_set_control(pipe, 0);
800073a0:	30 09       	mov	r9,0
	// Autoswitch bank and interrupts has been reseted, then re-enable it
	uhd_enable_pipe_bank_autoswitch(pipe);
	uhd_enable_stall_interrupt(pipe);
	uhd_enable_pipe_error_interrupt(pipe);

	uhd_disable_out_ready_interrupt(pipe);
800073a2:	30 2a       	mov	r10,2
800073a4:	91 0a       	st.w	r8[0x0],r10
	uhd_pipe_dma_set_control(pipe, 0);
800073a6:	f8 08 15 04 	lsl	r8,r12,0x4
800073aa:	e0 38 f9 00 	sub	r8,129280
800073ae:	91 29       	st.w	r8[0x8],r9
	uhd_pipe_finish_job(pipe, status);
800073b0:	c9 6f       	rcall	800072dc <uhd_pipe_finish_job>
800073b2:	d8 02       	popm	pc

800073b4 <uhd_pipe_trans_complet>:
}
800073b4:	d4 31       	pushm	r0-r7,lr
800073b6:	e0 69 08 f0 	mov	r9,2288
800073ba:	f8 c8 00 01 	sub	r8,r12,1
	iram_size_t max_trans;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &uhd_pipe_job[pipe - 1];
800073be:	f0 08 00 28 	add	r8,r8,r8<<0x2
800073c2:	f2 08 00 28 	add	r8,r9,r8<<0x2

	if (!ptr_job->busy) {
800073c6:	70 09       	ld.w	r9,r8[0x0]
800073c8:	58 09       	cp.w	r9,0
800073ca:	e0 84 00 cb 	brge	80007560 <uhd_pipe_trans_complet+0x1ac>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
800073ce:	70 3e       	ld.w	lr,r8[0xc]
800073d0:	70 2a       	ld.w	r10,r8[0x8]
800073d2:	14 3e       	cp.w	lr,r10
800073d4:	e0 80 00 9e 	breq	80007510 <uhd_pipe_trans_complet+0x15c>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
		max_trans = UHD_PIPE_MAX_TRANS;
		if (uhd_is_pipe_in(pipe)) {
800073d8:	fe 6b 05 00 	mov	r11,-129792
800073dc:	f8 07 15 02 	lsl	r7,r12,0x2
800073e0:	ee 0b 00 09 	add	r9,r7,r11
800073e4:	72 0b       	ld.w	r11,r9[0x0]
800073e6:	f7 db c1 02 	bfextu	r11,r11,0x8,0x2
800073ea:	58 1b       	cp.w	r11,1
			// 256 is the maximum of IN requests via UPINRQ
			if ((256L*uhd_get_pipe_size(pipe))<UHD_PIPE_MAX_TRANS) {
800073ec:	c1 51       	brne	80007416 <uhd_pipe_trans_complet+0x62>
800073ee:	72 0b       	ld.w	r11,r9[0x0]
800073f0:	30 86       	mov	r6,8
800073f2:	f7 db c0 83 	bfextu	r11,r11,0x4,0x3
800073f6:	ec 0b 09 4b 	lsl	r11,r6,r11
800073fa:	f6 06 09 4b 	lsl	r11,r11,r6
800073fe:	e0 4b ff ff 	cp.w	r11,65535
80007402:	e0 89 00 0a 	brgt	80007416 <uhd_pipe_trans_complet+0x62>
				 max_trans = 256L * uhd_get_pipe_size(pipe);
80007406:	72 0b       	ld.w	r11,r9[0x0]
80007408:	f7 db c0 83 	bfextu	r11,r11,0x4,0x3
8000740c:	ec 0b 09 4b 	lsl	r11,r6,r11
80007410:	f6 06 09 4b 	lsl	r11,r11,r6
80007414:	c0 38       	rjmp	8000741a <uhd_pipe_trans_complet+0x66>
80007416:	e0 7b 00 00 	mov	r11,65536
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
8000741a:	1c 1a       	sub	r10,lr
8000741c:	14 3b       	cp.w	r11,r10
8000741e:	f6 0a 17 80 	movls	r10,r11
			// The USB hardware supports a maximum
			// transfer size of UHD_PIPE_MAX_TRANS Bytes
			next_trans = max_trans;
		}

		if (next_trans == UHD_PIPE_MAX_TRANS) {
80007422:	e0 5a 00 00 	cp.w	r10,65536
80007426:	c0 31       	brne	8000742c <uhd_pipe_trans_complet+0x78>
80007428:	30 0b       	mov	r11,0
			// Set 0 to transfer the maximum
			uhd_dma_ctrl = (0 <<
					AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		} else {
			uhd_dma_ctrl = (next_trans <<
8000742a:	c0 38       	rjmp	80007430 <uhd_pipe_trans_complet+0x7c>
8000742c:	f4 0b 15 10 	lsl	r11,r10,0x10
					AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		}

		if (uhd_is_pipe_out(pipe)) {
80007430:	72 0e       	ld.w	lr,r9[0x0]
80007432:	fd de c1 02 	bfextu	lr,lr,0x8,0x2
80007436:	58 2e       	cp.w	lr,2
			if (0 != next_trans % uhd_get_pipe_size(pipe)) {
80007438:	c1 21       	brne	8000745c <uhd_pipe_trans_complet+0xa8>
8000743a:	72 0e       	ld.w	lr,r9[0x0]
8000743c:	30 86       	mov	r6,8
8000743e:	fd de c0 83 	bfextu	lr,lr,0x4,0x3
80007442:	ec 0e 09 4e 	lsl	lr,r6,lr
80007446:	20 1e       	sub	lr,1
80007448:	f5 ee 00 0e 	and	lr,r10,lr
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
8000744c:	c1 80       	breq	8000747c <uhd_pipe_trans_complet+0xc8>
		if (uhd_is_pipe_out(pipe)) {
			if (0 != next_trans % uhd_get_pipe_size(pipe)) {
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_DMAEND_EN_MASK;
8000744e:	70 0e       	ld.w	lr,r8[0x0]
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
80007450:	0c 4b       	or	r11,r6
80007452:	30 06       	mov	r6,0
80007454:	fd d6 d3 c1 	bfins	lr,r6,0x1e,0x1
80007458:	91 0e       	st.w	r8[0x0],lr
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != uhd_get_pipe_type(pipe))
8000745a:	c1 18       	rjmp	8000747c <uhd_pipe_trans_complet+0xc8>
8000745c:	72 0e       	ld.w	lr,r9[0x0]
8000745e:	fd de c1 82 	bfextu	lr,lr,0xc,0x2
80007462:	58 1e       	cp.w	lr,1
					|| (next_trans <= uhd_get_pipe_size(pipe))) {
80007464:	c0 a1       	brne	80007478 <uhd_pipe_trans_complet+0xc4>
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != uhd_get_pipe_type(pipe))
80007466:	72 0e       	ld.w	lr,r9[0x0]
80007468:	30 86       	mov	r6,8
8000746a:	fd de c0 83 	bfextu	lr,lr,0x4,0x3
8000746e:	ec 0e 09 4e 	lsl	lr,r6,lr
80007472:	1c 3a       	cp.w	r10,lr
80007474:	e0 8b 00 04 	brhi	8000747c <uhd_pipe_trans_complet+0xc8>
					|| (next_trans <= uhd_get_pipe_size(pipe))) {
				// Enable short packet reception
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_EOT_IRQ_EN_MASK
80007478:	e8 1b 00 14 	orl	r11,0x14
						| AVR32_USBB_UHDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		uhd_pipe_dma_set_addr(pipe, (U32) &ptr_job->buf[ptr_job->nb_trans]);
8000747c:	70 3e       	ld.w	lr,r8[0xc]
8000747e:	70 16       	ld.w	r6,r8[0x4]
80007480:	1c 06       	add	r6,lr
80007482:	f8 0e 15 04 	lsl	lr,r12,0x4
80007486:	e0 3e f9 00 	sub	lr,129280

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000748a:	9d 16       	st.w	lr[0x4],r6
8000748c:	e1 b5 00 00 	mfsr	r5,0x0
				AVR32_USBB_UHDMA1_CONTROL_CH_EN_MASK;

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if( !(uhd_pipe_dma_get_status(pipe)
80007490:	d3 03       	ssrf	0x10
80007492:	7c 36       	ld.w	r6,lr[0xc]
80007494:	e2 16 00 10 	andl	r6,0x10,COH
				& AVR32_USBB_UHDMA1_STATUS_EOT_STA_MASK)) {
			if (uhd_is_pipe_in(pipe)) {
80007498:	c3 61       	brne	80007504 <uhd_pipe_trans_complet+0x150>
8000749a:	72 0c       	ld.w	r12,r9[0x0]
8000749c:	f9 dc c1 02 	bfextu	r12,r12,0x8,0x2
800074a0:	58 1c       	cp.w	r12,1
				uhd_in_request_number(pipe,
800074a2:	c1 c1       	brne	800074da <uhd_pipe_trans_complet+0x126>
800074a4:	fe 6c 06 50 	mov	r12,-129456
800074a8:	ee 0c 00 06 	add	r6,r7,r12
800074ac:	6c 0c       	ld.w	r12,r6[0x0]
800074ae:	72 03       	ld.w	r3,r9[0x0]
800074b0:	e0 1c ff 00 	andl	r12,0xff00
800074b4:	72 04       	ld.w	r4,r9[0x0]
800074b6:	f3 d3 c0 83 	bfextu	r9,r3,0x4,0x3
800074ba:	e9 d4 c0 83 	bfextu	r4,r4,0x4,0x3
800074be:	30 83       	mov	r3,8
800074c0:	2f d4       	sub	r4,-3
800074c2:	e6 09 09 49 	lsl	r9,r3,r9
800074c6:	20 19       	sub	r9,1
800074c8:	14 09       	add	r9,r10
800074ca:	f2 04 0a 49 	lsr	r9,r9,r4
800074ce:	20 19       	sub	r9,1
800074d0:	f3 d9 c0 08 	bfextu	r9,r9,0x0,0x8
800074d4:	f3 ec 10 0c 	or	r12,r9,r12
						(next_trans+uhd_get_pipe_size(pipe)-1)/uhd_get_pipe_size(pipe));
			}
			uhd_disable_bank_interrupt(pipe);
800074d8:	8d 0c       	st.w	r6[0x0],r12
800074da:	e0 37 f9 e0 	sub	r7,129504
800074de:	e0 69 10 00 	mov	r9,4096
			uhd_unfreeze_pipe(pipe);
800074e2:	8f 09       	st.w	r7[0x0],r9
800074e4:	e2 69 00 00 	mov	r9,131072
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		uhd_pipe_dma_set_addr(pipe, (U32) &ptr_job->buf[ptr_job->nb_trans]);
		uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
800074e8:	8f 09       	st.w	r7[0x0],r9
800074ea:	e8 1b 00 21 	orl	r11,0x21
						(next_trans+uhd_get_pipe_size(pipe)-1)/uhd_get_pipe_size(pipe));
			}
			uhd_disable_bank_interrupt(pipe);
			uhd_unfreeze_pipe(pipe);
			uhd_pipe_dma_set_control(pipe, uhd_dma_ctrl);
			ptr_job->nb_trans += next_trans;
800074ee:	9d 2b       	st.w	lr[0x8],r11
800074f0:	70 39       	ld.w	r9,r8[0xc]
800074f2:	f2 0a 00 0a 	add	r10,r9,r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800074f6:	91 3a       	st.w	r8[0xc],r10
800074f8:	e6 15 00 01 	andh	r5,0x1,COH
      cpu_irq_enable();
800074fc:	c0 21       	brne	80007500 <uhd_pipe_trans_complet+0x14c>
			cpu_irq_restore(flags);
			return;
800074fe:	d5 03       	csrf	0x10
80007500:	d8 32       	popm	r0-r7,pc
80007502:	d7 03       	nop
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80007504:	e6 15 00 01 	andh	r5,0x1,COH
80007508:	c0 21       	brne	8000750c <uhd_pipe_trans_complet+0x158>
      cpu_irq_enable();
8000750a:	d5 03       	csrf	0x10
		}
		cpu_irq_restore(flags);
		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->nb_trans;
8000750c:	70 39       	ld.w	r9,r8[0xc]
8000750e:	91 29       	st.w	r8[0x8],r9
	}
	if (uhd_is_pipe_out(pipe)) {
80007510:	f8 09 15 02 	lsl	r9,r12,0x2
80007514:	fe 6b 05 00 	mov	r11,-129792
80007518:	f2 0b 00 0a 	add	r10,r9,r11
8000751c:	74 0a       	ld.w	r10,r10[0x0]
8000751e:	f5 da c1 02 	bfextu	r10,r10,0x8,0x2
80007522:	58 2a       	cp.w	r10,2
80007524:	c1 c1       	brne	8000755c <uhd_pipe_trans_complet+0x1a8>
		if (ptr_job->b_shortpacket) {
80007526:	70 08       	ld.w	r8,r8[0x0]
80007528:	ed b8 00 1e 	bld	r8,0x1e
8000752c:	c1 81       	brne	8000755c <uhd_pipe_trans_complet+0x1a8>
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			uhd_ack_out_ready(pipe);
8000752e:	fe 6c 05 60 	mov	r12,-129696
80007532:	f2 0c 00 08 	add	r8,r9,r12
80007536:	91 0a       	st.w	r8[0x0],r10
			if (Is_uhd_write_enabled(pipe)) {
80007538:	fe 6b 05 30 	mov	r11,-129744
8000753c:	f2 0b 00 08 	add	r8,r9,r11
80007540:	70 08       	ld.w	r8,r8[0x0]
80007542:	ed b8 00 10 	bld	r8,0x10
80007546:	c0 61       	brne	80007552 <uhd_pipe_trans_complet+0x19e>
				// Force interrupt in case of pipe already free
				uhd_raise_out_ready(pipe);
80007548:	fe 6c 05 90 	mov	r12,-129648
8000754c:	f2 0c 00 08 	add	r8,r9,r12
80007550:	91 0a       	st.w	r8[0x0],r10
			}
			uhd_enable_out_ready_interrupt(pipe);
80007552:	e0 39 fa 10 	sub	r9,129552
80007556:	30 28       	mov	r8,2
80007558:	93 08       	st.w	r9[0x0],r8
			return;
8000755a:	d8 32       	popm	r0-r7,pc
		}
	}
	// Call callback to signal end of transfer
	uhd_pipe_finish_job(pipe, UHD_TRANS_NOERROR);
8000755c:	30 0b       	mov	r11,0
8000755e:	cb fe       	rcall	800072dc <uhd_pipe_finish_job>
80007560:	d8 32       	popm	r0-r7,pc
80007562:	d7 03       	nop

80007564 <uhd_ep_run>:
80007564:	d4 31       	pushm	r0-r7,lr
80007566:	fa c4 ff dc 	sub	r4,sp,-36
		bool b_shortpacket,
		uint8_t *buf,
		iram_size_t buf_size,
		uint16_t timeout,
		uhd_callback_trans_t callback)
{
8000756a:	10 95       	mov	r5,r8
8000756c:	68 13       	ld.w	r3,r4[0x4]
8000756e:	14 97       	mov	r7,r10
80007570:	12 96       	mov	r6,r9
80007572:	68 04       	ld.w	r4,r4[0x0]
	irqflags_t flags;
	uint8_t pipe;
	uhd_pipe_job_t *ptr_job;

	pipe = uhd_get_pipe(add,endp);
80007574:	c7 4e       	rcall	8000725c <uhd_get_pipe>
80007576:	30 78       	mov	r8,7
	if (pipe == AVR32_USBB_EPT_NUM) {
80007578:	f0 0c 18 00 	cp.b	r12,r8
8000757c:	c1 60       	breq	800075a8 <uhd_ep_run+0x44>
8000757e:	e0 69 08 f0 	mov	r9,2288
		return false; // pipe not found
	}

	// Get job about pipe
	ptr_job = &uhd_pipe_job[pipe-1];
80007582:	f8 c8 00 01 	sub	r8,r12,1
80007586:	f0 08 00 28 	add	r8,r8,r8<<0x2
8000758a:	f2 08 00 28 	add	r8,r9,r8<<0x2

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000758e:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80007592:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
80007594:	70 0b       	ld.w	r11,r8[0x0]
80007596:	e6 19 00 01 	andh	r9,0x1,COH
8000759a:	16 9a       	mov	r10,r11
8000759c:	e6 1a 80 00 	andh	r10,0x8000,COH
800075a0:	c0 50       	breq	800075aa <uhd_ep_run+0x46>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800075a2:	58 09       	cp.w	r9,0
800075a4:	c0 21       	brne	800075a8 <uhd_ep_run+0x44>
      cpu_irq_enable();
800075a6:	d5 03       	csrf	0x10
   }

	barrier();
800075a8:	d8 3a       	popm	r0-r7,pc,r12=0
		cpu_irq_restore(flags);
		return false; // Job already on going
	}
	ptr_job->busy = true;
800075aa:	30 1e       	mov	lr,1
800075ac:	f7 de d3 e1 	bfins	r11,lr,0x1f,0x1
800075b0:	91 0b       	st.w	r8[0x0],r11

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
	ptr_job->buf_size = buf_size;
	ptr_job->nb_trans = 0;
	ptr_job->timeout = timeout;
800075b2:	b0 14       	st.h	r8[0x2],r4
	ptr_job->busy = true;

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
	ptr_job->buf_size = buf_size;
	ptr_job->nb_trans = 0;
800075b4:	91 3a       	st.w	r8[0xc],r10
	ptr_job->timeout = timeout;
	ptr_job->b_shortpacket = b_shortpacket;
	ptr_job->call_end = callback;
800075b6:	91 43       	st.w	r8[0x10],r3
	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
	ptr_job->buf_size = buf_size;
	ptr_job->nb_trans = 0;
	ptr_job->timeout = timeout;
	ptr_job->b_shortpacket = b_shortpacket;
800075b8:	70 0a       	ld.w	r10,r8[0x0]
		return false; // Job already on going
	}
	ptr_job->busy = true;

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
800075ba:	91 16       	st.w	r8[0x4],r6
	ptr_job->buf_size = buf_size;
	ptr_job->nb_trans = 0;
	ptr_job->timeout = timeout;
	ptr_job->b_shortpacket = b_shortpacket;
800075bc:	f5 d7 d3 c1 	bfins	r10,r7,0x1e,0x1
	}
	ptr_job->busy = true;

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
	ptr_job->buf_size = buf_size;
800075c0:	91 25       	st.w	r8[0x8],r5
	ptr_job->nb_trans = 0;
	ptr_job->timeout = timeout;
	ptr_job->b_shortpacket = b_shortpacket;
800075c2:	91 0a       	st.w	r8[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800075c4:	58 09       	cp.w	r9,0
800075c6:	c0 21       	brne	800075ca <uhd_ep_run+0x66>
      cpu_irq_enable();
800075c8:	d5 03       	csrf	0x10
	ptr_job->call_end = callback;
	cpu_irq_restore(flags);

	// Request first transfer
	uhd_pipe_trans_complet(pipe);
800075ca:	cf 5e       	rcall	800073b4 <uhd_pipe_trans_complet>
800075cc:	da 3a       	popm	r0-r7,pc,r12=1
800075ce:	d7 03       	nop

800075d0 <uhd_ctrl_request_end>:
800075d0:	d4 21       	pushm	r4-r7,lr
800075d2:	30 09       	mov	r9,0
800075d4:	e0 68 1c f0 	mov	r8,7408
800075d8:	18 95       	mov	r5,r12
800075da:	b0 09       	st.h	r8[0x0],r9
	bool b_new_request;

	uhd_ctrl_request_timeout = 0;

	// Remove request from the control request list
	callback_end = uhd_ctrl_request_first->callback_end;
800075dc:	e0 69 1c e4 	mov	r9,7396

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800075e0:	72 0c       	ld.w	r12,r9[0x0]
800075e2:	78 66       	ld.w	r6,r12[0x18]
	cpu_irq_disable();
800075e4:	e1 b8 00 00 	mfsr	r8,0x0
	request_to_free = uhd_ctrl_request_first;
	flags = cpu_irq_save();
	uhd_ctrl_request_first = uhd_ctrl_request_first->next_request;
800075e8:	d3 03       	ssrf	0x10
800075ea:	72 0a       	ld.w	r10,r9[0x0]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800075ec:	74 77       	ld.w	r7,r10[0x1c]
800075ee:	93 07       	st.w	r9[0x0],r7
800075f0:	ed b8 00 10 	bld	r8,0x10
	b_new_request = (uhd_ctrl_request_first != NULL);
	cpu_irq_restore(flags);
	free(request_to_free);
800075f4:	c0 20       	breq	800075f8 <uhd_ctrl_request_end+0x28>
800075f6:	d5 03       	csrf	0x10

	// Call callback
	if (callback_end != NULL) {
800075f8:	e0 a0 0b a2 	rcall	80008d3c <free>
		callback_end(uhd_get_configured_address(0), status, uhd_ctrl_nb_trans);
800075fc:	58 06       	cp.w	r6,0
800075fe:	c0 b0       	breq	80007614 <uhd_ctrl_request_end+0x44>
80007600:	fe 68 04 24 	mov	r8,-130012
80007604:	70 0c       	ld.w	r12,r8[0x0]
80007606:	e0 68 1c e8 	mov	r8,7400
8000760a:	0a 9b       	mov	r11,r5
8000760c:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
	}

	// If a setup request is pending and no started by previous callback
	if (b_new_request) {
80007610:	90 8a       	ld.uh	r10,r8[0x0]
		uhd_ctrl_phase_setup();
80007612:	5d 16       	icall	r6
80007614:	58 07       	cp.w	r7,0
	}
	if (uhd_b_suspend_requested) {
80007616:	c0 20       	breq	8000761a <uhd_ctrl_request_end+0x4a>
80007618:	c0 cc       	rcall	80007630 <uhd_ctrl_phase_setup>
8000761a:	e0 68 09 6b 	mov	r8,2411
8000761e:	30 09       	mov	r9,0
80007620:	11 8a       	ld.ub	r10,r8[0x0]
		// A suspend request has been delay after all setup request
		uhd_b_suspend_requested = false;
80007622:	f2 0a 18 00 	cp.b	r10,r9
		uhd_suspend();
80007626:	c0 40       	breq	8000762e <uhd_ctrl_request_end+0x5e>
80007628:	b0 89       	st.b	r8[0x0],r9
8000762a:	fe b0 fd 49 	rcall	800070bc <uhd_suspend>
8000762e:	d8 22       	popm	r4-r7,pc

80007630 <uhd_ctrl_phase_setup>:
80007630:	d4 21       	pushm	r4-r7,lr
80007632:	20 2d       	sub	sp,8
80007634:	e0 68 1c e0 	mov	r8,7392
80007638:	30 06       	mov	r6,0
8000763a:	91 06       	st.w	r8[0x0],r6
8000763c:	e0 68 1c e4 	mov	r8,7396
80007640:	30 8a       	mov	r10,8
80007642:	70 07       	ld.w	r7,r8[0x0]
80007644:	1a 9c       	mov	r12,sp
80007646:	ee cb ff ff 	sub	r11,r7,-1

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
	uhd_ctrl_nb_trans = 0;
8000764a:	e0 a0 0d 9d 	rcall	80009184 <memcpy>
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
8000764e:	e0 68 1c e8 	mov	r8,7400
		uint64_t value64;
	} setup;
	volatile uint64_t *ptr_ep_data;

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));
80007652:	b0 06       	st.h	r8[0x0],r6
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
80007654:	fe 68 00 00 	mov	r8,-131072

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
80007658:	40 09       	lddsp	r9,sp[0x0]
8000765a:	f0 fc 04 1c 	ld.w	r12,r8[1052]
8000765e:	f7 d9 c0 10 	bfextu	r11,r9,0x0,0x10
80007662:	f6 06 16 08 	lsr	r6,r11,0x8
80007666:	ed eb 10 8b 	or	r11,r6,r11<<0x8
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
8000766a:	40 18       	lddsp	r8,sp[0x4]
8000766c:	f3 db d0 10 	bfins	r9,r11,0x0,0x10
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
80007670:	f0 0a 16 10 	lsr	r10,r8,0x10
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
80007674:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80007678:	f4 0b 16 08 	lsr	r11,r10,0x8
8000767c:	f7 ea 10 8a 	or	r10,r11,r10<<0x8
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
80007680:	f1 da d2 10 	bfins	r8,r10,0x10,0x10
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
80007684:	ed d8 b0 10 	bfexts	r6,r8,0x0,0x10
			(uhd_ctrl_request_first->add != uhd_get_configured_address(0))) {
80007688:	58 0c       	cp.w	r12,0
8000768a:	c0 90       	breq	8000769c <uhd_ctrl_phase_setup+0x6c>
8000768c:	fe 6a 04 24 	mov	r10,-130012
80007690:	74 0a       	ld.w	r10,r10[0x0]
80007692:	0f 8b       	ld.ub	r11,r7[0x0]
80007694:	f5 da c0 07 	bfextu	r10,r10,0x0,0x7
		uhd_ctrl_request_end(UHD_TRANS_DISCONNECT);
80007698:	14 3b       	cp.w	r11,r10
8000769a:	c0 40       	breq	800076a2 <uhd_ctrl_phase_setup+0x72>
		return; // Endpoint not valid
8000769c:	30 1c       	mov	r12,1
	}
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_SETUP);
8000769e:	c9 9f       	rcall	800075d0 <uhd_ctrl_request_end>
800076a0:	c2 a8       	rjmp	800076f4 <uhd_ctrl_phase_setup+0xc4>
800076a2:	fe 6b 05 00 	mov	r11,-129792
800076a6:	76 0a       	ld.w	r10,r11[0x0]
800076a8:	e0 1a fc ff 	andl	r10,0xfcff
	uhd_ack_setup_ready(0);
800076ac:	97 0a       	st.w	r11[0x0],r10
800076ae:	30 4c       	mov	r12,4
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
800076b0:	fe 6a 05 60 	mov	r10,-129696
	}
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_SETUP);
	uhd_ack_setup_ready(0);
800076b4:	ef d6 c0 10 	bfextu	r7,r6,0x0,0x10
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
800076b8:	95 0c       	st.w	r10[0x0],r12
800076ba:	12 9b       	mov	r11,r9
800076bc:	ee 09 16 08 	lsr	r9,r7,0x8
800076c0:	f3 e7 10 87 	or	r7,r9,r7<<0x8
	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_SETUP);
	uhd_ack_setup_ready(0);
	Assert(sizeof(setup) == sizeof(uint64_t));
	ptr_ep_data = (volatile uint64_t *)&uhd_get_pipe_fifo_access(0, 64);
	*ptr_ep_data = setup.value64;
800076c4:	f1 d7 d0 10 	bfins	r8,r7,0x0,0x10
800076c8:	10 9a       	mov	r10,r8
800076ca:	30 08       	mov	r8,0
800076cc:	ea 18 d0 00 	orh	r8,0xd000

	uhd_ctrl_request_timeout = 5000;
800076d0:	f0 eb 00 00 	st.d	r8[0],r10
800076d4:	e0 69 13 88 	mov	r9,5000
	uhd_enable_setup_ready_interrupt(0);
800076d8:	e0 68 1c f0 	mov	r8,7408
800076dc:	b0 09       	st.h	r8[0x0],r9
	uhd_ack_fifocon(0);
800076de:	fe 68 05 f0 	mov	r8,-129552
800076e2:	91 0c       	st.w	r8[0x0],r12
800076e4:	e0 69 40 00 	mov	r9,16384
	uhd_unfreeze_pipe(0);
800076e8:	fe 68 06 20 	mov	r8,-129504
800076ec:	91 09       	st.w	r8[0x0],r9
}
800076ee:	e2 69 00 00 	mov	r9,131072
800076f2:	91 09       	st.w	r8[0x0],r9
800076f4:	2f ed       	sub	sp,-8
800076f6:	d8 22       	popm	r4-r7,pc

800076f8 <uhd_setup_request>:
800076f8:	d4 31       	pushm	r0-r7,lr
800076fa:	20 1d       	sub	sp,4
800076fc:	18 97       	mov	r7,r12
800076fe:	50 0b       	stdsp	sp[0x0],r11
80007700:	14 92       	mov	r2,r10
80007702:	12 96       	mov	r6,r9
80007704:	10 93       	mov	r3,r8
80007706:	40 a4       	lddsp	r4,sp[0x28]
80007708:	32 0c       	mov	r12,32
8000770a:	e0 a0 0b 21 	rcall	80008d4c <malloc>
	irqflags_t flags;
	struct uhd_ctrl_request_t *request;
	bool b_start_request = false;

	request = malloc( sizeof(struct uhd_ctrl_request_t) );
	if (request == NULL) {
8000770e:	40 0b       	lddsp	r11,sp[0x0]
{
	irqflags_t flags;
	struct uhd_ctrl_request_t *request;
	bool b_start_request = false;

	request = malloc( sizeof(struct uhd_ctrl_request_t) );
80007710:	18 95       	mov	r5,r12
	if (request == NULL) {
80007712:	c2 60       	breq	8000775e <uhd_setup_request+0x66>
		Assert(false);
		return false;
	}

	// Fill structure
	request->add = (uint8_t) add;
80007714:	18 c7       	st.b	r12++,r7
	memcpy(&request->req, req, sizeof(usb_setup_req_t));
80007716:	30 8a       	mov	r10,8
80007718:	e0 a0 0d 36 	rcall	80009184 <memcpy>
	request->payload = payload;
	request->payload_size = payload_size;
	request->callback_run = callback_run;
	request->callback_end = callback_end;
	request->next_request = NULL;
8000771c:	30 08       	mov	r8,0
	}

	// Fill structure
	request->add = (uint8_t) add;
	memcpy(&request->req, req, sizeof(usb_setup_req_t));
	request->payload = payload;
8000771e:	8b 32       	st.w	r5[0xc],r2
	request->payload_size = payload_size;
80007720:	eb 56 00 10 	st.h	r5[16],r6
	request->callback_run = callback_run;
80007724:	8b 53       	st.w	r5[0x14],r3
	request->callback_end = callback_end;
80007726:	8b 64       	st.w	r5[0x18],r4
	request->next_request = NULL;
80007728:	8b 78       	st.w	r5[0x1c],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000772a:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
8000772e:	d3 03       	ssrf	0x10

	// Add this request in the queue
	flags = cpu_irq_save();
	if (uhd_ctrl_request_first == NULL) {
80007730:	e0 69 1c e4 	mov	r9,7396
80007734:	72 0b       	ld.w	r11,r9[0x0]
80007736:	58 0b       	cp.w	r11,0
		uhd_ctrl_request_first = request;
80007738:	c0 41       	brne	80007740 <uhd_setup_request+0x48>
8000773a:	93 05       	st.w	r9[0x0],r5
8000773c:	30 18       	mov	r8,1
		b_start_request = true;
	} else {
		uhd_ctrl_request_last->next_request = request;
8000773e:	c0 58       	rjmp	80007748 <uhd_setup_request+0x50>
80007740:	e0 69 1c ec 	mov	r9,7404
	}
	uhd_ctrl_request_last = request;
80007744:	72 09       	ld.w	r9,r9[0x0]
80007746:	93 75       	st.w	r9[0x1c],r5
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80007748:	e0 69 1c ec 	mov	r9,7404
8000774c:	93 05       	st.w	r9[0x0],r5
      cpu_irq_enable();
8000774e:	ed ba 00 10 	bld	r10,0x10
	cpu_irq_restore(flags);

	if (b_start_request) {
80007752:	c0 20       	breq	80007756 <uhd_setup_request+0x5e>
		// Start immediately request
		uhd_ctrl_phase_setup();
80007754:	d5 03       	csrf	0x10
80007756:	58 08       	cp.w	r8,0
80007758:	c0 20       	breq	8000775c <uhd_setup_request+0x64>
	}
	return true;
}
8000775a:	c6 bf       	rcall	80007630 <uhd_ctrl_phase_setup>
8000775c:	30 1c       	mov	r12,1
8000775e:	2f fd       	sub	sp,-4
80007760:	d8 32       	popm	r0-r7,pc
80007762:	d7 03       	nop

80007764 <uhd_ep_free>:
80007764:	d4 31       	pushm	r0-r7,lr
80007766:	fe 66 05 00 	mov	r6,-129792
8000776a:	18 90       	mov	r0,r12
8000776c:	16 94       	mov	r4,r11
8000776e:	30 07       	mov	r7,0
80007770:	fe 65 00 00 	mov	r5,-131072
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80007774:	30 11       	mov	r1,1
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80007776:	37 f2       	mov	r2,127
			continue;
		}
		if (endp != 0xFF) {
80007778:	3f f3       	mov	r3,-1
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
8000777a:	ea fb 04 1c 	ld.w	r11,r5[1052]
	return false;
}


void uhd_ep_free(usb_add_t add, usb_ep_t endp)
{
8000777e:	0e 99       	mov	r9,r7
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80007780:	e2 07 09 4a 	lsl	r10,r1,r7
	return false;
}


void uhd_ep_free(usb_add_t add, usb_ep_t endp)
{
80007784:	5c 59       	castu.b	r9
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80007786:	f5 eb 00 0b 	and	r11,r10,r11
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
8000778a:	12 98       	mov	r8,r9
8000778c:	e2 18 00 fc 	andl	r8,0xfc,COH
80007790:	e0 38 fb dc 	sub	r8,130012
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80007794:	58 0b       	cp.w	r11,0
80007796:	c3 90       	breq	80007808 <uhd_ep_free+0xa4>
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80007798:	70 0b       	ld.w	r11,r8[0x0]
8000779a:	f1 d7 c0 02 	bfextu	r8,r7,0x0,0x2
8000779e:	a3 78       	lsl	r8,0x3
800077a0:	e4 08 09 48 	lsl	r8,r2,r8
800077a4:	10 6b       	and	r11,r8
800077a6:	5c 98       	brev	r8
800077a8:	f0 08 12 00 	clz	r8,r8
800077ac:	f6 08 0a 48 	lsr	r8,r11,r8
800077b0:	10 30       	cp.w	r0,r8
800077b2:	c2 b1       	brne	80007808 <uhd_ep_free+0xa4>
			if (endp != uhd_get_pipe_endpoint_address(pipe)) {
				continue; // Mismatch
			}
		}
		// Unalloc pipe
		uhd_disable_pipe(pipe);
800077b4:	5c da       	com	r10
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
			continue;
		}
		if (endp != 0xFF) {
800077b6:	e6 04 18 00 	cp.b	r4,r3
800077ba:	c1 10       	breq	800077dc <uhd_ep_free+0x78>
			// Disable specific endpoint number
			if (endp != uhd_get_pipe_endpoint_address(pipe)) {
800077bc:	6c 0b       	ld.w	r11,r6[0x0]
800077be:	6c 08       	ld.w	r8,r6[0x0]
800077c0:	f7 db c2 04 	bfextu	r11,r11,0x10,0x4
800077c4:	f1 d8 c1 02 	bfextu	r8,r8,0x8,0x2
800077c8:	e0 6c 00 80 	mov	r12,128
800077cc:	58 18       	cp.w	r8,1
800077ce:	f8 08 17 00 	moveq	r8,r12
800077d2:	f9 b8 01 00 	movne	r8,0
800077d6:	16 48       	or	r8,r11
800077d8:	10 34       	cp.w	r4,r8
800077da:	c1 71       	brne	80007808 <uhd_ep_free+0xa4>
				continue; // Mismatch
			}
		}
		// Unalloc pipe
		uhd_disable_pipe(pipe);
800077dc:	ea f8 04 1c 	ld.w	r8,r5[1052]
800077e0:	10 6a       	and	r10,r8
800077e2:	eb 4a 04 1c 	st.w	r5[1052],r10
		uhd_unallocate_memory(pipe);
800077e6:	6c 08       	ld.w	r8,r6[0x0]
800077e8:	a1 d8       	cbr	r8,0x1
800077ea:	8d 08       	st.w	r6[0x0],r8

		// Stop transfer on this pipe
#ifndef USB_HOST_HUB_SUPPORT
		if (pipe == 0) {
800077ec:	58 09       	cp.w	r9,0
800077ee:	c0 91       	brne	80007800 <uhd_ep_free+0x9c>
			// Endpoint control
			if (uhd_ctrl_request_timeout) {
800077f0:	e0 69 1c f0 	mov	r9,7408
800077f4:	92 08       	ld.sh	r8,r9[0x0]
800077f6:	58 08       	cp.w	r8,0
				uhd_ctrl_request_end(UHD_TRANS_DISCONNECT);
800077f8:	c0 80       	breq	80007808 <uhd_ep_free+0xa4>
800077fa:	30 1c       	mov	r12,1
800077fc:	ce ae       	rcall	800075d0 <uhd_ctrl_request_end>
800077fe:	c0 58       	rjmp	80007808 <uhd_ep_free+0xa4>
			}
			continue;
		}
#endif
		// Endpoint interrupt, bulk or isochronous
		uhd_ep_abort_pipe(pipe, UHD_TRANS_DISCONNECT);
80007800:	0e 9c       	mov	r12,r7
80007802:	30 1b       	mov	r11,1
80007804:	fe b0 fd a8 	rcall	80007354 <uhd_ep_abort_pipe>
80007808:	2f f7       	sub	r7,-1
8000780a:	2f c6       	sub	r6,-4
		}
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
8000780c:	58 77       	cp.w	r7,7
8000780e:	cb 61       	brne	8000777a <uhd_ep_free+0x16>
		}
#endif
		// Endpoint interrupt, bulk or isochronous
		uhd_ep_abort_pipe(pipe, UHD_TRANS_DISCONNECT);
	}
}
80007810:	d8 32       	popm	r0-r7,pc
80007812:	d7 03       	nop

80007814 <uhd_ep_alloc>:
80007814:	d4 31       	pushm	r0-r7,lr
80007816:	30 08       	mov	r8,0
80007818:	fe 65 00 00 	mov	r5,-131072
8000781c:	30 16       	mov	r6,1
8000781e:	ea f7 04 1c 	ld.w	r7,r5[1052]
	uhd_enable_pipe_interrupt(0);
	return true;
}

bool uhd_ep_alloc(usb_add_t add, usb_ep_desc_t * ep_desc)
{
80007822:	f0 c9 ff ff 	sub	r9,r8,-1
	uint8_t ep_dir;
	uint8_t ep_interval;
	uint8_t bank;

	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (Is_uhd_pipe_enabled(pipe)) {
80007826:	fe 6e 00 00 	mov	lr,-131072
	uhd_enable_pipe_error_interrupt(0);
	uhd_enable_pipe_interrupt(0);
	return true;
}

bool uhd_ep_alloc(usb_add_t add, usb_ep_desc_t * ep_desc)
8000782a:	2f f8       	sub	r8,-1
{
8000782c:	5c 59       	castu.b	r9
	uint8_t ep_dir;
	uint8_t ep_interval;
	uint8_t bank;

	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (Is_uhd_pipe_enabled(pipe)) {
8000782e:	ec 08 09 4a 	lsl	r10,r6,r8
80007832:	f5 e7 00 07 	and	r7,r10,r7
80007836:	c0 40       	breq	8000783e <uhd_ep_alloc+0x2a>
	uint8_t ep_type;
	uint8_t ep_dir;
	uint8_t ep_interval;
	uint8_t bank;

	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
80007838:	58 68       	cp.w	r8,6
8000783a:	cf 21       	brne	8000781e <uhd_ep_alloc+0xa>
8000783c:	c9 a8       	rjmp	80007970 <uhd_ep_alloc+0x15c>
		if (Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		uhd_enable_pipe(pipe);
8000783e:	fc f6 04 1c 	ld.w	r6,lr[1052]
80007842:	f5 e6 10 06 	or	r6,r10,r6
80007846:	fd 46 04 1c 	st.w	lr[1052],r6
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
				AVR32_USBB_UPCFG0_PTOKEN_IN:
				AVR32_USBB_UPCFG0_PTOKEN_OUT,
		ep_type = ep_desc->bmAttributes&USB_EP_TYPE_MASK;
		// Bank choice
		switch(ep_type) {
8000784a:	30 25       	mov	r5,2
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		uhd_enable_pipe(pipe);
		ep_addr = ep_desc->bEndpointAddress & USB_EP_ADDR_MASK;
8000784c:	17 a6       	ld.ub	r6,r11[0x2]
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
				AVR32_USBB_UPCFG0_PTOKEN_IN:
				AVR32_USBB_UPCFG0_PTOKEN_OUT,
		ep_type = ep_desc->bmAttributes&USB_EP_TYPE_MASK;
8000784e:	17 be       	ld.ub	lr,r11[0x3]
		if (Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		uhd_enable_pipe(pipe);
		ep_addr = ep_desc->bEndpointAddress & USB_EP_ADDR_MASK;
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
80007850:	ec 07 18 00 	cp.b	r7,r6
80007854:	f9 b3 09 01 	movgt	r3,1
80007858:	f9 b3 0a 02 	movle	r3,2
				AVR32_USBB_UPCFG0_PTOKEN_IN:
				AVR32_USBB_UPCFG0_PTOKEN_OUT,
		ep_type = ep_desc->bmAttributes&USB_EP_TYPE_MASK;
8000785c:	fd de c0 02 	bfextu	lr,lr,0x0,0x2
		// Bank choice
		switch(ep_type) {
80007860:	ea 0e 18 00 	cp.b	lr,r5
80007864:	c0 d0       	breq	8000787e <uhd_ep_alloc+0x6a>
80007866:	30 35       	mov	r5,3
80007868:	ea 0e 18 00 	cp.b	lr,r5
8000786c:	c0 70       	breq	8000787a <uhd_ep_alloc+0x66>
8000786e:	30 17       	mov	r7,1
80007870:	ee 0e 18 00 	cp.b	lr,r7
80007874:	c7 e1       	brne	80007970 <uhd_ep_alloc+0x15c>
		case USB_EP_TYPE_ISOCHRONOUS:
			bank = UHD_ISOCHRONOUS_NB_BANK;
			ep_interval = ep_desc->bInterval;
80007876:	17 e5       	ld.ub	r5,r11[0x6]
80007878:	c0 48       	rjmp	80007880 <uhd_ep_alloc+0x6c>
			break;
		case USB_EP_TYPE_INTERRUPT:
			bank = UHD_INTERRUPT_NB_BANK;
			ep_interval = ep_desc->bInterval;
8000787a:	17 e5       	ld.ub	r5,r11[0x6]
8000787c:	c0 38       	rjmp	80007882 <uhd_ep_alloc+0x6e>
8000787e:	0e 95       	mov	r5,r7
80007880:	30 17       	mov	r7,1
		default:
			Assert(false);
			return false;
		}

		uhd_configure_pipe(pipe, ep_interval, ep_addr, ep_type, ep_dir,
80007882:	17 d4       	ld.ub	r4,r11[0x5]
80007884:	ed d6 c0 04 	bfextu	r6,r6,0x0,0x4
80007888:	ad 6e       	lsl	lr,0xc
8000788a:	17 cb       	ld.ub	r11,r11[0x4]
8000788c:	fd e6 11 0e 	or	lr,lr,r6<<0x10
80007890:	e9 eb 10 8b 	or	r11,r4,r11<<0x8
80007894:	ab ae       	sbr	lr,0xa
80007896:	fe 64 05 00 	mov	r4,-129792
8000789a:	fd e3 10 8e 	or	lr,lr,r3<<0x8
8000789e:	ee 06 15 02 	lsl	r6,r7,0x2
800078a2:	fd e5 11 85 	or	r5,lr,r5<<0x18
800078a6:	f6 07 16 08 	lsr	r7,r11,0x8
800078aa:	f2 0e 15 02 	lsl	lr,r9,0x2
800078ae:	ef eb 10 87 	or	r7,r7,r11<<0x8
800078b2:	e0 63 04 00 	mov	r3,1024
800078b6:	fc 04 00 0b 	add	r11,lr,r4
800078ba:	5c 77       	castu.h	r7
800078bc:	30 84       	mov	r4,8
800078be:	ee 04 0c 47 	max	r7,r7,r4
800078c2:	ee 03 0d 47 	min	r7,r7,r3
800078c6:	a1 77       	lsl	r7,0x1
800078c8:	20 17       	sub	r7,1
800078ca:	ee 07 12 00 	clz	r7,r7
800078ce:	ee 07 11 1c 	rsub	r7,r7,28
800078d2:	e2 16 00 0c 	andl	r6,0xc,COH
800078d6:	eb e7 10 45 	or	r5,r5,r7<<0x4
				le16_to_cpu(ep_desc->wMaxPacketSize),
				bank, AVR32_USBB_UPCFG0_AUTOSW_MASK);
		uhd_allocate_memory(pipe);
		if (!Is_uhd_pipe_configured(pipe)) {
800078da:	fe 67 05 30 	mov	r7,-129744
		default:
			Assert(false);
			return false;
		}

		uhd_configure_pipe(pipe, ep_interval, ep_addr, ep_type, ep_dir,
800078de:	eb e6 10 06 	or	r6,r5,r6
800078e2:	97 06       	st.w	r11[0x0],r6
				le16_to_cpu(ep_desc->wMaxPacketSize),
				bank, AVR32_USBB_UPCFG0_AUTOSW_MASK);
		uhd_allocate_memory(pipe);
		if (!Is_uhd_pipe_configured(pipe)) {
800078e4:	fc 07 00 06 	add	r6,lr,r7
		}

		uhd_configure_pipe(pipe, ep_interval, ep_addr, ep_type, ep_dir,
				le16_to_cpu(ep_desc->wMaxPacketSize),
				bank, AVR32_USBB_UPCFG0_AUTOSW_MASK);
		uhd_allocate_memory(pipe);
800078e8:	76 07       	ld.w	r7,r11[0x0]
800078ea:	a1 b7       	sbr	r7,0x1
800078ec:	97 07       	st.w	r11[0x0],r7
		if (!Is_uhd_pipe_configured(pipe)) {
800078ee:	6c 0b       	ld.w	r11,r6[0x0]
800078f0:	e6 1b 00 04 	andh	r11,0x4,COH
800078f4:	c0 b1       	brne	8000790a <uhd_ep_alloc+0xf6>
			uhd_disable_pipe(pipe);
800078f6:	fe 68 00 00 	mov	r8,-131072
800078fa:	5c da       	com	r10
800078fc:	f0 f9 04 1c 	ld.w	r9,r8[1052]
80007900:	16 9c       	mov	r12,r11
80007902:	12 6a       	and	r10,r9
80007904:	f1 4a 04 1c 	st.w	r8[1052],r10
			return false;
80007908:	d8 32       	popm	r0-r7,pc
		}
		uhd_configure_address(pipe, add);
8000790a:	37 f6       	mov	r6,127
8000790c:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
80007910:	e2 19 00 fc 	andl	r9,0xfc,COH
80007914:	a3 7b       	lsl	r11,0x3
80007916:	e0 39 fb dc 	sub	r9,130012
8000791a:	ec 0b 09 4b 	lsl	r11,r6,r11
8000791e:	72 07       	ld.w	r7,r9[0x0]
80007920:	16 96       	mov	r6,r11
80007922:	5c 96       	brev	r6
80007924:	ec 06 12 00 	clz	r6,r6
80007928:	16 87       	andn	r7,r11
8000792a:	f8 06 09 4c 	lsl	r12,r12,r6
8000792e:	f9 eb 00 0b 	and	r11,r12,r11
80007932:	0e 4b       	or	r11,r7
80007934:	93 0b       	st.w	r9[0x0],r11
		uhd_enable_pipe(pipe);
80007936:	fe 69 00 00 	mov	r9,-131072
8000793a:	f2 fb 04 1c 	ld.w	r11,r9[1052]
8000793e:	16 4a       	or	r10,r11
80007940:	f3 4a 04 1c 	st.w	r9[1052],r10

		// Enable endpoint interrupts
		uhd_enable_pipe_dma_interrupt(pipe);
80007944:	30 0b       	mov	r11,0
80007946:	ea 1b 02 00 	orh	r11,0x200
8000794a:	f0 ca 00 01 	sub	r10,r8,1
8000794e:	f6 0a 09 4a 	lsl	r10,r11,r10
80007952:	f3 4a 04 18 	st.w	r9[1048],r10
		uhd_enable_stall_interrupt(pipe);
80007956:	e0 3e fa 10 	sub	lr,129552
8000795a:	34 0a       	mov	r10,64
8000795c:	9d 0a       	st.w	lr[0x0],r10
		uhd_enable_pipe_error_interrupt(pipe);
8000795e:	9d 04       	st.w	lr[0x0],r4
		uhd_enable_pipe_interrupt(pipe);
80007960:	e0 6a 01 00 	mov	r10,256
80007964:	30 1c       	mov	r12,1
80007966:	f4 08 09 48 	lsl	r8,r10,r8
8000796a:	f3 48 04 18 	st.w	r9[1048],r8
		return true;
8000796e:	d8 32       	popm	r0-r7,pc
80007970:	d8 3a       	popm	r0-r7,pc,r12=0

80007972 <uhd_ep0_alloc>:
	uhd_send_resume();
	uhd_sleep_mode(UHD_STATE_IDLE);
}

bool uhd_ep0_alloc(usb_add_t add, uint8_t ep_size)
{
80007972:	d4 01       	pushm	lr
	if (ep_size < 8) {
80007974:	30 78       	mov	r8,7
80007976:	f0 0b 18 00 	cp.b	r11,r8
8000797a:	e0 8b 00 03 	brhi	80007980 <uhd_ep0_alloc+0xe>
8000797e:	d8 0a       	popm	pc,r12=0
#error TODO Add USB address in a list
		return true;
	}
#endif

	uhd_enable_pipe(0);
80007980:	fe 68 00 00 	mov	r8,-131072
80007984:	f0 f9 04 1c 	ld.w	r9,r8[1052]
80007988:	a1 a9       	sbr	r9,0x0
8000798a:	f1 49 04 1c 	st.w	r8[1052],r9
	uhd_configure_pipe(0, // Pipe 0
8000798e:	30 8e       	mov	lr,8
80007990:	fe 69 05 00 	mov	r9,-129792
80007994:	f6 0e 0c 4b 	max	r11,r11,lr
80007998:	e0 6a 04 00 	mov	r10,1024
8000799c:	f6 0a 0d 4a 	min	r10,r11,r10
800079a0:	a1 7a       	lsl	r10,0x1
800079a2:	20 1a       	sub	r10,1
800079a4:	f4 0a 12 00 	clz	r10,r10
800079a8:	f4 0a 11 1c 	rsub	r10,r10,28
800079ac:	a5 6a       	lsl	r10,0x4
800079ae:	93 0a       	st.w	r9[0x0],r10
#else
			ep_size,
#endif
			AVR32_USBB_UECFG0_EPBK_SINGLE, 0);

	uhd_allocate_memory(0);
800079b0:	72 0a       	ld.w	r10,r9[0x0]
800079b2:	a1 ba       	sbr	r10,0x1
800079b4:	93 0a       	st.w	r9[0x0],r10
	if (!Is_uhd_pipe_configured(0)) {
800079b6:	fe 69 05 30 	mov	r9,-129744
800079ba:	72 09       	ld.w	r9,r9[0x0]
800079bc:	e6 19 00 04 	andh	r9,0x4,COH
800079c0:	c0 81       	brne	800079d0 <uhd_ep0_alloc+0x5e>
		uhd_disable_pipe(0);
800079c2:	12 9c       	mov	r12,r9
800079c4:	f0 f9 04 1c 	ld.w	r9,r8[1052]
800079c8:	a1 c9       	cbr	r9,0x0
800079ca:	f1 49 04 1c 	st.w	r8[1052],r9
		return false;
800079ce:	d8 02       	popm	pc
	}
	uhd_configure_address(0, add);
800079d0:	fe 6a 04 24 	mov	r10,-130012
800079d4:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800079d8:	74 09       	ld.w	r9,r10[0x0]
800079da:	e0 19 ff 80 	andl	r9,0xff80
800079de:	f9 e9 10 09 	or	r9,r12,r9
800079e2:	95 09       	st.w	r10[0x0],r9

	// Always enable stall and error interrupts of control endpoint
	uhd_enable_stall_interrupt(0);
800079e4:	fe 69 05 f0 	mov	r9,-129552
800079e8:	34 0a       	mov	r10,64
800079ea:	93 0a       	st.w	r9[0x0],r10
	uhd_enable_pipe_error_interrupt(0);
800079ec:	93 0e       	st.w	r9[0x0],lr
	uhd_enable_pipe_interrupt(0);
800079ee:	30 1c       	mov	r12,1
800079f0:	e0 69 01 00 	mov	r9,256
800079f4:	f1 49 04 18 	st.w	r8[1048],r9
	return true;
}
800079f8:	d8 02       	popm	pc
800079fa:	d7 03       	nop

800079fc <otg_dual_disable>:
# endif
}


void otg_dual_disable(void)
{
800079fc:	d4 01       	pushm	lr
	if (!otg_initialized) {
800079fe:	e0 6a 08 e8 	mov	r10,2280
80007a02:	30 0b       	mov	r11,0
80007a04:	15 88       	ld.ub	r8,r10[0x0]
80007a06:	f6 08 18 00 	cp.b	r8,r11
		return; // Dual role not initialized
	}
	otg_initialized = false;

	// Do not authorize asynchronous USB interrupts
	AVR32_PM.AWEN.usb_waken = 0;
80007a0a:	c1 b0       	breq	80007a40 <otg_dual_disable+0x44>
80007a0c:	fe 78 0c 00 	mov	r8,-62464
80007a10:	30 0c       	mov	r12,0
80007a12:	f0 f9 01 44 	ld.w	r9,r8[324]
80007a16:	f3 dc d0 01 	bfins	r9,r12,0x0,0x1
80007a1a:	f1 49 01 44 	st.w	r8[324],r9
	otg_unfreeze_clock();
80007a1e:	fe 68 08 00 	mov	r8,-129024
80007a22:	70 09       	ld.w	r9,r8[0x0]
80007a24:	af c9       	cbr	r9,0xe
# ifdef USB_ID
	otg_disable_id_interrupt();
80007a26:	91 09       	st.w	r8[0x0],r9
80007a28:	70 09       	ld.w	r9,r8[0x0]
80007a2a:	a1 c9       	cbr	r9,0x0
# endif
	otg_disable();
80007a2c:	91 09       	st.w	r8[0x0],r9
80007a2e:	70 09       	ld.w	r9,r8[0x0]
80007a30:	af d9       	cbr	r9,0xf
void otg_dual_disable(void)
{
	if (!otg_initialized) {
		return; // Dual role not initialized
	}
	otg_initialized = false;
80007a32:	91 09       	st.w	r8[0x0],r9
	otg_unfreeze_clock();
# ifdef USB_ID
	otg_disable_id_interrupt();
# endif
	otg_disable();
	otg_disable_pad();
80007a34:	b4 8b       	st.b	r10[0x0],r11
80007a36:	70 09       	ld.w	r9,r8[0x0]
80007a38:	ad c9       	cbr	r9,0xc
	sysclk_disable_usb();
80007a3a:	91 09       	st.w	r8[0x0],r9
80007a3c:	e0 a0 07 7e 	rcall	80008938 <sysclk_disable_usb>
80007a40:	d8 02       	popm	pc
80007a42:	d7 03       	nop

80007a44 <uhd_disable>:
80007a44:	d4 21       	pushm	r4-r7,lr
80007a46:	fe 69 08 04 	mov	r9,-129020
	cpu_irq_restore(flags);
}


void uhd_disable(bool b_id_stop)
{
80007a4a:	18 96       	mov	r6,r12
	irqflags_t flags;

	// Check USB clock ready after a potential sleep mode < IDLE
	while (!Is_otg_clock_usable());
80007a4c:	72 08       	ld.w	r8,r9[0x0]
80007a4e:	ed b8 00 0e 	bld	r8,0xe
80007a52:	cf d1       	brne	80007a4c <uhd_disable+0x8>
	otg_unfreeze_clock();
80007a54:	fe 67 08 00 	mov	r7,-129024
80007a58:	6e 08       	ld.w	r8,r7[0x0]
80007a5a:	af c8       	cbr	r8,0xe
80007a5c:	8f 08       	st.w	r7[0x0],r8

	// Disable Vbus change and error interrupts
	Clr_bits(AVR32_USBB.usbcon, AVR32_USBB_USBCON_VBUSTE_MASK
80007a5e:	fe 68 00 00 	mov	r8,-131072
80007a62:	f0 f9 08 00 	ld.w	r9,r8[2048]
80007a66:	e0 19 ff f5 	andl	r9,0xfff5
80007a6a:	f1 49 08 00 	st.w	r8[2048],r9
			| AVR32_USBB_USBCON_VBERRE_MASK);

	// Disable main control interrupt
	// (Connection, disconnection, SOF and reset)
	AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_DCONNIEC_MASK
80007a6e:	37 f9       	mov	r9,127
80007a70:	f1 49 04 14 	st.w	r8[1044],r9
			| AVR32_USBB_UHINTECLR_HSOFIEC_MASK
			| AVR32_USBB_UHINTECLR_RSTIEC_MASK
			| AVR32_USBB_UHINTECLR_HWUPIEC_MASK
			| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
			| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
	uhd_disable_sof();
80007a74:	fe 69 04 00 	mov	r9,-130048
80007a78:	72 08       	ld.w	r8,r9[0x0]
80007a7a:	a9 c8       	cbr	r8,0x8
80007a7c:	93 08       	st.w	r9[0x0],r8
	uhd_disable_vbus();
80007a7e:	fe 68 08 08 	mov	r8,-129016
80007a82:	e0 69 02 00 	mov	r9,512
	uhc_notify_connection(false);
80007a86:	30 0c       	mov	r12,0
			| AVR32_USBB_UHINTECLR_RSTIEC_MASK
			| AVR32_USBB_UHINTECLR_HWUPIEC_MASK
			| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
			| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
	uhd_disable_sof();
	uhd_disable_vbus();
80007a88:	91 09       	st.w	r8[0x0],r9
	uhc_notify_connection(false);
80007a8a:	e0 a0 06 f3 	rcall	80008870 <uhc_notify_connection>
	otg_freeze_clock();
80007a8e:	6e 08       	ld.w	r8,r7[0x0]
80007a90:	af a8       	sbr	r8,0xe
80007a92:	8f 08       	st.w	r7[0x0],r8

#ifdef USB_ID
	uhd_sleep_mode(UHD_STATE_WAIT_ID_HOST);
	if (!b_id_stop) {
80007a94:	58 06       	cp.w	r6,0
80007a96:	c0 90       	breq	80007aa8 <uhd_disable+0x64>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80007a98:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
80007a9c:	d3 03       	ssrf	0x10
		return; // No need to disable host, it is done automatically by hardware
	}
#endif

	flags = cpu_irq_save();
	otg_dual_disable();
80007a9e:	ca ff       	rcall	800079fc <otg_dual_disable>
80007aa0:	e6 17 00 01 	andh	r7,0x1,COH
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80007aa4:	c0 21       	brne	80007aa8 <uhd_disable+0x64>
80007aa6:	d5 03       	csrf	0x10
      cpu_irq_enable();
80007aa8:	d8 22       	popm	r4-r7,pc
   }

	barrier();
80007aaa:	d7 03       	nop

80007aac <otg_dual_enable>:
80007aac:	d4 21       	pushm	r4-r7,lr
80007aae:	e0 68 08 e8 	mov	r8,2280
80007ab2:	30 09       	mov	r9,0
	otg_data_memory_barrier();
}

bool otg_dual_enable(void)
{
	if (otg_initialized) {
80007ab4:	11 8a       	ld.ub	r10,r8[0x0]
80007ab6:	f2 0a 18 00 	cp.b	r10,r9
80007aba:	c0 20       	breq	80007abe <otg_dual_enable+0x12>
		return false; // Dual role already initialized
	}
	otg_initialized = true;
80007abc:	d8 2a       	popm	r4-r7,pc,r12=0
80007abe:	30 19       	mov	r9,1

	//* Enable USB hardware clock
	sysclk_enable_usb();
80007ac0:	b0 89       	st.b	r8[0x0],r9
80007ac2:	e0 a0 07 d3 	rcall	80008a68 <sysclk_enable_usb>

	//* Link USB interrupt on OTG interrupt in dual role
	irq_register_handler(otg_interrupt, AVR32_USBB_IRQ, UHD_USB_INT_LEVEL);
80007ac6:	30 0a       	mov	r10,0
80007ac8:	e0 6b 02 20 	mov	r11,544
80007acc:	fe cc fe c8 	sub	r12,pc,-312
 *  AVR32_PM_AWEN_xxxxWEN_MASK in the part-specific header file under
 *  "toolchain folder"/avr32/inc(lude)/avr32/)
 */
__always_inline static void pm_asyn_wake_up_enable(unsigned long awen_mask)
{
  AVR32_PM.awen |= awen_mask;
80007ad0:	fe b0 f7 e4 	rcall	80006a98 <INTC_register_interrupt>
80007ad4:	fe 79 0c 00 	mov	r9,-62464
80007ad8:	f2 f8 01 44 	ld.w	r8,r9[324]
80007adc:	a1 a8       	sbr	r8,0x0
	pm_asyn_wake_up_enable(AVR32_PM_AWEN_USB_WAKEN_MASK);

# ifdef USB_ID
	// By default USBB is already configured with ID pin enable
	// The USBB must be enabled to provide interrupt
	otg_input_id_pin();
80007ade:	f3 48 01 44 	st.w	r9[324],r8
80007ae2:	fe 78 10 00 	mov	r8,-61440
80007ae6:	30 09       	mov	r9,0
80007ae8:	ea 19 04 00 	orh	r9,0x400
80007aec:	91 69       	st.w	r8[0x18],r9
80007aee:	91 a9       	st.w	r8[0x28],r9
80007af0:	91 29       	st.w	r8[0x8],r9
	otg_unfreeze_clock();
80007af2:	f1 49 00 74 	st.w	r8[116],r9
80007af6:	fe 68 08 00 	mov	r8,-129024
80007afa:	70 09       	ld.w	r9,r8[0x0]
	otg_enable();
80007afc:	af c9       	cbr	r9,0xe
80007afe:	91 09       	st.w	r8[0x0],r9
80007b00:	70 09       	ld.w	r9,r8[0x0]
	otg_enable_id_interrupt();
80007b02:	af b9       	sbr	r9,0xf
80007b04:	91 09       	st.w	r8[0x0],r9
80007b06:	70 09       	ld.w	r9,r8[0x0]
	otg_ack_id_transition();
80007b08:	a1 a9       	sbr	r9,0x0
80007b0a:	91 09       	st.w	r8[0x0],r9
80007b0c:	30 17       	mov	r7,1
80007b0e:	fe 69 08 08 	mov	r9,-129016
	otg_freeze_clock();
80007b12:	93 07       	st.w	r9[0x0],r7
80007b14:	70 09       	ld.w	r9,r8[0x0]
	if (Is_otg_id_device()) {
80007b16:	af a9       	sbr	r9,0xe
80007b18:	91 09       	st.w	r8[0x0],r9
80007b1a:	fe 68 08 04 	mov	r8,-129020
80007b1e:	70 08       	ld.w	r8,r8[0x0]
80007b20:	ed b8 00 0a 	bld	r8,0xa
		uhd_sleep_mode(UHD_STATE_WAIT_ID_HOST);
		UHC_MODE_CHANGE(false);
80007b24:	c0 61       	brne	80007b30 <otg_dual_enable+0x84>
80007b26:	30 0c       	mov	r12,0
80007b28:	fe b0 f2 fe 	rcall	80006124 <usb_mode_change>
		udc_start();
	} else {
		UHC_MODE_CHANGE(true);
80007b2c:	0e 9c       	mov	r12,r7
80007b2e:	d8 22       	popm	r4-r7,pc
80007b30:	0e 9c       	mov	r12,r7
		uhc_start();
80007b32:	fe b0 f2 f9 	rcall	80006124 <usb_mode_change>
80007b36:	e0 a0 04 77 	rcall	80008424 <uhc_start>
	return true;  // ID pin management has been enabled
# else
	uhd_sleep_mode(UHD_STATE_OFF);
	return false; // ID pin management has not been enabled
# endif
}
80007b3a:	0e 9c       	mov	r12,r7
80007b3c:	d8 22       	popm	r4-r7,pc
80007b3e:	d7 03       	nop

80007b40 <uhd_enable>:
80007b40:	d4 21       	pushm	r4-r7,lr
80007b42:	e1 b7 00 00 	mfsr	r7,0x0
80007b46:	d3 03       	ssrf	0x10
80007b48:	cb 2f       	rcall	80007aac <otg_dual_enable>
80007b4a:	c5 71       	brne	80007bf8 <uhd_enable+0xb8>
80007b4c:	fe 6b 08 04 	mov	r11,-129020
80007b50:	76 09       	ld.w	r9,r11[0x0]
80007b52:	e2 19 04 00 	andl	r9,0x400,COH
		return;
	}

#ifdef USB_ID
	// Check that the host mode is selected by ID pin
	if (!Is_otg_id_host()) {
80007b56:	c5 11       	brne	80007bf8 <uhd_enable+0xb8>
80007b58:	fe 78 10 00 	mov	r8,-61440
	otg_force_host_mode();
#endif

	// Enable USB hardware
#ifdef USB_VBOF
	uhd_output_vbof_pin();
80007b5c:	30 0a       	mov	r10,0
80007b5e:	ea 1a 08 00 	orh	r10,0x800
80007b62:	91 6a       	st.w	r8[0x18],r10
80007b64:	91 aa       	st.w	r8[0x28],r10
80007b66:	91 2a       	st.w	r8[0x8],r10
80007b68:	f1 4a 00 88 	st.w	r8[136],r10
80007b6c:	f1 4a 00 78 	st.w	r8[120],r10
80007b70:	fe 68 08 00 	mov	r8,-129024
# if USB_VBOF_ACTIVE_LEVEL == HIGH
	uhd_set_vbof_active_high();
# else // USB_VBOF_ACTIVE_LEVEL == LOW
	uhd_set_vbof_active_low();
80007b74:	70 0a       	ld.w	r10,r8[0x0]
80007b76:	ad ba       	sbr	r10,0xd
80007b78:	91 0a       	st.w	r8[0x0],r10
80007b7a:	70 0a       	ld.w	r10,r8[0x0]
# endif
#endif
	otg_enable_pad();
80007b7c:	ad aa       	sbr	r10,0xc
80007b7e:	91 0a       	st.w	r8[0x0],r10
80007b80:	70 0a       	ld.w	r10,r8[0x0]
	otg_enable();
80007b82:	af ba       	sbr	r10,0xf
80007b84:	91 0a       	st.w	r8[0x0],r10
80007b86:	e0 6a 1c f0 	mov	r10,7408

	uhd_ctrl_request_first = NULL;
	uhd_ctrl_request_last = NULL;
	uhd_ctrl_request_timeout = 0;
80007b8a:	b4 09       	st.h	r10[0x0],r9
	uhd_suspend_start = 0;
	uhd_resume_start = 0;
	uhd_b_suspend_requested = false;

	otg_unfreeze_clock();
80007b8c:	70 0a       	ld.w	r10,r8[0x0]
80007b8e:	af ca       	cbr	r10,0xe
80007b90:	91 0a       	st.w	r8[0x0],r10
	uhd_disable_high_speed_mode();
#  endif
#endif

	// Clear all interrupts that may have been set by a previous host mode
	AVR32_USBB.uhintclr = AVR32_USBB_UHINTCLR_DCONNIC_MASK
80007b92:	37 fa       	mov	r10,127
80007b94:	fe 68 00 00 	mov	r8,-131072
80007b98:	f1 4a 04 08 	st.w	r8[1032],r10
			| AVR32_USBB_UHINTCLR_DDISCIC_MASK | AVR32_USBB_UHINTCLR_HSOFIC_MASK
			| AVR32_USBB_UHINTCLR_HWUPIC_MASK | AVR32_USBB_UHINTCLR_RSMEDIC_MASK
			| AVR32_USBB_UHINTCLR_RSTIC_MASK | AVR32_USBB_UHINTCLR_RXRSMIC_MASK;
	otg_ack_vbus_transition();
80007b9c:	fe 6a 08 08 	mov	r10,-129016
80007ba0:	30 2c       	mov	r12,2
80007ba2:	95 0c       	st.w	r10[0x0],r12

	// Enable Vbus change and error interrupts
	// Disable automatic Vbus control after Vbus error
	Set_bits(AVR32_USBB.usbcon, AVR32_USBB_USBCON_VBUSHWC_MASK
80007ba4:	f0 fa 08 00 	ld.w	r10,r8[2048]
80007ba8:	e8 1a 01 0a 	orl	r10,0x10a
80007bac:	f1 4a 08 00 	st.w	r8[2048],r10
# endif
#endif
	otg_enable_pad();
	otg_enable();

	uhd_ctrl_request_first = NULL;
80007bb0:	e0 6a 1c e4 	mov	r10,7396
80007bb4:	12 98       	mov	r8,r9
	uhd_ctrl_request_last = NULL;
80007bb6:	95 09       	st.w	r10[0x0],r9
80007bb8:	e0 6a 1c ec 	mov	r10,7404
	uhd_ctrl_request_timeout = 0;
	uhd_suspend_start = 0;
80007bbc:	95 09       	st.w	r10[0x0],r9
	uhd_resume_start = 0;
80007bbe:	e0 69 09 68 	mov	r9,2408
	uhd_b_suspend_requested = false;
80007bc2:	b2 88       	st.b	r9[0x0],r8
80007bc4:	e0 69 09 6a 	mov	r9,2410
	// Enable Vbus change and error interrupts
	// Disable automatic Vbus control after Vbus error
	Set_bits(AVR32_USBB.usbcon, AVR32_USBB_USBCON_VBUSHWC_MASK
			|AVR32_USBB_USBCON_VBUSTE_MASK
			|AVR32_USBB_USBCON_VBERRE_MASK);
	uhd_enable_vbus();
80007bc8:	b2 88       	st.b	r9[0x0],r8
80007bca:	e0 69 09 6b 	mov	r9,2411
80007bce:	b2 88       	st.b	r9[0x0],r8

	// Force Vbus interrupt when Vbus is always high
	// This is possible due to a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
80007bd0:	e0 68 02 00 	mov	r8,512
80007bd4:	fe 69 08 0c 	mov	r9,-129012
		otg_raise_vbus_transition();
80007bd8:	93 08       	st.w	r9[0x0],r8
	}

	// Enable main control interrupt
	// Connection, SOF and reset
	AVR32_USBB.uhinteset = AVR32_USBB_UHINTESET_DCONNIES_MASK
80007bda:	76 08       	ld.w	r8,r11[0x0]
80007bdc:	ed b8 00 0b 	bld	r8,0xb
80007be0:	c0 21       	brne	80007be4 <uhd_enable+0xa4>
80007be2:	93 0c       	st.w	r9[0x0],r12
			| AVR32_USBB_UHINTESET_HSOFIES_MASK
			| AVR32_USBB_UHINTESET_RSTIES_MASK;

	otg_freeze_clock();
80007be4:	32 59       	mov	r9,37
80007be6:	fe 68 00 00 	mov	r8,-131072
80007bea:	f1 49 04 18 	st.w	r8[1048],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80007bee:	fe 69 08 00 	mov	r9,-129024
80007bf2:	72 08       	ld.w	r8,r9[0x0]
      cpu_irq_enable();
80007bf4:	af a8       	sbr	r8,0xe
   }

	barrier();
80007bf6:	93 08       	st.w	r9[0x0],r8
80007bf8:	e6 17 00 01 	andh	r7,0x1,COH
80007bfc:	c0 21       	brne	80007c00 <uhd_enable+0xc0>
80007bfe:	d5 03       	csrf	0x10
80007c00:	d8 22       	popm	r4-r7,pc
80007c02:	d7 03       	nop

80007c04 <otg_interrupt>:
80007c04:	d4 31       	pushm	r0-r7,lr
80007c06:	fe 68 08 04 	mov	r8,-129020
80007c0a:	70 09       	ld.w	r9,r8[0x0]
80007c0c:	ed b9 00 00 	bld	r9,0x0
80007c10:	c2 51       	brne	80007c5a <otg_interrupt+0x56>
80007c12:	70 09       	ld.w	r9,r8[0x0]
{
	bool b_mode_device;

#ifdef USB_ID
	if (Is_otg_id_transition()) {
		while (!Is_otg_clock_usable());
80007c14:	ed b9 00 0e 	bld	r9,0xe
80007c18:	cf d1       	brne	80007c12 <otg_interrupt+0xe>
		otg_unfreeze_clock();
80007c1a:	fe 68 08 00 	mov	r8,-129024
80007c1e:	70 09       	ld.w	r9,r8[0x0]
80007c20:	af c9       	cbr	r9,0xe
80007c22:	91 09       	st.w	r8[0x0],r9
		otg_ack_id_transition();
80007c24:	30 1c       	mov	r12,1
80007c26:	fe 69 08 08 	mov	r9,-129016
80007c2a:	93 0c       	st.w	r9[0x0],r12
		otg_freeze_clock();
80007c2c:	70 09       	ld.w	r9,r8[0x0]
80007c2e:	af a9       	sbr	r9,0xe
80007c30:	91 09       	st.w	r8[0x0],r9
		if (Is_otg_id_device()) {
80007c32:	fe 68 08 04 	mov	r8,-129020
80007c36:	70 08       	ld.w	r8,r8[0x0]
80007c38:	ed b8 00 0a 	bld	r8,0xa
80007c3c:	c0 91       	brne	80007c4e <otg_interrupt+0x4a>
			uhc_stop(false);
80007c3e:	30 0c       	mov	r12,0
80007c40:	e0 a0 03 ee 	rcall	8000841c <uhc_stop>
			UHC_MODE_CHANGE(false);
80007c44:	30 0c       	mov	r12,0
80007c46:	fe b0 f2 6f 	rcall	80006124 <usb_mode_change>
80007c4a:	e0 8f 03 2e 	bral	800082a6 <otg_interrupt+0x6a2>
			udc_start();
		} else {
			udc_stop();
			UHC_MODE_CHANGE(true);
80007c4e:	fe b0 f2 6b 	rcall	80006124 <usb_mode_change>
			uhc_start();
80007c52:	e0 a0 03 e9 	rcall	80008424 <uhc_start>
80007c56:	e0 8f 03 28 	bral	800082a6 <otg_interrupt+0x6a2>
		}
		return;
	}
	b_mode_device = Is_otg_id_device();
80007c5a:	70 08       	ld.w	r8,r8[0x0]
#else
	b_mode_device = Is_otg_device_mode_forced();
#endif

	// Redirection to host or device interrupt
	if (b_mode_device) {
80007c5c:	ed b8 00 0a 	bld	r8,0xa
80007c60:	e0 80 03 1f 	breq	8000829e <otg_interrupt+0x69a>
static void uhd_interrupt(void)
{
	uint8_t pipe_int;

	// Manage SOF interrupt
	if (Is_uhd_sof()) {
80007c64:	fe 6a 04 04 	mov	r10,-130044
80007c68:	74 08       	ld.w	r8,r10[0x0]
80007c6a:	ed b8 00 05 	bld	r8,0x5
80007c6e:	e0 81 00 83 	brne	80007d74 <otg_interrupt+0x170>
		uhd_ack_sof();
80007c72:	32 09       	mov	r9,32
80007c74:	fe 68 04 08 	mov	r8,-130040
80007c78:	91 09       	st.w	r8[0x0],r9
			return;
		}
	}

	// Manage a delay to enter in suspend
	if (uhd_suspend_start) {
80007c7a:	e0 69 09 68 	mov	r9,2408
80007c7e:	13 88       	ld.ub	r8,r9[0x0]
80007c80:	58 08       	cp.w	r8,0
		if (--uhd_suspend_start == 0) {
80007c82:	c2 80       	breq	80007cd2 <otg_interrupt+0xce>
80007c84:	20 18       	sub	r8,1
80007c86:	5c 58       	castu.b	r8
80007c88:	b2 88       	st.b	r9[0x0],r8
80007c8a:	c0 80       	breq	80007c9a <otg_interrupt+0x96>
80007c8c:	e0 8f 03 09 	bral	8000829e <otg_interrupt+0x69a>
#ifdef AVR32_USBB_USBSTA_SPEED_HIGH // If UTMI
			while (115<uhd_get_frame_position()) {
#else
			while (185<uhd_get_frame_position()) {
#endif
				if (Is_uhd_disconnection()) {
80007c90:	74 08       	ld.w	r8,r10[0x0]
80007c92:	ed b8 00 01 	bld	r8,0x1
80007c96:	c0 41       	brne	80007c9e <otg_interrupt+0x9a>
			// then wait end of SOF generation
			// to be sure that disable SOF has been accepted
#ifdef AVR32_USBB_USBSTA_SPEED_HIGH // If UTMI
			while (115<uhd_get_frame_position()) {
#else
			while (185<uhd_get_frame_position()) {
80007c98:	c0 a8       	rjmp	80007cac <otg_interrupt+0xa8>
80007c9a:	fe 69 04 20 	mov	r9,-130016
80007c9e:	72 08       	ld.w	r8,r9[0x0]
80007ca0:	f1 d8 c2 08 	bfextu	r8,r8,0x10,0x8
80007ca4:	e0 48 00 b9 	cp.w	r8,185
80007ca8:	fe 9b ff f4 	brhi	80007c90 <otg_interrupt+0x8c>
#endif
				if (Is_uhd_disconnection()) {
					break;
				}
			}
			uhd_disable_sof();
80007cac:	fe 69 04 00 	mov	r9,-130048
80007cb0:	72 08       	ld.w	r8,r9[0x0]
80007cb2:	a9 c8       	cbr	r8,0x8

			// Ack previous wakeup and resumes interrupts
			AVR32_USBB.uhintclr = AVR32_USBB_UHINTCLR_HWUPIC_MASK
80007cb4:	93 08       	st.w	r9[0x0],r8
80007cb6:	fe 68 00 00 	mov	r8,-131072
80007cba:	35 89       	mov	r9,88
80007cbc:	f1 49 04 08 	st.w	r8[1032],r9
					|AVR32_USBB_UHINTCLR_RSMEDIC_MASK
					|AVR32_USBB_UHINTCLR_RXRSMIC_MASK;

			// Enable wakeup/resumes interrupts
			AVR32_USBB.uhinteset = AVR32_USBB_UHINTESET_HWUPIES_MASK
80007cc0:	f1 49 04 18 	st.w	r8[1048],r9
					|AVR32_USBB_UHINTESET_RSMEDIES_MASK
					|AVR32_USBB_UHINTESET_RXRSMIES_MASK;

			otg_freeze_clock();
80007cc4:	fe 69 08 00 	mov	r9,-129024
80007cc8:	72 08       	ld.w	r8,r9[0x0]
80007cca:	af a8       	sbr	r8,0xe
80007ccc:	93 08       	st.w	r9[0x0],r8
80007cce:	e0 8f 02 e8 	bral	8000829e <otg_interrupt+0x69a>
			uhd_sleep_mode(UHD_STATE_SUSPEND);
		}
		return; // Abort SOF events
	}
	// Manage a delay to exit of suspend
	if (uhd_resume_start) {
80007cd2:	e0 69 09 6a 	mov	r9,2410
80007cd6:	13 88       	ld.ub	r8,r9[0x0]
		if (--uhd_resume_start == 0) {
80007cd8:	58 08       	cp.w	r8,0
80007cda:	c1 b0       	breq	80007d10 <otg_interrupt+0x10c>
80007cdc:	20 18       	sub	r8,1
80007cde:	5c 58       	castu.b	r8
80007ce0:	b2 88       	st.b	r9[0x0],r8
80007ce2:	e0 81 02 de 	brne	8000829e <otg_interrupt+0x69a>
			// Restore pipes unfreezed
			for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
80007ce6:	fe 69 06 24 	mov	r9,-129500
					uhd_unfreeze_pipe(pipe);
80007cea:	e0 6b 09 69 	mov	r11,2409
	// Manage a delay to exit of suspend
	if (uhd_resume_start) {
		if (--uhd_resume_start == 0) {
			// Restore pipes unfreezed
			for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
80007cee:	e2 6a 00 00 	mov	r10,131072
80007cf2:	2f f8       	sub	r8,-1
80007cf4:	17 8c       	ld.ub	r12,r11[0x0]
80007cf6:	f8 08 08 4c 	asr	r12,r12,r8
					uhd_unfreeze_pipe(pipe);
80007cfa:	ed bc 00 00 	bld	r12,0x0
	}
	// Manage a delay to exit of suspend
	if (uhd_resume_start) {
		if (--uhd_resume_start == 0) {
			// Restore pipes unfreezed
			for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
80007cfe:	c0 21       	brne	80007d02 <otg_interrupt+0xfe>
80007d00:	93 0a       	st.w	r9[0x0],r10
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
					uhd_unfreeze_pipe(pipe);
				}
			}
			uhc_notify_resume();
80007d02:	2f c9       	sub	r9,-4
80007d04:	58 68       	cp.w	r8,6
80007d06:	cf 61       	brne	80007cf2 <otg_interrupt+0xee>
80007d08:	e0 a0 03 9c 	rcall	80008440 <uhc_notify_resume>
		}
		return; // Abort SOF events
	}
	// Manage the timeout on endpoint control transfer
	if (uhd_ctrl_request_timeout) {
80007d0c:	e0 8f 02 c9 	bral	8000829e <otg_interrupt+0x69a>
80007d10:	e0 68 1c f0 	mov	r8,7408
		// Setup request on-going
		if (--uhd_ctrl_request_timeout == 0) {
80007d14:	90 09       	ld.sh	r9,r8[0x0]
80007d16:	58 09       	cp.w	r9,0
80007d18:	c0 f0       	breq	80007d36 <otg_interrupt+0x132>
80007d1a:	90 09       	ld.sh	r9,r8[0x0]
80007d1c:	20 19       	sub	r9,1
			// Stop request
			uhd_freeze_pipe(0);
80007d1e:	b0 09       	st.h	r8[0x0],r9
80007d20:	90 08       	ld.sh	r8,r8[0x0]
80007d22:	58 08       	cp.w	r8,0
80007d24:	c0 91       	brne	80007d36 <otg_interrupt+0x132>
			uhd_ctrl_request_end(UHD_TRANS_TIMEOUT);
80007d26:	e2 69 00 00 	mov	r9,131072
80007d2a:	fe 68 05 f0 	mov	r8,-129552
80007d2e:	30 7c       	mov	r12,7
80007d30:	91 09       	st.w	r8[0x0],r9
	}
	// Manage the timeouts on endpoint transfer
	uhd_pipe_job_t *ptr_job;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		ptr_job = &uhd_pipe_job[pipe-1];
		if (ptr_job->busy == true) {
80007d32:	fe b0 fc 4f 	rcall	800075d0 <uhd_ctrl_request_end>
80007d36:	e0 67 08 f0 	mov	r7,2288
			if (ptr_job->timeout) {
				// Timeout enabled on this job
				if (--ptr_job->timeout == 0) {
80007d3a:	30 06       	mov	r6,0
80007d3c:	6e 08       	ld.w	r8,r7[0x0]
80007d3e:	58 08       	cp.w	r8,0
	// Manage the timeouts on endpoint transfer
	uhd_pipe_job_t *ptr_job;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		ptr_job = &uhd_pipe_job[pipe-1];
		if (ptr_job->busy == true) {
			if (ptr_job->timeout) {
80007d40:	c0 f4       	brge	80007d5e <otg_interrupt+0x15a>
80007d42:	8e 19       	ld.sh	r9,r7[0x2]
				// Timeout enabled on this job
				if (--ptr_job->timeout == 0) {
80007d44:	f2 c8 00 01 	sub	r8,r9,1
80007d48:	5c 88       	casts.h	r8
					// Abort job
					uhd_ep_abort_pipe(pipe,UHD_TRANS_TIMEOUT);
80007d4a:	58 09       	cp.w	r9,0
80007d4c:	c0 90       	breq	80007d5e <otg_interrupt+0x15a>
80007d4e:	ae 18       	st.h	r7[0x2],r8
80007d50:	58 08       	cp.w	r8,0
80007d52:	c0 61       	brne	80007d5e <otg_interrupt+0x15a>
80007d54:	ec cc ff ff 	sub	r12,r6,-1
			uhd_ctrl_request_end(UHD_TRANS_TIMEOUT);
		}
	}
	// Manage the timeouts on endpoint transfer
	uhd_pipe_job_t *ptr_job;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
80007d58:	30 7b       	mov	r11,7
80007d5a:	fe b0 fa fd 	rcall	80007354 <uhd_ep_abort_pipe>
				}
			}
		}
	}
	// Notify the UHC
	uhc_notify_sof(false);
80007d5e:	2f f6       	sub	r6,-1
80007d60:	2e c7       	sub	r7,-20

	// Notify the user application
	UHC_SOF_EVENT();
80007d62:	58 66       	cp.w	r6,6
80007d64:	ce c1       	brne	80007d3c <otg_interrupt+0x138>
80007d66:	30 0c       	mov	r12,0
80007d68:	e0 a0 03 1c 	rcall	800083a0 <uhc_notify_sof>
80007d6c:	fe b0 f1 e1 	rcall	8000612e <usb_sof>
80007d70:	e0 8f 02 97 	bral	8000829e <otg_interrupt+0x69a>
80007d74:	fe 69 00 00 	mov	r9,-131072
80007d78:	f2 fc 04 04 	ld.w	r12,r9[1028]
80007d7c:	f2 f8 04 10 	ld.w	r8,r9[1040]
80007d80:	a9 8c       	lsr	r12,0x8
80007d82:	f9 e8 02 8c 	and	r12,r12,r8>>0x8
80007d86:	a7 bc       	sbr	r12,0x7
80007d88:	5c 9c       	brev	r12
80007d8a:	f8 0c 12 00 	clz	r12,r12
80007d8e:	e0 81 01 1d 	brne	80007fc8 <otg_interrupt+0x3c4>
80007d92:	30 78       	mov	r8,7
80007d94:	f3 48 06 20 	st.w	r9[1568],r8
80007d98:	fe 68 05 30 	mov	r8,-129744
80007d9c:	70 09       	ld.w	r9,r8[0x0]
80007d9e:	ed b9 00 02 	bld	r9,0x2
		uhd_sof_interrupt();
		return;
	}

	// Manage pipe interrupts
	pipe_int = uhd_get_interrupt_pipe_number();
80007da2:	c4 71       	brne	80007e30 <otg_interrupt+0x22c>
80007da4:	fe 6b 05 f0 	mov	r11,-129552
80007da8:	e2 6a 00 00 	mov	r10,131072
80007dac:	97 0a       	st.w	r11[0x0],r10
80007dae:	30 49       	mov	r9,4
80007db0:	fe 68 05 60 	mov	r8,-129696
80007db4:	91 09       	st.w	r8[0x0],r9
80007db6:	18 9e       	mov	lr,r12
80007db8:	e0 69 1c e4 	mov	r9,7396
	if (pipe_int == 0) {
80007dbc:	72 09       	ld.w	r9,r9[0x0]
{
	// A setup request is on-going
	Assert(uhd_ctrl_request_timeout!=0);

	// Disable setup, IN and OUT interrupts of control endpoint
	AVR32_USBB.upcon0clr = AVR32_USBB_UPCON0CLR_TXSTPEC_MASK
80007dbe:	13 97       	ld.ub	r7,r9[0x1]
80007dc0:	f8 07 18 00 	cp.b	r7,r12
			| AVR32_USBB_UPCON0CLR_RXINEC_MASK
			| AVR32_USBB_UPCON0CLR_TXOUTEC_MASK;

	// Search event on control endpoint
	if (Is_uhd_setup_ready(0)) {
80007dc4:	c1 64       	brge	80007df0 <otg_interrupt+0x1ec>
80007dc6:	fe 6c 05 00 	mov	r12,-129792
80007dca:	78 09       	ld.w	r9,r12[0x0]
80007dcc:	e0 19 fc ff 	andl	r9,0xfcff
		// SETUP packet sent
		uhd_freeze_pipe(0);
80007dd0:	a9 a9       	sbr	r9,0x8
80007dd2:	99 09       	st.w	r12[0x0],r9
80007dd4:	30 19       	mov	r9,1
80007dd6:	91 09       	st.w	r8[0x0],r9
80007dd8:	e0 6c 00 80 	mov	r12,128
		uhd_ack_setup_ready(0);
80007ddc:	91 0c       	st.w	r8[0x0],r12
80007dde:	97 09       	st.w	r11[0x0],r9
80007de0:	fe 68 06 20 	mov	r8,-129504
		Assert(uhd_ctrl_request_phase == UHD_CTRL_REQ_PHASE_SETUP);

		// Start DATA phase
		if ((uhd_ctrl_request_first->req.bmRequestType & USB_REQ_DIR_MASK)
80007de4:	e0 69 40 00 	mov	r9,16384
80007de8:	91 09       	st.w	r8[0x0],r9
80007dea:	91 0a       	st.w	r8[0x0],r10
80007dec:	30 29       	mov	r9,2
80007dee:	c1 e8       	rjmp	80007e2a <otg_interrupt+0x226>
 * \brief Starts the DATA IN phase on control endpoint
 */
static void uhd_ctrl_phase_data_in_start(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_IN;
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_IN);
80007df0:	f3 3e 00 08 	ld.ub	lr,r9[8]
80007df4:	13 f9       	ld.ub	r9,r9[0x7]
80007df6:	fd e9 10 89 	or	r9,lr,r9<<0x8
80007dfa:	f8 09 19 00 	cp.h	r9,r12
	uhd_ack_in_received(0);
80007dfe:	e0 81 00 bf 	brne	80007f7c <otg_interrupt+0x378>
	uhd_ack_short_packet(0);
80007e02:	fe 6c 05 00 	mov	r12,-129792
80007e06:	78 09       	ld.w	r9,r12[0x0]
	uhd_enable_in_received_interrupt(0);
80007e08:	e0 19 fc ff 	andl	r9,0xfcff
	uhd_ack_fifocon(0);
80007e0c:	a9 a9       	sbr	r9,0x8
80007e0e:	99 09       	st.w	r12[0x0],r9
80007e10:	30 19       	mov	r9,1
80007e12:	91 09       	st.w	r8[0x0],r9
	uhd_unfreeze_pipe(0);
80007e14:	e0 6c 00 80 	mov	r12,128
 * \internal
 * \brief Starts the DATA IN phase on control endpoint
 */
static void uhd_ctrl_phase_data_in_start(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_IN;
80007e18:	91 0c       	st.w	r8[0x0],r12
		// Start DATA phase
		if ((uhd_ctrl_request_first->req.bmRequestType & USB_REQ_DIR_MASK)
				== USB_REQ_DIR_IN ) {
			uhd_ctrl_phase_data_in_start();
		} else {
			if (uhd_ctrl_request_first->req.wLength) {
80007e1a:	97 09       	st.w	r11[0x0],r9
80007e1c:	fe 68 06 20 	mov	r8,-129504
80007e20:	e0 69 40 00 	mov	r9,16384
80007e24:	91 09       	st.w	r8[0x0],r9
80007e26:	91 0a       	st.w	r8[0x0],r10
80007e28:	30 39       	mov	r9,3
80007e2a:	e0 68 1c e0 	mov	r8,7392
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_IN);
80007e2e:	c6 c9       	rjmp	80008106 <otg_interrupt+0x502>
80007e30:	70 0c       	ld.w	r12,r8[0x0]
80007e32:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80007e36:	e0 80 00 8d 	breq	80007f50 <otg_interrupt+0x34c>
	uhd_ack_in_received(0);
80007e3a:	fe 69 05 c0 	mov	r9,-129600
	uhd_ack_short_packet(0);
80007e3e:	72 08       	ld.w	r8,r9[0x0]
80007e40:	ed b8 00 11 	bld	r8,0x11
	uhd_enable_in_received_interrupt(0);
80007e44:	cf d1       	brne	80007e3e <otg_interrupt+0x23a>
	uhd_ack_fifocon(0);
80007e46:	fe 68 05 60 	mov	r8,-129696
80007e4a:	30 19       	mov	r9,1
80007e4c:	91 09       	st.w	r8[0x0],r9
80007e4e:	e0 68 1c e0 	mov	r8,7392
 * \internal
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
80007e52:	70 08       	ld.w	r8,r8[0x0]
80007e54:	58 28       	cp.w	r8,2
80007e56:	c0 50       	breq	80007e60 <otg_interrupt+0x25c>
				uhd_ctrl_phase_zlp_in();
			}
		}
		return;
	}
	if (Is_uhd_in_received(0)) {
80007e58:	58 38       	cp.w	r8,3
80007e5a:	e0 81 02 22 	brne	8000829e <otg_interrupt+0x69a>
80007e5e:	c7 78       	rjmp	80007f4c <otg_interrupt+0x348>
80007e60:	fe 68 05 30 	mov	r8,-129744
		// In case of low USB speed and with a high CPU frequency,
		// a ACK from host can be always running on USB line
		// then wait end of ACK on IN pipe.
		while(!Is_uhd_pipe_frozen(0));
80007e64:	30 02       	mov	r2,0
80007e66:	ea 12 d0 00 	orh	r2,0xd000
80007e6a:	70 06       	ld.w	r6,r8[0x0]
80007e6c:	e0 63 1c e4 	mov	r3,7396

		// IN packet received
		uhd_ack_in_received(0);
80007e70:	70 00       	ld.w	r0,r8[0x0]
80007e72:	ed d6 c2 88 	bfextu	r6,r6,0x14,0x8
		switch(uhd_ctrl_request_phase) {
80007e76:	30 07       	mov	r7,0
80007e78:	30 04       	mov	r4,0
80007e7a:	e0 65 1c e8 	mov	r5,7400
80007e7e:	fe 61 04 24 	mov	r1,-130012
80007e82:	c1 08       	rjmp	80007ea2 <otg_interrupt+0x29e>
80007e84:	05 39       	ld.ub	r9,r2++
	bool b_short_packet;
	uint8_t *ptr_ep_data;
	uint8_t nb_byte_received;

	// Get information to read data
	nb_byte_received = uhd_byte_count(0);
80007e86:	74 38       	ld.w	r8,r10[0xc]
80007e88:	10 c9       	st.b	r8++,r9
	//! In HUB mode, the control pipe is always configured to 64B
	//! thus the short packet flag must be computed
	b_short_packet = (nb_byte_received != uhd_get_pipe_size(0));
	uhd_ack_short_packet(0);
#else
	b_short_packet = Is_uhd_short_packet(0);
80007e8a:	95 38       	st.w	r10[0xc],r8
80007e8c:	8a 08       	ld.sh	r8,r5[0x0]
80007e8e:	2f f8       	sub	r8,-1
	bool b_short_packet;
	uint8_t *ptr_ep_data;
	uint8_t nb_byte_received;

	// Get information to read data
	nb_byte_received = uhd_byte_count(0);
80007e90:	aa 08       	st.h	r5[0x0],r8
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
80007e92:	ed de c0 08 	bfextu	r6,lr,0x0,0x8
	bool b_short_packet;
	uint8_t *ptr_ep_data;
	uint8_t nb_byte_received;

	// Get information to read data
	nb_byte_received = uhd_byte_count(0);
80007e96:	66 08       	ld.w	r8,r3[0x0]
80007e98:	f1 09 00 10 	ld.sh	r9,r8[16]
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
80007e9c:	20 19       	sub	r9,1
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
		uhd_ctrl_nb_trans++;
80007e9e:	f1 59 00 10 	st.h	r8[16],r9

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
80007ea2:	66 0a       	ld.w	r10,r3[0x0]
80007ea4:	ee 06 18 00 	cp.b	r6,r7

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
80007ea8:	5f 18       	srne	r8
80007eaa:	f5 09 00 10 	ld.sh	r9,r10[16]
		uhd_ctrl_nb_trans++;
80007eae:	ec ce 00 01 	sub	lr,r6,1
80007eb2:	e8 09 19 00 	cp.h	r9,r4
		uhd_ctrl_request_first->payload_size--;
		nb_byte_received--;
80007eb6:	5f 1c       	srne	r12
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
		uhd_ctrl_nb_trans++;
		uhd_ctrl_request_first->payload_size--;
80007eb8:	f4 cb ff f4 	sub	r11,r10,-12
80007ebc:	f1 ec 00 0c 	and	r12,r8,r12
80007ec0:	ee 0c 18 00 	cp.b	r12,r7
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
80007ec4:	ce 01       	brne	80007e84 <otg_interrupt+0x280>
80007ec6:	e8 09 19 00 	cp.h	r9,r4
80007eca:	5f 09       	sreq	r9
80007ecc:	12 68       	and	r8,r9
80007ece:	ee 08 18 00 	cp.b	r8,r7
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
		uhd_ctrl_nb_trans++;
		uhd_ctrl_request_first->payload_size--;
		nb_byte_received--;
80007ed2:	c0 b0       	breq	80007ee8 <otg_interrupt+0x2e4>
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
80007ed4:	74 58       	ld.w	r8,r10[0x14]
80007ed6:	58 08       	cp.w	r8,0
80007ed8:	c1 60       	breq	80007f04 <otg_interrupt+0x300>
		nb_byte_received--;
	}

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
80007eda:	62 0c       	ld.w	r12,r1[0x0]
80007edc:	2f 0a       	sub	r10,-16
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
80007ede:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80007ee2:	5d 18       	icall	r8
80007ee4:	cd f1       	brne	80007ea2 <otg_interrupt+0x29e>
80007ee6:	c0 f8       	rjmp	80007f04 <otg_interrupt+0x300>
		uhd_ctrl_nb_trans++;
		uhd_ctrl_request_first->payload_size--;
		nb_byte_received--;
	}

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
80007ee8:	f5 38 00 08 	ld.ub	r8,r10[8]
80007eec:	e0 69 1c e8 	mov	r9,7400
80007ef0:	15 fa       	ld.ub	r10,r10[0x7]
80007ef2:	92 09       	ld.sh	r9,r9[0x0]
80007ef4:	f1 ea 10 88 	or	r8,r8,r10<<0x8
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
80007ef8:	f0 09 19 00 	cp.h	r9,r8
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
80007efc:	c0 40       	breq	80007f04 <otg_interrupt+0x300>
		nb_byte_received--;
	}

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
80007efe:	e2 10 00 80 	andl	r0,0x80,COH
80007f02:	c1 90       	breq	80007f34 <otg_interrupt+0x330>
80007f04:	fe 69 05 00 	mov	r9,-129792
80007f08:	72 08       	ld.w	r8,r9[0x0]
80007f0a:	e0 18 fc ff 	andl	r8,0xfcff
80007f0e:	a9 b8       	sbr	r8,0x9
80007f10:	93 08       	st.w	r9[0x0],r8
80007f12:	30 28       	mov	r8,2
80007f14:	fe 69 05 60 	mov	r9,-129696
		// thus the data load can restart.
		goto uhd_ctrl_receiv_in_read_data;
	}

	// Test short packet
	if ((uhd_ctrl_nb_trans == uhd_ctrl_request_first->req.wLength)
80007f18:	93 08       	st.w	r9[0x0],r8
80007f1a:	fe 69 05 f0 	mov	r9,-129552
80007f1e:	93 08       	st.w	r9[0x0],r8
80007f20:	e0 69 40 00 	mov	r9,16384
80007f24:	fe 68 06 20 	mov	r8,-129504
80007f28:	91 09       	st.w	r8[0x0],r9
80007f2a:	30 4a       	mov	r10,4
80007f2c:	e0 69 1c e0 	mov	r9,7392
80007f30:	93 0a       	st.w	r9[0x0],r10
 * \brief Starts the ZLP OUT phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_out(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_OUT;
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
80007f32:	c0 a8       	rjmp	80007f46 <otg_interrupt+0x342>
80007f34:	30 19       	mov	r9,1
80007f36:	fe 68 05 f0 	mov	r8,-129552
80007f3a:	91 09       	st.w	r8[0x0],r9
80007f3c:	fe 68 06 20 	mov	r8,-129504
	uhd_ack_out_ready(0);
80007f40:	e0 69 40 00 	mov	r9,16384
80007f44:	91 09       	st.w	r8[0x0],r9
80007f46:	e2 69 00 00 	mov	r9,131072
	uhd_enable_out_ready_interrupt(0);
80007f4a:	cd e8       	rjmp	80008106 <otg_interrupt+0x502>
80007f4c:	30 0c       	mov	r12,0
	uhd_ack_fifocon(0);
80007f4e:	c3 a8       	rjmp	80007fc2 <otg_interrupt+0x3be>
80007f50:	70 09       	ld.w	r9,r8[0x0]
80007f52:	ed b9 00 01 	bld	r9,0x1
80007f56:	c1 71       	brne	80007f84 <otg_interrupt+0x380>
 * \internal
 * \brief Starts the ZLP OUT phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_out(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_OUT;
80007f58:	e2 69 00 00 	mov	r9,131072
80007f5c:	fe 68 05 f0 	mov	r8,-129552
		uhd_ctrl_phase_zlp_out();
		return;
	}

	// Send a new IN packet request
	uhd_enable_in_received_interrupt(0);
80007f60:	91 09       	st.w	r8[0x0],r9
80007f62:	fe 68 05 60 	mov	r8,-129696
80007f66:	30 29       	mov	r9,2
	uhd_ack_fifocon(0);
80007f68:	91 09       	st.w	r8[0x0],r9
80007f6a:	e0 68 1c e0 	mov	r8,7392
80007f6e:	70 08       	ld.w	r8,r8[0x0]
80007f70:	58 18       	cp.w	r8,1
	uhd_unfreeze_pipe(0);
80007f72:	c0 50       	breq	80007f7c <otg_interrupt+0x378>
80007f74:	58 48       	cp.w	r8,4
80007f76:	e0 81 01 94 	brne	8000829e <otg_interrupt+0x69a>
		switch(uhd_ctrl_request_phase) {
		case UHD_CTRL_REQ_PHASE_DATA_IN:
			uhd_ctrl_phase_data_in();
			break;
		case UHD_CTRL_REQ_PHASE_ZLP_IN:
			uhd_ctrl_request_end(UHD_TRANS_NOERROR);
80007f7a:	c2 48       	rjmp	80007fc2 <otg_interrupt+0x3be>
			Assert(false);
			break;
		}
		return;
	}
	if (Is_uhd_out_ready(0)) {
80007f7c:	fe b0 f8 c8 	rcall	8000710c <uhd_ctrl_phase_data_out>
80007f80:	e0 8f 01 8f 	bral	8000829e <otg_interrupt+0x69a>
		// OUT packet sent
		uhd_freeze_pipe(0);
80007f84:	70 09       	ld.w	r9,r8[0x0]
80007f86:	e2 19 00 40 	andl	r9,0x40,COH
80007f8a:	c0 70       	breq	80007f98 <otg_interrupt+0x394>
80007f8c:	34 09       	mov	r9,64
		uhd_ack_out_ready(0);
80007f8e:	fe 68 05 60 	mov	r8,-129696
80007f92:	30 4c       	mov	r12,4
80007f94:	91 09       	st.w	r8[0x0],r9
		switch(uhd_ctrl_request_phase) {
80007f96:	c1 68       	rjmp	80007fc2 <otg_interrupt+0x3be>
80007f98:	70 08       	ld.w	r8,r8[0x0]
80007f9a:	ed b8 00 03 	bld	r8,0x3
80007f9e:	e0 81 01 80 	brne	8000829e <otg_interrupt+0x69a>
80007fa2:	fe 6a 06 80 	mov	r10,-129408
		case UHD_CTRL_REQ_PHASE_DATA_OUT:
			uhd_ctrl_phase_data_out();
80007fa6:	74 08       	ld.w	r8,r10[0x0]
80007fa8:	95 09       	st.w	r10[0x0],r9
80007faa:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
			Assert(false);
			break;
		}
		return;
	}
	if (Is_uhd_stall(0)) {
80007fae:	20 18       	sub	r8,1
80007fb0:	58 28       	cp.w	r8,2
80007fb2:	e0 88 00 04 	brls	80007fba <otg_interrupt+0x3b6>
		// Stall Handshake received
		uhd_ack_stall(0);
80007fb6:	30 6c       	mov	r12,6
80007fb8:	c0 58       	rjmp	80007fc2 <otg_interrupt+0x3be>
80007fba:	fe c9 e0 3e 	sub	r9,pc,-8130
80007fbe:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		uhd_ctrl_request_end(UHD_TRANS_STALL);
		return;
	}
	if (Is_uhd_pipe_error(0)) {
80007fc2:	fe b0 fb 07 	rcall	800075d0 <uhd_ctrl_request_end>
80007fc6:	c6 c9       	rjmp	8000829e <otg_interrupt+0x69a>
80007fc8:	30 78       	mov	r8,7
80007fca:	f0 0c 18 00 	cp.b	r12,r8
 *
 * \return UHD transfer error
 */
static uhd_trans_status_t uhd_pipe_get_error(uint8_t pipe)
{
	uint32_t error = uhd_error_status(pipe) &
80007fce:	c6 60       	breq	8000809a <otg_interrupt+0x496>
80007fd0:	f8 08 15 02 	lsl	r8,r12,0x2
			(AVR32_USBB_UPERR0_DATATGL_MASK |
			AVR32_USBB_UPERR0_TIMEOUT_MASK |
			AVR32_USBB_UPERR0_PID_MASK |
			AVR32_USBB_UPERR0_DATAPID_MASK);
	uhd_ack_all_errors(pipe);
80007fd4:	fe 6b 05 c0 	mov	r11,-129600
80007fd8:	f0 0b 00 0a 	add	r10,r8,r11
80007fdc:	74 09       	ld.w	r9,r10[0x0]
80007fde:	ed b9 00 0c 	bld	r9,0xc
80007fe2:	c1 11       	brne	80008004 <otg_interrupt+0x400>
80007fe4:	fe 6b 05 30 	mov	r11,-129744
80007fe8:	f0 0b 00 09 	add	r9,r8,r11
		uhd_ctrl_request_end(UHD_TRANS_STALL);
		return;
	}
	if (Is_uhd_pipe_error(0)) {
		// Get and ack error
		uhd_ctrl_request_end(uhd_pipe_get_error(0));
80007fec:	72 0b       	ld.w	r11,r9[0x0]
80007fee:	f7 db c1 82 	bfextu	r11,r11,0xc,0x2
	if (pipe_int == 0) {
		// Interrupt acked by control endpoint managed
		uhd_ctrl_interrupt();
		return;
	}
	if (pipe_int != AVR32_USBB_EPT_NUM) {
80007ff2:	c0 91       	brne	80008004 <otg_interrupt+0x400>
80007ff4:	e0 38 f9 e0 	sub	r8,129504
 *
 * \param pipe  Pipe number
 */
static void uhd_pipe_interrupt(uint8_t pipe)
{
	if (Is_uhd_bank_interrupt_enabled(pipe) && (0==uhd_nb_busy_bank(pipe))) {
80007ff8:	e0 69 10 00 	mov	r9,4096
80007ffc:	91 09       	st.w	r8[0x0],r9
80007ffe:	fe b0 f9 6f 	rcall	800072dc <uhd_pipe_finish_job>
80008002:	c4 e9       	rjmp	8000829e <otg_interrupt+0x69a>
80008004:	74 09       	ld.w	r9,r10[0x0]
80008006:	ed b9 00 01 	bld	r9,0x1
8000800a:	c1 b1       	brne	80008040 <otg_interrupt+0x43c>
8000800c:	fe 6a 05 30 	mov	r10,-129744
80008010:	f0 0a 00 09 	add	r9,r8,r10
80008014:	72 09       	ld.w	r9,r9[0x0]
80008016:	ed b9 00 01 	bld	r9,0x1
8000801a:	c1 31       	brne	80008040 <otg_interrupt+0x43c>
		uhd_disable_bank_interrupt(pipe);
8000801c:	30 2a       	mov	r10,2
8000801e:	fe 6c 06 20 	mov	r12,-129504
80008022:	f0 0c 00 09 	add	r9,r8,r12
		uhd_pipe_finish_job(pipe, UHD_TRANS_NOERROR);
80008026:	93 0a       	st.w	r9[0x0],r10
80008028:	fe 6c 05 60 	mov	r12,-129696
8000802c:	f0 0c 00 0b 	add	r11,r8,r12
80008030:	97 0a       	st.w	r11[0x0],r10
80008032:	e0 6a 40 00 	mov	r10,16384
80008036:	93 0a       	st.w	r9[0x0],r10
80008038:	e2 6a 00 00 	mov	r10,131072
8000803c:	93 0a       	st.w	r9[0x0],r10
8000803e:	c6 08       	rjmp	800080fe <otg_interrupt+0x4fa>
80008040:	fe 6b 05 30 	mov	r11,-129744
		return;
	}
	if (Is_uhd_out_ready_interrupt_enabled(pipe) && Is_uhd_out_ready(pipe)) {
80008044:	f0 0b 00 0a 	add	r10,r8,r11
80008048:	74 09       	ld.w	r9,r10[0x0]
8000804a:	e2 19 00 40 	andl	r9,0x40,COH
8000804e:	c0 e0       	breq	8000806a <otg_interrupt+0x466>
80008050:	fe 6a 05 60 	mov	r10,-129696
80008054:	f0 0a 00 09 	add	r9,r8,r10
80008058:	34 0a       	mov	r10,64
8000805a:	93 0a       	st.w	r9[0x0],r10
		uhd_disable_out_ready_interrupt(pipe);
8000805c:	e0 38 fa 10 	sub	r8,129552
80008060:	e4 69 00 00 	mov	r9,262144
80008064:	30 4b       	mov	r11,4
80008066:	91 09       	st.w	r8[0x0],r9
		// One bank is free then send a ZLP
		uhd_ack_out_ready(pipe);
80008068:	c1 68       	rjmp	80008094 <otg_interrupt+0x490>
8000806a:	74 0a       	ld.w	r10,r10[0x0]
8000806c:	ed ba 00 03 	bld	r10,0x3
80008070:	e0 81 01 17 	brne	8000829e <otg_interrupt+0x69a>
		uhd_ack_fifocon(pipe);
80008074:	e0 38 f9 80 	sub	r8,129408
		uhd_unfreeze_pipe(pipe);
80008078:	70 0a       	ld.w	r10,r8[0x0]
8000807a:	91 09       	st.w	r8[0x0],r9
8000807c:	f1 da c0 04 	bfextu	r8,r10,0x0,0x4
		uhd_enable_bank_interrupt(pipe);
		return;
	}
	if (Is_uhd_stall(pipe)) {
80008080:	20 18       	sub	r8,1
80008082:	58 28       	cp.w	r8,2
80008084:	e0 88 00 04 	brls	8000808c <otg_interrupt+0x488>
80008088:	30 6b       	mov	r11,6
8000808a:	c0 58       	rjmp	80008094 <otg_interrupt+0x490>
8000808c:	fe c9 e1 10 	sub	r9,pc,-7920
		uhd_ack_stall(pipe);
80008090:	f2 08 03 2b 	ld.w	r11,r9[r8<<0x2]
80008094:	fe b0 f9 60 	rcall	80007354 <uhd_ep_abort_pipe>
80008098:	c0 39       	rjmp	8000829e <otg_interrupt+0x69a>
8000809a:	f2 fc 04 04 	ld.w	r12,r9[1028]
		uhd_reset_data_toggle(pipe);
8000809e:	f2 fb 04 10 	ld.w	r11,r9[1040]
800080a2:	b9 9c       	lsr	r12,0x19
		uhd_ep_abort_pipe(pipe, UHD_TRANS_STALL);
800080a4:	f9 eb 03 9c 	and	r12,r12,r11>>0x19
		uhd_enable_bank_interrupt(pipe);
		return;
	}
	if (Is_uhd_stall(pipe)) {
		uhd_ack_stall(pipe);
		uhd_reset_data_toggle(pipe);
800080a8:	a7 ac       	sbr	r12,0x6
		uhd_ep_abort_pipe(pipe, UHD_TRANS_STALL);
		return;
	}
	if (Is_uhd_pipe_error(pipe)) {
800080aa:	5c 9c       	brev	r12
800080ac:	f8 0c 12 00 	clz	r12,r12
800080b0:	2f fc       	sub	r12,-1
800080b2:	f0 0c 18 00 	cp.b	r12,r8
 *
 * \return UHD transfer error
 */
static uhd_trans_status_t uhd_pipe_get_error(uint8_t pipe)
{
	uint32_t error = uhd_error_status(pipe) &
800080b6:	c4 10       	breq	80008138 <otg_interrupt+0x534>
800080b8:	f8 08 15 04 	lsl	r8,r12,0x4
			(AVR32_USBB_UPERR0_DATATGL_MASK |
			AVR32_USBB_UPERR0_TIMEOUT_MASK |
			AVR32_USBB_UPERR0_PID_MASK |
			AVR32_USBB_UPERR0_DATAPID_MASK);
	uhd_ack_all_errors(pipe);
800080bc:	e0 38 f9 00 	sub	r8,129280
800080c0:	70 39       	ld.w	r9,r8[0xc]
800080c2:	ed b9 00 00 	bld	r9,0x0
800080c6:	e0 80 00 ec 	breq	8000829e <otg_interrupt+0x69a>
800080ca:	70 39       	ld.w	r9,r8[0xc]
800080cc:	b1 89       	lsr	r9,0x10
800080ce:	c0 d0       	breq	800080e8 <otg_interrupt+0x4e4>
800080d0:	e0 6a 08 f0 	mov	r10,2288
		uhd_ep_abort_pipe(pipe, UHD_TRANS_STALL);
		return;
	}
	if (Is_uhd_pipe_error(pipe)) {
		// Get and ack error
		uhd_ep_abort_pipe(pipe, uhd_pipe_get_error(pipe));
800080d4:	f8 c8 00 01 	sub	r8,r12,1
	if (pipe_int != AVR32_USBB_EPT_NUM) {
		// Interrupt acked by bulk/interrupt/isochronous endpoint
		uhd_pipe_interrupt(pipe_int);
		return;
	}
	pipe_int = uhd_get_pipe_dma_interrupt_number();
800080d8:	f0 08 00 28 	add	r8,r8,r8<<0x2
800080dc:	f4 08 00 28 	add	r8,r10,r8<<0x2
800080e0:	70 3a       	ld.w	r10,r8[0xc]
800080e2:	12 1a       	sub	r10,r9
800080e4:	91 2a       	st.w	r8[0x8],r10
800080e6:	91 3a       	st.w	r8[0xc],r10
800080e8:	f8 08 15 02 	lsl	r8,r12,0x2
800080ec:	fe 6b 05 00 	mov	r11,-129792
	if (pipe_int != AVR32_USBB_EPT_NUM) {
800080f0:	f0 0b 00 0a 	add	r10,r8,r11
800080f4:	74 0a       	ld.w	r10,r10[0x0]
static void uhd_pipe_interrupt_dma(uint8_t pipe)
{
	uhd_pipe_job_t *ptr_job;
	uint32_t nb_remaining;

	if (uhd_pipe_dma_get_status(pipe)
800080f6:	f5 da c1 02 	bfextu	r10,r10,0x8,0x2
800080fa:	58 2a       	cp.w	r10,2
800080fc:	c0 71       	brne	8000810a <otg_interrupt+0x506>
800080fe:	e0 38 fa 10 	sub	r8,129552
80008102:	e0 69 10 00 	mov	r9,4096
80008106:	91 09       	st.w	r8[0x0],r9
			& AVR32_USBB_UHDMA1_STATUS_CH_EN_MASK) {
		return; // Ignore EOT_STA interrupt
	}
	// Save number of data no transfered
	nb_remaining = (uhd_pipe_dma_get_status(pipe) &
80008108:	cc b8       	rjmp	8000829e <otg_interrupt+0x69a>
8000810a:	fe 6a 05 c0 	mov	r10,-129600
			AVR32_USBB_UHDMA1_STATUS_CH_BYTE_CNT_MASK)
			>> AVR32_USBB_UHDMA1_STATUS_CH_BYTE_CNT_OFFSET;
	if (nb_remaining) {
		// Get job corresponding at endpoint
		ptr_job = &uhd_pipe_job[pipe - 1];
8000810e:	f0 0a 00 0b 	add	r11,r8,r10
80008112:	76 0a       	ld.w	r10,r11[0x0]
80008114:	ed ba 00 11 	bld	r10,0x11
80008118:	c0 d0       	breq	80008132 <otg_interrupt+0x52e>
8000811a:	58 09       	cp.w	r9,0

		// Transfer no complete (short packet or ZLP) then:
		// Update number of transfered data
		ptr_job->nb_trans -= nb_remaining;
8000811c:	c0 70       	breq	8000812a <otg_interrupt+0x526>
8000811e:	e0 38 fa 10 	sub	r8,129552
80008122:	e2 69 00 00 	mov	r9,131072

		// Set transfer complete to stop the transfer
		ptr_job->buf_size = ptr_job->nb_trans;
	}

	if (uhd_is_pipe_out(pipe)) {
80008126:	91 09       	st.w	r8[0x0],r9
80008128:	c0 58       	rjmp	80008132 <otg_interrupt+0x52e>
8000812a:	76 08       	ld.w	r8,r11[0x0]
8000812c:	ed b8 00 11 	bld	r8,0x11
80008130:	cf d1       	brne	8000812a <otg_interrupt+0x526>
80008132:	fe b0 f9 41 	rcall	800073b4 <uhd_pipe_trans_complet>
80008136:	cb 48       	rjmp	8000829e <otg_interrupt+0x69a>
80008138:	74 08       	ld.w	r8,r10[0x0]
		// Wait that all banks are free to freeze clock of OUT endpoint
		// and call callback
		uhd_enable_bank_interrupt(pipe);
8000813a:	e2 18 00 04 	andl	r8,0x4,COH
8000813e:	c0 d0       	breq	80008158 <otg_interrupt+0x554>
80008140:	fe 68 04 08 	mov	r8,-130040
80008144:	30 49       	mov	r9,4
	} else {
		if (!Is_uhd_pipe_frozen(pipe)) {
80008146:	91 09       	st.w	r8[0x0],r9
80008148:	e0 68 08 ec 	mov	r8,2284
8000814c:	70 08       	ld.w	r8,r8[0x0]
8000814e:	58 08       	cp.w	r8,0
80008150:	e0 80 00 a7 	breq	8000829e <otg_interrupt+0x69a>
80008154:	5d 18       	icall	r8
			// Pipe is not freeze in case of :
			// - incomplete transfer when the request number INRQ is not complete.
			// - low USB speed and with a high CPU frequency,
			// a ACK from host can be always running on USB line.

			if (nb_remaining) {
80008156:	ca 48       	rjmp	8000829e <otg_interrupt+0x69a>
80008158:	74 0a       	ld.w	r10,r10[0x0]
				// Freeze pipe in case of incomplete transfer
				uhd_freeze_pipe(pipe);
8000815a:	ed ba 00 01 	bld	r10,0x1
8000815e:	c2 31       	brne	800081a4 <otg_interrupt+0x5a0>
80008160:	fe 6a 04 10 	mov	r10,-130032
80008164:	74 0a       	ld.w	r10,r10[0x0]
			} else {
				// Wait freeze in case of ASK on going
				while (!Is_uhd_pipe_frozen(pipe)) {
80008166:	ed ba 00 01 	bld	r10,0x1
8000816a:	c1 d1       	brne	800081a4 <otg_interrupt+0x5a0>
8000816c:	30 2a       	mov	r10,2
				}
			}
		}
		uhd_pipe_trans_complet(pipe);
8000816e:	fe 6b 04 08 	mov	r11,-130040
80008172:	97 0a       	st.w	r11[0x0],r10
		// Interrupt DMA acked by bulk/interrupt/isochronous endpoint
		uhd_pipe_interrupt_dma(pipe_int);
		return;
	}
	// USB bus reset detection
	if (Is_uhd_reset_sent()) {
80008174:	fe 6b 04 14 	mov	r11,-130028
80008178:	97 0a       	st.w	r11[0x0],r10
8000817a:	fe 6b 04 00 	mov	r11,-130048
		uhd_ack_reset_sent();
8000817e:	76 0a       	ld.w	r10,r11[0x0]
80008180:	a9 da       	cbr	r10,0x9
80008182:	97 0a       	st.w	r11[0x0],r10
		if (uhd_reset_callback != NULL) {
80008184:	35 8a       	mov	r10,88
80008186:	f3 4a 04 14 	st.w	r9[1044],r10
8000818a:	fe 69 04 18 	mov	r9,-130024
			uhd_reset_callback();
8000818e:	30 1a       	mov	r10,1
80008190:	93 0a       	st.w	r9[0x0],r10
		}
		return;
	}

	// Manage dis/connection event
	if (Is_uhd_disconnection() && Is_uhd_disconnection_int_enabled()) {
80008192:	e0 69 09 68 	mov	r9,2408
80008196:	10 9c       	mov	r12,r8
80008198:	b2 88       	st.b	r9[0x0],r8
8000819a:	e0 69 09 6a 	mov	r9,2410
8000819e:	b2 88       	st.b	r9[0x0],r8
800081a0:	c2 58       	rjmp	800081ea <otg_interrupt+0x5e6>
800081a2:	d7 03       	nop
800081a4:	fe 68 04 04 	mov	r8,-130044
		uhd_ack_disconnection();
800081a8:	70 08       	ld.w	r8,r8[0x0]
800081aa:	ed b8 00 00 	bld	r8,0x0
		uhd_disable_disconnection_int();
800081ae:	c2 11       	brne	800081f0 <otg_interrupt+0x5ec>
800081b0:	fe 68 04 10 	mov	r8,-130032
		// Stop reset signal, in case of disconnection during reset
		uhd_stop_reset();
800081b4:	70 08       	ld.w	r8,r8[0x0]
800081b6:	ed b8 00 00 	bld	r8,0x0
800081ba:	c1 b1       	brne	800081f0 <otg_interrupt+0x5ec>
800081bc:	fe 68 04 08 	mov	r8,-130040
		// Disable wakeup/resumes interrupts,
		// in case of disconnection during suspend mode
		AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_HWUPIEC_MASK
800081c0:	30 1c       	mov	r12,1
800081c2:	91 0c       	st.w	r8[0x0],r12
				| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
				| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
		uhd_sleep_mode(UHD_STATE_DISCONNECT);
		uhd_enable_connection_int();
800081c4:	fe 68 04 14 	mov	r8,-130028
800081c8:	91 0c       	st.w	r8[0x0],r12
800081ca:	fe 68 04 18 	mov	r8,-130024
		uhd_suspend_start = 0;
		uhd_resume_start = 0;
		uhc_notify_connection(false);
800081ce:	30 29       	mov	r9,2
		AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_HWUPIEC_MASK
				| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
				| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
		uhd_sleep_mode(UHD_STATE_DISCONNECT);
		uhd_enable_connection_int();
		uhd_suspend_start = 0;
800081d0:	fe 6a 04 00 	mov	r10,-130048
		uhd_resume_start = 0;
800081d4:	91 09       	st.w	r8[0x0],r9
800081d6:	74 08       	ld.w	r8,r10[0x0]
800081d8:	a9 a8       	sbr	r8,0x8
800081da:	95 08       	st.w	r10[0x0],r8
800081dc:	e0 68 09 68 	mov	r8,2408
800081e0:	30 09       	mov	r9,0
800081e2:	b0 89       	st.b	r8[0x0],r9
800081e4:	e0 68 09 6a 	mov	r8,2410
800081e8:	b0 89       	st.b	r8[0x0],r9
800081ea:	e0 a0 03 43 	rcall	80008870 <uhc_notify_connection>
800081ee:	c5 88       	rjmp	8000829e <otg_interrupt+0x69a>
800081f0:	fe 69 08 04 	mov	r9,-129020
		uhc_notify_connection(false);
		return;
	}
	if (Is_uhd_connection() && Is_uhd_connection_int_enabled()) {
800081f4:	72 08       	ld.w	r8,r9[0x0]
800081f6:	ed b8 00 03 	bld	r8,0x3
800081fa:	c0 81       	brne	8000820a <otg_interrupt+0x606>
800081fc:	30 89       	mov	r9,8
800081fe:	fe 68 08 08 	mov	r8,-129016
80008202:	91 09       	st.w	r8[0x0],r9
80008204:	fe b0 ef 92 	rcall	80006128 <usb_vbus_error>
80008208:	c4 b8       	rjmp	8000829e <otg_interrupt+0x69a>
8000820a:	72 08       	ld.w	r8,r9[0x0]
		uhd_ack_connection();
8000820c:	ed b8 00 0e 	bld	r8,0xe
80008210:	cf d1       	brne	8000820a <otg_interrupt+0x606>
80008212:	fe 69 08 00 	mov	r9,-129024
		uhd_disable_connection_int();
80008216:	72 08       	ld.w	r8,r9[0x0]
80008218:	af c8       	cbr	r8,0xe
		uhd_enable_disconnection_int();
8000821a:	93 08       	st.w	r9[0x0],r8
8000821c:	fe 68 04 10 	mov	r8,-130032
		uhd_enable_sof();
80008220:	70 08       	ld.w	r8,r8[0x0]
80008222:	ed b8 00 06 	bld	r8,0x6
80008226:	c2 51       	brne	80008270 <otg_interrupt+0x66c>
80008228:	fe 68 04 04 	mov	r8,-130044
		uhd_sleep_mode(UHD_STATE_IDLE);
		uhd_suspend_start = 0;
8000822c:	70 09       	ld.w	r9,r8[0x0]
8000822e:	ed b9 00 06 	bld	r9,0x6
		uhd_resume_start = 0;
80008232:	c0 90       	breq	80008244 <otg_interrupt+0x640>
80008234:	70 09       	ld.w	r9,r8[0x0]
		uhc_notify_connection(true);
80008236:	ed b9 00 03 	bld	r9,0x3
8000823a:	c0 50       	breq	80008244 <otg_interrupt+0x640>
		return;
	}

	// Manage Vbus error
	if (Is_uhd_vbus_error_interrupt()) {
8000823c:	70 08       	ld.w	r8,r8[0x0]
8000823e:	ed b8 00 04 	bld	r8,0x4
80008242:	c1 71       	brne	80008270 <otg_interrupt+0x66c>
80008244:	35 89       	mov	r9,88
80008246:	fe 68 00 00 	mov	r8,-131072
		uhd_ack_vbus_error_interrupt();
8000824a:	f1 49 04 14 	st.w	r8[1044],r9
8000824e:	fe 6a 04 00 	mov	r10,-130048
		UHC_VBUS_ERROR();
80008252:	74 08       	ld.w	r8,r10[0x0]
80008254:	a9 a8       	sbr	r8,0x8
		return;
	}

	// Check USB clock ready after asynchronous interrupt
	while (!Is_otg_clock_usable());
80008256:	95 08       	st.w	r10[0x0],r8
80008258:	fe 69 04 04 	mov	r9,-130044
8000825c:	72 08       	ld.w	r8,r9[0x0]
	otg_unfreeze_clock();
8000825e:	ed b8 00 03 	bld	r8,0x3
80008262:	c0 20       	breq	80008266 <otg_interrupt+0x662>
80008264:	72 08       	ld.w	r8,r9[0x0]
80008266:	33 29       	mov	r9,50

	if (Is_uhd_wakeup_interrupt_enabled() && (Is_uhd_wakeup() ||
80008268:	e0 68 09 6a 	mov	r8,2410
8000826c:	b0 89       	st.b	r8[0x0],r9
8000826e:	c1 88       	rjmp	8000829e <otg_interrupt+0x69a>
80008270:	fe 69 08 04 	mov	r9,-129020
80008274:	72 08       	ld.w	r8,r9[0x0]
80008276:	ed b8 00 01 	bld	r8,0x1
8000827a:	c1 21       	brne	8000829e <otg_interrupt+0x69a>
8000827c:	30 2a       	mov	r10,2
8000827e:	fe 68 08 08 	mov	r8,-129016
80008282:	91 0a       	st.w	r8[0x0],r10
80008284:	72 0c       	ld.w	r12,r9[0x0]
80008286:	e2 1c 08 00 	andl	r12,0x800,COH
8000828a:	c0 30       	breq	80008290 <otg_interrupt+0x68c>
8000828c:	30 1c       	mov	r12,1
8000828e:	c0 68       	rjmp	8000829a <otg_interrupt+0x696>
			Is_uhd_downstream_resume() || Is_uhd_upstream_resume())) {
		// Disable wakeup/resumes interrupts
		AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_HWUPIEC_MASK
80008290:	fe 69 08 00 	mov	r9,-129024
80008294:	72 08       	ld.w	r8,r9[0x0]
80008296:	af a8       	sbr	r8,0xe
80008298:	93 08       	st.w	r9[0x0],r8
				| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
				| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
		uhd_enable_sof();
8000829a:	fe b0 ef 46 	rcall	80006126 <usb_vbus_change>
8000829e:	fe 68 00 00 	mov	r8,-131072
800082a2:	f0 f8 08 18 	ld.w	r8,r8[2072]
		if ((!Is_uhd_downstream_resume())
800082a6:	d4 32       	popm	r0-r7,lr
800082a8:	d6 03       	rete
800082aa:	d7 03       	nop

800082ac <print_hex>:
  print(usart, tmp);
}


void print_hex(volatile avr32_usart_t *usart, unsigned long n)
{
800082ac:	d4 01       	pushm	lr
800082ae:	20 3d       	sub	sp,12
  char tmp[9];
  int i;

  // Convert the given number to an ASCII hexadecimal representation.
  tmp[8] = '\0';
800082b0:	30 08       	mov	r8,0
  // Transmit the resulting string with the given USART.
  print(usart, tmp);
}


void print_hex(volatile avr32_usart_t *usart, unsigned long n)
800082b2:	fa ca 00 01 	sub	r10,sp,1
{
  char tmp[9];
  int i;

  // Convert the given number to an ASCII hexadecimal representation.
  tmp[8] = '\0';
800082b6:	fb 68 00 08 	st.b	sp[8],r8
  for (i = 7; i >= 0; i--)
  {
    tmp[i] = HEX_DIGITS[n & 0xF];
800082ba:	fe c9 e3 22 	sub	r9,pc,-7390
{
  char tmp[9];
  int i;

  // Convert the given number to an ASCII hexadecimal representation.
  tmp[8] = '\0';
800082be:	fa c8 ff f9 	sub	r8,sp,-7
  for (i = 7; i >= 0; i--)
  {
    tmp[i] = HEX_DIGITS[n & 0xF];
800082c2:	fd db c0 04 	bfextu	lr,r11,0x0,0x4
800082c6:	f2 0e 07 0e 	ld.ub	lr,r9[lr]
    n >>= 4;
800082ca:	b0 8e       	st.b	r8[0x0],lr
800082cc:	a5 8b       	lsr	r11,0x4
  char tmp[9];
  int i;

  // Convert the given number to an ASCII hexadecimal representation.
  tmp[8] = '\0';
  for (i = 7; i >= 0; i--)
800082ce:	20 18       	sub	r8,1
800082d0:	14 38       	cp.w	r8,r10


void print(volatile avr32_usart_t *usart, const char *str)
{
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
800082d2:	cf 81       	brne	800082c2 <print_hex+0x16>
800082d4:	1a 9b       	mov	r11,sp
800082d6:	fe b0 f6 53 	rcall	80006f7c <usart_write_line>
    n >>= 4;
  }

  // Transmit the resulting string with the given USART.
  print(usart, tmp);
}
800082da:	2f dd       	sub	sp,-12
800082dc:	d8 02       	popm	pc
800082de:	d7 03       	nop

800082e0 <print_dbg_hex>:
800082e0:	d4 01       	pushm	lr
800082e2:	18 9b       	mov	r11,r12


void print_dbg_hex(unsigned long n)
{
  // Redirection to the debug USART.
  print_hex(DBG_USART, n);
800082e4:	fe 7c 18 00 	mov	r12,-59392
800082e8:	ce 2f       	rcall	800082ac <print_hex>
800082ea:	d8 02       	popm	pc

800082ec <print_ulong>:
}
800082ec:	d4 21       	pushm	r4-r7,lr
800082ee:	20 3d       	sub	sp,12
800082f0:	30 08       	mov	r8,0
800082f2:	1a 99       	mov	r9,sp
{
  char tmp[11];
  int i = sizeof(tmp) - 1;

  // Convert the given number to an ASCII decimal representation.
  tmp[i] = '\0';
800082f4:	fb 68 00 0a 	st.b	sp[10],r8
800082f8:	30 a8       	mov	r8,10
  do
  {
    tmp[--i] = '0' + n % 10;
800082fa:	10 9a       	mov	r10,r8
800082fc:	f6 0a 0d 06 	divu	r6,r11,r10
80008300:	20 18       	sub	r8,1
80008302:	0e 9b       	mov	r11,r7
80008304:	2d 0b       	sub	r11,-48
80008306:	f2 08 0b 0b 	st.b	r9[r8],r11
    n /= 10;
8000830a:	0c 9b       	mov	r11,r6
  } while (n);
8000830c:	58 06       	cp.w	r6,0
8000830e:	cf 71       	brne	800082fc <print_ulong+0x10>


void print(volatile avr32_usart_t *usart, const char *str)
{
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
80008310:	f2 08 00 0b 	add	r11,r9,r8
80008314:	fe b0 f6 34 	rcall	80006f7c <usart_write_line>
    n /= 10;
  } while (n);

  // Transmit the resulting string with the given USART.
  print(usart, tmp + i);
}
80008318:	2f dd       	sub	sp,-12
8000831a:	d8 22       	popm	r4-r7,pc

8000831c <print_dbg_ulong>:
8000831c:	d4 01       	pushm	lr
8000831e:	18 9b       	mov	r11,r12


void print_dbg_ulong(unsigned long n)
{
  // Redirection to the debug USART.
  print_ulong(DBG_USART, n);
80008320:	fe 7c 18 00 	mov	r12,-59392
80008324:	ce 4f       	rcall	800082ec <print_ulong>
80008326:	d8 02       	popm	pc

80008328 <print_dbg>:
}
80008328:	d4 01       	pushm	lr
8000832a:	18 9b       	mov	r11,r12
8000832c:	fe 7c 18 00 	mov	r12,-59392


void print(volatile avr32_usart_t *usart, const char *str)
{
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
80008330:	fe b0 f6 26 	rcall	80006f7c <usart_write_line>

void print_dbg(const char *str)
{
  // Redirection to the debug USART.
  print(DBG_USART, str);
}
80008334:	d8 02       	popm	pc
80008336:	d7 03       	nop

80008338 <init_dbg_rs232_ex>:
80008338:	d4 21       	pushm	r4-r7,lr
8000833a:	20 3d       	sub	sp,12
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
8000833c:	30 08       	mov	r8,0
8000833e:	fb 68 00 08 	st.b	sp[8],r8
80008342:	ba 38       	st.h	sp[0x6],r8
80008344:	30 88       	mov	r8,8
80008346:	ba c8       	st.b	sp[0x4],r8
80008348:	30 48       	mov	r8,4
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
}


void init_dbg_rs232_ex(unsigned long baudrate, long pba_hz)
{
8000834a:	16 97       	mov	r7,r11
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
8000834c:	50 0c       	stdsp	sp[0x0],r12

  // Setup GPIO for debug USART.
  gpio_enable_module(DBG_USART_GPIO_MAP,
8000834e:	30 2b       	mov	r11,2
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
80008350:	ba d8       	st.b	sp[0x5],r8

  // Setup GPIO for debug USART.
  gpio_enable_module(DBG_USART_GPIO_MAP,
80008352:	fe cc e3 ca 	sub	r12,pc,-7222
80008356:	fe b0 f3 29 	rcall	800069a8 <gpio_enable_module>
                     sizeof(DBG_USART_GPIO_MAP) / sizeof(DBG_USART_GPIO_MAP[0]));

  // Initialize it in RS232 mode.
  usart_init_rs232(DBG_USART, &dbg_usart_options, pba_hz);
8000835a:	0e 9a       	mov	r10,r7
8000835c:	1a 9b       	mov	r11,sp
8000835e:	fe 7c 18 00 	mov	r12,-59392
80008362:	fe b0 f6 35 	rcall	80006fcc <usart_init_rs232>
}
80008366:	2f dd       	sub	sp,-12
80008368:	d8 22       	popm	r4-r7,pc
8000836a:	d7 03       	nop

8000836c <init_dbg_rs232>:
8000836c:	d4 01       	pushm	lr
8000836e:	18 9b       	mov	r11,r12
80008370:	e0 6c e1 00 	mov	r12,57600
static const char HEX_DIGITS[16] = "0123456789ABCDEF";


void init_dbg_rs232(long pba_hz)
{
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
80008374:	ce 2f       	rcall	80008338 <init_dbg_rs232_ex>
80008376:	d8 02       	popm	pc

80008378 <uhc_enumeration_step2>:
 * \param callback Callback to call at the end of timeout
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
		uhc_sof_timeout_callback_t callback)
{
	uhc_sof_timeout_callback = callback;
80008378:	fe c9 ff 2c 	sub	r9,pc,-212
8000837c:	e0 68 09 8c 	mov	r8,2444
	uhc_sof_timeout = timeout;
80008380:	91 09       	st.w	r8[0x0],r9
80008382:	31 49       	mov	r9,20
 * Lets USB line in IDLE state during 20ms.
 */
static void uhc_enumeration_step2(void)
{
	uhc_enable_timeout_callback(20, uhc_enumeration_step3);
}
80008384:	e0 68 1c f2 	mov	r8,7410
80008388:	b0 89       	st.b	r8[0x0],r9
8000838a:	5e fc       	retal	r12

8000838c <uhc_enumeration_step8>:
8000838c:	fe c9 fd fc 	sub	r9,pc,-516
80008390:	e0 68 09 8c 	mov	r8,2444
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
		uhc_sof_timeout_callback_t callback)
{
	uhc_sof_timeout_callback = callback;
	uhc_sof_timeout = timeout;
80008394:	91 09       	st.w	r8[0x0],r9
80008396:	36 49       	mov	r9,100
 */
static void uhc_enumeration_step8(void)
{
	// Wait 100ms
	uhc_enable_timeout_callback(100, uhc_enumeration_step9);
}
80008398:	e0 68 1c f2 	mov	r8,7410
8000839c:	b0 89       	st.b	r8[0x0],r9
8000839e:	5e fc       	retal	r12

800083a0 <uhc_notify_sof>:
800083a0:	d4 21       	pushm	r4-r7,lr
800083a2:	fe c8 e3 fa 	sub	r8,pc,-7174
800083a6:	18 97       	mov	r7,r12

void uhc_notify_sof(bool b_micro)
{
	// Call all UHIs
	for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
		if (uhc_uhis[i].sof_notify != NULL) {
800083a8:	70 38       	ld.w	r8,r8[0xc]
800083aa:	58 08       	cp.w	r8,0
			uhc_uhis[i].sof_notify(b_micro);
800083ac:	c0 20       	breq	800083b0 <uhc_notify_sof+0x10>
		}
	}

	if (!b_micro) {
800083ae:	5d 18       	icall	r8
800083b0:	58 07       	cp.w	r7,0
		// Manage SOF timeout
		if (uhc_sof_timeout) {
800083b2:	c0 e1       	brne	800083ce <uhc_notify_sof+0x2e>
800083b4:	e0 69 1c f2 	mov	r9,7410
800083b8:	13 88       	ld.ub	r8,r9[0x0]
			if (--uhc_sof_timeout == 0) {
800083ba:	58 08       	cp.w	r8,0
800083bc:	c0 90       	breq	800083ce <uhc_notify_sof+0x2e>
800083be:	20 18       	sub	r8,1
800083c0:	5c 58       	castu.b	r8
				uhc_sof_timeout_callback();
800083c2:	b2 88       	st.b	r9[0x0],r8
800083c4:	c0 51       	brne	800083ce <uhc_notify_sof+0x2e>
800083c6:	e0 68 09 8c 	mov	r8,2444
800083ca:	70 08       	ld.w	r8,r8[0x0]
800083cc:	5d 18       	icall	r8
800083ce:	d8 22       	popm	r4-r7,pc

800083d0 <uhc_remotewakeup>:
800083d0:	d4 01       	pushm	lr
800083d2:	20 2d       	sub	sp,8
800083d4:	e0 68 09 6c 	mov	r8,2412
	usb_setup_req_t req;
	uhc_device_t *dev;

	dev = &g_uhc_device_root;
	while(1) {
		if (dev->conf_desc->bmAttributes & USB_CONFIG_ATTR_REMOTE_WAKEUP) {
800083d8:	70 68       	ld.w	r8,r8[0x18]
800083da:	11 f8       	ld.ub	r8,r8[0x7]
800083dc:	ed b8 00 05 	bld	r8,0x5
			if (b_enable) {
800083e0:	c1 b1       	brne	80008416 <uhc_remotewakeup+0x46>
800083e2:	58 0c       	cp.w	r12,0
				req.bRequest = USB_REQ_SET_FEATURE;
800083e4:	c0 30       	breq	800083ea <uhc_remotewakeup+0x1a>
800083e6:	30 38       	mov	r8,3
			} else {
				req.bRequest = USB_REQ_CLEAR_FEATURE;
800083e8:	c0 28       	rjmp	800083ec <uhc_remotewakeup+0x1c>
800083ea:	30 18       	mov	r8,1
			req.bmRequestType = USB_REQ_RECIP_DEVICE
					|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_OUT;
			req.wValue = USB_DEV_FEATURE_REMOTE_WAKEUP;
			req.wIndex = 0;
			req.wLength = 0;
			uhd_setup_request(dev->address,&req,NULL,0,NULL,NULL);
800083ec:	ba 98       	st.b	sp[0x1],r8
				req.bRequest = USB_REQ_CLEAR_FEATURE;
			}
			req.bmRequestType = USB_REQ_RECIP_DEVICE
					|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_OUT;
			req.wValue = USB_DEV_FEATURE_REMOTE_WAKEUP;
			req.wIndex = 0;
800083ee:	30 09       	mov	r9,0
			req.wLength = 0;
800083f0:	30 08       	mov	r8,0
				req.bRequest = USB_REQ_CLEAR_FEATURE;
			}
			req.bmRequestType = USB_REQ_RECIP_DEVICE
					|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_OUT;
			req.wValue = USB_DEV_FEATURE_REMOTE_WAKEUP;
			req.wIndex = 0;
800083f2:	ba 38       	st.h	sp[0x6],r8
			req.wLength = 0;
			uhd_setup_request(dev->address,&req,NULL,0,NULL,NULL);
800083f4:	ba 28       	st.h	sp[0x4],r8
800083f6:	1a d9       	st.w	--sp,r9
			if (b_enable) {
				req.bRequest = USB_REQ_SET_FEATURE;
			} else {
				req.bRequest = USB_REQ_CLEAR_FEATURE;
			}
			req.bmRequestType = USB_REQ_RECIP_DEVICE
800083f8:	12 98       	mov	r8,r9
					|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_OUT;
			req.wValue = USB_DEV_FEATURE_REMOTE_WAKEUP;
800083fa:	ba c9       	st.b	sp[0x4],r9
800083fc:	30 19       	mov	r9,1
			req.wIndex = 0;
			req.wLength = 0;
			uhd_setup_request(dev->address,&req,NULL,0,NULL,NULL);
800083fe:	ba 39       	st.h	sp[0x6],r9
80008400:	e0 69 09 6c 	mov	r9,2412
80008404:	fa cb ff fc 	sub	r11,sp,-4
80008408:	f3 3c 00 12 	ld.ub	r12,r9[18]
8000840c:	10 9a       	mov	r10,r8
8000840e:	10 99       	mov	r9,r8
80008410:	fe b0 f9 74 	rcall	800076f8 <uhd_setup_request>
		dev = dev->next;
#else
		break;
#endif
	}
}
80008414:	2f fd       	sub	sp,-4
80008416:	2f ed       	sub	sp,-8
80008418:	d8 02       	popm	pc
8000841a:	d7 03       	nop

8000841c <uhc_stop>:
8000841c:	d4 01       	pushm	lr
8000841e:	fe b0 fb 13 	rcall	80007a44 <uhd_disable>

void uhc_stop(bool b_id_stop)
{
	// Stop UHD
	uhd_disable(b_id_stop);
}
80008422:	d8 02       	popm	pc

80008424 <uhc_start>:
80008424:	d4 01       	pushm	lr
80008426:	3f f9       	mov	r9,-1
 *
 * @{
 */
void uhc_start(void)
{
	g_uhc_device_root.address = UHC_USB_ADD_NOT_VALID;
80008428:	e0 68 09 6c 	mov	r8,2412
8000842c:	f1 69 00 12 	st.b	r8[18],r9
	uhc_sof_timeout = 0; // No callback registered on a SOF timeout
80008430:	30 09       	mov	r9,0
80008432:	e0 68 1c f2 	mov	r8,7410
	uhd_enable();
80008436:	b0 89       	st.b	r8[0x0],r9
}
80008438:	fe b0 fb 84 	rcall	80007b40 <uhd_enable>
8000843c:	d8 02       	popm	pc
8000843e:	d7 03       	nop

80008440 <uhc_notify_resume>:
80008440:	d4 01       	pushm	lr
80008442:	30 0c       	mov	r12,0
80008444:	cc 6f       	rcall	800083d0 <uhc_remotewakeup>
80008446:	fe b0 ee 73 	rcall	8000612c <usb_wakeup>
}

void uhc_notify_resume(void)
{
	uhc_remotewakeup(false);
	UHC_WAKEUP_EVENT();
8000844a:	d8 02       	popm	pc

8000844c <uhc_enumeration_step3>:
}
8000844c:	d4 01       	pushm	lr
8000844e:	fe cc ff ea 	sub	r12,pc,-22
80008452:	fe b0 f6 2b 	rcall	800070a8 <uhd_send_reset>
80008456:	d8 02       	popm	pc

80008458 <uhc_enumeration_step7>:
 * Reset USB line.
 */
static void uhc_enumeration_step3(void)
{
	uhc_enumeration_reset(uhc_enumeration_step4);
}
80008458:	d4 01       	pushm	lr
8000845a:	fe cc 00 ce 	sub	r12,pc,206
8000845e:	fe b0 f6 25 	rcall	800070a8 <uhd_send_reset>
 * Reset USB line.
 */
static void uhc_enumeration_step7(void)
{
	uhc_enumeration_reset(uhc_enumeration_step8);
}
80008462:	d8 02       	popm	pc

80008464 <uhc_enumeration_step4>:
80008464:	d4 01       	pushm	lr
80008466:	fe b0 f6 13 	rcall	8000708c <uhd_get_speed>
8000846a:	e0 68 09 6c 	mov	r8,2412
 * \brief Device enumeration step 4
 * Lets USB line in IDLE state during 100ms.
 */
static void uhc_enumeration_step4(void)
{
	uhc_dev_enum->speed = uhd_get_speed();
8000846e:	fe c9 ff 7e 	sub	r9,pc,-130
 * \param callback Callback to call at the end of timeout
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
		uhc_sof_timeout_callback_t callback)
{
	uhc_sof_timeout_callback = callback;
80008472:	91 5c       	st.w	r8[0x14],r12
	uhc_sof_timeout = timeout;
80008474:	e0 68 09 8c 	mov	r8,2444
80008478:	91 09       	st.w	r8[0x0],r9
 */
static void uhc_enumeration_step4(void)
{
	uhc_dev_enum->speed = uhd_get_speed();
	uhc_enable_timeout_callback(100, uhc_enumeration_step5);
}
8000847a:	36 49       	mov	r9,100
8000847c:	e0 68 1c f2 	mov	r8,7410
80008480:	b0 89       	st.b	r8[0x0],r9
80008482:	d8 02       	popm	pc

80008484 <uhc_enumeration_error>:
80008484:	d4 21       	pushm	r4-r7,lr
80008486:	18 95       	mov	r5,r12
80008488:	58 7c       	cp.w	r12,7
8000848a:	c0 61       	brne	80008496 <uhc_enumeration_error+0x12>
8000848c:	30 09       	mov	r9,0
8000848e:	e0 68 09 88 	mov	r8,2440
 */
static void uhc_enumeration_error(uhc_enum_status_t status)
{
	if (status == UHC_ENUM_DISCONNECT) {
		uhc_enum_try = 0;
		return; // Abort enumeration process
80008492:	b0 89       	st.b	r8[0x0],r9
	}
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
80008494:	d8 22       	popm	r4-r7,pc
80008496:	e0 67 09 6c 	mov	r7,2412
8000849a:	e0 6b 00 ff 	mov	r11,255
8000849e:	ef 3c 00 12 	ld.ub	r12,r7[18]

	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
800084a2:	fe b0 f9 61 	rcall	80007764 <uhd_ep_free>
800084a6:	6e 6c       	ld.w	r12,r7[0x18]
		free(uhc_dev_enum->conf_desc);
800084a8:	58 0c       	cp.w	r12,0
800084aa:	c0 50       	breq	800084b4 <uhc_enumeration_error+0x30>
		uhc_dev_enum->conf_desc = NULL;
800084ac:	e0 a0 04 48 	rcall	80008d3c <free>
	}
	uhc_dev_enum->address = 0;
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
800084b0:	30 08       	mov	r8,0
	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
		free(uhc_dev_enum->conf_desc);
		uhc_dev_enum->conf_desc = NULL;
	}
	uhc_dev_enum->address = 0;
800084b2:	8f 68       	st.w	r7[0x18],r8
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
800084b4:	e0 67 09 88 	mov	r7,2440
800084b8:	e0 64 09 6c 	mov	r4,2412
	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
		free(uhc_dev_enum->conf_desc);
		uhc_dev_enum->conf_desc = NULL;
	}
	uhc_dev_enum->address = 0;
800084bc:	0f 88       	ld.ub	r8,r7[0x0]
800084be:	30 06       	mov	r6,0
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
800084c0:	f0 c9 ff ff 	sub	r9,r8,-1
800084c4:	e9 66 00 12 	st.b	r4[18],r6
800084c8:	ae 89       	st.b	r7[0x0],r9
800084ca:	30 39       	mov	r9,3
		// Device connected on USB hub
		uhi_hub_send_reset(uhc_dev_enum, callback);
	} else
#endif
	{
		uhd_send_reset(callback);
800084cc:	f2 08 18 00 	cp.b	r8,r9
800084d0:	e0 8b 00 07 	brhi	800084de <uhc_enumeration_error+0x5a>
		uhi_hub_suspend(uhc_dev_enum);
	} else
#endif
	{
		// Suspend USB line
		uhd_suspend();
800084d4:	fe cc 01 5c 	sub	r12,pc,348
		uhc_enumeration_step1();
		return;
	}
	// Abort enumeration, set line in suspend mode
	uhc_enumeration_suspend();
	UHC_ENUM_EVENT(uhc_dev_enum, status);
800084d8:	fe b0 f5 e8 	rcall	800070a8 <uhd_send_reset>
800084dc:	d8 22       	popm	r4-r7,pc
800084de:	fe b0 f5 ef 	rcall	800070bc <uhd_suspend>
	uhc_enum_try = 0;
800084e2:	0a 9b       	mov	r11,r5
800084e4:	08 9c       	mov	r12,r4
800084e6:	fe b0 ee 25 	rcall	80006130 <usb_enum>
800084ea:	ae 86       	st.b	r7[0x0],r6
800084ec:	d8 22       	popm	r4-r7,pc
800084ee:	d7 03       	nop

800084f0 <uhc_enumeration_step5>:
800084f0:	d4 01       	pushm	lr
800084f2:	20 2d       	sub	sp,8
800084f4:	38 08       	mov	r8,-128
800084f6:	ba 88       	st.b	sp[0x0],r8
800084f8:	30 68       	mov	r8,6
800084fa:	ba 98       	st.b	sp[0x1],r8
800084fc:	e0 68 01 00 	mov	r8,256
80008500:	ba 18       	st.h	sp[0x2],r8
80008502:	30 08       	mov	r8,0
	usb_setup_req_t req;

	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
	req.wValue = (USB_DT_DEVICE << 8);
	req.wIndex = 0;
80008504:	ba 28       	st.h	sp[0x4],r8
	req.wLength = offsetof(uhc_device_t, dev_desc.bMaxPacketSize0)
80008506:	30 88       	mov	r8,8
			+ sizeof(uhc_dev_enum->dev_desc.bMaxPacketSize0);

	// After a USB reset, the reallocation is required
	uhd_ep_free(0, 0);
80008508:	30 0b       	mov	r11,0

	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
	req.wValue = (USB_DT_DEVICE << 8);
	req.wIndex = 0;
	req.wLength = offsetof(uhc_device_t, dev_desc.bMaxPacketSize0)
8000850a:	ba 38       	st.h	sp[0x6],r8
			+ sizeof(uhc_dev_enum->dev_desc.bMaxPacketSize0);

	// After a USB reset, the reallocation is required
	uhd_ep_free(0, 0);
8000850c:	16 9c       	mov	r12,r11
8000850e:	fe b0 f9 2b 	rcall	80007764 <uhd_ep_free>
	if (!uhd_ep0_alloc(0, 64)) {
80008512:	34 0b       	mov	r11,64
80008514:	30 0c       	mov	r12,0
80008516:	fe b0 fa 2e 	rcall	80007972 <uhd_ep0_alloc>
8000851a:	c0 31       	brne	80008520 <uhc_enumeration_step5+0x30>
		uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
8000851c:	30 4c       	mov	r12,4
8000851e:	c1 18       	rjmp	80008540 <uhc_enumeration_step5+0x50>
		return;
	}
	if (!uhd_setup_request(0,
80008520:	fe c9 ff d8 	sub	r9,pc,-40
80008524:	30 08       	mov	r8,0
80008526:	1a d9       	st.w	--sp,r9
80008528:	e0 6a 09 6c 	mov	r10,2412
8000852c:	fa cb ff fc 	sub	r11,sp,-4
80008530:	31 29       	mov	r9,18
80008532:	10 9c       	mov	r12,r8
80008534:	fe b0 f8 e2 	rcall	800076f8 <uhd_setup_request>
80008538:	2f fd       	sub	sp,-4
			&req,
			(uint8_t*)&uhc_dev_enum->dev_desc,
			sizeof(usb_dev_desc_t),
			NULL,
			uhc_enumeration_step6)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
8000853a:	58 0c       	cp.w	r12,0
8000853c:	c0 31       	brne	80008542 <uhc_enumeration_step5+0x52>
8000853e:	30 6c       	mov	r12,6
		return;
	}
}
80008540:	ca 2f       	rcall	80008484 <uhc_enumeration_error>
80008542:	2f ed       	sub	sp,-8
80008544:	d8 02       	popm	pc
80008546:	d7 03       	nop

80008548 <uhc_enumeration_step6>:
80008548:	d4 01       	pushm	lr
8000854a:	30 79       	mov	r9,7
8000854c:	58 0b       	cp.w	r11,0
8000854e:	5f 18       	srne	r8
80008550:	f2 0a 19 00 	cp.h	r10,r9
80008554:	5f 89       	srls	r9
80008556:	f3 e8 10 08 	or	r8,r9,r8
8000855a:	c0 91       	brne	8000856c <uhc_enumeration_step6+0x24>
		usb_add_t add,
		uhd_trans_status_t status,
		uint16_t payload_trans)
{
	UNUSED(add);
	if ((status != UHD_TRANS_NOERROR) || (payload_trans < 8)
8000855c:	e0 68 09 6c 	mov	r8,2412
80008560:	11 99       	ld.ub	r9,r8[0x1]
80008562:	30 18       	mov	r8,1
80008564:	f0 09 18 00 	cp.b	r9,r8
80008568:	c0 61       	brne	80008574 <uhc_enumeration_step6+0x2c>
			|| (uhc_dev_enum->dev_desc.bDescriptorType != USB_DT_DEVICE)) {
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
8000856a:	c0 88       	rjmp	8000857a <uhc_enumeration_step6+0x32>
8000856c:	58 1b       	cp.w	r11,1
8000856e:	c0 31       	brne	80008574 <uhc_enumeration_step6+0x2c>
80008570:	30 7c       	mov	r12,7
80008572:	c0 28       	rjmp	80008576 <uhc_enumeration_step6+0x2e>
80008574:	30 3c       	mov	r12,3
80008576:	c8 7f       	rcall	80008484 <uhc_enumeration_error>
				UHC_ENUM_DISCONNECT:UHC_ENUM_FAIL);
		return;
80008578:	d8 02       	popm	pc
 * \param callback Callback to call at the end of timeout
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
		uhc_sof_timeout_callback_t callback)
{
	uhc_sof_timeout_callback = callback;
8000857a:	fe c9 01 22 	sub	r9,pc,290
8000857e:	e0 68 09 8c 	mov	r8,2444
	uhc_sof_timeout = timeout;
80008582:	91 09       	st.w	r8[0x0],r9
80008584:	31 49       	mov	r9,20
80008586:	e0 68 1c f2 	mov	r8,7410
8000858a:	b0 89       	st.b	r8[0x0],r9
8000858c:	d8 02       	popm	pc
8000858e:	d7 03       	nop

80008590 <uhc_enumeration_step9>:
80008590:	d4 21       	pushm	r4-r7,lr
80008592:	20 2d       	sub	sp,8
80008594:	30 18       	mov	r8,1
80008596:	e0 67 09 6c 	mov	r7,2412
8000859a:	ba 18       	st.h	sp[0x2],r8
	}
	req.wValue = usb_addr_free;
	uhc_dev_enum->address = usb_addr_free;
#else
	req.wValue = UHC_DEVICE_ENUM_ADD;
	uhc_dev_enum->address = UHC_DEVICE_ENUM_ADD;
8000859c:	ef 68 00 12 	st.b	r7[18],r8
#endif
	req.wIndex = 0;
	req.wLength = 0;
800085a0:	30 08       	mov	r8,0
	uhc_dev_enum->address = usb_addr_free;
#else
	req.wValue = UHC_DEVICE_ENUM_ADD;
	uhc_dev_enum->address = UHC_DEVICE_ENUM_ADD;
#endif
	req.wIndex = 0;
800085a2:	ba 38       	st.h	sp[0x6],r8
 */
static void uhc_enumeration_step9(void)
{
	usb_setup_req_t req;

	req.bmRequestType = USB_REQ_RECIP_DEVICE
800085a4:	ba 28       	st.h	sp[0x4],r8
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_ADDRESS;
800085a6:	ba 88       	st.b	sp[0x0],r8
#endif
	req.wIndex = 0;
	req.wLength = 0;

	// After a USB reset, the reallocation is required
	uhd_ep_free(0, 0);
800085a8:	30 58       	mov	r8,5
{
	usb_setup_req_t req;

	req.bmRequestType = USB_REQ_RECIP_DEVICE
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_ADDRESS;
800085aa:	30 0b       	mov	r11,0
#endif
	req.wIndex = 0;
	req.wLength = 0;

	// After a USB reset, the reallocation is required
	uhd_ep_free(0, 0);
800085ac:	ba 98       	st.b	sp[0x1],r8
800085ae:	16 9c       	mov	r12,r11
800085b0:	fe b0 f8 da 	rcall	80007764 <uhd_ep_free>
	if (!uhd_ep0_alloc(0, uhc_dev_enum->dev_desc.bMaxPacketSize0)) {
800085b4:	0f fb       	ld.ub	r11,r7[0x7]
800085b6:	30 0c       	mov	r12,0
800085b8:	fe b0 f9 dd 	rcall	80007972 <uhd_ep0_alloc>
		uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
800085bc:	c0 31       	brne	800085c2 <uhc_enumeration_step9+0x32>
800085be:	30 4c       	mov	r12,4
		return;
	}

	if (!uhd_setup_request(0,
800085c0:	c1 08       	rjmp	800085e0 <uhc_enumeration_step9+0x50>
800085c2:	fe c9 ff da 	sub	r9,pc,-38
800085c6:	30 08       	mov	r8,0
800085c8:	1a d9       	st.w	--sp,r9
800085ca:	0e 9a       	mov	r10,r7
800085cc:	fa cb ff fc 	sub	r11,sp,-4
800085d0:	31 29       	mov	r9,18
800085d2:	10 9c       	mov	r12,r8
800085d4:	fe b0 f8 92 	rcall	800076f8 <uhd_setup_request>
800085d8:	2f fd       	sub	sp,-4
			&req,
			(uint8_t*)&uhc_dev_enum->dev_desc,
			sizeof(usb_dev_desc_t),
			NULL,
			uhc_enumeration_step10)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
800085da:	58 0c       	cp.w	r12,0
800085dc:	c0 31       	brne	800085e2 <uhc_enumeration_step9+0x52>
800085de:	30 6c       	mov	r12,6
		return;
	}
}
800085e0:	c5 2f       	rcall	80008484 <uhc_enumeration_error>
800085e2:	2f ed       	sub	sp,-8
800085e4:	d8 22       	popm	r4-r7,pc
800085e6:	d7 03       	nop

800085e8 <uhc_enumeration_step10>:
800085e8:	d4 01       	pushm	lr
800085ea:	58 0b       	cp.w	r11,0
800085ec:	c0 80       	breq	800085fc <uhc_enumeration_step10+0x14>
800085ee:	58 1b       	cp.w	r11,1
800085f0:	f9 bc 00 07 	moveq	r12,7
800085f4:	f9 bc 01 03 	movne	r12,3
800085f8:	c4 6f       	rcall	80008484 <uhc_enumeration_error>
800085fa:	d8 02       	popm	pc
	UNUSED(add);
	UNUSED(payload_trans);
	if (status != UHD_TRANS_NOERROR) {
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT) ?
				UHC_ENUM_DISCONNECT : UHC_ENUM_FAIL);
		return;
800085fc:	fe c9 ff ec 	sub	r9,pc,-20
 * \param callback Callback to call at the end of timeout
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
		uhc_sof_timeout_callback_t callback)
{
	uhc_sof_timeout_callback = callback;
80008600:	e0 68 09 8c 	mov	r8,2444
	uhc_sof_timeout = timeout;
80008604:	91 09       	st.w	r8[0x0],r9
80008606:	31 49       	mov	r9,20
80008608:	e0 68 1c f2 	mov	r8,7410
8000860c:	b0 89       	st.b	r8[0x0],r9
8000860e:	d8 02       	popm	pc

80008610 <uhc_enumeration_step11>:
80008610:	d4 21       	pushm	r4-r7,lr
80008612:	20 2d       	sub	sp,8
80008614:	30 0b       	mov	r11,0
80008616:	16 9c       	mov	r12,r11
80008618:	fe b0 f8 a6 	rcall	80007764 <uhd_ep_free>

	// Free address 0 used to start enumeration
	uhd_ep_free(0, 0);

	// Alloc control endpoint with the new USB address
	if (!uhd_ep0_alloc(UHC_DEVICE_ENUM_ADD,
8000861c:	30 1c       	mov	r12,1
8000861e:	e0 67 09 6c 	mov	r7,2412
80008622:	0f fb       	ld.ub	r11,r7[0x7]
80008624:	fe b0 f9 a7 	rcall	80007972 <uhd_ep0_alloc>
			uhc_dev_enum->dev_desc.bMaxPacketSize0)) {
		uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
80008628:	c0 31       	brne	8000862e <uhc_enumeration_step11+0x1e>
8000862a:	30 4c       	mov	r12,4
		return;
	}
	// Send USB device descriptor request
	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
8000862c:	c1 b8       	rjmp	80008662 <uhc_enumeration_step11+0x52>
8000862e:	38 08       	mov	r8,-128
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
80008630:	ba 88       	st.b	sp[0x0],r8
80008632:	30 68       	mov	r8,6
	req.wValue = (USB_DT_DEVICE << 8);
80008634:	ba 98       	st.b	sp[0x1],r8
80008636:	e0 68 01 00 	mov	r8,256
	req.wIndex = 0;
8000863a:	ba 18       	st.h	sp[0x2],r8
8000863c:	30 08       	mov	r8,0
	req.wLength = sizeof(usb_dev_desc_t);
8000863e:	ba 28       	st.h	sp[0x4],r8
80008640:	31 28       	mov	r8,18
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
80008642:	ba 38       	st.h	sp[0x6],r8
80008644:	fe c8 ff dc 	sub	r8,pc,-36
80008648:	0e 9a       	mov	r10,r7
8000864a:	1a d8       	st.w	--sp,r8
8000864c:	31 29       	mov	r9,18
8000864e:	fa cb ff fc 	sub	r11,sp,-4
80008652:	30 08       	mov	r8,0
80008654:	30 1c       	mov	r12,1
80008656:	fe b0 f8 51 	rcall	800076f8 <uhd_setup_request>
8000865a:	2f fd       	sub	sp,-4
			&req,
			(uint8_t *) & uhc_dev_enum->dev_desc,
			sizeof(usb_dev_desc_t),
			NULL, uhc_enumeration_step12)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
8000865c:	58 0c       	cp.w	r12,0
8000865e:	c0 31       	brne	80008664 <uhc_enumeration_step11+0x54>
80008660:	30 6c       	mov	r12,6
		return;
	}
}
80008662:	c1 1f       	rcall	80008484 <uhc_enumeration_error>
80008664:	2f ed       	sub	sp,-8
80008666:	d8 22       	popm	r4-r7,pc

80008668 <uhc_enumeration_step12>:
80008668:	d4 21       	pushm	r4-r7,lr
8000866a:	20 2d       	sub	sp,8
8000866c:	31 29       	mov	r9,18
8000866e:	58 0b       	cp.w	r11,0
80008670:	5f 18       	srne	r8
80008672:	f2 0a 19 00 	cp.h	r10,r9
80008676:	5f 19       	srne	r9
80008678:	f3 e8 10 08 	or	r8,r9,r8
8000867c:	c0 91       	brne	8000868e <uhc_enumeration_step12+0x26>
8000867e:	e0 67 09 6c 	mov	r7,2412
{
	usb_setup_req_t req;
	uint8_t conf_num;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_dev_desc_t))
80008682:	30 18       	mov	r8,1
80008684:	0f 99       	ld.ub	r9,r7[0x1]
80008686:	f0 09 18 00 	cp.b	r9,r8
8000868a:	c0 61       	brne	80008696 <uhc_enumeration_step12+0x2e>
			|| (uhc_dev_enum->dev_desc.bDescriptorType != USB_DT_DEVICE)) {
		uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
8000868c:	c0 78       	rjmp	8000869a <uhc_enumeration_step12+0x32>
8000868e:	58 1b       	cp.w	r11,1
80008690:	c0 31       	brne	80008696 <uhc_enumeration_step12+0x2e>
80008692:	30 7c       	mov	r12,7
80008694:	c2 28       	rjmp	800086d8 <uhc_enumeration_step12+0x70>
80008696:	30 3c       	mov	r12,3
		conf_num = UHC_DEVICE_CONF(uhc_dev_enum);
	} else {
		conf_num = 1;
	}

	uhc_dev_enum->conf_desc = malloc(sizeof(usb_conf_desc_t));
80008698:	c2 08       	rjmp	800086d8 <uhc_enumeration_step12+0x70>
8000869a:	30 9c       	mov	r12,9
8000869c:	e0 a0 03 58 	rcall	80008d4c <malloc>
800086a0:	8f 6c       	st.w	r7[0x18],r12
	if (uhc_dev_enum->conf_desc == NULL) {
800086a2:	18 9a       	mov	r10,r12
		Assert(false);
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
	// Send USB device descriptor request
	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
800086a4:	c1 90       	breq	800086d6 <uhc_enumeration_step12+0x6e>
800086a6:	38 08       	mov	r8,-128
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
800086a8:	ba 88       	st.b	sp[0x0],r8
800086aa:	30 68       	mov	r8,6
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
800086ac:	ba 98       	st.b	sp[0x1],r8
800086ae:	e0 68 02 00 	mov	r8,512
	req.wIndex = 0;
800086b2:	ba 18       	st.h	sp[0x2],r8
800086b4:	30 08       	mov	r8,0
	req.wLength = sizeof(usb_conf_desc_t);
800086b6:	ba 28       	st.h	sp[0x4],r8
800086b8:	30 98       	mov	r8,9
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
800086ba:	ba 38       	st.h	sp[0x6],r8
800086bc:	fe c8 ff dc 	sub	r8,pc,-36
800086c0:	30 99       	mov	r9,9
800086c2:	1a d8       	st.w	--sp,r8
800086c4:	30 1c       	mov	r12,1
800086c6:	fa cb ff fc 	sub	r11,sp,-4
800086ca:	30 08       	mov	r8,0
800086cc:	fe b0 f8 16 	rcall	800076f8 <uhd_setup_request>
800086d0:	2f fd       	sub	sp,-4
			&req,
			(uint8_t *) uhc_dev_enum->conf_desc,
			sizeof(usb_conf_desc_t),
			NULL, uhc_enumeration_step13)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
800086d2:	58 0c       	cp.w	r12,0
800086d4:	c0 31       	brne	800086da <uhc_enumeration_step12+0x72>
800086d6:	30 6c       	mov	r12,6
		return;
	}
}
800086d8:	cd 6e       	rcall	80008484 <uhc_enumeration_error>
800086da:	2f ed       	sub	sp,-8
800086dc:	d8 22       	popm	r4-r7,pc
800086de:	d7 03       	nop

800086e0 <uhc_enumeration_step13>:
800086e0:	d4 21       	pushm	r4-r7,lr
800086e2:	20 2d       	sub	sp,8
800086e4:	30 99       	mov	r9,9
800086e6:	58 0b       	cp.w	r11,0
800086e8:	5f 18       	srne	r8
800086ea:	f2 0a 19 00 	cp.h	r10,r9
800086ee:	5f 19       	srne	r9
	uint16_t conf_size;
	uint16_t bus_power = 0;
	usb_setup_req_t req;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_conf_desc_t))
800086f0:	f3 e8 10 08 	or	r8,r9,r8
800086f4:	c0 a1       	brne	80008708 <uhc_enumeration_step13+0x28>
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)) {
800086f6:	e0 65 09 6c 	mov	r5,2412
800086fa:	30 29       	mov	r9,2
	uint16_t conf_size;
	uint16_t bus_power = 0;
	usb_setup_req_t req;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_conf_desc_t))
800086fc:	6a 68       	ld.w	r8,r5[0x18]
800086fe:	11 9a       	ld.ub	r10,r8[0x1]
80008700:	f2 0a 18 00 	cp.b	r10,r9
80008704:	c0 61       	brne	80008710 <uhc_enumeration_step13+0x30>
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)) {
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
80008706:	c0 78       	rjmp	80008714 <uhc_enumeration_step13+0x34>
80008708:	58 1b       	cp.w	r11,1
8000870a:	c0 31       	brne	80008710 <uhc_enumeration_step13+0x30>
8000870c:	30 7c       	mov	r12,7
8000870e:	c3 08       	rjmp	8000876e <uhc_enumeration_step13+0x8e>
80008710:	30 3c       	mov	r12,3
	uhc_dev_enum->power = bus_power;
	uhc_power_running += bus_power;
#endif

	// Save information about USB configuration descriptor size
	conf_size = le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength);
80008712:	c2 e8       	rjmp	8000876e <uhc_enumeration_step13+0x8e>
	conf_num = uhc_dev_enum->conf_desc->bConfigurationValue;
	Assert(conf_num);
	// Re alloc USB configuration descriptor
	free(uhc_dev_enum->conf_desc);
80008714:	11 b9       	ld.ub	r9,r8[0x3]
	uhc_dev_enum->power = bus_power;
	uhc_power_running += bus_power;
#endif

	// Save information about USB configuration descriptor size
	conf_size = le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength);
80008716:	10 9c       	mov	r12,r8
	conf_num = uhc_dev_enum->conf_desc->bConfigurationValue;
80008718:	11 a6       	ld.ub	r6,r8[0x2]
	uhc_dev_enum->power = bus_power;
	uhc_power_running += bus_power;
#endif

	// Save information about USB configuration descriptor size
	conf_size = le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength);
8000871a:	11 d4       	ld.ub	r4,r8[0x5]
8000871c:	f3 e6 10 86 	or	r6,r9,r6<<0x8
80008720:	ec 08 16 08 	lsr	r8,r6,0x8
80008724:	f1 e6 10 86 	or	r6,r8,r6<<0x8
	conf_num = uhc_dev_enum->conf_desc->bConfigurationValue;
	Assert(conf_num);
	// Re alloc USB configuration descriptor
	free(uhc_dev_enum->conf_desc);
80008728:	e0 a0 03 0a 	rcall	80008d3c <free>
	uhc_dev_enum->conf_desc = malloc(conf_size);
8000872c:	5c 86       	casts.h	r6
8000872e:	ef d6 c0 10 	bfextu	r7,r6,0x0,0x10
80008732:	0e 9c       	mov	r12,r7
80008734:	e0 a0 03 0c 	rcall	80008d4c <malloc>
80008738:	8b 6c       	st.w	r5[0x18],r12
	if (uhc_dev_enum->conf_desc == NULL) {
8000873a:	18 9a       	mov	r10,r12
		Assert(false);
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
	// Send USB device descriptor request
	req.bmRequestType =
8000873c:	c1 80       	breq	8000876c <uhc_enumeration_step13+0x8c>
8000873e:	38 08       	mov	r8,-128
			USB_REQ_RECIP_DEVICE | USB_REQ_TYPE_STANDARD |
			USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
80008740:	ba 88       	st.b	sp[0x0],r8
80008742:	30 68       	mov	r8,6
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
	req.wIndex = 0;
80008744:	ba 98       	st.b	sp[0x1],r8
80008746:	30 08       	mov	r8,0
	req.wLength = conf_size;
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
80008748:	ba 28       	st.h	sp[0x4],r8
			USB_REQ_RECIP_DEVICE | USB_REQ_TYPE_STANDARD |
			USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
	req.wIndex = 0;
	req.wLength = conf_size;
8000874a:	fe c8 ff d6 	sub	r8,pc,-42
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
8000874e:	ba 36       	st.h	sp[0x6],r6
	// Send USB device descriptor request
	req.bmRequestType =
			USB_REQ_RECIP_DEVICE | USB_REQ_TYPE_STANDARD |
			USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
80008750:	20 14       	sub	r4,1
	req.wIndex = 0;
	req.wLength = conf_size;
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
80008752:	0e 99       	mov	r9,r7
	// Send USB device descriptor request
	req.bmRequestType =
			USB_REQ_RECIP_DEVICE | USB_REQ_TYPE_STANDARD |
			USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
80008754:	a9 b4       	sbr	r4,0x9
	req.wIndex = 0;
	req.wLength = conf_size;
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
80008756:	30 1c       	mov	r12,1
80008758:	ba 14       	st.h	sp[0x2],r4
8000875a:	1a d8       	st.w	--sp,r8
8000875c:	30 08       	mov	r8,0
8000875e:	fa cb ff fc 	sub	r11,sp,-4
80008762:	fe b0 f7 cb 	rcall	800076f8 <uhd_setup_request>
80008766:	2f fd       	sub	sp,-4
			&req,
			(uint8_t *) uhc_dev_enum->conf_desc,
			conf_size,
			NULL, uhc_enumeration_step14)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
80008768:	58 0c       	cp.w	r12,0
8000876a:	c0 31       	brne	80008770 <uhc_enumeration_step13+0x90>
8000876c:	30 6c       	mov	r12,6
		return;
	}
}
8000876e:	c8 be       	rcall	80008484 <uhc_enumeration_error>
80008770:	2f ed       	sub	sp,-8
80008772:	d8 22       	popm	r4-r7,pc

80008774 <uhc_enumeration_step14>:
80008774:	d4 21       	pushm	r4-r7,lr
80008776:	20 2d       	sub	sp,8
80008778:	30 89       	mov	r9,8
8000877a:	58 0b       	cp.w	r11,0
8000877c:	5f 18       	srne	r8
8000877e:	f2 0a 19 00 	cp.h	r10,r9
80008782:	5f 89       	srls	r9
80008784:	f3 e8 10 08 	or	r8,r9,r8
80008788:	c1 e1       	brne	800087c4 <uhc_enumeration_step14+0x50>
8000878a:	e0 67 09 6c 	mov	r7,2412
	bool b_conf_supported = false;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR)
			|| (payload_trans < sizeof(usb_conf_desc_t))
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)
8000878e:	30 29       	mov	r9,2
{
	usb_setup_req_t req;
	bool b_conf_supported = false;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR)
80008790:	6e 68       	ld.w	r8,r7[0x18]
80008792:	11 9b       	ld.ub	r11,r8[0x1]
80008794:	f2 0b 18 00 	cp.b	r11,r9
			|| (payload_trans < sizeof(usb_conf_desc_t))
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)
			|| (payload_trans != le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength))) {
80008798:	c1 a1       	brne	800087cc <uhc_enumeration_step14+0x58>
8000879a:	11 b9       	ld.ub	r9,r8[0x3]
{
	usb_setup_req_t req;
	bool b_conf_supported = false;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR)
8000879c:	11 a8       	ld.ub	r8,r8[0x2]
8000879e:	f3 e8 10 88 	or	r8,r9,r8<<0x8
800087a2:	f0 09 16 08 	lsr	r9,r8,0x8
800087a6:	f3 e8 10 88 	or	r8,r9,r8<<0x8
800087aa:	f0 0a 19 00 	cp.h	r10,r8
				UHC_ENUM_DISCONNECT:UHC_ENUM_FAIL);
		return;
	}
	// Check if unless one USB interface is supported by UHIs
	for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
		switch (uhc_uhis[i].install(uhc_dev_enum)) {
800087ae:	c0 f1       	brne	800087cc <uhc_enumeration_step14+0x58>
800087b0:	0e 9c       	mov	r12,r7
800087b2:	fe c8 e8 0a 	sub	r8,pc,-6134
800087b6:	70 08       	ld.w	r8,r8[0x0]
800087b8:	5d 18       	icall	r8
800087ba:	18 9b       	mov	r11,r12
800087bc:	c1 80       	breq	800087ec <uhc_enumeration_step14+0x78>
800087be:	58 1c       	cp.w	r12,1

	if ((status != UHD_TRANS_NOERROR)
			|| (payload_trans < sizeof(usb_conf_desc_t))
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)
			|| (payload_trans != le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength))) {
		uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
800087c0:	c0 81       	brne	800087d0 <uhc_enumeration_step14+0x5c>
800087c2:	c0 f8       	rjmp	800087e0 <uhc_enumeration_step14+0x6c>
800087c4:	58 1b       	cp.w	r11,1
800087c6:	c0 31       	brne	800087cc <uhc_enumeration_step14+0x58>
800087c8:	30 7c       	mov	r12,7
800087ca:	c2 88       	rjmp	8000881a <uhc_enumeration_step14+0xa6>
			break;

		default:
			// USB host hardware limitation
			// Free all endpoints
			uhd_ep_free(UHC_DEVICE_ENUM_ADD,0xFF);
800087cc:	30 3c       	mov	r12,3
800087ce:	c2 68       	rjmp	8000881a <uhc_enumeration_step14+0xa6>
800087d0:	e0 6b 00 ff 	mov	r11,255
800087d4:	30 1c       	mov	r12,1
			UHC_ENUM_EVENT(uhc_dev_enum,UHC_ENUM_HARDWARE_LIMIT);
800087d6:	fe b0 f7 c7 	rcall	80007764 <uhd_ep_free>
800087da:	0e 9c       	mov	r12,r7
			return;
		}
	}
	if (!b_conf_supported) {
		// No USB interface supported
		UHC_ENUM_EVENT(uhc_dev_enum, UHC_ENUM_UNSUPPORTED);
800087dc:	30 4b       	mov	r11,4
800087de:	c0 28       	rjmp	800087e2 <uhc_enumeration_step14+0x6e>
800087e0:	0e 9c       	mov	r12,r7
		uhi_hub_suspend(uhc_dev_enum);
	} else
#endif
	{
		// Suspend USB line
		uhd_suspend();
800087e2:	fe b0 ec a7 	rcall	80006130 <usb_enum>
800087e6:	fe b0 f4 6b 	rcall	800070bc <uhd_suspend>
	}
	// Enable device configuration
	req.bmRequestType = USB_REQ_RECIP_DEVICE
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_CONFIGURATION;
	req.wValue = uhc_dev_enum->conf_desc->bConfigurationValue;
800087ea:	c1 98       	rjmp	8000881c <uhc_enumeration_step14+0xa8>
		return;
	}
	// Enable device configuration
	req.bmRequestType = USB_REQ_RECIP_DEVICE
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_CONFIGURATION;
800087ec:	ba 8c       	st.b	sp[0x0],r12
800087ee:	6e 69       	ld.w	r9,r7[0x18]
	req.wValue = uhc_dev_enum->conf_desc->bConfigurationValue;
800087f0:	30 9a       	mov	r10,9
800087f2:	ba 9a       	st.b	sp[0x1],r10
	req.wIndex = 0;
	req.wLength = 0;
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
800087f4:	13 d9       	ld.ub	r9,r9[0x5]
	// Enable device configuration
	req.bmRequestType = USB_REQ_RECIP_DEVICE
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_CONFIGURATION;
	req.wValue = uhc_dev_enum->conf_desc->bConfigurationValue;
	req.wIndex = 0;
800087f6:	ba 19       	st.h	sp[0x2],r9
	req.wLength = 0;
800087f8:	fe c9 ff d8 	sub	r9,pc,-40
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
800087fc:	ba 2c       	st.h	sp[0x4],r12
800087fe:	ba 3c       	st.h	sp[0x6],r12
80008800:	18 98       	mov	r8,r12
80008802:	1a d9       	st.w	--sp,r9
80008804:	18 9a       	mov	r10,r12
80008806:	18 99       	mov	r9,r12
80008808:	fa cb ff fc 	sub	r11,sp,-4
8000880c:	30 1c       	mov	r12,1
8000880e:	fe b0 f7 75 	rcall	800076f8 <uhd_setup_request>
			&req,
			NULL,
			0,
			NULL, uhc_enumeration_step15)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
80008812:	2f fd       	sub	sp,-4
80008814:	58 0c       	cp.w	r12,0
80008816:	c0 31       	brne	8000881c <uhc_enumeration_step14+0xa8>
		return;
	}
}
80008818:	30 6c       	mov	r12,6
8000881a:	c3 5e       	rcall	80008484 <uhc_enumeration_error>
8000881c:	2f ed       	sub	sp,-8
8000881e:	d8 22       	popm	r4-r7,pc

80008820 <uhc_enumeration_step15>:
80008820:	d4 21       	pushm	r4-r7,lr
80008822:	30 08       	mov	r8,0
80008824:	58 0b       	cp.w	r11,0
80008826:	5f 19       	srne	r9
80008828:	f0 0a 19 00 	cp.h	r10,r8
8000882c:	5f 16       	srne	r6
8000882e:	16 97       	mov	r7,r11
80008830:	12 46       	or	r6,r9
80008832:	10 99       	mov	r9,r8
80008834:	fe c8 e8 8c 	sub	r8,pc,-6004
80008838:	f2 06 18 00 	cp.b	r6,r9
		return;
	}

	// Enable all UHIs supported
	for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
		uhc_uhis[i].enable(uhc_dev_enum);
8000883c:	c0 e1       	brne	80008858 <uhc_enumeration_step15+0x38>
8000883e:	70 18       	ld.w	r8,r8[0x4]
80008840:	e0 6c 09 6c 	mov	r12,2412
	uhc_dev_enum->lpm_desc = NULL;
#endif

	uhc_enum_try = 0;

	UHC_ENUM_EVENT(uhc_dev_enum, UHC_ENUM_SUCCESS);
80008844:	5d 18       	icall	r8
		return;
	}
	uhc_dev_enum->lpm_desc = NULL;
#endif

	uhc_enum_try = 0;
80008846:	e0 68 09 88 	mov	r8,2440

	UHC_ENUM_EVENT(uhc_dev_enum, UHC_ENUM_SUCCESS);
8000884a:	30 0b       	mov	r11,0
8000884c:	b0 86       	st.b	r8[0x0],r6
8000884e:	e0 6c 09 6c 	mov	r12,2412
		uint16_t payload_trans)
{
	UNUSED(add);
	if ((status!=UHD_TRANS_NOERROR) || (payload_trans!=0)) {
		for(uint8_t i = 0; i < UHC_NB_UHI; i++) {
			uhc_uhis[i].uninstall(uhc_dev_enum);
80008852:	fe b0 ec 6f 	rcall	80006130 <usb_enum>
		}
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
80008856:	d8 22       	popm	r4-r7,pc
80008858:	70 28       	ld.w	r8,r8[0x8]
8000885a:	e0 6c 09 6c 	mov	r12,2412
8000885e:	5d 18       	icall	r8
80008860:	58 17       	cp.w	r7,1
80008862:	f9 bc 00 07 	moveq	r12,7
80008866:	f9 bc 01 03 	movne	r12,3
8000886a:	c0 de       	rcall	80008484 <uhc_enumeration_error>
8000886c:	d8 22       	popm	r4-r7,pc
8000886e:	d7 03       	nop

80008870 <uhc_notify_connection>:
80008870:	d4 21       	pushm	r4-r7,lr
80008872:	e0 67 09 6c 	mov	r7,2412
80008876:	18 96       	mov	r6,r12
80008878:	58 0c       	cp.w	r12,0
8000887a:	c0 81       	brne	8000888a <uhc_notify_connection+0x1a>

#ifdef USB_HOST_HUB_SUPPORT
		uhc_power_running = 0;
#endif
	} else {
		if (g_uhc_device_root.address == UHC_USB_ADD_NOT_VALID) {
8000887c:	ef 3c 00 12 	ld.ub	r12,r7[18]
80008880:	3f f5       	mov	r5,-1
80008882:	ea 0c 18 00 	cp.b	r12,r5
80008886:	c1 31       	brne	800088ac <uhc_notify_connection+0x3c>
	if (b_plug) {
		uhc_enum_try = 1;
#ifdef USB_HOST_HUB_SUPPORT
		uhc_dev_enum = dev;
#endif
		uhc_dev_enum->conf_desc = NULL;
80008888:	d8 22       	popm	r4-r7,pc
 * \param dev      Information about device connected or disconnected
 */
static void uhc_connection_tree(bool b_plug, uhc_device_t* dev)
{
	if (b_plug) {
		uhc_enum_try = 1;
8000888a:	30 08       	mov	r8,0
#ifdef USB_HOST_HUB_SUPPORT
		uhc_dev_enum = dev;
#endif
		uhc_dev_enum->conf_desc = NULL;
		uhc_dev_enum->address = 0;
8000888c:	30 19       	mov	r9,1
8000888e:	ef 68 00 12 	st.b	r7[18],r8
 * \param dev      Information about device connected or disconnected
 */
static void uhc_connection_tree(bool b_plug, uhc_device_t* dev)
{
	if (b_plug) {
		uhc_enum_try = 1;
80008892:	8f 68       	st.w	r7[0x18],r8
#ifdef USB_HOST_HUB_SUPPORT
		uhc_dev_enum = dev;
#endif
		uhc_dev_enum->conf_desc = NULL;
		uhc_dev_enum->address = 0;
		UHC_CONNECTION_EVENT(uhc_dev_enum, true);
80008894:	e0 68 09 88 	mov	r8,2440
80008898:	0e 9c       	mov	r12,r7
8000889a:	b0 89       	st.b	r8[0x0],r9
8000889c:	30 1b       	mov	r11,1
		// Device connected on USB hub
		uhi_hub_send_reset(uhc_dev_enum, callback);
	} else
#endif
	{
		uhd_send_reset(callback);
8000889e:	fe b0 ec 46 	rcall	8000612a <usb_connection>
800088a2:	fe cc 05 2a 	sub	r12,pc,1322
		UHC_CONNECTION_EVENT(uhc_dev_enum, true);
		uhc_enumeration_step1();
	} else {
		if (uhc_dev_enum == dev) {
			// Eventually stop enumeration timeout on-going on this device
			uhc_sof_timeout = 0;
800088a6:	fe b0 f4 01 	rcall	800070a8 <uhd_send_reset>
		}
		// Abort all transfers (endpoint control and other) and free pipe(s)
		uhd_ep_free(dev->address, 0xFF);
800088aa:	d8 22       	popm	r4-r7,pc
		UHC_CONNECTION_EVENT(uhc_dev_enum, true);
		uhc_enumeration_step1();
	} else {
		if (uhc_dev_enum == dev) {
			// Eventually stop enumeration timeout on-going on this device
			uhc_sof_timeout = 0;
800088ac:	e0 68 1c f2 	mov	r8,7410
		}
		// Abort all transfers (endpoint control and other) and free pipe(s)
		uhd_ep_free(dev->address, 0xFF);
800088b0:	e0 6b 00 ff 	mov	r11,255

		// Disable all USB interfaces (this includes HUB interface)
		for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
			uhc_uhis[i].uninstall(dev);
800088b4:	b0 86       	st.b	r8[0x0],r6
800088b6:	fe b0 f7 57 	rcall	80007764 <uhd_ep_free>
		}

		UHC_CONNECTION_EVENT(dev, false);
800088ba:	0e 9c       	mov	r12,r7
800088bc:	fe c8 e9 14 	sub	r8,pc,-5868
800088c0:	70 28       	ld.w	r8,r8[0x8]
		dev->address = UHC_USB_ADD_NOT_VALID;
800088c2:	5d 18       	icall	r8
800088c4:	0e 9c       	mov	r12,r7
		// Free USB configuration descriptor buffer
		if (dev->conf_desc != NULL) {
800088c6:	0c 9b       	mov	r11,r6
800088c8:	fe b0 ec 31 	rcall	8000612a <usb_connection>
			free(dev->conf_desc);
800088cc:	ef 65 00 12 	st.b	r7[18],r5
800088d0:	6e 6c       	ld.w	r12,r7[0x18]
800088d2:	58 0c       	cp.w	r12,0
800088d4:	c0 30       	breq	800088da <uhc_notify_connection+0x6a>
800088d6:	e0 a0 02 33 	rcall	80008d3c <free>
800088da:	d8 22       	popm	r4-r7,pc

800088dc <sysclk_priv_disable_module>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800088dc:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800088e0:	d3 03       	ssrf	0x10

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
800088e2:	fe 7a 0c 00 	mov	r10,-62464
800088e6:	75 58       	ld.w	r8,r10[0x54]
800088e8:	ed b8 00 06 	bld	r8,0x6
800088ec:	cf d1       	brne	800088e6 <sysclk_priv_disable_module+0xa>
		/* Do nothing */
	}

	/* Disable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
	mask &= ~(1U << module_index);
800088ee:	30 18       	mov	r8,1
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Disable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
800088f0:	a3 6c       	lsl	r12,0x2
	mask &= ~(1U << module_index);
800088f2:	f0 0b 09 4b 	lsl	r11,r8,r11
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Disable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
800088f6:	e0 2c f3 f8 	sub	r12,62456
	mask &= ~(1U << module_index);
800088fa:	5c db       	com	r11
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Disable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
800088fc:	78 08       	ld.w	r8,r12[0x0]
	mask &= ~(1U << module_index);
800088fe:	10 6b       	and	r11,r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
80008900:	99 0b       	st.w	r12[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80008902:	ed b9 00 10 	bld	r9,0x10
80008906:	c0 20       	breq	8000890a <sysclk_priv_disable_module+0x2e>
      cpu_irq_enable();
80008908:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
8000890a:	5e fc       	retal	r12

8000890c <sysclk_disable_pbb_module>:
/**
 * \brief Disable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_disable_pbb_module(unsigned int index)
{
8000890c:	d4 21       	pushm	r4-r7,lr
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(AVR32_PM_CLK_GRP_PBB, index);
8000890e:	18 9b       	mov	r11,r12
80008910:	30 3c       	mov	r12,3
80008912:	ce 5f       	rcall	800088dc <sysclk_priv_disable_module>
80008914:	e1 b7 00 00 	mfsr	r7,0x0

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80008918:	d3 03       	ssrf	0x10
	cpu_irq_disable();
8000891a:	e0 69 09 90 	mov	r9,2448

	/* Disable the bridge if possible */
	flags = cpu_irq_save();

	sysclk_pbb_refcount--;
8000891e:	13 88       	ld.ub	r8,r9[0x0]
80008920:	20 18       	sub	r8,1
80008922:	5c 58       	castu.b	r8
80008924:	b2 88       	st.b	r9[0x0],r8
	if (!sysclk_pbb_refcount)
80008926:	c0 41       	brne	8000892e <sysclk_disable_pbb_module+0x22>
 * \brief Disable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(unsigned int index)
{
	sysclk_priv_disable_module(AVR32_PM_CLK_GRP_HSB, index);
80008928:	30 2b       	mov	r11,2
8000892a:	30 1c       	mov	r12,1
8000892c:	cd 8f       	rcall	800088dc <sysclk_priv_disable_module>
8000892e:	e6 17 00 01 	andh	r7,0x1,COH
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80008932:	c0 21       	brne	80008936 <sysclk_disable_pbb_module+0x2a>
80008934:	d5 03       	csrf	0x10
      cpu_irq_enable();
80008936:	d8 22       	popm	r4-r7,pc

80008938 <sysclk_disable_usb>:
		sysclk_disable_hsb_module(SYSCLK_PBB_BRIDGE);

	cpu_irq_restore(flags);
}
80008938:	d4 01       	pushm	lr
8000893a:	30 09       	mov	r9,0
8000893c:	fe 78 0c 00 	mov	r8,-62464
80008940:	30 1c       	mov	r12,1
80008942:	f1 49 00 6c 	st.w	r8[108],r9
80008946:	30 3b       	mov	r11,3
80008948:	cc af       	rcall	800088dc <sysclk_priv_disable_module>
8000894a:	30 1c       	mov	r12,1
 */
void sysclk_disable_usb(void)
{
	genclk_disable(AVR32_PM_GCLK_USBB);
	sysclk_disable_hsb_module(SYSCLK_USBB_DATA);
	sysclk_disable_pbb_module(SYSCLK_USBB_REGS);
8000894c:	ce 0f       	rcall	8000890c <sysclk_disable_pbb_module>
8000894e:	d8 02       	popm	pc

80008950 <sysclk_priv_enable_module>:
80008950:	e1 b9 00 00 	mfsr	r9,0x0
}
80008954:	d3 03       	ssrf	0x10
80008956:	fe 7a 0c 00 	mov	r10,-62464
8000895a:	75 58       	ld.w	r8,r10[0x54]

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
8000895c:	ed b8 00 06 	bld	r8,0x6
80008960:	cf d1       	brne	8000895a <sysclk_priv_enable_module+0xa>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
	mask |= 1U << module_index;
80008962:	30 18       	mov	r8,1
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80008964:	a3 6c       	lsl	r12,0x2
	mask |= 1U << module_index;
80008966:	f0 0b 09 4b 	lsl	r11,r8,r11
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
8000896a:	e0 2c f3 f8 	sub	r12,62456
8000896e:	78 08       	ld.w	r8,r12[0x0]
	mask |= 1U << module_index;
80008970:	10 4b       	or	r11,r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
80008972:	99 0b       	st.w	r12[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80008974:	ed b9 00 10 	bld	r9,0x10
80008978:	c0 20       	breq	8000897c <sysclk_priv_enable_module+0x2c>
      cpu_irq_enable();
8000897a:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
8000897c:	5e fc       	retal	r12
8000897e:	d7 03       	nop

80008980 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
80008980:	d4 21       	pushm	r4-r7,lr
80008982:	18 97       	mov	r7,r12

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80008984:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80008988:	d3 03       	ssrf	0x10
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (!sysclk_pbb_refcount)
8000898a:	e0 68 09 90 	mov	r8,2448
8000898e:	11 89       	ld.ub	r9,r8[0x0]
80008990:	30 08       	mov	r8,0
80008992:	f0 09 18 00 	cp.b	r9,r8
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80008996:	c0 41       	brne	8000899e <sysclk_enable_pbb_module+0x1e>
80008998:	30 2b       	mov	r11,2
8000899a:	30 1c       	mov	r12,1
8000899c:	cd af       	rcall	80008950 <sysclk_priv_enable_module>
		sysclk_enable_hsb_module(SYSCLK_PBB_BRIDGE);
	sysclk_pbb_refcount++;
8000899e:	e0 68 09 90 	mov	r8,2448
800089a2:	11 89       	ld.ub	r9,r8[0x0]
800089a4:	2f f9       	sub	r9,-1
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800089a6:	b0 89       	st.b	r8[0x0],r9
800089a8:	e6 16 00 01 	andh	r6,0x1,COH
      cpu_irq_enable();
800089ac:	c0 21       	brne	800089b0 <sysclk_enable_pbb_module+0x30>

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
800089ae:	d5 03       	csrf	0x10
800089b0:	30 3c       	mov	r12,3
800089b2:	0e 9b       	mov	r11,r7
800089b4:	cc ef       	rcall	80008950 <sysclk_priv_enable_module>
}
800089b6:	d8 22       	popm	r4-r7,pc

800089b8 <T.62>:
800089b8:	fe 78 0c 00 	mov	r8,-62464
800089bc:	71 59       	ld.w	r9,r8[0x54]
800089be:	ed b9 00 07 	bld	r9,0x7

static inline void pll_enable_source(enum pll_source src)
{
	switch (src) {
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
800089c2:	5e 0c       	reteq	r12

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800089c4:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800089c8:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
800089ca:	e0 6a 03 07 	mov	r10,775
800089ce:	91 aa       	st.w	r8[0x28],r10
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
800089d0:	70 0a       	ld.w	r10,r8[0x0]
800089d2:	a3 aa       	sbr	r10,0x2
800089d4:	91 0a       	st.w	r8[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800089d6:	ed b9 00 10 	bld	r9,0x10
800089da:	c0 20       	breq	800089de <T.62+0x26>
      cpu_irq_enable();
800089dc:	d5 03       	csrf	0x10
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
800089de:	fe 79 0c 00 	mov	r9,-62464
800089e2:	73 58       	ld.w	r8,r9[0x54]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
800089e4:	ed b8 00 07 	bld	r8,0x7
800089e8:	cf d1       	brne	800089e2 <T.62+0x2a>
800089ea:	5e fc       	retal	r12

800089ec <pll_enable_config_defaults>:
		break;
	}
}

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
800089ec:	d4 21       	pushm	r4-r7,lr

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
800089ee:	fe 78 0c 00 	mov	r8,-62464
800089f2:	71 58       	ld.w	r8,r8[0x54]
800089f4:	30 16       	mov	r6,1
		break;
	}
}

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
800089f6:	18 97       	mov	r7,r12

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
800089f8:	ec 0c 09 46 	lsl	r6,r6,r12
{
	struct pll_config pllcfg;

	pllcfg.ctrl = 0;	// HACK 8/4/14 (bc) to remove warning

	if (pll_is_locked(pll_id)) {
800089fc:	ed e8 00 08 	and	r8,r6,r8
80008a00:	c1 b1       	brne	80008a36 <pll_enable_config_defaults+0x4a>
		return; // Pll already running
	}
	switch (pll_id) {
80008a02:	58 0c       	cp.w	r12,0
80008a04:	c0 40       	breq	80008a0c <pll_enable_config_defaults+0x20>
80008a06:	58 1c       	cp.w	r12,1
80008a08:	c0 d1       	brne	80008a22 <pll_enable_config_defaults+0x36>
80008a0a:	c0 78       	rjmp	80008a18 <pll_enable_config_defaults+0x2c>
#ifdef CONFIG_PLL0_SOURCE
	case 0:
		pll_enable_source(CONFIG_PLL0_SOURCE);
80008a0c:	cd 6f       	rcall	800089b8 <T.62>
80008a0e:	e0 68 01 0c 	mov	r8,268
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert((mul > 2) && (mul <= 16));
	Assert((div > 0) && (div <= 15));

	cfg->ctrl |= ((mul - 1) << AVR32_PM_PLL0_PLLMUL)
80008a12:	ea 18 3f 09 	orh	r8,0x3f09
80008a16:	c0 68       	rjmp	80008a22 <pll_enable_config_defaults+0x36>
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_init(&pllcfg,
				CONFIG_PLL0_SOURCE,
				CONFIG_PLL0_DIV,
				CONFIG_PLL0_MUL);
		break;
80008a18:	cd 0f       	rcall	800089b8 <T.62>
#endif
#ifdef CONFIG_PLL1_SOURCE
	case 1:
		pll_enable_source(CONFIG_PLL1_SOURCE);
80008a1a:	e0 68 01 0c 	mov	r8,268
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert((mul > 2) && (mul <= 16));
	Assert((div > 0) && (div <= 15));

	cfg->ctrl |= ((mul - 1) << AVR32_PM_PLL0_PLLMUL)
80008a1e:	ea 18 3f 07 	orh	r8,0x3f07
80008a22:	a1 a8       	sbr	r8,0x0
80008a24:	2f 87       	sub	r7,-8
static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
80008a26:	fe 79 0c 00 	mov	r9,-62464
80008a2a:	f2 07 09 28 	st.w	r9[r7<<0x2],r8
80008a2e:	73 58       	ld.w	r8,r9[0x54]
80008a30:	ed e8 00 08 	and	r8,r6,r8
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
80008a34:	cf d0       	breq	80008a2e <pll_enable_config_defaults+0x42>
80008a36:	d8 22       	popm	r4-r7,pc

80008a38 <sysclk_init>:
80008a38:	d4 01       	pushm	lr
80008a3a:	30 0c       	mov	r12,0
80008a3c:	cd 8f       	rcall	800089ec <pll_enable_config_defaults>
80008a3e:	e0 6c 87 00 	mov	r12,34560

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
80008a42:	ea 1c 03 93 	orh	r12,0x393
80008a46:	fe b0 ed 6d 	rcall	80006520 <flashc_set_bus_freq>
80008a4a:	e1 b9 00 00 	mfsr	r9,0x0

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80008a4e:	d3 03       	ssrf	0x10
	cpu_irq_disable();
80008a50:	fe 7a 0c 00 	mov	r10,-62464
	irqflags_t flags;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
80008a54:	74 08       	ld.w	r8,r10[0x0]
80008a56:	e0 18 ff fc 	andl	r8,0xfffc
80008a5a:	a1 b8       	sbr	r8,0x1
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
80008a5c:	95 08       	st.w	r10[0x0],r8
	AVR32_PM.mcctrl = mcctrl;
80008a5e:	ed b9 00 10 	bld	r9,0x10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80008a62:	c0 20       	breq	80008a66 <sysclk_init+0x2e>
80008a64:	d5 03       	csrf	0x10
      cpu_irq_enable();
80008a66:	d8 02       	popm	pc

80008a68 <sysclk_enable_usb>:

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80008a68:	d4 01       	pushm	lr
80008a6a:	30 1c       	mov	r12,1
80008a6c:	c8 af       	rcall	80008980 <sysclk_enable_pbb_module>
80008a6e:	30 3b       	mov	r11,3
80008a70:	30 1c       	mov	r12,1
80008a72:	c6 ff       	rcall	80008950 <sysclk_priv_enable_module>
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80008a74:	30 1c       	mov	r12,1
80008a76:	cb bf       	rcall	800089ec <pll_enable_config_defaults>
	}
#endif

#ifdef CONFIG_PLL1_SOURCE
	case GENCLK_SRC_PLL1: {
		pll_enable_config_defaults(1);
80008a78:	30 79       	mov	r9,7
80008a7a:	fe 78 0c 00 	mov	r8,-62464
}

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
80008a7e:	f1 49 00 6c 	st.w	r8[108],r9
80008a82:	d8 02       	popm	pc

80008a84 <__avr32_udiv64>:
#endif

#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
80008a84:	d4 31       	pushm	r0-r7,lr
80008a86:	1a 97       	mov	r7,sp
80008a88:	20 2d       	sub	sp,8
  DWunion rr;
  UWtype d0, d1, n0, n1, n2;
  UWtype q0, q1;
  UWtype b, bm;

  d0 = dd.s.low;
80008a8a:	10 9c       	mov	r12,r8
  d1 = dd.s.high;
80008a8c:	12 9e       	mov	lr,r9
  n0 = nn.s.low;
80008a8e:	14 93       	mov	r3,r10
	}
    }

#else /* UDIV_NEEDS_NORMALIZATION */

  if (d1 == 0)
80008a90:	58 09       	cp.w	r9,0
80008a92:	e0 81 00 cd 	brne	80008c2c <__avr32_udiv64+0x1a8>
    {
      if (d0 > n1)
80008a96:	16 38       	cp.w	r8,r11
80008a98:	e0 88 00 45 	brls	80008b22 <__avr32_udiv64+0x9e>
	{
	  /* 0q = nn / 0D */

	  count_leading_zeros (bm, d0);
80008a9c:	f0 08 12 00 	clz	r8,r8

	  if (bm != 0)
80008aa0:	c0 d0       	breq	80008aba <__avr32_udiv64+0x36>
	    {
	      /* Normalize, i.e. make the most significant bit of the
		 denominator set.  */

	      d0 = d0 << bm;
	      n1 = (n1 << bm) | (n0 >> (W_TYPE_SIZE - bm));
80008aa2:	f6 08 09 4b 	lsl	r11,r11,r8
80008aa6:	f0 09 11 20 	rsub	r9,r8,32
	  if (bm != 0)
	    {
	      /* Normalize, i.e. make the most significant bit of the
		 denominator set.  */

	      d0 = d0 << bm;
80008aaa:	f8 08 09 4c 	lsl	r12,r12,r8
	      n1 = (n1 << bm) | (n0 >> (W_TYPE_SIZE - bm));
80008aae:	f4 09 0a 49 	lsr	r9,r10,r9
	      n0 = n0 << bm;
80008ab2:	f4 08 09 43 	lsl	r3,r10,r8
	    {
	      /* Normalize, i.e. make the most significant bit of the
		 denominator set.  */

	      d0 = d0 << bm;
	      n1 = (n1 << bm) | (n0 >> (W_TYPE_SIZE - bm));
80008ab6:	f3 eb 10 0b 	or	r11,r9,r11
	      n0 = n0 << bm;
	    }

	  udiv_qrnnd (q0, n0, n1, n0, d0);
80008aba:	f8 0e 16 10 	lsr	lr,r12,0x10
80008abe:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80008ac2:	f6 0e 0d 00 	divu	r0,r11,lr
80008ac6:	e6 0b 16 10 	lsr	r11,r3,0x10
80008aca:	00 99       	mov	r9,r0
80008acc:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008ad0:	e0 0a 02 48 	mul	r8,r0,r10
80008ad4:	10 3b       	cp.w	r11,r8
80008ad6:	c0 d2       	brcc	80008af0 <__avr32_udiv64+0x6c>
80008ad8:	20 19       	sub	r9,1
80008ada:	18 0b       	add	r11,r12
80008adc:	18 3b       	cp.w	r11,r12
80008ade:	c0 93       	brcs	80008af0 <__avr32_udiv64+0x6c>
80008ae0:	f2 c5 00 01 	sub	r5,r9,1
80008ae4:	f6 0c 00 06 	add	r6,r11,r12
80008ae8:	10 3b       	cp.w	r11,r8
80008aea:	c0 32       	brcc	80008af0 <__avr32_udiv64+0x6c>
80008aec:	0a 99       	mov	r9,r5
80008aee:	0c 9b       	mov	r11,r6
80008af0:	f6 08 01 01 	sub	r1,r11,r8
80008af4:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80008af8:	e2 0e 0d 00 	divu	r0,r1,lr
80008afc:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80008b00:	00 98       	mov	r8,r0
80008b02:	e0 0a 02 4a 	mul	r10,r0,r10
80008b06:	14 33       	cp.w	r3,r10
80008b08:	c0 a2       	brcc	80008b1c <__avr32_udiv64+0x98>
80008b0a:	20 18       	sub	r8,1
80008b0c:	18 03       	add	r3,r12
80008b0e:	18 33       	cp.w	r3,r12
80008b10:	c0 63       	brcs	80008b1c <__avr32_udiv64+0x98>
80008b12:	f0 cb 00 01 	sub	r11,r8,1
80008b16:	14 33       	cp.w	r3,r10
80008b18:	f6 08 17 30 	movlo	r8,r11
80008b1c:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80008b20:	ce c8       	rjmp	80008cf8 <__avr32_udiv64+0x274>
	}
      else
	{
	  /* qq = NN / 0d */

	  if (d0 == 0)
80008b22:	58 08       	cp.w	r8,0
80008b24:	c0 51       	brne	80008b2e <__avr32_udiv64+0xaa>
	    d0 = 1 / d0;	/* Divide intentionally by zero.  */
80008b26:	30 19       	mov	r9,1
80008b28:	f2 08 0d 08 	divu	r8,r9,r8
80008b2c:	10 9c       	mov	r12,r8

	  count_leading_zeros (bm, d0);
80008b2e:	f8 06 12 00 	clz	r6,r12

	  if (bm == 0)
80008b32:	c0 41       	brne	80008b3a <__avr32_udiv64+0xb6>
		 leading quotient digit q1 = 1).

		 This special case is necessary, not an optimization.
		 (Shifts counts of W_TYPE_SIZE are undefined.)  */

	      n1 -= d0;
80008b34:	18 1b       	sub	r11,r12
80008b36:	30 19       	mov	r9,1
80008b38:	c4 68       	rjmp	80008bc4 <__avr32_udiv64+0x140>
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d0 = d0 << bm;
	      n2 = n1 >> b;
80008b3a:	ec 01 11 20 	rsub	r1,r6,32
	      n1 = (n1 << bm) | (n0 >> b);
80008b3e:	f4 01 0a 49 	lsr	r9,r10,r1
	    {
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d0 = d0 << bm;
80008b42:	f8 06 09 4c 	lsl	r12,r12,r6
	      n2 = n1 >> b;
	      n1 = (n1 << bm) | (n0 >> b);
80008b46:	f6 06 09 48 	lsl	r8,r11,r6
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d0 = d0 << bm;
	      n2 = n1 >> b;
80008b4a:	f6 01 0a 41 	lsr	r1,r11,r1
	      n1 = (n1 << bm) | (n0 >> b);
80008b4e:	f3 e8 10 08 	or	r8,r9,r8
	      n0 = n0 << bm;

	      udiv_qrnnd (q1, n1, n2, n1, d0);
80008b52:	f8 03 16 10 	lsr	r3,r12,0x10
80008b56:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80008b5a:	e2 03 0d 00 	divu	r0,r1,r3
80008b5e:	f0 0b 16 10 	lsr	r11,r8,0x10
80008b62:	00 9e       	mov	lr,r0
80008b64:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008b68:	e0 05 02 49 	mul	r9,r0,r5
80008b6c:	12 3b       	cp.w	r11,r9
80008b6e:	c0 d2       	brcc	80008b88 <__avr32_udiv64+0x104>
80008b70:	20 1e       	sub	lr,1
80008b72:	18 0b       	add	r11,r12
80008b74:	18 3b       	cp.w	r11,r12
80008b76:	c0 93       	brcs	80008b88 <__avr32_udiv64+0x104>
80008b78:	fc c1 00 01 	sub	r1,lr,1
80008b7c:	f6 0c 00 02 	add	r2,r11,r12
80008b80:	12 3b       	cp.w	r11,r9
80008b82:	c0 32       	brcc	80008b88 <__avr32_udiv64+0x104>
80008b84:	02 9e       	mov	lr,r1
80008b86:	04 9b       	mov	r11,r2
80008b88:	12 1b       	sub	r11,r9
80008b8a:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80008b8e:	f6 03 0d 02 	divu	r2,r11,r3
80008b92:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80008b96:	04 99       	mov	r9,r2
80008b98:	e4 05 02 4b 	mul	r11,r2,r5
80008b9c:	16 38       	cp.w	r8,r11
80008b9e:	c0 d2       	brcc	80008bb8 <__avr32_udiv64+0x134>
80008ba0:	20 19       	sub	r9,1
80008ba2:	18 08       	add	r8,r12
80008ba4:	18 38       	cp.w	r8,r12
80008ba6:	c0 93       	brcs	80008bb8 <__avr32_udiv64+0x134>
80008ba8:	f2 c3 00 01 	sub	r3,r9,1
80008bac:	f0 0c 00 05 	add	r5,r8,r12
80008bb0:	16 38       	cp.w	r8,r11
80008bb2:	c0 32       	brcc	80008bb8 <__avr32_udiv64+0x134>
80008bb4:	06 99       	mov	r9,r3
80008bb6:	0a 98       	mov	r8,r5
	      b = W_TYPE_SIZE - bm;

	      d0 = d0 << bm;
	      n2 = n1 >> b;
	      n1 = (n1 << bm) | (n0 >> b);
	      n0 = n0 << bm;
80008bb8:	f4 06 09 43 	lsl	r3,r10,r6

	      udiv_qrnnd (q1, n1, n2, n1, d0);
80008bbc:	f0 0b 01 0b 	sub	r11,r8,r11
80008bc0:	f3 ee 11 09 	or	r9,r9,lr<<0x10
	    }

	  /* n1 != d0...  */

	  udiv_qrnnd (q0, n0, n1, n0, d0);
80008bc4:	f8 06 16 10 	lsr	r6,r12,0x10
80008bc8:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80008bcc:	f6 06 0d 00 	divu	r0,r11,r6
80008bd0:	e6 0b 16 10 	lsr	r11,r3,0x10
80008bd4:	00 9a       	mov	r10,r0
80008bd6:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008bda:	e0 0e 02 48 	mul	r8,r0,lr
80008bde:	10 3b       	cp.w	r11,r8
80008be0:	c0 d2       	brcc	80008bfa <__avr32_udiv64+0x176>
80008be2:	20 1a       	sub	r10,1
80008be4:	18 0b       	add	r11,r12
80008be6:	18 3b       	cp.w	r11,r12
80008be8:	c0 93       	brcs	80008bfa <__avr32_udiv64+0x176>
80008bea:	f4 c2 00 01 	sub	r2,r10,1
80008bee:	f6 0c 00 05 	add	r5,r11,r12
80008bf2:	10 3b       	cp.w	r11,r8
80008bf4:	c0 32       	brcc	80008bfa <__avr32_udiv64+0x176>
80008bf6:	04 9a       	mov	r10,r2
80008bf8:	0a 9b       	mov	r11,r5
80008bfa:	f6 08 01 01 	sub	r1,r11,r8
80008bfe:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80008c02:	e2 06 0d 00 	divu	r0,r1,r6
80008c06:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80008c0a:	00 98       	mov	r8,r0
80008c0c:	e0 0e 02 4b 	mul	r11,r0,lr
80008c10:	16 33       	cp.w	r3,r11
80008c12:	c0 a2       	brcc	80008c26 <__avr32_udiv64+0x1a2>
80008c14:	20 18       	sub	r8,1
80008c16:	18 03       	add	r3,r12
80008c18:	18 33       	cp.w	r3,r12
80008c1a:	c0 63       	brcs	80008c26 <__avr32_udiv64+0x1a2>
80008c1c:	f0 cc 00 01 	sub	r12,r8,1
80008c20:	16 33       	cp.w	r3,r11
80008c22:	f8 08 17 30 	movlo	r8,r12
80008c26:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80008c2a:	c6 b8       	rjmp	80008d00 <__avr32_udiv64+0x27c>
    }
#endif /* UDIV_NEEDS_NORMALIZATION */

  else
    {
      if (d1 > n1)
80008c2c:	16 39       	cp.w	r9,r11
80008c2e:	e0 8b 00 67 	brhi	80008cfc <__avr32_udiv64+0x278>
	}
      else
	{
	  /* 0q = NN / dd */

	  count_leading_zeros (bm, d1);
80008c32:	f2 09 12 00 	clz	r9,r9
	  if (bm == 0)
80008c36:	c0 b1       	brne	80008c4c <__avr32_udiv64+0x1c8>

		 This special case is necessary, not an optimization.  */

	      /* The condition on the next line takes advantage of that
		 n1 >= d1 (true due to program flow).  */
	      if (n1 > d1 || n0 >= d0)
80008c38:	10 3a       	cp.w	r10,r8
80008c3a:	5f 2a       	srhs	r10
80008c3c:	1c 3b       	cp.w	r11,lr
80008c3e:	5f b8       	srhi	r8
80008c40:	10 4a       	or	r10,r8
80008c42:	f2 0a 18 00 	cp.b	r10,r9
80008c46:	c5 b0       	breq	80008cfc <__avr32_udiv64+0x278>
		{
		  q0 = 1;
		  sub_ddmmss (n1, n0, n1, n0, d1, d0);
80008c48:	30 18       	mov	r8,1
80008c4a:	c5 b8       	rjmp	80008d00 <__avr32_udiv64+0x27c>
	      UWtype m1, m0;
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
80008c4c:	f2 03 11 20 	rsub	r3,r9,32
80008c50:	fc 09 09 4e 	lsl	lr,lr,r9
	      d0 = d0 << bm;
	      n2 = n1 >> b;
	      n1 = (n1 << bm) | (n0 >> b);
80008c54:	f6 09 09 4c 	lsl	r12,r11,r9
80008c58:	f4 03 0a 42 	lsr	r2,r10,r3
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
	      d0 = d0 << bm;
80008c5c:	f0 09 09 46 	lsl	r6,r8,r9
	      UWtype m1, m0;
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
80008c60:	f0 03 0a 48 	lsr	r8,r8,r3
	      d0 = d0 << bm;
	      n2 = n1 >> b;
80008c64:	f6 03 0a 43 	lsr	r3,r11,r3
	      n1 = (n1 << bm) | (n0 >> b);
80008c68:	18 42       	or	r2,r12
	      UWtype m1, m0;
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
80008c6a:	f1 ee 10 0c 	or	r12,r8,lr
	      d0 = d0 << bm;
	      n2 = n1 >> b;
	      n1 = (n1 << bm) | (n0 >> b);
	      n0 = n0 << bm;

	      udiv_qrnnd (q0, n1, n2, n1, d1);
80008c6e:	f8 01 16 10 	lsr	r1,r12,0x10
80008c72:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80008c76:	e6 01 0d 04 	divu	r4,r3,r1
80008c7a:	e4 03 16 10 	lsr	r3,r2,0x10
80008c7e:	08 98       	mov	r8,r4
80008c80:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80008c84:	e8 0e 02 45 	mul	r5,r4,lr
80008c88:	0a 33       	cp.w	r3,r5
80008c8a:	c0 d2       	brcc	80008ca4 <__avr32_udiv64+0x220>
80008c8c:	20 18       	sub	r8,1
80008c8e:	18 03       	add	r3,r12
80008c90:	18 33       	cp.w	r3,r12
80008c92:	c0 93       	brcs	80008ca4 <__avr32_udiv64+0x220>
80008c94:	f0 c0 00 01 	sub	r0,r8,1
80008c98:	e6 0c 00 0b 	add	r11,r3,r12
80008c9c:	0a 33       	cp.w	r3,r5
80008c9e:	c0 32       	brcc	80008ca4 <__avr32_udiv64+0x220>
80008ca0:	00 98       	mov	r8,r0
80008ca2:	16 93       	mov	r3,r11
80008ca4:	0a 13       	sub	r3,r5
80008ca6:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80008caa:	e6 01 0d 00 	divu	r0,r3,r1
80008cae:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008cb2:	00 93       	mov	r3,r0
80008cb4:	e0 0e 02 4e 	mul	lr,r0,lr
80008cb8:	1c 3b       	cp.w	r11,lr
80008cba:	c0 d2       	brcc	80008cd4 <__avr32_udiv64+0x250>
80008cbc:	20 13       	sub	r3,1
80008cbe:	18 0b       	add	r11,r12
80008cc0:	18 3b       	cp.w	r11,r12
80008cc2:	c0 93       	brcs	80008cd4 <__avr32_udiv64+0x250>
80008cc4:	f6 0c 00 0c 	add	r12,r11,r12
80008cc8:	e6 c5 00 01 	sub	r5,r3,1
80008ccc:	1c 3b       	cp.w	r11,lr
80008cce:	c0 32       	brcc	80008cd4 <__avr32_udiv64+0x250>
80008cd0:	0a 93       	mov	r3,r5
80008cd2:	18 9b       	mov	r11,r12
80008cd4:	e7 e8 11 08 	or	r8,r3,r8<<0x10
80008cd8:	1c 1b       	sub	r11,lr
	      umul_ppmm (m1, m0, q0, d0);
80008cda:	f0 06 06 42 	mulu.d	r2,r8,r6
80008cde:	06 96       	mov	r6,r3

	      if (m1 > n1 || (m1 == n1 && m0 > n0))
80008ce0:	16 36       	cp.w	r6,r11
80008ce2:	e0 8b 00 0a 	brhi	80008cf6 <__avr32_udiv64+0x272>
80008ce6:	5f 0b       	sreq	r11
80008ce8:	f4 09 09 49 	lsl	r9,r10,r9
80008cec:	12 32       	cp.w	r2,r9
80008cee:	5f b9       	srhi	r9
80008cf0:	f7 e9 00 09 	and	r9,r11,r9
80008cf4:	c0 60       	breq	80008d00 <__avr32_udiv64+0x27c>
		{
		  q0--;
80008cf6:	20 18       	sub	r8,1
		  sub_ddmmss (m1, m0, m1, m0, d1, d0);
80008cf8:	30 09       	mov	r9,0
80008cfa:	c0 38       	rjmp	80008d00 <__avr32_udiv64+0x27c>
80008cfc:	30 09       	mov	r9,0
80008cfe:	12 98       	mov	r8,r9
#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
  return __udivmoddi4 (n, d, (UDWtype *) 0);
}
80008d00:	10 9a       	mov	r10,r8
		}
	    }
	}
    }

  const DWunion ww = {{.low = q0, .high = q1}};
80008d02:	12 93       	mov	r3,r9
80008d04:	10 92       	mov	r2,r8
#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
  return __udivmoddi4 (n, d, (UDWtype *) 0);
}
80008d06:	12 9b       	mov	r11,r9
80008d08:	2f ed       	sub	sp,-8
80008d0a:	d8 32       	popm	r0-r7,pc

80008d0c <atexit>:

int
_DEFUN (atexit,
	(fn),
	_VOID _EXFUN ((*fn), (_VOID)))
{
80008d0c:	d4 01       	pushm	lr
  return __register_exitproc (__et_atexit, fn, NULL, NULL);
80008d0e:	30 09       	mov	r9,0
80008d10:	18 9b       	mov	r11,r12
80008d12:	12 9a       	mov	r10,r9
80008d14:	12 9c       	mov	r12,r9
80008d16:	e0 a0 03 67 	rcall	800093e4 <__register_exitproc>
}
80008d1a:	d8 02       	popm	pc

80008d1c <exit>:
 */

void 
_DEFUN (exit, (code),
	int code)
{
80008d1c:	d4 21       	pushm	r4-r7,lr
  __call_exitprocs (code, NULL);
80008d1e:	30 0b       	mov	r11,0
 */

void 
_DEFUN (exit, (code),
	int code)
{
80008d20:	18 97       	mov	r7,r12
  __call_exitprocs (code, NULL);
80008d22:	e0 a0 03 b3 	rcall	80009488 <__call_exitprocs>

  if (_GLOBAL_REENT->__cleanup)
80008d26:	fe c8 ed 6a 	sub	r8,pc,-4758
80008d2a:	70 0c       	ld.w	r12,r8[0x0]
80008d2c:	78 a8       	ld.w	r8,r12[0x28]
80008d2e:	58 08       	cp.w	r8,0
    (*_GLOBAL_REENT->__cleanup) (_GLOBAL_REENT);
80008d30:	c0 20       	breq	80008d34 <exit+0x18>
  _exit (code);
80008d32:	5d 18       	icall	r8
80008d34:	0e 9c       	mov	r12,r7
80008d36:	e0 a0 03 36 	rcall	800093a2 <_exit>
80008d3a:	d7 03       	nop

80008d3c <free>:
}

void
_DEFUN (free, (aptr),
	_PTR aptr)
{
80008d3c:	d4 01       	pushm	lr
  _free_r (_REENT, aptr);
80008d3e:	e0 68 01 30 	mov	r8,304
80008d42:	18 9b       	mov	r11,r12
80008d44:	70 0c       	ld.w	r12,r8[0x0]
80008d46:	e0 a0 04 53 	rcall	800095ec <_free_r>
}
80008d4a:	d8 02       	popm	pc

80008d4c <malloc>:
80008d4c:	d4 01       	pushm	lr
80008d4e:	e0 68 01 30 	mov	r8,304
80008d52:	18 9b       	mov	r11,r12

_PTR
_DEFUN (malloc, (nbytes),
	size_t nbytes)		/* get a block */
{
  return _malloc_r (_REENT, nbytes);
80008d54:	70 0c       	ld.w	r12,r8[0x0]
80008d56:	c0 3c       	rcall	80008d5c <_malloc_r>
}
80008d58:	d8 02       	popm	pc
80008d5a:	d7 03       	nop

80008d5c <_malloc_r>:
#if __STD_C
Void_t* mALLOc(RARG size_t bytes)
#else
Void_t* mALLOc(RARG bytes) RDECL size_t bytes;
#endif
{
80008d5c:	d4 31       	pushm	r0-r7,lr
  int       startidx;                /* first bin of a traversed block */
  mchunkptr fwd;                     /* misc temp for linking */
  mchunkptr bck;                     /* misc temp for linking */
  mbinptr q;                         /* misc temp */

  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
80008d5e:	f6 c8 ff f5 	sub	r8,r11,-11
#if __STD_C
Void_t* mALLOc(RARG size_t bytes)
#else
Void_t* mALLOc(RARG bytes) RDECL size_t bytes;
#endif
{
80008d62:	18 95       	mov	r5,r12
  int       startidx;                /* first bin of a traversed block */
  mchunkptr fwd;                     /* misc temp for linking */
  mchunkptr bck;                     /* misc temp for linking */
  mbinptr q;                         /* misc temp */

  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
80008d64:	10 97       	mov	r7,r8
80008d66:	e0 17 ff f8 	andl	r7,0xfff8
80008d6a:	59 68       	cp.w	r8,22
80008d6c:	f9 b7 08 10 	movls	r7,16

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
80008d70:	16 37       	cp.w	r7,r11
80008d72:	5f 38       	srlo	r8
80008d74:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80008d78:	c0 50       	breq	80008d82 <_malloc_r+0x26>
  {
    RERRNO = ENOMEM;
80008d7a:	30 c8       	mov	r8,12
80008d7c:	99 38       	st.w	r12[0xc],r8
80008d7e:	e0 8f 01 f4 	bral	80009166 <_malloc_r+0x40a>
    return 0;
  }

  MALLOC_LOCK;
80008d82:	e0 a0 02 a5 	rcall	800092cc <__malloc_lock>

  /* Check for exact match in a bin */

  if (is_small_request(nb))  /* Faster version for small requests */
80008d86:	e0 47 01 f7 	cp.w	r7,503
80008d8a:	e0 8b 00 1d 	brhi	80008dc4 <_malloc_r+0x68>
  {
    idx = smallbin_index(nb); 
80008d8e:	ee 03 16 03 	lsr	r3,r7,0x3

    /* No traversal or size check necessary for small bins.  */

    q = bin_at(idx);
80008d92:	e0 68 01 34 	mov	r8,308
80008d96:	f0 03 00 38 	add	r8,r8,r3<<0x3
    victim = last(q);

#if MALLOC_ALIGN != 16
    /* Also scan the next one, since it would have a remainder < MINSIZE */
    if (victim == q)
80008d9a:	70 36       	ld.w	r6,r8[0xc]
80008d9c:	10 36       	cp.w	r6,r8
    {
      q = next_bin(q);
80008d9e:	c0 61       	brne	80008daa <_malloc_r+0x4e>
80008da0:	ec c8 ff f8 	sub	r8,r6,-8
      victim = last(q);
    }
#endif
    if (victim != q)
80008da4:	70 36       	ld.w	r6,r8[0xc]
80008da6:	10 36       	cp.w	r6,r8
    {
      victim_size = chunksize(victim);
80008da8:	c0 c0       	breq	80008dc0 <_malloc_r+0x64>
80008daa:	6c 18       	ld.w	r8,r6[0x4]
80008dac:	e0 18 ff fc 	andl	r8,0xfffc
      unlink(victim, bck, fwd);
      set_inuse_bit_at_offset(victim, victim_size);
80008db0:	6c 3a       	ld.w	r10,r6[0xc]
80008db2:	ec 08 00 09 	add	r9,r6,r8
    }
#endif
    if (victim != q)
    {
      victim_size = chunksize(victim);
      unlink(victim, bck, fwd);
80008db6:	0a 9c       	mov	r12,r5
80008db8:	6c 28       	ld.w	r8,r6[0x8]
80008dba:	95 28       	st.w	r10[0x8],r8
80008dbc:	91 3a       	st.w	r8[0xc],r10
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
      return chunk2mem(victim);
    }

    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */
80008dbe:	c4 78       	rjmp	80008e4c <_malloc_r+0xf0>
80008dc0:	2f e3       	sub	r3,-2

  }
  else
  {
    idx = bin_index(nb);
80008dc2:	c4 d8       	rjmp	80008e5c <_malloc_r+0x100>
80008dc4:	ee 03 16 09 	lsr	r3,r7,0x9
80008dc8:	c0 41       	brne	80008dd0 <_malloc_r+0x74>
80008dca:	ee 03 16 03 	lsr	r3,r7,0x3
80008dce:	c2 68       	rjmp	80008e1a <_malloc_r+0xbe>
80008dd0:	58 43       	cp.w	r3,4
80008dd2:	e0 8b 00 06 	brhi	80008dde <_malloc_r+0x82>
80008dd6:	ee 03 16 06 	lsr	r3,r7,0x6
80008dda:	2c 83       	sub	r3,-56
80008ddc:	c1 f8       	rjmp	80008e1a <_malloc_r+0xbe>
80008dde:	59 43       	cp.w	r3,20
80008de0:	e0 8b 00 04 	brhi	80008de8 <_malloc_r+0x8c>
80008de4:	2a 53       	sub	r3,-91
80008de6:	c1 a8       	rjmp	80008e1a <_malloc_r+0xbe>
80008de8:	e0 43 00 54 	cp.w	r3,84
80008dec:	e0 8b 00 06 	brhi	80008df8 <_malloc_r+0x9c>
80008df0:	ee 03 16 0c 	lsr	r3,r7,0xc
80008df4:	29 23       	sub	r3,-110
80008df6:	c1 28       	rjmp	80008e1a <_malloc_r+0xbe>
80008df8:	e0 43 01 54 	cp.w	r3,340
80008dfc:	e0 8b 00 06 	brhi	80008e08 <_malloc_r+0xac>
80008e00:	ee 03 16 0f 	lsr	r3,r7,0xf
80008e04:	28 93       	sub	r3,-119
80008e06:	c0 a8       	rjmp	80008e1a <_malloc_r+0xbe>
80008e08:	e0 43 05 54 	cp.w	r3,1364
80008e0c:	e0 88 00 04 	brls	80008e14 <_malloc_r+0xb8>
80008e10:	37 e3       	mov	r3,126
80008e12:	c0 48       	rjmp	80008e1a <_malloc_r+0xbe>
80008e14:	ee 03 16 12 	lsr	r3,r7,0x12
    bin = bin_at(idx);
80008e18:	28 43       	sub	r3,-124
80008e1a:	e0 6a 01 34 	mov	r10,308

    for (victim = last(bin); victim != bin; victim = victim->bk)
80008e1e:	f4 03 00 3a 	add	r10,r10,r3<<0x3
    {
      victim_size = chunksize(victim);
80008e22:	74 36       	ld.w	r6,r10[0xc]
80008e24:	c1 98       	rjmp	80008e56 <_malloc_r+0xfa>
80008e26:	6c 19       	ld.w	r9,r6[0x4]
      remainder_size = long_sub_size_t(victim_size, nb);
80008e28:	e0 19 ff fc 	andl	r9,0xfffc
      
      if (remainder_size >= (long)MINSIZE) /* too big */
80008e2c:	f2 07 01 0b 	sub	r11,r9,r7
80008e30:	58 fb       	cp.w	r11,15
      {
        --idx; /* adjust to rescan below after checking last remainder */
80008e32:	e0 8a 00 04 	brle	80008e3a <_malloc_r+0xde>
        break;   
80008e36:	20 13       	sub	r3,1
      }

      else if (remainder_size >= 0) /* exact fit */
80008e38:	c1 18       	rjmp	80008e5a <_malloc_r+0xfe>
80008e3a:	6c 38       	ld.w	r8,r6[0xc]
      {
        unlink(victim, bck, fwd);
80008e3c:	58 0b       	cp.w	r11,0
        set_inuse_bit_at_offset(victim, victim_size);
80008e3e:	c0 b5       	brlt	80008e54 <_malloc_r+0xf8>
80008e40:	6c 2a       	ld.w	r10,r6[0x8]
        check_malloced_chunk(victim, nb);
	MALLOC_UNLOCK;
80008e42:	ec 09 00 09 	add	r9,r6,r9
        break;   
      }

      else if (remainder_size >= 0) /* exact fit */
      {
        unlink(victim, bck, fwd);
80008e46:	0a 9c       	mov	r12,r5
        set_inuse_bit_at_offset(victim, victim_size);
80008e48:	91 2a       	st.w	r8[0x8],r10
80008e4a:	95 38       	st.w	r10[0xc],r8
80008e4c:	72 18       	ld.w	r8,r9[0x4]
80008e4e:	a1 a8       	sbr	r8,0x0
  else
  {
    idx = bin_index(nb);
    bin = bin_at(idx);

    for (victim = last(bin); victim != bin; victim = victim->bk)
80008e50:	93 18       	st.w	r9[0x4],r8
80008e52:	cb c8       	rjmp	80008fca <_malloc_r+0x26e>
80008e54:	10 96       	mov	r6,r8
	MALLOC_UNLOCK;
        return chunk2mem(victim);
      }
    }

    ++idx; 
80008e56:	14 36       	cp.w	r6,r10

  }

  /* Try to use the last split-off remainder */

  if ( (victim = last_remainder->fd) != last_remainder)
80008e58:	ce 71       	brne	80008e26 <_malloc_r+0xca>
80008e5a:	2f f3       	sub	r3,-1
80008e5c:	e0 6a 01 34 	mov	r10,308
80008e60:	f4 cc ff f8 	sub	r12,r10,-8
  {
    victim_size = chunksize(victim);
80008e64:	78 26       	ld.w	r6,r12[0x8]
80008e66:	18 36       	cp.w	r6,r12
80008e68:	c6 c0       	breq	80008f40 <_malloc_r+0x1e4>
    remainder_size = long_sub_size_t(victim_size, nb);
80008e6a:	6c 19       	ld.w	r9,r6[0x4]
80008e6c:	e0 19 ff fc 	andl	r9,0xfffc

    if (remainder_size >= (long)MINSIZE) /* re-split */
80008e70:	f2 07 01 08 	sub	r8,r9,r7
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
      return chunk2mem(victim);
    }

    clear_last_remainder;
80008e74:	58 f8       	cp.w	r8,15
80008e76:	e0 89 00 8f 	brgt	80008f94 <_malloc_r+0x238>

    if (remainder_size >= 0)  /* exhaust */
80008e7a:	99 3c       	st.w	r12[0xc],r12
    {
      set_inuse_bit_at_offset(victim, victim_size);
80008e7c:	99 2c       	st.w	r12[0x8],r12
80008e7e:	58 08       	cp.w	r8,0
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
80008e80:	c0 55       	brlt	80008e8a <_malloc_r+0x12e>
80008e82:	ec 09 00 09 	add	r9,r6,r9
      return chunk2mem(victim);
    }

    /* Else place in bin */

    frontlink(victim, victim_size, remainder_index, bck, fwd);
80008e86:	0a 9c       	mov	r12,r5
80008e88:	ce 2b       	rjmp	80008e4c <_malloc_r+0xf0>
80008e8a:	e0 49 01 ff 	cp.w	r9,511
80008e8e:	e0 8b 00 13 	brhi	80008eb4 <_malloc_r+0x158>
80008e92:	a3 99       	lsr	r9,0x3
80008e94:	f4 09 00 38 	add	r8,r10,r9<<0x3
80008e98:	70 2b       	ld.w	r11,r8[0x8]
80008e9a:	8d 38       	st.w	r6[0xc],r8
80008e9c:	8d 2b       	st.w	r6[0x8],r11
80008e9e:	97 36       	st.w	r11[0xc],r6
80008ea0:	91 26       	st.w	r8[0x8],r6
80008ea2:	a3 49       	asr	r9,0x2
80008ea4:	74 18       	ld.w	r8,r10[0x4]
80008ea6:	30 1b       	mov	r11,1
80008ea8:	f6 09 09 49 	lsl	r9,r11,r9
80008eac:	f1 e9 10 09 	or	r9,r8,r9
80008eb0:	95 19       	st.w	r10[0x4],r9
80008eb2:	c4 78       	rjmp	80008f40 <_malloc_r+0x1e4>
80008eb4:	f2 0a 16 09 	lsr	r10,r9,0x9
80008eb8:	58 4a       	cp.w	r10,4
80008eba:	e0 8b 00 07 	brhi	80008ec8 <_malloc_r+0x16c>
80008ebe:	f2 0a 16 06 	lsr	r10,r9,0x6
80008ec2:	2c 8a       	sub	r10,-56
80008ec4:	c2 08       	rjmp	80008f04 <_malloc_r+0x1a8>
80008ec6:	d7 03       	nop
80008ec8:	59 4a       	cp.w	r10,20
80008eca:	e0 8b 00 04 	brhi	80008ed2 <_malloc_r+0x176>
80008ece:	2a 5a       	sub	r10,-91
80008ed0:	c1 a8       	rjmp	80008f04 <_malloc_r+0x1a8>
80008ed2:	e0 4a 00 54 	cp.w	r10,84
80008ed6:	e0 8b 00 06 	brhi	80008ee2 <_malloc_r+0x186>
80008eda:	f2 0a 16 0c 	lsr	r10,r9,0xc
80008ede:	29 2a       	sub	r10,-110
80008ee0:	c1 28       	rjmp	80008f04 <_malloc_r+0x1a8>
80008ee2:	e0 4a 01 54 	cp.w	r10,340
80008ee6:	e0 8b 00 06 	brhi	80008ef2 <_malloc_r+0x196>
80008eea:	f2 0a 16 0f 	lsr	r10,r9,0xf
80008eee:	28 9a       	sub	r10,-119
80008ef0:	c0 a8       	rjmp	80008f04 <_malloc_r+0x1a8>
80008ef2:	e0 4a 05 54 	cp.w	r10,1364
80008ef6:	e0 88 00 04 	brls	80008efe <_malloc_r+0x1a2>
80008efa:	37 ea       	mov	r10,126
80008efc:	c0 48       	rjmp	80008f04 <_malloc_r+0x1a8>
80008efe:	f2 0a 16 12 	lsr	r10,r9,0x12
80008f02:	28 4a       	sub	r10,-124
80008f04:	e0 6b 01 34 	mov	r11,308
80008f08:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80008f0c:	68 28       	ld.w	r8,r4[0x8]
80008f0e:	08 38       	cp.w	r8,r4
80008f10:	c0 e1       	brne	80008f2c <_malloc_r+0x1d0>
80008f12:	76 19       	ld.w	r9,r11[0x4]
80008f14:	a3 4a       	asr	r10,0x2
80008f16:	30 1e       	mov	lr,1
80008f18:	fc 0a 09 4a 	lsl	r10,lr,r10
80008f1c:	f3 ea 10 0a 	or	r10,r9,r10
80008f20:	10 99       	mov	r9,r8
80008f22:	97 1a       	st.w	r11[0x4],r10
80008f24:	c0 a8       	rjmp	80008f38 <_malloc_r+0x1dc>
80008f26:	70 28       	ld.w	r8,r8[0x8]
80008f28:	08 38       	cp.w	r8,r4
80008f2a:	c0 60       	breq	80008f36 <_malloc_r+0x1da>
80008f2c:	70 1a       	ld.w	r10,r8[0x4]
80008f2e:	e0 1a ff fc 	andl	r10,0xfffc
80008f32:	14 39       	cp.w	r9,r10
80008f34:	cf 93       	brcs	80008f26 <_malloc_r+0x1ca>
80008f36:	70 39       	ld.w	r9,r8[0xc]
80008f38:	8d 39       	st.w	r6[0xc],r9
80008f3a:	8d 28       	st.w	r6[0x8],r8
80008f3c:	91 36       	st.w	r8[0xc],r6
  /* 
     If there are any possibly nonempty big-enough blocks, 
     search for best fitting chunk by scanning bins in blockwidth units.
  */

  if ( (block = idx2binblock(idx)) <= binblocks)  
80008f3e:	93 26       	st.w	r9[0x8],r6
80008f40:	e6 08 14 02 	asr	r8,r3,0x2
80008f44:	30 1b       	mov	r11,1
80008f46:	e0 64 01 34 	mov	r4,308
80008f4a:	f6 08 09 4b 	lsl	r11,r11,r8
80008f4e:	68 18       	ld.w	r8,r4[0x4]
80008f50:	10 3b       	cp.w	r11,r8
  {

    /* Get to the first marked block */

    if ( (block & binblocks) == 0) 
80008f52:	e0 8b 00 69 	brhi	80009024 <_malloc_r+0x2c8>
80008f56:	f7 e8 00 09 	and	r9,r11,r8
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
80008f5a:	c0 b1       	brne	80008f70 <_malloc_r+0x214>
      block <<= 1;
80008f5c:	e0 13 ff fc 	andl	r3,0xfffc
      while ((block & binblocks) == 0)
80008f60:	a1 7b       	lsl	r11,0x1
      {
        idx += BINBLOCKWIDTH;
80008f62:	2f c3       	sub	r3,-4
        block <<= 1;
80008f64:	c0 38       	rjmp	80008f6a <_malloc_r+0x20e>
    if ( (block & binblocks) == 0) 
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
      block <<= 1;
      while ((block & binblocks) == 0)
80008f66:	2f c3       	sub	r3,-4
80008f68:	a1 7b       	lsl	r11,0x1
80008f6a:	f7 e8 00 09 	and	r9,r11,r8
      
    /* For each possibly nonempty block ... */
    for (;;)  
    {
      startidx = idx;          /* (track incomplete blocks) */
      q = bin = bin_at(idx);
80008f6e:	cf c0       	breq	80008f66 <_malloc_r+0x20a>
80008f70:	e8 03 00 3e 	add	lr,r4,r3<<0x3
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
80008f74:	06 92       	mov	r2,r3
80008f76:	1c 91       	mov	r1,lr
        {
          victim_size = chunksize(victim);
80008f78:	62 36       	ld.w	r6,r1[0xc]
80008f7a:	c2 d8       	rjmp	80008fd4 <_malloc_r+0x278>
80008f7c:	6c 1a       	ld.w	r10,r6[0x4]
          remainder_size = long_sub_size_t(victim_size, nb);
80008f7e:	e0 1a ff fc 	andl	r10,0xfffc

          if (remainder_size >= (long)MINSIZE) /* split */
80008f82:	f4 07 01 08 	sub	r8,r10,r7
80008f86:	58 f8       	cp.w	r8,15
          {
            remainder = chunk_at_offset(victim, nb);
            set_head(victim, nb | PREV_INUSE);
            unlink(victim, bck, fwd);
80008f88:	e0 8a 00 15 	brle	80008fb2 <_malloc_r+0x256>
80008f8c:	6c 3a       	ld.w	r10,r6[0xc]
80008f8e:	6c 29       	ld.w	r9,r6[0x8]
          remainder_size = long_sub_size_t(victim_size, nb);

          if (remainder_size >= (long)MINSIZE) /* split */
          {
            remainder = chunk_at_offset(victim, nb);
            set_head(victim, nb | PREV_INUSE);
80008f90:	95 29       	st.w	r10[0x8],r9
          victim_size = chunksize(victim);
          remainder_size = long_sub_size_t(victim_size, nb);

          if (remainder_size >= (long)MINSIZE) /* split */
          {
            remainder = chunk_at_offset(victim, nb);
80008f92:	93 3a       	st.w	r9[0xc],r10
80008f94:	0e 99       	mov	r9,r7
            set_head(victim, nb | PREV_INUSE);
80008f96:	ec 07 00 07 	add	r7,r6,r7
            unlink(victim, bck, fwd);
            link_last_remainder(remainder);
80008f9a:	a1 a9       	sbr	r9,0x0
          remainder_size = long_sub_size_t(victim_size, nb);

          if (remainder_size >= (long)MINSIZE) /* split */
          {
            remainder = chunk_at_offset(victim, nb);
            set_head(victim, nb | PREV_INUSE);
80008f9c:	99 37       	st.w	r12[0xc],r7
            unlink(victim, bck, fwd);
            link_last_remainder(remainder);
            set_head(remainder, remainder_size | PREV_INUSE);
            set_foot(remainder, remainder_size);
80008f9e:	99 27       	st.w	r12[0x8],r7
80008fa0:	8d 19       	st.w	r6[0x4],r9
          if (remainder_size >= (long)MINSIZE) /* split */
          {
            remainder = chunk_at_offset(victim, nb);
            set_head(victim, nb | PREV_INUSE);
            unlink(victim, bck, fwd);
            link_last_remainder(remainder);
80008fa2:	ee 08 09 08 	st.w	r7[r8],r8
            set_head(remainder, remainder_size | PREV_INUSE);
80008fa6:	8f 2c       	st.w	r7[0x8],r12
            set_foot(remainder, remainder_size);
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
80008fa8:	8f 3c       	st.w	r7[0xc],r12
          {
            remainder = chunk_at_offset(victim, nb);
            set_head(victim, nb | PREV_INUSE);
            unlink(victim, bck, fwd);
            link_last_remainder(remainder);
            set_head(remainder, remainder_size | PREV_INUSE);
80008faa:	a1 a8       	sbr	r8,0x0
80008fac:	0a 9c       	mov	r12,r5
80008fae:	8f 18       	st.w	r7[0x4],r8
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
            return chunk2mem(victim);
          }

          else if (remainder_size >= 0)  /* take */
80008fb0:	c0 d8       	rjmp	80008fca <_malloc_r+0x26e>
80008fb2:	6c 39       	ld.w	r9,r6[0xc]
          {
            set_inuse_bit_at_offset(victim, victim_size);
80008fb4:	58 08       	cp.w	r8,0
80008fb6:	c0 e5       	brlt	80008fd2 <_malloc_r+0x276>
80008fb8:	ec 0a 00 0a 	add	r10,r6,r10
            unlink(victim, bck, fwd);
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
80008fbc:	74 18       	ld.w	r8,r10[0x4]
            return chunk2mem(victim);
          }

          else if (remainder_size >= 0)  /* take */
          {
            set_inuse_bit_at_offset(victim, victim_size);
80008fbe:	a1 a8       	sbr	r8,0x0
            unlink(victim, bck, fwd);
80008fc0:	0a 9c       	mov	r12,r5
80008fc2:	95 18       	st.w	r10[0x4],r8
80008fc4:	6c 28       	ld.w	r8,r6[0x8]
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
80008fc6:	93 28       	st.w	r9[0x8],r8
80008fc8:	91 39       	st.w	r8[0xc],r9
            return chunk2mem(victim);
80008fca:	c8 2d       	rcall	800092ce <__malloc_unlock>
80008fcc:	ec cc ff f8 	sub	r12,r6,-8
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
80008fd0:	d8 32       	popm	r0-r7,pc
80008fd2:	12 96       	mov	r6,r9
80008fd4:	02 36       	cp.w	r6,r1
         {
           bin = next_bin(bin);
           ++idx;
         }
#endif
      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
80008fd6:	cd 31       	brne	80008f7c <_malloc_r+0x220>
80008fd8:	2f f2       	sub	r2,-1
80008fda:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
            return chunk2mem(victim);
          }

        }

       bin = next_bin(bin);
80008fde:	c0 30       	breq	80008fe4 <_malloc_r+0x288>
80008fe0:	2f 81       	sub	r1,-8
80008fe2:	cc bb       	rjmp	80008f78 <_malloc_r+0x21c>

      /* Clear out the block bit. */

      do   /* Possibly backtrack to try to clear a partial block */
      {
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
80008fe4:	1c 98       	mov	r8,lr
80008fe6:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
        {
          binblocks &= ~block;
80008fea:	c0 81       	brne	80008ffa <_malloc_r+0x29e>
80008fec:	68 19       	ld.w	r9,r4[0x4]
80008fee:	f6 08 11 ff 	rsub	r8,r11,-1
80008ff2:	f3 e8 00 08 	and	r8,r9,r8
          break;
80008ff6:	89 18       	st.w	r4[0x4],r8
        }
        --startidx;
       q = prev_bin(q);
80008ff8:	c0 78       	rjmp	80009006 <_malloc_r+0x2aa>
80008ffa:	f0 c9 00 08 	sub	r9,r8,8
      } while (first(q) == q);
80008ffe:	20 13       	sub	r3,1
80009000:	70 08       	ld.w	r8,r8[0x0]
80009002:	12 38       	cp.w	r8,r9

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
80009004:	cf 10       	breq	80008fe6 <_malloc_r+0x28a>
80009006:	a1 7b       	lsl	r11,0x1
80009008:	68 18       	ld.w	r8,r4[0x4]
8000900a:	10 3b       	cp.w	r11,r8
8000900c:	e0 8b 00 0c 	brhi	80009024 <_malloc_r+0x2c8>
80009010:	58 0b       	cp.w	r11,0
80009012:	c0 90       	breq	80009024 <_malloc_r+0x2c8>
80009014:	04 93       	mov	r3,r2
      {
        while ((block & binblocks) == 0)
        {
          idx += BINBLOCKWIDTH;
80009016:	c0 38       	rjmp	8000901c <_malloc_r+0x2c0>
          block <<= 1;
80009018:	2f c3       	sub	r3,-4

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
      {
        while ((block & binblocks) == 0)
8000901a:	a1 7b       	lsl	r11,0x1
8000901c:	f7 e8 00 09 	and	r9,r11,r8
80009020:	ca 81       	brne	80008f70 <_malloc_r+0x214>
80009022:	cf bb       	rjmp	80009018 <_malloc_r+0x2bc>
80009024:	68 23       	ld.w	r3,r4[0x8]
80009026:	66 12       	ld.w	r2,r3[0x4]
80009028:	e0 12 ff fc 	andl	r2,0xfffc


  /* Try to use top chunk */

  /* Require that there be a remainder, ensuring top always exists  */
  remainder_size = long_sub_size_t(chunksize(top), nb);
8000902c:	0e 32       	cp.w	r2,r7
8000902e:	5f 39       	srlo	r9
80009030:	e4 07 01 08 	sub	r8,r2,r7
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
80009034:	58 f8       	cp.w	r8,15
80009036:	5f aa       	srle	r10


  /* Try to use top chunk */

  /* Require that there be a remainder, ensuring top always exists  */
  remainder_size = long_sub_size_t(chunksize(top), nb);
80009038:	f5 e9 10 09 	or	r9,r10,r9
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
8000903c:	e0 80 00 96 	breq	80009168 <_malloc_r+0x40c>
80009040:	e0 68 09 9c 	mov	r8,2460
80009044:	70 01       	ld.w	r1,r8[0x0]
80009046:	e0 68 05 40 	mov	r8,1344
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));

  /* Pad request with top_pad plus minimal overhead */
  
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
8000904a:	2f 01       	sub	r1,-16

  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
8000904c:	70 08       	ld.w	r8,r8[0x0]
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));

  /* Pad request with top_pad plus minimal overhead */
  
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
8000904e:	0e 01       	add	r1,r7

  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
80009050:	5b f8       	cp.w	r8,-1
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));

  /* Pad request with top_pad plus minimal overhead */
  
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
80009052:	c0 40       	breq	8000905a <_malloc_r+0x2fe>

  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
80009054:	28 11       	sub	r1,-127
80009056:	e0 11 ff 80 	andl	r1,0xff80
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);
8000905a:	02 9b       	mov	r11,r1
8000905c:	0a 9c       	mov	r12,r5

  brk = (char*)(MORECORE (sbrk_size));
8000905e:	c7 9d       	rcall	80009350 <_sbrk_r>
80009060:	18 96       	mov	r6,r12
80009062:	5b fc       	cp.w	r12,-1
80009064:	c7 30       	breq	8000914a <_malloc_r+0x3ee>
80009066:	e6 02 00 08 	add	r8,r3,r2

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
8000906a:	10 3c       	cp.w	r12,r8
  char*     new_brk;              /* return of 2nd sbrk call */
  INTERNAL_SIZE_T top_size;       /* new size of top chunk */

  mchunkptr old_top     = top;  /* Record state of old top */
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));
8000906c:	c0 32       	brcc	80009072 <_malloc_r+0x316>
8000906e:	08 33       	cp.w	r3,r4
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);

  brk = (char*)(MORECORE (sbrk_size));

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
80009070:	c6 d1       	brne	8000914a <_malloc_r+0x3ee>
80009072:	e0 6a 09 a0 	mov	r10,2464
80009076:	74 09       	ld.w	r9,r10[0x0]
      (brk < old_end && old_top != initial_top))
    return;

  sbrked_mem += sbrk_size;
80009078:	e2 09 00 09 	add	r9,r1,r9
8000907c:	95 09       	st.w	r10[0x0],r9
8000907e:	10 36       	cp.w	r6,r8
80009080:	c0 a1       	brne	80009094 <_malloc_r+0x338>

  if (brk == old_end /* can just add bytes to current top, unless
80009082:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80009086:	c0 71       	brne	80009094 <_malloc_r+0x338>
80009088:	e2 02 00 02 	add	r2,r1,r2
			previous correction failed */
      && ((POINTER_UINT)old_end & (pagesz - 1)) == 0)
  {
    top_size = sbrk_size + old_top_size;
    set_head(top, top_size | PREV_INUSE);
8000908c:	68 28       	ld.w	r8,r4[0x8]
8000908e:	a1 a2       	sbr	r2,0x0
80009090:	91 12       	st.w	r8[0x4],r2
80009092:	c4 b8       	rjmp	80009128 <_malloc_r+0x3cc>
80009094:	e0 6a 05 40 	mov	r10,1344
  }
  else
  {
    if (sbrk_base == (char*)(-1))  /* First time through. Record base */
80009098:	74 0b       	ld.w	r11,r10[0x0]
8000909a:	5b fb       	cp.w	r11,-1
8000909c:	c0 31       	brne	800090a2 <_malloc_r+0x346>
8000909e:	95 06       	st.w	r10[0x0],r6
      sbrk_base = brk;
800090a0:	c0 78       	rjmp	800090ae <_malloc_r+0x352>
800090a2:	ec 09 00 09 	add	r9,r6,r9
    else  /* Someone else called sbrk().  Count those bytes as sbrked_mem. */
      sbrked_mem += brk - (char*)old_end;
800090a6:	e0 6a 09 a0 	mov	r10,2464
800090aa:	10 19       	sub	r9,r8
800090ac:	95 09       	st.w	r10[0x0],r9

    /* Guarantee alignment of first new chunk made from this space */
    front_misalign = (POINTER_UINT)chunk2mem(brk) & MALLOC_ALIGN_MASK;
800090ae:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
    if (front_misalign > 0) 
800090b2:	c0 40       	breq	800090ba <_malloc_r+0x35e>
    {
      correction = (MALLOC_ALIGNMENT) - front_misalign;
800090b4:	f0 08 11 08 	rsub	r8,r8,8
      brk += correction;
800090b8:	10 06       	add	r6,r8
    }
    else
      correction = 0;

    /* Guarantee the next brk will be at a page boundary */
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
800090ba:	28 08       	sub	r8,-128
800090bc:	ec 01 00 01 	add	r1,r6,r1

    /* Allocate correction */
    new_brk = (char*)(MORECORE (correction));
800090c0:	0a 9c       	mov	r12,r5
    }
    else
      correction = 0;

    /* Guarantee the next brk will be at a page boundary */
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
800090c2:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
800090c6:	f0 01 01 01 	sub	r1,r8,r1

    /* Allocate correction */
    new_brk = (char*)(MORECORE (correction));
800090ca:	02 9b       	mov	r11,r1
800090cc:	c4 2d       	rcall	80009350 <_sbrk_r>
800090ce:	30 08       	mov	r8,0
    if (new_brk == (char*)(MORECORE_FAILURE))
800090d0:	5b fc       	cp.w	r12,-1
800090d2:	c0 31       	brne	800090d8 <_malloc_r+0x37c>
800090d4:	0c 9c       	mov	r12,r6
800090d6:	10 91       	mov	r1,r8
800090d8:	e0 68 09 a0 	mov	r8,2464

    sbrked_mem += correction;

    top = (mchunkptr)brk;
    top_size = new_brk - brk + correction;
    set_head(top, top_size | PREV_INUSE);
800090dc:	0c 1c       	sub	r12,r6
	correction = 0;
	correction_failed = 1;
	new_brk = brk;
      }

    sbrked_mem += correction;
800090de:	70 09       	ld.w	r9,r8[0x0]

    top = (mchunkptr)brk;
    top_size = new_brk - brk + correction;
    set_head(top, top_size | PREV_INUSE);
800090e0:	02 0c       	add	r12,r1
	new_brk = brk;
      }

    sbrked_mem += correction;

    top = (mchunkptr)brk;
800090e2:	89 26       	st.w	r4[0x8],r6
    top_size = new_brk - brk + correction;
    set_head(top, top_size | PREV_INUSE);
800090e4:	a1 ac       	sbr	r12,0x0
	correction = 0;
	correction_failed = 1;
	new_brk = brk;
      }

    sbrked_mem += correction;
800090e6:	12 01       	add	r1,r9

    top = (mchunkptr)brk;
    top_size = new_brk - brk + correction;
    set_head(top, top_size | PREV_INUSE);
800090e8:	8d 1c       	st.w	r6[0x4],r12
	correction = 0;
	correction_failed = 1;
	new_brk = brk;
      }

    sbrked_mem += correction;
800090ea:	91 01       	st.w	r8[0x0],r1

    top = (mchunkptr)brk;
    top_size = new_brk - brk + correction;
    set_head(top, top_size | PREV_INUSE);

    if (old_top != initial_top)
800090ec:	08 33       	cp.w	r3,r4
800090ee:	c1 d0       	breq	80009128 <_malloc_r+0x3cc>

      /* There must have been an intervening foreign sbrk call. */
      /* A double fencepost is necessary to prevent consolidation */

      /* If not enough space to do this, then user did something very wrong */
      if (old_top_size < MINSIZE) 
800090f0:	58 f2       	cp.w	r2,15
800090f2:	e0 8b 00 05 	brhi	800090fc <_malloc_r+0x3a0>
      {
        set_head(top, PREV_INUSE); /* will force null return from malloc */
800090f6:	30 18       	mov	r8,1
800090f8:	8d 18       	st.w	r6[0x4],r8
800090fa:	c2 88       	rjmp	8000914a <_malloc_r+0x3ee>
        return;
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
      chunk_at_offset(old_top, old_top_size          )->size =
800090fc:	30 59       	mov	r9,5
        set_head(top, PREV_INUSE); /* will force null return from malloc */
        return;
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
800090fe:	20 c2       	sub	r2,12
80009100:	e0 12 ff f8 	andl	r2,0xfff8
      chunk_at_offset(old_top, old_top_size          )->size =
80009104:	e6 02 00 08 	add	r8,r3,r2
        SIZE_SZ|PREV_INUSE;
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
80009108:	91 29       	st.w	r8[0x8],r9
        return;
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
      chunk_at_offset(old_top, old_top_size          )->size =
8000910a:	91 19       	st.w	r8[0x4],r9
        SIZE_SZ|PREV_INUSE;
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
        SIZE_SZ|PREV_INUSE;
      set_head_size(old_top, old_top_size);
8000910c:	66 18       	ld.w	r8,r3[0x4]
8000910e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009112:	e5 e8 10 08 	or	r8,r2,r8
80009116:	87 18       	st.w	r3[0x4],r8
      /* If possible, release the rest. */
      if (old_top_size >= MINSIZE) 
80009118:	58 f2       	cp.w	r2,15
8000911a:	e0 88 00 07 	brls	80009128 <_malloc_r+0x3cc>
        fREe(RCALL chunk2mem(old_top));
8000911e:	e6 cb ff f8 	sub	r11,r3,-8
80009122:	0a 9c       	mov	r12,r5
80009124:	e0 a0 02 64 	rcall	800095ec <_free_r>
    }
  }

  if ((unsigned long)sbrked_mem > (unsigned long)max_sbrked_mem) 
80009128:	e0 68 09 a0 	mov	r8,2464
8000912c:	e0 69 09 98 	mov	r9,2456
80009130:	70 08       	ld.w	r8,r8[0x0]
80009132:	72 0a       	ld.w	r10,r9[0x0]
80009134:	14 38       	cp.w	r8,r10
    max_sbrked_mem = sbrked_mem;
80009136:	e0 88 00 03 	brls	8000913c <_malloc_r+0x3e0>
#if HAVE_MMAP
  if ((unsigned long)(mmapped_mem + sbrked_mem) > (unsigned long)max_total_mem) 
    max_total_mem = mmapped_mem + sbrked_mem;
#else
  if ((unsigned long)(sbrked_mem) > (unsigned long)max_total_mem) 
8000913a:	93 08       	st.w	r9[0x0],r8
8000913c:	e0 69 09 94 	mov	r9,2452
80009140:	72 0a       	ld.w	r10,r9[0x0]
    max_total_mem = sbrked_mem;
80009142:	14 38       	cp.w	r8,r10
    }
#endif

    /* Try to extend */
    malloc_extend_top(RCALL nb);
    remainder_size = long_sub_size_t(chunksize(top), nb);
80009144:	e0 88 00 03 	brls	8000914a <_malloc_r+0x3ee>
80009148:	93 08       	st.w	r9[0x0],r8
8000914a:	68 28       	ld.w	r8,r4[0x8]
    if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
8000914c:	70 18       	ld.w	r8,r8[0x4]
8000914e:	e0 18 ff fc 	andl	r8,0xfffc
80009152:	0e 38       	cp.w	r8,r7
80009154:	5f 39       	srlo	r9
80009156:	0e 18       	sub	r8,r7
80009158:	58 f8       	cp.w	r8,15
8000915a:	5f aa       	srle	r10
    {
      MALLOC_UNLOCK;
8000915c:	f5 e9 10 09 	or	r9,r10,r9
80009160:	c0 40       	breq	80009168 <_malloc_r+0x40c>
80009162:	0a 9c       	mov	r12,r5
80009164:	cb 5c       	rcall	800092ce <__malloc_unlock>
80009166:	d8 3a       	popm	r0-r7,pc,r12=0
80009168:	68 26       	ld.w	r6,r4[0x8]
8000916a:	a1 a8       	sbr	r8,0x0
8000916c:	0e 99       	mov	r9,r7
8000916e:	a1 a9       	sbr	r9,0x0
80009170:	8d 19       	st.w	r6[0x4],r9
80009172:	ec 07 00 07 	add	r7,r6,r7
80009176:	0a 9c       	mov	r12,r5
80009178:	89 27       	st.w	r4[0x8],r7
8000917a:	8f 18       	st.w	r7[0x4],r8
8000917c:	ca 9c       	rcall	800092ce <__malloc_unlock>
8000917e:	ec cc ff f8 	sub	r12,r6,-8
80009182:	d8 32       	popm	r0-r7,pc

80009184 <memcpy>:
      return 0; /* propagate failure */
    }
  }

  victim = top;
80009184:	58 8a       	cp.w	r10,8
  set_head(victim, nb | PREV_INUSE);
  top = chunk_at_offset(victim, nb);
  set_head(top, remainder_size | PREV_INUSE);
80009186:	c2 f5       	brlt	800091e4 <memcpy+0x60>
      return 0; /* propagate failure */
    }
  }

  victim = top;
  set_head(victim, nb | PREV_INUSE);
80009188:	f9 eb 10 09 	or	r9,r12,r11
8000918c:	e2 19 00 03 	andl	r9,0x3,COH
  top = chunk_at_offset(victim, nb);
80009190:	e0 81 00 97 	brne	800092be <memcpy+0x13a>
80009194:	e0 4a 00 20 	cp.w	r10,32
  set_head(top, remainder_size | PREV_INUSE);
  check_malloced_chunk(victim, nb);
  MALLOC_UNLOCK;
80009198:	c3 b4       	brge	8000920e <memcpy+0x8a>
8000919a:	f4 08 14 02 	asr	r8,r10,0x2
  return chunk2mem(victim);
8000919e:	f0 09 11 08 	rsub	r9,r8,8

#endif /* MALLOC_PROVIDED */
}
800091a2:	fe 09 00 2f 	add	pc,pc,r9<<0x2
800091a6:	76 69       	ld.w	r9,r11[0x18]
800091a8:	99 69       	st.w	r12[0x18],r9
800091aa:	76 59       	ld.w	r9,r11[0x14]
800091ac:	99 59       	st.w	r12[0x14],r9
800091ae:	76 49       	ld.w	r9,r11[0x10]
800091b0:	99 49       	st.w	r12[0x10],r9
800091b2:	76 39       	ld.w	r9,r11[0xc]
800091b4:	99 39       	st.w	r12[0xc],r9
800091b6:	76 29       	ld.w	r9,r11[0x8]
800091b8:	99 29       	st.w	r12[0x8],r9
800091ba:	76 19       	ld.w	r9,r11[0x4]
800091bc:	99 19       	st.w	r12[0x4],r9
800091be:	76 09       	ld.w	r9,r11[0x0]
800091c0:	99 09       	st.w	r12[0x0],r9
800091c2:	f6 08 00 2b 	add	r11,r11,r8<<0x2
800091c6:	f8 08 00 28 	add	r8,r12,r8<<0x2
800091ca:	e0 1a 00 03 	andl	r10,0x3
800091ce:	f4 0a 11 04 	rsub	r10,r10,4
800091d2:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
800091d6:	17 a9       	ld.ub	r9,r11[0x2]
800091d8:	b0 a9       	st.b	r8[0x2],r9
800091da:	17 99       	ld.ub	r9,r11[0x1]
800091dc:	b0 99       	st.b	r8[0x1],r9
800091de:	17 89       	ld.ub	r9,r11[0x0]
800091e0:	b0 89       	st.b	r8[0x0],r9
800091e2:	5e fc       	retal	r12
800091e4:	f4 0a 11 09 	rsub	r10,r10,9
800091e8:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
800091ec:	17 f9       	ld.ub	r9,r11[0x7]
800091ee:	b8 f9       	st.b	r12[0x7],r9
800091f0:	17 e9       	ld.ub	r9,r11[0x6]
800091f2:	b8 e9       	st.b	r12[0x6],r9
800091f4:	17 d9       	ld.ub	r9,r11[0x5]
800091f6:	b8 d9       	st.b	r12[0x5],r9
800091f8:	17 c9       	ld.ub	r9,r11[0x4]
800091fa:	b8 c9       	st.b	r12[0x4],r9
800091fc:	17 b9       	ld.ub	r9,r11[0x3]
800091fe:	b8 b9       	st.b	r12[0x3],r9
80009200:	17 a9       	ld.ub	r9,r11[0x2]
80009202:	b8 a9       	st.b	r12[0x2],r9
80009204:	17 99       	ld.ub	r9,r11[0x1]
80009206:	b8 99       	st.b	r12[0x1],r9
80009208:	17 89       	ld.ub	r9,r11[0x0]
8000920a:	b8 89       	st.b	r12[0x0],r9
8000920c:	5e fc       	retal	r12
8000920e:	eb cd 40 c0 	pushm	r6-r7,lr
80009212:	18 99       	mov	r9,r12
80009214:	22 0a       	sub	r10,32
80009216:	b7 07       	ld.d	r6,r11++
80009218:	b3 26       	st.d	r9++,r6
8000921a:	b7 07       	ld.d	r6,r11++
8000921c:	b3 26       	st.d	r9++,r6
8000921e:	b7 07       	ld.d	r6,r11++
80009220:	b3 26       	st.d	r9++,r6
80009222:	b7 07       	ld.d	r6,r11++
80009224:	b3 26       	st.d	r9++,r6
80009226:	22 0a       	sub	r10,32
80009228:	cf 74       	brge	80009216 <memcpy+0x92>
8000922a:	2f 0a       	sub	r10,-16
8000922c:	c0 65       	brlt	80009238 <memcpy+0xb4>
8000922e:	b7 07       	ld.d	r6,r11++
80009230:	b3 26       	st.d	r9++,r6
80009232:	b7 07       	ld.d	r6,r11++
80009234:	b3 26       	st.d	r9++,r6
80009236:	21 0a       	sub	r10,16
80009238:	5c 3a       	neg	r10
8000923a:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000923e:	d7 03       	nop
80009240:	d7 03       	nop
80009242:	f7 36 00 0e 	ld.ub	r6,r11[14]
80009246:	f3 66 00 0e 	st.b	r9[14],r6
8000924a:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000924e:	f3 66 00 0d 	st.b	r9[13],r6
80009252:	f7 36 00 0c 	ld.ub	r6,r11[12]
80009256:	f3 66 00 0c 	st.b	r9[12],r6
8000925a:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000925e:	f3 66 00 0b 	st.b	r9[11],r6
80009262:	f7 36 00 0a 	ld.ub	r6,r11[10]
80009266:	f3 66 00 0a 	st.b	r9[10],r6
8000926a:	f7 36 00 09 	ld.ub	r6,r11[9]
8000926e:	f3 66 00 09 	st.b	r9[9],r6
80009272:	f7 36 00 08 	ld.ub	r6,r11[8]
80009276:	f3 66 00 08 	st.b	r9[8],r6
8000927a:	f7 36 00 07 	ld.ub	r6,r11[7]
8000927e:	f3 66 00 07 	st.b	r9[7],r6
80009282:	f7 36 00 06 	ld.ub	r6,r11[6]
80009286:	f3 66 00 06 	st.b	r9[6],r6
8000928a:	f7 36 00 05 	ld.ub	r6,r11[5]
8000928e:	f3 66 00 05 	st.b	r9[5],r6
80009292:	f7 36 00 04 	ld.ub	r6,r11[4]
80009296:	f3 66 00 04 	st.b	r9[4],r6
8000929a:	f7 36 00 03 	ld.ub	r6,r11[3]
8000929e:	f3 66 00 03 	st.b	r9[3],r6
800092a2:	f7 36 00 02 	ld.ub	r6,r11[2]
800092a6:	f3 66 00 02 	st.b	r9[2],r6
800092aa:	f7 36 00 01 	ld.ub	r6,r11[1]
800092ae:	f3 66 00 01 	st.b	r9[1],r6
800092b2:	f7 36 00 00 	ld.ub	r6,r11[0]
800092b6:	f3 66 00 00 	st.b	r9[0],r6
800092ba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800092be:	20 1a       	sub	r10,1
800092c0:	f6 0a 07 09 	ld.ub	r9,r11[r10]
800092c4:	f8 0a 0b 09 	st.b	r12[r10],r9
800092c8:	cf b1       	brne	800092be <memcpy+0x13a>
800092ca:	5e fc       	retal	r12

800092cc <__malloc_lock>:
     struct _reent *ptr;
{
#ifndef __SINGLE_THREAD__
  __lock_acquire_recursive (__malloc_lock_object);
#endif
}
800092cc:	5e fc       	retal	r12

800092ce <__malloc_unlock>:
     struct _reent *ptr;
{
#ifndef __SINGLE_THREAD__
  __lock_release_recursive (__malloc_lock_object);
#endif
}
800092ce:	5e fc       	retal	r12

800092d0 <rand>:
  _REENT_RAND_NEXT(_REENT) = seed;
}

int
_DEFUN_VOID (rand)
{
800092d0:	d4 21       	pushm	r4-r7,lr
  /* This multiplier was obtained from Knuth, D.E., "The Art of
     Computer Programming," Vol 2, Seminumerical Algorithms, Third
     Edition, Addison-Wesley, 1998, p. 106 (line 26) & p. 108 */
  _REENT_CHECK_RAND48(_REENT);
800092d2:	e0 67 01 30 	mov	r7,304
800092d6:	6e 06       	ld.w	r6,r7[0x0]
800092d8:	6c e8       	ld.w	r8,r6[0x38]
800092da:	58 08       	cp.w	r8,0
800092dc:	c1 a1       	brne	80009310 <rand+0x40>
800092de:	31 8c       	mov	r12,24
800092e0:	fe b0 fd 36 	rcall	80008d4c <malloc>
800092e4:	e0 69 33 0e 	mov	r9,13070
800092e8:	8d ec       	st.w	r6[0x38],r12
800092ea:	6e 08       	ld.w	r8,r7[0x0]
800092ec:	70 e8       	ld.w	r8,r8[0x38]
800092ee:	b0 09       	st.h	r8[0x0],r9
800092f0:	fe 79 ab cd 	mov	r9,-21555
800092f4:	b0 19       	st.h	r8[0x2],r9
800092f6:	e0 69 12 34 	mov	r9,4660
800092fa:	b0 29       	st.h	r8[0x4],r9
800092fc:	fe 79 e6 6d 	mov	r9,-6547
80009300:	b0 39       	st.h	r8[0x6],r9
80009302:	fe 79 de ec 	mov	r9,-8468
80009306:	b0 49       	st.h	r8[0x8],r9
80009308:	30 59       	mov	r9,5
8000930a:	b0 59       	st.h	r8[0xa],r9
8000930c:	30 b9       	mov	r9,11
  _REENT_RAND_NEXT(_REENT) = 
     _REENT_RAND_NEXT(_REENT) * __extension__ 6364136223846793005LL + 1;
8000930e:	b0 69       	st.h	r8[0xc],r9
80009310:	e0 68 01 30 	mov	r8,304
80009314:	70 08       	ld.w	r8,r8[0x0]
80009316:	70 e8       	ld.w	r8,r8[0x38]
80009318:	70 47       	ld.w	r7,r8[0x10]
8000931a:	70 5c       	ld.w	r12,r8[0x14]
8000931c:	e0 69 7f 2d 	mov	r9,32557
80009320:	ea 19 4c 95 	orh	r9,0x4c95
80009324:	f8 09 06 4a 	mulu.d	r10,r12,r9
80009328:	ee 09 02 49 	mul	r9,r7,r9
8000932c:	e0 67 f4 2d 	mov	r7,62509
80009330:	ea 17 58 51 	orh	r7,0x5851
80009334:	30 16       	mov	r6,1
80009336:	f8 07 03 49 	mac	r9,r12,r7
8000933a:	30 07       	mov	r7,0
8000933c:	f2 0b 00 0b 	add	r11,r9,r11
80009340:	0c 0a       	add	r10,r6
{
  /* This multiplier was obtained from Knuth, D.E., "The Art of
     Computer Programming," Vol 2, Seminumerical Algorithms, Third
     Edition, Addison-Wesley, 1998, p. 106 (line 26) & p. 108 */
  _REENT_CHECK_RAND48(_REENT);
  _REENT_RAND_NEXT(_REENT) = 
80009342:	f6 07 00 4b 	adc	r11,r11,r7
     _REENT_RAND_NEXT(_REENT) * __extension__ 6364136223846793005LL + 1;
  return (int)((_REENT_RAND_NEXT(_REENT) >> 32) & RAND_MAX);
}
80009346:	f0 eb 00 10 	st.d	r8[16],r10
8000934a:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
8000934e:	d8 22       	popm	r4-r7,pc

80009350 <_sbrk_r>:

void *
_DEFUN (_sbrk_r, (ptr, incr),
     struct _reent *ptr _AND
     ptrdiff_t incr)
{
80009350:	d4 21       	pushm	r4-r7,lr
  char *ret;
  void *_sbrk(ptrdiff_t);

  errno = 0;
80009352:	30 08       	mov	r8,0

void *
_DEFUN (_sbrk_r, (ptr, incr),
     struct _reent *ptr _AND
     ptrdiff_t incr)
{
80009354:	18 97       	mov	r7,r12
  char *ret;
  void *_sbrk(ptrdiff_t);

  errno = 0;
80009356:	e0 66 1c f4 	mov	r6,7412
8000935a:	16 9c       	mov	r12,r11
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
8000935c:	8d 08       	st.w	r6[0x0],r8
8000935e:	c2 7c       	rcall	800093ac <_sbrk>
80009360:	5b fc       	cp.w	r12,-1
80009362:	c0 51       	brne	8000936c <_sbrk_r+0x1c>
80009364:	6c 08       	ld.w	r8,r6[0x0]
80009366:	58 08       	cp.w	r8,0
80009368:	c0 20       	breq	8000936c <_sbrk_r+0x1c>
    ptr->_errno = errno;
8000936a:	8f 38       	st.w	r7[0xc],r8
  return ret;
}
8000936c:	d8 22       	popm	r4-r7,pc
8000936e:	d7 03       	nop

80009370 <strncmp>:
	_CONST char *s1 _AND
	_CONST char *s2 _AND
	size_t n)
{
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  if (n == 0)
80009370:	58 0a       	cp.w	r10,0
80009372:	c0 81       	brne	80009382 <strncmp+0x12>
80009374:	5e fa       	retal	r10
    return 0;

  while (n-- != 0 && *s1 == *s2)
    {
      if (n == 0 || *s1 == '\0')
80009376:	58 0a       	cp.w	r10,0
80009378:	c0 b0       	breq	8000938e <strncmp+0x1e>
8000937a:	58 08       	cp.w	r8,0
8000937c:	c0 90       	breq	8000938e <strncmp+0x1e>
	break;
      s1++;
8000937e:	2f fc       	sub	r12,-1
      s2++;
80009380:	2f fb       	sub	r11,-1
{
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  if (n == 0)
    return 0;

  while (n-- != 0 && *s1 == *s2)
80009382:	20 1a       	sub	r10,1
80009384:	19 88       	ld.ub	r8,r12[0x0]
80009386:	17 89       	ld.ub	r9,r11[0x0]
80009388:	f0 09 18 00 	cp.b	r9,r8
8000938c:	cf 50       	breq	80009376 <strncmp+0x6>
	break;
      s1++;
      s2++;
    }

  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
8000938e:	19 8c       	ld.ub	r12,r12[0x0]
80009390:	17 88       	ld.ub	r8,r11[0x0]
80009392:	10 1c       	sub	r12,r8
      s1++;
      s2++;
    }
  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
#endif /* not PREFER_SIZE_OVER_SPEED */
}
80009394:	5e fc       	retal	r12

80009396 <_init_startup>:

int  __attribute__((weak))
     _init_startup ()
{
  return 0;
}
80009396:	5e fd       	retal	0

80009398 <_init_argv>:
}
  
void __attribute__((weak,naked))
     _init_argv (void *arg_mem_top)
{
  T2H_SYSCALL(T2H_SYSCALL_INIT_ARGV);
80009398:	30 e8       	mov	r8,14
8000939a:	d6 73       	breakpoint
8000939c:	3f fc       	mov	r12,-1
8000939e:	35 8b       	mov	r11,88
  T2H_SYSCALL_RETURN();
800093a0:	5e fc       	retal	r12

800093a2 <_exit>:
}

void __attribute__((weak,naked))
     _exit( int code )
{
  T2H_SYSCALL(T2H_SYSCALL_EXIT);
800093a2:	30 d8       	mov	r8,13
800093a4:	d6 73       	breakpoint
800093a6:	3f fc       	mov	r12,-1
800093a8:	35 8b       	mov	r11,88
800093aa:	c0 08       	rjmp	800093aa <_exit+0x8>

800093ac <_sbrk>:
 
extern void __heap_start__, __heap_end__;

void * __attribute__((weak))
     _sbrk(int increment)
{
800093ac:	d4 01       	pushm	lr
  static void *cur_heap_pos = 0;

  //Initialize cur_heap_pos
  if ( cur_heap_pos == 0 )
800093ae:	e0 68 09 c8 	mov	r8,2504
800093b2:	70 09       	ld.w	r9,r8[0x0]
800093b4:	58 09       	cp.w	r9,0
    cur_heap_pos = &__heap_start__;
800093b6:	c0 41       	brne	800093be <_sbrk+0x12>
800093b8:	e0 69 1c f8 	mov	r9,7416
  
  if ( (cur_heap_pos + increment) <= &__heap_end__ ){
800093bc:	91 09       	st.w	r8[0x0],r9
800093be:	e0 69 09 c8 	mov	r9,2504
800093c2:	e0 6a 70 00 	mov	r10,28672
800093c6:	72 08       	ld.w	r8,r9[0x0]
800093c8:	f0 0c 00 0c 	add	r12,r8,r12
    void *heap_pos = cur_heap_pos;
    cur_heap_pos += increment;
    return heap_pos;
800093cc:	14 3c       	cp.w	r12,r10
    fprintf(stderr, "\tHeap start address\t= 0x%x\n", &__heap_start__);
    fprintf(stderr, "\tHeap end address\t= 0x%x\n", &__heap_end__);
    fprintf(stderr, "\tCurrent heap address\t= 0x%x\n", cur_heap_pos);
    fflush(stderr);
#endif
    errno = ENOMEM;
800093ce:	e0 8b 00 04 	brhi	800093d6 <_sbrk+0x2a>
800093d2:	93 0c       	st.w	r9[0x0],r12
800093d4:	c0 58       	rjmp	800093de <_sbrk+0x32>
800093d6:	cb fc       	rcall	80009554 <__errno>
    return (void *)-1;
  }  
  return (void *)-1;
}
800093d8:	30 c8       	mov	r8,12
800093da:	99 08       	st.w	r12[0x0],r8
800093dc:	3f f8       	mov	r8,-1
800093de:	10 9c       	mov	r12,r8
800093e0:	d8 02       	popm	pc
800093e2:	d7 03       	nop

800093e4 <__register_exitproc>:
	(type, fn, arg, d),
	int type _AND
	void (*fn) (void) _AND
	void *arg _AND
	void *d)
{
800093e4:	d4 31       	pushm	r0-r7,lr
  __LOCK_INIT(static, lock);

  __lock_acquire(lock);
#endif

  p = _GLOBAL_REENT->_atexit;
800093e6:	fe c8 f4 2a 	sub	r8,pc,-3030
800093ea:	18 97       	mov	r7,r12
	(type, fn, arg, d),
	int type _AND
	void (*fn) (void) _AND
	void *arg _AND
	void *d)
{
800093ec:	70 03       	ld.w	r3,r8[0x0]
800093ee:	16 96       	mov	r6,r11
800093f0:	14 95       	mov	r5,r10
  __LOCK_INIT(static, lock);

  __lock_acquire(lock);
#endif

  p = _GLOBAL_REENT->_atexit;
800093f2:	12 92       	mov	r2,r9
  if (p == NULL)
800093f4:	67 24       	ld.w	r4,r3[0x48]
800093f6:	58 04       	cp.w	r4,0
    _GLOBAL_REENT->_atexit = p = &_GLOBAL_REENT->_atexit0;
800093f8:	c0 51       	brne	80009402 <__register_exitproc+0x1e>
800093fa:	e6 c4 ff b4 	sub	r4,r3,-76
800093fe:	e7 44 00 48 	st.w	r3[72],r4
  if (p->_ind >= _ATEXIT_SIZE)
80009402:	68 18       	ld.w	r8,r4[0x4]
80009404:	59 f8       	cp.w	r8,31
80009406:	e0 8a 00 0e 	brle	80009422 <__register_exitproc+0x3e>
    {
#ifndef _ATEXIT_DYNAMIC_ALLOC
      return -1;
#else
      p = (struct _atexit *) malloc (sizeof *p);
8000940a:	e0 6c 00 8c 	mov	r12,140
8000940e:	fe b0 fc 9f 	rcall	80008d4c <malloc>
      if (p == NULL)
80009412:	18 94       	mov	r4,r12
	  __lock_release(lock);
#endif
	  return -1;
	}
      p->_ind = 0;
      p->_next = _GLOBAL_REENT->_atexit;
80009414:	c3 90       	breq	80009486 <__register_exitproc+0xa2>
80009416:	67 28       	ld.w	r8,r3[0x48]
      _GLOBAL_REENT->_atexit = p;
80009418:	99 08       	st.w	r12[0x0],r8
8000941a:	e7 4c 00 48 	st.w	r3[72],r12
#ifndef __SINGLE_THREAD__
	  __lock_release(lock);
#endif
	  return -1;
	}
      p->_ind = 0;
8000941e:	30 08       	mov	r8,0
      p->_on_exit_args._is_cxa = 0;
#endif
#endif
    }

  if (type != __et_atexit)
80009420:	99 18       	st.w	r12[0x4],r8
80009422:	58 07       	cp.w	r7,0
    {
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
80009424:	c2 80       	breq	80009474 <__register_exitproc+0x90>
80009426:	e8 fc 00 88 	ld.w	r12,r4[136]
      if (args == NULL)
8000942a:	58 0c       	cp.w	r12,0
	{
	  args = malloc (sizeof * p->_on_exit_args_ptr);
8000942c:	c0 d1       	brne	80009446 <__register_exitproc+0x62>
8000942e:	e0 6c 01 08 	mov	r12,264
80009432:	fe b0 fc 8d 	rcall	80008d4c <malloc>
#ifndef __SINGLE_THREAD__
	      __lock_release(lock);
#endif
	      return -1;
	    }
	  args->_fntypes = 0;
80009436:	c2 80       	breq	80009486 <__register_exitproc+0xa2>
	  args->_is_cxa = 0;
	  p->_on_exit_args_ptr = args;
80009438:	30 08       	mov	r8,0
8000943a:	e9 4c 00 88 	st.w	r4[136],r12
	      __lock_release(lock);
#endif
	      return -1;
	    }
	  args->_fntypes = 0;
	  args->_is_cxa = 0;
8000943e:	f9 48 01 04 	st.w	r12[260],r8
#ifndef __SINGLE_THREAD__
	      __lock_release(lock);
#endif
	      return -1;
	    }
	  args->_fntypes = 0;
80009442:	f9 48 01 00 	st.w	r12[256],r8
#else
      args = &p->_on_exit_args;
#endif
      args->_fnargs[p->_ind] = arg;
      args->_fntypes |= (1 << p->_ind);
      args->_dso_handle[p->_ind] = d;
80009446:	68 18       	ld.w	r8,r4[0x4]
80009448:	f0 c9 ff e0 	sub	r9,r8,-32
	  p->_on_exit_args_ptr = args;
	}
#else
      args = &p->_on_exit_args;
#endif
      args->_fnargs[p->_ind] = arg;
8000944c:	f8 08 09 25 	st.w	r12[r8<<0x2],r5
      args->_fntypes |= (1 << p->_ind);
      args->_dso_handle[p->_ind] = d;
80009450:	f8 09 09 22 	st.w	r12[r9<<0x2],r2
	}
#else
      args = &p->_on_exit_args;
#endif
      args->_fnargs[p->_ind] = arg;
      args->_fntypes |= (1 << p->_ind);
80009454:	30 1a       	mov	r10,1
80009456:	f8 f9 01 00 	ld.w	r9,r12[256]
8000945a:	f4 08 09 48 	lsl	r8,r10,r8
8000945e:	10 49       	or	r9,r8
80009460:	f9 49 01 00 	st.w	r12[256],r9
      args->_dso_handle[p->_ind] = d;
      if (type == __et_cxa)
80009464:	58 27       	cp.w	r7,2
	args->_is_cxa |= (1 << p->_ind);
80009466:	c0 71       	brne	80009474 <__register_exitproc+0x90>
80009468:	f8 f9 01 04 	ld.w	r9,r12[260]
8000946c:	f3 e8 10 08 	or	r8,r9,r8
80009470:	f9 48 01 04 	st.w	r12[260],r8
    }
  p->_fns[p->_ind++] = fn;
80009474:	68 18       	ld.w	r8,r4[0x4]
80009476:	30 0c       	mov	r12,0
80009478:	f0 c9 ff ff 	sub	r9,r8,-1
8000947c:	2f e8       	sub	r8,-2
8000947e:	89 19       	st.w	r4[0x4],r9
80009480:	e8 08 09 26 	st.w	r4[r8<<0x2],r6
#ifndef __SINGLE_THREAD__
  __lock_release(lock);
#endif
  return 0;
80009484:	d8 32       	popm	r0-r7,pc
80009486:	dc 3a       	popm	r0-r7,pc,r12=-1

80009488 <__call_exitprocs>:
 */

void 
_DEFUN (__call_exitprocs, (code, d),
	int code _AND _PTR d)
{
80009488:	d4 31       	pushm	r0-r7,lr
8000948a:	20 3d       	sub	sp,12
  int i;
  void (*fn) (void);

 restart:

  p = _GLOBAL_REENT->_atexit;
8000948c:	fe c8 f4 d0 	sub	r8,pc,-2864
80009490:	50 2c       	stdsp	sp[0x8],r12
 */

void 
_DEFUN (__call_exitprocs, (code, d),
	int code _AND _PTR d)
{
80009492:	70 08       	ld.w	r8,r8[0x0]
  int i;
  void (*fn) (void);

 restart:

  p = _GLOBAL_REENT->_atexit;
80009494:	16 91       	mov	r1,r11
  lastp = &_GLOBAL_REENT->_atexit;
80009496:	50 08       	stdsp	sp[0x0],r8
80009498:	2b 88       	sub	r8,-72
  int i;
  void (*fn) (void);

 restart:

  p = _GLOBAL_REENT->_atexit;
8000949a:	50 18       	stdsp	sp[0x4],r8
8000949c:	40 0a       	lddsp	r10,sp[0x0]
8000949e:	40 14       	lddsp	r4,sp[0x4]
  lastp = &_GLOBAL_REENT->_atexit;
  while (p)
800094a0:	75 27       	ld.w	r7,r10[0x48]
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
#endif
      for (n = p->_ind - 1; n >= 0; n--)
800094a2:	c5 48       	rjmp	8000954a <__call_exitprocs+0xc2>
  p = _GLOBAL_REENT->_atexit;
  lastp = &_GLOBAL_REENT->_atexit;
  while (p)
    {
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
800094a4:	6e 15       	ld.w	r5,r7[0x4]
800094a6:	ee f6 00 88 	ld.w	r6,r7[136]
#else
      args = &p->_on_exit_args;
#endif
      for (n = p->_ind - 1; n >= 0; n--)
800094aa:	ea c2 ff ff 	sub	r2,r5,-1
800094ae:	20 15       	sub	r5,1
800094b0:	ee 02 00 22 	add	r2,r7,r2<<0x2
800094b4:	ec 05 00 23 	add	r3,r6,r5<<0x2
	  int ind;

	  i = 1 << n;

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
800094b8:	c3 48       	rjmp	80009520 <__call_exitprocs+0x98>
800094ba:	58 01       	cp.w	r1,0
800094bc:	c0 70       	breq	800094ca <__call_exitprocs+0x42>
800094be:	58 06       	cp.w	r6,0
800094c0:	c2 d0       	breq	8000951a <__call_exitprocs+0x92>
800094c2:	e6 f8 00 80 	ld.w	r8,r3[128]
800094c6:	02 38       	cp.w	r8,r1
	    continue;

	  /* Remove the function now to protect against the
	     function calling exit recursively.  */
	  fn = p->_fns[n];
	  if (n == p->_ind - 1)
800094c8:	c2 91       	brne	8000951a <__call_exitprocs+0x92>
	  if (d && (!args || args->_dso_handle[n] != d))
	    continue;

	  /* Remove the function now to protect against the
	     function calling exit recursively.  */
	  fn = p->_fns[n];
800094ca:	6e 19       	ld.w	r9,r7[0x4]
	  if (n == p->_ind - 1)
800094cc:	64 08       	ld.w	r8,r2[0x0]
800094ce:	20 19       	sub	r9,1
800094d0:	12 35       	cp.w	r5,r9
	    p->_ind--;
800094d2:	c0 31       	brne	800094d8 <__call_exitprocs+0x50>
800094d4:	8f 15       	st.w	r7[0x4],r5
	  else
	    p->_fns[n] = NULL;
800094d6:	c0 38       	rjmp	800094dc <__call_exitprocs+0x54>
800094d8:	30 09       	mov	r9,0

	  /* Skip functions that have already been called.  */
	  if (!fn)
800094da:	85 09       	st.w	r2[0x0],r9
800094dc:	58 08       	cp.w	r8,0
	    continue;

	  ind = p->_ind;
800094de:	c1 e0       	breq	8000951a <__call_exitprocs+0x92>

	  /* Call the function.  */
	  if (!args || (args->_fntypes & i) == 0)
800094e0:	6e 10       	ld.w	r0,r7[0x4]
800094e2:	58 06       	cp.w	r6,0
800094e4:	c0 90       	breq	800094f6 <__call_exitprocs+0x6e>
800094e6:	30 1a       	mov	r10,1
800094e8:	f4 05 09 49 	lsl	r9,r10,r5
800094ec:	ec fa 01 00 	ld.w	r10,r6[256]
800094f0:	f3 ea 00 0a 	and	r10,r9,r10
	    fn ();
800094f4:	c0 31       	brne	800094fa <__call_exitprocs+0x72>
	    continue;

	  ind = p->_ind;

	  /* Call the function.  */
	  if (!args || (args->_fntypes & i) == 0)
800094f6:	5d 18       	icall	r8
	    fn ();
	  else if ((args->_is_cxa & i) == 0)
800094f8:	c0 b8       	rjmp	8000950e <__call_exitprocs+0x86>
800094fa:	ec fa 01 04 	ld.w	r10,r6[260]
800094fe:	66 0b       	ld.w	r11,r3[0x0]
80009500:	14 69       	and	r9,r10
	    (*((void (*)(int, _PTR)) fn))(code, args->_fnargs[n]);
80009502:	c0 41       	brne	8000950a <__call_exitprocs+0x82>
80009504:	40 2c       	lddsp	r12,sp[0x8]
80009506:	5d 18       	icall	r8
	  else
	    (*((void (*)(_PTR)) fn))(args->_fnargs[n]);
80009508:	c0 38       	rjmp	8000950e <__call_exitprocs+0x86>
8000950a:	16 9c       	mov	r12,r11

	  /* The function we called call atexit and registered another
	     function (or functions).  Call these new functions before
	     continuing with the already registered functions.  */
	  if (ind != p->_ind || *lastp != p)
8000950c:	5d 18       	icall	r8
8000950e:	6e 18       	ld.w	r8,r7[0x4]
80009510:	10 30       	cp.w	r0,r8
80009512:	cc 51       	brne	8000949c <__call_exitprocs+0x14>
80009514:	68 08       	ld.w	r8,r4[0x0]
80009516:	0e 38       	cp.w	r8,r7
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
#endif
      for (n = p->_ind - 1; n >= 0; n--)
80009518:	cc 21       	brne	8000949c <__call_exitprocs+0x14>
8000951a:	20 15       	sub	r5,1
8000951c:	20 43       	sub	r3,4
8000951e:	20 42       	sub	r2,4
80009520:	58 05       	cp.w	r5,0
#ifndef _ATEXIT_DYNAMIC_ALLOC
      break;
#else
      /* Move to the next block.  Free empty blocks except the last one,
	 which is part of _GLOBAL_REENT.  */
      if (p->_ind == 0 && p->_next)
80009522:	cc c4       	brge	800094ba <__call_exitprocs+0x32>
80009524:	6e 18       	ld.w	r8,r7[0x4]
80009526:	58 08       	cp.w	r8,0
80009528:	c0 f1       	brne	80009546 <__call_exitprocs+0xbe>
8000952a:	6e 08       	ld.w	r8,r7[0x0]
8000952c:	58 08       	cp.w	r8,0
	{
	  /* Remove empty block from the list.  */
	  *lastp = p->_next;
8000952e:	c0 c0       	breq	80009546 <__call_exitprocs+0xbe>
#ifdef _REENT_SMALL
	  if (args)
80009530:	89 08       	st.w	r4[0x0],r8
80009532:	58 06       	cp.w	r6,0
	    free (args);
80009534:	c0 40       	breq	8000953c <__call_exitprocs+0xb4>
80009536:	0c 9c       	mov	r12,r6
80009538:	fe b0 fc 02 	rcall	80008d3c <free>
#endif
	  free (p);
8000953c:	0e 9c       	mov	r12,r7
8000953e:	fe b0 fb ff 	rcall	80008d3c <free>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      break;
#else
      /* Move to the next block.  Free empty blocks except the last one,
	 which is part of _GLOBAL_REENT.  */
      if (p->_ind == 0 && p->_next)
80009542:	68 07       	ld.w	r7,r4[0x0]
	  free (p);
	  p = *lastp;
	}
      else
	{
	  lastp = &p->_next;
80009544:	c0 38       	rjmp	8000954a <__call_exitprocs+0xc2>
	  p = p->_next;
80009546:	0e 94       	mov	r4,r7

 restart:

  p = _GLOBAL_REENT->_atexit;
  lastp = &_GLOBAL_REENT->_atexit;
  while (p)
80009548:	6e 07       	ld.w	r7,r7[0x0]
8000954a:	58 07       	cp.w	r7,0
	  lastp = &p->_next;
	  p = p->_next;
	}
#endif
    }
}
8000954c:	ca c1       	brne	800094a4 <__call_exitprocs+0x1c>
8000954e:	2f dd       	sub	sp,-12
80009550:	d8 32       	popm	r0-r7,pc
80009552:	d7 03       	nop

80009554 <__errno>:

#ifndef _REENT_ONLY

int *
__errno ()
{
80009554:	e0 68 01 30 	mov	r8,304
  return &_REENT->_errno;
}
80009558:	70 0c       	ld.w	r12,r8[0x0]
8000955a:	2f 4c       	sub	r12,-12
8000955c:	5e fc       	retal	r12
8000955e:	d7 03       	nop

80009560 <_malloc_trim_r>:
#if __STD_C
int malloc_trim(RARG size_t pad)
#else
int malloc_trim(RARG pad) RDECL size_t pad;
#endif
{
80009560:	d4 21       	pushm	r4-r7,lr
80009562:	16 95       	mov	r5,r11
80009564:	18 97       	mov	r7,r12
  char* current_brk;     /* address returned by pre-check sbrk call */
  char* new_brk;         /* address returned by negative sbrk call */

  unsigned long pagesz = malloc_getpagesize;

  MALLOC_LOCK;
80009566:	cb 3e       	rcall	800092cc <__malloc_lock>
80009568:	e0 64 01 34 	mov	r4,308

  top_size = chunksize(top);
8000956c:	68 28       	ld.w	r8,r4[0x8]
8000956e:	70 16       	ld.w	r6,r8[0x4]
80009570:	e0 16 ff fc 	andl	r6,0xfffc
  extra = ((top_size - pad - MINSIZE + (pagesz-1)) / pagesz - 1) * pagesz;
80009574:	ec c8 ff 91 	sub	r8,r6,-111
80009578:	f0 05 01 05 	sub	r5,r8,r5
8000957c:	e0 15 ff 80 	andl	r5,0xff80
80009580:	ea c5 00 80 	sub	r5,r5,128

  if (extra < (long)pagesz)  /* Not enough memory to release */
80009584:	e0 45 00 7f 	cp.w	r5,127
80009588:	e0 8a 00 22 	brle	800095cc <_malloc_trim_r+0x6c>
  }

  else
  {
    /* Test to make sure no one else called sbrk */
    current_brk = (char*)(MORECORE (0));
8000958c:	30 0b       	mov	r11,0
8000958e:	0e 9c       	mov	r12,r7
80009590:	ce 0e       	rcall	80009350 <_sbrk_r>
80009592:	68 28       	ld.w	r8,r4[0x8]
    if (current_brk != (char*)(top) + top_size)
80009594:	0c 08       	add	r8,r6
80009596:	10 3c       	cp.w	r12,r8
80009598:	c1 a1       	brne	800095cc <_malloc_trim_r+0x6c>
8000959a:	ea 0b 11 00 	rsub	r11,r5,0
      return 0;     /* Apparently we don't own memory; must fail */
    }

    else
    {
      new_brk = (char*)(MORECORE (-extra));
8000959e:	0e 9c       	mov	r12,r7
800095a0:	cd 8e       	rcall	80009350 <_sbrk_r>
800095a2:	5b fc       	cp.w	r12,-1
800095a4:	c1 71       	brne	800095d2 <_malloc_trim_r+0x72>
      
      if (new_brk == (char*)(MORECORE_FAILURE)) /* sbrk failed? */
800095a6:	30 0b       	mov	r11,0
800095a8:	0e 9c       	mov	r12,r7
      {
        /* Try to figure out what we have */
        current_brk = (char*)(MORECORE (0));
800095aa:	cd 3e       	rcall	80009350 <_sbrk_r>
800095ac:	68 28       	ld.w	r8,r4[0x8]
800095ae:	f8 08 01 09 	sub	r9,r12,r8
        top_size = current_brk - (char*)top;
800095b2:	58 f9       	cp.w	r9,15
800095b4:	e0 8a 00 0c 	brle	800095cc <_malloc_trim_r+0x6c>
        if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
800095b8:	a1 a9       	sbr	r9,0x0
800095ba:	91 19       	st.w	r8[0x4],r9
800095bc:	e0 68 05 40 	mov	r8,1344
        {
          sbrked_mem = current_brk - sbrk_base;
          set_head(top, top_size | PREV_INUSE);
800095c0:	70 09       	ld.w	r9,r8[0x0]
        /* Try to figure out what we have */
        current_brk = (char*)(MORECORE (0));
        top_size = current_brk - (char*)top;
        if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
        {
          sbrked_mem = current_brk - sbrk_base;
800095c2:	e0 68 09 a0 	mov	r8,2464
800095c6:	f8 09 01 09 	sub	r9,r12,r9
800095ca:	91 09       	st.w	r8[0x0],r9
800095cc:	0e 9c       	mov	r12,r7
          set_head(top, top_size | PREV_INUSE);
        }
        check_chunk(top);
	MALLOC_UNLOCK;
800095ce:	c8 0e       	rcall	800092ce <__malloc_unlock>
800095d0:	d8 2a       	popm	r4-r7,pc,r12=0
800095d2:	68 28       	ld.w	r8,r4[0x8]
800095d4:	0a 16       	sub	r6,r5
      }

      else
      {
        /* Success. Adjust top accordingly. */
        set_head(top, (top_size - extra) | PREV_INUSE);
800095d6:	a1 a6       	sbr	r6,0x0
800095d8:	91 16       	st.w	r8[0x4],r6
800095da:	e0 68 09 a0 	mov	r8,2464
        sbrked_mem -= extra;
800095de:	70 09       	ld.w	r9,r8[0x0]
800095e0:	0a 19       	sub	r9,r5
800095e2:	0e 9c       	mov	r12,r7
        check_chunk(top);
	MALLOC_UNLOCK;
800095e4:	91 09       	st.w	r8[0x0],r9

      else
      {
        /* Success. Adjust top accordingly. */
        set_head(top, (top_size - extra) | PREV_INUSE);
        sbrked_mem -= extra;
800095e6:	c7 4e       	rcall	800092ce <__malloc_unlock>
        check_chunk(top);
	MALLOC_UNLOCK;
800095e8:	da 2a       	popm	r4-r7,pc,r12=1
800095ea:	d7 03       	nop

800095ec <_free_r>:
800095ec:	d4 21       	pushm	r4-r7,lr
800095ee:	16 96       	mov	r6,r11
800095f0:	18 97       	mov	r7,r12
800095f2:	58 0b       	cp.w	r11,0
800095f4:	e0 80 00 bc 	breq	8000976c <_free_r+0x180>
800095f8:	c6 ae       	rcall	800092cc <__malloc_lock>
800095fa:	20 86       	sub	r6,8
800095fc:	e0 6a 01 34 	mov	r10,308
80009600:	6c 18       	ld.w	r8,r6[0x4]
80009602:	74 2e       	ld.w	lr,r10[0x8]
80009604:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
  }
#endif
  
  check_inuse_chunk(p);
  
  sz = hd & ~PREV_INUSE;
80009608:	a1 c8       	cbr	r8,0x0
  next = chunk_at_offset(p, sz);
8000960a:	ec 08 00 09 	add	r9,r6,r8
  nextsz = chunksize(next);
8000960e:	72 1b       	ld.w	r11,r9[0x4]
80009610:	e0 1b ff fc 	andl	r11,0xfffc
  
  if (next == top)                            /* merge with top */
80009614:	1c 39       	cp.w	r9,lr
80009616:	c1 d1       	brne	80009650 <_free_r+0x64>
  {
    sz += nextsz;
80009618:	f6 08 00 08 	add	r8,r11,r8

    if (!(hd & PREV_INUSE))                    /* consolidate backward */
8000961c:	58 0c       	cp.w	r12,0
8000961e:	c0 81       	brne	8000962e <_free_r+0x42>
    {
      prevsz = p->prev_size;
80009620:	6c 09       	ld.w	r9,r6[0x0]
      p = chunk_at_offset(p, -prevsz);
80009622:	12 16       	sub	r6,r9
      sz += prevsz;
80009624:	12 08       	add	r8,r9
      unlink(p, bck, fwd);
80009626:	6c 3b       	ld.w	r11,r6[0xc]
80009628:	6c 29       	ld.w	r9,r6[0x8]
8000962a:	97 29       	st.w	r11[0x8],r9
8000962c:	93 3b       	st.w	r9[0xc],r11
    }

    set_head(p, sz | PREV_INUSE);
8000962e:	10 99       	mov	r9,r8
    top = p;
80009630:	95 26       	st.w	r10[0x8],r6
      p = chunk_at_offset(p, -prevsz);
      sz += prevsz;
      unlink(p, bck, fwd);
    }

    set_head(p, sz | PREV_INUSE);
80009632:	a1 a9       	sbr	r9,0x0
80009634:	8d 19       	st.w	r6[0x4],r9
    top = p;
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
80009636:	e0 69 05 3c 	mov	r9,1340
8000963a:	72 09       	ld.w	r9,r9[0x0]
8000963c:	12 38       	cp.w	r8,r9
      malloc_trim(RCALL top_pad); 
8000963e:	c0 63       	brcs	8000964a <_free_r+0x5e>
80009640:	e0 68 09 9c 	mov	r8,2460
80009644:	0e 9c       	mov	r12,r7
80009646:	70 0b       	ld.w	r11,r8[0x0]
    MALLOC_UNLOCK;
80009648:	c8 cf       	rcall	80009560 <_malloc_trim_r>
8000964a:	0e 9c       	mov	r12,r7
8000964c:	c4 1e       	rcall	800092ce <__malloc_unlock>
    return;
8000964e:	d8 22       	popm	r4-r7,pc
  }

  set_head(next, nextsz);                    /* clear inuse bit */
80009650:	93 1b       	st.w	r9[0x4],r11

  islr = 0;

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
80009652:	58 0c       	cp.w	r12,0
80009654:	c0 30       	breq	8000965a <_free_r+0x6e>
80009656:	30 0c       	mov	r12,0
80009658:	c0 e8       	rjmp	80009674 <_free_r+0x88>
  {
    prevsz = p->prev_size;
8000965a:	6c 0e       	ld.w	lr,r6[0x0]
    p = chunk_at_offset(p, -prevsz);
    sz += prevsz;
    
    if (p->fd == last_remainder)             /* keep as last_remainder */
8000965c:	f4 c5 ff f8 	sub	r5,r10,-8

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
  {
    prevsz = p->prev_size;
    p = chunk_at_offset(p, -prevsz);
    sz += prevsz;
80009660:	1c 08       	add	r8,lr
  islr = 0;

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
  {
    prevsz = p->prev_size;
    p = chunk_at_offset(p, -prevsz);
80009662:	1c 16       	sub	r6,lr
    sz += prevsz;
    
    if (p->fd == last_remainder)             /* keep as last_remainder */
80009664:	6c 2e       	ld.w	lr,r6[0x8]
80009666:	0a 3e       	cp.w	lr,r5
80009668:	c0 31       	brne	8000966e <_free_r+0x82>
8000966a:	30 1c       	mov	r12,1
8000966c:	c0 48       	rjmp	80009674 <_free_r+0x88>
      islr = 1;
    else
      unlink(p, bck, fwd);
8000966e:	6c 35       	ld.w	r5,r6[0xc]
80009670:	8b 2e       	st.w	r5[0x8],lr
80009672:	9d 35       	st.w	lr[0xc],r5
  }
  
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
80009674:	f2 0b 00 0e 	add	lr,r9,r11
80009678:	7c 1e       	ld.w	lr,lr[0x4]
8000967a:	ed be 00 00 	bld	lr,0x0
8000967e:	c1 40       	breq	800096a6 <_free_r+0xba>
  {
    sz += nextsz;
80009680:	16 08       	add	r8,r11
    
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
80009682:	58 0c       	cp.w	r12,0
80009684:	c0 d1       	brne	8000969e <_free_r+0xb2>
80009686:	e0 6e 01 34 	mov	lr,308
8000968a:	72 2b       	ld.w	r11,r9[0x8]
8000968c:	2f 8e       	sub	lr,-8
8000968e:	1c 3b       	cp.w	r11,lr
    {
      islr = 1;
      link_last_remainder(p);   
80009690:	c0 71       	brne	8000969e <_free_r+0xb2>
80009692:	97 36       	st.w	r11[0xc],r6
80009694:	97 26       	st.w	r11[0x8],r6
80009696:	8d 2b       	st.w	r6[0x8],r11
80009698:	8d 3b       	st.w	r6[0xc],r11
  
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  {
    sz += nextsz;
    
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
8000969a:	30 1c       	mov	r12,1
    {
      islr = 1;
      link_last_remainder(p);   
    }
    else
      unlink(next, bck, fwd);
8000969c:	c0 58       	rjmp	800096a6 <_free_r+0xba>
8000969e:	72 2b       	ld.w	r11,r9[0x8]
800096a0:	72 39       	ld.w	r9,r9[0xc]
800096a2:	93 2b       	st.w	r9[0x8],r11
  }


  set_head(p, sz | PREV_INUSE);
800096a4:	97 39       	st.w	r11[0xc],r9
  set_foot(p, sz);
800096a6:	10 99       	mov	r9,r8
800096a8:	ec 08 09 08 	st.w	r6[r8],r8
    else
      unlink(next, bck, fwd);
  }


  set_head(p, sz | PREV_INUSE);
800096ac:	a1 a9       	sbr	r9,0x0
  set_foot(p, sz);
  if (!islr)
800096ae:	8d 19       	st.w	r6[0x4],r9
800096b0:	58 0c       	cp.w	r12,0
    frontlink(p, sz, idx, bck, fwd);  
800096b2:	c5 a1       	brne	80009766 <_free_r+0x17a>
800096b4:	e0 48 01 ff 	cp.w	r8,511
800096b8:	e0 8b 00 13 	brhi	800096de <_free_r+0xf2>
800096bc:	a3 98       	lsr	r8,0x3
800096be:	f4 08 00 39 	add	r9,r10,r8<<0x3
800096c2:	72 2b       	ld.w	r11,r9[0x8]
800096c4:	8d 39       	st.w	r6[0xc],r9
800096c6:	8d 2b       	st.w	r6[0x8],r11
800096c8:	97 36       	st.w	r11[0xc],r6
800096ca:	93 26       	st.w	r9[0x8],r6
800096cc:	a3 48       	asr	r8,0x2
800096ce:	74 19       	ld.w	r9,r10[0x4]
800096d0:	30 1b       	mov	r11,1
800096d2:	f6 08 09 48 	lsl	r8,r11,r8
800096d6:	f3 e8 10 08 	or	r8,r9,r8
800096da:	95 18       	st.w	r10[0x4],r8
800096dc:	c4 58       	rjmp	80009766 <_free_r+0x17a>
800096de:	f0 0b 16 09 	lsr	r11,r8,0x9
800096e2:	58 4b       	cp.w	r11,4
800096e4:	e0 8b 00 06 	brhi	800096f0 <_free_r+0x104>
800096e8:	f0 0b 16 06 	lsr	r11,r8,0x6
800096ec:	2c 8b       	sub	r11,-56
800096ee:	c2 08       	rjmp	8000972e <_free_r+0x142>
800096f0:	59 4b       	cp.w	r11,20
800096f2:	e0 8b 00 04 	brhi	800096fa <_free_r+0x10e>
800096f6:	2a 5b       	sub	r11,-91
800096f8:	c1 b8       	rjmp	8000972e <_free_r+0x142>
800096fa:	e0 4b 00 54 	cp.w	r11,84
800096fe:	e0 8b 00 06 	brhi	8000970a <_free_r+0x11e>
80009702:	f0 0b 16 0c 	lsr	r11,r8,0xc
80009706:	29 2b       	sub	r11,-110
80009708:	c1 38       	rjmp	8000972e <_free_r+0x142>
8000970a:	e0 4b 01 54 	cp.w	r11,340
8000970e:	e0 8b 00 06 	brhi	8000971a <_free_r+0x12e>
80009712:	f0 0b 16 0f 	lsr	r11,r8,0xf
80009716:	28 9b       	sub	r11,-119
80009718:	c0 b8       	rjmp	8000972e <_free_r+0x142>
8000971a:	e0 4b 05 54 	cp.w	r11,1364
8000971e:	e0 88 00 05 	brls	80009728 <_free_r+0x13c>
80009722:	37 eb       	mov	r11,126
80009724:	c0 58       	rjmp	8000972e <_free_r+0x142>
80009726:	d7 03       	nop
80009728:	f0 0b 16 12 	lsr	r11,r8,0x12
8000972c:	28 4b       	sub	r11,-124
8000972e:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80009732:	78 29       	ld.w	r9,r12[0x8]
80009734:	18 39       	cp.w	r9,r12
80009736:	c0 e1       	brne	80009752 <_free_r+0x166>
80009738:	74 18       	ld.w	r8,r10[0x4]
8000973a:	a3 4b       	asr	r11,0x2
8000973c:	30 1c       	mov	r12,1
8000973e:	f8 0b 09 4b 	lsl	r11,r12,r11
80009742:	f1 eb 10 0b 	or	r11,r8,r11
80009746:	12 98       	mov	r8,r9
80009748:	95 1b       	st.w	r10[0x4],r11
8000974a:	c0 a8       	rjmp	8000975e <_free_r+0x172>
8000974c:	72 29       	ld.w	r9,r9[0x8]
8000974e:	18 39       	cp.w	r9,r12
80009750:	c0 60       	breq	8000975c <_free_r+0x170>
80009752:	72 1a       	ld.w	r10,r9[0x4]
80009754:	e0 1a ff fc 	andl	r10,0xfffc
80009758:	14 38       	cp.w	r8,r10
8000975a:	cf 93       	brcs	8000974c <_free_r+0x160>
8000975c:	72 38       	ld.w	r8,r9[0xc]
8000975e:	8d 38       	st.w	r6[0xc],r8
80009760:	8d 29       	st.w	r6[0x8],r9
80009762:	93 36       	st.w	r9[0xc],r6
80009764:	91 26       	st.w	r8[0x8],r6
80009766:	0e 9c       	mov	r12,r7
80009768:	fe b0 fd b3 	rcall	800092ce <__malloc_unlock>
8000976c:	d8 22       	popm	r4-r7,pc
8000976e:	d7 03       	nop

80009770 <__do_global_ctors_aux>:
80009770:	d4 21       	pushm	r4-r7,lr
80009772:	30 c7       	mov	r7,12
80009774:	c0 28       	rjmp	80009778 <__do_global_ctors_aux+0x8>
80009776:	5d 18       	icall	r8
80009778:	20 47       	sub	r7,4

  MALLOC_UNLOCK;
8000977a:	6e 08       	ld.w	r8,r7[0x0]
8000977c:	5b f8       	cp.w	r8,-1
8000977e:	cf c1       	brne	80009776 <__do_global_ctors_aux+0x6>
80009780:	d8 22       	popm	r4-r7,pc
80009782:	d7 03       	nop

Disassembly of section .exception:

80009800 <_evba>:
80009800:	c0 08       	rjmp	80009800 <_evba>
	...

80009804 <_handle_TLB_Multiple_Hit>:
80009804:	c0 08       	rjmp	80009804 <_handle_TLB_Multiple_Hit>
	...

80009808 <_handle_Bus_Error_Data_Fetch>:
80009808:	c0 08       	rjmp	80009808 <_handle_Bus_Error_Data_Fetch>
	...

8000980c <_handle_Bus_Error_Instruction_Fetch>:
8000980c:	c0 08       	rjmp	8000980c <_handle_Bus_Error_Instruction_Fetch>
	...

80009810 <_handle_NMI>:
80009810:	c0 08       	rjmp	80009810 <_handle_NMI>
	...

80009814 <_handle_Instruction_Address>:
80009814:	c0 08       	rjmp	80009814 <_handle_Instruction_Address>
	...

80009818 <_handle_ITLB_Protection>:
80009818:	c0 08       	rjmp	80009818 <_handle_ITLB_Protection>
	...

8000981c <_handle_Breakpoint>:
8000981c:	c0 08       	rjmp	8000981c <_handle_Breakpoint>
	...

80009820 <_handle_Illegal_Opcode>:
80009820:	c0 08       	rjmp	80009820 <_handle_Illegal_Opcode>
	...

80009824 <_handle_Unimplemented_Instruction>:
80009824:	c0 08       	rjmp	80009824 <_handle_Unimplemented_Instruction>
	...

80009828 <_handle_Privilege_Violation>:
80009828:	c0 08       	rjmp	80009828 <_handle_Privilege_Violation>
	...

8000982c <_handle_Floating_Point>:
8000982c:	c0 08       	rjmp	8000982c <_handle_Floating_Point>
	...

80009830 <_handle_Coprocessor_Absent>:
80009830:	c0 08       	rjmp	80009830 <_handle_Coprocessor_Absent>
	...

80009834 <_handle_Data_Address_Read>:
80009834:	c0 08       	rjmp	80009834 <_handle_Data_Address_Read>
	...

80009838 <_handle_Data_Address_Write>:
80009838:	c0 08       	rjmp	80009838 <_handle_Data_Address_Write>
	...

8000983c <_handle_DTLB_Protection_Read>:
8000983c:	c0 08       	rjmp	8000983c <_handle_DTLB_Protection_Read>
	...

80009840 <_handle_DTLB_Protection_Write>:
80009840:	c0 08       	rjmp	80009840 <_handle_DTLB_Protection_Write>
	...

80009844 <_handle_DTLB_Modified>:
80009844:	c0 08       	rjmp	80009844 <_handle_DTLB_Modified>
	...

80009850 <_handle_ITLB_Miss>:
80009850:	c0 08       	rjmp	80009850 <_handle_ITLB_Miss>
	...

80009860 <_handle_DTLB_Miss_Read>:
80009860:	c0 08       	rjmp	80009860 <_handle_DTLB_Miss_Read>
	...

80009870 <_handle_DTLB_Miss_Write>:
80009870:	c0 08       	rjmp	80009870 <_handle_DTLB_Miss_Write>
	...

80009900 <_handle_Supervisor_Call>:
80009900:	c0 08       	rjmp	80009900 <_handle_Supervisor_Call>
80009902:	d7 03       	nop

80009904 <_int0>:
80009904:	30 0c       	mov	r12,0
80009906:	fe b0 e9 21 	rcall	80006b48 <_get_interrupt_handler>
8000990a:	58 0c       	cp.w	r12,0
8000990c:	f8 0f 17 10 	movne	pc,r12
80009910:	d6 03       	rete

80009912 <_int1>:
80009912:	30 1c       	mov	r12,1
80009914:	fe b0 e9 1a 	rcall	80006b48 <_get_interrupt_handler>
80009918:	58 0c       	cp.w	r12,0
8000991a:	f8 0f 17 10 	movne	pc,r12
8000991e:	d6 03       	rete

80009920 <_int2>:
80009920:	30 2c       	mov	r12,2
80009922:	fe b0 e9 13 	rcall	80006b48 <_get_interrupt_handler>
80009926:	58 0c       	cp.w	r12,0
80009928:	f8 0f 17 10 	movne	pc,r12
8000992c:	d6 03       	rete

8000992e <_int3>:
8000992e:	30 3c       	mov	r12,3
80009930:	fe b0 e9 0c 	rcall	80006b48 <_get_interrupt_handler>
80009934:	58 0c       	cp.w	r12,0
80009936:	f8 0f 17 10 	movne	pc,r12
8000993a:	d6 03       	rete
8000993c:	d7 03       	nop
8000993e:	d7 03       	nop
80009940:	d7 03       	nop
80009942:	d7 03       	nop
80009944:	d7 03       	nop
80009946:	d7 03       	nop
80009948:	d7 03       	nop
8000994a:	d7 03       	nop
8000994c:	d7 03       	nop
8000994e:	d7 03       	nop
80009950:	d7 03       	nop
80009952:	d7 03       	nop
80009954:	d7 03       	nop
80009956:	d7 03       	nop
80009958:	d7 03       	nop
8000995a:	d7 03       	nop
8000995c:	d7 03       	nop
8000995e:	d7 03       	nop
80009960:	d7 03       	nop
80009962:	d7 03       	nop
80009964:	d7 03       	nop
80009966:	d7 03       	nop
80009968:	d7 03       	nop
8000996a:	d7 03       	nop
8000996c:	d7 03       	nop
8000996e:	d7 03       	nop
80009970:	d7 03       	nop
80009972:	d7 03       	nop
80009974:	d7 03       	nop
80009976:	d7 03       	nop
80009978:	d7 03       	nop
8000997a:	d7 03       	nop
8000997c:	d7 03       	nop
8000997e:	d7 03       	nop
80009980:	d7 03       	nop
80009982:	d7 03       	nop
80009984:	d7 03       	nop
80009986:	d7 03       	nop
80009988:	d7 03       	nop
8000998a:	d7 03       	nop
8000998c:	d7 03       	nop
8000998e:	d7 03       	nop
80009990:	d7 03       	nop
80009992:	d7 03       	nop
80009994:	d7 03       	nop
80009996:	d7 03       	nop
80009998:	d7 03       	nop
8000999a:	d7 03       	nop
8000999c:	d7 03       	nop
8000999e:	d7 03       	nop
800099a0:	d7 03       	nop
800099a2:	d7 03       	nop
800099a4:	d7 03       	nop
800099a6:	d7 03       	nop
800099a8:	d7 03       	nop
800099aa:	d7 03       	nop
800099ac:	d7 03       	nop
800099ae:	d7 03       	nop
800099b0:	d7 03       	nop
800099b2:	d7 03       	nop
800099b4:	d7 03       	nop
800099b6:	d7 03       	nop
800099b8:	d7 03       	nop
800099ba:	d7 03       	nop
800099bc:	d7 03       	nop
800099be:	d7 03       	nop
800099c0:	d7 03       	nop
800099c2:	d7 03       	nop
800099c4:	d7 03       	nop
800099c6:	d7 03       	nop
800099c8:	d7 03       	nop
800099ca:	d7 03       	nop
800099cc:	d7 03       	nop
800099ce:	d7 03       	nop
800099d0:	d7 03       	nop
800099d2:	d7 03       	nop
800099d4:	d7 03       	nop
800099d6:	d7 03       	nop
800099d8:	d7 03       	nop
800099da:	d7 03       	nop
800099dc:	d7 03       	nop
800099de:	d7 03       	nop
800099e0:	d7 03       	nop
800099e2:	d7 03       	nop
800099e4:	d7 03       	nop
800099e6:	d7 03       	nop
800099e8:	d7 03       	nop
800099ea:	d7 03       	nop
800099ec:	d7 03       	nop
800099ee:	d7 03       	nop
800099f0:	d7 03       	nop
800099f2:	d7 03       	nop
800099f4:	d7 03       	nop
800099f6:	d7 03       	nop
800099f8:	d7 03       	nop
800099fa:	d7 03       	nop
800099fc:	d7 03       	nop
800099fe:	d7 03       	nop

Disassembly of section .fini:

80009a00 <_fini>:
80009a00:	eb cd 40 40 	pushm	r6,lr
80009a04:	48 26       	lddpc	r6,80009a0c <_fini+0xc>
80009a06:	1e 26       	rsub	r6,pc
80009a08:	c0 48       	rjmp	80009a10 <_fini+0x10>
80009a0a:	d7 03       	nop
80009a0c:	80 00       	ld.sh	r0,r0[0x0]
80009a0e:	99 ea       	st.w	r12[0x38],r10
80009a10:	fe b0 c3 38 	rcall	80002080 <__do_global_dtors_aux>
80009a14:	e3 cd 80 40 	ldm	sp++,r6,pc
