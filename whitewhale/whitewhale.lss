
whitewhale.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init         0000001a  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         00007258  80002020  80002020  00002420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .exception    00000200  80009400  80009400  00009800  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .fini         00000018  80009600  80009600  00009a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .rodata       00000608  80009618  80009618  00009a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  8 .ctors        00000008  00000008  80009c20  0000a408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .dtors        00000008  00000010  80009c28  0000a410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .jcr          00000004  00000018  80009c30  0000a418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .got          00000000  0000001c  80009c34  0000a41c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000528  0000001c  80009c34  0000a41c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          0000175c  00000564  00000564  00000000  2**2
                  ALLOC
 14 .heap         00005340  00001cc0  00001cc0  00000000  2**0
                  ALLOC
 15 .comment      00000028  00000000  00000000  0000a944  2**0
                  CONTENTS, READONLY
 16 .debug_aranges 00001010  00000000  00000000  0000a96c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_pubnames 000024cb  00000000  00000000  0000b97c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_info   0002922c  00000000  00000000  0000de47  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00004e83  00000000  00000000  00037073  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0001317e  00000000  00000000  0003bef6  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_frame  00002bac  00000000  00000000  0004f074  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    00008baa  00000000  00000000  00051c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    00007012  00000000  00000000  0005a7ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macinfo 010f7999  00000000  00000000  000617dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .stack        00001000  00007000  00007000  00000000  2**0
                  ALLOC
 26 .flash_nvram  00007a6c  80030000  8000a15c  0000ac00  2**2
                  ALLOC
 27 .debug_ranges 000016e0  00000000  00000000  01159175  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf ff e0 	sub	pc,pc,-32

Disassembly of section .init:

80002004 <_init>:
80002004:	eb cd 40 40 	pushm	r6,lr
80002008:	48 26       	lddpc	r6,80002010 <_init+0xc>
8000200a:	1e 26       	rsub	r6,pc
8000200c:	c0 48       	rjmp	80002014 <_init+0x10>
8000200e:	d7 03       	nop
80002010:	80 00       	ld.sh	r0,r0[0x0]
80002012:	1f ee       	ld.ub	lr,pc[0x6]
80002014:	c5 4c       	rcall	800020bc <frame_dummy>
80002016:	e0 a0 39 27 	rcall	80009264 <__do_global_ctors_aux>
8000201a:	e3 cd 80 40 	ldm	sp++,r6,pc

Disassembly of section .text:

80002020 <_stext>:
80002020:	30 07       	mov	r7,0
80002022:	e0 6a 80 00 	mov	r10,32768
80002026:	5b fa       	cp.w	r10,-1
80002028:	f4 0d 17 10 	movne	sp,r10
8000202c:	fe cb 84 0c 	sub	r11,pc,-31732
80002030:	30 8c       	mov	r12,8
80002032:	18 3b       	cp.w	r11,r12
80002034:	c0 70       	breq	80002042 <_stext+0x22>
80002036:	e0 6a 05 48 	mov	r10,1352
8000203a:	b7 09       	ld.d	r8,r11++
8000203c:	b9 28       	st.d	r12++,r8
8000203e:	14 3c       	cp.w	r12,r10
80002040:	cf d5       	brlt	8000203a <_stext+0x1a>
80002042:	e0 6a 1c c0 	mov	r10,7360
80002046:	e0 6c 05 48 	mov	r12,1352
8000204a:	30 08       	mov	r8,0
8000204c:	30 09       	mov	r9,0
8000204e:	b9 28       	st.d	r12++,r8
80002050:	14 3c       	cp.w	r12,r10
80002052:	cf e5       	brlt	8000204e <_stext+0x2e>
80002054:	e0 a0 37 1b 	rcall	80008e8a <_init_startup>
80002058:	fe cc 8a 58 	sub	r12,pc,-30120
8000205c:	e0 a0 33 d2 	rcall	80008800 <atexit>
80002060:	cd 2f       	rcall	80002004 <_init>
80002062:	1a 9c       	mov	r12,sp
80002064:	30 0b       	mov	r11,0
80002066:	e0 a0 37 13 	rcall	80008e8c <_init_argv>
8000206a:	5b fc       	cp.w	r12,-1
8000206c:	f9 bc 00 00 	moveq	r12,0
80002070:	f9 ba 00 00 	moveq	r10,0
80002074:	14 1d       	sub	sp,r10
80002076:	e0 a0 11 71 	rcall	80004358 <main>
8000207a:	e0 a0 33 cb 	rcall	80008810 <exit>
8000207e:	d7 03       	nop

80002080 <__do_global_dtors_aux>:
80002080:	d4 21       	pushm	r4-r7,lr
80002082:	e0 68 05 64 	mov	r8,1380
80002086:	11 89       	ld.ub	r9,r8[0x0]
80002088:	30 08       	mov	r8,0
8000208a:	f0 09 18 00 	cp.b	r9,r8
8000208e:	c1 61       	brne	800020ba <__do_global_dtors_aux+0x3a>
80002090:	31 08       	mov	r8,16
80002092:	31 46       	mov	r6,20
80002094:	10 95       	mov	r5,r8
80002096:	10 16       	sub	r6,r8
80002098:	e0 67 05 68 	mov	r7,1384
8000209c:	a3 46       	asr	r6,0x2
8000209e:	20 16       	sub	r6,1
800020a0:	c0 68       	rjmp	800020ac <__do_global_dtors_aux+0x2c>
800020a2:	2f f8       	sub	r8,-1
800020a4:	8f 08       	st.w	r7[0x0],r8
800020a6:	ea 08 03 28 	ld.w	r8,r5[r8<<0x2]
800020aa:	5d 18       	icall	r8
800020ac:	6e 08       	ld.w	r8,r7[0x0]
800020ae:	0c 38       	cp.w	r8,r6
800020b0:	cf 93       	brcs	800020a2 <__do_global_dtors_aux+0x22>
800020b2:	30 19       	mov	r9,1
800020b4:	e0 68 05 64 	mov	r8,1380
800020b8:	b0 89       	st.b	r8[0x0],r9
800020ba:	d8 22       	popm	r4-r7,pc

800020bc <frame_dummy>:
800020bc:	d4 01       	pushm	lr
800020be:	31 8c       	mov	r12,24
800020c0:	78 08       	ld.w	r8,r12[0x0]
800020c2:	58 08       	cp.w	r8,0
800020c4:	c0 50       	breq	800020ce <frame_dummy+0x12>
800020c6:	48 38       	lddpc	r8,800020d0 <frame_dummy+0x14>
800020c8:	58 08       	cp.w	r8,0
800020ca:	c0 20       	breq	800020ce <frame_dummy+0x12>
800020cc:	5d 18       	icall	r8
800020ce:	d8 02       	popm	pc
800020d0:	00 00       	add	r0,r0
	...

800020d4 <handler_None>:

// check the event queue
static void check_events(void);

// handler protos
static void handler_None(s32 data) { ;; }
800020d4:	5e fc       	retal	r12
800020d6:	d7 03       	nop

800020d8 <clockTimer_callback>:
static softTimer_t monomePollTimer = { .next = NULL, .prev = NULL };
static softTimer_t monomeRefreshTimer  = { .next = NULL, .prev = NULL };



static void clockTimer_callback(void* o) {  
800020d8:	d4 01       	pushm	lr
	// static event_t e;
	// e.type = kEventTimer;
	// e.data = 0;
	// event_post(&e);
	if(clock_external == 0) {
800020da:	e0 68 1a cc 	mov	r8,6860
800020de:	11 89       	ld.ub	r9,r8[0x0]
800020e0:	58 09       	cp.w	r9,0
		// print_dbg("\r\ntimer.");

		clock_phase++;
800020e2:	c1 21       	brne	80002106 <clockTimer_callback+0x2e>
800020e4:	e0 68 1a 5c 	mov	r8,6748
800020e8:	11 8a       	ld.ub	r10,r8[0x0]
		if(clock_phase>1) clock_phase=0;
800020ea:	2f fa       	sub	r10,-1
800020ec:	b0 8a       	st.b	r8[0x0],r10
800020ee:	30 1b       	mov	r11,1
800020f0:	f6 0a 18 00 	cp.b	r10,r11
800020f4:	e0 88 00 03 	brls	800020fa <clockTimer_callback+0x22>
		(*clock_pulse)(clock_phase);
800020f8:	b0 89       	st.b	r8[0x0],r9
800020fa:	e0 69 1a 5c 	mov	r9,6748
800020fe:	31 c8       	mov	r8,28
80002100:	13 8c       	ld.ub	r12,r9[0x0]
80002102:	70 08       	ld.w	r8,r8[0x0]
80002104:	5d 18       	icall	r8
80002106:	d8 02       	popm	pc

80002108 <handler_MonomePoll>:
80002108:	d4 01       	pushm	lr
8000210a:	33 08       	mov	r8,48
8000210c:	70 08       	ld.w	r8,r8[0x0]
8000210e:	5d 18       	icall	r8
	// monome_set_quadrant_flag(0);
	// monome_set_quadrant_flag(1);
	timers_set_monome();
}

static void handler_MonomePoll(s32 data) { monome_read_serial(); }
80002110:	d8 02       	popm	pc
80002112:	d7 03       	nop

80002114 <handler_Front>:
80002114:	d4 21       	pushm	r4-r7,lr
80002116:	18 97       	mov	r7,r12
	}
}


static void handler_Front(s32 data) {
	print_dbg("\r\n FRONT HOLD");
80002118:	fe cc 88 00 	sub	r12,pc,-30720
8000211c:	e0 a0 2e 80 	rcall	80007e1c <print_dbg>

	if(data == 0) {
80002120:	e0 68 1a 5e 	mov	r8,6750
		front_timer = 15;
80002124:	58 07       	cp.w	r7,0
80002126:	c0 d1       	brne	80002140 <handler_Front+0x2c>
		if(preset_mode) preset_mode = 0;
80002128:	30 f9       	mov	r9,15
8000212a:	b0 89       	st.b	r8[0x0],r9
8000212c:	e0 68 1a 50 	mov	r8,6736
80002130:	11 8a       	ld.ub	r10,r8[0x0]
80002132:	ee 0a 18 00 	cp.b	r10,r7
		else preset_mode = 1;
80002136:	c0 30       	breq	8000213c <handler_Front+0x28>
80002138:	b0 87       	st.b	r8[0x0],r7
	}
	else {
		front_timer = 0;
8000213a:	c0 58       	rjmp	80002144 <handler_Front+0x30>
8000213c:	30 19       	mov	r9,1
	}

	monomeFrameDirty++;
8000213e:	c0 28       	rjmp	80002142 <handler_Front+0x2e>
80002140:	30 09       	mov	r9,0
80002142:	b0 89       	st.b	r8[0x0],r9
80002144:	e0 68 07 69 	mov	r8,1897
}
80002148:	11 89       	ld.ub	r9,r8[0x0]
8000214a:	2f f9       	sub	r9,-1
8000214c:	b0 89       	st.b	r8[0x0],r9
8000214e:	d8 22       	popm	r4-r7,pc

80002150 <flash_read>:
80002150:	d4 31       	pushm	r0-r7,lr
80002152:	20 1d       	sub	sp,4
80002154:	fe cc 88 2c 	sub	r12,pc,-30676
80002158:	e0 a0 2e 62 	rcall	80007e1c <print_dbg>

void flash_read(void) {
	u8 i1, i2;

	print_dbg("\r\n read preset ");
	print_dbg_ulong(preset_select);
8000215c:	e0 67 0b 04 	mov	r7,2820
80002160:	0f 8c       	ld.ub	r12,r7[0x0]

	for(i1=0;i1<16;i1++) {
		for(i2=0;i2<16;i2++) {
			w.wp[i1].steps[i2] = flashy.w[preset_select].wp[i1].steps[i2];
80002162:	e0 a0 2e 57 	rcall	80007e10 <print_dbg_ulong>
	u8 i1, i2;

	print_dbg("\r\n read preset ");
	print_dbg_ulong(preset_select);

	for(i1=0;i1<16;i1++) {
80002166:	4c 49       	lddpc	r9,80002274 <flash_read+0x124>
		for(i2=0;i2<16;i2++) {
			w.wp[i1].steps[i2] = flashy.w[preset_select].wp[i1].steps[i2];
80002168:	0f 84       	ld.ub	r4,r7[0x0]
8000216a:	12 92       	mov	r2,r9
8000216c:	e0 67 0b 0c 	mov	r7,2828
80002170:	e0 68 0f 44 	mov	r8,3908
80002174:	ee c5 ff fc 	sub	r5,r7,-4
	u8 i1, i2;

	print_dbg("\r\n read preset ");
	print_dbg_ulong(preset_select);

	for(i1=0;i1<16;i1++) {
80002178:	e8 08 02 48 	mul	r8,r4,r8
		for(i2=0;i2<16;i2++) {
			w.wp[i1].steps[i2] = flashy.w[preset_select].wp[i1].steps[i2];
8000217c:	30 06       	mov	r6,0
8000217e:	50 08       	stdsp	sp[0x0],r8
80002180:	0e 93       	mov	r3,r7
80002182:	2b 48       	sub	r8,-76
80002184:	f2 08 00 08 	add	r8,r9,r8
80002188:	0e 99       	mov	r9,r7
			w.wp[i1].step_probs[i2] = flashy.w[preset_select].wp[i1].step_probs[i2];
8000218a:	c4 08       	rjmp	8000220a <flash_read+0xba>
8000218c:	1d 80       	ld.ub	r0,lr[0x0]
8000218e:	b4 80       	st.b	r10[0x0],r0
80002190:	fd 30 00 10 	ld.ub	r0,lr[16]
			w.wp[i1].cv_probs[0][i2] = flashy.w[preset_select].wp[i1].cv_probs[0][i2];
80002194:	f5 60 00 10 	st.b	r10[16],r0
80002198:	fd 30 00 c0 	ld.ub	r0,lr[192]
			w.wp[i1].cv_probs[1][i2] = flashy.w[preset_select].wp[i1].cv_probs[1][i2];
8000219c:	f5 60 00 c0 	st.b	r10[192],r0
800021a0:	fd 30 00 d0 	ld.ub	r0,lr[208]
			w.wp[i1].cv_curves[0][i2] = flashy.w[preset_select].wp[i1].cv_curves[0][i2];
800021a4:	f5 60 00 d0 	st.b	r10[208],r0
			w.wp[i1].cv_curves[1][i2] = flashy.w[preset_select].wp[i1].cv_curves[1][i2];
800021a8:	96 00       	ld.sh	r0,r11[0x0]
800021aa:	b8 00       	st.h	r12[0x0],r0
800021ac:	f7 00 00 20 	ld.sh	r0,r11[32]
			w.wp[i1].cv_steps[0][i2] = flashy.w[preset_select].wp[i1].cv_steps[0][i2];
800021b0:	f9 50 00 20 	st.h	r12[32],r0
800021b4:	f7 00 ff c0 	ld.sh	r0,r11[-64]
			w.wp[i1].cv_steps[1][i2] = flashy.w[preset_select].wp[i1].cv_steps[1][i2];
800021b8:	f9 50 ff c0 	st.h	r12[-64],r0
800021bc:	f7 00 ff e0 	ld.sh	r0,r11[-32]
			w.wp[i1].cv_values[i2] = flashy.w[preset_select].wp[i1].cv_values[i2];
800021c0:	f9 50 ff e0 	st.h	r12[-32],r0
800021c4:	f7 00 ff a0 	ld.sh	r0,r11[-96]
800021c8:	f9 50 ff a0 	st.h	r12[-96],r0
800021cc:	2f fe       	sub	lr,-1

	print_dbg("\r\n read preset ");
	print_dbg_ulong(preset_select);

	for(i1=0;i1<16;i1++) {
		for(i2=0;i2<16;i2++) {
800021ce:	2f fa       	sub	r10,-1
800021d0:	2f eb       	sub	r11,-2
			w.wp[i1].cv_steps[0][i2] = flashy.w[preset_select].wp[i1].cv_steps[0][i2];
			w.wp[i1].cv_steps[1][i2] = flashy.w[preset_select].wp[i1].cv_steps[1][i2];
			w.wp[i1].cv_values[i2] = flashy.w[preset_select].wp[i1].cv_values[i2];
		}

		w.wp[i1].step_choice = flashy.w[preset_select].wp[i1].step_choice;
800021d2:	2f ec       	sub	r12,-2
800021d4:	02 3a       	cp.w	r10,r1
		w.wp[i1].loop_end = flashy.w[preset_select].wp[i1].loop_end;
800021d6:	cd b1       	brne	8000218c <flash_read+0x3c>
800021d8:	90 2a       	ld.sh	r10,r8[0x4]
		w.wp[i1].loop_len = flashy.w[preset_select].wp[i1].loop_len;
800021da:	aa 0a       	st.h	r5[0x0],r10
800021dc:	11 9a       	ld.ub	r10,r8[0x1]
		w.wp[i1].loop_start = flashy.w[preset_select].wp[i1].loop_start;
800021de:	b2 9a       	st.b	r9[0x1],r10
800021e0:	11 aa       	ld.ub	r10,r8[0x2]
		w.wp[i1].loop_dir = flashy.w[preset_select].wp[i1].loop_dir;
800021e2:	b2 aa       	st.b	r9[0x2],r10
800021e4:	11 8a       	ld.ub	r10,r8[0x0]
		w.wp[i1].step_mode = flashy.w[preset_select].wp[i1].step_mode;
800021e6:	b2 8a       	st.b	r9[0x0],r10
800021e8:	11 ba       	ld.ub	r10,r8[0x3]
		w.wp[i1].cv_mode[0] = flashy.w[preset_select].wp[i1].cv_mode[0];
800021ea:	b2 ba       	st.b	r9[0x3],r10
800021ec:	70 2a       	ld.w	r10,r8[0x8]
		w.wp[i1].cv_mode[1] = flashy.w[preset_select].wp[i1].cv_mode[1];
800021ee:	93 2a       	st.w	r9[0x8],r10
800021f0:	11 ea       	ld.ub	r10,r8[0x6]
800021f2:	aa aa       	st.b	r5[0x2],r10
800021f4:	11 fa       	ld.ub	r10,r8[0x7]
800021f6:	b2 fa       	st.b	r9[0x7],r10
800021f8:	2f f6       	sub	r6,-1
800021fa:	f0 c8 ff 14 	sub	r8,r8,-236
800021fe:	ea c5 ff 14 	sub	r5,r5,-236
	u8 i1, i2;

	print_dbg("\r\n read preset ");
	print_dbg_ulong(preset_select);

	for(i1=0;i1<16;i1++) {
80002202:	f2 c9 ff 14 	sub	r9,r9,-236
80002206:	59 06       	cp.w	r6,16
80002208:	c1 70       	breq	80002236 <flash_read+0xe6>
8000220a:	e0 6b 00 ec 	mov	r11,236
8000220e:	ec 0b 02 4a 	mul	r10,r6,r11
80002212:	40 0b       	lddsp	r11,sp[0x0]
80002214:	f4 cc ff 74 	sub	r12,r10,-140
80002218:	f4 0b 00 0e 	add	lr,r10,r11
8000221c:	06 0c       	add	r12,r3
8000221e:	fc cb ff 28 	sub	r11,lr,-216
80002222:	2f 4a       	sub	r10,-12
80002224:	2a 8e       	sub	lr,-88
80002226:	e4 0b 00 0b 	add	r11,r2,r11
8000222a:	e4 0e 00 0e 	add	lr,r2,lr
8000222e:	06 0a       	add	r10,r3
		w.wp[i1].step_mode = flashy.w[preset_select].wp[i1].step_mode;
		w.wp[i1].cv_mode[0] = flashy.w[preset_select].wp[i1].cv_mode[0];
		w.wp[i1].cv_mode[1] = flashy.w[preset_select].wp[i1].cv_mode[1];
	}

	w.series_start = flashy.w[preset_select].series_start;
80002230:	f2 c1 ff e4 	sub	r1,r9,-28
80002234:	ca cb       	rjmp	8000218c <flash_read+0x3c>
80002236:	49 0a       	lddpc	r10,80002274 <flash_read+0x124>
	w.series_end = flashy.w[preset_select].series_end;
80002238:	e0 6b 0f 44 	mov	r11,3908
		w.wp[i1].step_mode = flashy.w[preset_select].wp[i1].step_mode;
		w.wp[i1].cv_mode[0] = flashy.w[preset_select].wp[i1].cv_mode[0];
		w.wp[i1].cv_mode[1] = flashy.w[preset_select].wp[i1].cv_mode[1];
	}

	w.series_start = flashy.w[preset_select].series_start;
8000223c:	b7 34       	mul	r4,r11
8000223e:	e8 cb f0 f4 	sub	r11,r4,-3852
	w.series_end = flashy.w[preset_select].series_end;
80002242:	f4 04 00 04 	add	r4,r10,r4
		w.wp[i1].step_mode = flashy.w[preset_select].wp[i1].step_mode;
		w.wp[i1].cv_mode[0] = flashy.w[preset_select].wp[i1].cv_mode[0];
		w.wp[i1].cv_mode[1] = flashy.w[preset_select].wp[i1].cv_mode[1];
	}

	w.series_start = flashy.w[preset_select].series_start;
80002246:	f4 0b 00 0b 	add	r11,r10,r11
8000224a:	e8 c4 f0 74 	sub	r4,r4,-3980
	flashc_memcpy((void *)&flashy.glyph[preset_select], &glyph, sizeof(glyph), true);
	flashc_memset8((void*)&(flashy.preset_select), preset_select, 1, true);
	flashc_memset32((void*)&(flashy.edit_mode), edit_mode, 4, true);
}

void flash_read(void) {
8000224e:	09 9a       	ld.ub	r10,r4[0x1]
		w.wp[i1].cv_mode[0] = flashy.w[preset_select].wp[i1].cv_mode[0];
		w.wp[i1].cv_mode[1] = flashy.w[preset_select].wp[i1].cv_mode[1];
	}

	w.series_start = flashy.w[preset_select].series_start;
	w.series_end = flashy.w[preset_select].series_end;
80002250:	e0 68 0b 0c 	mov	r8,2828
80002254:	ee c7 f0 c0 	sub	r7,r7,-3904
		w.wp[i1].step_mode = flashy.w[preset_select].wp[i1].step_mode;
		w.wp[i1].cv_mode[0] = flashy.w[preset_select].wp[i1].cv_mode[0];
		w.wp[i1].cv_mode[1] = flashy.w[preset_select].wp[i1].cv_mode[1];
	}

	w.series_start = flashy.w[preset_select].series_start;
80002258:	f1 6a 0f 41 	st.b	r8[3905],r10
8000225c:	f0 c9 f1 40 	sub	r9,r8,-3776
	w.series_end = flashy.w[preset_select].series_end;
	for(i1=0;i1<64;i1++)
		w.series_list[i1] = flashy.w[preset_select].series_list[i1];
80002260:	09 8a       	ld.ub	r10,r4[0x0]
		w.wp[i1].cv_mode[1] = flashy.w[preset_select].wp[i1].cv_mode[1];
	}

	w.series_start = flashy.w[preset_select].series_start;
	w.series_end = flashy.w[preset_select].series_end;
	for(i1=0;i1<64;i1++)
80002262:	f1 6a 0f 40 	st.b	r8[3904],r10
		w.series_list[i1] = flashy.w[preset_select].series_list[i1];
}
80002266:	17 18       	ld.sh	r8,r11++
80002268:	12 b8       	st.h	r9++,r8
8000226a:	0e 39       	cp.w	r9,r7
8000226c:	cf d1       	brne	80002266 <flash_read+0x116>
8000226e:	2f fd       	sub	sp,-4
80002270:	d8 32       	popm	r0-r7,pc
80002272:	d7 03       	nop
80002274:	80 03       	ld.sh	r3,r0[0x0]
	...

80002278 <flash_unfresh>:
80002278:	d4 01       	pushm	lr
8000227a:	30 19       	mov	r9,1
8000227c:	30 4a       	mov	r10,4
8000227e:	32 2b       	mov	r11,34
80002280:	48 2c       	lddpc	r12,80002288 <flash_unfresh+0x10>
80002282:	e0 a0 20 81 	rcall	80006384 <flashc_memset8>
}

// write fresh status
void flash_unfresh(void) {
  flashc_memset8((void*)&(flashy.fresh), FIRSTRUN_KEY, 4, true);
}
80002286:	d8 02       	popm	pc
80002288:	80 03       	ld.sh	r3,r0[0x0]
	...

8000228c <flash_write>:
8000228c:	d4 21       	pushm	r4-r7,lr
8000228e:	e0 66 0b 04 	mov	r6,2820

void flash_write(void) {
	// print_dbg("\r write preset ");
	// print_dbg_ulong(preset_select);
	flashc_memcpy((void *)&flashy.w[preset_select], &w, sizeof(w), true);
80002292:	e0 68 0f 44 	mov	r8,3908
80002296:	0d 89       	ld.ub	r9,r6[0x0]
80002298:	10 9a       	mov	r10,r8
8000229a:	f2 08 02 48 	mul	r8,r9,r8
8000229e:	49 37       	lddpc	r7,800022e8 <flash_write+0x5c>
800022a0:	30 19       	mov	r9,1
800022a2:	e0 6b 0b 0c 	mov	r11,2828
800022a6:	ee cc ff b4 	sub	r12,r7,-76
800022aa:	10 0c       	add	r12,r8
	flashc_memcpy((void *)&flashy.glyph[preset_select], &glyph, sizeof(glyph), true);
800022ac:	e0 a0 20 72 	rcall	80006390 <flashc_memcpy>
800022b0:	ee c8 ff f7 	sub	r8,r7,-9
800022b4:	0d 8c       	ld.ub	r12,r6[0x0]
800022b6:	30 19       	mov	r9,1
800022b8:	f0 0c 00 3c 	add	r12,r8,r12<<0x3
800022bc:	30 8a       	mov	r10,8
800022be:	e0 6b 1a 6c 	mov	r11,6764
	flashc_memset8((void*)&(flashy.preset_select), preset_select, 1, true);
800022c2:	e0 a0 20 67 	rcall	80006390 <flashc_memcpy>
800022c6:	0d 8b       	ld.ub	r11,r6[0x0]
800022c8:	30 19       	mov	r9,1
800022ca:	ee cc ff f8 	sub	r12,r7,-8
	flashc_memset32((void*)&(flashy.edit_mode), edit_mode, 4, true);
800022ce:	12 9a       	mov	r10,r9
800022d0:	e0 a0 20 5a 	rcall	80006384 <flashc_memset8>
800022d4:	e0 68 1a 88 	mov	r8,6792
800022d8:	ee cc ff fc 	sub	r12,r7,-4
800022dc:	70 0b       	ld.w	r11,r8[0x0]
}
800022de:	30 19       	mov	r9,1
800022e0:	30 4a       	mov	r10,4
800022e2:	e0 a0 20 3f 	rcall	80006360 <flashc_memset32>
800022e6:	d8 22       	popm	r4-r7,pc
800022e8:	80 03       	ld.sh	r3,r0[0x0]
	...

800022ec <handler_SaveFlash>:
800022ec:	d4 01       	pushm	lr
800022ee:	cc ff       	rcall	8000228c <flash_write>
800022f0:	d8 02       	popm	pc
800022f2:	d7 03       	nop

800022f4 <timers_set_monome>:
800022f4:	d4 01       	pushm	lr
800022f6:	30 09       	mov	r9,0
800022f8:	fe ca d5 f8 	sub	r10,pc,-10760
800022fc:	31 4b       	mov	r11,20
800022fe:	e0 6c 05 70 	mov	r12,1392

// monome: start polling
void timers_set_monome(void) {
	// print_dbg("\r\n setting monome timers");
	timer_add(&monomePollTimer, 20, &monome_poll_timer_callback, NULL );
	timer_add(&monomeRefreshTimer, 30, &monome_refresh_timer_callback, NULL );
80002302:	e0 a0 1c 55 	rcall	80005bac <timer_add>
80002306:	30 09       	mov	r9,0
80002308:	fe ca e0 88 	sub	r10,pc,-8056
8000230c:	31 eb       	mov	r11,30
}
8000230e:	e0 6c 06 30 	mov	r12,1584
80002312:	e0 a0 1c 4d 	rcall	80005bac <timer_add>
80002316:	d8 02       	popm	pc

80002318 <handler_MonomeGridKey>:
80002318:	d4 21       	pushm	r4-r7,lr
8000231a:	20 1d       	sub	sp,4
8000231c:	fa c9 ff ff 	sub	r9,sp,-1
80002320:	fa ca ff fe 	sub	r10,sp,-2
// application grid code

static void handler_MonomeGridKey(s32 data) { 
	u8 x, y, z, index, i1, found, count;
	s16 delta;
	monome_grid_key_parse_event_data(data, &x, &y, &z);
80002324:	fa cb ff fd 	sub	r11,sp,-3
80002328:	e0 a0 17 3e 	rcall	800051a4 <monome_grid_key_parse_event_data>
	// print_dbg_hex(y); 
	// print_dbg("; z: 0x"); 
	// print_dbg_hex(z);

	//// TRACK LONG PRESSES
	index = y*16 + x;
8000232c:	1b b8       	ld.ub	r8,sp[0x3]
8000232e:	1b a9       	ld.ub	r9,sp[0x2]
80002330:	e0 6a 1a 69 	mov	r10,6761
	if(z) {
80002334:	a5 69       	lsl	r9,0x4
	// print_dbg_hex(y); 
	// print_dbg("; z: 0x"); 
	// print_dbg_hex(z);

	//// TRACK LONG PRESSES
	index = y*16 + x;
80002336:	30 0b       	mov	r11,0
80002338:	f0 09 00 09 	add	r9,r8,r9
8000233c:	1b 9c       	ld.ub	r12,sp[0x1]
8000233e:	5c 59       	castu.b	r9
	if(z) {
80002340:	e0 68 09 d4 	mov	r8,2516
80002344:	f6 0c 18 00 	cp.b	r12,r11
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// application grid code

static void handler_MonomeGridKey(s32 data) { 
80002348:	c0 61       	brne	80002354 <handler_MonomeGridKey+0x3c>
8000234a:	15 8b       	ld.ub	r11,r10[0x0]
8000234c:	30 0a       	mov	r10,0
8000234e:	f0 0b 00 0c 	add	r12,r8,r11
	// print_dbg_hex(z);

	//// TRACK LONG PRESSES
	index = y*16 + x;
	if(z) {
		held_keys[key_count] = index;
80002352:	c1 78       	rjmp	80002380 <handler_MonomeGridKey+0x68>
80002354:	15 8b       	ld.ub	r11,r10[0x0]
		key_count++;
80002356:	f0 0b 0b 09 	st.b	r8[r11],r9
8000235a:	2f fb       	sub	r11,-1
		key_times[index] = 10;		//// THRESHOLD key hold time
8000235c:	e0 68 09 f4 	mov	r8,2548
80002360:	b4 8b       	st.b	r10[0x0],r11
80002362:	30 aa       	mov	r10,10
	} else {
		found = 0; // "found"
		for(i1 = 0; i1<key_count; i1++) {
			if(held_keys[i1] == index) 
80002364:	f0 09 0b 0a 	st.b	r8[r9],r10
80002368:	c5 d8       	rjmp	80002422 <handler_MonomeGridKey+0x10a>
8000236a:	11 8e       	ld.ub	lr,r8[0x0]
				found++;
8000236c:	f2 0e 18 00 	cp.b	lr,r9
			if(found) 
80002370:	c0 31       	brne	80002376 <handler_MonomeGridKey+0x5e>
80002372:	2f fa       	sub	r10,-1
				held_keys[i1] = held_keys[i1+1];
80002374:	5c 5a       	castu.b	r10
80002376:	58 0a       	cp.w	r10,0
80002378:	c0 30       	breq	8000237e <handler_MonomeGridKey+0x66>
		held_keys[key_count] = index;
		key_count++;
		key_times[index] = 10;		//// THRESHOLD key hold time
	} else {
		found = 0; // "found"
		for(i1 = 0; i1<key_count; i1++) {
8000237a:	11 9e       	ld.ub	lr,r8[0x1]
8000237c:	b0 8e       	st.b	r8[0x0],lr
			if(held_keys[i1] == index) 
				found++;
			if(found) 
				held_keys[i1] = held_keys[i1+1];
		}
		key_count--;
8000237e:	2f f8       	sub	r8,-1
80002380:	18 38       	cp.w	r8,r12
80002382:	cf 41       	brne	8000236a <handler_MonomeGridKey+0x52>

		// FAST PRESS
		if(key_times[index] > 0) {
80002384:	e0 68 1a 69 	mov	r8,6761
80002388:	20 1b       	sub	r11,1
8000238a:	b0 8b       	st.b	r8[0x0],r11
8000238c:	e0 68 09 f4 	mov	r8,2548
80002390:	f0 09 07 0a 	ld.ub	r10,r8[r9]
			if(edit_mode != mSeries && preset_mode == 0) {
80002394:	30 08       	mov	r8,0
80002396:	f0 0a 18 00 	cp.b	r10,r8
8000239a:	c4 40       	breq	80002422 <handler_MonomeGridKey+0x10a>
8000239c:	e0 6a 1a 88 	mov	r10,6792
800023a0:	74 0a       	ld.w	r10,r10[0x0]
800023a2:	58 2a       	cp.w	r10,2
				if(index/16 == 2) {
800023a4:	c1 d0       	breq	800023de <handler_MonomeGridKey+0xc6>
800023a6:	e0 6a 1a 50 	mov	r10,6736
800023aa:	15 8a       	ld.ub	r10,r10[0x0]
800023ac:	f0 0a 18 00 	cp.b	r10,r8
800023b0:	c1 71       	brne	800023de <handler_MonomeGridKey+0xc6>
					i1 = index % 16;
					if(key_alt)
800023b2:	f2 cb 00 20 	sub	r11,r9,32

		// FAST PRESS
		if(key_times[index] > 0) {
			if(edit_mode != mSeries && preset_mode == 0) {
				if(index/16 == 2) {
					i1 = index % 16;
800023b6:	30 f8       	mov	r8,15
					if(key_alt)
800023b8:	f0 0b 18 00 	cp.b	r11,r8
800023bc:	e0 8b 00 33 	brhi	80002422 <handler_MonomeGridKey+0x10a>
800023c0:	e0 68 1a 5d 	mov	r8,6749
						next_pattern = i1;
					else {
						pattern = i1;
800023c4:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
800023c8:	11 8b       	ld.ub	r11,r8[0x0]
						next_pattern = i1;
					}
				}
			}
			// PRESET MODE FAST PRESS DETECT
			else if(preset_mode == 1) {
800023ca:	e0 68 1a 84 	mov	r8,6788
800023ce:	f4 0b 18 00 	cp.b	r11,r10
800023d2:	c0 41       	brne	800023da <handler_MonomeGridKey+0xc2>
800023d4:	b0 89       	st.b	r8[0x0],r9
				if(x == 0 && y != preset_select) {
800023d6:	e0 68 1a 5b 	mov	r8,6747
800023da:	b0 89       	st.b	r8[0x0],r9
800023dc:	c2 38       	rjmp	80002422 <handler_MonomeGridKey+0x10a>
800023de:	e0 67 1a 50 	mov	r7,6736
800023e2:	30 18       	mov	r8,1
800023e4:	0f 89       	ld.ub	r9,r7[0x0]
800023e6:	f0 09 18 00 	cp.b	r9,r8
					preset_select = y;
800023ea:	c1 c1       	brne	80002422 <handler_MonomeGridKey+0x10a>
800023ec:	1b b6       	ld.ub	r6,sp[0x3]
800023ee:	58 06       	cp.w	r6,0
800023f0:	c1 91       	brne	80002422 <handler_MonomeGridKey+0x10a>
800023f2:	e0 69 0b 04 	mov	r9,2820
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// application grid code

static void handler_MonomeGridKey(s32 data) { 
800023f6:	1b a8       	ld.ub	r8,sp[0x2]
800023f8:	13 8a       	ld.ub	r10,r9[0x0]
			// PRESET MODE FAST PRESS DETECT
			else if(preset_mode == 1) {
				if(x == 0 && y != preset_select) {
					preset_select = y;
					for(i1=0;i1<8;i1++)
						glyph[i1] = flashy.glyph[preset_select][i1];
800023fa:	f0 0a 18 00 	cp.b	r10,r8
			}
			// PRESET MODE FAST PRESS DETECT
			else if(preset_mode == 1) {
				if(x == 0 && y != preset_select) {
					preset_select = y;
					for(i1=0;i1<8;i1++)
800023fe:	c1 00       	breq	8000241e <handler_MonomeGridKey+0x106>
80002400:	b2 88       	st.b	r9[0x0],r8
80002402:	2f f8       	sub	r8,-1
						glyph[i1] = flashy.glyph[preset_select][i1];
				}
 				else if(x==0 && y == preset_select) {
					flash_read();
80002404:	49 b9       	lddpc	r9,80002470 <handler_MonomeGridKey+0x158>
80002406:	f2 08 00 39 	add	r9,r9,r8<<0x3
			// print_dbg_ulong(key_times[index]);
		}
	}

	// PRESET SCREEN
	if(preset_mode) {
8000240a:	e0 68 1a 6c 	mov	r8,6764
8000240e:	2f f9       	sub	r9,-1
80002410:	f0 ca ff f8 	sub	r10,r8,-8
80002414:	13 3b       	ld.ub	r11,r9++
		// glyph magic
		if(z && x>7) {
80002416:	10 cb       	st.b	r8++,r11
80002418:	14 38       	cp.w	r8,r10
8000241a:	cf d1       	brne	80002414 <handler_MonomeGridKey+0xfc>
8000241c:	c0 38       	rjmp	80002422 <handler_MonomeGridKey+0x10a>
8000241e:	c9 9e       	rcall	80002150 <flash_read>
80002420:	ae 86       	st.b	r7[0x0],r6
80002422:	e0 68 1a 50 	mov	r8,6736
80002426:	11 87       	ld.ub	r7,r8[0x0]
80002428:	30 08       	mov	r8,0
8000242a:	f0 07 18 00 	cp.b	r7,r8
			glyph[y] ^= 1<<(x-8);
8000242e:	c2 30       	breq	80002474 <handler_MonomeGridKey+0x15c>
80002430:	1b 99       	ld.ub	r9,sp[0x1]
			monomeFrameDirty++;	
80002432:	f0 09 18 00 	cp.b	r9,r8

	// PRESET SCREEN
	if(preset_mode) {
		// glyph magic
		if(z && x>7) {
			glyph[y] ^= 1<<(x-8);
80002436:	e0 80 07 45 	breq	800032c0 <handler_MonomeGridKey+0xfa8>
8000243a:	1b b8       	ld.ub	r8,sp[0x3]
8000243c:	30 79       	mov	r9,7
			monomeFrameDirty++;	
8000243e:	f2 08 18 00 	cp.b	r8,r9

	// PRESET SCREEN
	if(preset_mode) {
		// glyph magic
		if(z && x>7) {
			glyph[y] ^= 1<<(x-8);
80002442:	e0 88 07 3f 	brls	800032c0 <handler_MonomeGridKey+0xfa8>
80002446:	e0 6a 07 69 	mov	r10,1897
8000244a:	f0 cc 00 08 	sub	r12,r8,8
8000244e:	15 8e       	ld.ub	lr,r10[0x0]
80002450:	1b a8       	ld.ub	r8,sp[0x2]
80002452:	e0 69 1a 6c 	mov	r9,6764
80002456:	2f fe       	sub	lr,-1
80002458:	f2 08 07 0b 	ld.ub	r11,r9[r8]
8000245c:	b4 8e       	st.b	r10[0x0],lr
8000245e:	30 1a       	mov	r10,1
80002460:	f4 0c 09 4a 	lsl	r10,r10,r12
80002464:	16 5a       	eor	r10,r11
80002466:	f2 08 0b 0a 	st.b	r9[r8],r10
8000246a:	e0 8f 07 2b 	bral	800032c0 <handler_MonomeGridKey+0xfa8>
8000246e:	d7 03       	nop
80002470:	80 03       	ld.sh	r3,r0[0x0]
80002472:	00 00       	add	r0,r0
80002474:	1b a8       	ld.ub	r8,sp[0x2]
80002476:	30 1c       	mov	r12,1
80002478:	f8 08 18 00 	cp.b	r8,r12
8000247c:	e0 81 01 36 	brne	800026e8 <handler_MonomeGridKey+0x3d0>
80002480:	e0 6e 1a 91 	mov	lr,6801
80002484:	1b 9b       	ld.ub	r11,sp[0x1]
80002486:	1d 89       	ld.ub	r9,lr[0x0]

		// OPTIMIZE: order this if-branch by common priority/use
		//// SORT

		// cut position
		if(y == 1) {
80002488:	f2 0b 00 19 	add	r9,r9,r11<<0x1
8000248c:	20 19       	sub	r9,1
8000248e:	ee 09 18 00 	cp.b	r9,r7
80002492:	ee 09 17 50 	movlt	r9,r7
			keycount_pos += z * 2 - 1;
80002496:	bc 89       	st.b	lr[0x0],r9
80002498:	5c 59       	castu.b	r9
8000249a:	f8 09 18 00 	cp.b	r9,r12
8000249e:	e0 81 00 d8 	brne	8000264e <handler_MonomeGridKey+0x336>
			if(keycount_pos < 0) keycount_pos = 0;
800024a2:	ee 0b 18 00 	cp.b	r11,r7
800024a6:	e0 80 07 0d 	breq	800032c0 <handler_MonomeGridKey+0xfa8>
			// print_dbg("\r\nkeycount: "); 
			// print_dbg_ulong(keycount_pos);

			if(keycount_pos == 1 && z) {
800024aa:	e0 6a 1a 5d 	mov	r10,6749
800024ae:	15 8a       	ld.ub	r10,r10[0x0]
800024b0:	58 0a       	cp.w	r10,0
800024b2:	c1 21       	brne	800024d6 <handler_MonomeGridKey+0x1be>
800024b4:	e0 6a 1a 82 	mov	r10,6786
800024b8:	e0 69 07 69 	mov	r9,1897
				if(key_alt == 0) {
800024bc:	15 8b       	ld.ub	r11,r10[0x0]
800024be:	18 0b       	add	r11,r12
800024c0:	b4 8b       	st.b	r10[0x0],r11
800024c2:	13 8a       	ld.ub	r10,r9[0x0]
					next_pos = x;
					cut_pos++;
800024c4:	18 0a       	add	r10,r12
					monomeFrameDirty++;
800024c6:	b2 8a       	st.b	r9[0x0],r10
			// print_dbg_ulong(keycount_pos);

			if(keycount_pos == 1 && z) {
				if(key_alt == 0) {
					next_pos = x;
					cut_pos++;
800024c8:	e0 69 1a 53 	mov	r9,6739
800024cc:	1b b8       	ld.ub	r8,sp[0x3]
					monomeFrameDirty++;
800024ce:	b2 88       	st.b	r9[0x0],r8
800024d0:	e0 69 1a 92 	mov	r9,6802
			// print_dbg("\r\nkeycount: "); 
			// print_dbg_ulong(keycount_pos);

			if(keycount_pos == 1 && z) {
				if(key_alt == 0) {
					next_pos = x;
800024d4:	c5 89       	rjmp	80002784 <handler_MonomeGridKey+0x46c>
800024d6:	12 9b       	mov	r11,r9
800024d8:	f0 0a 18 00 	cp.b	r10,r8
					cut_pos++;
					monomeFrameDirty++;
					keyfirst_pos = x;
800024dc:	e0 81 06 f2 	brne	800032c0 <handler_MonomeGridKey+0xfa8>
				}
				else if(key_alt == 1) {
800024e0:	e0 68 0b 07 	mov	r8,2823
800024e4:	11 89       	ld.ub	r9,r8[0x0]
800024e6:	1b b8       	ld.ub	r8,sp[0x3]
					if(x == LENGTH)
800024e8:	f2 08 18 00 	cp.b	r8,r9
800024ec:	c1 01       	brne	8000250c <handler_MonomeGridKey+0x1f4>
800024ee:	e0 68 1a 5b 	mov	r8,6747
800024f2:	11 89       	ld.ub	r9,r8[0x0]
						w.wp[pattern].step_mode = mForward;
800024f4:	e0 68 00 ec 	mov	r8,236
800024f8:	f2 08 02 48 	mul	r8,r9,r8
800024fc:	e0 69 0b 0c 	mov	r9,2828
80002500:	f2 08 00 08 	add	r8,r9,r8
80002504:	30 09       	mov	r9,0
80002506:	2f 88       	sub	r8,-8
80002508:	e0 8f 01 ae 	bral	80002864 <handler_MonomeGridKey+0x54c>
8000250c:	f2 ca 00 01 	sub	r10,r9,1
					else if(x == LENGTH-1)
80002510:	14 38       	cp.w	r8,r10
80002512:	c0 e1       	brne	8000252e <handler_MonomeGridKey+0x216>
80002514:	e0 68 1a 5b 	mov	r8,6747
						w.wp[pattern].step_mode = mReverse;
80002518:	11 89       	ld.ub	r9,r8[0x0]
8000251a:	e0 68 00 ec 	mov	r8,236
8000251e:	f2 08 02 48 	mul	r8,r9,r8
80002522:	e0 69 0b 0c 	mov	r9,2828
80002526:	f2 08 00 08 	add	r8,r9,r8
8000252a:	30 19       	mov	r9,1
					else if(x == LENGTH-2)
8000252c:	c1 18       	rjmp	8000254e <handler_MonomeGridKey+0x236>
8000252e:	f2 ca 00 02 	sub	r10,r9,2
80002532:	14 38       	cp.w	r8,r10
						w.wp[pattern].step_mode = mDrunk;
80002534:	c1 01       	brne	80002554 <handler_MonomeGridKey+0x23c>
80002536:	e0 68 1a 5b 	mov	r8,6747
8000253a:	11 89       	ld.ub	r9,r8[0x0]
8000253c:	e0 68 00 ec 	mov	r8,236
80002540:	f2 08 02 48 	mul	r8,r9,r8
80002544:	e0 69 0b 0c 	mov	r9,2828
80002548:	f2 08 00 08 	add	r8,r9,r8
8000254c:	30 29       	mov	r9,2
					else if(x == LENGTH-3)
8000254e:	91 29       	st.w	r8[0x8],r9
80002550:	e0 8f 06 b8 	bral	800032c0 <handler_MonomeGridKey+0xfa8>
80002554:	f2 ca 00 03 	sub	r10,r9,3
						w.wp[pattern].step_mode = mRandom;
80002558:	14 38       	cp.w	r8,r10
8000255a:	c0 e1       	brne	80002576 <handler_MonomeGridKey+0x25e>
8000255c:	e0 68 1a 5b 	mov	r8,6747
80002560:	11 89       	ld.ub	r9,r8[0x0]
80002562:	e0 68 00 ec 	mov	r8,236
80002566:	f2 08 02 48 	mul	r8,r9,r8
8000256a:	e0 69 0b 0c 	mov	r9,2828
					// FIXME
					else if(x == 0) {
8000256e:	f2 08 00 08 	add	r8,r9,r8
						if(pos == w.wp[pattern].loop_start)
80002572:	30 39       	mov	r9,3
80002574:	ce db       	rjmp	8000254e <handler_MonomeGridKey+0x236>
80002576:	58 08       	cp.w	r8,0
80002578:	c1 e1       	brne	800025b4 <handler_MonomeGridKey+0x29c>
8000257a:	e0 68 0b 06 	mov	r8,2822
8000257e:	11 8a       	ld.ub	r10,r8[0x0]
80002580:	e0 68 1a 5b 	mov	r8,6747
80002584:	11 8b       	ld.ub	r11,r8[0x0]
80002586:	e0 68 00 ec 	mov	r8,236
8000258a:	f6 08 02 48 	mul	r8,r11,r8
8000258e:	e0 6b 0b 0c 	mov	r11,2828
							next_pos = w.wp[pattern].loop_end;
80002592:	f9 da b0 08 	bfexts	r12,r10,0x0,0x8
						else if(pos == 0)
80002596:	f6 08 00 08 	add	r8,r11,r8
							next_pos = LENGTH;
						else next_pos--;
8000259a:	11 8b       	ld.ub	r11,r8[0x0]
8000259c:	16 3c       	cp.w	r12,r11
8000259e:	c0 31       	brne	800025a4 <handler_MonomeGridKey+0x28c>
800025a0:	11 99       	ld.ub	r9,r8[0x1]
800025a2:	c1 f8       	rjmp	800025e0 <handler_MonomeGridKey+0x2c8>
800025a4:	e0 68 1a 53 	mov	r8,6739
800025a8:	58 0a       	cp.w	r10,0
800025aa:	c2 60       	breq	800025f6 <handler_MonomeGridKey+0x2de>
800025ac:	11 89       	ld.ub	r9,r8[0x0]
800025ae:	20 19       	sub	r9,1
800025b0:	c2 38       	rjmp	800025f6 <handler_MonomeGridKey+0x2de>
800025b2:	d7 03       	nop
800025b4:	f6 08 18 00 	cp.b	r8,r11
800025b8:	c2 a1       	brne	8000260c <handler_MonomeGridKey+0x2f4>
800025ba:	e0 68 0b 06 	mov	r8,2822
800025be:	f1 2a 00 00 	ld.sb	r10,r8[0]
800025c2:	e0 68 1a 5b 	mov	r8,6747
800025c6:	11 8b       	ld.ub	r11,r8[0x0]
						cut_pos = 1;
						monomeFrameDirty++;
					}
					// FIXME
					else if(x == 1) {
800025c8:	e0 68 00 ec 	mov	r8,236
800025cc:	f6 08 02 48 	mul	r8,r11,r8
						if(pos == w.wp[pattern].loop_end) next_pos = w.wp[pattern].loop_start;
800025d0:	e0 6b 0b 0c 	mov	r11,2828
800025d4:	f6 08 00 08 	add	r8,r11,r8
800025d8:	11 9b       	ld.ub	r11,r8[0x1]
800025da:	16 3a       	cp.w	r10,r11
800025dc:	c0 51       	brne	800025e6 <handler_MonomeGridKey+0x2ce>
800025de:	11 89       	ld.ub	r9,r8[0x0]
800025e0:	e0 68 1a 53 	mov	r8,6739
800025e4:	c0 98       	rjmp	800025f6 <handler_MonomeGridKey+0x2de>
800025e6:	e0 68 1a 53 	mov	r8,6739
800025ea:	12 3a       	cp.w	r10,r9
800025ec:	c0 31       	brne	800025f2 <handler_MonomeGridKey+0x2da>
800025ee:	30 09       	mov	r9,0
800025f0:	c0 38       	rjmp	800025f6 <handler_MonomeGridKey+0x2de>
800025f2:	11 89       	ld.ub	r9,r8[0x0]
						else if(pos == LENGTH) next_pos = 0;
800025f4:	2f f9       	sub	r9,-1
800025f6:	b0 89       	st.b	r8[0x0],r9
800025f8:	e0 68 07 69 	mov	r8,1897
						else next_pos++;
800025fc:	11 89       	ld.ub	r9,r8[0x0]
800025fe:	2f f9       	sub	r9,-1
80002600:	b0 89       	st.b	r8[0x0],r9
						cut_pos = 1;
						monomeFrameDirty++;
80002602:	30 19       	mov	r9,1
80002604:	e0 68 1a 82 	mov	r8,6786
80002608:	e0 8f 06 5b 	bral	800032be <handler_MonomeGridKey+0xfa6>
					// FIXME
					else if(x == 1) {
						if(pos == w.wp[pattern].loop_end) next_pos = w.wp[pattern].loop_start;
						else if(pos == LENGTH) next_pos = 0;
						else next_pos++;
						cut_pos = 1;
8000260c:	30 29       	mov	r9,2
8000260e:	f2 08 18 00 	cp.b	r8,r9
						monomeFrameDirty++;
					}
					else if(x == 2 ) {
80002612:	e0 81 06 57 	brne	800032c0 <handler_MonomeGridKey+0xfa8>
80002616:	e0 a0 1b 09 	rcall	80005c28 <rnd>
8000261a:	e0 69 07 69 	mov	r9,1897
						next_pos = (rnd() % (w.wp[pattern].loop_len + 1)) + w.wp[pattern].loop_start;
8000261e:	e0 68 1a 5b 	mov	r8,6747
80002622:	11 8a       	ld.ub	r10,r8[0x0]
80002624:	13 88       	ld.ub	r8,r9[0x0]
						cut_pos = 1;
						monomeFrameDirty++;					
80002626:	2f f8       	sub	r8,-1
80002628:	b2 88       	st.b	r9[0x0],r8
8000262a:	e0 69 0b 0c 	mov	r9,2828
						else next_pos++;
						cut_pos = 1;
						monomeFrameDirty++;
					}
					else if(x == 2 ) {
						next_pos = (rnd() % (w.wp[pattern].loop_len + 1)) + w.wp[pattern].loop_start;
8000262e:	e0 68 00 ec 	mov	r8,236
80002632:	f4 08 02 48 	mul	r8,r10,r8
80002636:	f2 08 00 08 	add	r8,r9,r8
8000263a:	11 89       	ld.ub	r9,r8[0x0]
8000263c:	11 a8       	ld.ub	r8,r8[0x2]
8000263e:	2f f8       	sub	r8,-1
80002640:	f8 08 0d 0a 	divu	r10,r12,r8
80002644:	e0 6a 1a 53 	mov	r10,6739
80002648:	16 09       	add	r9,r11
8000264a:	b4 89       	st.b	r10[0x0],r9
						cut_pos = 1;
						monomeFrameDirty++;					
					}
				}
			}
			else if(keycount_pos == 2 && z) {
8000264c:	cd bb       	rjmp	80002602 <handler_MonomeGridKey+0x2ea>
8000264e:	30 28       	mov	r8,2
80002650:	f0 09 18 00 	cp.b	r9,r8
80002654:	e0 81 06 36 	brne	800032c0 <handler_MonomeGridKey+0xfa8>
80002658:	ee 0b 18 00 	cp.b	r11,r7
8000265c:	e0 80 06 32 	breq	800032c0 <handler_MonomeGridKey+0xfa8>
				w.wp[pattern].loop_start = keyfirst_pos;
				w.wp[pattern].loop_end = x;
	 			monomeFrameDirty++;
80002660:	e0 68 07 69 	mov	r8,1897
80002664:	11 8a       	ld.ub	r10,r8[0x0]
						monomeFrameDirty++;					
					}
				}
			}
			else if(keycount_pos == 2 && z) {
				w.wp[pattern].loop_start = keyfirst_pos;
80002666:	2f fa       	sub	r10,-1
80002668:	b0 8a       	st.b	r8[0x0],r10
8000266a:	e0 68 1a 5b 	mov	r8,6747
8000266e:	e0 6a 0b 0c 	mov	r10,2828
80002672:	11 8b       	ld.ub	r11,r8[0x0]
80002674:	e0 68 00 ec 	mov	r8,236
80002678:	f6 08 02 48 	mul	r8,r11,r8
8000267c:	f4 08 00 08 	add	r8,r10,r8
				w.wp[pattern].loop_end = x;
80002680:	e0 6a 1a 92 	mov	r10,6802
	 			monomeFrameDirty++;
	 			if(w.wp[pattern].loop_start > w.wp[pattern].loop_end) w.wp[pattern].loop_dir = 2;
80002684:	15 8a       	ld.ub	r10,r10[0x0]
80002686:	b0 8a       	st.b	r8[0x0],r10
80002688:	1b ba       	ld.ub	r10,sp[0x3]
8000268a:	b0 9a       	st.b	r8[0x1],r10
8000268c:	11 8a       	ld.ub	r10,r8[0x0]
8000268e:	11 9c       	ld.ub	r12,r8[0x1]
80002690:	f8 0a 18 00 	cp.b	r10,r12
	 			else if(w.wp[pattern].loop_start == 0 && w.wp[pattern].loop_end == LENGTH) w.wp[pattern].loop_dir = 0;
80002694:	e0 88 00 04 	brls	8000269c <handler_MonomeGridKey+0x384>
80002698:	b0 b9       	st.b	r8[0x3],r9
8000269a:	c1 48       	rjmp	800026c2 <handler_MonomeGridKey+0x3aa>
8000269c:	58 0a       	cp.w	r10,0
8000269e:	c0 91       	brne	800026b0 <handler_MonomeGridKey+0x398>
800026a0:	e0 69 0b 07 	mov	r9,2823
	 			else w.wp[pattern].loop_dir = 1;
800026a4:	13 89       	ld.ub	r9,r9[0x0]
800026a6:	f8 09 18 00 	cp.b	r9,r12
800026aa:	c0 31       	brne	800026b0 <handler_MonomeGridKey+0x398>
800026ac:	b0 ba       	st.b	r8[0x3],r10
800026ae:	c0 a8       	rjmp	800026c2 <handler_MonomeGridKey+0x3aa>
800026b0:	e0 68 00 ec 	mov	r8,236

	 			w.wp[pattern].loop_len = w.wp[pattern].loop_end - w.wp[pattern].loop_start;
800026b4:	b1 3b       	mul	r11,r8
800026b6:	e0 68 0b 0c 	mov	r8,2828
800026ba:	f0 0b 00 0b 	add	r11,r8,r11
800026be:	30 18       	mov	r8,1
800026c0:	b6 b8       	st.b	r11[0x3],r8
800026c2:	e0 68 1a 5b 	mov	r8,6747
800026c6:	11 89       	ld.ub	r9,r8[0x0]
800026c8:	e0 68 00 ec 	mov	r8,236
800026cc:	f2 08 02 48 	mul	r8,r9,r8
800026d0:	e0 69 0b 0c 	mov	r9,2828
800026d4:	f2 08 00 08 	add	r8,r9,r8
800026d8:	11 9a       	ld.ub	r10,r8[0x1]
800026da:	11 89       	ld.ub	r9,r8[0x0]
800026dc:	f4 09 01 09 	sub	r9,r10,r9
800026e0:	b0 a9       	st.b	r8[0x2],r9
800026e2:	e0 8f 05 ef 	bral	800032c0 <handler_MonomeGridKey+0xfa8>
800026e6:	d7 03       	nop
800026e8:	58 08       	cp.w	r8,0
800026ea:	e0 81 00 c3 	brne	80002870 <handler_MonomeGridKey+0x558>
800026ee:	e0 69 0b 07 	mov	r9,2823
800026f2:	13 8b       	ld.ub	r11,r9[0x0]
800026f4:	1b b9       	ld.ub	r9,sp[0x3]
800026f6:	f6 09 18 00 	cp.b	r9,r11
				// print_dbg_ulong(loop_len);
			}
		}

		// top row
		else if(y == 0) {
800026fa:	c1 01       	brne	8000271a <handler_MonomeGridKey+0x402>
800026fc:	1b 99       	ld.ub	r9,sp[0x1]
			if(x == LENGTH) {
800026fe:	e0 6b 1a 5d 	mov	r11,6749
80002702:	b6 89       	st.b	r11[0x0],r9
80002704:	ee 09 18 00 	cp.b	r9,r7
80002708:	e0 81 05 d7 	brne	800032b6 <handler_MonomeGridKey+0xf9e>
				key_alt = z;
8000270c:	e0 6a 1a 78 	mov	r10,6776
				if(z == 0) {
80002710:	b4 88       	st.b	r10[0x0],r8
80002712:	e0 68 1a 54 	mov	r8,6740
80002716:	e0 8f 04 b4 	bral	8000307e <handler_MonomeGridKey+0xd66>
					param_accept = 0;
8000271a:	30 3c       	mov	r12,3
					live_in = 0;
8000271c:	f8 09 18 00 	cp.b	r9,r12
80002720:	e0 8b 00 35 	brhi	8000278a <handler_MonomeGridKey+0x472>
				}
				monomeFrameDirty++;
			}
			else if(x < 4 && z) {
80002724:	1b 9c       	ld.ub	r12,sp[0x1]
80002726:	ee 0c 18 00 	cp.b	r12,r7
8000272a:	c3 00       	breq	8000278a <handler_MonomeGridKey+0x472>
8000272c:	e0 6b 1a 5d 	mov	r11,6749
80002730:	17 8b       	ld.ub	r11,r11[0x0]
80002732:	ee 0b 18 00 	cp.b	r11,r7
				if(key_alt) w.wp[pattern].steps[pos] |=  1 << x;
80002736:	c1 90       	breq	80002768 <handler_MonomeGridKey+0x450>
80002738:	e0 68 1a 5b 	mov	r8,6747
8000273c:	11 8b       	ld.ub	r11,r8[0x0]
8000273e:	e0 68 0b 06 	mov	r8,2822
80002742:	f1 2a 00 00 	ld.sb	r10,r8[0]
80002746:	e0 68 00 ec 	mov	r8,236
8000274a:	f6 08 02 48 	mul	r8,r11,r8
8000274e:	e0 6b 0b 0c 	mov	r11,2828
80002752:	f6 08 00 08 	add	r8,r11,r8
80002756:	14 08       	add	r8,r10
80002758:	30 1a       	mov	r10,1
8000275a:	2f 48       	sub	r8,-12
8000275c:	f4 09 09 49 	lsl	r9,r10,r9
80002760:	11 8a       	ld.ub	r10,r8[0x0]
80002762:	14 49       	or	r9,r10
80002764:	b0 89       	st.b	r8[0x0],r9
80002766:	c0 48       	rjmp	8000276e <handler_MonomeGridKey+0x456>
				else edit_mode = mTrig;
80002768:	e0 69 1a 88 	mov	r9,6792
				edit_prob = 0;
				param_accept = 0;
				monomeFrameDirty++;
8000276c:	93 08       	st.w	r9[0x0],r8
				monomeFrameDirty++;
			}
			else if(x < 4 && z) {
				if(key_alt) w.wp[pattern].steps[pos] |=  1 << x;
				else edit_mode = mTrig;
				edit_prob = 0;
8000276e:	e0 69 07 69 	mov	r9,1897
80002772:	e0 6a 1a 81 	mov	r10,6785
				param_accept = 0;
				monomeFrameDirty++;
80002776:	30 08       	mov	r8,0
80002778:	b4 88       	st.b	r10[0x0],r8
			}
			else if(x < 4 && z) {
				if(key_alt) w.wp[pattern].steps[pos] |=  1 << x;
				else edit_mode = mTrig;
				edit_prob = 0;
				param_accept = 0;
8000277a:	13 8a       	ld.ub	r10,r9[0x0]
8000277c:	2f fa       	sub	r10,-1
					param_accept = 0;
					live_in = 0;
				}
				monomeFrameDirty++;
			}
			else if(x < 4 && z) {
8000277e:	b2 8a       	st.b	r9[0x0],r10
80002780:	e0 69 1a 78 	mov	r9,6776
				else edit_mode = mTrig;
				edit_prob = 0;
				param_accept = 0;
				monomeFrameDirty++;
			}
			else if(SIZE==16 && x > 3 && x < 12 && z) {
80002784:	b2 88       	st.b	r9[0x0],r8
80002786:	e0 8f 05 9d 	bral	800032c0 <handler_MonomeGridKey+0xfa8>
8000278a:	e0 68 0a f4 	mov	r8,2804
8000278e:	31 0a       	mov	r10,16
80002790:	11 88       	ld.ub	r8,r8[0x0]
80002792:	f4 08 18 00 	cp.b	r8,r10
80002796:	c1 91       	brne	800027c8 <handler_MonomeGridKey+0x4b0>
80002798:	30 38       	mov	r8,3
8000279a:	f0 09 18 00 	cp.b	r9,r8
8000279e:	e0 88 00 4d 	brls	80002838 <handler_MonomeGridKey+0x520>
800027a2:	30 b8       	mov	r8,11
800027a4:	f0 09 18 00 	cp.b	r9,r8
800027a8:	e0 8b 00 48 	brhi	80002838 <handler_MonomeGridKey+0x520>
				param_accept = 0;
800027ac:	30 08       	mov	r8,0
				edit_cv_ch = (x-4)/4;
800027ae:	1b 9a       	ld.ub	r10,sp[0x1]
				edit_prob = 0;
				param_accept = 0;
				monomeFrameDirty++;
			}
			else if(SIZE==16 && x > 3 && x < 12 && z) {
				param_accept = 0;
800027b0:	f0 0a 18 00 	cp.b	r10,r8
				edit_cv_ch = (x-4)/4;
800027b4:	c4 20       	breq	80002838 <handler_MonomeGridKey+0x520>
800027b6:	e0 69 1a 78 	mov	r9,6776
800027ba:	1b bb       	ld.ub	r11,sp[0x3]
				if(key_alt)
					w.wp[pattern].cv_mode[edit_cv_ch] ^= 1;

				monomeFrameDirty++;
			}
			else if(SIZE==8 && (x == 4 || x == 5) && z) {
800027bc:	b2 88       	st.b	r9[0x0],r8
800027be:	20 4b       	sub	r11,4
800027c0:	30 49       	mov	r9,4
800027c2:	f6 09 0c 0a 	divs	r10,r11,r9
800027c6:	c1 68       	rjmp	800027f2 <handler_MonomeGridKey+0x4da>
800027c8:	30 8a       	mov	r10,8
800027ca:	f4 08 18 00 	cp.b	r8,r10
800027ce:	c3 51       	brne	80002838 <handler_MonomeGridKey+0x520>
800027d0:	f2 ca 00 04 	sub	r10,r9,4
800027d4:	30 18       	mov	r8,1
800027d6:	f0 0a 18 00 	cp.b	r10,r8
800027da:	e0 8b 00 2f 	brhi	80002838 <handler_MonomeGridKey+0x520>
				param_accept = 0;
				edit_cv_ch = x-4;
800027de:	30 08       	mov	r8,0
					w.wp[pattern].cv_mode[edit_cv_ch] ^= 1;

				monomeFrameDirty++;
			}
			else if(SIZE==8 && (x == 4 || x == 5) && z) {
				param_accept = 0;
800027e0:	1b 9a       	ld.ub	r10,sp[0x1]
				edit_cv_ch = x-4;
800027e2:	f0 0a 18 00 	cp.b	r10,r8
800027e6:	c2 90       	breq	80002838 <handler_MonomeGridKey+0x520>
800027e8:	e0 69 1a 78 	mov	r9,6776
				edit_mode = mMap;
800027ec:	1b ba       	ld.ub	r10,sp[0x3]
800027ee:	b2 88       	st.b	r9[0x0],r8
				edit_prob = 0;
800027f0:	20 4a       	sub	r10,4
800027f2:	e0 69 1a 77 	mov	r9,6775

				if(key_alt)
800027f6:	5c 5a       	castu.b	r10
800027f8:	b2 8a       	st.b	r9[0x0],r10
800027fa:	e0 69 1a 88 	mov	r9,6792
800027fe:	30 1b       	mov	r11,1
					w.wp[pattern].cv_mode[edit_cv_ch] ^= 1;
80002800:	93 0b       	st.w	r9[0x0],r11
80002802:	e0 69 1a 81 	mov	r9,6785
80002806:	b2 88       	st.b	r9[0x0],r8
80002808:	e0 69 1a 5d 	mov	r9,6749
8000280c:	13 89       	ld.ub	r9,r9[0x0]
8000280e:	f0 09 18 00 	cp.b	r9,r8
80002812:	e0 80 05 52 	breq	800032b6 <handler_MonomeGridKey+0xf9e>
80002816:	e0 68 1a 5b 	mov	r8,6747
8000281a:	11 89       	ld.ub	r9,r8[0x0]
8000281c:	e0 68 00 ec 	mov	r8,236
80002820:	b1 39       	mul	r9,r8
80002822:	e0 68 0b 0c 	mov	r8,2828
80002826:	f0 09 00 09 	add	r9,r8,r9
8000282a:	14 09       	add	r9,r10
8000282c:	2f c9       	sub	r9,-4
8000282e:	13 a8       	ld.ub	r8,r9[0x2]
80002830:	16 58       	eor	r8,r11
80002832:	b2 a8       	st.b	r9[0x2],r8
80002834:	e0 8f 05 41 	bral	800032b6 <handler_MonomeGridKey+0xf9e>
80002838:	20 1b       	sub	r11,1
8000283a:	16 39       	cp.w	r9,r11
8000283c:	e0 81 05 42 	brne	800032c0 <handler_MonomeGridKey+0xfa8>
80002840:	1b 98       	ld.ub	r8,sp[0x1]
80002842:	58 08       	cp.w	r8,0
80002844:	c1 30       	breq	8000286a <handler_MonomeGridKey+0x552>
80002846:	e0 69 1a 5d 	mov	r9,6749
8000284a:	13 8a       	ld.ub	r10,r9[0x0]
8000284c:	30 09       	mov	r9,0
8000284e:	f2 0a 18 00 	cp.b	r10,r9

				monomeFrameDirty++;
			}
			else if(x == LENGTH-1 && z && key_alt) {
80002852:	c0 c0       	breq	8000286a <handler_MonomeGridKey+0x552>
80002854:	e0 68 07 69 	mov	r8,1897
80002858:	11 89       	ld.ub	r9,r8[0x0]
8000285a:	2f f9       	sub	r9,-1
8000285c:	b0 89       	st.b	r8[0x0],r9
8000285e:	30 29       	mov	r9,2
80002860:	e0 68 1a 88 	mov	r8,6792
80002864:	91 09       	st.w	r8[0x0],r9
80002866:	e0 8f 05 2d 	bral	800032c0 <handler_MonomeGridKey+0xfa8>
				edit_mode = mSeries;
				monomeFrameDirty++;
8000286a:	e0 69 1a 75 	mov	r9,6773
8000286e:	c8 bb       	rjmp	80002784 <handler_MonomeGridKey+0x46c>
80002870:	e0 69 1a 88 	mov	r9,6792
					w.wp[pattern].cv_mode[edit_cv_ch] ^= 1;

				monomeFrameDirty++;
			}
			else if(x == LENGTH-1 && z && key_alt) {
				edit_mode = mSeries;
80002874:	72 0b       	ld.w	r11,r9[0x0]
80002876:	58 0b       	cp.w	r11,0
				if(key_alt)
					w.wp[pattern].cv_mode[edit_cv_ch] ^= 1;

				monomeFrameDirty++;
			}
			else if(x == LENGTH-1 && z && key_alt) {
80002878:	e0 81 00 af 	brne	800029d6 <handler_MonomeGridKey+0x6be>
				edit_mode = mSeries;
				monomeFrameDirty++;
			}
			else if(x == LENGTH-1)
				scroll = z;
8000287c:	1b 99       	ld.ub	r9,sp[0x1]
8000287e:	58 09       	cp.w	r9,0
		}


		// toggle steps and prob control
		else if(edit_mode == mTrig) {
80002880:	c5 70       	breq	8000292e <handler_MonomeGridKey+0x616>
80002882:	30 3b       	mov	r11,3
80002884:	f6 08 18 00 	cp.b	r8,r11
80002888:	e0 88 00 36 	brls	800028f4 <handler_MonomeGridKey+0x5dc>
			if(z && y>3 && edit_prob == 0) {
8000288c:	e0 6b 1a 81 	mov	r11,6785
80002890:	17 8c       	ld.ub	r12,r11[0x0]
80002892:	ee 0c 18 00 	cp.b	r12,r7
80002896:	c4 c1       	brne	8000292e <handler_MonomeGridKey+0x616>
80002898:	e0 69 1a 5d 	mov	r9,6749
8000289c:	1b ba       	ld.ub	r10,sp[0x3]
8000289e:	13 8e       	ld.ub	lr,r9[0x0]
800028a0:	e0 6b 1a 5b 	mov	r11,6747
				if(key_alt)
800028a4:	e0 69 0b 0c 	mov	r9,2828
800028a8:	f8 0e 18 00 	cp.b	lr,r12
800028ac:	c1 30       	breq	800028d2 <handler_MonomeGridKey+0x5ba>
800028ae:	17 88       	ld.ub	r8,r11[0x0]
800028b0:	30 1b       	mov	r11,1
800028b2:	f6 0a 09 4a 	lsl	r10,r11,r10
					w.wp[pattern].step_choice ^= (1<<x);
800028b6:	f0 0b 15 04 	lsl	r11,r8,0x4
800028ba:	10 1b       	sub	r11,r8
800028bc:	a3 6b       	lsl	r11,0x2
800028be:	f6 08 01 08 	sub	r8,r11,r8
800028c2:	2f f8       	sub	r8,-1
800028c4:	f2 08 04 2b 	ld.sh	r11,r9[r8<<0x2]
800028c8:	16 5a       	eor	r10,r11
800028ca:	f2 08 0a 2a 	st.h	r9[r8<<0x2],r10
800028ce:	e0 8f 04 f4 	bral	800032b6 <handler_MonomeGridKey+0xf9e>
800028d2:	17 8c       	ld.ub	r12,r11[0x0]
800028d4:	e0 6b 00 ec 	mov	r11,236
				else
					w.wp[pattern].steps[x] ^= (1<<(y-4));
800028d8:	f8 0b 03 49 	mac	r9,r12,r11
800028dc:	f2 0a 00 0a 	add	r10,r9,r10
800028e0:	30 19       	mov	r9,1
800028e2:	2f 4a       	sub	r10,-12
800028e4:	20 48       	sub	r8,4
800028e6:	f2 08 09 48 	lsl	r8,r9,r8
800028ea:	15 89       	ld.ub	r9,r10[0x0]
800028ec:	12 58       	eor	r8,r9
800028ee:	b4 88       	st.b	r10[0x0],r8
800028f0:	e0 8f 04 e3 	bral	800032b6 <handler_MonomeGridKey+0xf9e>
800028f4:	f6 08 18 00 	cp.b	r8,r11
800028f8:	c1 b1       	brne	8000292e <handler_MonomeGridKey+0x616>
				monomeFrameDirty++;
			}
			// step probs
			else if(z && y==3) {
800028fa:	e0 68 1a 5d 	mov	r8,6749
800028fe:	11 89       	ld.ub	r9,r8[0x0]
				if(key_alt)
80002900:	ee 09 18 00 	cp.b	r9,r7
80002904:	c0 60       	breq	80002910 <handler_MonomeGridKey+0x5f8>
80002906:	e0 68 1a 81 	mov	r8,6785
					edit_prob = 1;
8000290a:	b0 8c       	st.b	r8[0x0],r12
8000290c:	e0 8f 04 d5 	bral	800032b6 <handler_MonomeGridKey+0xf9e>
80002910:	e0 68 1a 5b 	mov	r8,6747
				else {
					if(w.wp[pattern].step_probs[x] == 255) w.wp[pattern].step_probs[x] = 0;
80002914:	11 8b       	ld.ub	r11,r8[0x0]
80002916:	1b ba       	ld.ub	r10,sp[0x3]
80002918:	e0 68 00 ec 	mov	r8,236
8000291c:	f6 08 02 48 	mul	r8,r11,r8
80002920:	e0 6b 0b 0c 	mov	r11,2828
80002924:	f6 08 00 08 	add	r8,r11,r8
80002928:	14 08       	add	r8,r10
8000292a:	2e 48       	sub	r8,-28
					else w.wp[pattern].step_probs[x] = 255;
				}	
				monomeFrameDirty++;
			}
			else if(edit_prob == 1) {
8000292c:	c7 f8       	rjmp	80002a2a <handler_MonomeGridKey+0x712>
8000292e:	e0 6a 1a 81 	mov	r10,6785
80002932:	15 8b       	ld.ub	r11,r10[0x0]
80002934:	30 1a       	mov	r10,1
80002936:	f4 0b 18 00 	cp.b	r11,r10
				if(z) {
8000293a:	e0 81 04 c3 	brne	800032c0 <handler_MonomeGridKey+0xfa8>
8000293e:	58 09       	cp.w	r9,0
					if(y == 4) w.wp[pattern].step_probs[x] = 192;
80002940:	e0 80 04 c0 	breq	800032c0 <handler_MonomeGridKey+0xfa8>
80002944:	30 49       	mov	r9,4
80002946:	f2 08 18 00 	cp.b	r8,r9
8000294a:	c1 01       	brne	8000296a <handler_MonomeGridKey+0x652>
8000294c:	1b b9       	ld.ub	r9,sp[0x3]
8000294e:	e0 68 1a 5b 	mov	r8,6747
80002952:	11 8a       	ld.ub	r10,r8[0x0]
80002954:	e0 68 00 ec 	mov	r8,236
80002958:	f4 08 02 48 	mul	r8,r10,r8
8000295c:	e0 6a 0b 0c 	mov	r10,2828
80002960:	f4 08 00 08 	add	r8,r10,r8
					else if(y == 5) w.wp[pattern].step_probs[x] = 128;
80002964:	12 08       	add	r8,r9
80002966:	3c 09       	mov	r9,-64
80002968:	c1 38       	rjmp	8000298e <handler_MonomeGridKey+0x676>
8000296a:	30 59       	mov	r9,5
8000296c:	f2 08 18 00 	cp.b	r8,r9
80002970:	c1 41       	brne	80002998 <handler_MonomeGridKey+0x680>
80002972:	1b b9       	ld.ub	r9,sp[0x3]
80002974:	e0 68 1a 5b 	mov	r8,6747
80002978:	11 8a       	ld.ub	r10,r8[0x0]
8000297a:	e0 68 00 ec 	mov	r8,236
8000297e:	f4 08 02 48 	mul	r8,r10,r8
80002982:	e0 6a 0b 0c 	mov	r10,2828
80002986:	f4 08 00 08 	add	r8,r10,r8
8000298a:	12 08       	add	r8,r9
8000298c:	38 09       	mov	r9,-128
8000298e:	f1 69 00 1c 	st.b	r8[28],r9
80002992:	e0 8f 04 97 	bral	800032c0 <handler_MonomeGridKey+0xfa8>
80002996:	d7 03       	nop
80002998:	1b ba       	ld.ub	r10,sp[0x3]
8000299a:	e0 6b 1a 5b 	mov	r11,6747
8000299e:	e0 69 0b 0c 	mov	r9,2828
800029a2:	30 6c       	mov	r12,6
800029a4:	f8 08 18 00 	cp.b	r8,r12
800029a8:	c0 d1       	brne	800029c2 <handler_MonomeGridKey+0x6aa>
800029aa:	e0 68 00 ec 	mov	r8,236
					else if(y == 6) w.wp[pattern].step_probs[x] = 64;
800029ae:	17 8b       	ld.ub	r11,r11[0x0]
800029b0:	f6 08 03 49 	mac	r9,r11,r8
800029b4:	34 08       	mov	r8,64
800029b6:	f2 0a 00 0a 	add	r10,r9,r10
800029ba:	f5 68 00 1c 	st.b	r10[28],r8
800029be:	e0 8f 04 81 	bral	800032c0 <handler_MonomeGridKey+0xfa8>
800029c2:	17 8b       	ld.ub	r11,r11[0x0]
800029c4:	e0 68 00 ec 	mov	r8,236
800029c8:	f6 08 03 49 	mac	r9,r11,r8
800029cc:	f2 0a 00 0a 	add	r10,r9,r10
					else w.wp[pattern].step_probs[x] = 0;
800029d0:	2e 4a       	sub	r10,-28
800029d2:	e0 8f 03 c0 	bral	80003152 <handler_MonomeGridKey+0xe3a>
800029d6:	58 1b       	cp.w	r11,1
800029d8:	e0 81 03 c0 	brne	80003158 <handler_MonomeGridKey+0xe40>
800029dc:	1b 99       	ld.ub	r9,sp[0x1]
800029de:	58 09       	cp.w	r9,0
800029e0:	c2 e0       	breq	80002a3c <handler_MonomeGridKey+0x724>
				}
			}
		}	
		
		// edit map and probs
		else if(edit_mode == mMap) {
800029e2:	30 3c       	mov	r12,3
800029e4:	f8 08 18 00 	cp.b	r8,r12
			// step probs
			if(z && y==3) {
800029e8:	c2 a1       	brne	80002a3c <handler_MonomeGridKey+0x724>
800029ea:	e0 68 1a 5d 	mov	r8,6749
800029ee:	11 89       	ld.ub	r9,r8[0x0]
800029f0:	ee 09 18 00 	cp.b	r9,r7
800029f4:	c0 60       	breq	80002a00 <handler_MonomeGridKey+0x6e8>
				if(key_alt)
800029f6:	e0 68 1a 81 	mov	r8,6785
800029fa:	b0 8b       	st.b	r8[0x0],r11
800029fc:	e0 8f 04 5d 	bral	800032b6 <handler_MonomeGridKey+0xf9e>
					edit_prob = 1;
80002a00:	e0 68 1a 5b 	mov	r8,6747
80002a04:	11 8c       	ld.ub	r12,r8[0x0]
80002a06:	e0 68 1a 77 	mov	r8,6775
				else  {
					if(w.wp[pattern].cv_probs[edit_cv_ch][x] == 255) w.wp[pattern].cv_probs[edit_cv_ch][x] = 0;
80002a0a:	11 8b       	ld.ub	r11,r8[0x0]
80002a0c:	a5 6b       	lsl	r11,0x4
80002a0e:	1b ba       	ld.ub	r10,sp[0x3]
80002a10:	e0 68 00 ec 	mov	r8,236
80002a14:	f8 08 02 48 	mul	r8,r12,r8
80002a18:	f6 08 00 08 	add	r8,r11,r8
80002a1c:	e0 6b 0b 0c 	mov	r11,2828
80002a20:	f6 08 00 08 	add	r8,r11,r8
80002a24:	14 08       	add	r8,r10
80002a26:	f0 c8 ff 34 	sub	r8,r8,-204
80002a2a:	11 8b       	ld.ub	r11,r8[0x0]
80002a2c:	3f fa       	mov	r10,-1
80002a2e:	f4 0b 18 00 	cp.b	r11,r10
80002a32:	f2 0a 17 00 	moveq	r10,r9
80002a36:	b0 8a       	st.b	r8[0x0],r10
80002a38:	e0 8f 04 3f 	bral	800032b6 <handler_MonomeGridKey+0xf9e>
80002a3c:	e0 6a 1a 81 	mov	r10,6785
				}
					
				monomeFrameDirty++;
			}
			// edit data
			else if(edit_prob == 0) {
80002a40:	15 8a       	ld.ub	r10,r10[0x0]
80002a42:	58 0a       	cp.w	r10,0
80002a44:	e0 81 03 1f 	brne	80003082 <handler_MonomeGridKey+0xd6a>
				// CURVES
				if(w.wp[pattern].cv_mode[edit_cv_ch] == 0) {
80002a48:	e0 6b 1a 5b 	mov	r11,6747
80002a4c:	17 87       	ld.ub	r7,r11[0x0]
80002a4e:	e0 6b 1a 77 	mov	r11,6775
80002a52:	e0 65 00 ec 	mov	r5,236
80002a56:	17 86       	ld.ub	r6,r11[0x0]
80002a58:	ee 05 02 45 	mul	r5,r7,r5
80002a5c:	e0 6b 0b 0c 	mov	r11,2828
80002a60:	f6 05 00 0c 	add	r12,r11,r5
80002a64:	0c 0c       	add	r12,r6
80002a66:	19 ee       	ld.ub	lr,r12[0x6]
80002a68:	f4 0e 18 00 	cp.b	lr,r10
					if(y == 4 && z) {
80002a6c:	e0 81 01 18 	brne	80002c9c <handler_MonomeGridKey+0x984>
80002a70:	30 4a       	mov	r10,4
80002a72:	f4 08 18 00 	cp.b	r8,r10
80002a76:	c2 e1       	brne	80002ad2 <handler_MonomeGridKey+0x7ba>
						if(center) 
80002a78:	58 09       	cp.w	r9,0
80002a7a:	e0 80 00 8b 	breq	80002b90 <handler_MonomeGridKey+0x878>
80002a7e:	e0 68 1a 5f 	mov	r8,6751
80002a82:	11 88       	ld.ub	r8,r8[0x0]
80002a84:	fc 08 18 00 	cp.b	r8,lr
							delta = 3;
						else if(key_alt)
80002a88:	c0 30       	breq	80002a8e <handler_MonomeGridKey+0x776>
80002a8a:	30 39       	mov	r9,3
80002a8c:	c0 a8       	rjmp	80002aa0 <handler_MonomeGridKey+0x788>
80002a8e:	e0 69 1a 5d 	mov	r9,6749
80002a92:	13 8a       	ld.ub	r10,r9[0x0]
80002a94:	e0 69 01 99 	mov	r9,409
							delta = 409;
						else						
							delta = 34;

						// saturate
						if(w.wp[pattern].cv_curves[edit_cv_ch][x] + delta < 4092)
80002a98:	f0 0a 18 00 	cp.b	r10,r8
80002a9c:	f9 b9 00 22 	moveq	r9,34
80002aa0:	1b b8       	ld.ub	r8,sp[0x3]
80002aa2:	a5 66       	lsl	r6,0x4
80002aa4:	ee 07 10 76 	mul	r7,r7,118
80002aa8:	ec 07 00 07 	add	r7,r6,r7
80002aac:	10 07       	add	r7,r8
80002aae:	e0 68 0b 0c 	mov	r8,2828
80002ab2:	2b a7       	sub	r7,-70
80002ab4:	f0 07 04 1a 	ld.sh	r10,r8[r7<<0x1]
80002ab8:	f7 da c0 10 	bfextu	r11,r10,0x0,0x10
							w.wp[pattern].cv_curves[edit_cv_ch][x] += delta;
80002abc:	f2 0b 00 0b 	add	r11,r9,r11
						else
							w.wp[pattern].cv_curves[edit_cv_ch][x] = 4092;
80002ac0:	e0 4b 0f fb 	cp.w	r11,4091
80002ac4:	e0 89 00 04 	brgt	80002acc <handler_MonomeGridKey+0x7b4>
					}
					else if(y == 6 && z) {
80002ac8:	14 09       	add	r9,r10
80002aca:	c3 18       	rjmp	80002b2c <handler_MonomeGridKey+0x814>
80002acc:	e0 69 0f fc 	mov	r9,4092
80002ad0:	c2 e8       	rjmp	80002b2c <handler_MonomeGridKey+0x814>
						if(center)
80002ad2:	30 6a       	mov	r10,6
80002ad4:	f4 08 18 00 	cp.b	r8,r10
80002ad8:	c2 e1       	brne	80002b34 <handler_MonomeGridKey+0x81c>
80002ada:	58 09       	cp.w	r9,0
80002adc:	c5 a0       	breq	80002b90 <handler_MonomeGridKey+0x878>
80002ade:	e0 68 1a 5f 	mov	r8,6751
80002ae2:	11 88       	ld.ub	r8,r8[0x0]
80002ae4:	fc 08 18 00 	cp.b	r8,lr
80002ae8:	c0 40       	breq	80002af0 <handler_MonomeGridKey+0x7d8>
80002aea:	30 39       	mov	r9,3
80002aec:	c0 b8       	rjmp	80002b02 <handler_MonomeGridKey+0x7ea>
80002aee:	d7 03       	nop
80002af0:	e0 69 1a 5d 	mov	r9,6749
80002af4:	13 8a       	ld.ub	r10,r9[0x0]
80002af6:	e0 69 01 99 	mov	r9,409
							delta = 3;
						else if(key_alt)
80002afa:	f0 0a 18 00 	cp.b	r10,r8
80002afe:	f9 b9 00 22 	moveq	r9,34
80002b02:	1b b8       	ld.ub	r8,sp[0x3]
80002b04:	a5 66       	lsl	r6,0x4
80002b06:	ee 07 10 76 	mul	r7,r7,118
							delta = 409;
						else
							delta = 34;

						// saturate
						if(w.wp[pattern].cv_curves[edit_cv_ch][x] > delta)
80002b0a:	ec 07 00 07 	add	r7,r6,r7
80002b0e:	10 07       	add	r7,r8
80002b10:	e0 68 0b 0c 	mov	r8,2828
80002b14:	2b a7       	sub	r7,-70
80002b16:	f0 07 04 1a 	ld.sh	r10,r8[r7<<0x1]
80002b1a:	f7 da c0 10 	bfextu	r11,r10,0x0,0x10
80002b1e:	12 3b       	cp.w	r11,r9
80002b20:	e0 8a 00 05 	brle	80002b2a <handler_MonomeGridKey+0x812>
80002b24:	f4 09 01 09 	sub	r9,r10,r9
							w.wp[pattern].cv_curves[edit_cv_ch][x] -= delta;
80002b28:	c0 28       	rjmp	80002b2c <handler_MonomeGridKey+0x814>
80002b2a:	30 09       	mov	r9,0
80002b2c:	f0 07 0a 19 	st.h	r8[r7<<0x1],r9
						else
							w.wp[pattern].cv_curves[edit_cv_ch][x] = 0;
80002b30:	e0 8f 03 c8 	bral	800032c0 <handler_MonomeGridKey+0xfa8>
80002b34:	30 5a       	mov	r10,5
80002b36:	f4 08 18 00 	cp.b	r8,r10

					}
					else if(y == 5) {
80002b3a:	c2 b1       	brne	80002b90 <handler_MonomeGridKey+0x878>
80002b3c:	e0 68 1a 5f 	mov	r8,6751
80002b40:	30 1a       	mov	r10,1
						if(z == 1) {
80002b42:	f4 09 18 00 	cp.b	r9,r10
80002b46:	c2 21       	brne	80002b8a <handler_MonomeGridKey+0x872>
80002b48:	b0 89       	st.b	r8[0x0],r9
	 						center = 1;
80002b4a:	e0 68 1a 5d 	mov	r8,6749
	 						if(key_alt)
80002b4e:	a5 66       	lsl	r6,0x4
80002b50:	11 89       	ld.ub	r9,r8[0x0]
80002b52:	ee 07 10 76 	mul	r7,r7,118
80002b56:	1b ba       	ld.ub	r10,sp[0x3]
80002b58:	e0 68 0a fe 	mov	r8,2814
80002b5c:	fc 09 18 00 	cp.b	r9,lr
								w.wp[pattern].cv_curves[edit_cv_ch][x] = clip;
80002b60:	c0 b0       	breq	80002b76 <handler_MonomeGridKey+0x85e>
80002b62:	ec 07 00 07 	add	r7,r6,r7
80002b66:	90 08       	ld.sh	r8,r8[0x0]
80002b68:	ee 0a 00 0a 	add	r10,r7,r10
80002b6c:	2b aa       	sub	r10,-70
80002b6e:	f6 0a 0a 18 	st.h	r11[r10<<0x1],r8
80002b72:	e0 8f 03 a7 	bral	800032c0 <handler_MonomeGridKey+0xfa8>
							else
								clip = w.wp[pattern].cv_curves[edit_cv_ch][x];
80002b76:	ec 07 00 07 	add	r7,r6,r7
80002b7a:	ee 0a 00 0a 	add	r10,r7,r10
80002b7e:	2b aa       	sub	r10,-70
80002b80:	f6 0a 04 19 	ld.sh	r9,r11[r10<<0x1]
80002b84:	b0 09       	st.h	r8[0x0],r9
80002b86:	e0 8f 03 9d 	bral	800032c0 <handler_MonomeGridKey+0xfa8>
						}
						else
							center = 0;
80002b8a:	b0 8e       	st.b	r8[0x0],lr
80002b8c:	e0 8f 03 9a 	bral	800032c0 <handler_MonomeGridKey+0xfa8>
					}
					else if(y == 7) {
80002b90:	30 7a       	mov	r10,7
80002b92:	f4 08 18 00 	cp.b	r8,r10
80002b96:	e0 81 03 95 	brne	800032c0 <handler_MonomeGridKey+0xfa8>
						if(key_alt && z) {
80002b9a:	e0 68 1a 5d 	mov	r8,6749
80002b9e:	11 8a       	ld.ub	r10,r8[0x0]
80002ba0:	30 08       	mov	r8,0
80002ba2:	f0 0a 18 00 	cp.b	r10,r8
80002ba6:	c3 10       	breq	80002c08 <handler_MonomeGridKey+0x8f0>
							param_dest = &w.wp[pattern].cv_curves[edit_cv_ch][pos];
80002ba8:	58 09       	cp.w	r9,0
80002baa:	c2 f0       	breq	80002c08 <handler_MonomeGridKey+0x8f0>
80002bac:	e0 6a 00 ec 	mov	r10,236
80002bb0:	e0 6b 0a f8 	mov	r11,2808
80002bb4:	e0 69 0b 0c 	mov	r9,2828
80002bb8:	b5 37       	mul	r7,r10
80002bba:	a5 66       	lsl	r6,0x4
80002bbc:	ee c7 ff 74 	sub	r7,r7,-140
80002bc0:	e0 6a 0b 06 	mov	r10,2822
80002bc4:	12 07       	add	r7,r9
80002bc6:	f5 2a 00 00 	ld.sb	r10,r10[0]
							w.wp[pattern].cv_curves[edit_cv_ch][pos] = adc[1];
80002bca:	14 06       	add	r6,r10
80002bcc:	ee 06 00 16 	add	r6,r7,r6<<0x1
80002bd0:	97 06       	st.w	r11[0x0],r6
80002bd2:	e0 6b 1a 77 	mov	r11,6775
80002bd6:	17 8c       	ld.ub	r12,r11[0x0]
80002bd8:	e0 6b 1a 5b 	mov	r11,6747
80002bdc:	a5 6c       	lsl	r12,0x4
80002bde:	17 8b       	ld.ub	r11,r11[0x0]
80002be0:	f6 0b 10 76 	mul	r11,r11,118
80002be4:	f8 0b 00 0b 	add	r11,r12,r11
							param_accept = 1;
80002be8:	f6 0a 00 0a 	add	r10,r11,r10
80002bec:	e0 6b 1a 60 	mov	r11,6752
							live_in = 1;
80002bf0:	2b aa       	sub	r10,-70
80002bf2:	96 1b       	ld.sh	r11,r11[0x2]
						}
						else if(center && z) {
80002bf4:	f2 0a 0a 1b 	st.h	r9[r10<<0x1],r11
80002bf8:	e0 69 1a 78 	mov	r9,6776
80002bfc:	30 18       	mov	r8,1
80002bfe:	b2 88       	st.b	r9[0x0],r8
80002c00:	e0 69 1a 54 	mov	r9,6740
							w.wp[pattern].cv_curves[edit_cv_ch][x] = rand() % 4092;
80002c04:	e0 8f 01 d8 	bral	80002fb4 <handler_MonomeGridKey+0xc9c>
80002c08:	e0 68 1a 5f 	mov	r8,6751
80002c0c:	11 8a       	ld.ub	r10,r8[0x0]
80002c0e:	30 08       	mov	r8,0
80002c10:	f0 0a 18 00 	cp.b	r10,r8
80002c14:	c1 80       	breq	80002c44 <handler_MonomeGridKey+0x92c>
80002c16:	58 09       	cp.w	r9,0
80002c18:	c1 60       	breq	80002c44 <handler_MonomeGridKey+0x92c>
80002c1a:	1b b5       	ld.ub	r5,sp[0x3]
80002c1c:	e0 a0 30 d4 	rcall	80008dc4 <rand>
80002c20:	a5 66       	lsl	r6,0x4
80002c22:	ee 07 10 76 	mul	r7,r7,118
80002c26:	e0 68 0f fc 	mov	r8,4092
							param_dest = &w.wp[pattern].cv_curves[edit_cv_ch][pos];
							w.wp[pattern].cv_curves[edit_cv_ch][pos] = adc[1];
							param_accept = 1;
							live_in = 1;
						}
						else if(center && z) {
80002c2a:	ec 07 00 07 	add	r7,r6,r7
80002c2e:	f8 08 0c 0a 	divs	r10,r12,r8
80002c32:	ee 05 00 05 	add	r5,r7,r5
80002c36:	e0 69 0b 0c 	mov	r9,2828
80002c3a:	2b a5       	sub	r5,-70
80002c3c:	f2 05 0a 1b 	st.h	r9[r5<<0x1],r11
80002c40:	e0 8f 03 3b 	bral	800032b6 <handler_MonomeGridKey+0xf9e>
80002c44:	e0 68 1a 78 	mov	r8,6776
80002c48:	b0 89       	st.b	r8[0x0],r9
80002c4a:	e0 69 1a 77 	mov	r9,6775
80002c4e:	e0 68 1a 5b 	mov	r8,6747
80002c52:	13 8a       	ld.ub	r10,r9[0x0]
80002c54:	1b b9       	ld.ub	r9,sp[0x3]
80002c56:	a5 6a       	lsl	r10,0x4
80002c58:	f4 09 00 0c 	add	r12,r10,r9
							w.wp[pattern].cv_curves[edit_cv_ch][x] = rand() % 4092;
						}
						else {
							param_accept = z;
80002c5c:	11 8b       	ld.ub	r11,r8[0x0]
80002c5e:	e0 6e 00 ec 	mov	lr,236
							param_dest = &w.wp[pattern].cv_curves[edit_cv_ch][x];
80002c62:	e0 68 0b 0c 	mov	r8,2828
80002c66:	f6 0e 02 4e 	mul	lr,r11,lr
80002c6a:	fc ce ff 74 	sub	lr,lr,-140
80002c6e:	10 0e       	add	lr,r8
80002c70:	fc 0c 00 1e 	add	lr,lr,r12<<0x1
80002c74:	e0 6c 0a f8 	mov	r12,2808
80002c78:	99 0e       	st.w	r12[0x0],lr
80002c7a:	30 0c       	mov	r12,0
80002c7c:	1b 9e       	ld.ub	lr,sp[0x1]
80002c7e:	f8 0e 18 00 	cp.b	lr,r12
80002c82:	e0 80 03 1a 	breq	800032b6 <handler_MonomeGridKey+0xf9e>
80002c86:	f6 0b 10 76 	mul	r11,r11,118
							if(z) w.wp[pattern].cv_curves[edit_cv_ch][x] = adc[1];
80002c8a:	16 0a       	add	r10,r11
80002c8c:	f4 09 00 09 	add	r9,r10,r9
80002c90:	e0 6a 1a 60 	mov	r10,6752
80002c94:	2b a9       	sub	r9,-70
80002c96:	94 1a       	ld.sh	r10,r10[0x2]
80002c98:	e0 8f 03 0d 	bral	800032b2 <handler_MonomeGridKey+0xf9a>
80002c9c:	e0 6a 1a 80 	mov	r10,6784
80002ca0:	15 8a       	ld.ub	r10,r10[0x0]
80002ca2:	58 0a       	cp.w	r10,0
80002ca4:	c3 40       	breq	80002d0c <handler_MonomeGridKey+0x9f4>
80002ca6:	58 09       	cp.w	r9,0
						monomeFrameDirty++;
					}
				}
				// MAP
				else {
					if(scale_select && z) {
80002ca8:	c6 c0       	breq	80002d80 <handler_MonomeGridKey+0xa68>
80002caa:	1b b9       	ld.ub	r9,sp[0x3]
80002cac:	f0 c7 00 04 	sub	r7,r8,4
80002cb0:	f2 07 00 37 	add	r7,r9,r7<<0x3
80002cb4:	31 79       	mov	r9,23
						// index -= 64;
						index = (y-4) * 8 + x;
80002cb6:	5c 57       	castu.b	r7
80002cb8:	f2 07 18 00 	cp.b	r7,r9
80002cbc:	e0 8b 00 1e 	brhi	80002cf8 <handler_MonomeGridKey+0x9e0>
						if(index < 24 && y<8) {
80002cc0:	30 79       	mov	r9,7
				}
				// MAP
				else {
					if(scale_select && z) {
						// index -= 64;
						index = (y-4) * 8 + x;
80002cc2:	f2 08 18 00 	cp.b	r8,r9
						if(index < 24 && y<8) {
80002cc6:	e0 8b 00 19 	brhi	80002cf8 <handler_MonomeGridKey+0x9e0>
80002cca:	fe c9 96 b2 	sub	r9,pc,-26958
80002cce:	ee 08 15 05 	lsl	r8,r7,0x5
80002cd2:	2d 45       	sub	r5,-44
80002cd4:	f2 ca ff e0 	sub	r10,r9,-32
80002cd8:	ea 0b 00 0b 	add	r11,r5,r11
80002cdc:	10 0a       	add	r10,r8
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// application grid code

static void handler_MonomeGridKey(s32 data) { 
80002cde:	f2 08 00 08 	add	r8,r9,r8
				// MAP
				else {
					if(scale_select && z) {
						// index -= 64;
						index = (y-4) * 8 + x;
						if(index < 24 && y<8) {
80002ce2:	11 19       	ld.sh	r9,r8++
80002ce4:	16 b9       	st.h	r11++,r9
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// application grid code

static void handler_MonomeGridKey(s32 data) { 
80002ce6:	14 38       	cp.w	r8,r10
				// MAP
				else {
					if(scale_select && z) {
						// index -= 64;
						index = (y-4) * 8 + x;
						if(index < 24 && y<8) {
80002ce8:	cf d1       	brne	80002ce2 <handler_MonomeGridKey+0x9ca>
80002cea:	fe cc 93 b2 	sub	r12,pc,-27726
							for(i1=0;i1<16;i1++)
								w.wp[pattern].cv_values[i1] = SCALES[index][i1];
80002cee:	e0 a0 28 97 	rcall	80007e1c <print_dbg>
				else {
					if(scale_select && z) {
						// index -= 64;
						index = (y-4) * 8 + x;
						if(index < 24 && y<8) {
							for(i1=0;i1<16;i1++)
80002cf2:	0e 9c       	mov	r12,r7
								w.wp[pattern].cv_values[i1] = SCALES[index][i1];
							print_dbg("\rNEW SCALE ");
80002cf4:	e0 a0 28 8e 	rcall	80007e10 <print_dbg_ulong>
80002cf8:	e0 68 07 69 	mov	r8,1897
							print_dbg_ulong(index);
80002cfc:	11 89       	ld.ub	r9,r8[0x0]
80002cfe:	2f f9       	sub	r9,-1
						}

						scale_select = 0;
						monomeFrameDirty++;
80002d00:	b0 89       	st.b	r8[0x0],r9
80002d02:	30 09       	mov	r9,0
80002d04:	e0 68 1a 80 	mov	r8,6784
								w.wp[pattern].cv_values[i1] = SCALES[index][i1];
							print_dbg("\rNEW SCALE ");
							print_dbg_ulong(index);
						}

						scale_select = 0;
80002d08:	e0 8f 02 db 	bral	800032be <handler_MonomeGridKey+0xfa6>
80002d0c:	58 09       	cp.w	r9,0
80002d0e:	c3 90       	breq	80002d80 <handler_MonomeGridKey+0xa68>
						monomeFrameDirty++;
					}
					else {
						if(z && y==4) {
80002d10:	30 4c       	mov	r12,4
80002d12:	f8 08 18 00 	cp.b	r8,r12
80002d16:	c3 51       	brne	80002d80 <handler_MonomeGridKey+0xa68>
80002d18:	1b b9       	ld.ub	r9,sp[0x3]
80002d1a:	14 98       	mov	r8,r10
							edit_cv_step = x;
80002d1c:	a5 66       	lsl	r6,0x4
							count = 0;
							for(i1=0;i1<16;i1++)
									if((w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] >> i1) & 1) {
80002d1e:	e0 6a 1a 5a 	mov	r10,6746
						scale_select = 0;
						monomeFrameDirty++;
					}
					else {
						if(z && y==4) {
							edit_cv_step = x;
80002d22:	ee 07 10 76 	mul	r7,r7,118
							count = 0;
							for(i1=0;i1<16;i1++)
									if((w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] >> i1) & 1) {
80002d26:	ec 07 00 07 	add	r7,r6,r7
80002d2a:	12 07       	add	r7,r9
80002d2c:	2d a7       	sub	r7,-38
80002d2e:	f6 07 05 1b 	ld.uh	r11,r11[r7<<0x1]
80002d32:	b4 89       	st.b	r10[0x0],r9
						scale_select = 0;
						monomeFrameDirty++;
					}
					else {
						if(z && y==4) {
							edit_cv_step = x;
80002d34:	e0 69 1a 68 	mov	r9,6760
							count = 0;
							for(i1=0;i1<16;i1++)
									if((w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] >> i1) & 1) {
80002d38:	13 8a       	ld.ub	r10,r9[0x0]
80002d3a:	10 99       	mov	r9,r8
80002d3c:	f6 08 08 4e 	asr	lr,r11,r8
										count++;
80002d40:	f2 cc ff ff 	sub	r12,r9,-1
					else {
						if(z && y==4) {
							edit_cv_step = x;
							count = 0;
							for(i1=0;i1<16;i1++)
									if((w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] >> i1) & 1) {
80002d44:	fd de c0 01 	bfextu	lr,lr,0x0,0x1
80002d48:	c0 50       	breq	80002d52 <handler_MonomeGridKey+0xa3a>
										count++;
80002d4a:	f3 dc c0 08 	bfextu	r9,r12,0x0,0x8
80002d4e:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80002d52:	2f f8       	sub	r8,-1
					}
					else {
						if(z && y==4) {
							edit_cv_step = x;
							count = 0;
							for(i1=0;i1<16;i1++)
80002d54:	59 08       	cp.w	r8,16
80002d56:	cf 31       	brne	80002d3c <handler_MonomeGridKey+0xa24>
80002d58:	e0 68 1a 68 	mov	r8,6760
									if((w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] >> i1) & 1) {
										count++;
										edit_cv_value = i1;
									}
							if(count>1)
80002d5c:	b0 8a       	st.b	r8[0x0],r10
80002d5e:	30 1a       	mov	r10,1
80002d60:	f4 09 18 00 	cp.b	r9,r10
80002d64:	e0 88 00 04 	brls	80002d6c <handler_MonomeGridKey+0xa54>
								edit_cv_value = -1;
80002d68:	3f f9       	mov	r9,-1

							keycount_cv = 0;

							monomeFrameDirty++;
80002d6a:	b0 89       	st.b	r8[0x0],r9
80002d6c:	e0 68 07 69 	mov	r8,1897
80002d70:	11 89       	ld.ub	r9,r8[0x0]
										edit_cv_value = i1;
									}
							if(count>1)
								edit_cv_value = -1;

							keycount_cv = 0;
80002d72:	2f f9       	sub	r9,-1
80002d74:	b0 89       	st.b	r8[0x0],r9
80002d76:	30 09       	mov	r9,0
80002d78:	e0 68 1a 52 	mov	r8,6738
80002d7c:	e0 8f 02 a1 	bral	800032be <handler_MonomeGridKey+0xfa6>
80002d80:	e0 6b 1a 5d 	mov	r11,6749
80002d84:	17 8b       	ld.ub	r11,r11[0x0]
80002d86:	58 0b       	cp.w	r11,0
80002d88:	c3 60       	breq	80002df4 <handler_MonomeGridKey+0xadc>
80002d8a:	30 7c       	mov	r12,7
80002d8c:	f8 08 18 00 	cp.b	r8,r12
80002d90:	c3 21       	brne	80002df4 <handler_MonomeGridKey+0xadc>
80002d92:	1b bc       	ld.ub	r12,sp[0x3]
80002d94:	58 0c       	cp.w	r12,0
80002d96:	c0 d1       	brne	80002db0 <handler_MonomeGridKey+0xa98>
80002d98:	58 09       	cp.w	r9,0
80002d9a:	c0 b0       	breq	80002db0 <handler_MonomeGridKey+0xa98>
80002d9c:	2f fa       	sub	r10,-1
80002d9e:	e0 69 07 69 	mov	r9,1897
80002da2:	e0 6b 1a 80 	mov	r11,6784
80002da6:	13 88       	ld.ub	r8,r9[0x0]
80002da8:	b6 8a       	st.b	r11[0x0],r10
80002daa:	2f f8       	sub	r8,-1
80002dac:	fe 9f fc ec 	bral	80002784 <handler_MonomeGridKey+0x46c>
80002db0:	e0 6a 1a 68 	mov	r10,6760
80002db4:	3f fe       	mov	lr,-1
80002db6:	15 86       	ld.ub	r6,r10[0x0]

							monomeFrameDirty++;
						}
						// load scale
						else if(key_alt && y==7 && x == 0 && z) {
80002db8:	fc 06 18 00 	cp.b	r6,lr
80002dbc:	c1 c0       	breq	80002df4 <handler_MonomeGridKey+0xadc>
80002dbe:	e0 6e 0b 07 	mov	lr,2823
80002dc2:	1d 8e       	ld.ub	lr,lr[0x0]
80002dc4:	f8 0e 18 00 	cp.b	lr,r12
80002dc8:	c1 61       	brne	80002df4 <handler_MonomeGridKey+0xadc>
80002dca:	f5 28 00 00 	ld.sb	r8,r10[0]
80002dce:	e0 6a 1a 78 	mov	r10,6776
							scale_select++;
80002dd2:	b4 89       	st.b	r10[0x0],r9
							monomeFrameDirty++;
80002dd4:	e0 69 1a 5b 	mov	r9,6747
80002dd8:	13 89       	ld.ub	r9,r9[0x0]

							monomeFrameDirty++;
						}
						// load scale
						else if(key_alt && y==7 && x == 0 && z) {
							scale_select++;
80002dda:	f2 09 10 76 	mul	r9,r9,118
							monomeFrameDirty++;
80002dde:	f0 09 00 09 	add	r9,r8,r9
						}
						// read pot					
						else if(y==7 && key_alt && edit_cv_value != -1 && x==LENGTH) {
80002de2:	e0 68 0b 0c 	mov	r8,2828
80002de6:	2e a9       	sub	r9,-22
80002de8:	f0 09 00 19 	add	r9,r8,r9<<0x1
80002dec:	e0 68 0a f8 	mov	r8,2808
80002df0:	fe 9f fd 3a 	bral	80002864 <handler_MonomeGridKey+0x54c>
80002df4:	f0 ca 00 05 	sub	r10,r8,5
							param_accept = z;
							param_dest = &(w.wp[pattern].cv_values[edit_cv_value]);
80002df8:	30 1c       	mov	r12,1
80002dfa:	f8 0a 18 00 	cp.b	r10,r12
							scale_select++;
							monomeFrameDirty++;
						}
						// read pot					
						else if(y==7 && key_alt && edit_cv_value != -1 && x==LENGTH) {
							param_accept = z;
80002dfe:	e0 8b 00 7d 	brhi	80002ef8 <handler_MonomeGridKey+0xbe0>
							param_dest = &(w.wp[pattern].cv_values[edit_cv_value]);
80002e02:	58 09       	cp.w	r9,0
80002e04:	e0 80 02 5e 	breq	800032c0 <handler_MonomeGridKey+0xfa8>
80002e08:	1b ba       	ld.ub	r10,sp[0x3]
80002e0a:	30 39       	mov	r9,3
80002e0c:	f2 0a 18 00 	cp.b	r10,r9
80002e10:	e0 8b 02 58 	brhi	800032c0 <handler_MonomeGridKey+0xfa8>
80002e14:	58 0a       	cp.w	r10,0
80002e16:	c0 41       	brne	80002e1e <handler_MonomeGridKey+0xb06>
80002e18:	e0 6a 01 99 	mov	r10,409
							// print_dbg("\r\nparam: ");
							// print_dbg_ulong(*param_dest);
						}
						else if((y == 5 || y == 6) && z && x<4 && edit_cv_step != -1) {
80002e1c:	c0 c8       	rjmp	80002e34 <handler_MonomeGridKey+0xb1c>
80002e1e:	f8 0a 18 00 	cp.b	r10,r12
80002e22:	c0 41       	brne	80002e2a <handler_MonomeGridKey+0xb12>
80002e24:	e0 6a 00 ef 	mov	r10,239
80002e28:	c0 68       	rjmp	80002e34 <handler_MonomeGridKey+0xb1c>
80002e2a:	58 2a       	cp.w	r10,2
80002e2c:	f9 ba 00 22 	moveq	r10,34
80002e30:	f9 ba 01 03 	movne	r10,3
80002e34:	30 69       	mov	r9,6
80002e36:	f2 08 18 00 	cp.b	r8,r9
							delta = 0;
	 						if(x == 0)
80002e3a:	c0 31       	brne	80002e40 <handler_MonomeGridKey+0xb28>
80002e3c:	5c 3a       	neg	r10
80002e3e:	5c 8a       	casts.h	r10
80002e40:	e0 69 0b 0c 	mov	r9,2828
								delta = 409;
							else if(x == 1)
80002e44:	58 0b       	cp.w	r11,0
80002e46:	c2 90       	breq	80002e98 <handler_MonomeGridKey+0xb80>
80002e48:	e0 68 00 ec 	mov	r8,236
80002e4c:	b1 37       	mul	r7,r8
80002e4e:	2d 47       	sub	r7,-44
								delta = 239;
							else if(x == 2)
80002e50:	30 08       	mov	r8,0
80002e52:	0e 09       	add	r9,r7
80002e54:	f4 06 11 00 	rsub	r6,r10,0
80002e58:	10 9b       	mov	r11,r8
								delta = 34;
							else if(x == 3)
								delta = 3;

							if(y == 6)
80002e5a:	e0 67 0f fc 	mov	r7,4092
80002e5e:	31 0e       	mov	lr,16
80002e60:	92 0c       	ld.sh	r12,r9[0x0]
								delta *= -1;
80002e62:	f4 0c 00 05 	add	r5,r10,r12
80002e66:	5c 7c       	castu.h	r12
							
							if(key_alt) {
80002e68:	f4 0c 00 04 	add	r4,r10,r12
80002e6c:	e0 44 0f fc 	cp.w	r4,4092
80002e70:	e0 8a 00 04 	brle	80002e78 <handler_MonomeGridKey+0xb60>
80002e74:	b2 07       	st.h	r9[0x0],r7
80002e76:	c0 98       	rjmp	80002e88 <handler_MonomeGridKey+0xb70>
								for(i1=0;i1<16;i1++) {
									if(w.wp[pattern].cv_values[i1] + delta > 4092)
										w.wp[pattern].cv_values[i1] = 4092;
									else if(delta < 0 && w.wp[pattern].cv_values[i1] < -1*delta)
80002e78:	f6 0a 19 00 	cp.h	r10,r11
80002e7c:	c0 54       	brge	80002e86 <handler_MonomeGridKey+0xb6e>
								delta *= -1;
							
							if(key_alt) {
								for(i1=0;i1<16;i1++) {
									if(w.wp[pattern].cv_values[i1] + delta > 4092)
										w.wp[pattern].cv_values[i1] = 4092;
80002e7e:	0c 3c       	cp.w	r12,r6
80002e80:	c0 34       	brge	80002e86 <handler_MonomeGridKey+0xb6e>

							if(y == 6)
								delta *= -1;
							
							if(key_alt) {
								for(i1=0;i1<16;i1++) {
80002e82:	b2 0b       	st.h	r9[0x0],r11
									if(w.wp[pattern].cv_values[i1] + delta > 4092)
80002e84:	c0 28       	rjmp	80002e88 <handler_MonomeGridKey+0xb70>
										w.wp[pattern].cv_values[i1] = 4092;
									else if(delta < 0 && w.wp[pattern].cv_values[i1] < -1*delta)
										w.wp[pattern].cv_values[i1] = 0;
									else
										w.wp[pattern].cv_values[i1] += delta;
80002e86:	b2 05       	st.h	r9[0x0],r5
80002e88:	2f f8       	sub	r8,-1
							if(y == 6)
								delta *= -1;
							
							if(key_alt) {
								for(i1=0;i1<16;i1++) {
									if(w.wp[pattern].cv_values[i1] + delta > 4092)
80002e8a:	2f e9       	sub	r9,-2
80002e8c:	5c 58       	castu.b	r8
80002e8e:	fc 08 18 00 	cp.b	r8,lr
80002e92:	ce 71       	brne	80002e60 <handler_MonomeGridKey+0xb48>
80002e94:	e0 8f 02 11 	bral	800032b6 <handler_MonomeGridKey+0xf9e>
										w.wp[pattern].cv_values[i1] = 4092;
80002e98:	e0 68 1a 68 	mov	r8,6760
									else if(delta < 0 && w.wp[pattern].cv_values[i1] < -1*delta)
80002e9c:	f1 2c 00 00 	ld.sb	r12,r8[0]
80002ea0:	ee 08 10 76 	mul	r8,r7,118
80002ea4:	18 08       	add	r8,r12
										w.wp[pattern].cv_values[i1] = 0;
80002ea6:	2e a8       	sub	r8,-22
							
							if(key_alt) {
								for(i1=0;i1<16;i1++) {
									if(w.wp[pattern].cv_values[i1] + delta > 4092)
										w.wp[pattern].cv_values[i1] = 4092;
									else if(delta < 0 && w.wp[pattern].cv_values[i1] < -1*delta)
80002ea8:	f2 08 04 16 	ld.sh	r6,r9[r8<<0x1]

							if(y == 6)
								delta *= -1;
							
							if(key_alt) {
								for(i1=0;i1<16;i1++) {
80002eac:	eb d6 c0 10 	bfextu	r5,r6,0x0,0x10
80002eb0:	f4 05 00 0e 	add	lr,r10,r5
80002eb4:	e0 4e 0f fc 	cp.w	lr,4092
80002eb8:	e0 8a 00 08 	brle	80002ec8 <handler_MonomeGridKey+0xbb0>
									else
										w.wp[pattern].cv_values[i1] += delta;
								}
							}
							else {
								if(w.wp[pattern].cv_values[edit_cv_value] + delta > 4092)
80002ebc:	e0 6a 0f fc 	mov	r10,4092
80002ec0:	f2 08 0a 1a 	st.h	r9[r8<<0x1],r10
80002ec4:	e0 8f 01 f9 	bral	800032b6 <handler_MonomeGridKey+0xf9e>
80002ec8:	16 9e       	mov	lr,r11
80002eca:	f6 0a 19 00 	cp.h	r10,r11
80002ece:	c0 94       	brge	80002ee0 <handler_MonomeGridKey+0xbc8>
80002ed0:	f4 0e 11 00 	rsub	lr,r10,0
80002ed4:	1c 35       	cp.w	r5,lr
80002ed6:	c0 54       	brge	80002ee0 <handler_MonomeGridKey+0xbc8>
80002ed8:	f2 08 0a 1b 	st.h	r9[r8<<0x1],r11
80002edc:	e0 8f 01 ed 	bral	800032b6 <handler_MonomeGridKey+0xf9e>
									w.wp[pattern].cv_values[edit_cv_value] = 4092;
80002ee0:	0c 0a       	add	r10,r6
80002ee2:	ee 07 10 76 	mul	r7,r7,118
80002ee6:	e0 68 0b 0c 	mov	r8,2828
								else if(delta < 0 && w.wp[pattern].cv_values[edit_cv_value] < -1*delta)
80002eea:	ee 0c 00 0c 	add	r12,r7,r12
80002eee:	2e ac       	sub	r12,-22
80002ef0:	f0 0c 0a 1a 	st.h	r8[r12<<0x1],r10
80002ef4:	e0 8f 01 e1 	bral	800032b6 <handler_MonomeGridKey+0xf9e>
80002ef8:	30 7a       	mov	r10,7
									w.wp[pattern].cv_values[edit_cv_value] = 0;
80002efa:	f4 08 18 00 	cp.b	r8,r10
								}
							}
							else {
								if(w.wp[pattern].cv_values[edit_cv_value] + delta > 4092)
									w.wp[pattern].cv_values[edit_cv_value] = 4092;
								else if(delta < 0 && w.wp[pattern].cv_values[edit_cv_value] < -1*delta)
80002efe:	e0 81 01 e1 	brne	800032c0 <handler_MonomeGridKey+0xfa8>
80002f02:	e0 68 1a 52 	mov	r8,6738
80002f06:	11 8a       	ld.ub	r10,r8[0x0]
80002f08:	f4 09 00 19 	add	r9,r10,r9<<0x1
80002f0c:	20 19       	sub	r9,1
80002f0e:	b0 89       	st.b	r8[0x0],r9
80002f10:	30 0a       	mov	r10,0
80002f12:	f4 09 18 00 	cp.b	r9,r10
80002f16:	c0 24       	brge	80002f1a <handler_MonomeGridKey+0xc02>
80002f18:	b0 8a       	st.b	r8[0x0],r10
80002f1a:	30 08       	mov	r8,0
80002f1c:	1b 99       	ld.ub	r9,sp[0x1]
80002f1e:	f0 09 18 00 	cp.b	r9,r8
80002f22:	e0 80 01 cf 	breq	800032c0 <handler_MonomeGridKey+0xfa8>
80002f26:	e0 68 1a 5b 	mov	r8,6747
									w.wp[pattern].cv_values[edit_cv_value] = 0;
								else
									w.wp[pattern].cv_values[edit_cv_value] += delta;
80002f2a:	11 8b       	ld.ub	r11,r8[0x0]
80002f2c:	e0 68 1a 77 	mov	r8,6775
80002f30:	11 8c       	ld.ub	r12,r8[0x0]
80002f32:	e0 68 1a 5a 	mov	r8,6746
80002f36:	11 8a       	ld.ub	r10,r8[0x0]
80002f38:	f6 08 10 76 	mul	r8,r11,118
80002f3c:	f8 09 15 04 	lsl	r9,r12,0x4
							}

							monomeFrameDirty++;
						}
						// choose values
						else if(y==7) {
80002f40:	10 09       	add	r9,r8
80002f42:	e0 68 0b 0c 	mov	r8,2828
80002f46:	14 09       	add	r9,r10
							keycount_cv += z*2-1;
80002f48:	2d a9       	sub	r9,-38
80002f4a:	f0 09 04 16 	ld.sh	r6,r8[r9<<0x1]
80002f4e:	30 08       	mov	r8,0
80002f50:	fd d6 c0 10 	bfextu	lr,r6,0x0,0x10
							if(keycount_cv < 0)
80002f54:	10 99       	mov	r9,r8
80002f56:	f2 c7 ff ff 	sub	r7,r9,-1
80002f5a:	fc 08 08 45 	asr	r5,lr,r8
								keycount_cv = 0;

							if(z) {
80002f5e:	ed b5 00 00 	bld	r5,0x0
80002f62:	c0 31       	brne	80002f68 <handler_MonomeGridKey+0xc50>
80002f64:	f3 d7 c0 08 	bfextu	r9,r7,0x0,0x8
80002f68:	2f f8       	sub	r8,-1
								count = 0;
								for(i1=0;i1<16;i1++)
									if((w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] >> i1) & 1)
80002f6a:	59 08       	cp.w	r8,16
80002f6c:	cf 51       	brne	80002f56 <handler_MonomeGridKey+0xc3e>
80002f6e:	e0 6e 1a 52 	mov	lr,6738
80002f72:	30 18       	mov	r8,1
80002f74:	1d 85       	ld.ub	r5,lr[0x0]
80002f76:	f0 09 18 00 	cp.b	r9,r8
80002f7a:	5f 87       	srls	r7
80002f7c:	f0 05 18 00 	cp.b	r5,r8
80002f80:	5f 0e       	sreq	lr
80002f82:	ef ee 00 0e 	and	lr,r7,lr
80002f86:	1c 97       	mov	r7,lr
80002f88:	30 0e       	mov	lr,0
80002f8a:	fc 07 18 00 	cp.b	r7,lr
80002f8e:	c1 50       	breq	80002fb8 <handler_MonomeGridKey+0xca0>
80002f90:	e0 69 0b 0c 	mov	r9,2828
										count++;
80002f94:	a5 6c       	lsl	r12,0x4
								keycount_cv = 0;

							if(z) {
								count = 0;
								for(i1=0;i1<16;i1++)
									if((w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] >> i1) & 1)
80002f96:	f6 0b 10 76 	mul	r11,r11,118
80002f9a:	f8 0b 00 0b 	add	r11,r12,r11
80002f9e:	1b b8       	ld.ub	r8,sp[0x3]
										count++;
80002fa0:	f6 0a 00 0a 	add	r10,r11,r10
80002fa4:	30 1b       	mov	r11,1
							if(keycount_cv < 0)
								keycount_cv = 0;

							if(z) {
								count = 0;
								for(i1=0;i1<16;i1++)
80002fa6:	2d aa       	sub	r10,-38
80002fa8:	f6 08 09 4b 	lsl	r11,r11,r8
									if((w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] >> i1) & 1)
										count++;

								// single press toggle
								if(keycount_cv == 1 && count < 2) {
80002fac:	f2 0a 0a 1b 	st.h	r9[r10<<0x1],r11
80002fb0:	e0 69 1a 68 	mov	r9,6760
80002fb4:	b2 88       	st.b	r9[0x0],r8
80002fb6:	c8 09       	rjmp	800032b6 <handler_MonomeGridKey+0xf9e>
80002fb8:	f0 05 18 00 	cp.b	r5,r8
80002fbc:	5f 9e       	srgt	lr
80002fbe:	f0 09 18 00 	cp.b	r9,r8
80002fc2:	5f b8       	srhi	r8
80002fc4:	1c 48       	or	r8,lr
80002fc6:	ee 08 18 00 	cp.b	r8,r7
									w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] = (1<<x);
80002fca:	e0 80 01 76 	breq	800032b6 <handler_MonomeGridKey+0xf9e>
80002fce:	1b b9       	ld.ub	r9,sp[0x3]
80002fd0:	a5 6c       	lsl	r12,0x4
80002fd2:	f6 0b 10 76 	mul	r11,r11,118
80002fd6:	f8 0b 00 0b 	add	r11,r12,r11
80002fda:	f6 0a 00 0a 	add	r10,r11,r10
80002fde:	2d aa       	sub	r10,-38
80002fe0:	e0 68 0b 0c 	mov	r8,2828
80002fe4:	30 17       	mov	r7,1
80002fe6:	ee 09 09 47 	lsl	r7,r7,r9
									edit_cv_value = x;
80002fea:	e0 69 1a 5b 	mov	r9,6747
80002fee:	0e 56       	eor	r6,r7
80002ff0:	f0 0a 0a 16 	st.h	r8[r10<<0x1],r6
80002ff4:	13 8a       	ld.ub	r10,r9[0x0]
80002ff6:	f4 0a 10 76 	mul	r10,r10,118
80002ffa:	e0 69 1a 77 	mov	r9,6775
80002ffe:	13 89       	ld.ub	r9,r9[0x0]
80003000:	a5 69       	lsl	r9,0x4
80003002:	14 09       	add	r9,r10
80003004:	e0 6a 1a 5a 	mov	r10,6746
								}
								// multiselect
								else if(keycount_cv > 1 || count > 1) {
80003008:	15 8a       	ld.ub	r10,r10[0x0]
8000300a:	14 09       	add	r9,r10
8000300c:	30 0a       	mov	r10,0
8000300e:	2d a9       	sub	r9,-38
80003010:	f0 09 04 1b 	ld.sh	r11,r8[r9<<0x1]
80003014:	f4 0b 19 00 	cp.h	r11,r10
80003018:	c0 31       	brne	8000301e <handler_MonomeGridKey+0xd06>
8000301a:	f0 09 0a 17 	st.h	r8[r9<<0x1],r7
									w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] ^= (1<<x);
8000301e:	e0 69 1a 77 	mov	r9,6775
80003022:	e0 68 1a 5a 	mov	r8,6746
80003026:	11 88       	ld.ub	r8,r8[0x0]
80003028:	13 8a       	ld.ub	r10,r9[0x0]
8000302a:	e0 69 1a 5b 	mov	r9,6747
8000302e:	a5 6a       	lsl	r10,0x4
80003030:	13 89       	ld.ub	r9,r9[0x0]
80003032:	f2 09 10 76 	mul	r9,r9,118
80003036:	f4 09 00 09 	add	r9,r10,r9
8000303a:	10 09       	add	r9,r8
8000303c:	e0 68 0b 0c 	mov	r8,2828

									if(!w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step])
80003040:	2d a9       	sub	r9,-38
80003042:	f0 09 05 1b 	ld.uh	r11,r8[r9<<0x1]
80003046:	e0 68 1a 68 	mov	r8,6760
8000304a:	11 8a       	ld.ub	r10,r8[0x0]
8000304c:	30 08       	mov	r8,0
8000304e:	10 99       	mov	r9,r8
80003050:	f6 08 08 4e 	asr	lr,r11,r8
80003054:	f2 cc ff ff 	sub	r12,r9,-1
80003058:	fd de c0 01 	bfextu	lr,lr,0x0,0x1
8000305c:	c0 50       	breq	80003066 <handler_MonomeGridKey+0xd4e>
8000305e:	f3 dc c0 08 	bfextu	r9,r12,0x0,0x8
										w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] = (1<<x);
80003062:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8

									count = 0;
									for(i1=0;i1<16;i1++)
										if((w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] >> i1) & 1) {
80003066:	2f f8       	sub	r8,-1
80003068:	59 08       	cp.w	r8,16
8000306a:	cf 31       	brne	80003050 <handler_MonomeGridKey+0xd38>
8000306c:	e0 68 1a 68 	mov	r8,6760
80003070:	b0 8a       	st.b	r8[0x0],r10
80003072:	30 1a       	mov	r10,1
80003074:	f4 09 18 00 	cp.b	r9,r10
80003078:	e0 88 01 1f 	brls	800032b6 <handler_MonomeGridKey+0xf9e>
8000307c:	3f f9       	mov	r9,-1
8000307e:	b0 89       	st.b	r8[0x0],r9
80003080:	c1 b9       	rjmp	800032b6 <handler_MonomeGridKey+0xf9e>
80003082:	30 1b       	mov	r11,1
80003084:	f6 0a 18 00 	cp.b	r10,r11
80003088:	e0 81 01 1c 	brne	800032c0 <handler_MonomeGridKey+0xfa8>
8000308c:	58 09       	cp.w	r9,0
8000308e:	e0 80 01 19 	breq	800032c0 <handler_MonomeGridKey+0xfa8>
											count++;
80003092:	30 49       	mov	r9,4
80003094:	f2 08 18 00 	cp.b	r8,r9
									if(!w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step])
										w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] = (1<<x);

									count = 0;
									for(i1=0;i1<16;i1++)
										if((w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] >> i1) & 1) {
80003098:	c1 61       	brne	800030c4 <handler_MonomeGridKey+0xdac>
8000309a:	e0 68 1a 77 	mov	r8,6775
											count++;
8000309e:	1b b9       	ld.ub	r9,sp[0x3]
800030a0:	11 8a       	ld.ub	r10,r8[0x0]
800030a2:	e0 68 1a 5b 	mov	r8,6747

									if(!w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step])
										w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] = (1<<x);

									count = 0;
									for(i1=0;i1<16;i1++)
800030a6:	a5 6a       	lsl	r10,0x4
800030a8:	11 8b       	ld.ub	r11,r8[0x0]
800030aa:	e0 68 00 ec 	mov	r8,236
										if((w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] >> i1) & 1) {
											count++;
											edit_cv_value = i1;
										}

									if(count > 1)
800030ae:	f6 08 02 48 	mul	r8,r11,r8
800030b2:	f4 08 00 08 	add	r8,r10,r8
800030b6:	e0 6a 0b 0c 	mov	r10,2828
										edit_cv_value = -1;
800030ba:	f4 08 00 08 	add	r8,r10,r8
							}
						}
					}
				}
			}
			else if(edit_prob == 1) {
800030be:	12 08       	add	r8,r9
800030c0:	3c 09       	mov	r9,-64
800030c2:	c1 98       	rjmp	800030f4 <handler_MonomeGridKey+0xddc>
800030c4:	30 59       	mov	r9,5
800030c6:	f2 08 18 00 	cp.b	r8,r9
				if(z) {
800030ca:	c1 81       	brne	800030fa <handler_MonomeGridKey+0xde2>
800030cc:	e0 68 1a 77 	mov	r8,6775
					if(y == 4) w.wp[pattern].cv_probs[edit_cv_ch][x] = 192;
800030d0:	1b b9       	ld.ub	r9,sp[0x3]
800030d2:	11 8a       	ld.ub	r10,r8[0x0]
800030d4:	e0 68 1a 5b 	mov	r8,6747
800030d8:	a5 6a       	lsl	r10,0x4
800030da:	11 8b       	ld.ub	r11,r8[0x0]
800030dc:	e0 68 00 ec 	mov	r8,236
800030e0:	f6 08 02 48 	mul	r8,r11,r8
800030e4:	f4 08 00 08 	add	r8,r10,r8
800030e8:	e0 6a 0b 0c 	mov	r10,2828
800030ec:	f4 08 00 08 	add	r8,r10,r8
800030f0:	12 08       	add	r8,r9
800030f2:	38 09       	mov	r9,-128
800030f4:	f1 69 00 cc 	st.b	r8[204],r9
800030f8:	ce 48       	rjmp	800032c0 <handler_MonomeGridKey+0xfa8>
					else if(y == 5) w.wp[pattern].cv_probs[edit_cv_ch][x] = 128;
800030fa:	1b ba       	ld.ub	r10,sp[0x3]
800030fc:	e0 6b 1a 5b 	mov	r11,6747
80003100:	e0 69 0b 0c 	mov	r9,2828
80003104:	e0 6c 1a 77 	mov	r12,6775
80003108:	30 6e       	mov	lr,6
8000310a:	fc 08 18 00 	cp.b	r8,lr
8000310e:	c1 31       	brne	80003134 <handler_MonomeGridKey+0xe1c>
80003110:	19 88       	ld.ub	r8,r12[0x0]
80003112:	17 8c       	ld.ub	r12,r11[0x0]
80003114:	f0 0b 15 04 	lsl	r11,r8,0x4
80003118:	e0 68 00 ec 	mov	r8,236
8000311c:	f8 08 02 48 	mul	r8,r12,r8
80003120:	f6 08 00 08 	add	r8,r11,r8
80003124:	10 09       	add	r9,r8
80003126:	34 08       	mov	r8,64
80003128:	f2 0a 00 0a 	add	r10,r9,r10
8000312c:	f5 68 00 cc 	st.b	r10[204],r8
80003130:	cc 88       	rjmp	800032c0 <handler_MonomeGridKey+0xfa8>
					else if(y == 6) w.wp[pattern].cv_probs[edit_cv_ch][x] = 64;
80003132:	d7 03       	nop
80003134:	19 88       	ld.ub	r8,r12[0x0]
80003136:	17 8c       	ld.ub	r12,r11[0x0]
80003138:	f0 0b 15 04 	lsl	r11,r8,0x4
8000313c:	e0 68 00 ec 	mov	r8,236
80003140:	f8 08 02 48 	mul	r8,r12,r8
80003144:	f6 08 00 08 	add	r8,r11,r8
80003148:	10 09       	add	r9,r8
8000314a:	f2 0a 00 0a 	add	r10,r9,r10
8000314e:	f4 ca ff 34 	sub	r10,r10,-204
80003152:	30 08       	mov	r8,0
80003154:	b4 88       	st.b	r10[0x0],r8
80003156:	cb 58       	rjmp	800032c0 <handler_MonomeGridKey+0xfa8>
80003158:	58 2b       	cp.w	r11,2
8000315a:	e0 81 00 b3 	brne	800032c0 <handler_MonomeGridKey+0xfa8>
8000315e:	1b 99       	ld.ub	r9,sp[0x1]
80003160:	58 09       	cp.w	r9,0
80003162:	c3 f0       	breq	800031e0 <handler_MonomeGridKey+0xec8>
80003164:	e0 6b 1a 5d 	mov	r11,6749
80003168:	17 8b       	ld.ub	r11,r11[0x0]
8000316a:	ee 0b 18 00 	cp.b	r11,r7
8000316e:	c3 90       	breq	800031e0 <handler_MonomeGridKey+0xec8>
					else w.wp[pattern].cv_probs[edit_cv_ch][x] = 0;
80003170:	1b b9       	ld.ub	r9,sp[0x3]
80003172:	58 09       	cp.w	r9,0
80003174:	c0 b1       	brne	8000318a <handler_MonomeGridKey+0xe72>
80003176:	e0 69 1a 83 	mov	r9,6787
8000317a:	13 89       	ld.ub	r9,r9[0x0]
8000317c:	f2 08 00 08 	add	r8,r9,r8
80003180:	e0 69 0b 08 	mov	r9,2824
80003184:	20 28       	sub	r8,2
80003186:	b2 88       	st.b	r9[0x0],r8
80003188:	c2 08       	rjmp	800031c8 <handler_MonomeGridKey+0xeb0>
8000318a:	e0 6a 0b 07 	mov	r10,2823
8000318e:	15 8a       	ld.ub	r10,r10[0x0]
80003190:	f4 cb 00 01 	sub	r11,r10,1
				}
			}
		}

		// series mode
		else if(edit_mode == mSeries) {
80003194:	16 39       	cp.w	r9,r11
80003196:	c0 c1       	brne	800031ae <handler_MonomeGridKey+0xe96>
80003198:	e0 69 1a 83 	mov	r9,6787
			if(z && key_alt) {
8000319c:	13 89       	ld.ub	r9,r9[0x0]
8000319e:	f2 08 00 08 	add	r8,r9,r8
800031a2:	e0 69 0b 0c 	mov	r9,2828
800031a6:	20 28       	sub	r8,2
800031a8:	f3 68 0f 40 	st.b	r9[3904],r8
				if(x == 0)
800031ac:	c0 e8       	rjmp	800031c8 <handler_MonomeGridKey+0xeb0>
800031ae:	f4 09 18 00 	cp.b	r9,r10
					series_next = y-2+scroll_pos;
800031b2:	c0 b1       	brne	800031c8 <handler_MonomeGridKey+0xeb0>
800031b4:	e0 69 1a 83 	mov	r9,6787
800031b8:	13 89       	ld.ub	r9,r9[0x0]
800031ba:	f2 08 00 08 	add	r8,r9,r8
800031be:	e0 69 0b 0c 	mov	r9,2828
				else if(x == LENGTH-1)
800031c2:	20 28       	sub	r8,2
800031c4:	f3 68 0f 41 	st.b	r9[3905],r8
800031c8:	e0 68 0b 0c 	mov	r8,2828
					w.series_start = y-2+scroll_pos;
800031cc:	f1 39 0f 40 	ld.ub	r9,r8[3904]
800031d0:	f1 3a 0f 41 	ld.ub	r10,r8[3905]
800031d4:	f2 0a 18 00 	cp.b	r10,r9
800031d8:	c6 f2       	brcc	800032b6 <handler_MonomeGridKey+0xf9e>
800031da:	f1 69 0f 41 	st.b	r8[3905],r9
				else if(x == LENGTH)
800031de:	c6 c8       	rjmp	800032b6 <handler_MonomeGridKey+0xf9e>
800031e0:	e0 68 0a fc 	mov	r8,2812
					w.series_end = y-2+scroll_pos;
800031e4:	11 8a       	ld.ub	r10,r8[0x0]
800031e6:	f4 09 00 1a 	add	r10,r10,r9<<0x1
800031ea:	20 1a       	sub	r10,1
800031ec:	b0 8a       	st.b	r8[0x0],r10
800031ee:	30 09       	mov	r9,0
800031f0:	f2 0a 18 00 	cp.b	r10,r9

				if(w.series_end < w.series_start)
800031f4:	c0 24       	brge	800031f8 <handler_MonomeGridKey+0xee0>
800031f6:	b0 89       	st.b	r8[0x0],r9
800031f8:	30 08       	mov	r8,0
800031fa:	1b 99       	ld.ub	r9,sp[0x1]
800031fc:	f0 09 18 00 	cp.b	r9,r8
80003200:	c5 b0       	breq	800032b6 <handler_MonomeGridKey+0xf9e>
80003202:	e0 68 1a 83 	mov	r8,6787
					w.series_end = w.series_start;
80003206:	11 88       	ld.ub	r8,r8[0x0]
80003208:	1b aa       	ld.ub	r10,sp[0x2]
			}
			else {
				keycount_series += z*2-1;
8000320a:	10 0a       	add	r10,r8
8000320c:	e0 68 0b 0c 	mov	r8,2828
80003210:	f4 c9 f8 a2 	sub	r9,r10,-1886
80003214:	20 2a       	sub	r10,2
				if(keycount_series < 0)
80003216:	f0 09 04 1b 	ld.sh	r11,r8[r9<<0x1]
8000321a:	30 08       	mov	r8,0
8000321c:	f9 db c0 10 	bfextu	r12,r11,0x0,0x10
					keycount_series = 0;

				if(z) {
80003220:	10 99       	mov	r9,r8
80003222:	f8 08 08 4e 	asr	lr,r12,r8
80003226:	2f f8       	sub	r8,-1
80003228:	fd de c0 01 	bfextu	lr,lr,0x0,0x1
					count = 0;
					for(i1=0;i1<16;i1++)
						count += (w.series_list[y-2+scroll_pos] >> i1) & 1;
8000322c:	fc 09 00 09 	add	r9,lr,r9
80003230:	5c 59       	castu.b	r9
80003232:	59 08       	cp.w	r8,16
80003234:	cf 71       	brne	80003222 <handler_MonomeGridKey+0xf0a>
80003236:	30 18       	mov	r8,1
80003238:	e0 6c 0a fc 	mov	r12,2812
8000323c:	f0 09 18 00 	cp.b	r9,r8
80003240:	5f 8e       	srls	lr
80003242:	19 87       	ld.ub	r7,r12[0x0]
80003244:	f0 07 18 00 	cp.b	r7,r8
80003248:	5f 0c       	sreq	r12
8000324a:	fd ec 00 0c 	and	r12,lr,r12
8000324e:	30 0e       	mov	lr,0
80003250:	fc 0c 18 00 	cp.b	r12,lr
80003254:	c0 c0       	breq	8000326c <handler_MonomeGridKey+0xf54>
				if(keycount_series < 0)
					keycount_series = 0;

				if(z) {
					count = 0;
					for(i1=0;i1<16;i1++)
80003256:	1b b8       	ld.ub	r8,sp[0x3]
80003258:	f4 ca f8 a0 	sub	r10,r10,-1888
						count += (w.series_list[y-2+scroll_pos] >> i1) & 1;

					// single press toggle
					if(keycount_series == 1 && count < 2) {
8000325c:	30 19       	mov	r9,1
8000325e:	f2 08 09 49 	lsl	r9,r9,r8
80003262:	e0 68 0b 0c 	mov	r8,2828
80003266:	f0 0a 0a 19 	st.h	r8[r10<<0x1],r9
8000326a:	c2 68       	rjmp	800032b6 <handler_MonomeGridKey+0xf9e>
8000326c:	f0 07 18 00 	cp.b	r7,r8
80003270:	5f 9e       	srgt	lr
80003272:	f0 09 18 00 	cp.b	r9,r8
80003276:	5f b8       	srhi	r8
						w.series_list[y-2+scroll_pos] = (1<<x);
80003278:	1c 48       	or	r8,lr
8000327a:	f8 08 18 00 	cp.b	r8,r12
8000327e:	c1 c0       	breq	800032b6 <handler_MonomeGridKey+0xf9e>
80003280:	f4 c9 f8 a0 	sub	r9,r10,-1888
80003284:	30 1c       	mov	r12,1
80003286:	1b ba       	ld.ub	r10,sp[0x3]
80003288:	f8 0a 09 4a 	lsl	r10,r12,r10
					}
					// multi-select
					else if(keycount_series > 1 || count > 1) {
8000328c:	14 5b       	eor	r11,r10
8000328e:	e0 68 0b 0c 	mov	r8,2828
80003292:	f0 09 0a 1b 	st.h	r8[r9<<0x1],r11
80003296:	1b ab       	ld.ub	r11,sp[0x2]
80003298:	e0 69 1a 83 	mov	r9,6787
8000329c:	13 89       	ld.ub	r9,r9[0x0]
8000329e:	f6 09 00 09 	add	r9,r11,r9
						w.series_list[y-2+scroll_pos] ^= (1<<x);
800032a2:	30 0b       	mov	r11,0
800032a4:	f2 c9 f8 a2 	sub	r9,r9,-1886
800032a8:	f0 09 04 1c 	ld.sh	r12,r8[r9<<0x1]
800032ac:	f6 0c 19 00 	cp.h	r12,r11
800032b0:	c0 31       	brne	800032b6 <handler_MonomeGridKey+0xf9e>
800032b2:	f0 09 0a 1a 	st.h	r8[r9<<0x1],r10

						// ensure not fully clear
						if(!w.series_list[y-2+scroll_pos])
800032b6:	e0 68 07 69 	mov	r8,1897
800032ba:	11 89       	ld.ub	r9,r8[0x0]
800032bc:	2f f9       	sub	r9,-1
800032be:	b0 89       	st.b	r8[0x0],r9
800032c0:	2f fd       	sub	sp,-4
800032c2:	d8 22       	popm	r4-r7,pc

800032c4 <handler_MonomeRefresh>:
800032c4:	d4 21       	pushm	r4-r7,lr
800032c6:	e0 68 07 69 	mov	r8,1897
800032ca:	11 89       	ld.ub	r9,r8[0x0]
800032cc:	30 08       	mov	r8,0
							w.series_list[y-2+scroll_pos] = (1<<x);
800032ce:	f0 09 18 00 	cp.b	r9,r8
					}
				}
			}

			monomeFrameDirty++;
800032d2:	c4 60       	breq	8000335e <handler_MonomeRefresh+0x9a>
800032d4:	e0 69 1a 50 	mov	r9,6736
800032d8:	13 89       	ld.ub	r9,r9[0x0]
		}
	}
}
800032da:	f0 09 18 00 	cp.b	r9,r8
800032de:	c0 61       	brne	800032ea <handler_MonomeRefresh+0x26>
800032e0:	e0 68 0b 00 	mov	r8,2816
800032e4:	70 08       	ld.w	r8,r8[0x0]
800032e6:	5d 18       	icall	r8
800032e8:	c3 78       	rjmp	80003356 <handler_MonomeRefresh+0x92>
800032ea:	30 08       	mov	r8,0
800032ec:	e0 6c 1a dc 	mov	r12,6876
800032f0:	10 9b       	mov	r11,r8
800032f2:	38 0a       	mov	r10,-128
800032f4:	f8 08 0b 0b 	st.b	r12[r8],r11
800032f8:	e0 69 1a dc 	mov	r9,6876
	u8 i1,i2;

	for(i1=0;i1<128;i1++)
		monomeLedBuffer[i1] = 0;

	monomeLedBuffer[preset_select * 16] = 11;
800032fc:	2f f8       	sub	r8,-1
800032fe:	5c 58       	castu.b	r8
80003300:	f4 08 18 00 	cp.b	r8,r10

	for(i1=0;i1<8;i1++)
		for(i2=0;i2<8;i2++)
			if(glyph[i1] & (1<<i2))
				monomeLedBuffer[i1*16+i2+8] = 11;
80003304:	cf 81       	brne	800032f4 <handler_MonomeRefresh+0x30>
	u8 i1,i2;

	for(i1=0;i1<128;i1++)
		monomeLedBuffer[i1] = 0;

	monomeLedBuffer[preset_select * 16] = 11;
80003306:	30 b8       	mov	r8,11
80003308:	e0 6a 0b 04 	mov	r10,2820
8000330c:	15 8a       	ld.ub	r10,r10[0x0]
	// monome_set_quadrant_flag(1);
	timers_set_monome();
}

static void handler_MonomePoll(s32 data) { monome_read_serial(); }
static void handler_MonomeRefresh(s32 data) {
8000330e:	a5 6a       	lsl	r10,0x4
80003310:	10 9e       	mov	lr,r8
80003312:	f2 0a 0b 08 	st.b	r9[r10],r8

	monomeLedBuffer[preset_select * 16] = 11;

	for(i1=0;i1<8;i1++)
		for(i2=0;i2<8;i2++)
			if(glyph[i1] & (1<<i2))
80003316:	12 97       	mov	r7,r9
80003318:	e0 68 1a 6c 	mov	r8,6764
8000331c:	30 8a       	mov	r10,8
8000331e:	f0 0a 00 0c 	add	r12,r8,r10
				monomeLedBuffer[i1*16+i2+8] = 11;
80003322:	c0 f8       	rjmp	80003340 <handler_MonomeRefresh+0x7c>
80003324:	ec 09 08 45 	asr	r5,r6,r9
		monomeLedBuffer[i1] = 0;

	monomeLedBuffer[preset_select * 16] = 11;

	for(i1=0;i1<8;i1++)
		for(i2=0;i2<8;i2++)
80003328:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
8000332c:	c0 20       	breq	80003330 <handler_MonomeRefresh+0x6c>
	for(i1=0;i1<128;i1++)
		monomeLedBuffer[i1] = 0;

	monomeLedBuffer[preset_select * 16] = 11;

	for(i1=0;i1<8;i1++)
8000332e:	b6 8e       	st.b	r11[0x0],lr
80003330:	2f f9       	sub	r9,-1
		for(i2=0;i2<8;i2++)
			if(glyph[i1] & (1<<i2))
80003332:	2f fb       	sub	r11,-1
80003334:	58 89       	cp.w	r9,8
80003336:	cf 71       	brne	80003324 <handler_MonomeRefresh+0x60>
80003338:	2f f8       	sub	r8,-1
8000333a:	2f 0a       	sub	r10,-16
				monomeLedBuffer[i1*16+i2+8] = 11;

	monome_set_quadrant_flag(0);
8000333c:	18 38       	cp.w	r8,r12
8000333e:	c0 60       	breq	8000334a <handler_MonomeRefresh+0x86>
80003340:	11 86       	ld.ub	r6,r8[0x0]
	monome_set_quadrant_flag(1);
80003342:	f4 07 00 0b 	add	r11,r10,r7
80003346:	30 09       	mov	r9,0
static void handler_MonomeRefresh(s32 data) {
	if(monomeFrameDirty) {
		if(preset_mode == 0) (*re)(); //refresh_mono();
		else refresh_preset();

		(*monome_refresh)();
80003348:	ce eb       	rjmp	80003324 <handler_MonomeRefresh+0x60>
8000334a:	30 0c       	mov	r12,0
8000334c:	e0 a0 0f 38 	rcall	800051bc <monome_set_quadrant_flag>
80003350:	30 1c       	mov	r12,1
80003352:	e0 a0 0f 35 	rcall	800051bc <monome_set_quadrant_flag>
80003356:	e0 68 1a d0 	mov	r8,6864
8000335a:	70 08       	ld.w	r8,r8[0x0]
8000335c:	5d 18       	icall	r8
8000335e:	d8 22       	popm	r4-r7,pc

80003360 <refresh_mono>:
80003360:	d4 31       	pushm	r0-r7,lr
80003362:	20 5d       	sub	sp,20
80003364:	e0 68 1a dc 	mov	r8,6876
80003368:	30 09       	mov	r9,0
8000336a:	f0 ca ff f0 	sub	r10,r8,-16
8000336e:	b0 89       	st.b	r8[0x0],r9
	u8 i1,i2;

	// clear top, cut, pattern, prob
	for(i1=0;i1<16;i1++) {
		monomeLedBuffer[i1] = 0;
		monomeLedBuffer[16+i1] = 0;
80003370:	f1 69 00 10 	st.b	r8[16],r9
		monomeLedBuffer[32+i1] = 0;
80003374:	f1 69 00 20 	st.b	r8[32],r9
		monomeLedBuffer[48+i1] = 0;
80003378:	f1 69 00 30 	st.b	r8[48],r9
// application grid redraw without varibright
static void refresh_mono() {
	u8 i1,i2;

	// clear top, cut, pattern, prob
	for(i1=0;i1<16;i1++) {
8000337c:	2f f8       	sub	r8,-1
8000337e:	14 38       	cp.w	r8,r10
		monomeLedBuffer[32+i1] = 0;
		monomeLedBuffer[48+i1] = 0;
	}

	// show mode
	if(edit_mode == mTrig) {
80003380:	cf 71       	brne	8000336e <refresh_mono+0xe>
80003382:	e0 68 1a 88 	mov	r8,6792
80003386:	70 09       	ld.w	r9,r8[0x0]
		monomeLedBuffer[0] = 11;
80003388:	58 09       	cp.w	r9,0
8000338a:	c0 91       	brne	8000339c <refresh_mono+0x3c>
		monomeLedBuffer[1] = 11;
		monomeLedBuffer[2] = 11;
		monomeLedBuffer[3] = 11;
8000338c:	e0 68 1a dc 	mov	r8,6876
	}

	// show mode
	if(edit_mode == mTrig) {
		monomeLedBuffer[0] = 11;
		monomeLedBuffer[1] = 11;
80003390:	30 ba       	mov	r10,11
		monomeLedBuffer[2] = 11;
80003392:	b0 ba       	st.b	r8[0x3],r10
80003394:	b0 8a       	st.b	r8[0x0],r10
		monomeLedBuffer[3] = 11;
	}
	else if(edit_mode == mMap) {
80003396:	b0 9a       	st.b	r8[0x1],r10
80003398:	b0 aa       	st.b	r8[0x2],r10
		if(SIZE==16) {
8000339a:	c2 b8       	rjmp	800033f0 <refresh_mono+0x90>
8000339c:	58 19       	cp.w	r9,1
8000339e:	c1 d1       	brne	800033d8 <refresh_mono+0x78>
800033a0:	e0 68 0a f4 	mov	r8,2804
800033a4:	e0 6a 1a dc 	mov	r10,6876
800033a8:	11 8c       	ld.ub	r12,r8[0x0]
			monomeLedBuffer[4+(edit_cv_ch*4)] = 11;
800033aa:	31 0b       	mov	r11,16
800033ac:	e0 68 1a 77 	mov	r8,6775
800033b0:	f6 0c 18 00 	cp.b	r12,r11
800033b4:	c0 d1       	brne	800033ce <refresh_mono+0x6e>
			monomeLedBuffer[5+(edit_cv_ch*4)] = 11;
800033b6:	11 8b       	ld.ub	r11,r8[0x0]
800033b8:	30 b8       	mov	r8,11
			monomeLedBuffer[6+(edit_cv_ch*4)] = 11;
			monomeLedBuffer[7+(edit_cv_ch*4)] = 11;
800033ba:	f6 cc ff ff 	sub	r12,r11,-1
	}
	else if(edit_mode == mMap) {
		if(SIZE==16) {
			monomeLedBuffer[4+(edit_cv_ch*4)] = 11;
			monomeLedBuffer[5+(edit_cv_ch*4)] = 11;
			monomeLedBuffer[6+(edit_cv_ch*4)] = 11;
800033be:	f4 0c 0b 28 	st.b	r10[r12<<0x2],r8
			monomeLedBuffer[7+(edit_cv_ch*4)] = 11;
		}
		else
			monomeLedBuffer[4+edit_cv_ch] = 11;
800033c2:	f4 0b 00 2a 	add	r10,r10,r11<<0x2
800033c6:	b4 f8       	st.b	r10[0x7],r8
800033c8:	b4 d8       	st.b	r10[0x5],r8
800033ca:	b4 e8       	st.b	r10[0x6],r8
	}
	else if(edit_mode == mSeries) {
800033cc:	c1 28       	rjmp	800033f0 <refresh_mono+0x90>
800033ce:	11 88       	ld.ub	r8,r8[0x0]
		monomeLedBuffer[LENGTH-1] = 11;
800033d0:	10 0a       	add	r10,r8
800033d2:	30 b8       	mov	r8,11
800033d4:	b4 c8       	st.b	r10[0x4],r8
800033d6:	c0 d8       	rjmp	800033f0 <refresh_mono+0x90>
800033d8:	58 29       	cp.w	r9,2
800033da:	c0 b1       	brne	800033f0 <refresh_mono+0x90>
800033dc:	e0 6a 1a dc 	mov	r10,6876
	}

	// alt
	if(key_alt) monomeLedBuffer[LENGTH] = 11;
800033e0:	e0 68 0b 07 	mov	r8,2823
800033e4:	11 88       	ld.ub	r8,r8[0x0]
800033e6:	f4 08 00 08 	add	r8,r10,r8
800033ea:	30 ba       	mov	r10,11
800033ec:	f1 6a ff ff 	st.b	r8[-1],r10
800033f0:	e0 68 1a 5d 	mov	r8,6749

	// show position
	monomeLedBuffer[16+pos] = 15;
800033f4:	11 86       	ld.ub	r6,r8[0x0]
800033f6:	58 06       	cp.w	r6,0
800033f8:	c0 90       	breq	8000340a <refresh_mono+0xaa>
800033fa:	e0 68 0b 07 	mov	r8,2823
800033fe:	30 bb       	mov	r11,11
80003400:	11 88       	ld.ub	r8,r8[0x0]
80003402:	e0 6a 1a dc 	mov	r10,6876
80003406:	f4 08 0b 0b 	st.b	r10[r8],r11

	// show pattern
	monomeLedBuffer[32+pattern] = 11;
8000340a:	e0 68 0b 06 	mov	r8,2822
8000340e:	e0 67 1a dc 	mov	r7,6876
80003412:	11 82       	ld.ub	r2,r8[0x0]
80003414:	f1 d2 b0 08 	bfexts	r8,r2,0x0,0x8

	// show step data
	if(edit_mode == mTrig) {
80003418:	ee 08 00 08 	add	r8,r7,r8
		if(edit_prob == 0) {
8000341c:	30 fa       	mov	r10,15
8000341e:	f1 6a 00 10 	st.b	r8[16],r10
80003422:	e0 68 1a 5b 	mov	r8,6747
80003426:	30 bc       	mov	r12,11
80003428:	11 8b       	ld.ub	r11,r8[0x0]
8000342a:	ee 0b 00 08 	add	r8,r7,r11
	monome_set_quadrant_flag(1);
}


// application grid redraw without varibright
static void refresh_mono() {
8000342e:	f1 6c 00 20 	st.b	r8[32],r12
80003432:	58 09       	cp.w	r9,0
	// show pattern
	monomeLedBuffer[32+pattern] = 11;

	// show step data
	if(edit_mode == mTrig) {
		if(edit_prob == 0) {
80003434:	c6 d1       	brne	8000350e <refresh_mono+0x1ae>
	monome_set_quadrant_flag(1);
}


// application grid redraw without varibright
static void refresh_mono() {
80003436:	e0 68 1a 81 	mov	r8,6785
8000343a:	11 88       	ld.ub	r8,r8[0x0]
	// show step data
	if(edit_mode == mTrig) {
		if(edit_prob == 0) {
			for(i1=0;i1<SIZE;i1++) {
	 			for(i2=0;i2<4;i2++) {
					if(w.wp[pattern].steps[i1] & (1<<i2)) monomeLedBuffer[(i2+4)*16+i1] = 11;
8000343c:	58 08       	cp.w	r8,0
8000343e:	c2 f1       	brne	8000349c <refresh_mono+0x13c>
80003440:	e0 68 00 ec 	mov	r8,236
80003444:	b1 3b       	mul	r11,r8
80003446:	e0 68 0b 0c 	mov	r8,2828
8000344a:	2e 4b       	sub	r11,-28
8000344c:	10 0b       	add	r11,r8
					else monomeLedBuffer[(i2+4)*16+i1] = 0;
8000344e:	e0 68 0a f4 	mov	r8,2804

	// show step data
	if(edit_mode == mTrig) {
		if(edit_prob == 0) {
			for(i1=0;i1<SIZE;i1++) {
	 			for(i2=0;i2<4;i2++) {
80003452:	0e 94       	mov	r4,r7
80003454:	11 85       	ld.ub	r5,r8[0x0]
					if(w.wp[pattern].steps[i1] & (1<<i2)) monomeLedBuffer[(i2+4)*16+i1] = 11;
					else monomeLedBuffer[(i2+4)*16+i1] = 0;
				}

				// probs
				if(w.wp[pattern].step_probs[i1] > 0) monomeLedBuffer[48+i1] = 11;
80003456:	2d 07       	sub	r7,-48
80003458:	2c 05       	sub	r5,-64
8000345a:	34 08       	mov	r8,64
8000345c:	c1 68       	rjmp	80003488 <refresh_mono+0x128>
8000345e:	e6 0a 08 46 	asr	r6,r3,r10
80003462:	ed d6 c0 01 	bfextu	r6,r6,0x0,0x1
	monomeLedBuffer[32+pattern] = 11;

	// show step data
	if(edit_mode == mTrig) {
		if(edit_prob == 0) {
			for(i1=0;i1<SIZE;i1++) {
80003466:	f8 02 17 10 	movne	r2,r12
8000346a:	ec 02 17 00 	moveq	r2,r6
	 			for(i2=0;i2<4;i2++) {
					if(w.wp[pattern].steps[i1] & (1<<i2)) monomeLedBuffer[(i2+4)*16+i1] = 11;
8000346e:	bc 82       	st.b	lr[0x0],r2
80003470:	2f fa       	sub	r10,-1
80003472:	2f 0e       	sub	lr,-16
80003474:	58 4a       	cp.w	r10,4
80003476:	cf 41       	brne	8000345e <refresh_mono+0xfe>
80003478:	17 8a       	ld.ub	r10,r11[0x0]
8000347a:	f2 0a 18 00 	cp.b	r10,r9
8000347e:	c0 20       	breq	80003482 <refresh_mono+0x122>
80003480:	ae 8c       	st.b	r7[0x0],r12
80003482:	2f fb       	sub	r11,-1
80003484:	2f f7       	sub	r7,-1
80003486:	2f f8       	sub	r8,-1
80003488:	0a 38       	cp.w	r8,r5
8000348a:	e0 80 01 f9 	breq	8000387c <refresh_mono+0x51c>
8000348e:	f7 33 ff f0 	ld.ub	r3,r11[-16]
80003492:	f0 04 00 0e 	add	lr,r8,r4
80003496:	30 0a       	mov	r10,0
80003498:	ce 3b       	rjmp	8000345e <refresh_mono+0xfe>
8000349a:	d7 03       	nop
8000349c:	30 1a       	mov	r10,1
8000349e:	f4 08 18 00 	cp.b	r8,r10

				// probs
				if(w.wp[pattern].step_probs[i1] > 0) monomeLedBuffer[48+i1] = 11;
			}
		}
		else if(edit_prob == 1) {
800034a2:	e0 81 01 ed 	brne	8000387c <refresh_mono+0x51c>
800034a6:	e0 68 0a f4 	mov	r8,2804
			for(i1=0;i1<SIZE;i1++) {
800034aa:	11 85       	ld.ub	r5,r8[0x0]
800034ac:	e0 68 00 ec 	mov	r8,236
800034b0:	b1 3b       	mul	r11,r8
800034b2:	e0 68 0b 0c 	mov	r8,2828
					monomeLedBuffer[48+i1] = 0;
					monomeLedBuffer[112+i1] = 11;
				}
				else if(w.wp[pattern].step_probs[i1]) {
					monomeLedBuffer[48+i1] = 11;
					monomeLedBuffer[64+16*(3-(w.wp[pattern].step_probs[i1]>>6))+i1] = 11;
800034b6:	0e 94       	mov	r4,r7
				// probs
				if(w.wp[pattern].step_probs[i1] > 0) monomeLedBuffer[48+i1] = 11;
			}
		}
		else if(edit_prob == 1) {
			for(i1=0;i1<SIZE;i1++) {
800034b8:	2e 4b       	sub	r11,-28
				monomeLedBuffer[64+i1] = 0;
800034ba:	12 9a       	mov	r10,r9
				// probs
				if(w.wp[pattern].step_probs[i1] > 0) monomeLedBuffer[48+i1] = 11;
			}
		}
		else if(edit_prob == 1) {
			for(i1=0;i1<SIZE;i1++) {
800034bc:	10 0b       	add	r11,r8
				monomeLedBuffer[64+i1] = 0;
				monomeLedBuffer[80+i1] = 0;
				monomeLedBuffer[96+i1] = 0;
				monomeLedBuffer[112+i1] = 0;

				if(w.wp[pattern].step_probs[i1] == 255)
800034be:	3f f6       	mov	r6,-1
				// probs
				if(w.wp[pattern].step_probs[i1] > 0) monomeLedBuffer[48+i1] = 11;
			}
		}
		else if(edit_prob == 1) {
			for(i1=0;i1<SIZE;i1++) {
800034c0:	ee c8 ff d0 	sub	r8,r7,-48
800034c4:	29 07       	sub	r7,-112
800034c6:	c1 f8       	rjmp	80003504 <refresh_mono+0x1a4>
				monomeLedBuffer[64+i1] = 0;
800034c8:	f1 6a 00 10 	st.b	r8[16],r10
				monomeLedBuffer[80+i1] = 0;
800034cc:	f1 6a 00 20 	st.b	r8[32],r10
				monomeLedBuffer[96+i1] = 0;
800034d0:	f1 6a 00 30 	st.b	r8[48],r10
				monomeLedBuffer[112+i1] = 0;
800034d4:	ae 8a       	st.b	r7[0x0],r10

				if(w.wp[pattern].step_probs[i1] == 255)
800034d6:	17 8e       	ld.ub	lr,r11[0x0]
800034d8:	ec 0e 18 00 	cp.b	lr,r6
800034dc:	c0 31       	brne	800034e2 <refresh_mono+0x182>
					monomeLedBuffer[48+i1] = 11;
800034de:	b0 8c       	st.b	r8[0x0],r12
800034e0:	c0 e8       	rjmp	800034fc <refresh_mono+0x19c>
				else if(w.wp[pattern].step_probs[i1] == 0) {
800034e2:	58 0e       	cp.w	lr,0
800034e4:	c0 41       	brne	800034ec <refresh_mono+0x18c>
					monomeLedBuffer[48+i1] = 0;
800034e6:	b0 8e       	st.b	r8[0x0],lr
					monomeLedBuffer[112+i1] = 11;
800034e8:	ae 8c       	st.b	r7[0x0],r12
800034ea:	c0 98       	rjmp	800034fc <refresh_mono+0x19c>
				}
				else if(w.wp[pattern].step_probs[i1]) {
					monomeLedBuffer[48+i1] = 11;
800034ec:	b0 8c       	st.b	r8[0x0],r12
					monomeLedBuffer[64+16*(3-(w.wp[pattern].step_probs[i1]>>6))+i1] = 11;
800034ee:	a7 8e       	lsr	lr,0x6
800034f0:	fc 0e 11 07 	rsub	lr,lr,7
800034f4:	a5 6e       	lsl	lr,0x4
800034f6:	12 0e       	add	lr,r9
800034f8:	e8 0e 0b 0c 	st.b	r4[lr],r12
800034fc:	2f f9       	sub	r9,-1
800034fe:	2f f8       	sub	r8,-1
80003500:	2f f7       	sub	r7,-1
80003502:	2f fb       	sub	r11,-1
				// probs
				if(w.wp[pattern].step_probs[i1] > 0) monomeLedBuffer[48+i1] = 11;
			}
		}
		else if(edit_prob == 1) {
			for(i1=0;i1<SIZE;i1++) {
80003504:	ea 09 18 00 	cp.b	r9,r5
80003508:	ce 03       	brcs	800034c8 <refresh_mono+0x168>
8000350a:	e0 8f 01 b9 	bral	8000387c <refresh_mono+0x51c>
			}
		}
	}

	// show map
	else if(edit_mode == mMap) {
8000350e:	58 19       	cp.w	r9,1
80003510:	e0 81 01 34 	brne	80003778 <refresh_mono+0x418>
		if(edit_prob == 0) {
80003514:	e0 68 1a 81 	mov	r8,6785
80003518:	11 88       	ld.ub	r8,r8[0x0]
8000351a:	58 08       	cp.w	r8,0
8000351c:	e0 81 00 ee 	brne	800036f8 <refresh_mono+0x398>
			// CURVES
			if(w.wp[pattern].cv_mode[edit_cv_ch] == 0) {
80003520:	e0 69 1a 77 	mov	r9,6775
80003524:	e0 65 0b 0c 	mov	r5,2828
80003528:	13 8a       	ld.ub	r10,r9[0x0]
8000352a:	e0 66 00 ec 	mov	r6,236
8000352e:	f6 06 02 46 	mul	r6,r11,r6
80003532:	ea 06 00 09 	add	r9,r5,r6
80003536:	14 09       	add	r9,r10
80003538:	13 e4       	ld.ub	r4,r9[0x6]
8000353a:	f0 04 18 00 	cp.b	r4,r8
8000353e:	c4 71       	brne	800035cc <refresh_mono+0x26c>
80003540:	f4 09 15 04 	lsl	r9,r10,0x4
80003544:	a5 7a       	lsl	r10,0x5
80003546:	0c 09       	add	r9,r6
80003548:	f4 06 00 06 	add	r6,r10,r6
8000354c:	ec c6 ff 74 	sub	r6,r6,-140
	monome_set_quadrant_flag(1);
}


// application grid redraw without varibright
static void refresh_mono() {
80003550:	2c 07       	sub	r7,-64

	// show map
	else if(edit_mode == mMap) {
		if(edit_prob == 0) {
			// CURVES
			if(w.wp[pattern].cv_mode[edit_cv_ch] == 0) {
80003552:	f2 c9 ff 34 	sub	r9,r9,-204
80003556:	e0 68 0a f4 	mov	r8,2804
	monome_set_quadrant_flag(1);
}


// application grid redraw without varibright
static void refresh_mono() {
8000355a:	0a 09       	add	r9,r5
8000355c:	11 83       	ld.ub	r3,r8[0x0]
			if(w.wp[pattern].cv_mode[edit_cv_ch] == 0) {
				for(i1=0;i1<SIZE;i1++) {
					// probs
					if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 11;

					monomeLedBuffer[112+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 511) * 11;
8000355e:	ec 05 00 05 	add	r5,r6,r5
					monomeLedBuffer[96+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 1535) * 11;
80003562:	ee 03 00 03 	add	r3,r7,r3
					monomeLedBuffer[80+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 2559) * 11;
80003566:	e0 66 01 ff 	mov	r6,511
					monomeLedBuffer[64+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 3583) * 11;
8000356a:	e0 6e 05 ff 	mov	lr,1535
8000356e:	e0 6b 09 ff 	mov	r11,2559
		if(edit_prob == 0) {
			// CURVES
			if(w.wp[pattern].cv_mode[edit_cv_ch] == 0) {
				for(i1=0;i1<SIZE;i1++) {
					// probs
					if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 11;
80003572:	e0 6a 0d ff 	mov	r10,3583
80003576:	c2 88       	rjmp	800035c6 <refresh_mono+0x266>
80003578:	13 88       	ld.ub	r8,r9[0x0]
8000357a:	e8 08 18 00 	cp.b	r8,r4

					monomeLedBuffer[112+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 511) * 11;
8000357e:	c0 30       	breq	80003584 <refresh_mono+0x224>
80003580:	ef 6c ff f0 	st.b	r7[-16],r12
80003584:	0b 18       	ld.sh	r8,r5++
80003586:	f0 06 19 00 	cp.h	r6,r8
					monomeLedBuffer[96+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 1535) * 11;
					monomeLedBuffer[80+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 2559) * 11;
					monomeLedBuffer[64+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 3583) * 11;
8000358a:	f9 b1 03 0b 	movlo	r1,11
8000358e:	f9 b1 02 00 	movhs	r1,0
80003592:	f0 0a 19 00 	cp.h	r10,r8
			if(w.wp[pattern].cv_mode[edit_cv_ch] == 0) {
				for(i1=0;i1<SIZE;i1++) {
					// probs
					if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 11;

					monomeLedBuffer[112+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 511) * 11;
80003596:	f9 b2 03 0b 	movlo	r2,11
					monomeLedBuffer[96+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 1535) * 11;
					monomeLedBuffer[80+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 2559) * 11;
					monomeLedBuffer[64+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 3583) * 11;
8000359a:	f9 b2 02 00 	movhs	r2,0
				for(i1=0;i1<SIZE;i1++) {
					// probs
					if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 11;

					monomeLedBuffer[112+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 511) * 11;
					monomeLedBuffer[96+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 1535) * 11;
8000359e:	ef 61 00 30 	st.b	r7[48],r1
800035a2:	2f f9       	sub	r9,-1
800035a4:	f0 0e 19 00 	cp.h	lr,r8
					monomeLedBuffer[80+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 2559) * 11;
800035a8:	f9 b1 03 0b 	movlo	r1,11
800035ac:	f9 b1 02 00 	movhs	r1,0
800035b0:	f0 0b 19 00 	cp.h	r11,r8
				for(i1=0;i1<SIZE;i1++) {
					// probs
					if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 11;

					monomeLedBuffer[112+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 511) * 11;
					monomeLedBuffer[96+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 1535) * 11;
800035b4:	f9 b8 03 0b 	movlo	r8,11
					monomeLedBuffer[80+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 2559) * 11;
800035b8:	f9 b8 02 00 	movhs	r8,0
					monomeLedBuffer[64+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 3583) * 11;
800035bc:	ef 61 00 20 	st.b	r7[32],r1
	// show map
	else if(edit_mode == mMap) {
		if(edit_prob == 0) {
			// CURVES
			if(w.wp[pattern].cv_mode[edit_cv_ch] == 0) {
				for(i1=0;i1<SIZE;i1++) {
800035c0:	ef 68 00 10 	st.b	r7[16],r8
					monomeLedBuffer[64+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 3583) * 11;
				}
			}
			// MAP
			else {
				if(!scale_select) {
800035c4:	0e c2       	st.b	r7++,r2
800035c6:	06 37       	cp.w	r7,r3
800035c8:	cd 81       	brne	80003578 <refresh_mono+0x218>
800035ca:	c5 99       	rjmp	8000387c <refresh_mono+0x51c>
800035cc:	e0 69 1a 80 	mov	r9,6784
800035d0:	e0 62 0a f4 	mov	r2,2804
800035d4:	13 89       	ld.ub	r9,r9[0x0]
800035d6:	f4 04 15 04 	lsl	r4,r10,0x4
800035da:	12 93       	mov	r3,r9
800035dc:	f0 09 18 00 	cp.b	r9,r8
	monome_set_quadrant_flag(1);
}


// application grid redraw without varibright
static void refresh_mono() {
800035e0:	c0 c0       	breq	800035f8 <refresh_mono+0x298>
					monomeLedBuffer[64+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 3583) * 11;
				}
			}
			// MAP
			else {
				if(!scale_select) {
800035e2:	e8 06 00 06 	add	r6,r4,r6
	monome_set_quadrant_flag(1);
}


// application grid redraw without varibright
static void refresh_mono() {
800035e6:	2c 07       	sub	r7,-64
800035e8:	ec c6 ff 34 	sub	r6,r6,-204
800035ec:	05 89       	ld.ub	r9,r2[0x0]
800035ee:	ec 05 00 05 	add	r5,r6,r5
800035f2:	ee 09 00 09 	add	r9,r7,r9
800035f6:	c7 98       	rjmp	800036e8 <refresh_mono+0x388>
800035f8:	e8 06 00 06 	add	r6,r4,r6
800035fc:	ec c6 ff 34 	sub	r6,r6,-204
							monomeLedBuffer[80+i1] = 0;
							monomeLedBuffer[96+i1] = 0;
						}

						// show steps
						if(w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] & (1<<i1)) monomeLedBuffer[112+i1] = 11;
80003600:	0a 06       	add	r6,r5
80003602:	e0 65 1a 68 	mov	r5,6760
80003606:	f6 0e 10 76 	mul	lr,r11,118

						// clear edit row
						monomeLedBuffer[64+i1] = 0;

						// show current edit value, selected
						if(edit_cv_value != -1) {
8000360a:	e8 0e 00 03 	add	r3,r4,lr
							if((w.wp[pattern].cv_values[edit_cv_value] >> 8) >= i1)
8000360e:	0b 84       	ld.ub	r4,r5[0x0]
							monomeLedBuffer[80+i1] = 0;
							monomeLedBuffer[96+i1] = 0;
						}

						// show steps
						if(w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] & (1<<i1)) monomeLedBuffer[112+i1] = 11;
80003610:	e0 65 1a 5a 	mov	r5,6746

						// clear edit row
						monomeLedBuffer[64+i1] = 0;

						// show current edit value, selected
						if(edit_cv_value != -1) {
80003614:	0b 85       	ld.ub	r5,r5[0x0]
							monomeLedBuffer[80+i1] = 0;
							monomeLedBuffer[96+i1] = 0;
						}

						// show steps
						if(w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] & (1<<i1)) monomeLedBuffer[112+i1] = 11;
80003616:	0a 03       	add	r3,r5
80003618:	2d a3       	sub	r3,-38
8000361a:	50 23       	stdsp	sp[0x8],r3
8000361c:	08 93       	mov	r3,r4
8000361e:	5c 63       	casts.b	r3
						// clear edit row
						monomeLedBuffer[64+i1] = 0;

						// show current edit value, selected
						if(edit_cv_value != -1) {
							if((w.wp[pattern].cv_values[edit_cv_value] >> 8) >= i1)
80003620:	06 0e       	add	lr,r3
80003622:	2e ae       	sub	lr,-22
80003624:	ee cb ff b0 	sub	r11,r7,-80
							monomeLedBuffer[80+i1] = 0;
							monomeLedBuffer[96+i1] = 0;
						}

						// show steps
						if(w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] & (1<<i1)) monomeLedBuffer[112+i1] = 11;
80003628:	50 1e       	stdsp	sp[0x4],lr
8000362a:	05 81       	ld.ub	r1,r2[0x0]
						// clear edit row
						monomeLedBuffer[64+i1] = 0;

						// show current edit value, selected
						if(edit_cv_value != -1) {
							if((w.wp[pattern].cv_values[edit_cv_value] >> 8) >= i1)
8000362c:	ee ce ff 90 	sub	lr,r7,-112
							monomeLedBuffer[80+i1] = 0;
							monomeLedBuffer[96+i1] = 0;
						}

						// show steps
						if(w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] & (1<<i1)) monomeLedBuffer[112+i1] = 11;
80003630:	2a 07       	sub	r7,-96
80003632:	c3 a8       	rjmp	800036a6 <refresh_mono+0x346>
80003634:	0d 83       	ld.ub	r3,r6[0x0]
80003636:	f2 03 18 00 	cp.b	r3,r9
			// MAP
			else {
				if(!scale_select) {
					for(i1=0;i1<SIZE;i1++) {
						// probs
						if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 11;
8000363a:	c0 30       	breq	80003640 <refresh_mono+0x2e0>
8000363c:	ef 6c ff d0 	st.b	r7[-48],r12
80003640:	ef 69 ff e0 	st.b	r7[-32],r9

						// clear edit row
						monomeLedBuffer[64+i1] = 0;
80003644:	3f f3       	mov	r3,-1
80003646:	e6 04 18 00 	cp.b	r4,r3

						// show current edit value, selected
						if(edit_cv_value != -1) {
8000364a:	c1 80       	breq	8000367a <refresh_mono+0x31a>
8000364c:	e0 63 0b 0c 	mov	r3,2828
							if((w.wp[pattern].cv_values[edit_cv_value] >> 8) >= i1)
80003650:	40 10       	lddsp	r0,sp[0x4]
80003652:	e6 00 04 12 	ld.sh	r2,r3[r0<<0x1]
80003656:	e7 d2 c1 08 	bfextu	r3,r2,0x8,0x8
8000365a:	f0 03 19 00 	cp.h	r3,r8
								monomeLedBuffer[80+i1] = 11;
8000365e:	f2 00 17 30 	movlo	r0,r9
80003662:	f8 00 17 20 	movhs	r0,r12
80003666:	b6 80       	st.b	r11[0x0],r0
80003668:	e5 d2 c0 84 	bfextu	r2,r2,0x4,0x4
							else
								monomeLedBuffer[80+i1] = 0;

							if(((w.wp[pattern].cv_values[edit_cv_value] >> 4) & 0xf) >= i1)
8000366c:	10 32       	cp.w	r2,r8
								monomeLedBuffer[96+i1] = 11;
8000366e:	f2 03 17 50 	movlt	r3,r9
80003672:	f8 03 17 40 	movge	r3,r12
80003676:	ae 83       	st.b	r7[0x0],r3
80003678:	c0 38       	rjmp	8000367e <refresh_mono+0x31e>
8000367a:	b6 89       	st.b	r11[0x0],r9
							else
								monomeLedBuffer[96+i1] = 0;
						}
						else {
							monomeLedBuffer[80+i1] = 0;
8000367c:	ae 89       	st.b	r7[0x0],r9
							monomeLedBuffer[96+i1] = 0;
8000367e:	40 22       	lddsp	r2,sp[0x8]
						}

						// show steps
						if(w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] & (1<<i1)) monomeLedBuffer[112+i1] = 11;
80003680:	e0 63 0b 0c 	mov	r3,2828
						else monomeLedBuffer[112+i1] = 0;
80003684:	2f f7       	sub	r7,-1
							monomeLedBuffer[80+i1] = 0;
							monomeLedBuffer[96+i1] = 0;
						}

						// show steps
						if(w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] & (1<<i1)) monomeLedBuffer[112+i1] = 11;
80003686:	e6 02 05 13 	ld.uh	r3,r3[r2<<0x1]
						else monomeLedBuffer[112+i1] = 0;
8000368a:	2f fb       	sub	r11,-1
							monomeLedBuffer[80+i1] = 0;
							monomeLedBuffer[96+i1] = 0;
						}

						// show steps
						if(w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] & (1<<i1)) monomeLedBuffer[112+i1] = 11;
8000368c:	e6 08 08 43 	asr	r3,r3,r8
						else monomeLedBuffer[112+i1] = 0;
80003690:	2f f6       	sub	r6,-1
							monomeLedBuffer[80+i1] = 0;
							monomeLedBuffer[96+i1] = 0;
						}

						// show steps
						if(w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] & (1<<i1)) monomeLedBuffer[112+i1] = 11;
80003692:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
						else monomeLedBuffer[112+i1] = 0;
80003696:	2f f8       	sub	r8,-1
							monomeLedBuffer[80+i1] = 0;
							monomeLedBuffer[96+i1] = 0;
						}

						// show steps
						if(w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] & (1<<i1)) monomeLedBuffer[112+i1] = 11;
80003698:	58 03       	cp.w	r3,0
8000369a:	f8 02 17 10 	movne	r2,r12
8000369e:	e6 02 17 00 	moveq	r2,r3
800036a2:	bc 82       	st.b	lr[0x0],r2
						else monomeLedBuffer[112+i1] = 0;
800036a4:	2f fe       	sub	lr,-1
				}
			}
			// MAP
			else {
				if(!scale_select) {
					for(i1=0;i1<SIZE;i1++) {
800036a6:	e2 08 18 00 	cp.b	r8,r1
800036aa:	cc 53       	brcs	80003634 <refresh_mono+0x2d4>
						if(w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] & (1<<i1)) monomeLedBuffer[112+i1] = 11;
						else monomeLedBuffer[112+i1] = 0;
					}

					// show edit position
					monomeLedBuffer[64+edit_cv_step] = 11;
800036ac:	e0 69 1a dc 	mov	r9,6876
800036b0:	30 b8       	mov	r8,11
800036b2:	f2 05 00 05 	add	r5,r9,r5
800036b6:	eb 68 00 40 	st.b	r5[64],r8
					// show playing note
					monomeLedBuffer[112+cv_chosen[edit_cv_ch]] = 11;
800036ba:	e0 6b 1a 58 	mov	r11,6744
800036be:	f6 0a 07 0a 	ld.ub	r10,r11[r10]
800036c2:	14 09       	add	r9,r10
800036c4:	f3 68 00 70 	st.b	r9[112],r8
				}
				else {
					for(i1=0;i1<SIZE;i1++) {
						// probs
						if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 11;
800036c8:	cd a8       	rjmp	8000387c <refresh_mono+0x51c>
800036ca:	0b 8a       	ld.ub	r10,r5[0x0]
800036cc:	f0 0a 18 00 	cp.b	r10,r8
800036d0:	c0 30       	breq	800036d6 <refresh_mono+0x376>

						monomeLedBuffer[64+i1] = 0;						
800036d2:	ef 6c ff f0 	st.b	r7[-16],r12
						monomeLedBuffer[80+i1] = 0;						
800036d6:	ae 88       	st.b	r7[0x0],r8
						monomeLedBuffer[96+i1] = 0;						
800036d8:	ef 68 00 10 	st.b	r7[16],r8
						monomeLedBuffer[112+i1] = 0;
800036dc:	ef 68 00 20 	st.b	r7[32],r8
800036e0:	ef 68 00 30 	st.b	r7[48],r8
					monomeLedBuffer[64+edit_cv_step] = 11;
					// show playing note
					monomeLedBuffer[112+cv_chosen[edit_cv_ch]] = 11;
				}
				else {
					for(i1=0;i1<SIZE;i1++) {
800036e4:	2f f5       	sub	r5,-1
800036e6:	2f f7       	sub	r7,-1
						monomeLedBuffer[80+i1] = 0;						
						monomeLedBuffer[96+i1] = 0;						
						monomeLedBuffer[112+i1] = 0;
					}

					monomeLedBuffer[112] = 11;
800036e8:	12 37       	cp.w	r7,r9
800036ea:	cf 01       	brne	800036ca <refresh_mono+0x36a>
800036ec:	30 b9       	mov	r9,11
800036ee:	e0 68 1a dc 	mov	r8,6876
				}

			}
		}
		else if(edit_prob == 1) {
800036f2:	f1 69 00 70 	st.b	r8[112],r9
800036f6:	cc 38       	rjmp	8000387c <refresh_mono+0x51c>
800036f8:	f2 08 18 00 	cp.b	r8,r9
			for(i1=0;i1<SIZE;i1++) {
800036fc:	e0 81 00 c0 	brne	8000387c <refresh_mono+0x51c>
80003700:	e0 68 0a f4 	mov	r8,2804
80003704:	11 85       	ld.ub	r5,r8[0x0]
80003706:	e0 68 1a 77 	mov	r8,6775
8000370a:	11 88       	ld.ub	r8,r8[0x0]
8000370c:	a5 68       	lsl	r8,0x4
8000370e:	e0 69 00 ec 	mov	r9,236
80003712:	b3 3b       	mul	r11,r9
80003714:	f0 0b 00 0b 	add	r11,r8,r11
80003718:	e0 68 0b 0c 	mov	r8,2828
8000371c:	0e 94       	mov	r4,r7
8000371e:	f6 cb ff 34 	sub	r11,r11,-204
80003722:	30 09       	mov	r9,0
80003724:	10 0b       	add	r11,r8
				monomeLedBuffer[64+i1] = 0;
80003726:	12 9a       	mov	r10,r9
80003728:	ee c8 ff d0 	sub	r8,r7,-48
				monomeLedBuffer[80+i1] = 0;
8000372c:	3f f6       	mov	r6,-1
				monomeLedBuffer[96+i1] = 0;
8000372e:	29 07       	sub	r7,-112
80003730:	c2 08       	rjmp	80003770 <refresh_mono+0x410>
				monomeLedBuffer[112+i1] = 0;
80003732:	f1 6a 00 10 	st.b	r8[16],r10

				if(w.wp[pattern].cv_probs[edit_cv_ch][i1] == 255)
80003736:	f1 6a 00 20 	st.b	r8[32],r10
8000373a:	f1 6a 00 30 	st.b	r8[48],r10
					monomeLedBuffer[48+i1] = 11;
8000373e:	ae 8a       	st.b	r7[0x0],r10
				else if(w.wp[pattern].cv_probs[edit_cv_ch][i1] == 0) {
80003740:	17 8e       	ld.ub	lr,r11[0x0]
80003742:	ec 0e 18 00 	cp.b	lr,r6
					monomeLedBuffer[48+i1] = 0;
					monomeLedBuffer[112+i1] = 11;
80003746:	c0 31       	brne	8000374c <refresh_mono+0x3ec>
80003748:	b0 8c       	st.b	r8[0x0],r12
8000374a:	c0 f8       	rjmp	80003768 <refresh_mono+0x408>
8000374c:	58 0e       	cp.w	lr,0
8000374e:	c0 51       	brne	80003758 <refresh_mono+0x3f8>
80003750:	b0 8e       	st.b	r8[0x0],lr
80003752:	ae 8c       	st.b	r7[0x0],r12
80003754:	c0 a8       	rjmp	80003768 <refresh_mono+0x408>
80003756:	d7 03       	nop
80003758:	b0 8c       	st.b	r8[0x0],r12
8000375a:	a7 8e       	lsr	lr,0x6
8000375c:	fc 0e 11 07 	rsub	lr,lr,7
80003760:	a5 6e       	lsl	lr,0x4
80003762:	12 0e       	add	lr,r9
80003764:	e8 0e 0b 0c 	st.b	r4[lr],r12
				}
				else if(w.wp[pattern].cv_probs[edit_cv_ch][i1]) {
					monomeLedBuffer[48+i1] = 11;
80003768:	2f f9       	sub	r9,-1
					monomeLedBuffer[64+16*(3-(w.wp[pattern].cv_probs[edit_cv_ch][i1]>>6))+i1] = 11;
8000376a:	2f f8       	sub	r8,-1
8000376c:	2f f7       	sub	r7,-1
8000376e:	2f fb       	sub	r11,-1
80003770:	ea 09 18 00 	cp.b	r9,r5
80003774:	cd f3       	brcs	80003732 <refresh_mono+0x3d2>
80003776:	c8 38       	rjmp	8000387c <refresh_mono+0x51c>
80003778:	58 29       	cp.w	r9,2
8000377a:	e0 81 00 81 	brne	8000387c <refresh_mono+0x51c>
8000377e:	e0 68 0a f4 	mov	r8,2804
				}

			}
		}
		else if(edit_prob == 1) {
			for(i1=0;i1<SIZE;i1++) {
80003782:	11 81       	ld.ub	r1,r8[0x0]
80003784:	e0 68 1a 75 	mov	r8,6773
		}

	}

	// series
	else if(edit_mode == mSeries) {
80003788:	11 88       	ld.ub	r8,r8[0x0]
8000378a:	e0 6a 0b 0c 	mov	r10,2828
		for(i1 = 0;i1<6;i1++) {
			for(i2=0;i2<SIZE;i2++) {
8000378e:	50 38       	stdsp	sp[0xc],r8
				// start/end bars, clear
				if((scroll || key_alt) && (i1+scroll_pos == w.series_start || i1+scroll_pos == w.series_end)) monomeLedBuffer[32+i1*16+i2] = 11;
80003790:	f5 30 0f 40 	ld.ub	r0,r10[3904]
80003794:	e0 68 1a 83 	mov	r8,6787
80003798:	e0 69 0b 07 	mov	r9,2823
8000379c:	11 88       	ld.ub	r8,r8[0x0]
			// monomeLedBuffer[32+i1*16+((scroll_pos+i1)/(64/SIZE))] = 4;
			
			// sidebar selection indicators
			if((scroll || key_alt) && i1+scroll_pos > w.series_start && i1+scroll_pos < w.series_end) {
				monomeLedBuffer[32+i1*16] = 11;
				monomeLedBuffer[32+i1*16+LENGTH] = 11;
8000379e:	13 89       	ld.ub	r9,r9[0x0]
	// series
	else if(edit_mode == mSeries) {
		for(i1 = 0;i1<6;i1++) {
			for(i2=0;i2<SIZE;i2++) {
				// start/end bars, clear
				if((scroll || key_alt) && (i1+scroll_pos == w.series_start || i1+scroll_pos == w.series_end)) monomeLedBuffer[32+i1*16+i2] = 11;
800037a0:	f0 ce f8 a0 	sub	lr,r8,-1888
			// monomeLedBuffer[32+i1*16+((scroll_pos+i1)/(64/SIZE))] = 4;
			
			// sidebar selection indicators
			if((scroll || key_alt) && i1+scroll_pos > w.series_start && i1+scroll_pos < w.series_end) {
				monomeLedBuffer[32+i1*16] = 11;
				monomeLedBuffer[32+i1*16+LENGTH] = 11;
800037a4:	0e 09       	add	r9,r7
800037a6:	f4 0e 00 1e 	add	lr,r10,lr<<0x1
800037aa:	f5 3a 0f 41 	ld.ub	r10,r10[3905]
	// series
	else if(edit_mode == mSeries) {
		for(i1 = 0;i1<6;i1++) {
			for(i2=0;i2<SIZE;i2++) {
				// start/end bars, clear
				if((scroll || key_alt) && (i1+scroll_pos == w.series_start || i1+scroll_pos == w.series_end)) monomeLedBuffer[32+i1*16+i2] = 11;
800037ae:	50 49       	stdsp	sp[0x10],r9
800037b0:	50 1a       	stdsp	sp[0x4],r10
			// monomeLedBuffer[32+i1*16+((scroll_pos+i1)/(64/SIZE))] = 4;
			
			// sidebar selection indicators
			if((scroll || key_alt) && i1+scroll_pos > w.series_start && i1+scroll_pos < w.series_end) {
				monomeLedBuffer[32+i1*16] = 11;
				monomeLedBuffer[32+i1*16+LENGTH] = 11;
800037b2:	30 09       	mov	r9,0
	// series
	else if(edit_mode == mSeries) {
		for(i1 = 0;i1<6;i1++) {
			for(i2=0;i2<SIZE;i2++) {
				// start/end bars, clear
				if((scroll || key_alt) && (i1+scroll_pos == w.series_start || i1+scroll_pos == w.series_end)) monomeLedBuffer[32+i1*16+i2] = 11;
800037b4:	50 20       	stdsp	sp[0x8],r0
			// monomeLedBuffer[32+i1*16+((scroll_pos+i1)/(64/SIZE))] = 4;
			
			// sidebar selection indicators
			if((scroll || key_alt) && i1+scroll_pos > w.series_start && i1+scroll_pos < w.series_end) {
				monomeLedBuffer[32+i1*16] = 11;
				monomeLedBuffer[32+i1*16+LENGTH] = 11;
800037b6:	32 0a       	mov	r10,32
	// series
	else if(edit_mode == mSeries) {
		for(i1 = 0;i1<6;i1++) {
			for(i2=0;i2<SIZE;i2++) {
				// start/end bars, clear
				if((scroll || key_alt) && (i1+scroll_pos == w.series_start || i1+scroll_pos == w.series_end)) monomeLedBuffer[32+i1*16+i2] = 11;
800037b8:	c3 e8       	rjmp	80003834 <refresh_mono+0x4d4>
			// monomeLedBuffer[32+i1*16+((scroll_pos+i1)/(64/SIZE))] = 4;
			
			// sidebar selection indicators
			if((scroll || key_alt) && i1+scroll_pos > w.series_start && i1+scroll_pos < w.series_end) {
				monomeLedBuffer[32+i1*16] = 11;
				monomeLedBuffer[32+i1*16+LENGTH] = 11;
800037ba:	40 38       	lddsp	r8,sp[0xc]
800037bc:	58 08       	cp.w	r8,0
	// series
	else if(edit_mode == mSeries) {
		for(i1 = 0;i1<6;i1++) {
			for(i2=0;i2<SIZE;i2++) {
				// start/end bars, clear
				if((scroll || key_alt) && (i1+scroll_pos == w.series_start || i1+scroll_pos == w.series_end)) monomeLedBuffer[32+i1*16+i2] = 11;
800037be:	c0 31       	brne	800037c4 <refresh_mono+0x464>
800037c0:	58 06       	cp.w	r6,0
800037c2:	c0 90       	breq	800037d4 <refresh_mono+0x474>
800037c4:	40 28       	lddsp	r8,sp[0x8]
800037c6:	10 30       	cp.w	r0,r8
800037c8:	c0 40       	breq	800037d0 <refresh_mono+0x470>
800037ca:	40 18       	lddsp	r8,sp[0x4]
800037cc:	10 30       	cp.w	r0,r8
800037ce:	c0 31       	brne	800037d4 <refresh_mono+0x474>
800037d0:	aa 8c       	st.b	r5[0x0],r12
800037d2:	c0 38       	rjmp	800037d8 <refresh_mono+0x478>
800037d4:	30 08       	mov	r8,0
800037d6:	a8 88       	st.b	r4[0x0],r8
				else monomeLedBuffer[32+i1*16+i2] = 0;
800037d8:	2f f3       	sub	r3,-1
800037da:	2f f5       	sub	r5,-1
	}

	// series
	else if(edit_mode == mSeries) {
		for(i1 = 0;i1<6;i1++) {
			for(i2=0;i2<SIZE;i2++) {
800037dc:	5c 53       	castu.b	r3
800037de:	2f f4       	sub	r4,-1
800037e0:	e2 03 18 00 	cp.b	r3,r1
800037e4:	ce b3       	brcs	800037ba <refresh_mono+0x45a>
800037e6:	40 08       	lddsp	r8,sp[0x0]
800037e8:	40 35       	lddsp	r5,sp[0xc]
800037ea:	58 05       	cp.w	r5,0

			// scroll position helper
			// monomeLedBuffer[32+i1*16+((scroll_pos+i1)/(64/SIZE))] = 4;
			
			// sidebar selection indicators
			if((scroll || key_alt) && i1+scroll_pos > w.series_start && i1+scroll_pos < w.series_end) {
800037ec:	c0 31       	brne	800037f2 <refresh_mono+0x492>
800037ee:	58 06       	cp.w	r6,0
800037f0:	c0 f0       	breq	8000380e <refresh_mono+0x4ae>
800037f2:	f2 08 00 05 	add	r5,r9,r8
800037f6:	40 24       	lddsp	r4,sp[0x8]
800037f8:	08 35       	cp.w	r5,r4
800037fa:	e0 8a 00 0a 	brle	8000380e <refresh_mono+0x4ae>
800037fe:	40 10       	lddsp	r0,sp[0x4]
80003800:	00 35       	cp.w	r5,r0
80003802:	c0 64       	brge	8000380e <refresh_mono+0x4ae>
80003804:	ee 0a 0b 0c 	st.b	r7[r10],r12
				monomeLedBuffer[32+i1*16] = 11;
80003808:	40 45       	lddsp	r5,sp[0x10]
8000380a:	ea 0a 0b 0c 	st.b	r5[r10],r12
				monomeLedBuffer[32+i1*16+LENGTH] = 11;
8000380e:	30 05       	mov	r5,0
80003810:	c0 a8       	rjmp	80003824 <refresh_mono+0x4c4>
80003812:	9c 84       	ld.uh	r4,lr[0x0]
80003814:	e8 05 08 44 	asr	r4,r4,r5
			}

			for(i2=0;i2<SIZE;i2++) {
				// show possible states
				if((w.series_list[i1+scroll_pos] >> i2) & 1)
80003818:	e9 d4 c0 01 	bfextu	r4,r4,0x0,0x1
8000381c:	c0 20       	breq	80003820 <refresh_mono+0x4c0>
8000381e:	b6 8c       	st.b	r11[0x0],r12
80003820:	2f f5       	sub	r5,-1
					monomeLedBuffer[32+(i1*16)+i2] = 11;
80003822:	2f fb       	sub	r11,-1
80003824:	e2 05 18 00 	cp.b	r5,r1
			if((scroll || key_alt) && i1+scroll_pos > w.series_start && i1+scroll_pos < w.series_end) {
				monomeLedBuffer[32+i1*16] = 11;
				monomeLedBuffer[32+i1*16+LENGTH] = 11;
			}

			for(i2=0;i2<SIZE;i2++) {
80003828:	cf 53       	brcs	80003812 <refresh_mono+0x4b2>
8000382a:	2f f9       	sub	r9,-1
8000382c:	2f 0a       	sub	r10,-16
8000382e:	2f ee       	sub	lr,-2
80003830:	58 69       	cp.w	r9,6
80003832:	c0 a0       	breq	80003846 <refresh_mono+0x4e6>

	}

	// series
	else if(edit_mode == mSeries) {
		for(i1 = 0;i1<6;i1++) {
80003834:	f4 07 00 0b 	add	r11,r10,r7
80003838:	30 03       	mov	r3,0
8000383a:	16 94       	mov	r4,r11
8000383c:	16 95       	mov	r5,r11
8000383e:	f2 08 00 00 	add	r0,r9,r8
			for(i2=0;i2<SIZE;i2++) {
				// start/end bars, clear
				if((scroll || key_alt) && (i1+scroll_pos == w.series_start || i1+scroll_pos == w.series_end)) monomeLedBuffer[32+i1*16+i2] = 11;
80003842:	50 08       	stdsp	sp[0x0],r8
80003844:	cc eb       	rjmp	800037e0 <refresh_mono+0x480>
80003846:	e0 69 0b 05 	mov	r9,2821
			}

		}

		// highlight playhead
		if(series_pos >= scroll_pos && series_pos < scroll_pos+6 && (pos & 1)) {
8000384a:	13 89       	ld.ub	r9,r9[0x0]
8000384c:	f0 09 18 00 	cp.b	r9,r8
80003850:	c1 63       	brcs	8000387c <refresh_mono+0x51c>
80003852:	f0 ca ff fb 	sub	r10,r8,-5
80003856:	12 3a       	cp.w	r10,r9
80003858:	c1 25       	brlt	8000387c <refresh_mono+0x51c>
8000385a:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
8000385e:	c0 f0       	breq	8000387c <refresh_mono+0x51c>
80003860:	2f e9       	sub	r9,-2
			monomeLedBuffer[32+(series_pos-scroll_pos)*16+series_playing] = 0;
80003862:	f2 08 01 08 	sub	r8,r9,r8
80003866:	e0 69 1a 90 	mov	r9,6800
8000386a:	13 8a       	ld.ub	r10,r9[0x0]
8000386c:	e0 69 1a dc 	mov	r9,6876
80003870:	a5 68       	lsl	r8,0x4
80003872:	14 08       	add	r8,r10
80003874:	f2 08 00 08 	add	r8,r9,r8
80003878:	30 09       	mov	r9,0
		}
	}

	monome_set_quadrant_flag(0);
8000387a:	b0 89       	st.b	r8[0x0],r9
8000387c:	30 0c       	mov	r12,0
8000387e:	e0 a0 0c 9f 	rcall	800051bc <monome_set_quadrant_flag>
	monome_set_quadrant_flag(1);
80003882:	30 1c       	mov	r12,1
80003884:	e0 a0 0c 9c 	rcall	800051bc <monome_set_quadrant_flag>
}
80003888:	2f bd       	sub	sp,-20
8000388a:	d8 32       	popm	r0-r7,pc

8000388c <refresh>:
8000388c:	d4 31       	pushm	r0-r7,lr
8000388e:	20 6d       	sub	sp,24
80003890:	e0 69 1a dc 	mov	r9,6876
80003894:	30 0a       	mov	r10,0
80003896:	f2 cb ff f0 	sub	r11,r9,-16
8000389a:	30 48       	mov	r8,4
8000389c:	b2 8a       	st.b	r9[0x0],r10
8000389e:	f3 6a 00 10 	st.b	r9[16],r10
800038a2:	f3 68 00 20 	st.b	r9[32],r8
800038a6:	f3 6a 00 30 	st.b	r9[48],r10
800038aa:	2f f9       	sub	r9,-1
800038ac:	16 39       	cp.w	r9,r11
800038ae:	cf 71       	brne	8000389c <refresh+0x10>
		monomeLedBuffer[32+i1] = 4;
		monomeLedBuffer[48+i1] = 0;
	}

	// dim mode
	if(edit_mode == mTrig) {
800038b0:	e0 69 1a 88 	mov	r9,6792
800038b4:	72 0a       	ld.w	r10,r9[0x0]
		monomeLedBuffer[0] = 4;
800038b6:	58 0a       	cp.w	r10,0
		monomeLedBuffer[1] = 4;
		monomeLedBuffer[2] = 4;
		monomeLedBuffer[3] = 4;
800038b8:	c0 81       	brne	800038c8 <refresh+0x3c>
		monomeLedBuffer[48+i1] = 0;
	}

	// dim mode
	if(edit_mode == mTrig) {
		monomeLedBuffer[0] = 4;
800038ba:	e0 69 1a dc 	mov	r9,6876
		monomeLedBuffer[1] = 4;
		monomeLedBuffer[2] = 4;
800038be:	b2 b8       	st.b	r9[0x3],r8
800038c0:	b2 88       	st.b	r9[0x0],r8
		monomeLedBuffer[3] = 4;
	}
	else if(edit_mode == mMap) {
800038c2:	b2 98       	st.b	r9[0x1],r8
800038c4:	b2 a8       	st.b	r9[0x2],r8
		if(SIZE==16) {
800038c6:	c2 98       	rjmp	80003918 <refresh+0x8c>
800038c8:	58 1a       	cp.w	r10,1
800038ca:	c1 b1       	brne	80003900 <refresh+0x74>
800038cc:	e0 69 0a f4 	mov	r9,2804
800038d0:	e0 64 1a dc 	mov	r4,6876
800038d4:	13 8c       	ld.ub	r12,r9[0x0]
			monomeLedBuffer[4+(edit_cv_ch*4)] = 4;
800038d6:	31 0b       	mov	r11,16
800038d8:	e0 69 1a 77 	mov	r9,6775
800038dc:	f6 0c 18 00 	cp.b	r12,r11
			monomeLedBuffer[5+(edit_cv_ch*4)] = 4;
800038e0:	c0 c1       	brne	800038f8 <refresh+0x6c>
800038e2:	13 89       	ld.ub	r9,r9[0x0]
			monomeLedBuffer[6+(edit_cv_ch*4)] = 4;
			monomeLedBuffer[7+(edit_cv_ch*4)] = 4;
800038e4:	f2 cb ff ff 	sub	r11,r9,-1
	}
	else if(edit_mode == mMap) {
		if(SIZE==16) {
			monomeLedBuffer[4+(edit_cv_ch*4)] = 4;
			monomeLedBuffer[5+(edit_cv_ch*4)] = 4;
			monomeLedBuffer[6+(edit_cv_ch*4)] = 4;
800038e8:	e8 0b 0b 28 	st.b	r4[r11<<0x2],r8
			monomeLedBuffer[7+(edit_cv_ch*4)] = 4;
		}
		else
			monomeLedBuffer[4+edit_cv_ch] = 4;
800038ec:	e8 09 00 24 	add	r4,r4,r9<<0x2
800038f0:	a8 f8       	st.b	r4[0x7],r8
800038f2:	a8 d8       	st.b	r4[0x5],r8
800038f4:	a8 e8       	st.b	r4[0x6],r8
800038f6:	c1 18       	rjmp	80003918 <refresh+0x8c>
800038f8:	13 89       	ld.ub	r9,r9[0x0]
800038fa:	12 04       	add	r4,r9
800038fc:	a8 c8       	st.b	r4[0x4],r8
800038fe:	c0 d8       	rjmp	80003918 <refresh+0x8c>
80003900:	58 2a       	cp.w	r10,2
80003902:	c0 b1       	brne	80003918 <refresh+0x8c>
	}
	else if(edit_mode == mSeries) {
80003904:	e0 69 1a dc 	mov	r9,6876
		monomeLedBuffer[LENGTH-1] = 7;
80003908:	e0 68 0b 07 	mov	r8,2823
8000390c:	11 88       	ld.ub	r8,r8[0x0]
8000390e:	f2 08 00 08 	add	r8,r9,r8
80003912:	30 79       	mov	r9,7
80003914:	f1 69 ff ff 	st.b	r8[-1],r9
	}

	// alt
	monomeLedBuffer[LENGTH] = 4;
80003918:	e0 68 0b 07 	mov	r8,2823
8000391c:	30 49       	mov	r9,4
8000391e:	11 84       	ld.ub	r4,r8[0x0]
80003920:	e0 68 1a dc 	mov	r8,6876
	if(key_alt) monomeLedBuffer[LENGTH] = 11;
80003924:	f0 04 0b 09 	st.b	r8[r4],r9
80003928:	e0 69 1a 5d 	mov	r9,6749
8000392c:	13 8b       	ld.ub	r11,r9[0x0]
8000392e:	30 09       	mov	r9,0
80003930:	f2 0b 18 00 	cp.b	r11,r9
80003934:	c0 40       	breq	8000393c <refresh+0xb0>

	// show on steps
	if(triggered) {
80003936:	30 b9       	mov	r9,11
80003938:	f0 04 0b 09 	st.b	r8[r4],r9
8000393c:	e0 68 1a 79 	mov	r8,6777
		if(triggered & 0x1) monomeLedBuffer[0] = 11;
80003940:	11 85       	ld.ub	r5,r8[0x0]
80003942:	58 05       	cp.w	r5,0
80003944:	c1 f0       	breq	80003982 <refresh+0xf6>
80003946:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000394a:	ed b8 00 00 	bld	r8,0x0
		if(triggered & 0x2) monomeLedBuffer[1] = 11;
8000394e:	c0 51       	brne	80003958 <refresh+0xcc>
80003950:	30 bb       	mov	r11,11
80003952:	e0 69 1a dc 	mov	r9,6876
80003956:	b2 8b       	st.b	r9[0x0],r11
80003958:	ed b8 00 01 	bld	r8,0x1
		if(triggered & 0x4) monomeLedBuffer[2] = 11;
8000395c:	c0 51       	brne	80003966 <refresh+0xda>
8000395e:	30 bb       	mov	r11,11
80003960:	e0 69 1a dc 	mov	r9,6876
80003964:	b2 9b       	st.b	r9[0x1],r11
		if(triggered & 0x8) monomeLedBuffer[3] = 11;
80003966:	ed b8 00 02 	bld	r8,0x2
8000396a:	c0 51       	brne	80003974 <refresh+0xe8>
8000396c:	30 bb       	mov	r11,11
8000396e:	e0 69 1a dc 	mov	r9,6876
	}

	// cv indication
	if(SIZE==16) {
80003972:	b2 ab       	st.b	r9[0x2],r11
80003974:	ed b8 00 03 	bld	r8,0x3
80003978:	c0 51       	brne	80003982 <refresh+0xf6>
8000397a:	30 b9       	mov	r9,11
8000397c:	e0 68 1a dc 	mov	r8,6876
		monomeLedBuffer[cv0 / 1024 + 4] = 11;
80003980:	b0 b9       	st.b	r8[0x3],r9
80003982:	e0 68 0a f4 	mov	r8,2804
80003986:	31 09       	mov	r9,16
80003988:	11 88       	ld.ub	r8,r8[0x0]
8000398a:	f2 08 18 00 	cp.b	r8,r9
		monomeLedBuffer[cv1 / 1024 + 8] = 11;
8000398e:	c1 21       	brne	800039b2 <refresh+0x126>
80003990:	e0 6b 1a dc 	mov	r11,6876
80003994:	30 b9       	mov	r9,11
80003996:	e0 6c 1a 56 	mov	r12,6742
	}

	// show pos loop dim
	if(w.wp[pattern].loop_dir) {	
8000399a:	98 8c       	ld.uh	r12,r12[0x0]
8000399c:	ab 8c       	lsr	r12,0xa
8000399e:	f6 0c 00 0c 	add	r12,r11,r12
800039a2:	b8 c9       	st.b	r12[0x4],r9
800039a4:	e0 6c 1a 6a 	mov	r12,6762
800039a8:	98 8c       	ld.uh	r12,r12[0x0]
800039aa:	ab 8c       	lsr	r12,0xa
800039ac:	18 0b       	add	r11,r12
800039ae:	f7 69 00 08 	st.b	r11[8],r9
800039b2:	e0 69 1a 5b 	mov	r9,6747
800039b6:	e0 6c 00 ec 	mov	r12,236
		for(i1=0;i1<SIZE;i1++) {
			if(w.wp[pattern].loop_dir == 1 && i1 >= w.wp[pattern].loop_start && i1 <= w.wp[pattern].loop_end)
				monomeLedBuffer[16+i1] = 4;
			else if(w.wp[pattern].loop_dir == 2 && (i1 <= w.wp[pattern].loop_end || i1 >= w.wp[pattern].loop_start)) 
800039ba:	13 87       	ld.ub	r7,r9[0x0]
				monomeLedBuffer[16+i1] = 4;
800039bc:	e0 69 0b 0c 	mov	r9,2828
	}

	// show pos loop dim
	if(w.wp[pattern].loop_dir) {	
		for(i1=0;i1<SIZE;i1++) {
			if(w.wp[pattern].loop_dir == 1 && i1 >= w.wp[pattern].loop_start && i1 <= w.wp[pattern].loop_end)
800039c0:	ee 0c 02 4c 	mul	r12,r7,r12
800039c4:	f2 0c 00 0c 	add	r12,r9,r12
800039c8:	19 be       	ld.ub	lr,r12[0x3]
800039ca:	58 0e       	cp.w	lr,0
800039cc:	c2 90       	breq	80003a1e <refresh+0x192>
800039ce:	e0 6b 1a dc 	mov	r11,6876
800039d2:	30 09       	mov	r9,0
800039d4:	2f 0b       	sub	r11,-16
800039d6:	30 12       	mov	r2,1
800039d8:	30 23       	mov	r3,2
800039da:	30 46       	mov	r6,4
800039dc:	c1 e8       	rjmp	80003a18 <refresh+0x18c>
800039de:	e4 0e 18 00 	cp.b	lr,r2
800039e2:	c0 b1       	brne	800039f8 <refresh+0x16c>
800039e4:	19 81       	ld.ub	r1,r12[0x0]
800039e6:	f2 01 18 00 	cp.b	r1,r9
800039ea:	e0 8b 00 14 	brhi	80003a12 <refresh+0x186>
800039ee:	19 91       	ld.ub	r1,r12[0x1]
800039f0:	f2 01 18 00 	cp.b	r1,r9
800039f4:	c0 f3       	brcs	80003a12 <refresh+0x186>
800039f6:	c0 d8       	rjmp	80003a10 <refresh+0x184>
800039f8:	e6 0e 18 00 	cp.b	lr,r3
800039fc:	c0 b1       	brne	80003a12 <refresh+0x186>
800039fe:	19 91       	ld.ub	r1,r12[0x1]
				monomeLedBuffer[16+i1] = 4;
			else if(w.wp[pattern].loop_dir == 2 && (i1 <= w.wp[pattern].loop_end || i1 >= w.wp[pattern].loop_start)) 
80003a00:	f2 01 18 00 	cp.b	r1,r9
80003a04:	c0 62       	brcc	80003a10 <refresh+0x184>
80003a06:	19 81       	ld.ub	r1,r12[0x0]
80003a08:	f2 01 18 00 	cp.b	r1,r9
80003a0c:	e0 8b 00 03 	brhi	80003a12 <refresh+0x186>
80003a10:	b6 86       	st.b	r11[0x0],r6
80003a12:	2f f9       	sub	r9,-1
80003a14:	2f fb       	sub	r11,-1
80003a16:	5c 59       	castu.b	r9
				monomeLedBuffer[16+i1] = 4;
80003a18:	f0 09 18 00 	cp.b	r9,r8
		monomeLedBuffer[cv1 / 1024 + 8] = 11;
	}

	// show pos loop dim
	if(w.wp[pattern].loop_dir) {	
		for(i1=0;i1<SIZE;i1++) {
80003a1c:	ce 13       	brcs	800039de <refresh+0x152>
80003a1e:	e0 69 1a 82 	mov	r9,6786
80003a22:	13 8b       	ld.ub	r11,r9[0x0]
80003a24:	30 09       	mov	r9,0
				monomeLedBuffer[16+i1] = 4;
		}
	}

	// show position and next cut
	if(cut_pos) monomeLedBuffer[16+next_pos] = 7;
80003a26:	f2 0b 18 00 	cp.b	r11,r9
80003a2a:	c0 c0       	breq	80003a42 <refresh+0x1b6>
80003a2c:	e0 6b 1a dc 	mov	r11,6876
80003a30:	e0 69 1a 53 	mov	r9,6739
80003a34:	f3 29 00 00 	ld.sb	r9,r9[0]
80003a38:	f6 09 00 09 	add	r9,r11,r9
80003a3c:	30 7b       	mov	r11,7
80003a3e:	f3 6b 00 10 	st.b	r9[16],r11
80003a42:	e0 6b 1a dc 	mov	r11,6876
	monomeLedBuffer[16+pos] = 15;
80003a46:	30 fe       	mov	lr,15
80003a48:	e0 69 0b 06 	mov	r9,2822
80003a4c:	f3 29 00 00 	ld.sb	r9,r9[0]
80003a50:	f6 09 00 0c 	add	r12,r11,r9
80003a54:	f9 6e 00 10 	st.b	r12[16],lr

	// show pattern
	monomeLedBuffer[32+pattern] = 11;
80003a58:	f6 07 00 0c 	add	r12,r11,r7
80003a5c:	30 be       	mov	lr,11
80003a5e:	f9 6e 00 20 	st.b	r12[32],lr
	if(pattern != next_pattern) monomeLedBuffer[32+next_pattern] = 7;
80003a62:	e0 6c 1a 84 	mov	r12,6788
80003a66:	19 8c       	ld.ub	r12,r12[0x0]
80003a68:	f8 07 18 00 	cp.b	r7,r12
80003a6c:	c0 50       	breq	80003a76 <refresh+0x1ea>
80003a6e:	18 0b       	add	r11,r12
80003a70:	30 7c       	mov	r12,7

	// show step data
	if(edit_mode == mTrig) {
80003a72:	f7 6c 00 20 	st.b	r11[32],r12
80003a76:	58 0a       	cp.w	r10,0
		if(edit_prob == 0) {
80003a78:	e0 81 00 ac 	brne	80003bd0 <refresh+0x344>
80003a7c:	e0 6b 1a 81 	mov	r11,6785
80003a80:	17 8b       	ld.ub	r11,r11[0x0]
80003a82:	58 0b       	cp.w	r11,0
80003a84:	c6 c1       	brne	80003b5c <refresh+0x2d0>
80003a86:	e0 6b 0b 0c 	mov	r11,2828
80003a8a:	e0 6c 1a dc 	mov	r12,6876
80003a8e:	e0 6e 00 ec 	mov	lr,236
			for(i1=0;i1<SIZE;i1++) {
	 			for(i2=0;i2<4;i2++) {
					if((w.wp[pattern].steps[i1] & (1<<i2)) && i1 == pos && (triggered & 1<<i2)) monomeLedBuffer[(i2+4)*16+i1] = 11;
80003a92:	ee 0e 02 4e 	mul	lr,r7,lr
80003a96:	2e 4e       	sub	lr,-28
80003a98:	16 0e       	add	lr,r11
					else if(w.wp[pattern].steps[i1] & (1<<i2) && (w.wp[pattern].step_choice & 1<<i1)) monomeLedBuffer[(i2+4)*16+i1] = 4;
80003a9a:	f2 cb ff c0 	sub	r11,r9,-64
80003a9e:	f8 0b 00 0b 	add	r11,r12,r11
	// show step data
	if(edit_mode == mTrig) {
		if(edit_prob == 0) {
			for(i1=0;i1<SIZE;i1++) {
	 			for(i2=0;i2<4;i2++) {
					if((w.wp[pattern].steps[i1] & (1<<i2)) && i1 == pos && (triggered & 1<<i2)) monomeLedBuffer[(i2+4)*16+i1] = 11;
80003aa2:	50 4b       	stdsp	sp[0x10],r11
					else if(w.wp[pattern].steps[i1] & (1<<i2) && (w.wp[pattern].step_choice & 1<<i1)) monomeLedBuffer[(i2+4)*16+i1] = 4;
80003aa4:	ee 0b 15 04 	lsl	r11,r7,0x4
	monomeLedBuffer[32+pattern] = 11;
	if(pattern != next_pattern) monomeLedBuffer[32+next_pattern] = 7;

	// show step data
	if(edit_mode == mTrig) {
		if(edit_prob == 0) {
80003aa8:	0e 1b       	sub	r11,r7
			for(i1=0;i1<SIZE;i1++) {
	 			for(i2=0;i2<4;i2++) {
					if((w.wp[pattern].steps[i1] & (1<<i2)) && i1 == pos && (triggered & 1<<i2)) monomeLedBuffer[(i2+4)*16+i1] = 11;
					else if(w.wp[pattern].steps[i1] & (1<<i2) && (w.wp[pattern].step_choice & 1<<i1)) monomeLedBuffer[(i2+4)*16+i1] = 4;
80003aaa:	a3 6b       	lsl	r11,0x2
80003aac:	18 94       	mov	r4,r12
80003aae:	f6 07 01 07 	sub	r7,r11,r7
	// show step data
	if(edit_mode == mTrig) {
		if(edit_prob == 0) {
			for(i1=0;i1<SIZE;i1++) {
	 			for(i2=0;i2<4;i2++) {
					if((w.wp[pattern].steps[i1] & (1<<i2)) && i1 == pos && (triggered & 1<<i2)) monomeLedBuffer[(i2+4)*16+i1] = 11;
80003ab2:	2d 0c       	sub	r12,-48
80003ab4:	ee cb ff ff 	sub	r11,r7,-1
80003ab8:	50 5b       	stdsp	sp[0x14],r11
80003aba:	c3 98       	rjmp	80003b2c <refresh+0x2a0>
80003abc:	40 28       	lddsp	r8,sp[0x8]
80003abe:	f0 0b 08 42 	asr	r2,r8,r11
80003ac2:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
80003ac6:	c1 a0       	breq	80003afa <refresh+0x26e>
80003ac8:	12 3a       	cp.w	r10,r9
80003aca:	c0 a1       	brne	80003ade <refresh+0x252>
80003acc:	40 30       	lddsp	r0,sp[0xc]
80003ace:	e0 0b 08 42 	asr	r2,r0,r11
80003ad2:	ed b2 00 00 	bld	r2,0x0
					else if(w.wp[pattern].steps[i1] & (1<<i2) && (w.wp[pattern].step_choice & 1<<i1)) monomeLedBuffer[(i2+4)*16+i1] = 4;
80003ad6:	c0 41       	brne	80003ade <refresh+0x252>
80003ad8:	30 b2       	mov	r2,11
80003ada:	ae 82       	st.b	r7[0x0],r2
80003adc:	c1 48       	rjmp	80003b04 <refresh+0x278>
80003ade:	40 58       	lddsp	r8,sp[0x14]
80003ae0:	e0 60 0b 0c 	mov	r0,2828
80003ae4:	e0 08 05 22 	ld.uh	r2,r0[r8<<0x2]
80003ae8:	40 18       	lddsp	r8,sp[0x4]
80003aea:	f1 e2 00 02 	and	r2,r8,r2
					else if(w.wp[pattern].steps[i1] & (1<<i2)) monomeLedBuffer[(i2+4)*16+i1] = 7;
					else if(i1 == pos) monomeLedBuffer[(i2+4)*16+i1] = 4;
80003aee:	e2 00 17 00 	moveq	r0,r1
80003af2:	e6 00 17 10 	movne	r0,r3
					else monomeLedBuffer[(i2+4)*16+i1] = 0;
80003af6:	ac 80       	st.b	r6[0x0],r0
80003af8:	c0 68       	rjmp	80003b04 <refresh+0x278>
80003afa:	12 3a       	cp.w	r10,r9
80003afc:	c0 31       	brne	80003b02 <refresh+0x276>

	// show step data
	if(edit_mode == mTrig) {
		if(edit_prob == 0) {
			for(i1=0;i1<SIZE;i1++) {
	 			for(i2=0;i2<4;i2++) {
80003afe:	ae 83       	st.b	r7[0x0],r3
80003b00:	c0 28       	rjmp	80003b04 <refresh+0x278>
					else if(i1 == pos) monomeLedBuffer[(i2+4)*16+i1] = 4;
					else monomeLedBuffer[(i2+4)*16+i1] = 0;
				}

				// probs
				if(w.wp[pattern].step_probs[i1] == 255) monomeLedBuffer[48+i1] = 11;
80003b02:	ac 82       	st.b	r6[0x0],r2
80003b04:	2f fb       	sub	r11,-1
80003b06:	2f 07       	sub	r7,-16
80003b08:	2f 06       	sub	r6,-16
80003b0a:	58 4b       	cp.w	r11,4
80003b0c:	cd 81       	brne	80003abc <refresh+0x230>
80003b0e:	1d 87       	ld.ub	r7,lr[0x0]
80003b10:	40 08       	lddsp	r8,sp[0x0]
80003b12:	3f f6       	mov	r6,-1
				else if(w.wp[pattern].step_probs[i1] > 0) monomeLedBuffer[48+i1] = 4;
80003b14:	0e 93       	mov	r3,r7
80003b16:	ec 07 18 00 	cp.b	r7,r6
80003b1a:	c0 31       	brne	80003b20 <refresh+0x294>
80003b1c:	30 bb       	mov	r11,11
80003b1e:	c0 38       	rjmp	80003b24 <refresh+0x298>
	if(pattern != next_pattern) monomeLedBuffer[32+next_pattern] = 7;

	// show step data
	if(edit_mode == mTrig) {
		if(edit_prob == 0) {
			for(i1=0;i1<SIZE;i1++) {
80003b20:	58 07       	cp.w	r7,0
80003b22:	c0 20       	breq	80003b26 <refresh+0x29a>
80003b24:	b8 8b       	st.b	r12[0x0],r11
80003b26:	2f fa       	sub	r10,-1
	 			for(i2=0;i2<4;i2++) {
					if((w.wp[pattern].steps[i1] & (1<<i2)) && i1 == pos && (triggered & 1<<i2)) monomeLedBuffer[(i2+4)*16+i1] = 11;
80003b28:	2f fc       	sub	r12,-1
80003b2a:	2f fe       	sub	lr,-1
80003b2c:	f0 0a 18 00 	cp.b	r10,r8
80003b30:	e0 82 02 39 	brhs	80003fa2 <refresh+0x716>
80003b34:	30 1b       	mov	r11,1
80003b36:	f6 0a 09 4b 	lsl	r11,r11,r10
80003b3a:	f4 c6 ff c0 	sub	r6,r10,-64
80003b3e:	50 1b       	stdsp	sp[0x4],r11
80003b40:	e1 d5 b0 08 	bfexts	r0,r5,0x0,0x8
					else if(w.wp[pattern].steps[i1] & (1<<i2) && (w.wp[pattern].step_choice & 1<<i1)) monomeLedBuffer[(i2+4)*16+i1] = 4;
					else if(w.wp[pattern].steps[i1] & (1<<i2)) monomeLedBuffer[(i2+4)*16+i1] = 7;
					else if(i1 == pos) monomeLedBuffer[(i2+4)*16+i1] = 4;
80003b44:	fd 32 ff f0 	ld.ub	r2,lr[-16]
	// show step data
	if(edit_mode == mTrig) {
		if(edit_prob == 0) {
			for(i1=0;i1<SIZE;i1++) {
	 			for(i2=0;i2<4;i2++) {
					if((w.wp[pattern].steps[i1] & (1<<i2)) && i1 == pos && (triggered & 1<<i2)) monomeLedBuffer[(i2+4)*16+i1] = 11;
80003b48:	08 06       	add	r6,r4
80003b4a:	50 22       	stdsp	sp[0x8],r2
80003b4c:	40 47       	lddsp	r7,sp[0x10]
80003b4e:	30 0b       	mov	r11,0
80003b50:	30 43       	mov	r3,4
80003b52:	30 71       	mov	r1,7
80003b54:	50 30       	stdsp	sp[0xc],r0
80003b56:	50 08       	stdsp	sp[0x0],r8
80003b58:	cb 2b       	rjmp	80003abc <refresh+0x230>
80003b5a:	d7 03       	nop
80003b5c:	30 19       	mov	r9,1
80003b5e:	f2 0b 18 00 	cp.b	r11,r9
80003b62:	e0 81 02 20 	brne	80003fa2 <refresh+0x716>
80003b66:	e0 69 00 ec 	mov	r9,236
80003b6a:	b3 37       	mul	r7,r9
				// probs
				if(w.wp[pattern].step_probs[i1] == 255) monomeLedBuffer[48+i1] = 11;
				else if(w.wp[pattern].step_probs[i1] > 0) monomeLedBuffer[48+i1] = 4;
			}
		}
		else if(edit_prob == 1) {
80003b6c:	e0 69 0b 0c 	mov	r9,2828
80003b70:	e0 6c 1a dc 	mov	r12,6876
80003b74:	2e 47       	sub	r7,-28
80003b76:	18 93       	mov	r3,r12
80003b78:	12 07       	add	r7,r9
80003b7a:	30 4b       	mov	r11,4
80003b7c:	f8 c9 ff d0 	sub	r9,r12,-48
80003b80:	3f f4       	mov	r4,-1
					monomeLedBuffer[48+i1] = 0;
					monomeLedBuffer[112+i1] = 7;
				}
				else if(w.wp[pattern].step_probs[i1]) {
					monomeLedBuffer[48+i1] = 4;
					monomeLedBuffer[64+16*(3-(w.wp[pattern].step_probs[i1]>>6))+i1] = 7;
80003b82:	29 0c       	sub	r12,-112
				// probs
				if(w.wp[pattern].step_probs[i1] == 255) monomeLedBuffer[48+i1] = 11;
				else if(w.wp[pattern].step_probs[i1] > 0) monomeLedBuffer[48+i1] = 4;
			}
		}
		else if(edit_prob == 1) {
80003b84:	30 76       	mov	r6,7
			for(i1=0;i1<SIZE;i1++) {
				monomeLedBuffer[64+i1] = 4;
80003b86:	30 b5       	mov	r5,11
				// probs
				if(w.wp[pattern].step_probs[i1] == 255) monomeLedBuffer[48+i1] = 11;
				else if(w.wp[pattern].step_probs[i1] > 0) monomeLedBuffer[48+i1] = 4;
			}
		}
		else if(edit_prob == 1) {
80003b88:	c1 f8       	rjmp	80003bc6 <refresh+0x33a>
80003b8a:	f3 6b 00 10 	st.b	r9[16],r11
80003b8e:	f3 6b 00 20 	st.b	r9[32],r11
				monomeLedBuffer[80+i1] = 4;
				monomeLedBuffer[96+i1] = 4;
				monomeLedBuffer[112+i1] = 4;

				if(w.wp[pattern].step_probs[i1] == 255)
					monomeLedBuffer[48+i1] = 11;
80003b92:	f3 6b 00 30 	st.b	r9[48],r11
				else if(w.wp[pattern].step_probs[i1] > 0) monomeLedBuffer[48+i1] = 4;
			}
		}
		else if(edit_prob == 1) {
			for(i1=0;i1<SIZE;i1++) {
				monomeLedBuffer[64+i1] = 4;
80003b96:	b8 8b       	st.b	r12[0x0],r11
80003b98:	0f 8e       	ld.ub	lr,r7[0x0]
				monomeLedBuffer[80+i1] = 4;
80003b9a:	e8 0e 18 00 	cp.b	lr,r4
				monomeLedBuffer[96+i1] = 4;
80003b9e:	c0 31       	brne	80003ba4 <refresh+0x318>
80003ba0:	b2 85       	st.b	r9[0x0],r5
				monomeLedBuffer[112+i1] = 4;
80003ba2:	c0 e8       	rjmp	80003bbe <refresh+0x332>

				if(w.wp[pattern].step_probs[i1] == 255)
80003ba4:	58 0e       	cp.w	lr,0
80003ba6:	c0 41       	brne	80003bae <refresh+0x322>
80003ba8:	b2 8e       	st.b	r9[0x0],lr
80003baa:	b8 86       	st.b	r12[0x0],r6
					monomeLedBuffer[48+i1] = 11;
80003bac:	c0 98       	rjmp	80003bbe <refresh+0x332>
80003bae:	b2 8b       	st.b	r9[0x0],r11
				else if(w.wp[pattern].step_probs[i1] == 0) {
80003bb0:	a7 8e       	lsr	lr,0x6
80003bb2:	fc 0e 11 07 	rsub	lr,lr,7
					monomeLedBuffer[48+i1] = 0;
					monomeLedBuffer[112+i1] = 7;
80003bb6:	a5 6e       	lsl	lr,0x4
80003bb8:	14 0e       	add	lr,r10
				}
				else if(w.wp[pattern].step_probs[i1]) {
					monomeLedBuffer[48+i1] = 4;
80003bba:	e6 0e 0b 06 	st.b	r3[lr],r6
					monomeLedBuffer[64+16*(3-(w.wp[pattern].step_probs[i1]>>6))+i1] = 7;
80003bbe:	2f fa       	sub	r10,-1
80003bc0:	2f f9       	sub	r9,-1
80003bc2:	2f fc       	sub	r12,-1
80003bc4:	2f f7       	sub	r7,-1
80003bc6:	f0 0a 18 00 	cp.b	r10,r8
80003bca:	ce 03       	brcs	80003b8a <refresh+0x2fe>
80003bcc:	e0 8f 01 eb 	bral	80003fa2 <refresh+0x716>
80003bd0:	58 1a       	cp.w	r10,1
				if(w.wp[pattern].step_probs[i1] == 255) monomeLedBuffer[48+i1] = 11;
				else if(w.wp[pattern].step_probs[i1] > 0) monomeLedBuffer[48+i1] = 4;
			}
		}
		else if(edit_prob == 1) {
			for(i1=0;i1<SIZE;i1++) {
80003bd2:	e0 81 01 75 	brne	80003ebc <refresh+0x630>
80003bd6:	e0 6b 1a 81 	mov	r11,6785
80003bda:	17 8b       	ld.ub	r11,r11[0x0]
			}
		}
	}

	// show map
	else if(edit_mode == mMap) {
80003bdc:	58 0b       	cp.w	r11,0
80003bde:	e0 81 01 2f 	brne	80003e3c <refresh+0x5b0>
		if(edit_prob == 0) {
80003be2:	e0 6a 1a 77 	mov	r10,6775
80003be6:	e0 66 0b 0c 	mov	r6,2828
80003bea:	15 8c       	ld.ub	r12,r10[0x0]
			// CURVES
			if(w.wp[pattern].cv_mode[edit_cv_ch] == 0) {
80003bec:	e0 6e 00 ec 	mov	lr,236
80003bf0:	ee 0e 02 4e 	mul	lr,r7,lr
80003bf4:	ec 0e 00 05 	add	r5,r6,lr
80003bf8:	18 05       	add	r5,r12
80003bfa:	0b e5       	ld.ub	r5,r5[0x6]
80003bfc:	f6 05 18 00 	cp.b	r5,r11
80003c00:	c7 01       	brne	80003ce0 <refresh+0x454>
80003c02:	f8 07 15 04 	lsl	r7,r12,0x4
80003c06:	f8 05 15 05 	lsl	r5,r12,0x5
80003c0a:	1c 07       	add	r7,lr
80003c0c:	e0 6a 1a dc 	mov	r10,6876
80003c10:	ee c7 ff 34 	sub	r7,r7,-204
80003c14:	1c 05       	add	r5,lr
80003c16:	0c 07       	add	r7,r6
80003c18:	ea c5 ff 74 	sub	r5,r5,-140
80003c1c:	2d 0a       	sub	r10,-48
80003c1e:	0c 05       	add	r5,r6
80003c20:	3f f1       	mov	r1,-1
80003c22:	30 72       	mov	r2,7
				for(i1=0;i1<SIZE;i1++) {
					// probs
					if(w.wp[pattern].cv_probs[edit_cv_ch][i1] == 255) monomeLedBuffer[48+i1] = 11;
80003c24:	30 b3       	mov	r3,11
					else if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 7;
80003c26:	e0 64 03 ff 	mov	r4,1023

					monomeLedBuffer[112+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 1023) * 7;
80003c2a:	e0 66 07 ff 	mov	r6,2047
					monomeLedBuffer[96+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 2047) * 7;
80003c2e:	e0 6c 0b ff 	mov	r12,3071
					monomeLedBuffer[80+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 3071) * 7;
80003c32:	50 19       	stdsp	sp[0x4],r9
80003c34:	c3 58       	rjmp	80003c9e <refresh+0x412>
80003c36:	0f 8e       	ld.ub	lr,r7[0x0]
80003c38:	e2 0e 18 00 	cp.b	lr,r1
		if(edit_prob == 0) {
			// CURVES
			if(w.wp[pattern].cv_mode[edit_cv_ch] == 0) {
				for(i1=0;i1<SIZE;i1++) {
					// probs
					if(w.wp[pattern].cv_probs[edit_cv_ch][i1] == 255) monomeLedBuffer[48+i1] = 11;
80003c3c:	c0 31       	brne	80003c42 <refresh+0x3b6>
80003c3e:	b4 83       	st.b	r10[0x0],r3
80003c40:	c0 48       	rjmp	80003c48 <refresh+0x3bc>
80003c42:	58 0e       	cp.w	lr,0
80003c44:	c0 20       	breq	80003c48 <refresh+0x3bc>
					else if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 7;
80003c46:	b4 82       	st.b	r10[0x0],r2
80003c48:	30 0e       	mov	lr,0
80003c4a:	f5 6e 00 10 	st.b	r10[16],lr

					monomeLedBuffer[112+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 1023) * 7;
					monomeLedBuffer[96+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 2047) * 7;
					monomeLedBuffer[80+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 3071) * 7;
					monomeLedBuffer[64+i1] = 0;
80003c4e:	0b 1e       	ld.sh	lr,r5++
80003c50:	fc 04 19 00 	cp.h	r4,lr
				for(i1=0;i1<SIZE;i1++) {
					// probs
					if(w.wp[pattern].cv_probs[edit_cv_ch][i1] == 255) monomeLedBuffer[48+i1] = 11;
					else if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 7;

					monomeLedBuffer[112+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 1023) * 7;
80003c54:	f9 b0 03 07 	movlo	r0,7
80003c58:	f9 b0 02 00 	movhs	r0,0
80003c5c:	f5 60 00 40 	st.b	r10[64],r0
80003c60:	fc 06 19 00 	cp.h	r6,lr
					monomeLedBuffer[96+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 2047) * 7;
80003c64:	f9 b0 03 07 	movlo	r0,7
80003c68:	f9 b0 02 00 	movhs	r0,0
80003c6c:	f5 60 00 30 	st.b	r10[48],r0
80003c70:	fc 0c 19 00 	cp.h	r12,lr
					monomeLedBuffer[80+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1] > 3071) * 7;
80003c74:	f9 b0 03 07 	movlo	r0,7
80003c78:	f9 b0 02 00 	movhs	r0,0
80003c7c:	f5 60 00 20 	st.b	r10[32],r0
80003c80:	5c 7e       	castu.h	lr
80003c82:	e0 69 1a dc 	mov	r9,6876
					monomeLedBuffer[64+i1] = 0;
					monomeLedBuffer[64+16*(3-(w.wp[pattern].cv_curves[edit_cv_ch][i1]>>10))+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1]>>7) & 0x7;
80003c86:	e1 de c0 e3 	bfextu	r0,lr,0x7,0x3
80003c8a:	2f fa       	sub	r10,-1
80003c8c:	ab 8e       	lsr	lr,0xa
80003c8e:	2f f7       	sub	r7,-1
80003c90:	fc 0e 11 07 	rsub	lr,lr,7
80003c94:	a5 6e       	lsl	lr,0x4
80003c96:	16 0e       	add	lr,r11
80003c98:	2f fb       	sub	r11,-1
80003c9a:	f2 0e 0b 00 	st.b	r9[lr],r0
80003c9e:	f0 0b 18 00 	cp.b	r11,r8
	// show map
	else if(edit_mode == mMap) {
		if(edit_prob == 0) {
			// CURVES
			if(w.wp[pattern].cv_mode[edit_cv_ch] == 0) {
				for(i1=0;i1<SIZE;i1++) {
80003ca2:	cc a3       	brcs	80003c36 <refresh+0x3aa>
80003ca4:	40 19       	lddsp	r9,sp[0x4]
80003ca6:	f2 ca ff c0 	sub	r10,r9,-64
					monomeLedBuffer[64+i1] = 0;
					monomeLedBuffer[64+16*(3-(w.wp[pattern].cv_curves[edit_cv_ch][i1]>>10))+i1] = (w.wp[pattern].cv_curves[edit_cv_ch][i1]>>7) & 0x7;
				}

				// play step highlight
				monomeLedBuffer[64+pos] += 4;
80003caa:	e0 68 1a dc 	mov	r8,6876
80003cae:	f0 0a 07 0b 	ld.ub	r11,r8[r10]
80003cb2:	2f cb       	sub	r11,-4
80003cb4:	f0 0a 0b 0b 	st.b	r8[r10],r11
				monomeLedBuffer[80+pos] += 4;
80003cb8:	f2 ca ff b0 	sub	r10,r9,-80
80003cbc:	f0 0a 07 0b 	ld.ub	r11,r8[r10]
80003cc0:	2f cb       	sub	r11,-4
80003cc2:	f0 0a 0b 0b 	st.b	r8[r10],r11
				monomeLedBuffer[96+pos] += 4;
80003cc6:	f2 ca ff a0 	sub	r10,r9,-96
				monomeLedBuffer[112+pos] += 4;
80003cca:	29 09       	sub	r9,-112
				}

				// play step highlight
				monomeLedBuffer[64+pos] += 4;
				monomeLedBuffer[80+pos] += 4;
				monomeLedBuffer[96+pos] += 4;
80003ccc:	f0 0a 07 0b 	ld.ub	r11,r8[r10]
80003cd0:	2f cb       	sub	r11,-4
80003cd2:	f0 0a 0b 0b 	st.b	r8[r10],r11
				monomeLedBuffer[112+pos] += 4;
80003cd6:	f0 09 07 0a 	ld.ub	r10,r8[r9]
80003cda:	2f ca       	sub	r10,-4
80003cdc:	c6 19       	rjmp	80003f9e <refresh+0x712>
80003cde:	d7 03       	nop
80003ce0:	e0 65 1a 80 	mov	r5,6784
80003ce4:	e0 64 1a dc 	mov	r4,6876
80003ce8:	0b 83       	ld.ub	r3,r5[0x0]
80003cea:	f8 05 15 04 	lsl	r5,r12,0x4
80003cee:	f6 03 18 00 	cp.b	r3,r11
			}
			// MAP
			else {
				if(!scale_select) {
80003cf2:	c0 c0       	breq	80003d0a <refresh+0x47e>
80003cf4:	1c 05       	add	r5,lr
80003cf6:	2d 04       	sub	r4,-48
80003cf8:	ea c5 ff 34 	sub	r5,r5,-204
80003cfc:	3f f7       	mov	r7,-1
80003cfe:	ea 06 00 06 	add	r6,r5,r6
80003d02:	30 79       	mov	r9,7
80003d04:	30 be       	mov	lr,11
80003d06:	16 9c       	mov	r12,r11
					monomeLedBuffer[112+cv_chosen[edit_cv_ch]] = 11;
				}
				else {
					for(i1=0;i1<SIZE;i1++) {
						// probs
						if(w.wp[pattern].cv_probs[edit_cv_ch][i1] == 255) monomeLedBuffer[48+i1] = 11;
80003d08:	c9 18       	rjmp	80003e2a <refresh+0x59e>
				monomeLedBuffer[96+pos] += 4;
				monomeLedBuffer[112+pos] += 4;
			}
			// MAP
			else {
				if(!scale_select) {
80003d0a:	ee 07 10 76 	mul	r7,r7,118
				}
				else {
					for(i1=0;i1<SIZE;i1++) {
						// probs
						if(w.wp[pattern].cv_probs[edit_cv_ch][i1] == 255) monomeLedBuffer[48+i1] = 11;
						else if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 7;
80003d0e:	ea 07 00 0a 	add	r10,r5,r7

						monomeLedBuffer[64+i1] = (i1<8) * 4;						
						monomeLedBuffer[80+i1] = (i1<8) * 4;						
						monomeLedBuffer[96+i1] = (i1<8) * 4;						
						monomeLedBuffer[112+i1] = 0;
80003d12:	1c 05       	add	r5,lr
80003d14:	ea c5 ff 34 	sub	r5,r5,-204
						// clear edit select line
						monomeLedBuffer[64+i1] = 4;

						// show current edit value, selected
						if(edit_cv_value != -1) {
							if((w.wp[pattern].cv_values[edit_cv_value] >> 8) >= i1)
80003d18:	0c 05       	add	r5,r6
							monomeLedBuffer[80+i1] = 0;
							monomeLedBuffer[96+i1] = 0;
						}

						// show steps
						if(w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] & (1<<i1)) monomeLedBuffer[112+i1] = 7;
80003d1a:	e0 66 1a 68 	mov	r6,6760
80003d1e:	0d 81       	ld.ub	r1,r6[0x0]
80003d20:	e0 66 1a 5a 	mov	r6,6746
80003d24:	0d 83       	ld.ub	r3,r6[0x0]

						// clear edit select line
						monomeLedBuffer[64+i1] = 4;

						// show current edit value, selected
						if(edit_cv_value != -1) {
80003d26:	06 0a       	add	r10,r3
80003d28:	2d aa       	sub	r10,-38
							monomeLedBuffer[80+i1] = 0;
							monomeLedBuffer[96+i1] = 0;
						}

						// show steps
						if(w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] & (1<<i1)) monomeLedBuffer[112+i1] = 7;
80003d2a:	50 2a       	stdsp	sp[0x8],r10
80003d2c:	f5 d1 b0 08 	bfexts	r10,r1,0x0,0x8
80003d30:	14 07       	add	r7,r10
80003d32:	ee c2 ff ea 	sub	r2,r7,-22
						// clear edit select line
						monomeLedBuffer[64+i1] = 4;

						// show current edit value, selected
						if(edit_cv_value != -1) {
							if((w.wp[pattern].cv_values[edit_cv_value] >> 8) >= i1)
80003d36:	e8 ce ff b0 	sub	lr,r4,-80
80003d3a:	50 12       	stdsp	sp[0x4],r2
80003d3c:	e8 c6 ff 90 	sub	r6,r4,-112
							monomeLedBuffer[80+i1] = 0;
							monomeLedBuffer[96+i1] = 0;
						}

						// show steps
						if(w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] & (1<<i1)) monomeLedBuffer[112+i1] = 7;
80003d40:	e8 ca ff a0 	sub	r10,r4,-96
80003d44:	3f f2       	mov	r2,-1
80003d46:	30 77       	mov	r7,7
80003d48:	c3 f8       	rjmp	80003dc6 <refresh+0x53a>
80003d4a:	0b 84       	ld.ub	r4,r5[0x0]
			// MAP
			else {
				if(!scale_select) {
					for(i1=0;i1<SIZE;i1++) {
						// probs
						if(w.wp[pattern].cv_probs[edit_cv_ch][i1] == 255) monomeLedBuffer[48+i1] = 11;
80003d4c:	e4 04 18 00 	cp.b	r4,r2
						else if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 7;
80003d50:	c0 51       	brne	80003d5a <refresh+0x4ce>
			// MAP
			else {
				if(!scale_select) {
					for(i1=0;i1<SIZE;i1++) {
						// probs
						if(w.wp[pattern].cv_probs[edit_cv_ch][i1] == 255) monomeLedBuffer[48+i1] = 11;
80003d52:	30 b4       	mov	r4,11
80003d54:	f5 64 ff d0 	st.b	r10[-48],r4
80003d58:	c0 58       	rjmp	80003d62 <refresh+0x4d6>
80003d5a:	58 04       	cp.w	r4,0
80003d5c:	c0 30       	breq	80003d62 <refresh+0x4d6>
80003d5e:	f5 67 ff d0 	st.b	r10[-48],r7
						else if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 7;
80003d62:	30 44       	mov	r4,4
80003d64:	f5 64 ff e0 	st.b	r10[-32],r4
80003d68:	e4 01 18 00 	cp.b	r1,r2

						// clear edit select line
						monomeLedBuffer[64+i1] = 4;
80003d6c:	c1 70       	breq	80003d9a <refresh+0x50e>
80003d6e:	40 10       	lddsp	r0,sp[0x4]

						// show current edit value, selected
						if(edit_cv_value != -1) {
80003d70:	e0 64 0b 0c 	mov	r4,2828
80003d74:	e8 00 04 14 	ld.sh	r4,r4[r0<<0x1]
							if((w.wp[pattern].cv_values[edit_cv_value] >> 8) >= i1)
80003d78:	e1 d4 c1 08 	bfextu	r0,r4,0x8,0x8
80003d7c:	f6 00 19 00 	cp.h	r0,r11
80003d80:	c0 33       	brcs	80003d86 <refresh+0x4fa>
80003d82:	bc 87       	st.b	lr[0x0],r7
80003d84:	c0 38       	rjmp	80003d8a <refresh+0x4fe>
80003d86:	30 00       	mov	r0,0
								monomeLedBuffer[80+i1] = 7;
80003d88:	bc 80       	st.b	lr[0x0],r0
80003d8a:	e9 d4 c0 84 	bfextu	r4,r4,0x4,0x4
							else
								monomeLedBuffer[80+i1] = 0;
80003d8e:	16 34       	cp.w	r4,r11

							if(((w.wp[pattern].cv_values[edit_cv_value] >> 4) & 0xf) >= i1)
80003d90:	c0 35       	brlt	80003d96 <refresh+0x50a>
80003d92:	30 44       	mov	r4,4
80003d94:	c0 58       	rjmp	80003d9e <refresh+0x512>
80003d96:	30 04       	mov	r4,0
								monomeLedBuffer[96+i1] = 4;
80003d98:	c0 38       	rjmp	80003d9e <refresh+0x512>
80003d9a:	30 04       	mov	r4,0
							else
								monomeLedBuffer[96+i1] = 0;
80003d9c:	bc 84       	st.b	lr[0x0],r4
80003d9e:	b4 84       	st.b	r10[0x0],r4
						}
						else {
							monomeLedBuffer[80+i1] = 0;
80003da0:	40 20       	lddsp	r0,sp[0x8]
80003da2:	e0 64 0b 0c 	mov	r4,2828
							monomeLedBuffer[96+i1] = 0;
						}

						// show steps
						if(w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] & (1<<i1)) monomeLedBuffer[112+i1] = 7;
80003da6:	2f fa       	sub	r10,-1
80003da8:	e8 00 05 14 	ld.uh	r4,r4[r0<<0x1]
80003dac:	2f fe       	sub	lr,-1
80003dae:	e8 0b 08 44 	asr	r4,r4,r11
80003db2:	2f f5       	sub	r5,-1
80003db4:	e9 d4 c0 01 	bfextu	r4,r4,0x0,0x1
80003db8:	2f fb       	sub	r11,-1
80003dba:	08 90       	mov	r0,r4
						else monomeLedBuffer[112+i1] = 0;
80003dbc:	58 04       	cp.w	r4,0
							monomeLedBuffer[80+i1] = 0;
							monomeLedBuffer[96+i1] = 0;
						}

						// show steps
						if(w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] & (1<<i1)) monomeLedBuffer[112+i1] = 7;
80003dbe:	ee 00 17 10 	movne	r0,r7
80003dc2:	ac 80       	st.b	r6[0x0],r0
80003dc4:	2f f6       	sub	r6,-1
80003dc6:	f0 0b 18 00 	cp.b	r11,r8
				monomeLedBuffer[112+pos] += 4;
			}
			// MAP
			else {
				if(!scale_select) {
					for(i1=0;i1<SIZE;i1++) {
80003dca:	cc 03       	brcs	80003d4a <refresh+0x4be>
80003dcc:	e0 68 1a dc 	mov	r8,6876
						if(w.wp[pattern].cv_steps[edit_cv_ch][edit_cv_step] & (1<<i1)) monomeLedBuffer[112+i1] = 7;
						else monomeLedBuffer[112+i1] = 0;
					}

					// show play position
					monomeLedBuffer[64+pos] = 7;
80003dd0:	30 7a       	mov	r10,7
80003dd2:	f0 09 00 09 	add	r9,r8,r9
80003dd6:	f3 6a 00 40 	st.b	r9[64],r10
80003dda:	f0 03 00 03 	add	r3,r8,r3
					// show edit position
					monomeLedBuffer[64+edit_cv_step] = 11;
80003dde:	30 b9       	mov	r9,11
80003de0:	e0 6a 1a 58 	mov	r10,6744
80003de4:	e7 69 00 40 	st.b	r3[64],r9
					// show playing note
					monomeLedBuffer[112+cv_chosen[edit_cv_ch]] = 11;
80003de8:	f4 0c 07 0a 	ld.ub	r10,r10[r12]
80003dec:	14 08       	add	r8,r10
80003dee:	c2 48       	rjmp	80003e36 <refresh+0x5aa>
				}
				else {
					for(i1=0;i1<SIZE;i1++) {
						// probs
						if(w.wp[pattern].cv_probs[edit_cv_ch][i1] == 255) monomeLedBuffer[48+i1] = 11;
80003df0:	0d 8a       	ld.ub	r10,r6[0x0]
80003df2:	ee 0a 18 00 	cp.b	r10,r7
80003df6:	c0 31       	brne	80003dfc <refresh+0x570>
80003df8:	a8 8e       	st.b	r4[0x0],lr
80003dfa:	c0 48       	rjmp	80003e02 <refresh+0x576>
						else if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 7;
80003dfc:	58 0a       	cp.w	r10,0
80003dfe:	c0 20       	breq	80003e02 <refresh+0x576>
80003e00:	a8 89       	st.b	r4[0x0],r9
					monomeLedBuffer[64+edit_cv_step] = 11;
					// show playing note
					monomeLedBuffer[112+cv_chosen[edit_cv_ch]] = 11;
				}
				else {
					for(i1=0;i1<SIZE;i1++) {
80003e02:	f6 ca ff ff 	sub	r10,r11,-1
						// probs
						if(w.wp[pattern].cv_probs[edit_cv_ch][i1] == 255) monomeLedBuffer[48+i1] = 11;
						else if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 7;

						monomeLedBuffer[64+i1] = (i1<8) * 4;						
80003e06:	f6 09 18 00 	cp.b	r9,r11
80003e0a:	f9 bb 02 04 	movhs	r11,4
80003e0e:	f9 bb 03 00 	movlo	r11,0
						monomeLedBuffer[80+i1] = (i1<8) * 4;						
						monomeLedBuffer[96+i1] = (i1<8) * 4;						
						monomeLedBuffer[112+i1] = 0;
80003e12:	e9 6c 00 40 	st.b	r4[64],r12
						if(w.wp[pattern].cv_probs[edit_cv_ch][i1] == 255) monomeLedBuffer[48+i1] = 11;
						else if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 7;

						monomeLedBuffer[64+i1] = (i1<8) * 4;						
						monomeLedBuffer[80+i1] = (i1<8) * 4;						
						monomeLedBuffer[96+i1] = (i1<8) * 4;						
80003e16:	e9 6b 00 30 	st.b	r4[48],r11
					for(i1=0;i1<SIZE;i1++) {
						// probs
						if(w.wp[pattern].cv_probs[edit_cv_ch][i1] == 255) monomeLedBuffer[48+i1] = 11;
						else if(w.wp[pattern].cv_probs[edit_cv_ch][i1] > 0) monomeLedBuffer[48+i1] = 7;

						monomeLedBuffer[64+i1] = (i1<8) * 4;						
80003e1a:	e9 6b 00 10 	st.b	r4[16],r11
						monomeLedBuffer[80+i1] = (i1<8) * 4;						
80003e1e:	e9 6b 00 20 	st.b	r4[32],r11
					monomeLedBuffer[64+edit_cv_step] = 11;
					// show playing note
					monomeLedBuffer[112+cv_chosen[edit_cv_ch]] = 11;
				}
				else {
					for(i1=0;i1<SIZE;i1++) {
80003e22:	2f f6       	sub	r6,-1
80003e24:	f7 da c0 08 	bfextu	r11,r10,0x0,0x8
80003e28:	2f f4       	sub	r4,-1
80003e2a:	f0 0b 18 00 	cp.b	r11,r8
80003e2e:	ce 11       	brne	80003df0 <refresh+0x564>
						monomeLedBuffer[80+i1] = (i1<8) * 4;						
						monomeLedBuffer[96+i1] = (i1<8) * 4;						
						monomeLedBuffer[112+i1] = 0;
					}

					monomeLedBuffer[112] = 7;
80003e30:	30 79       	mov	r9,7
80003e32:	e0 68 1a dc 	mov	r8,6876
80003e36:	f1 69 00 70 	st.b	r8[112],r9
80003e3a:	cb 48       	rjmp	80003fa2 <refresh+0x716>
80003e3c:	f4 0b 18 00 	cp.b	r11,r10
80003e40:	e0 81 00 b1 	brne	80003fa2 <refresh+0x716>
80003e44:	e0 69 1a 77 	mov	r9,6775
80003e48:	13 89       	ld.ub	r9,r9[0x0]
80003e4a:	a5 69       	lsl	r9,0x4
80003e4c:	e0 6a 00 ec 	mov	r10,236
80003e50:	b5 37       	mul	r7,r10
80003e52:	f2 07 00 07 	add	r7,r9,r7
				}

			}
		}
		else if(edit_prob == 1) {
80003e56:	e0 69 0b 0c 	mov	r9,2828
80003e5a:	e0 6c 1a dc 	mov	r12,6876
80003e5e:	ee c7 ff 34 	sub	r7,r7,-204
80003e62:	18 93       	mov	r3,r12
80003e64:	12 07       	add	r7,r9
80003e66:	30 0b       	mov	r11,0
80003e68:	f8 c9 ff d0 	sub	r9,r12,-48
80003e6c:	30 4a       	mov	r10,4
80003e6e:	29 0c       	sub	r12,-112
80003e70:	3f f4       	mov	r4,-1
80003e72:	30 76       	mov	r6,7
					monomeLedBuffer[48+i1] = 0;
					monomeLedBuffer[112+i1] = 7;
				}
				else if(w.wp[pattern].cv_probs[edit_cv_ch][i1]) {
					monomeLedBuffer[48+i1] = 4;
					monomeLedBuffer[64+16*(3-(w.wp[pattern].cv_probs[edit_cv_ch][i1]>>6))+i1] = 7;
80003e74:	30 b5       	mov	r5,11
					monomeLedBuffer[112] = 7;
				}

			}
		}
		else if(edit_prob == 1) {
80003e76:	c1 f8       	rjmp	80003eb4 <refresh+0x628>
80003e78:	f3 6a 00 10 	st.b	r9[16],r10
80003e7c:	f3 6a 00 20 	st.b	r9[32],r10
80003e80:	f3 6a 00 30 	st.b	r9[48],r10
					monomeLedBuffer[48+i1] = 0;
					monomeLedBuffer[112+i1] = 7;
				}
				else if(w.wp[pattern].cv_probs[edit_cv_ch][i1]) {
					monomeLedBuffer[48+i1] = 4;
					monomeLedBuffer[64+16*(3-(w.wp[pattern].cv_probs[edit_cv_ch][i1]>>6))+i1] = 7;
80003e84:	b8 8a       	st.b	r12[0x0],r10
				monomeLedBuffer[80+i1] = 4;
				monomeLedBuffer[96+i1] = 4;
				monomeLedBuffer[112+i1] = 4;

				if(w.wp[pattern].cv_probs[edit_cv_ch][i1] == 255)
					monomeLedBuffer[48+i1] = 11;
80003e86:	0f 8e       	ld.ub	lr,r7[0x0]
80003e88:	e8 0e 18 00 	cp.b	lr,r4

			}
		}
		else if(edit_prob == 1) {
			for(i1=0;i1<SIZE;i1++) {
				monomeLedBuffer[64+i1] = 4;
80003e8c:	c0 31       	brne	80003e92 <refresh+0x606>
				monomeLedBuffer[80+i1] = 4;
80003e8e:	b2 85       	st.b	r9[0x0],r5
80003e90:	c0 e8       	rjmp	80003eac <refresh+0x620>
				monomeLedBuffer[96+i1] = 4;
80003e92:	58 0e       	cp.w	lr,0
80003e94:	c0 41       	brne	80003e9c <refresh+0x610>
				monomeLedBuffer[112+i1] = 4;
80003e96:	b2 8e       	st.b	r9[0x0],lr

				if(w.wp[pattern].cv_probs[edit_cv_ch][i1] == 255)
80003e98:	b8 86       	st.b	r12[0x0],r6
80003e9a:	c0 98       	rjmp	80003eac <refresh+0x620>
80003e9c:	b2 8a       	st.b	r9[0x0],r10
80003e9e:	a7 8e       	lsr	lr,0x6
					monomeLedBuffer[48+i1] = 11;
80003ea0:	fc 0e 11 07 	rsub	lr,lr,7
				else if(w.wp[pattern].cv_probs[edit_cv_ch][i1] == 0) {
80003ea4:	a5 6e       	lsl	lr,0x4
80003ea6:	16 0e       	add	lr,r11
					monomeLedBuffer[48+i1] = 0;
80003ea8:	e6 0e 0b 06 	st.b	r3[lr],r6
					monomeLedBuffer[112+i1] = 7;
80003eac:	2f fb       	sub	r11,-1
				}
				else if(w.wp[pattern].cv_probs[edit_cv_ch][i1]) {
					monomeLedBuffer[48+i1] = 4;
80003eae:	2f f9       	sub	r9,-1
					monomeLedBuffer[64+16*(3-(w.wp[pattern].cv_probs[edit_cv_ch][i1]>>6))+i1] = 7;
80003eb0:	2f fc       	sub	r12,-1
80003eb2:	2f f7       	sub	r7,-1
80003eb4:	f0 0b 18 00 	cp.b	r11,r8
80003eb8:	ce 03       	brcs	80003e78 <refresh+0x5ec>
80003eba:	c7 48       	rjmp	80003fa2 <refresh+0x716>
80003ebc:	58 2a       	cp.w	r10,2
80003ebe:	c7 21       	brne	80003fa2 <refresh+0x716>
80003ec0:	34 07       	mov	r7,64
80003ec2:	ee 08 0c 06 	divs	r6,r7,r8
				}

			}
		}
		else if(edit_prob == 1) {
			for(i1=0;i1<SIZE;i1++) {
80003ec6:	e0 6b 0b 0c 	mov	r11,2828
80003eca:	e0 69 1a 83 	mov	r9,6787
		}

	}

	// series
	else if(edit_mode == mSeries) {
80003ece:	50 26       	stdsp	sp[0x8],r6
80003ed0:	13 89       	ld.ub	r9,r9[0x0]
				if(i1+scroll_pos == w.series_start || i1+scroll_pos == w.series_end) monomeLedBuffer[32+i1*16+i2] = 4;
				else monomeLedBuffer[32+i1*16+i2] = 0;
			}

			// scroll position helper
			monomeLedBuffer[32+i1*16+((scroll_pos+i1)/(64/SIZE))] = 4;
80003ed2:	f7 30 0f 40 	ld.ub	r0,r11[3904]
80003ed6:	f2 c6 f8 a0 	sub	r6,r9,-1888
	// series
	else if(edit_mode == mSeries) {
		for(i1 = 0;i1<6;i1++) {
			for(i2=0;i2<SIZE;i2++) {
				// start/end bars, clear
				if(i1+scroll_pos == w.series_start || i1+scroll_pos == w.series_end) monomeLedBuffer[32+i1*16+i2] = 4;
80003eda:	f6 06 00 16 	add	r6,r11,r6<<0x1
80003ede:	f7 3b 0f 41 	ld.ub	r11,r11[3905]
80003ee2:	2e 04       	sub	r4,-32
				else monomeLedBuffer[32+i1*16+i2] = 0;
			}

			// scroll position helper
			monomeLedBuffer[32+i1*16+((scroll_pos+i1)/(64/SIZE))] = 4;
80003ee4:	e0 65 1a dc 	mov	r5,6876
80003ee8:	50 1b       	stdsp	sp[0x4],r11
80003eea:	0a 04       	add	r4,r5
	// series
	else if(edit_mode == mSeries) {
		for(i1 = 0;i1<6;i1++) {
			for(i2=0;i2<SIZE;i2++) {
				// start/end bars, clear
				if(i1+scroll_pos == w.series_start || i1+scroll_pos == w.series_end) monomeLedBuffer[32+i1*16+i2] = 4;
80003eec:	30 0a       	mov	r10,0
80003eee:	32 0b       	mov	r11,32
				else monomeLedBuffer[32+i1*16+i2] = 0;
			}

			// scroll position helper
			monomeLedBuffer[32+i1*16+((scroll_pos+i1)/(64/SIZE))] = 4;
80003ef0:	30 47       	mov	r7,4
80003ef2:	c3 78       	rjmp	80003f60 <refresh+0x6d4>
	// series
	else if(edit_mode == mSeries) {
		for(i1 = 0;i1<6;i1++) {
			for(i2=0;i2<SIZE;i2++) {
				// start/end bars, clear
				if(i1+scroll_pos == w.series_start || i1+scroll_pos == w.series_end) monomeLedBuffer[32+i1*16+i2] = 4;
80003ef4:	00 3c       	cp.w	r12,r0
				else monomeLedBuffer[32+i1*16+i2] = 0;
			}

			// scroll position helper
			monomeLedBuffer[32+i1*16+((scroll_pos+i1)/(64/SIZE))] = 4;
80003ef6:	c0 40       	breq	80003efe <refresh+0x672>
80003ef8:	40 19       	lddsp	r9,sp[0x4]
80003efa:	12 3c       	cp.w	r12,r9
	// series
	else if(edit_mode == mSeries) {
		for(i1 = 0;i1<6;i1++) {
			for(i2=0;i2<SIZE;i2++) {
				// start/end bars, clear
				if(i1+scroll_pos == w.series_start || i1+scroll_pos == w.series_end) monomeLedBuffer[32+i1*16+i2] = 4;
80003efc:	c0 31       	brne	80003f02 <refresh+0x676>
80003efe:	a6 87       	st.b	r3[0x0],r7
80003f00:	c0 38       	rjmp	80003f06 <refresh+0x67a>
80003f02:	30 09       	mov	r9,0
80003f04:	a4 89       	st.b	r2[0x0],r9
80003f06:	2f f1       	sub	r1,-1
80003f08:	2f f3       	sub	r3,-1
80003f0a:	5c 51       	castu.b	r1
80003f0c:	2f f2       	sub	r2,-1
				else monomeLedBuffer[32+i1*16+i2] = 0;
80003f0e:	f0 01 18 00 	cp.b	r1,r8
	}

	// series
	else if(edit_mode == mSeries) {
		for(i1 = 0;i1<6;i1++) {
			for(i2=0;i2<SIZE;i2++) {
80003f12:	cf 13       	brcs	80003ef4 <refresh+0x668>
80003f14:	40 21       	lddsp	r1,sp[0x8]
80003f16:	f8 01 0c 02 	divs	r2,r12,r1
80003f1a:	ea 0b 00 01 	add	r1,r5,r11
80003f1e:	e2 02 0b 07 	st.b	r1[r2],r7
				if(i1+scroll_pos == w.series_start || i1+scroll_pos == w.series_end) monomeLedBuffer[32+i1*16+i2] = 4;
				else monomeLedBuffer[32+i1*16+i2] = 0;
			}

			// scroll position helper
			monomeLedBuffer[32+i1*16+((scroll_pos+i1)/(64/SIZE))] = 4;
80003f22:	40 39       	lddsp	r9,sp[0xc]
80003f24:	00 3c       	cp.w	r12,r0
80003f26:	e0 8a 00 08 	brle	80003f36 <refresh+0x6aa>
80003f2a:	40 13       	lddsp	r3,sp[0x4]
80003f2c:	06 3c       	cp.w	r12,r3
80003f2e:	c0 44       	brge	80003f36 <refresh+0x6aa>
			
			// sidebar selection indicators
			if(i1+scroll_pos > w.series_start && i1+scroll_pos < w.series_end) {
80003f30:	ea 0b 0b 07 	st.b	r5[r11],r7
80003f34:	a8 87       	st.b	r4[0x0],r7
80003f36:	30 0c       	mov	r12,0
80003f38:	c0 b8       	rjmp	80003f4e <refresh+0x6c2>
80003f3a:	8c 83       	ld.uh	r3,r6[0x0]
				monomeLedBuffer[32+i1*16] = 4;
80003f3c:	e6 0c 08 43 	asr	r3,r3,r12
				monomeLedBuffer[32+i1*16+LENGTH] = 4;
80003f40:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80003f44:	c0 30       	breq	80003f4a <refresh+0x6be>
			}

			for(i2=0;i2<SIZE;i2++) {
				// show possible states
				if((w.series_list[i1+scroll_pos] >> i2) & 1)
80003f46:	30 72       	mov	r2,7
80003f48:	bc 82       	st.b	lr[0x0],r2
80003f4a:	2f fc       	sub	r12,-1
80003f4c:	2f fe       	sub	lr,-1
80003f4e:	f0 0c 18 00 	cp.b	r12,r8
					monomeLedBuffer[32+(i1*16)+i2] = 7;
80003f52:	cf 43       	brcs	80003f3a <refresh+0x6ae>
80003f54:	2f fa       	sub	r10,-1
80003f56:	2f 0b       	sub	r11,-16
80003f58:	2f e6       	sub	r6,-2
			if(i1+scroll_pos > w.series_start && i1+scroll_pos < w.series_end) {
				monomeLedBuffer[32+i1*16] = 4;
				monomeLedBuffer[32+i1*16+LENGTH] = 4;
			}

			for(i2=0;i2<SIZE;i2++) {
80003f5a:	2f 04       	sub	r4,-16
80003f5c:	58 6a       	cp.w	r10,6
80003f5e:	c0 b0       	breq	80003f74 <refresh+0x6e8>
80003f60:	f6 05 00 0e 	add	lr,r11,r5
80003f64:	30 01       	mov	r1,0
80003f66:	1c 92       	mov	r2,lr

	}

	// series
	else if(edit_mode == mSeries) {
		for(i1 = 0;i1<6;i1++) {
80003f68:	1c 93       	mov	r3,lr
80003f6a:	f4 09 00 0c 	add	r12,r10,r9
80003f6e:	50 39       	stdsp	sp[0xc],r9
80003f70:	cc fb       	rjmp	80003f0e <refresh+0x682>
80003f72:	d7 03       	nop
80003f74:	e0 68 0b 05 	mov	r8,2821
80003f78:	11 88       	ld.ub	r8,r8[0x0]
80003f7a:	f2 08 18 00 	cp.b	r8,r9
80003f7e:	c1 23       	brcs	80003fa2 <refresh+0x716>
80003f80:	f2 ca ff fb 	sub	r10,r9,-5
80003f84:	10 3a       	cp.w	r10,r8
80003f86:	c0 e5       	brlt	80003fa2 <refresh+0x716>
80003f88:	2f e8       	sub	r8,-2
80003f8a:	f0 09 01 09 	sub	r9,r8,r9
80003f8e:	e0 68 1a 90 	mov	r8,6800
			}

		}

		// highlight playhead
		if(series_pos >= scroll_pos && series_pos < scroll_pos+6) {
80003f92:	11 8a       	ld.ub	r10,r8[0x0]
80003f94:	a5 69       	lsl	r9,0x4
80003f96:	e0 68 1a dc 	mov	r8,6876
80003f9a:	14 09       	add	r9,r10
80003f9c:	30 ba       	mov	r10,11
80003f9e:	f0 09 0b 0a 	st.b	r8[r9],r10
			monomeLedBuffer[32+(series_pos-scroll_pos)*16+series_playing] = 11;
80003fa2:	30 0c       	mov	r12,0
80003fa4:	e0 a0 09 0c 	rcall	800051bc <monome_set_quadrant_flag>
80003fa8:	30 1c       	mov	r12,1
80003faa:	e0 a0 09 09 	rcall	800051bc <monome_set_quadrant_flag>
80003fae:	2f ad       	sub	sp,-24
80003fb0:	d8 32       	popm	r0-r7,pc
80003fb2:	d7 03       	nop

80003fb4 <handler_MonomeConnect>:
80003fb4:	d4 01       	pushm	lr
80003fb6:	e0 69 1a 91 	mov	r9,6801
		}
	}

	monome_set_quadrant_flag(0);
80003fba:	30 08       	mov	r8,0
80003fbc:	b2 88       	st.b	r9[0x0],r8
	monome_set_quadrant_flag(1);
80003fbe:	e0 69 1a 69 	mov	r9,6761
80003fc2:	b2 88       	st.b	r9[0x0],r8
}
80003fc4:	e0 a0 09 06 	rcall	800051d0 <monome_size_x>
80003fc8:	e0 68 0a f4 	mov	r8,2804
80003fcc:	f8 c9 00 01 	sub	r9,r12,1
80003fd0:	b0 8c       	st.b	r8[0x0],r12
80003fd2:	e0 68 0b 07 	mov	r8,2823
80003fd6:	b0 89       	st.b	r8[0x0],r9
	key_count = 0;
	SIZE = monome_size_x();
	LENGTH = SIZE - 1;
	// print_dbg("\r monome size: ");
	// print_dbg_ulong(SIZE);
	VARI = monome_is_vari();
80003fd8:	e0 a0 09 00 	rcall	800051d8 <monome_is_vari>
	// print_dbg("\r monome vari: ");
	// print_dbg_ulong(VARI);

	if(VARI) re = &refresh;
80003fdc:	e0 68 1a 51 	mov	r8,6737
80003fe0:	b0 8c       	st.b	r8[0x0],r12
	else re = &refresh_mono;

	for(i1=0;i1<16;i1++)
		if(w.wp[i1].loop_end > LENGTH)
80003fe2:	e0 68 0b 00 	mov	r8,2816
	timers_unset_monome();
	// event_t e = { .type = kEventMonomeDisconnect };
	// event_post(&e);
}

static void handler_MonomeConnect(s32 data) {
80003fe6:	58 0c       	cp.w	r12,0
80003fe8:	c0 d0       	breq	80004002 <handler_MonomeConnect+0x4e>

	if(VARI) re = &refresh;
	else re = &refresh_mono;

	for(i1=0;i1<16;i1++)
		if(w.wp[i1].loop_end > LENGTH)
80003fea:	fe c9 07 5e 	sub	r9,pc,1886
80003fee:	91 09       	st.w	r8[0x0],r9
	VARI = monome_is_vari();
	// print_dbg("\r monome vari: ");
	// print_dbg_ulong(VARI);

	if(VARI) re = &refresh;
	else re = &refresh_mono;
80003ff0:	e0 68 0b 0c 	mov	r8,2828

	for(i1=0;i1<16;i1++)
		if(w.wp[i1].loop_end > LENGTH)
80003ff4:	e0 69 0b 07 	mov	r9,2823
80003ff8:	f0 ca f1 3f 	sub	r10,r8,-3777
80003ffc:	13 89       	ld.ub	r9,r9[0x0]
			w.wp[i1].loop_end = LENGTH;
80003ffe:	2f f8       	sub	r8,-1
80004000:	c0 48       	rjmp	80004008 <handler_MonomeConnect+0x54>
80004002:	fe c9 0c a2 	sub	r9,pc,3234
	// print_dbg_ulong(VARI);

	if(VARI) re = &refresh;
	else re = &refresh_mono;

	for(i1=0;i1<16;i1++)
80004006:	cf 4b       	rjmp	80003fee <handler_MonomeConnect+0x3a>
			w.wp[i1].loop_end = LENGTH;
	

	// monome_set_quadrant_flag(0);
	// monome_set_quadrant_flag(1);
	timers_set_monome();
80004008:	11 8b       	ld.ub	r11,r8[0x0]
8000400a:	f2 0b 18 00 	cp.b	r11,r9
}
8000400e:	e0 88 00 03 	brls	80004014 <handler_MonomeConnect+0x60>
80004012:	b0 89       	st.b	r8[0x0],r9
80004014:	f0 c8 ff 14 	sub	r8,r8,-236
80004018:	14 38       	cp.w	r8,r10
8000401a:	cf 71       	brne	80004008 <handler_MonomeConnect+0x54>
8000401c:	fe b0 f1 6c 	rcall	800022f4 <timers_set_monome>
80004020:	d8 02       	popm	pc
80004022:	d7 03       	nop

80004024 <handler_FtdiConnect>:
80004024:	d4 01       	pushm	lr
80004026:	e0 a0 0e 45 	rcall	80005cb0 <ftdi_setup>
8000402a:	d8 02       	popm	pc

8000402c <handler_KeyTimer>:
8000402c:	d4 31       	pushm	r0-r7,lr
8000402e:	20 cd       	sub	sp,48
80004030:	e0 67 1a 5e 	mov	r7,6750
80004034:	0f 88       	ld.ub	r8,r7[0x0]
80004036:	58 08       	cp.w	r8,0
80004038:	c1 60       	breq	80004064 <handler_KeyTimer+0x38>
8000403a:	30 19       	mov	r9,1
8000403c:	f2 08 18 00 	cp.b	r8,r9
	static u16 i1,x,n1;

	if(front_timer) {
		if(front_timer == 1) {
			static event_t e;
			e.type = kEventSaveFlash;
80004040:	c1 01       	brne	80004060 <handler_KeyTimer+0x34>
80004042:	e0 68 06 1c 	mov	r8,1564
80004046:	30 59       	mov	r9,5
			event_post(&e);
80004048:	10 9c       	mov	r12,r8
8000404a:	91 09       	st.w	r8[0x0],r9

			preset_mode = 0;
			front_timer--;
8000404c:	e0 a0 07 2a 	rcall	80004ea0 <event_post>
		if(front_timer == 1) {
			static event_t e;
			e.type = kEventSaveFlash;
			event_post(&e);

			preset_mode = 0;
80004050:	0f 88       	ld.ub	r8,r7[0x0]
			front_timer--;
80004052:	20 18       	sub	r8,1
		if(front_timer == 1) {
			static event_t e;
			e.type = kEventSaveFlash;
			event_post(&e);

			preset_mode = 0;
80004054:	30 09       	mov	r9,0
80004056:	ae 88       	st.b	r7[0x0],r8
80004058:	e0 68 1a 50 	mov	r8,6736
			front_timer--;
		}
		else front_timer--;
8000405c:	b0 89       	st.b	r8[0x0],r9
	}

	for(i1=0;i1<key_count;i1++) {
8000405e:	c0 38       	rjmp	80004064 <handler_KeyTimer+0x38>
80004060:	20 18       	sub	r8,1
80004062:	ae 88       	st.b	r7[0x0],r8
80004064:	e0 68 05 e8 	mov	r8,1512
		if(--key_times[held_keys[i1]]==0) {
			if(edit_mode != mSeries && preset_mode == 0) {
				// preset copy
				if(held_keys[i1] / 16 == 2) {
					x = held_keys[i1] % 16;
					for(n1=0;n1<16;n1++) {
80004068:	30 09       	mov	r9,0
						w.wp[x].steps[n1] = w.wp[pattern].steps[n1];
8000406a:	e0 67 0b 0c 	mov	r7,2828
8000406e:	10 94       	mov	r4,r8
			front_timer--;
		}
		else front_timer--;
	}

	for(i1=0;i1<key_count;i1++) {
80004070:	b0 09       	st.h	r8[0x0],r9
		if(key_times[held_keys[i1]])
80004072:	30 f3       	mov	r3,15
80004074:	e0 65 00 ec 	mov	r5,236
80004078:	0e 96       	mov	r6,r7
8000407a:	ce 08       	rjmp	8000423a <handler_KeyTimer+0x20e>
8000407c:	5c 78       	castu.h	r8
8000407e:	e0 6b 09 d4 	mov	r11,2516
80004082:	f6 08 07 0e 	ld.ub	lr,r11[r8]
		if(--key_times[held_keys[i1]]==0) {
80004086:	e0 68 09 f4 	mov	r8,2548
8000408a:	f0 0e 07 0a 	ld.ub	r10,r8[lr]
8000408e:	58 0a       	cp.w	r10,0
80004090:	e0 80 00 d2 	breq	80004234 <handler_KeyTimer+0x208>
			if(edit_mode != mSeries && preset_mode == 0) {
80004094:	20 1a       	sub	r10,1
80004096:	5c 5a       	castu.b	r10
80004098:	f0 0e 0b 0a 	st.b	r8[lr],r10
8000409c:	e0 81 00 cc 	brne	80004234 <handler_KeyTimer+0x208>
800040a0:	e0 68 1a 88 	mov	r8,6792
800040a4:	70 08       	ld.w	r8,r8[0x0]
800040a6:	58 28       	cp.w	r8,2
				// preset copy
				if(held_keys[i1] / 16 == 2) {
800040a8:	e0 80 00 b0 	breq	80004208 <handler_KeyTimer+0x1dc>
800040ac:	e0 68 1a 50 	mov	r8,6736
800040b0:	11 89       	ld.ub	r9,r8[0x0]
800040b2:	f4 09 18 00 	cp.b	r9,r10
					x = held_keys[i1] % 16;
800040b6:	e0 81 00 a9 	brne	80004208 <handler_KeyTimer+0x1dc>
800040ba:	fc c9 00 20 	sub	r9,lr,32
800040be:	30 f8       	mov	r8,15
					for(n1=0;n1<16;n1++) {
						w.wp[x].steps[n1] = w.wp[pattern].steps[n1];
800040c0:	f0 09 18 00 	cp.b	r9,r8
800040c4:	e0 8b 00 b8 	brhi	80004234 <handler_KeyTimer+0x208>
		if(key_times[held_keys[i1]])
		if(--key_times[held_keys[i1]]==0) {
			if(edit_mode != mSeries && preset_mode == 0) {
				// preset copy
				if(held_keys[i1] / 16 == 2) {
					x = held_keys[i1] % 16;
800040c8:	fd de c0 04 	bfextu	lr,lr,0x0,0x4
					for(n1=0;n1<16;n1++) {
						w.wp[x].steps[n1] = w.wp[pattern].steps[n1];
800040cc:	e0 68 06 24 	mov	r8,1572
						w.wp[x].step_probs[n1] = w.wp[pattern].step_probs[n1];
						w.wp[x].cv_values[n1] = w.wp[pattern].cv_values[n1];
800040d0:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
800040d4:	f2 05 02 4b 	mul	r11,r9,r5
			if(edit_mode != mSeries && preset_mode == 0) {
				// preset copy
				if(held_keys[i1] / 16 == 2) {
					x = held_keys[i1] % 16;
					for(n1=0;n1<16;n1++) {
						w.wp[x].steps[n1] = w.wp[pattern].steps[n1];
800040d8:	ee 0b 00 0b 	add	r11,r7,r11
800040dc:	b0 0e       	st.h	r8[0x0],lr
800040de:	50 9b       	stdsp	sp[0x24],r11
800040e0:	e0 68 1a 5b 	mov	r8,6747
		if(--key_times[held_keys[i1]]==0) {
			if(edit_mode != mSeries && preset_mode == 0) {
				// preset copy
				if(held_keys[i1] / 16 == 2) {
					x = held_keys[i1] % 16;
					for(n1=0;n1<16;n1++) {
800040e4:	f2 01 10 76 	mul	r1,r9,118
800040e8:	11 88       	ld.ub	r8,r8[0x0]
800040ea:	50 b1       	stdsp	sp[0x2c],r1
800040ec:	f0 05 02 4b 	mul	r11,r8,r5
800040f0:	50 09       	stdsp	sp[0x0],r9
800040f2:	ee 0b 00 0b 	add	r11,r7,r11
800040f6:	50 ab       	stdsp	sp[0x28],r11
800040f8:	c2 f8       	rjmp	80004156 <handler_KeyTimer+0x12a>
800040fa:	d7 03       	nop
800040fc:	f7 30 00 0c 	ld.ub	r0,r11[12]
80004100:	f9 60 00 0c 	st.b	r12[12],r0
80004104:	f7 30 00 1c 	ld.ub	r0,r11[28]
80004108:	f9 60 00 1c 	st.b	r12[28],r0
8000410c:	40 10       	lddsp	r0,sp[0x4]
8000410e:	ee 01 04 11 	ld.sh	r1,r7[r1<<0x1]
						w.wp[x].steps[n1] = w.wp[pattern].steps[n1];
80004112:	ee 00 0a 11 	st.h	r7[r0<<0x1],r1
80004116:	40 30       	lddsp	r0,sp[0xc]
						w.wp[x].step_probs[n1] = w.wp[pattern].step_probs[n1];
80004118:	ee 00 04 11 	ld.sh	r1,r7[r0<<0x1]
8000411c:	40 20       	lddsp	r0,sp[0x8]
8000411e:	ee 00 0a 11 	st.h	r7[r0<<0x1],r1
						w.wp[x].cv_values[n1] = w.wp[pattern].cv_values[n1];
80004122:	40 50       	lddsp	r0,sp[0x14]
80004124:	ee 00 04 11 	ld.sh	r1,r7[r0<<0x1]
80004128:	40 40       	lddsp	r0,sp[0x10]
						w.wp[x].cv_steps[0][n1] = w.wp[pattern].cv_steps[0][n1];
8000412a:	ee 00 0a 11 	st.h	r7[r0<<0x1],r1
8000412e:	f7 31 00 cc 	ld.ub	r1,r11[204]
80004132:	f9 61 00 cc 	st.b	r12[204],r1
						w.wp[x].cv_curves[0][n1] = w.wp[pattern].cv_curves[0][n1];
80004136:	40 70       	lddsp	r0,sp[0x1c]
80004138:	ee 00 04 11 	ld.sh	r1,r7[r0<<0x1]
8000413c:	40 60       	lddsp	r0,sp[0x18]
8000413e:	ee 00 0a 11 	st.h	r7[r0<<0x1],r1
						w.wp[x].cv_probs[0][n1] = w.wp[pattern].cv_probs[0][n1];
80004142:	ee 09 04 11 	ld.sh	r1,r7[r9<<0x1]
80004146:	ee 02 0a 11 	st.h	r7[r2<<0x1],r1
						w.wp[x].cv_steps[1][n1] = w.wp[pattern].cv_steps[1][n1];
8000414a:	2f fa       	sub	r10,-1
8000414c:	f7 3b 00 dc 	ld.ub	r11,r11[220]
80004150:	5c 8a       	casts.h	r10
80004152:	f9 6b 00 dc 	st.b	r12[220],r11
						w.wp[x].cv_curves[1][n1] = w.wp[pattern].cv_curves[1][n1];
80004156:	e3 da c0 10 	bfextu	r1,r10,0x0,0x10
8000415a:	40 b2       	lddsp	r2,sp[0x2c]
8000415c:	02 02       	add	r2,r1
						w.wp[x].cv_probs[1][n1] = w.wp[pattern].cv_probs[1][n1];
8000415e:	e4 c9 ff ea 	sub	r9,r2,-22
80004162:	50 19       	stdsp	sp[0x4],r9
80004164:	e4 c9 ff da 	sub	r9,r2,-38
80004168:	f0 00 10 76 	mul	r0,r8,118
			if(edit_mode != mSeries && preset_mode == 0) {
				// preset copy
				if(held_keys[i1] / 16 == 2) {
					x = held_keys[i1] % 16;
					for(n1=0;n1<16;n1++) {
						w.wp[x].steps[n1] = w.wp[pattern].steps[n1];
8000416c:	50 29       	stdsp	sp[0x8],r9
						w.wp[x].step_probs[n1] = w.wp[pattern].step_probs[n1];
						w.wp[x].cv_values[n1] = w.wp[pattern].cv_values[n1];
8000416e:	02 00       	add	r0,r1
80004170:	e0 c9 ff da 	sub	r9,r0,-38
80004174:	50 39       	stdsp	sp[0xc],r9
80004176:	e4 c9 ff ba 	sub	r9,r2,-70
						w.wp[x].cv_steps[0][n1] = w.wp[pattern].cv_steps[0][n1];
8000417a:	50 49       	stdsp	sp[0x10],r9
				if(held_keys[i1] / 16 == 2) {
					x = held_keys[i1] % 16;
					for(n1=0;n1<16;n1++) {
						w.wp[x].steps[n1] = w.wp[pattern].steps[n1];
						w.wp[x].step_probs[n1] = w.wp[pattern].step_probs[n1];
						w.wp[x].cv_values[n1] = w.wp[pattern].cv_values[n1];
8000417c:	e0 c9 ff ba 	sub	r9,r0,-70
						w.wp[x].cv_steps[0][n1] = w.wp[pattern].cv_steps[0][n1];
80004180:	50 59       	stdsp	sp[0x14],r9
				if(held_keys[i1] / 16 == 2) {
					x = held_keys[i1] % 16;
					for(n1=0;n1<16;n1++) {
						w.wp[x].steps[n1] = w.wp[pattern].steps[n1];
						w.wp[x].step_probs[n1] = w.wp[pattern].step_probs[n1];
						w.wp[x].cv_values[n1] = w.wp[pattern].cv_values[n1];
80004182:	e4 c9 ff ca 	sub	r9,r2,-54
						w.wp[x].cv_steps[0][n1] = w.wp[pattern].cv_steps[0][n1];
80004186:	50 69       	stdsp	sp[0x18],r9
80004188:	e0 c9 ff ca 	sub	r9,r0,-54
						w.wp[x].cv_curves[0][n1] = w.wp[pattern].cv_curves[0][n1];
8000418c:	50 79       	stdsp	sp[0x1c],r9
8000418e:	40 9c       	lddsp	r12,sp[0x24]
80004190:	40 ab       	lddsp	r11,sp[0x28]
80004192:	02 0c       	add	r12,r1
80004194:	02 0b       	add	r11,r1
						w.wp[x].cv_probs[0][n1] = w.wp[pattern].cv_probs[0][n1];
						w.wp[x].cv_steps[1][n1] = w.wp[pattern].cv_steps[1][n1];
80004196:	2a a2       	sub	r2,-86
80004198:	e0 c1 ff ea 	sub	r1,r0,-22
8000419c:	e0 c9 ff aa 	sub	r9,r0,-86
800041a0:	e6 0a 19 00 	cp.h	r10,r3
			if(edit_mode != mSeries && preset_mode == 0) {
				// preset copy
				if(held_keys[i1] / 16 == 2) {
					x = held_keys[i1] % 16;
					for(n1=0;n1<16;n1++) {
						w.wp[x].steps[n1] = w.wp[pattern].steps[n1];
800041a4:	fe 98 ff ac 	brls	800040fc <handler_KeyTimer+0xd0>
800041a8:	40 09       	lddsp	r9,sp[0x0]
						w.wp[x].cv_values[n1] = w.wp[pattern].cv_values[n1];
						w.wp[x].cv_steps[0][n1] = w.wp[pattern].cv_steps[0][n1];
						w.wp[x].cv_curves[0][n1] = w.wp[pattern].cv_curves[0][n1];
						w.wp[x].cv_probs[0][n1] = w.wp[pattern].cv_probs[0][n1];
						w.wp[x].cv_steps[1][n1] = w.wp[pattern].cv_steps[1][n1];
						w.wp[x].cv_curves[1][n1] = w.wp[pattern].cv_curves[1][n1];
800041aa:	f0 0c 15 04 	lsl	r12,r8,0x4
				if(held_keys[i1] / 16 == 2) {
					x = held_keys[i1] % 16;
					for(n1=0;n1<16;n1++) {
						w.wp[x].steps[n1] = w.wp[pattern].steps[n1];
						w.wp[x].step_probs[n1] = w.wp[pattern].step_probs[n1];
						w.wp[x].cv_values[n1] = w.wp[pattern].cv_values[n1];
800041ae:	f2 0b 15 04 	lsl	r11,r9,0x4
						w.wp[x].cv_steps[0][n1] = w.wp[pattern].cv_steps[0][n1];
						w.wp[x].cv_curves[0][n1] = w.wp[pattern].cv_curves[0][n1];
						w.wp[x].cv_probs[0][n1] = w.wp[pattern].cv_probs[0][n1];
						w.wp[x].cv_steps[1][n1] = w.wp[pattern].cv_steps[1][n1];
						w.wp[x].cv_curves[1][n1] = w.wp[pattern].cv_curves[1][n1];
800041b2:	10 1c       	sub	r12,r8
		if(--key_times[held_keys[i1]]==0) {
			if(edit_mode != mSeries && preset_mode == 0) {
				// preset copy
				if(held_keys[i1] / 16 == 2) {
					x = held_keys[i1] % 16;
					for(n1=0;n1<16;n1++) {
800041b4:	12 1b       	sub	r11,r9
800041b6:	a3 6c       	lsl	r12,0x2
800041b8:	a3 6b       	lsl	r11,0x2
800041ba:	10 1c       	sub	r12,r8
800041bc:	12 1b       	sub	r11,r9
						w.wp[x].cv_steps[1][n1] = w.wp[pattern].cv_steps[1][n1];
						w.wp[x].cv_curves[1][n1] = w.wp[pattern].cv_curves[1][n1];
						w.wp[x].cv_probs[1][n1] = w.wp[pattern].cv_probs[1][n1];
					}

					w.wp[x].cv_mode[0] = w.wp[pattern].cv_mode[0];
800041be:	ec 0c 00 2c 	add	r12,r6,r12<<0x2
800041c2:	ec 0b 00 2b 	add	r11,r6,r11<<0x2
800041c6:	19 ec       	ld.ub	r12,r12[0x6]
800041c8:	b6 ec       	st.b	r11[0x6],r12
800041ca:	ab 39       	mul	r9,r5
800041cc:	ab 38       	mul	r8,r5
800041ce:	ec 09 00 09 	add	r9,r6,r9
800041d2:	ec 08 00 08 	add	r8,r6,r8
800041d6:	11 fc       	ld.ub	r12,r8[0x7]
800041d8:	b2 fc       	st.b	r9[0x7],r12
800041da:	e0 6b 07 69 	mov	r11,1897
					w.wp[x].cv_mode[1] = w.wp[pattern].cv_mode[1];
800041de:	17 8c       	ld.ub	r12,r11[0x0]
800041e0:	2f fc       	sub	r12,-1
800041e2:	b6 8c       	st.b	r11[0x0],r12
800041e4:	11 8b       	ld.ub	r11,r8[0x0]
800041e6:	b2 8b       	st.b	r9[0x0],r11
800041e8:	e0 6b 05 c4 	mov	r11,1476
800041ec:	b6 0a       	st.h	r11[0x0],r10
					w.wp[x].loop_len = w.wp[pattern].loop_len;
					w.wp[x].loop_dir = w.wp[pattern].loop_dir;

					pattern = x;
					next_pattern = x;
					monomeFrameDirty++;
800041ee:	11 9a       	ld.ub	r10,r8[0x1]
800041f0:	b2 9a       	st.b	r9[0x1],r10
800041f2:	e0 6a 1a 5b 	mov	r10,6747
					}

					w.wp[x].cv_mode[0] = w.wp[pattern].cv_mode[0];
					w.wp[x].cv_mode[1] = w.wp[pattern].cv_mode[1];

					w.wp[x].loop_start = w.wp[pattern].loop_start;
800041f6:	b4 8e       	st.b	r10[0x0],lr
800041f8:	11 aa       	ld.ub	r10,r8[0x2]
		if(--key_times[held_keys[i1]]==0) {
			if(edit_mode != mSeries && preset_mode == 0) {
				// preset copy
				if(held_keys[i1] / 16 == 2) {
					x = held_keys[i1] % 16;
					for(n1=0;n1<16;n1++) {
800041fa:	b2 aa       	st.b	r9[0x2],r10
800041fc:	11 b8       	ld.ub	r8,r8[0x3]

					w.wp[x].cv_mode[0] = w.wp[pattern].cv_mode[0];
					w.wp[x].cv_mode[1] = w.wp[pattern].cv_mode[1];

					w.wp[x].loop_start = w.wp[pattern].loop_start;
					w.wp[x].loop_end = w.wp[pattern].loop_end;
800041fe:	b2 b8       	st.b	r9[0x3],r8
80004200:	e0 68 1a 84 	mov	r8,6788
					w.wp[x].loop_len = w.wp[pattern].loop_len;
					w.wp[x].loop_dir = w.wp[pattern].loop_dir;

					pattern = x;
80004204:	b0 8e       	st.b	r8[0x0],lr
					w.wp[x].cv_mode[0] = w.wp[pattern].cv_mode[0];
					w.wp[x].cv_mode[1] = w.wp[pattern].cv_mode[1];

					w.wp[x].loop_start = w.wp[pattern].loop_start;
					w.wp[x].loop_end = w.wp[pattern].loop_end;
					w.wp[x].loop_len = w.wp[pattern].loop_len;
80004206:	c1 78       	rjmp	80004234 <handler_KeyTimer+0x208>
80004208:	e0 62 1a 50 	mov	r2,6736
					w.wp[x].loop_dir = w.wp[pattern].loop_dir;
8000420c:	30 18       	mov	r8,1

					pattern = x;
					next_pattern = x;
8000420e:	05 89       	ld.ub	r9,r2[0x0]
80004210:	f0 09 18 00 	cp.b	r9,r8

					// print_dbg("\r\n saved pattern: ");
					// print_dbg_ulong(x);
				}
			}
			else if(preset_mode == 1) {
80004214:	c1 01       	brne	80004234 <handler_KeyTimer+0x208>
80004216:	e3 de c0 04 	bfextu	r1,lr,0x0,0x4
8000421a:	c0 d1       	brne	80004234 <handler_KeyTimer+0x208>
8000421c:	e0 69 0b 04 	mov	r9,2820
				if(held_keys[i1] % 16 == 0) {
80004220:	e0 68 06 28 	mov	r8,1576
80004224:	a5 8e       	lsr	lr,0x4
					preset_select = held_keys[i1] / 16;
80004226:	b2 8e       	st.b	r9[0x0],lr
					// flash_write();
					static event_t e;
					e.type = kEventSaveFlash;
80004228:	30 59       	mov	r9,5
					// print_dbg_ulong(x);
				}
			}
			else if(preset_mode == 1) {
				if(held_keys[i1] % 16 == 0) {
					preset_select = held_keys[i1] / 16;
8000422a:	10 9c       	mov	r12,r8
8000422c:	91 09       	st.w	r8[0x0],r9
					// flash_write();
					static event_t e;
					e.type = kEventSaveFlash;
8000422e:	e0 a0 06 39 	rcall	80004ea0 <event_post>
80004232:	a4 81       	st.b	r2[0x0],r1
					event_post(&e);
80004234:	88 08       	ld.sh	r8,r4[0x0]
80004236:	2f f8       	sub	r8,-1
					preset_mode = 0;
80004238:	a8 08       	st.h	r4[0x0],r8
			front_timer--;
		}
		else front_timer--;
	}

	for(i1=0;i1<key_count;i1++) {
8000423a:	e0 61 1a 69 	mov	r1,6761
8000423e:	88 08       	ld.sh	r8,r4[0x0]
80004240:	03 89       	ld.ub	r9,r1[0x0]
80004242:	f0 09 19 00 	cp.h	r9,r8
80004246:	fe 9b ff 1b 	brhi	8000407c <handler_KeyTimer+0x50>
8000424a:	2f 4d       	sub	sp,-48
8000424c:	d8 32       	popm	r0-r7,pc

			// print_dbg("\rlong press: "); 
			// print_dbg_ulong(held_keys[i1]);
		}
	}
}
8000424e:	d7 03       	nop

80004250 <adcTimer_callback>:
80004250:	d4 01       	pushm	lr
80004252:	30 39       	mov	r9,3
80004254:	e0 68 05 e0 	mov	r8,1504
80004258:	91 09       	st.w	r8[0x0],r9
8000425a:	30 09       	mov	r9,0
8000425c:	10 9c       	mov	r12,r8
8000425e:	91 19       	st.w	r8[0x4],r9
80004260:	e0 a0 06 20 	rcall	80004ea0 <event_post>
80004264:	d8 02       	popm	pc
80004266:	d7 03       	nop

80004268 <keyTimer_callback>:
80004268:	d4 01       	pushm	lr
8000426a:	30 49       	mov	r9,4
8000426c:	e0 68 05 ec 	mov	r8,1516
80004270:	91 09       	st.w	r8[0x0],r9
80004272:	30 09       	mov	r9,0
80004274:	10 9c       	mov	r12,r8
80004276:	91 19       	st.w	r8[0x4],r9

static void keyTimer_callback(void* o) {  
	static event_t e;
	e.type = kEventKeyTimer;
	e.data = 0;
	event_post(&e);
80004278:	e0 a0 06 14 	rcall	80004ea0 <event_post>
}
8000427c:	d8 02       	popm	pc
8000427e:	d7 03       	nop

80004280 <monome_refresh_timer_callback>:
80004280:	d4 01       	pushm	lr
80004282:	e0 68 07 69 	mov	r8,1897
	ftdi_read();
}

// monome refresh callback
static void monome_refresh_timer_callback(void* obj) {
	if(monomeFrameDirty > 0) {
80004286:	11 89       	ld.ub	r9,r8[0x0]
80004288:	30 08       	mov	r8,0
8000428a:	f0 09 18 00 	cp.b	r9,r8
		static event_t e;
		e.type = kEventMonomeRefresh;
8000428e:	c0 80       	breq	8000429e <monome_refresh_timer_callback+0x1e>
80004290:	e0 68 06 14 	mov	r8,1556
80004294:	30 b9       	mov	r9,11
		event_post(&e);
80004296:	10 9c       	mov	r12,r8
80004298:	91 09       	st.w	r8[0x0],r9
8000429a:	e0 a0 06 03 	rcall	80004ea0 <event_post>
8000429e:	d8 02       	popm	pc

800042a0 <handler_PollADC>:
800042a0:	d4 21       	pushm	r4-r7,lr
800042a2:	e0 67 1a 60 	mov	r7,6752
800042a6:	0e 9c       	mov	r12,r7
	monomeFrameDirty++;
}

static void handler_PollADC(s32 data) {
	u16 i;
	adc_convert(&adc);
800042a8:	e0 a0 05 6e 	rcall	80004d84 <adc_convert>

	// CLOCK POT INPUT
	i = adc[0];
	i = i>>2;
800042ac:	e0 68 1a 8c 	mov	r8,6796
800042b0:	8e 87       	ld.uh	r7,r7[0x0]
	if(i != clock_temp) {
800042b2:	90 08       	ld.sh	r8,r8[0x0]
800042b4:	a3 87       	lsr	r7,0x2
800042b6:	ee 08 19 00 	cp.h	r8,r7
		// 1000ms - 24ms
		clock_time = 25000 / (i + 25);
800042ba:	c1 00       	breq	800042da <handler_PollADC+0x3a>
800042bc:	ee c9 ff e7 	sub	r9,r7,-25
800042c0:	e0 68 61 a8 	mov	r8,25000
800042c4:	f0 09 0c 08 	divs	r8,r8,r9
		// print_dbg("\r\nnew clock (ms): ");
		// print_dbg_ulong(clock_time);

		timer_set(&clockTimer, clock_time);
800042c8:	e0 69 1a 86 	mov	r9,6790
	// CLOCK POT INPUT
	i = adc[0];
	i = i>>2;
	if(i != clock_temp) {
		// 1000ms - 24ms
		clock_time = 25000 / (i + 25);
800042cc:	e0 6c 05 ac 	mov	r12,1452
		// print_dbg("\r\nnew clock (ms): ");
		// print_dbg_ulong(clock_time);

		timer_set(&clockTimer, clock_time);
800042d0:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
	}
	clock_temp = i;
800042d4:	b2 08       	st.h	r9[0x0],r8

	// PARAM POT INPUT
	if(param_accept && edit_prob) {
800042d6:	e0 a0 0c 2f 	rcall	80005b34 <timer_set>
800042da:	e0 68 1a 8c 	mov	r8,6796
800042de:	b0 07       	st.h	r8[0x0],r7
800042e0:	30 09       	mov	r9,0
800042e2:	e0 68 1a 78 	mov	r8,6776
800042e6:	11 88       	ld.ub	r8,r8[0x0]
800042e8:	f2 08 18 00 	cp.b	r8,r9
800042ec:	c1 a0       	breq	80004320 <handler_PollADC+0x80>
		*param_dest8 = adc[1] >> 4; // scale to 0-255;
800042ee:	e0 68 1a 81 	mov	r8,6785
800042f2:	11 8a       	ld.ub	r10,r8[0x0]
800042f4:	e0 68 1a 60 	mov	r8,6752
		// print_dbg_ulong(*param_dest8);
		// print_dbg("\t" );
		// print_dbg_ulong(adc[1]);
	}
	else if(param_accept) {
		*param_dest = adc[1];
800042f8:	f2 0a 18 00 	cp.b	r10,r9
800042fc:	c0 70       	breq	8000430a <handler_PollADC+0x6a>
800042fe:	90 99       	ld.uh	r9,r8[0x2]
		monomeFrameDirty++;
80004300:	e0 68 1a 7c 	mov	r8,6780
80004304:	a5 89       	lsr	r9,0x4
80004306:	70 08       	ld.w	r8,r8[0x0]
80004308:	c0 a8       	rjmp	8000431c <handler_PollADC+0x7c>
	}
	else if(scroll) {
8000430a:	90 19       	ld.sh	r9,r8[0x2]
8000430c:	e0 68 0a f8 	mov	r8,2808
80004310:	70 08       	ld.w	r8,r8[0x0]
80004312:	b0 09       	st.h	r8[0x0],r9
		i = adc[1]>>6;
80004314:	e0 68 07 69 	mov	r8,1897
80004318:	11 89       	ld.ub	r9,r8[0x0]
8000431a:	2f f9       	sub	r9,-1
8000431c:	b0 89       	st.b	r8[0x0],r9
8000431e:	d8 22       	popm	r4-r7,pc
80004320:	e0 69 1a 75 	mov	r9,6773
		if(i > 58) i = 58;
		if(i != scroll_pos) {
80004324:	13 89       	ld.ub	r9,r9[0x0]
80004326:	f0 09 18 00 	cp.b	r9,r8
8000432a:	c1 60       	breq	80004356 <handler_PollADC+0xb6>
8000432c:	e0 68 1a 60 	mov	r8,6752
			scroll_pos = i;
			monomeFrameDirty++;
80004330:	90 99       	ld.uh	r9,r8[0x2]
80004332:	33 a8       	mov	r8,58
80004334:	a7 89       	lsr	r9,0x6
80004336:	f2 08 19 00 	cp.h	r8,r9
8000433a:	f9 b9 03 3a 	movlo	r9,58
8000433e:	e0 68 1a 83 	mov	r8,6787
80004342:	11 8a       	ld.ub	r10,r8[0x0]
80004344:	f2 0a 19 00 	cp.h	r10,r9
80004348:	c0 70       	breq	80004356 <handler_PollADC+0xb6>
8000434a:	b0 89       	st.b	r8[0x0],r9
8000434c:	e0 68 07 69 	mov	r8,1897
80004350:	11 89       	ld.ub	r9,r8[0x0]
80004352:	2f f9       	sub	r9,-1
80004354:	b0 89       	st.b	r8[0x0],r9
80004356:	d8 22       	popm	r4-r7,pc

80004358 <main>:
80004358:	d4 31       	pushm	r0-r7,lr
8000435a:	20 2d       	sub	sp,8
8000435c:	e0 a0 20 e8 	rcall	8000852c <sysclk_init>
80004360:	e0 6c 87 00 	mov	r12,34560
80004364:	ea 1c 03 93 	orh	r12,0x393
80004368:	e0 a0 1d 7c 	rcall	80007e60 <init_dbg_rs232>
8000436c:	e0 a0 06 58 	rcall	8000501c <init_gpio>
}


// assign event handlers
static inline void assign_main_event_handlers(void) {
	app_event_handlers[ kEventFront ]	= &handler_Front;
80004370:	fe c9 22 5c 	sub	r9,pc,8796
80004374:	e0 68 1a 94 	mov	r8,6804
	// app_event_handlers[ kEventTimer ]	= &handler_Timer;
	app_event_handlers[ kEventPollADC ]	= &handler_PollADC;
80004378:	91 19       	st.w	r8[0x4],r9
	app_event_handlers[ kEventKeyTimer ] = &handler_KeyTimer;
8000437a:	fe c9 00 da 	sub	r9,pc,218
	app_event_handlers[ kEventSaveFlash ] = &handler_SaveFlash;
8000437e:	91 39       	st.w	r8[0xc],r9
80004380:	fe c9 03 54 	sub	r9,pc,852
	app_event_handlers[ kEventFtdiConnect ]	= &handler_FtdiConnect ;
80004384:	91 49       	st.w	r8[0x10],r9
	app_event_handlers[ kEventFtdiDisconnect ]	= &handler_FtdiDisconnect ;
80004386:	fe c9 20 9a 	sub	r9,pc,8346
	app_event_handlers[ kEventMonomeConnect ]	= &handler_MonomeConnect ;
8000438a:	91 59       	st.w	r8[0x14],r9
8000438c:	fe c9 03 68 	sub	r9,pc,872
	app_event_handlers[ kEventMonomeDisconnect ]	= &handler_None ;
80004390:	91 69       	st.w	r8[0x18],r9
	app_event_handlers[ kEventMonomePoll ]	= &handler_MonomePoll ;
80004392:	fe c9 f6 9a 	sub	r9,pc,-2406
	app_event_handlers[ kEventMonomeRefresh ]	= &handler_MonomeRefresh ;
80004396:	91 79       	st.w	r8[0x1c],r9
80004398:	fe c9 03 e4 	sub	r9,pc,996
	app_event_handlers[ kEventMonomeGridKey ]	= &handler_MonomeGridKey ;
8000439c:	91 89       	st.w	r8[0x20],r9

	init_dbg_rs232(FMCK_HZ);

	init_gpio();
	assign_main_event_handlers();
	init_events();
8000439e:	fe c9 22 ca 	sub	r9,pc,8906
	init_tc();
800043a2:	91 99       	st.w	r8[0x24],r9
800043a4:	fe c9 22 9c 	sub	r9,pc,8860
	init_spi();
800043a8:	91 a9       	st.w	r8[0x28],r9
	init_adc();
800043aa:	fe c9 10 e6 	sub	r9,pc,4326

	irq_initialize_vectors();
800043ae:	91 b9       	st.w	r8[0x2c],r9
800043b0:	fe c9 20 98 	sub	r9,pc,8344
	register_interrupts();
800043b4:	91 c9       	st.w	r8[0x30],r9
	cpu_irq_enable();
800043b6:	e0 a0 05 63 	rcall	80004e7c <init_events>

	init_usb_host();
800043ba:	e0 a0 06 15 	rcall	80004fe4 <init_tc>
	init_monome();
800043be:	e0 a0 05 c3 	rcall	80004f44 <init_spi>


	print_dbg("\r\n\n// white whale //////////////////////////////// ");
800043c2:	e0 a0 04 a3 	rcall	80004d08 <init_adc>
	print_dbg_ulong(sizeof(flashy));
800043c6:	e0 a0 11 19 	rcall	800065f8 <INTC_init_interrupts>
800043ca:	e0 a0 06 51 	rcall	8000506c <register_interrupts>

	print_dbg(" ");
800043ce:	d5 03       	csrf	0x10
800043d0:	e0 a0 05 b6 	rcall	80004f3c <init_usb_host>
	print_dbg_ulong(sizeof(w));
800043d4:	e0 a0 06 de 	rcall	80005190 <init_monome>
800043d8:	fe cc aa 94 	sub	r12,pc,-21868

	print_dbg(" ");
800043dc:	e0 a0 1d 20 	rcall	80007e1c <print_dbg>
800043e0:	e0 6c 7a 6c 	mov	r12,31340
	print_dbg_ulong(sizeof(glyph));
800043e4:	e0 a0 1d 16 	rcall	80007e10 <print_dbg_ulong>

	if(flash_is_fresh()) {
800043e8:	fe cc aa 70 	sub	r12,pc,-21904
800043ec:	e0 a0 1d 18 	rcall	80007e1c <print_dbg>
800043f0:	e0 6c 0f 44 	mov	r12,3908
800043f4:	e0 a0 1d 0e 	rcall	80007e10 <print_dbg_ulong>
		print_dbg("\r\nfirst run.");
800043f8:	fe cc aa 80 	sub	r12,pc,-21888
		flash_unfresh();
800043fc:	e0 a0 1d 10 	rcall	80007e1c <print_dbg>
		flashc_memset8((void*)&(flashy.edit_mode), mTrig, 4, true);
80004400:	30 8c       	mov	r12,8
80004402:	e0 a0 1d 07 	rcall	80007e10 <print_dbg_ulong>
80004406:	32 28       	mov	r8,34
80004408:	49 57       	lddpc	r7,8000445c <main+0x104>
8000440a:	0f 89       	ld.ub	r9,r7[0x0]
8000440c:	f0 09 18 00 	cp.b	r9,r8
		flashc_memset32((void*)&(flashy.preset_select), 0, 4, true);
80004410:	e0 80 00 96 	breq	8000453c <main+0x1e4>
80004414:	fe cc aa 98 	sub	r12,pc,-21864
80004418:	e0 a0 1d 02 	rcall	80007e1c <print_dbg>


		// clear out some reasonable defaults
		for(i1=0;i1<16;i1++) {
8000441c:	fe b0 ef 2e 	rcall	80002278 <flash_unfresh>

	if(flash_is_fresh()) {
		print_dbg("\r\nfirst run.");
		flash_unfresh();
		flashc_memset8((void*)&(flashy.edit_mode), mTrig, 4, true);
		flashc_memset32((void*)&(flashy.preset_select), 0, 4, true);
80004420:	30 4a       	mov	r10,4
80004422:	30 19       	mov	r9,1


		// clear out some reasonable defaults
		for(i1=0;i1<16;i1++) {
80004424:	ee 0a 00 0c 	add	r12,r7,r10

	if(flash_is_fresh()) {
		print_dbg("\r\nfirst run.");
		flash_unfresh();
		flashc_memset8((void*)&(flashy.edit_mode), mTrig, 4, true);
		flashc_memset32((void*)&(flashy.preset_select), 0, 4, true);
80004428:	30 0b       	mov	r11,0
8000442a:	e0 a0 0f ad 	rcall	80006384 <flashc_memset8>


		// clear out some reasonable defaults
		for(i1=0;i1<16;i1++) {
			for(i2=0;i2<16;i2++) {
				w.wp[i1].steps[i2] = 0;
8000442e:	ee cc ff f8 	sub	r12,r7,-8
80004432:	30 19       	mov	r9,1
				w.wp[i1].step_probs[i2] = 255;
				w.wp[i1].cv_probs[0][i2] = 255;
				w.wp[i1].cv_probs[1][i2] = 255;
				w.wp[i1].cv_curves[0][i2] = 0;
80004434:	30 4a       	mov	r10,4
80004436:	30 0b       	mov	r11,0
80004438:	e0 a0 0f 94 	rcall	80006360 <flashc_memset32>
8000443c:	fe c8 ae 24 	sub	r8,pc,-20956
80004440:	2c 08       	sub	r8,-64
80004442:	30 09       	mov	r9,0
80004444:	e0 64 0b 0c 	mov	r4,2828
80004448:	50 18       	stdsp	sp[0x4],r8
8000444a:	12 97       	mov	r7,r9
8000444c:	e8 c6 ff fc 	sub	r6,r4,-4
80004450:	08 98       	mov	r8,r4
80004452:	12 9c       	mov	r12,r9
80004454:	3f f3       	mov	r3,-1
80004456:	12 90       	mov	r0,r9
80004458:	12 91       	mov	r1,r9
8000445a:	c2 e8       	rjmp	800044b6 <main+0x15e>
8000445c:	80 03       	ld.sh	r3,r0[0x0]
8000445e:	00 00       	add	r0,r0
80004460:	b6 8c       	st.b	r11[0x0],r12
80004462:	f7 63 00 10 	st.b	r11[16],r3
80004466:	f7 63 00 c0 	st.b	r11[192],r3
8000446a:	f7 63 00 d0 	st.b	r11[208],r3
8000446e:	30 18       	mov	r8,1
80004470:	f0 0e 09 42 	lsl	r2,r8,lr
80004474:	b4 07       	st.h	r10[0x0],r7
80004476:	f5 52 ff e0 	st.h	r10[-32],r2
8000447a:	f5 52 ff c0 	st.h	r10[-64],r2
8000447e:	f5 57 00 20 	st.h	r10[32],r7
80004482:	0b 12       	ld.sh	r2,r5++
80004484:	f5 52 ff a0 	st.h	r10[-96],r2
80004488:	10 0e       	add	lr,r8
8000448a:	10 0b       	add	r11,r8
8000448c:	2f ea       	sub	r10,-2
8000448e:	59 0e       	cp.w	lr,16
80004490:	ce 81       	brne	80004460 <main+0x108>
80004492:	40 08       	lddsp	r8,sp[0x0]
80004494:	30 fa       	mov	r10,15
80004496:	ac 01       	st.h	r6[0x0],r1
80004498:	b0 aa       	st.b	r8[0x2],r10
8000449a:	b0 9a       	st.b	r8[0x1],r10
8000449c:	b0 80       	st.b	r8[0x0],r0
8000449e:	b0 b7       	st.b	r8[0x3],r7
800044a0:	30 0a       	mov	r10,0
800044a2:	91 2a       	st.w	r8[0x8],r10
800044a4:	ac ac       	st.b	r6[0x2],r12
800044a6:	b0 fc       	st.b	r8[0x7],r12
800044a8:	2f f9       	sub	r9,-1
800044aa:	ec c6 ff 14 	sub	r6,r6,-236
800044ae:	f0 c8 ff 14 	sub	r8,r8,-236
800044b2:	59 09       	cp.w	r9,16
800044b4:	c1 00       	breq	800044d4 <main+0x17c>
800044b6:	e0 6e 0b 0c 	mov	lr,2828
800044ba:	e0 6b 00 ec 	mov	r11,236
800044be:	40 15       	lddsp	r5,sp[0x4]


		// clear out some reasonable defaults
		for(i1=0;i1<16;i1++) {
			for(i2=0;i2<16;i2++) {
				w.wp[i1].steps[i2] = 0;
800044c0:	f2 0b 02 4b 	mul	r11,r9,r11
				w.wp[i1].step_probs[i2] = 255;
800044c4:	50 08       	stdsp	sp[0x0],r8
				w.wp[i1].cv_probs[0][i2] = 255;
800044c6:	f6 ca ff 74 	sub	r10,r11,-140
				w.wp[i1].cv_probs[1][i2] = 255;
800044ca:	2f 4b       	sub	r11,-12
800044cc:	1c 0a       	add	r10,lr
				w.wp[i1].cv_curves[0][i2] = 0;
				w.wp[i1].cv_curves[1][i2] = 0;
				w.wp[i1].cv_values[i2] = SCALES[2][i2];
				w.wp[i1].cv_steps[0][i2] = 1<<i2;
800044ce:	1c 0b       	add	r11,lr
800044d0:	30 0e       	mov	lr,0
800044d2:	cc 7b       	rjmp	80004460 <main+0x108>
			for(i2=0;i2<16;i2++) {
				w.wp[i1].steps[i2] = 0;
				w.wp[i1].step_probs[i2] = 255;
				w.wp[i1].cv_probs[0][i2] = 255;
				w.wp[i1].cv_probs[1][i2] = 255;
				w.wp[i1].cv_curves[0][i2] = 0;
800044d4:	e0 68 0b 0c 	mov	r8,2828
				w.wp[i1].cv_curves[1][i2] = 0;
				w.wp[i1].cv_values[i2] = SCALES[2][i2];
				w.wp[i1].cv_steps[0][i2] = 1<<i2;
				w.wp[i1].cv_steps[1][i2] = 1<<i2;
800044d8:	30 3a       	mov	r10,3
				w.wp[i1].cv_probs[0][i2] = 255;
				w.wp[i1].cv_probs[1][i2] = 255;
				w.wp[i1].cv_curves[0][i2] = 0;
				w.wp[i1].cv_curves[1][i2] = 0;
				w.wp[i1].cv_values[i2] = SCALES[2][i2];
				w.wp[i1].cv_steps[0][i2] = 1<<i2;
800044da:	f1 6c 0f 40 	st.b	r8[3904],r12
				w.wp[i1].steps[i2] = 0;
				w.wp[i1].step_probs[i2] = 255;
				w.wp[i1].cv_probs[0][i2] = 255;
				w.wp[i1].cv_probs[1][i2] = 255;
				w.wp[i1].cv_curves[0][i2] = 0;
				w.wp[i1].cv_curves[1][i2] = 0;
800044de:	f0 c9 f1 40 	sub	r9,r8,-3776
				w.wp[i1].cv_values[i2] = SCALES[2][i2];
800044e2:	f1 6a 0f 41 	st.b	r8[3905],r10
800044e6:	e8 c4 f0 c0 	sub	r4,r4,-3904
				w.wp[i1].cv_steps[0][i2] = 1<<i2;
				w.wp[i1].cv_steps[1][i2] = 1<<i2;
800044ea:	30 18       	mov	r8,1
800044ec:	12 b8       	st.h	r9++,r8
		flashc_memset32((void*)&(flashy.preset_select), 0, 4, true);


		// clear out some reasonable defaults
		for(i1=0;i1<16;i1++) {
			for(i2=0;i2<16;i2++) {
800044ee:	08 39       	cp.w	r9,r4
800044f0:	cf e1       	brne	800044ec <main+0x194>
800044f2:	49 26       	lddpc	r6,80004538 <main+0x1e0>
				w.wp[i1].cv_values[i2] = SCALES[2][i2];
				w.wp[i1].cv_steps[0][i2] = 1<<i2;
				w.wp[i1].cv_steps[1][i2] = 1<<i2;
			}
			w.wp[i1].step_choice = 0;
			w.wp[i1].loop_end = 15;
800044f4:	30 07       	mov	r7,0
				w.wp[i1].cv_curves[1][i2] = 0;
				w.wp[i1].cv_values[i2] = SCALES[2][i2];
				w.wp[i1].cv_steps[0][i2] = 1<<i2;
				w.wp[i1].cv_steps[1][i2] = 1<<i2;
			}
			w.wp[i1].step_choice = 0;
800044f6:	ec c5 ff f7 	sub	r5,r6,-9
			w.wp[i1].loop_end = 15;
800044fa:	30 14       	mov	r4,1
			w.wp[i1].loop_len = 15;
			w.wp[i1].loop_start = 0;
800044fc:	2b 46       	sub	r6,-76
			w.wp[i1].loop_dir = 0;
800044fe:	e0 63 1a 6c 	mov	r3,6764
			w.wp[i1].step_mode = mForward;
80004502:	30 19       	mov	r9,1
			w.wp[i1].cv_mode[0] = 0;
80004504:	e0 6a 0f 44 	mov	r10,3908
			w.wp[i1].cv_mode[1] = 0;
80004508:	e0 6b 0b 0c 	mov	r11,2828
8000450c:	0c 9c       	mov	r12,r6
8000450e:	e0 a0 0f 41 	rcall	80006390 <flashc_memcpy>
		flashc_memset8((void*)&(flashy.edit_mode), mTrig, 4, true);
		flashc_memset32((void*)&(flashy.preset_select), 0, 4, true);


		// clear out some reasonable defaults
		for(i1=0;i1<16;i1++) {
80004512:	e8 07 09 48 	lsl	r8,r4,r7
80004516:	0a 9c       	mov	r12,r5
80004518:	e6 07 0b 08 	st.b	r3[r7],r8
8000451c:	ec c6 f0 bc 	sub	r6,r6,-3908
80004520:	2f f7       	sub	r7,-1
80004522:	2f 85       	sub	r5,-8
80004524:	30 19       	mov	r9,1
80004526:	30 8a       	mov	r10,8
80004528:	e0 6b 1a 6c 	mov	r11,6764
8000452c:	e0 a0 0f 32 	rcall	80006390 <flashc_memcpy>
80004530:	58 87       	cp.w	r7,8
			w.wp[i1].step_mode = mForward;
			w.wp[i1].cv_mode[0] = 0;
			w.wp[i1].cv_mode[1] = 0;
		}

		w.series_start = 0;
80004532:	ce 81       	brne	80004502 <main+0x1aa>
		w.series_end = 3;
80004534:	c1 c8       	rjmp	8000456c <main+0x214>
			w.wp[i1].step_mode = mForward;
			w.wp[i1].cv_mode[0] = 0;
			w.wp[i1].cv_mode[1] = 0;
		}

		w.series_start = 0;
80004536:	d7 03       	nop
80004538:	80 03       	ld.sh	r3,r0[0x0]
		w.series_end = 3;
8000453a:	00 00       	add	r0,r0
8000453c:	ef 38 00 08 	ld.ub	r8,r7[8]
80004540:	6e 19       	ld.w	r9,r7[0x4]
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// main

int main(void)
80004542:	e0 66 0b 04 	mov	r6,2820
		}

		w.series_start = 0;
		w.series_end = 3;
		for(i1=0;i1<64;i1++)
			w.series_list[i1] = 1;
80004546:	ac 88       	st.b	r6[0x0],r8
80004548:	e0 68 1a 88 	mov	r8,6792
			w.wp[i1].cv_mode[1] = 0;
		}

		w.series_start = 0;
		w.series_end = 3;
		for(i1=0;i1<64;i1++)
8000454c:	91 09       	st.w	r8[0x0],r9
8000454e:	fe b0 ee 01 	rcall	80002150 <flash_read>
80004552:	0d 88       	ld.ub	r8,r6[0x0]
80004554:	2f f8       	sub	r8,-1
			w.series_list[i1] = 1;

		// save all presets, clear glyphs
		for(i1=0;i1<8;i1++) {
			flashc_memcpy((void *)&flashy.w[i1], &w, sizeof(w), true);
80004556:	ee 08 00 37 	add	r7,r7,r8<<0x3
			glyph[i1] = (1<<i1);
8000455a:	e0 68 1a 6c 	mov	r8,6764
		for(i1=0;i1<64;i1++)
			w.series_list[i1] = 1;

		// save all presets, clear glyphs
		for(i1=0;i1<8;i1++) {
			flashc_memcpy((void *)&flashy.w[i1], &w, sizeof(w), true);
8000455e:	2f f7       	sub	r7,-1
80004560:	f0 c9 ff f8 	sub	r9,r8,-8
80004564:	0f 3a       	ld.ub	r10,r7++
80004566:	10 ca       	st.b	r8++,r10
80004568:	12 38       	cp.w	r8,r9
			glyph[i1] = (1<<i1);
8000456a:	cf d1       	brne	80004564 <main+0x20c>
8000456c:	30 f9       	mov	r9,15
			flashc_memcpy((void *)&flashy.glyph[i1], &glyph, sizeof(glyph), true);
8000456e:	e0 68 0b 07 	mov	r8,2823
			w.series_list[i1] = 1;

		// save all presets, clear glyphs
		for(i1=0;i1<8;i1++) {
			flashc_memcpy((void *)&flashy.w[i1], &w, sizeof(w), true);
			glyph[i1] = (1<<i1);
80004572:	b0 89       	st.b	r8[0x0],r9
			flashc_memcpy((void *)&flashy.glyph[i1], &glyph, sizeof(glyph), true);
80004574:	31 09       	mov	r9,16
80004576:	e0 68 0a f4 	mov	r8,2804
8000457a:	b0 89       	st.b	r8[0x0],r9
8000457c:	fe c9 0c f0 	sub	r9,pc,3312
80004580:	e0 68 0b 00 	mov	r8,2816
80004584:	91 09       	st.w	r8[0x0],r9
		w.series_end = 3;
		for(i1=0;i1<64;i1++)
			w.series_list[i1] = 1;

		// save all presets, clear glyphs
		for(i1=0;i1<8;i1++) {
80004586:	fe c9 ff 8e 	sub	r9,pc,-114
8000458a:	31 c8       	mov	r8,28
8000458c:	32 9c       	mov	r12,41
8000458e:	91 09       	st.w	r8[0x0],r9
80004590:	e0 a0 0f a1 	rcall	800064d2 <gpio_get_pin_value>
80004594:	e0 68 1a cc 	mov	r8,6860
80004598:	ec 1c 00 01 	eorl	r12,0x1
			flashc_memcpy((void *)&flashy.glyph[i1], &glyph, sizeof(glyph), true);
		}
	}
	else {
		// load from flash at startup
		preset_select = flashy.preset_select;
8000459c:	30 09       	mov	r9,0
8000459e:	b0 8c       	st.b	r8[0x0],r12
		edit_mode = flashy.edit_mode;
800045a0:	fe ca 24 c8 	sub	r10,pc,9416
			flashc_memcpy((void *)&flashy.glyph[i1], &glyph, sizeof(glyph), true);
		}
	}
	else {
		// load from flash at startup
		preset_select = flashy.preset_select;
800045a4:	37 8b       	mov	r11,120
		edit_mode = flashy.edit_mode;
800045a6:	e0 6c 05 ac 	mov	r12,1452
		flash_read();
800045aa:	e0 a0 0b 01 	rcall	80005bac <timer_add>
800045ae:	30 09       	mov	r9,0
800045b0:	fe ca 03 48 	sub	r10,pc,840
800045b4:	33 2b       	mov	r11,50
800045b6:	e0 6c 05 c8 	mov	r12,1480
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// main

int main(void)
800045ba:	e0 a0 0a f9 	rcall	80005bac <timer_add>
		// load from flash at startup
		preset_select = flashy.preset_select;
		edit_mode = flashy.edit_mode;
		flash_read();
		for(i1=0;i1<8;i1++)
			glyph[i1] = flashy.glyph[preset_select][i1];
800045be:	30 09       	mov	r9,0
800045c0:	fe ca 03 70 	sub	r10,pc,880
	else {
		// load from flash at startup
		preset_select = flashy.preset_select;
		edit_mode = flashy.edit_mode;
		flash_read();
		for(i1=0;i1<8;i1++)
800045c4:	36 4b       	mov	r11,100
			glyph[i1] = flashy.glyph[preset_select][i1];
	}

	LENGTH = 15;
800045c6:	e0 6c 05 88 	mov	r12,1416
800045ca:	e0 a0 0a f1 	rcall	80005bac <timer_add>
	SIZE = 16;
800045ce:	e0 69 27 10 	mov	r9,10000

	re = &refresh;
800045d2:	e0 68 1a 8c 	mov	r8,6796
800045d6:	e0 67 05 a0 	mov	r7,1440

	clock_pulse = &clock;
800045da:	b0 09       	st.h	r8[0x0],r9
	clock_external = !gpio_get_pin_value(B09);
800045dc:	e0 66 1a 94 	mov	r6,6804
800045e0:	e0 6c 05 a0 	mov	r12,1440
800045e4:	e0 a0 04 86 	rcall	80004ef0 <event_next>
800045e8:	cf c0       	breq	800045e0 <main+0x288>

	timer_add(&clockTimer,120,&clockTimer_callback, NULL);
800045ea:	6e 08       	ld.w	r8,r7[0x0]
	SIZE = 16;

	re = &refresh;

	clock_pulse = &clock;
	clock_external = !gpio_get_pin_value(B09);
800045ec:	6e 1c       	ld.w	r12,r7[0x4]

	timer_add(&clockTimer,120,&clockTimer_callback, NULL);
800045ee:	ec 08 03 28 	ld.w	r8,r6[r8<<0x2]
800045f2:	5d 18       	icall	r8
800045f4:	cf 6b       	rjmp	800045e0 <main+0x288>
800045f6:	d7 03       	nop

800045f8 <clock>:
	timer_add(&keyTimer,50,&keyTimer_callback, NULL);
800045f8:	d4 21       	pushm	r4-r7,lr
800045fa:	58 0c       	cp.w	r12,0
800045fc:	e0 80 03 64 	breq	80004cc4 <clock+0x6cc>
80004600:	32 ac       	mov	r12,42
80004602:	e0 a0 0f 73 	rcall	800064e8 <gpio_set_gpio_pin>
	timer_add(&adcTimer,100,&adcTimer_callback, NULL);
80004606:	e0 68 1a 76 	mov	r8,6774
8000460a:	30 09       	mov	r9,0
8000460c:	11 8a       	ld.ub	r10,r8[0x0]
8000460e:	f2 0a 18 00 	cp.b	r10,r9
	clock_temp = 10000; // out of ADC range to force tempo
80004612:	c0 80       	breq	80004622 <clock+0x2a>
80004614:	b0 89       	st.b	r8[0x0],r9
}

// app event loop
void check_events(void) {
	static event_t e;
	if( event_next(&e) ) {
80004616:	e0 68 1a 84 	mov	r8,6788
		(app_event_handlers)[e.type](e.data);
8000461a:	11 89       	ld.ub	r9,r8[0x0]
}

// app event loop
void check_events(void) {
	static event_t e;
	if( event_next(&e) ) {
8000461c:	e0 68 1a 5b 	mov	r8,6747
80004620:	b0 89       	st.b	r8[0x0],r9
80004622:	e0 68 1a 8e 	mov	r8,6798
		(app_event_handlers)[e.type](e.data);
80004626:	11 89       	ld.ub	r9,r8[0x0]
80004628:	30 08       	mov	r8,0
8000462a:	f0 09 18 00 	cp.b	r9,r8
8000462e:	c6 40       	breq	800046f6 <clock+0xfe>
80004630:	e0 6a 0b 05 	mov	r10,2821
80004634:	e0 68 0b 08 	mov	r8,2824
80004638:	11 89       	ld.ub	r9,r8[0x0]
8000463a:	b4 89       	st.b	r10[0x0],r9
8000463c:	e0 6a 0b 0c 	mov	r10,2828
80004640:	f5 3c 0f 41 	ld.ub	r12,r10[3905]
80004644:	f2 0c 18 00 	cp.b	r12,r9
80004648:	c0 41       	brne	80004650 <clock+0x58>
8000464a:	f5 39 0f 40 	ld.ub	r9,r10[3904]
8000464e:	c0 28       	rjmp	80004652 <clock+0x5a>
80004650:	2f f9       	sub	r9,-1
80004652:	b0 89       	st.b	r8[0x0],r9
80004654:	e0 68 0b 05 	mov	r8,2821
80004658:	30 fc       	mov	r12,15
8000465a:	11 87       	ld.ub	r7,r8[0x0]
8000465c:	e0 6b 0b 0c 	mov	r11,2828
80004660:	30 08       	mov	r8,0
80004662:	ee c7 f8 a0 	sub	r7,r7,-1888
80004666:	10 99       	mov	r9,r8
80004668:	e0 6a 05 f4 	mov	r10,1524
8000466c:	c1 28       	rjmp	80004690 <clock+0x98>
8000466e:	f6 07 05 15 	ld.uh	r5,r11[r7<<0x1]
80004672:	f0 ce ff ff 	sub	lr,r8,-1
80004676:	f2 c6 ff ff 	sub	r6,r9,-1
8000467a:	ea 08 08 45 	asr	r5,r5,r8
8000467e:	ed b5 00 00 	bld	r5,0x0
80004682:	c0 51       	brne	8000468c <clock+0x94>
80004684:	f4 09 0a 18 	st.h	r10[r9<<0x1],r8
80004688:	f3 d6 c0 08 	bfextu	r9,r6,0x0,0x8
			// print_dbg_ulong(series_next);
			// print_dbg(" pos ");
			// print_dbg_ulong(series_pos);

			count = 0;
			for(i1=0;i1<16;i1++) {
8000468c:	f1 de c0 08 	bfextu	r8,lr,0x0,0x8
					found[count] = i1;
					count++;
				}
			}

			if(count == 1)
80004690:	f8 08 18 00 	cp.b	r8,r12
80004694:	fe 98 ff ed 	brls	8000466e <clock+0x76>
				next_pattern = found[0];
80004698:	e0 65 05 6c 	mov	r5,1388
8000469c:	e0 6a 05 a8 	mov	r10,1448
800046a0:	aa 89       	st.b	r5[0x0],r9
800046a2:	b4 88       	st.b	r10[0x0],r8
800046a4:	e0 66 1a 84 	mov	r6,6788
800046a8:	e0 67 05 f4 	mov	r7,1524
800046ac:	30 18       	mov	r8,1
800046ae:	f0 09 18 00 	cp.b	r9,r8
800046b2:	c0 31       	brne	800046b8 <clock+0xc0>
800046b4:	8e 08       	ld.sh	r8,r7[0x0]
800046b6:	c0 88       	rjmp	800046c6 <clock+0xce>
800046b8:	e0 a0 0a b8 	rcall	80005c28 <rnd>
800046bc:	0b 88       	ld.ub	r8,r5[0x0]
800046be:	f8 08 0d 08 	divu	r8,r12,r8
800046c2:	ee 09 04 18 	ld.sh	r8,r7[r9<<0x1]
800046c6:	e0 69 1a 5b 	mov	r9,6747
			else {

				next_pattern = found[rnd()%count];
800046ca:	ac 88       	st.b	r6[0x0],r8
800046cc:	e0 68 1a 84 	mov	r8,6788
800046d0:	11 88       	ld.ub	r8,r8[0x0]
800046d2:	b2 88       	st.b	r9[0x0],r8
800046d4:	e0 69 1a 90 	mov	r9,6800
800046d8:	b2 88       	st.b	r9[0x0],r8
			}

			pattern = next_pattern;
800046da:	e0 69 00 ec 	mov	r9,236
800046de:	b3 38       	mul	r8,r9
			series_playing = pattern;
800046e0:	e0 69 0b 0c 	mov	r9,2828
			next_pos = w.wp[pattern].loop_start;
800046e4:	f2 08 07 09 	ld.ub	r9,r9[r8]
800046e8:	e0 68 1a 53 	mov	r8,6739
800046ec:	b0 89       	st.b	r8[0x0],r9
800046ee:	30 09       	mov	r9,0
800046f0:	e0 68 1a 8e 	mov	r8,6798

			series_jump = 0;
800046f4:	b0 89       	st.b	r8[0x0],r9
800046f6:	e0 68 1a 53 	mov	r8,6739
		}

		pos = next_pos;
800046fa:	11 8a       	ld.ub	r10,r8[0x0]
800046fc:	e0 68 0b 06 	mov	r8,2822
80004700:	b0 8a       	st.b	r8[0x0],r10

		// live param record
		if(param_accept && live_in) {
80004702:	e0 68 1a 78 	mov	r8,6776
80004706:	11 89       	ld.ub	r9,r8[0x0]
80004708:	30 08       	mov	r8,0
8000470a:	f0 09 18 00 	cp.b	r9,r8
8000470e:	c2 a0       	breq	80004762 <clock+0x16a>
80004710:	e0 69 1a 54 	mov	r9,6740
80004714:	13 89       	ld.ub	r9,r9[0x0]
80004716:	f0 09 18 00 	cp.b	r9,r8
			param_dest = &w.wp[pattern].cv_curves[edit_cv_ch][pos];
8000471a:	c2 40       	breq	80004762 <clock+0x16a>
8000471c:	e0 68 0b 0c 	mov	r8,2828
80004720:	e0 6b 1a 5b 	mov	r11,6747
80004724:	e0 67 00 ec 	mov	r7,236
80004728:	17 8b       	ld.ub	r11,r11[0x0]
8000472a:	f6 07 02 47 	mul	r7,r11,r7
8000472e:	ee c7 ff 74 	sub	r7,r7,-140
			w.wp[pattern].cv_curves[edit_cv_ch][pos] = adc[1];
80004732:	10 07       	add	r7,r8

		pos = next_pos;

		// live param record
		if(param_accept && live_in) {
			param_dest = &w.wp[pattern].cv_curves[edit_cv_ch][pos];
80004734:	f3 da b0 08 	bfexts	r9,r10,0x0,0x8
80004738:	f6 0c 10 76 	mul	r12,r11,118
			w.wp[pattern].cv_curves[edit_cv_ch][pos] = adc[1];
8000473c:	e0 6b 1a 77 	mov	r11,6775

		pos = next_pos;

		// live param record
		if(param_accept && live_in) {
			param_dest = &w.wp[pattern].cv_curves[edit_cv_ch][pos];
80004740:	17 8b       	ld.ub	r11,r11[0x0]
80004742:	a5 6b       	lsl	r11,0x4
80004744:	f6 0c 00 0c 	add	r12,r11,r12
			w.wp[pattern].cv_curves[edit_cv_ch][pos] = adc[1];
80004748:	12 0b       	add	r11,r9
8000474a:	ee 0b 00 1b 	add	r11,r7,r11<<0x1
8000474e:	e0 67 0a f8 	mov	r7,2808
80004752:	8f 0b       	st.w	r7[0x0],r11
		}

		// calc next step
		if(w.wp[pattern].step_mode == mForward) { 		// FORWARD
80004754:	12 0c       	add	r12,r9
80004756:	e0 69 1a 60 	mov	r9,6752
8000475a:	2b ac       	sub	r12,-70
8000475c:	92 19       	ld.sh	r9,r9[0x2]
8000475e:	f0 0c 0a 19 	st.h	r8[r12<<0x1],r9
80004762:	e0 65 1a 5b 	mov	r5,6747
80004766:	e0 67 0b 0c 	mov	r7,2828
			if(pos == w.wp[pattern].loop_end) next_pos = w.wp[pattern].loop_start;
8000476a:	0b 88       	ld.ub	r8,r5[0x0]
8000476c:	e0 66 00 ec 	mov	r6,236
80004770:	ad 38       	mul	r8,r6
80004772:	ee 08 00 08 	add	r8,r7,r8
			else if(pos >= LENGTH) next_pos = 0;
80004776:	70 29       	ld.w	r9,r8[0x8]
80004778:	58 09       	cp.w	r9,0
8000477a:	c1 11       	brne	8000479c <clock+0x1a4>
8000477c:	5c 6a       	casts.b	r10
8000477e:	11 9b       	ld.ub	r11,r8[0x1]
			else next_pos++;
80004780:	16 3a       	cp.w	r10,r11
80004782:	c0 31       	brne	80004788 <clock+0x190>
80004784:	11 89       	ld.ub	r9,r8[0x0]
			cut_pos = 0;
		}
		else if(w.wp[pattern].step_mode == mReverse) {	// REVERSE
80004786:	c1 38       	rjmp	800047ac <clock+0x1b4>
80004788:	e0 68 0b 07 	mov	r8,2823
			if(pos == w.wp[pattern].loop_start)
8000478c:	11 8b       	ld.ub	r11,r8[0x0]
8000478e:	e0 68 1a 53 	mov	r8,6739
80004792:	16 3a       	cp.w	r10,r11
				next_pos = w.wp[pattern].loop_end;
80004794:	c1 c4       	brge	800047cc <clock+0x1d4>
80004796:	11 89       	ld.ub	r9,r8[0x0]
80004798:	2f f9       	sub	r9,-1
8000479a:	c1 98       	rjmp	800047cc <clock+0x1d4>
			else if(pos <= 0)
8000479c:	58 19       	cp.w	r9,1
8000479e:	c1 b1       	brne	800047d4 <clock+0x1dc>
800047a0:	f7 da b0 08 	bfexts	r11,r10,0x0,0x8
800047a4:	11 89       	ld.ub	r9,r8[0x0]
				next_pos = LENGTH;
800047a6:	12 3b       	cp.w	r11,r9
800047a8:	c0 51       	brne	800047b2 <clock+0x1ba>
800047aa:	11 99       	ld.ub	r9,r8[0x1]
			else next_pos--;
800047ac:	e0 68 1a 53 	mov	r8,6739
800047b0:	c0 e8       	rjmp	800047cc <clock+0x1d4>
			cut_pos = 0;
800047b2:	e0 68 1a 53 	mov	r8,6739
800047b6:	30 09       	mov	r9,0
800047b8:	f2 0a 18 00 	cp.b	r10,r9
800047bc:	e0 89 00 06 	brgt	800047c8 <clock+0x1d0>
800047c0:	e0 69 0b 07 	mov	r9,2823
800047c4:	13 89       	ld.ub	r9,r9[0x0]
800047c6:	c0 38       	rjmp	800047cc <clock+0x1d4>
800047c8:	11 89       	ld.ub	r9,r8[0x0]
800047ca:	20 19       	sub	r9,1
800047cc:	b0 89       	st.b	r8[0x0],r9
800047ce:	30 09       	mov	r9,0
800047d0:	c9 08       	rjmp	800048f0 <clock+0x2f8>
800047d2:	d7 03       	nop
800047d4:	58 29       	cp.w	r9,2
800047d6:	c7 71       	brne	800048c4 <clock+0x2cc>
800047d8:	e0 67 1a 74 	mov	r7,6772
800047dc:	0f 86       	ld.ub	r6,r7[0x0]
800047de:	e0 a0 0a 25 	rcall	80005c28 <rnd>
800047e2:	20 16       	sub	r6,1
800047e4:	30 38       	mov	r8,3
800047e6:	f8 08 0d 08 	divu	r8,r12,r8
800047ea:	12 06       	add	r6,r9
800047ec:	5c 56       	castu.b	r6
800047ee:	ae 86       	st.b	r7[0x0],r6
		}
		else if(w.wp[pattern].step_mode == mDrunk) {	// DRUNK
800047f0:	3f f8       	mov	r8,-1
800047f2:	f0 06 18 00 	cp.b	r6,r8
			drunk_step += (rnd() % 3) - 1; // -1 to 1
800047f6:	c0 65       	brlt	80004802 <clock+0x20a>
800047f8:	30 18       	mov	r8,1
800047fa:	f0 06 18 00 	cp.b	r6,r8
800047fe:	e0 8a 00 03 	brle	80004804 <clock+0x20c>
80004802:	ae 88       	st.b	r7[0x0],r8
80004804:	e0 68 1a 74 	mov	r8,6772
80004808:	e0 6a 1a 53 	mov	r10,6739
			if(drunk_step < -1) drunk_step = -1;
8000480c:	11 89       	ld.ub	r9,r8[0x0]
8000480e:	15 88       	ld.ub	r8,r10[0x0]
80004810:	f2 08 00 08 	add	r8,r9,r8
			else if(drunk_step > 1) drunk_step = 1;
80004814:	5c 58       	castu.b	r8
80004816:	b4 88       	st.b	r10[0x0],r8
80004818:	30 09       	mov	r9,0
8000481a:	f2 08 18 00 	cp.b	r8,r9

			next_pos += drunk_step;
8000481e:	c0 e4       	brge	8000483a <clock+0x242>
80004820:	e0 69 1a 5b 	mov	r9,6747
80004824:	13 8b       	ld.ub	r11,r9[0x0]
80004826:	e0 69 00 ec 	mov	r9,236
8000482a:	f6 09 02 49 	mul	r9,r11,r9
			if(next_pos < 0) 
8000482e:	e0 6b 0b 0c 	mov	r11,2828
80004832:	f6 09 00 09 	add	r9,r11,r9
				next_pos += w.wp[pattern].loop_end;
80004836:	13 99       	ld.ub	r9,r9[0x1]
80004838:	c2 58       	rjmp	80004882 <clock+0x28a>
8000483a:	e0 69 0b 07 	mov	r9,2823
8000483e:	f7 d8 b0 08 	bfexts	r11,r8,0x0,0x8
80004842:	13 8c       	ld.ub	r12,r9[0x0]
80004844:	e0 67 0b 0c 	mov	r7,2828
80004848:	e0 69 1a 5b 	mov	r9,6747
			else if(next_pos > LENGTH) 
8000484c:	18 3b       	cp.w	r11,r12
8000484e:	e0 8a 00 0a 	brle	80004862 <clock+0x26a>
80004852:	13 8b       	ld.ub	r11,r9[0x0]
80004854:	e0 69 00 ec 	mov	r9,236
80004858:	f6 09 02 49 	mul	r9,r11,r9
8000485c:	ee 09 07 09 	ld.ub	r9,r7[r9]
				next_pos -= (LENGTH-w.wp[pattern].loop_start);
80004860:	c2 48       	rjmp	800048a8 <clock+0x2b0>
80004862:	13 86       	ld.ub	r6,r9[0x0]
80004864:	e0 69 00 ec 	mov	r9,236
80004868:	ec 09 02 49 	mul	r9,r6,r9
8000486c:	30 16       	mov	r6,1
			else if(w.wp[pattern].loop_dir == 1 && next_pos < w.wp[pattern].loop_start)
8000486e:	ee 09 00 09 	add	r9,r7,r9
80004872:	13 b7       	ld.ub	r7,r9[0x3]
80004874:	ec 07 18 00 	cp.b	r7,r6
80004878:	c1 01       	brne	80004898 <clock+0x2a0>
8000487a:	13 8c       	ld.ub	r12,r9[0x0]
8000487c:	18 3b       	cp.w	r11,r12
8000487e:	c0 54       	brge	80004888 <clock+0x290>
80004880:	13 a9       	ld.ub	r9,r9[0x2]
80004882:	f2 08 00 08 	add	r8,r9,r8
80004886:	c1 d8       	rjmp	800048c0 <clock+0x2c8>
80004888:	13 9c       	ld.ub	r12,r9[0x1]
8000488a:	18 3b       	cp.w	r11,r12
				next_pos += w.wp[pattern].loop_len;
8000488c:	e0 8a 00 31 	brle	800048ee <clock+0x2f6>
80004890:	13 a9       	ld.ub	r9,r9[0x2]
80004892:	f0 09 01 09 	sub	r9,r8,r9
			else if(w.wp[pattern].loop_dir == 1 && next_pos > w.wp[pattern].loop_end)
80004896:	c2 b8       	rjmp	800048ec <clock+0x2f4>
80004898:	30 26       	mov	r6,2
8000489a:	ec 07 18 00 	cp.b	r7,r6
				next_pos -= w.wp[pattern].loop_len;
8000489e:	c2 81       	brne	800048ee <clock+0x2f6>
800048a0:	13 87       	ld.ub	r7,r9[0x0]
800048a2:	0e 3b       	cp.w	r11,r7
			else if(w.wp[pattern].loop_dir == 2 && next_pos < w.wp[pattern].loop_start)
800048a4:	c0 54       	brge	800048ae <clock+0x2b6>
800048a6:	13 a9       	ld.ub	r9,r9[0x2]
800048a8:	f2 0c 01 0c 	sub	r12,r9,r12
800048ac:	c0 88       	rjmp	800048bc <clock+0x2c4>
800048ae:	13 97       	ld.ub	r7,r9[0x1]
800048b0:	0e 3b       	cp.w	r11,r7
				next_pos += w.wp[pattern].loop_len - LENGTH;
800048b2:	e0 8a 00 1e 	brle	800048ee <clock+0x2f6>
800048b6:	5c 3c       	neg	r12
800048b8:	13 a9       	ld.ub	r9,r9[0x2]
			else if(w.wp[pattern].loop_dir == 2 && next_pos > w.wp[pattern].loop_end)
800048ba:	12 1c       	sub	r12,r9
800048bc:	f8 08 00 08 	add	r8,r12,r8
800048c0:	b4 88       	st.b	r10[0x0],r8
				next_pos -= w.wp[pattern].loop_len + LENGTH;
800048c2:	c1 68       	rjmp	800048ee <clock+0x2f6>
800048c4:	58 39       	cp.w	r9,3
800048c6:	c1 81       	brne	800048f6 <clock+0x2fe>
800048c8:	e0 a0 09 b0 	rcall	80005c28 <rnd>
800048cc:	0b 88       	ld.ub	r8,r5[0x0]
800048ce:	f0 06 03 47 	mac	r7,r8,r6
800048d2:	0f a9       	ld.ub	r9,r7[0x2]
800048d4:	2f f9       	sub	r9,-1
800048d6:	f8 09 0d 0a 	divu	r10,r12,r9
800048da:	0f 88       	ld.ub	r8,r7[0x0]
800048dc:	e0 69 0b 07 	mov	r9,2823
800048e0:	16 08       	add	r8,r11
800048e2:	13 89       	ld.ub	r9,r9[0x0]
800048e4:	e0 6a 1a 53 	mov	r10,6739

			cut_pos = 1;
 		}
		else if(w.wp[pattern].step_mode == mRandom) {	// RANDOM
800048e8:	f0 09 0d 08 	divu	r8,r8,r9
			next_pos = ((rnd() % (w.wp[pattern].loop_len + 1)) + w.wp[pattern].loop_start) % LENGTH;
800048ec:	b4 89       	st.b	r10[0x0],r9
800048ee:	30 19       	mov	r9,1
800048f0:	e0 68 1a 82 	mov	r8,6786
800048f4:	b0 89       	st.b	r8[0x0],r9
800048f6:	e0 69 0b 06 	mov	r9,2822
800048fa:	e0 68 1a 5b 	mov	r8,6747
800048fe:	f3 2a 00 00 	ld.sb	r10,r9[0]
80004902:	11 88       	ld.ub	r8,r8[0x0]
80004904:	e0 69 00 ec 	mov	r9,236
80004908:	e0 6b 0b 0c 	mov	r11,2828
8000490c:	f0 09 02 49 	mul	r9,r8,r9
			cut_pos = 1;
80004910:	f6 09 00 09 	add	r9,r11,r9
		}

		// next pattern?
		if(pos == w.wp[pattern].loop_end) {
80004914:	13 99       	ld.ub	r9,r9[0x1]
80004916:	12 3a       	cp.w	r10,r9
80004918:	c1 41       	brne	80004940 <clock+0x348>
8000491a:	e0 69 1a 88 	mov	r9,6792
8000491e:	72 09       	ld.w	r9,r9[0x0]
80004920:	58 29       	cp.w	r9,2
80004922:	c0 41       	brne	8000492a <clock+0x332>
80004924:	e0 68 1a 8e 	mov	r8,6798
80004928:	c0 98       	rjmp	8000493a <clock+0x342>
8000492a:	e0 69 1a 84 	mov	r9,6788
8000492e:	13 89       	ld.ub	r9,r9[0x0]
80004930:	f0 09 18 00 	cp.b	r9,r8
			if(edit_mode == mSeries) 
80004934:	c0 60       	breq	80004940 <clock+0x348>
80004936:	e0 68 1a 76 	mov	r8,6774
				series_jump++;
8000493a:	11 89       	ld.ub	r9,r8[0x0]
8000493c:	2f f9       	sub	r9,-1
			else if(next_pattern != pattern)
8000493e:	b0 89       	st.b	r8[0x0],r9
80004940:	30 08       	mov	r8,0
80004942:	e0 67 1a 79 	mov	r7,6777
80004946:	ae 88       	st.b	r7[0x0],r8
				pattern_jump++;
80004948:	e0 a0 09 70 	rcall	80005c28 <rnd>
8000494c:	e0 6a 00 ff 	mov	r10,255
		}



		// TRIGGER
		triggered = 0;
80004950:	f8 0a 0d 0a 	divu	r10,r12,r10
80004954:	e0 68 1a 5b 	mov	r8,6747
		if((rnd() % 255) < w.wp[pattern].step_probs[pos]) {
80004958:	e0 69 0b 06 	mov	r9,2822
8000495c:	11 88       	ld.ub	r8,r8[0x0]
8000495e:	f3 29 00 00 	ld.sb	r9,r9[0]
80004962:	16 9a       	mov	r10,r11
80004964:	e0 66 0b 0c 	mov	r6,2828
80004968:	e0 6b 00 ec 	mov	r11,236
8000496c:	f0 0b 02 4b 	mul	r11,r8,r11
80004970:	ec 0b 00 0b 	add	r11,r6,r11
80004974:	12 0b       	add	r11,r9
80004976:	f7 35 00 1c 	ld.ub	r5,r11[28]
8000497a:	0a 3a       	cp.w	r10,r5
8000497c:	c7 32       	brcc	80004a62 <clock+0x46a>
8000497e:	f0 0a 15 04 	lsl	r10,r8,0x4
80004982:	10 1a       	sub	r10,r8
80004984:	a3 6a       	lsl	r10,0x2
80004986:	f4 08 01 08 	sub	r8,r10,r8
			
			if(w.wp[pattern].step_choice & 1<<pos) {
8000498a:	2f f8       	sub	r8,-1
8000498c:	ec 08 05 28 	ld.uh	r8,r6[r8<<0x2]
80004990:	f0 09 08 49 	asr	r9,r8,r9
80004994:	ed b9 00 00 	bld	r9,0x0
80004998:	c3 e1       	brne	80004a14 <clock+0x41c>
8000499a:	30 09       	mov	r9,0
8000499c:	2f 4b       	sub	r11,-12
8000499e:	30 3c       	mov	r12,3
800049a0:	12 98       	mov	r8,r9
800049a2:	e0 6a 05 f4 	mov	r10,1524
				count = 0;
				for(i1=0;i1<4;i1++)
					if(w.wp[pattern].steps[pos] >> i1 & 1) {
800049a6:	c1 18       	rjmp	800049c8 <clock+0x3d0>
		triggered = 0;
		if((rnd() % 255) < w.wp[pattern].step_probs[pos]) {
			
			if(w.wp[pattern].step_choice & 1<<pos) {
				count = 0;
				for(i1=0;i1<4;i1++)
800049a8:	17 86       	ld.ub	r6,r11[0x0]

		// TRIGGER
		triggered = 0;
		if((rnd() % 255) < w.wp[pattern].step_probs[pos]) {
			
			if(w.wp[pattern].step_choice & 1<<pos) {
800049aa:	f2 ce ff ff 	sub	lr,r9,-1
				count = 0;
				for(i1=0;i1<4;i1++)
800049ae:	f0 c7 ff ff 	sub	r7,r8,-1
					if(w.wp[pattern].steps[pos] >> i1 & 1) {
						found[count] = i1;
						count++;
800049b2:	ec 09 08 46 	asr	r6,r6,r9
800049b6:	ed b6 00 00 	bld	r6,0x0
		if((rnd() % 255) < w.wp[pattern].step_probs[pos]) {
			
			if(w.wp[pattern].step_choice & 1<<pos) {
				count = 0;
				for(i1=0;i1<4;i1++)
					if(w.wp[pattern].steps[pos] >> i1 & 1) {
800049ba:	c0 51       	brne	800049c4 <clock+0x3cc>
800049bc:	f4 08 0a 19 	st.h	r10[r8<<0x1],r9
800049c0:	f1 d7 c0 08 	bfextu	r8,r7,0x0,0x8
						found[count] = i1;
800049c4:	f3 de c0 08 	bfextu	r9,lr,0x0,0x8
						count++;
800049c8:	f8 09 18 00 	cp.b	r9,r12
800049cc:	fe 98 ff ee 	brls	800049a8 <clock+0x3b0>
		triggered = 0;
		if((rnd() % 255) < w.wp[pattern].step_probs[pos]) {
			
			if(w.wp[pattern].step_choice & 1<<pos) {
				count = 0;
				for(i1=0;i1<4;i1++)
800049d0:	e0 65 05 6c 	mov	r5,1388
800049d4:	e0 6a 05 a8 	mov	r10,1448
800049d8:	aa 88       	st.b	r5[0x0],r8
800049da:	b4 89       	st.b	r10[0x0],r9
800049dc:	58 08       	cp.w	r8,0
800049de:	c0 51       	brne	800049e8 <clock+0x3f0>
					if(w.wp[pattern].steps[pos] >> i1 & 1) {
						found[count] = i1;
						count++;
					}

				if(count == 0)
800049e0:	e0 69 1a 79 	mov	r9,6777
					triggered = 0;
800049e4:	b2 88       	st.b	r9[0x0],r8
800049e6:	c1 a8       	rjmp	80004a1a <clock+0x422>
800049e8:	e0 67 05 f4 	mov	r7,1524
800049ec:	e0 66 1a 79 	mov	r6,6777
				else if(count == 1)
800049f0:	30 19       	mov	r9,1
800049f2:	f2 08 18 00 	cp.b	r8,r9
					triggered = 1<<found[0];
800049f6:	c0 31       	brne	800049fc <clock+0x404>
800049f8:	8e 88       	ld.uh	r8,r7[0x0]
				else
					triggered = 1<<found[rnd()%count];
800049fa:	c0 88       	rjmp	80004a0a <clock+0x412>
800049fc:	e0 a0 09 16 	rcall	80005c28 <rnd>
80004a00:	0b 88       	ld.ub	r8,r5[0x0]
80004a02:	f8 08 0d 08 	divu	r8,r12,r8
80004a06:	ee 09 05 18 	ld.uh	r8,r7[r9<<0x1]
80004a0a:	30 19       	mov	r9,1
80004a0c:	f2 08 09 48 	lsl	r8,r9,r8
80004a10:	ac 88       	st.b	r6[0x0],r8
80004a12:	c0 48       	rjmp	80004a1a <clock+0x422>
80004a14:	f7 38 00 0c 	ld.ub	r8,r11[12]
80004a18:	ae 88       	st.b	r7[0x0],r8
80004a1a:	e0 68 1a 79 	mov	r8,6777
80004a1e:	11 88       	ld.ub	r8,r8[0x0]
80004a20:	ed b8 00 00 	bld	r8,0x0
80004a24:	c0 41       	brne	80004a2c <clock+0x434>
80004a26:	32 0c       	mov	r12,32
80004a28:	e0 a0 0d 60 	rcall	800064e8 <gpio_set_gpio_pin>
80004a2c:	e0 68 1a 79 	mov	r8,6777
80004a30:	11 88       	ld.ub	r8,r8[0x0]
80004a32:	ed b8 00 01 	bld	r8,0x1
80004a36:	c0 41       	brne	80004a3e <clock+0x446>
80004a38:	32 1c       	mov	r12,33
80004a3a:	e0 a0 0d 57 	rcall	800064e8 <gpio_set_gpio_pin>
80004a3e:	e0 68 1a 79 	mov	r8,6777
80004a42:	11 88       	ld.ub	r8,r8[0x0]
80004a44:	ed b8 00 02 	bld	r8,0x2
80004a48:	c0 41       	brne	80004a50 <clock+0x458>
80004a4a:	32 2c       	mov	r12,34
80004a4c:	e0 a0 0d 4e 	rcall	800064e8 <gpio_set_gpio_pin>
			}	
			else {
				triggered = w.wp[pattern].steps[pos];
80004a50:	e0 68 1a 79 	mov	r8,6777
80004a54:	11 88       	ld.ub	r8,r8[0x0]
			}
			
			if(triggered & 0x1) gpio_set_gpio_pin(B00);
80004a56:	ed b8 00 03 	bld	r8,0x3
80004a5a:	c0 41       	brne	80004a62 <clock+0x46a>
80004a5c:	32 3c       	mov	r12,35
80004a5e:	e0 a0 0d 45 	rcall	800064e8 <gpio_set_gpio_pin>
80004a62:	e0 68 07 69 	mov	r8,1897
			if(triggered & 0x2) gpio_set_gpio_pin(B01);
80004a66:	11 89       	ld.ub	r9,r8[0x0]
80004a68:	2f f9       	sub	r9,-1
80004a6a:	b0 89       	st.b	r8[0x0],r9
80004a6c:	e0 a0 08 de 	rcall	80005c28 <rnd>
80004a70:	e0 6a 00 ff 	mov	r10,255
80004a74:	f8 0a 0d 0a 	divu	r10,r12,r10
			if(triggered & 0x4) gpio_set_gpio_pin(B02);
80004a78:	e0 68 1a 5b 	mov	r8,6747
80004a7c:	e0 69 0b 06 	mov	r9,2822
80004a80:	11 88       	ld.ub	r8,r8[0x0]
80004a82:	f3 29 00 00 	ld.sb	r9,r9[0]
			if(triggered & 0x8) gpio_set_gpio_pin(B03);
80004a86:	16 9a       	mov	r10,r11
80004a88:	e0 6c 00 ec 	mov	r12,236
80004a8c:	e0 6b 0b 0c 	mov	r11,2828
80004a90:	f0 0c 02 4c 	mul	r12,r8,r12
80004a94:	f6 0c 00 0c 	add	r12,r11,r12
		}

		monomeFrameDirty++;
80004a98:	12 0c       	add	r12,r9
80004a9a:	f9 37 00 cc 	ld.ub	r7,r12[204]


		// PARAM 0
		if((rnd() % 255) < w.wp[pattern].cv_probs[0][pos]) {
80004a9e:	0e 3a       	cp.w	r10,r7
80004aa0:	c5 f2       	brcc	80004b5e <clock+0x566>
80004aa2:	f0 0a 15 04 	lsl	r10,r8,0x4
80004aa6:	10 1a       	sub	r10,r8
80004aa8:	a3 6a       	lsl	r10,0x2
80004aaa:	10 1a       	sub	r10,r8
80004aac:	f6 0a 00 2a 	add	r10,r11,r10<<0x2
80004ab0:	15 ec       	ld.ub	r12,r10[0x6]
80004ab2:	30 0a       	mov	r10,0
80004ab4:	f4 0c 18 00 	cp.b	r12,r10
80004ab8:	c0 91       	brne	80004aca <clock+0x4d2>
80004aba:	f0 08 10 76 	mul	r8,r8,118
80004abe:	f0 09 00 09 	add	r9,r8,r9
80004ac2:	2b a9       	sub	r9,-70
80004ac4:	f6 09 04 19 	ld.sh	r9,r11[r9<<0x1]
80004ac8:	c4 88       	rjmp	80004b58 <clock+0x560>
80004aca:	f0 08 10 76 	mul	r8,r8,118
			if(w.wp[pattern].cv_mode[0] == 0) {
80004ace:	30 0a       	mov	r10,0
80004ad0:	f0 09 00 09 	add	r9,r8,r9
80004ad4:	30 f7       	mov	r7,15
80004ad6:	16 98       	mov	r8,r11
80004ad8:	2d a9       	sub	r9,-38
80004ada:	14 9b       	mov	r11,r10
80004adc:	e0 6c 05 f4 	mov	r12,1524
80004ae0:	c1 28       	rjmp	80004b04 <clock+0x50c>
80004ae2:	f0 09 05 15 	ld.uh	r5,r8[r9<<0x1]
				cv0 = w.wp[pattern].cv_curves[0][pos];
80004ae6:	f4 ce ff ff 	sub	lr,r10,-1
80004aea:	f6 c6 ff ff 	sub	r6,r11,-1
80004aee:	ea 0a 08 45 	asr	r5,r5,r10
80004af2:	ed b5 00 00 	bld	r5,0x0
			}
			else {
				count = 0;
				for(i1=0;i1<16;i1++)
					if(w.wp[pattern].cv_steps[0][pos] & (1<<i1)) {
80004af6:	c0 51       	brne	80004b00 <clock+0x508>
80004af8:	f8 0b 0a 1a 	st.h	r12[r11<<0x1],r10
80004afc:	f7 d6 c0 08 	bfextu	r11,r6,0x0,0x8
			if(w.wp[pattern].cv_mode[0] == 0) {
				cv0 = w.wp[pattern].cv_curves[0][pos];
			}
			else {
				count = 0;
				for(i1=0;i1<16;i1++)
80004b00:	f5 de c0 08 	bfextu	r10,lr,0x0,0x8
					if(w.wp[pattern].cv_steps[0][pos] & (1<<i1)) {
80004b04:	ee 0a 18 00 	cp.b	r10,r7
						found[count] = i1;
80004b08:	fe 98 ff ed 	brls	80004ae2 <clock+0x4ea>
				cv0 = w.wp[pattern].cv_curves[0][pos];
			}
			else {
				count = 0;
				for(i1=0;i1<16;i1++)
					if(w.wp[pattern].cv_steps[0][pos] & (1<<i1)) {
80004b0c:	e0 68 05 a8 	mov	r8,1448
						found[count] = i1;
						count++;
80004b10:	e0 65 05 6c 	mov	r5,1388
80004b14:	b0 8a       	st.b	r8[0x0],r10
80004b16:	aa 8b       	st.b	r5[0x0],r11
				cv0 = w.wp[pattern].cv_curves[0][pos];
			}
			else {
				count = 0;
				for(i1=0;i1<16;i1++)
					if(w.wp[pattern].cv_steps[0][pos] & (1<<i1)) {
80004b18:	e0 67 05 f4 	mov	r7,1524
80004b1c:	e0 66 1a 58 	mov	r6,6744
80004b20:	30 18       	mov	r8,1
						found[count] = i1;
80004b22:	f0 0b 18 00 	cp.b	r11,r8
						count++;
80004b26:	c0 31       	brne	80004b2c <clock+0x534>
80004b28:	8e 08       	ld.sh	r8,r7[0x0]
80004b2a:	c0 88       	rjmp	80004b3a <clock+0x542>
80004b2c:	e0 a0 08 7e 	rcall	80005c28 <rnd>
			if(w.wp[pattern].cv_mode[0] == 0) {
				cv0 = w.wp[pattern].cv_curves[0][pos];
			}
			else {
				count = 0;
				for(i1=0;i1<16;i1++)
80004b30:	0b 88       	ld.ub	r8,r5[0x0]
80004b32:	f8 08 0d 08 	divu	r8,r12,r8
80004b36:	ee 09 04 18 	ld.sh	r8,r7[r9<<0x1]
80004b3a:	ac 88       	st.b	r6[0x0],r8
80004b3c:	e0 68 1a 58 	mov	r8,6744
80004b40:	11 88       	ld.ub	r8,r8[0x0]
					if(w.wp[pattern].cv_steps[0][pos] & (1<<i1)) {
						found[count] = i1;
						count++;
					}
				if(count == 1) 
80004b42:	e0 69 1a 5b 	mov	r9,6747
80004b46:	13 89       	ld.ub	r9,r9[0x0]
80004b48:	f2 09 10 76 	mul	r9,r9,118
					cv_chosen[0] = found[0];
80004b4c:	10 09       	add	r9,r8
80004b4e:	e0 68 0b 0c 	mov	r8,2828
80004b52:	2e a9       	sub	r9,-22
80004b54:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
80004b58:	e0 68 1a 56 	mov	r8,6742
80004b5c:	b0 09       	st.h	r8[0x0],r9
80004b5e:	e0 a0 08 65 	rcall	80005c28 <rnd>
80004b62:	e0 68 1a 5b 	mov	r8,6747
80004b66:	e0 6a 00 ff 	mov	r10,255
80004b6a:	f8 0a 0d 0a 	divu	r10,r12,r10
80004b6e:	11 89       	ld.ub	r9,r8[0x0]
80004b70:	16 9a       	mov	r10,r11
80004b72:	e0 68 0b 06 	mov	r8,2822
80004b76:	e0 6b 0b 0c 	mov	r11,2828
80004b7a:	f1 28 00 00 	ld.sb	r8,r8[0]
				else
					cv_chosen[0] = found[rnd() % count];
80004b7e:	e0 67 00 ec 	mov	r7,236
80004b82:	f2 07 02 47 	mul	r7,r9,r7
80004b86:	f6 07 00 07 	add	r7,r11,r7
80004b8a:	ee 08 00 0c 	add	r12,r7,r8
				cv0 = w.wp[pattern].cv_values[cv_chosen[0]];			
80004b8e:	f9 36 00 dc 	ld.ub	r6,r12[220]
80004b92:	0c 3a       	cp.w	r10,r6
80004b94:	c5 92       	brcc	80004c46 <clock+0x64e>
80004b96:	0f fc       	ld.ub	r12,r7[0x7]
80004b98:	30 0a       	mov	r10,0
80004b9a:	f4 0c 18 00 	cp.b	r12,r10
80004b9e:	c0 91       	brne	80004bb0 <clock+0x5b8>
80004ba0:	f2 09 10 76 	mul	r9,r9,118
80004ba4:	f2 08 00 08 	add	r8,r9,r8
			}
		}

		// PARAM 1
		if((rnd() % 255) < w.wp[pattern].cv_probs[1][pos]) {
80004ba8:	2a a8       	sub	r8,-86
80004baa:	f6 08 04 19 	ld.sh	r9,r11[r8<<0x1]
80004bae:	c4 98       	rjmp	80004c40 <clock+0x648>
80004bb0:	f2 09 10 76 	mul	r9,r9,118
80004bb4:	30 0a       	mov	r10,0
80004bb6:	f2 08 00 08 	add	r8,r9,r8
80004bba:	30 f7       	mov	r7,15
80004bbc:	16 99       	mov	r9,r11
80004bbe:	2c a8       	sub	r8,-54
80004bc0:	14 9b       	mov	r11,r10
80004bc2:	e0 6c 05 f4 	mov	r12,1524
80004bc6:	c1 28       	rjmp	80004bea <clock+0x5f2>
80004bc8:	f2 08 05 1e 	ld.uh	lr,r9[r8<<0x1]
80004bcc:	f4 c6 ff ff 	sub	r6,r10,-1
80004bd0:	f6 c5 ff ff 	sub	r5,r11,-1
80004bd4:	fc 0a 08 4e 	asr	lr,lr,r10
			if(w.wp[pattern].cv_mode[1] == 0) {
80004bd8:	ed be 00 00 	bld	lr,0x0
80004bdc:	c0 51       	brne	80004be6 <clock+0x5ee>
80004bde:	f8 0b 0a 1a 	st.h	r12[r11<<0x1],r10
				cv1 = w.wp[pattern].cv_curves[1][pos];
80004be2:	f7 d5 c0 08 	bfextu	r11,r5,0x0,0x8
80004be6:	f5 d6 c0 08 	bfextu	r10,r6,0x0,0x8
80004bea:	ee 0a 18 00 	cp.b	r10,r7
80004bee:	fe 98 ff ed 	brls	80004bc8 <clock+0x5d0>
			}
			else {
				count = 0;
				for(i1=0;i1<16;i1++)
					if(w.wp[pattern].cv_steps[1][pos] & (1<<i1)) {
80004bf2:	e0 68 05 a8 	mov	r8,1448
		}

		// PARAM 1
		if((rnd() % 255) < w.wp[pattern].cv_probs[1][pos]) {
			if(w.wp[pattern].cv_mode[1] == 0) {
				cv1 = w.wp[pattern].cv_curves[1][pos];
80004bf6:	e0 65 05 6c 	mov	r5,1388
			}
			else {
				count = 0;
				for(i1=0;i1<16;i1++)
					if(w.wp[pattern].cv_steps[1][pos] & (1<<i1)) {
80004bfa:	b0 8a       	st.b	r8[0x0],r10
			if(w.wp[pattern].cv_mode[1] == 0) {
				cv1 = w.wp[pattern].cv_curves[1][pos];
			}
			else {
				count = 0;
				for(i1=0;i1<16;i1++)
80004bfc:	aa 8b       	st.b	r5[0x0],r11
					if(w.wp[pattern].cv_steps[1][pos] & (1<<i1)) {
80004bfe:	e0 67 05 f4 	mov	r7,1524
		}

		// PARAM 1
		if((rnd() % 255) < w.wp[pattern].cv_probs[1][pos]) {
			if(w.wp[pattern].cv_mode[1] == 0) {
				cv1 = w.wp[pattern].cv_curves[1][pos];
80004c02:	e0 66 1a 58 	mov	r6,6744
			}
			else {
				count = 0;
				for(i1=0;i1<16;i1++)
80004c06:	30 18       	mov	r8,1
					if(w.wp[pattern].cv_steps[1][pos] & (1<<i1)) {
80004c08:	f0 0b 18 00 	cp.b	r11,r8
						found[count] = i1;
						count++;
80004c0c:	c0 41       	brne	80004c14 <clock+0x61c>
80004c0e:	8e 08       	ld.sh	r8,r7[0x0]
80004c10:	c0 98       	rjmp	80004c22 <clock+0x62a>
80004c12:	d7 03       	nop
				cv1 = w.wp[pattern].cv_curves[1][pos];
			}
			else {
				count = 0;
				for(i1=0;i1<16;i1++)
					if(w.wp[pattern].cv_steps[1][pos] & (1<<i1)) {
80004c14:	e0 a0 08 0a 	rcall	80005c28 <rnd>
80004c18:	0b 88       	ld.ub	r8,r5[0x0]
80004c1a:	f8 08 0d 08 	divu	r8,r12,r8
						found[count] = i1;
80004c1e:	ee 09 04 18 	ld.sh	r8,r7[r9<<0x1]
						count++;
80004c22:	ac 98       	st.b	r6[0x1],r8
80004c24:	e0 68 1a 58 	mov	r8,6744
80004c28:	11 98       	ld.ub	r8,r8[0x1]
			if(w.wp[pattern].cv_mode[1] == 0) {
				cv1 = w.wp[pattern].cv_curves[1][pos];
			}
			else {
				count = 0;
				for(i1=0;i1<16;i1++)
80004c2a:	e0 69 1a 5b 	mov	r9,6747
80004c2e:	13 89       	ld.ub	r9,r9[0x0]
80004c30:	f2 09 10 76 	mul	r9,r9,118
80004c34:	10 09       	add	r9,r8
80004c36:	e0 68 0b 0c 	mov	r8,2828
80004c3a:	2e a9       	sub	r9,-22
80004c3c:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
					if(w.wp[pattern].cv_steps[1][pos] & (1<<i1)) {
						found[count] = i1;
						count++;
					}
				if(count == 1) 
80004c40:	e0 68 1a 6a 	mov	r8,6762
80004c44:	b0 09       	st.h	r8[0x0],r9
					cv_chosen[1] = found[0];
80004c46:	30 0b       	mov	r11,0
80004c48:	fe 7c 24 00 	mov	r12,-56320
80004c4c:	e0 a0 0d 56 	rcall	800066f8 <spi_selectChip>
80004c50:	33 1b       	mov	r11,49
80004c52:	fe 7c 24 00 	mov	r12,-56320
80004c56:	e0 a0 0d e0 	rcall	80006816 <spi_write>
80004c5a:	fe 7c 24 00 	mov	r12,-56320
80004c5e:	e0 67 1a 56 	mov	r7,6742
80004c62:	8e 8b       	ld.uh	r11,r7[0x0]
80004c64:	a5 8b       	lsr	r11,0x4
80004c66:	e0 a0 0d d8 	rcall	80006816 <spi_write>
80004c6a:	8e 0b       	ld.sh	r11,r7[0x0]
80004c6c:	fe 7c 24 00 	mov	r12,-56320
				else
					cv_chosen[1] = found[rnd() % count];
80004c70:	a5 6b       	lsl	r11,0x4
80004c72:	e2 1b ff f0 	andl	r11,0xfff0,COH
80004c76:	e0 a0 0d d0 	rcall	80006816 <spi_write>
80004c7a:	30 0b       	mov	r11,0
80004c7c:	fe 7c 24 00 	mov	r12,-56320

				cv1 = w.wp[pattern].cv_values[cv_chosen[1]];			
80004c80:	e0 a0 0d 64 	rcall	80006748 <spi_unselectChip>
80004c84:	30 0b       	mov	r11,0
80004c86:	fe 7c 24 00 	mov	r12,-56320
80004c8a:	e0 a0 0d 37 	rcall	800066f8 <spi_selectChip>
80004c8e:	33 8b       	mov	r11,56
80004c90:	fe 7c 24 00 	mov	r12,-56320
80004c94:	e0 a0 0d c1 	rcall	80006816 <spi_write>
80004c98:	fe 7c 24 00 	mov	r12,-56320
			}
		}


		// write to DAC
		spi_selectChip(SPI,DAC_SPI);
80004c9c:	e0 67 1a 6a 	mov	r7,6762
80004ca0:	8e 8b       	ld.uh	r11,r7[0x0]
80004ca2:	a5 8b       	lsr	r11,0x4
		 // spi_write(SPI,0x39);	// update both
		spi_write(SPI,0x31);	// update A
80004ca4:	e0 a0 0d b9 	rcall	80006816 <spi_write>
80004ca8:	8e 0b       	ld.sh	r11,r7[0x0]
80004caa:	fe 7c 24 00 	mov	r12,-56320
		// spi_write(SPI,0x38);	// update B
		// spi_write(SPI,pos*15);	// send position
 		// spi_write(SPI,0);
 		spi_write(SPI,cv0>>4);
80004cae:	a5 6b       	lsl	r11,0x4
80004cb0:	e2 1b ff f0 	andl	r11,0xfff0,COH
80004cb4:	e0 a0 0d b1 	rcall	80006816 <spi_write>
80004cb8:	30 0b       	mov	r11,0
80004cba:	fe 7c 24 00 	mov	r12,-56320
 		spi_write(SPI,cv0<<4);
80004cbe:	e0 a0 0d 45 	rcall	80006748 <spi_unselectChip>
80004cc2:	d8 22       	popm	r4-r7,pc
80004cc4:	32 ac       	mov	r12,42
80004cc6:	e0 a0 0c 1e 	rcall	80006502 <gpio_clr_gpio_pin>
80004cca:	32 0c       	mov	r12,32
		spi_unselectChip(SPI,DAC_SPI);
80004ccc:	e0 a0 0c 1b 	rcall	80006502 <gpio_clr_gpio_pin>
80004cd0:	32 1c       	mov	r12,33
80004cd2:	e0 a0 0c 18 	rcall	80006502 <gpio_clr_gpio_pin>

		spi_selectChip(SPI,DAC_SPI);
80004cd6:	32 2c       	mov	r12,34
80004cd8:	e0 a0 0c 15 	rcall	80006502 <gpio_clr_gpio_pin>
80004cdc:	32 3c       	mov	r12,35
80004cde:	e0 a0 0c 12 	rcall	80006502 <gpio_clr_gpio_pin>
		spi_write(SPI,0x38);	// update B
80004ce2:	d8 22       	popm	r4-r7,pc

80004ce4 <timers_unset_monome>:
80004ce4:	d4 01       	pushm	lr
80004ce6:	e0 6c 05 70 	mov	r12,1392
		spi_write(SPI,cv1>>4);
80004cea:	e0 a0 07 2b 	rcall	80005b40 <timer_remove>
80004cee:	e0 6c 06 30 	mov	r12,1584
80004cf2:	e0 a0 07 27 	rcall	80005b40 <timer_remove>
80004cf6:	d8 02       	popm	pc

80004cf8 <handler_FtdiDisconnect>:
		spi_write(SPI,cv1<<4);
80004cf8:	d4 01       	pushm	lr
80004cfa:	cf 5f       	rcall	80004ce4 <timers_unset_monome>
80004cfc:	d8 02       	popm	pc
80004cfe:	d7 03       	nop

80004d00 <monome_poll_timer_callback>:
80004d00:	d4 01       	pushm	lr
80004d02:	e0 a0 07 f9 	rcall	80005cf4 <ftdi_read>
80004d06:	d8 02       	popm	pc

80004d08 <init_adc>:
  (*dst)[3] = val & 0xfff;

}

// setup ad7923
void init_adc(void) {
80004d08:	d4 21       	pushm	r4-r7,lr
  u16 cmd;

  // at powerup, the part wants a dummy conversion with DIN high
  spi_selectChip(SPI, ADC_SPI);
80004d0a:	30 1b       	mov	r11,1
80004d0c:	fe 7c 24 00 	mov	r12,-56320
80004d10:	e0 a0 0c f4 	rcall	800066f8 <spi_selectChip>
  spi_write(SPI, 0xffff);
80004d14:	e0 6b ff ff 	mov	r11,65535
80004d18:	fe 7c 24 00 	mov	r12,-56320
80004d1c:	e0 a0 0d 7d 	rcall	80006816 <spi_write>
  spi_unselectChip(SPI, ADC_SPI);
80004d20:	30 1b       	mov	r11,1
80004d22:	fe 7c 24 00 	mov	r12,-56320
80004d26:	e0 a0 0d 11 	rcall	80006748 <spi_unselectChip>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004d2a:	e1 b7 00 42 	mfsr	r7,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004d2e:	ee 78 42 40 	mov	r8,1000000
80004d32:	30 09       	mov	r9,0
80004d34:	e0 6a e5 3f 	mov	r10,58687
80004d38:	ea 1a 11 f0 	orh	r10,0x11f0
80004d3c:	30 0b       	mov	r11,0
80004d3e:	e0 a0 1c 1d 	rcall	80008578 <__avr32_udiv64>
80004d42:	ee 0a 00 0a 	add	r10,r7,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004d46:	e1 b8 00 42 	mfsr	r8,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004d4a:	14 37       	cp.w	r7,r10
80004d4c:	e0 88 00 05 	brls	80004d56 <init_adc+0x4e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004d50:	0e 38       	cp.w	r8,r7
80004d52:	cf a2       	brcc	80004d46 <init_adc+0x3e>
80004d54:	c0 38       	rjmp	80004d5a <init_adc+0x52>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004d56:	0e 38       	cp.w	r8,r7
80004d58:	c0 43       	brcs	80004d60 <init_adc+0x58>
80004d5a:	14 38       	cp.w	r8,r10
80004d5c:	fe 98 ff f5 	brls	80004d46 <init_adc+0x3e>
  // wait for powerup time (5us in datasheet)
  delay_us(5);
  
  // write base configuration
  cmd = AD7923_CMD_BASE << 4;
  spi_selectChip(SPI, ADC_SPI );
80004d60:	30 1b       	mov	r11,1
80004d62:	fe 7c 24 00 	mov	r12,-56320
80004d66:	e0 a0 0c c9 	rcall	800066f8 <spi_selectChip>
  spi_write(SPI, cmd );
80004d6a:	e0 6b 83 10 	mov	r11,33552
80004d6e:	fe 7c 24 00 	mov	r12,-56320
80004d72:	e0 a0 0d 52 	rcall	80006816 <spi_write>
  spi_unselectChip(SPI, ADC_SPI );
80004d76:	30 1b       	mov	r11,1
80004d78:	fe 7c 24 00 	mov	r12,-56320
80004d7c:	e0 a0 0c e6 	rcall	80006748 <spi_unselectChip>

}
80004d80:	d8 22       	popm	r4-r7,pc
80004d82:	d7 03       	nop

80004d84 <adc_convert>:
80004d84:	d4 21       	pushm	r4-r7,lr
80004d86:	20 1d       	sub	sp,4
80004d88:	30 1b       	mov	r11,1
80004d8a:	18 97       	mov	r7,r12
80004d8c:	fe 7c 24 00 	mov	r12,-56320
80004d90:	e0 a0 0c b4 	rcall	800066f8 <spi_selectChip>

  // data into AD7923 is a left-justified 12-bit value in a 16-bit word
  // so, always lshift the command before sending
  cmd = ( AD7923_CMD_BASE ) << 4;
  spi_selectChip(SPI, ADC_SPI);
  spi_write(SPI, cmd);
80004d94:	e0 6b 83 10 	mov	r11,33552
80004d98:	fe 7c 24 00 	mov	r12,-56320
80004d9c:	e0 a0 0d 3d 	rcall	80006816 <spi_write>
  spi_unselectChip(SPI, ADC_SPI);
80004da0:	30 1b       	mov	r11,1
80004da2:	fe 7c 24 00 	mov	r12,-56320
80004da6:	e0 a0 0c d1 	rcall	80006748 <spi_unselectChip>

  // get channel 0, setup channel 1
  cmd = ( AD7923_CMD_BASE | AD7923_CTL_ADD0 ) << 4;
  spi_selectChip(SPI, ADC_SPI);
80004daa:	30 1b       	mov	r11,1
80004dac:	fe 7c 24 00 	mov	r12,-56320
80004db0:	e0 a0 0c a4 	rcall	800066f8 <spi_selectChip>
  spi_write(SPI, cmd);
80004db4:	e0 6b 87 10 	mov	r11,34576
80004db8:	fe 7c 24 00 	mov	r12,-56320
80004dbc:	e0 a0 0d 2d 	rcall	80006816 <spi_write>
  spi_read(SPI, &val);
80004dc0:	fa c6 ff fe 	sub	r6,sp,-2
80004dc4:	fe 7c 24 00 	mov	r12,-56320
80004dc8:	0c 9b       	mov	r11,r6
80004dca:	e0 a0 0d 34 	rcall	80006832 <spi_read>
  spi_unselectChip(SPI, ADC_SPI);
80004dce:	30 1b       	mov	r11,1
80004dd0:	fe 7c 24 00 	mov	r12,-56320
80004dd4:	e0 a0 0c ba 	rcall	80006748 <spi_unselectChip>
  (*dst)[0] = val & 0xfff; 
80004dd8:	9a 18       	ld.sh	r8,sp[0x2]
80004dda:	f1 d8 c0 0c 	bfextu	r8,r8,0x0,0xc

  // get channel 1, setup channel 2
  cmd = ( AD7923_CMD_BASE | AD7923_CTL_ADD1 ) << 4;
  spi_selectChip(SPI, ADC_SPI);
80004dde:	30 1b       	mov	r11,1
  cmd = ( AD7923_CMD_BASE | AD7923_CTL_ADD0 ) << 4;
  spi_selectChip(SPI, ADC_SPI);
  spi_write(SPI, cmd);
  spi_read(SPI, &val);
  spi_unselectChip(SPI, ADC_SPI);
  (*dst)[0] = val & 0xfff; 
80004de0:	ae 08       	st.h	r7[0x0],r8

  // get channel 1, setup channel 2
  cmd = ( AD7923_CMD_BASE | AD7923_CTL_ADD1 ) << 4;
  spi_selectChip(SPI, ADC_SPI);
80004de2:	fe 7c 24 00 	mov	r12,-56320
80004de6:	e0 a0 0c 89 	rcall	800066f8 <spi_selectChip>
  spi_write(SPI, cmd);
80004dea:	e0 6b 8b 10 	mov	r11,35600
80004dee:	fe 7c 24 00 	mov	r12,-56320
80004df2:	e0 a0 0d 12 	rcall	80006816 <spi_write>
  spi_read(SPI, &val);
80004df6:	0c 9b       	mov	r11,r6
80004df8:	fe 7c 24 00 	mov	r12,-56320
80004dfc:	e0 a0 0d 1b 	rcall	80006832 <spi_read>
  spi_unselectChip(SPI, ADC_SPI);
80004e00:	30 1b       	mov	r11,1
80004e02:	fe 7c 24 00 	mov	r12,-56320
80004e06:	e0 a0 0c a1 	rcall	80006748 <spi_unselectChip>
  (*dst)[1] = val & 0xfff;
80004e0a:	9a 18       	ld.sh	r8,sp[0x2]
80004e0c:	f1 d8 c0 0c 	bfextu	r8,r8,0x0,0xc

  // get channel 2, setup channel 3
  cmd = ( AD7923_CMD_BASE | AD7923_CTL_ADD1 | AD7923_CTL_ADD0 ) << 4;
  spi_selectChip(SPI, ADC_SPI);
80004e10:	30 1b       	mov	r11,1
  cmd = ( AD7923_CMD_BASE | AD7923_CTL_ADD1 ) << 4;
  spi_selectChip(SPI, ADC_SPI);
  spi_write(SPI, cmd);
  spi_read(SPI, &val);
  spi_unselectChip(SPI, ADC_SPI);
  (*dst)[1] = val & 0xfff;
80004e12:	ae 18       	st.h	r7[0x2],r8

  // get channel 2, setup channel 3
  cmd = ( AD7923_CMD_BASE | AD7923_CTL_ADD1 | AD7923_CTL_ADD0 ) << 4;
  spi_selectChip(SPI, ADC_SPI);
80004e14:	fe 7c 24 00 	mov	r12,-56320
80004e18:	e0 a0 0c 70 	rcall	800066f8 <spi_selectChip>
  spi_write(SPI, cmd);
80004e1c:	e0 6b 8f 10 	mov	r11,36624
80004e20:	fe 7c 24 00 	mov	r12,-56320
80004e24:	e0 a0 0c f9 	rcall	80006816 <spi_write>
  spi_read(SPI, &val);
80004e28:	0c 9b       	mov	r11,r6
80004e2a:	fe 7c 24 00 	mov	r12,-56320
80004e2e:	e0 a0 0d 02 	rcall	80006832 <spi_read>
  spi_unselectChip(SPI, ADC_SPI);
80004e32:	30 1b       	mov	r11,1
80004e34:	fe 7c 24 00 	mov	r12,-56320
80004e38:	e0 a0 0c 88 	rcall	80006748 <spi_unselectChip>
  (*dst)[2] = val & 0xfff;
80004e3c:	9a 18       	ld.sh	r8,sp[0x2]
80004e3e:	f1 d8 c0 0c 	bfextu	r8,r8,0x0,0xc

  // get channel 3, dummy write
  cmd = ( AD7923_CMD_BASE ) << 4;
  spi_selectChip(SPI, ADC_SPI);
80004e42:	30 1b       	mov	r11,1
  cmd = ( AD7923_CMD_BASE | AD7923_CTL_ADD1 | AD7923_CTL_ADD0 ) << 4;
  spi_selectChip(SPI, ADC_SPI);
  spi_write(SPI, cmd);
  spi_read(SPI, &val);
  spi_unselectChip(SPI, ADC_SPI);
  (*dst)[2] = val & 0xfff;
80004e44:	ae 28       	st.h	r7[0x4],r8

  // get channel 3, dummy write
  cmd = ( AD7923_CMD_BASE ) << 4;
  spi_selectChip(SPI, ADC_SPI);
80004e46:	fe 7c 24 00 	mov	r12,-56320
80004e4a:	e0 a0 0c 57 	rcall	800066f8 <spi_selectChip>
  spi_write(SPI, cmd);
80004e4e:	e0 6b 83 10 	mov	r11,33552
80004e52:	fe 7c 24 00 	mov	r12,-56320
80004e56:	e0 a0 0c e0 	rcall	80006816 <spi_write>
  spi_read(SPI, &val);
80004e5a:	0c 9b       	mov	r11,r6
80004e5c:	fe 7c 24 00 	mov	r12,-56320
80004e60:	e0 a0 0c e9 	rcall	80006832 <spi_read>
  spi_unselectChip(SPI, ADC_SPI);
80004e64:	30 1b       	mov	r11,1
80004e66:	fe 7c 24 00 	mov	r12,-56320
80004e6a:	e0 a0 0c 6f 	rcall	80006748 <spi_unselectChip>
  (*dst)[3] = val & 0xfff;
80004e6e:	9a 18       	ld.sh	r8,sp[0x2]
80004e70:	f1 d8 c0 0c 	bfextu	r8,r8,0x0,0xc
80004e74:	ae 38       	st.h	r7[0x6],r8

}
80004e76:	2f fd       	sub	sp,-4
80004e78:	d8 22       	popm	r4-r7,pc
80004e7a:	d7 03       	nop

80004e7c <init_events>:
// initializes (or re-initializes)  the system event queue.
 void init_events( void ) {
  int k;
  
  // set queue (circular list) to empty
  putIdx = 0;
80004e7c:	e0 6a 06 48 	mov	r10,1608
80004e80:	30 08       	mov	r8,0
  getIdx = 0;
80004e82:	95 08       	st.w	r10[0x0],r8

  // zero out the event records
  for ( k = 0; k < MAX_EVENTS; k++ ) {
    sysEvents[ k ].type = 0;
80004e84:	e0 6a 06 4c 	mov	r10,1612
 void init_events( void ) {
  int k;
  
  // set queue (circular list) to empty
  putIdx = 0;
  getIdx = 0;
80004e88:	10 99       	mov	r9,r8

// The system event queue is a circular array of event records.
 static event_t sysEvents[ MAX_EVENTS ];

// initializes (or re-initializes)  the system event queue.
 void init_events( void ) {
80004e8a:	95 08       	st.w	r10[0x0],r8
80004e8c:	e0 68 06 50 	mov	r8,1616
  getIdx = 0;

  // zero out the event records
  for ( k = 0; k < MAX_EVENTS; k++ ) {
    sysEvents[ k ].type = 0;
    sysEvents[ k ].data = 0;
80004e90:	f0 ca ff 00 	sub	r10,r8,-256
  // set queue (circular list) to empty
  putIdx = 0;
  getIdx = 0;

  // zero out the event records
  for ( k = 0; k < MAX_EVENTS; k++ ) {
80004e94:	91 09       	st.w	r8[0x0],r9
80004e96:	91 19       	st.w	r8[0x4],r9
    sysEvents[ k ].type = 0;
    sysEvents[ k ].data = 0;
  }
}
80004e98:	2f 88       	sub	r8,-8
80004e9a:	14 38       	cp.w	r8,r10
80004e9c:	cf c1       	brne	80004e94 <init_events+0x18>
80004e9e:	5e fc       	retal	r12

80004ea0 <event_post>:
80004ea0:	d4 01       	pushm	lr
80004ea2:	d3 43       	ssrf	0x14
80004ea4:	e0 68 06 48 	mov	r8,1608

  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);
  
  // increment write idx, posbily wrapping
  saveIndex = putIdx;
  INCR_EVENT_INDEX( putIdx );
80004ea8:	70 0a       	ld.w	r10,r8[0x0]
80004eaa:	f4 c9 ff ff 	sub	r9,r10,-1
80004eae:	91 09       	st.w	r8[0x0],r9
80004eb0:	e0 49 00 20 	cp.w	r9,32
80004eb4:	c0 31       	brne	80004eba <event_post+0x1a>
80004eb6:	30 09       	mov	r9,0
  if ( putIdx != getIdx  ) {
80004eb8:	91 09       	st.w	r8[0x0],r9
80004eba:	e0 68 06 4c 	mov	r8,1612
80004ebe:	e0 69 06 48 	mov	r9,1608
80004ec2:	70 0b       	ld.w	r11,r8[0x0]
    sysEvents[ putIdx ].type = e->type;
80004ec4:	72 08       	ld.w	r8,r9[0x0]
80004ec6:	16 38       	cp.w	r8,r11
80004ec8:	c0 c0       	breq	80004ee0 <event_post+0x40>
80004eca:	e0 69 06 50 	mov	r9,1616
    sysEvents[ putIdx ].data = e->data;
80004ece:	78 0a       	ld.w	r10,r12[0x0]
80004ed0:	f2 08 09 3a 	st.w	r9[r8<<0x3],r10
80004ed4:	f2 08 00 38 	add	r8,r9,r8<<0x3
    status = true;
  } else {
    // idx wrapped, so queue is full, restore idx
    putIdx = saveIndex;
    print_dbg("\r\n event queue full!");
80004ed8:	78 19       	ld.w	r9,r12[0x4]
    sysEvents[ putIdx ].type = e->type;
    sysEvents[ putIdx ].data = e->data;
    status = true;
  } else {
    // idx wrapped, so queue is full, restore idx
    putIdx = saveIndex;
80004eda:	30 1c       	mov	r12,1
    print_dbg("\r\n event queue full!");
80004edc:	91 19       	st.w	r8[0x4],r9
80004ede:	c0 78       	rjmp	80004eec <event_post+0x4c>
80004ee0:	fe cc b5 54 	sub	r12,pc,-19116
  } 

  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
  return status;
80004ee4:	93 0a       	st.w	r9[0x0],r10
80004ee6:	e0 a0 17 9b 	rcall	80007e1c <print_dbg>
80004eea:	30 0c       	mov	r12,0
80004eec:	d5 43       	csrf	0x14
80004eee:	d8 02       	popm	pc

80004ef0 <event_next>:
80004ef0:	18 98       	mov	r8,r12
80004ef2:	d3 43       	ssrf	0x14
80004ef4:	e0 6a 06 48 	mov	r10,1608
80004ef8:	e0 69 06 4c 	mov	r9,1612
u8 event_next( event_t *e ) {
  u8 status;
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);
  
  // if pointers are equal, the queue is empty... don't allow idx's to wrap!
  if ( getIdx != putIdx ) {
80004efc:	74 0b       	ld.w	r11,r10[0x0]
80004efe:	72 0a       	ld.w	r10,r9[0x0]
    INCR_EVENT_INDEX( getIdx );
80004f00:	16 3a       	cp.w	r10,r11
80004f02:	c1 60       	breq	80004f2e <event_next+0x3e>
80004f04:	2f fa       	sub	r10,-1
80004f06:	93 0a       	st.w	r9[0x0],r10
80004f08:	e0 4a 00 20 	cp.w	r10,32
80004f0c:	c0 31       	brne	80004f12 <event_next+0x22>
    e->type = sysEvents[ getIdx ].type;
80004f0e:	30 0a       	mov	r10,0
80004f10:	93 0a       	st.w	r9[0x0],r10
80004f12:	e0 69 06 50 	mov	r9,1616
    e->data = sysEvents[ getIdx ].data;
80004f16:	e0 6a 06 4c 	mov	r10,1612
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);
  
  // if pointers are equal, the queue is empty... don't allow idx's to wrap!
  if ( getIdx != putIdx ) {
    INCR_EVENT_INDEX( getIdx );
    e->type = sysEvents[ getIdx ].type;
80004f1a:	74 0a       	ld.w	r10,r10[0x0]
    e->data = sysEvents[ getIdx ].data;
80004f1c:	f2 0a 00 3b 	add	r11,r9,r10<<0x3
80004f20:	f2 0a 03 39 	ld.w	r9,r9[r10<<0x3]
80004f24:	30 1c       	mov	r12,1
    status = true;
  } else {
    e->type  = 0xff;
    e->data = 0;
80004f26:	91 09       	st.w	r8[0x0],r9
    INCR_EVENT_INDEX( getIdx );
    e->type = sysEvents[ getIdx ].type;
    e->data = sysEvents[ getIdx ].data;
    status = true;
  } else {
    e->type  = 0xff;
80004f28:	76 19       	ld.w	r9,r11[0x4]
80004f2a:	91 19       	st.w	r8[0x4],r9
    e->data = 0;
80004f2c:	c0 68       	rjmp	80004f38 <event_next+0x48>
    INCR_EVENT_INDEX( getIdx );
    e->type = sysEvents[ getIdx ].type;
    e->data = sysEvents[ getIdx ].data;
    status = true;
  } else {
    e->type  = 0xff;
80004f2e:	30 0c       	mov	r12,0
    e->data = 0;
    status = false;
  }

  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
80004f30:	e0 69 00 ff 	mov	r9,255
  return status;
}
80004f34:	91 1c       	st.w	r8[0x4],r12
80004f36:	91 09       	st.w	r8[0x0],r9
80004f38:	d5 43       	csrf	0x14
80004f3a:	5e fc       	retal	r12

80004f3c <init_usb_host>:
  gpio_enable_module(TWI_GPIO_MAP, sizeof(TWI_GPIO_MAP) / sizeof(TWI_GPIO_MAP[0]));
}
*/

// initialize USB host stack
void init_usb_host (void) {
80004f3c:	d4 01       	pushm	lr
  uhc_start();
80004f3e:	e0 a0 17 ed 	rcall	80007f18 <uhc_start>
}
80004f42:	d8 02       	popm	pc

80004f44 <init_spi>:
80004f44:	d4 21       	pushm	r4-r7,lr
80004f46:	20 4d       	sub	sp,16
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80004f48:	30 5b       	mov	r11,5
80004f4a:	30 2c       	mov	r12,2
80004f4c:	e0 a0 1a 7c 	rcall	80008444 <sysclk_priv_enable_module>
    {SPI_NPCS0_PIN,  SPI_NPCS0_FUNCTION },
    {SPI_NPCS1_PIN,  SPI_NPCS1_FUNCTION },
  };

  // Assign GPIO to SPI.
  gpio_enable_module(SPI_GPIO_MAP, sizeof(SPI_GPIO_MAP) / sizeof(SPI_GPIO_MAP[0]));
80004f50:	30 5b       	mov	r11,5
80004f52:	fe cc b5 92 	sub	r12,pc,-19054
80004f56:	e0 a0 0a a3 	rcall	8000649c <gpio_enable_module>
    .trans_delay = 0,
    .spck_delay = 0,
    .stay_act = 1,
    .spi_mode = 1,
    .modfdis = 1
  };
80004f5a:	fe c8 b5 aa 	sub	r8,pc,-19030
80004f5e:	f0 ea 00 08 	ld.d	r10,r8[8]
80004f62:	fa eb 00 08 	st.d	sp[8],r10
80004f66:	f0 e8 00 00 	ld.d	r8,r8[0]
80004f6a:	1a 97       	mov	r7,sp


  // Initialize as master.
  spi_initMaster(SPI, &spiOptions);
80004f6c:	fa e9 00 00 	st.d	sp[0],r8
80004f70:	1a 9b       	mov	r11,sp
80004f72:	fe 7c 24 00 	mov	r12,-56320
  // Set SPI selection mode: variable_ps, pcs_decode, delay.
  spi_selectionMode(SPI, 0, 0, 0);
80004f76:	e0 a0 0b 8d 	rcall	80006690 <spi_initMaster>
80004f7a:	30 09       	mov	r9,0
80004f7c:	fe 7c 24 00 	mov	r12,-56320
80004f80:	12 9a       	mov	r10,r9
80004f82:	12 9b       	mov	r11,r9
  // Enable SPI module.
  spi_enable(SPI);
80004f84:	e0 a0 0b a5 	rcall	800066ce <spi_selectionMode>
80004f88:	fe 7c 24 00 	mov	r12,-56320

  // spi_setupChipReg( SPI, &spiOptions, FPBA_HZ );
  spi_setupChipReg(SPI, &spiOptions, sysclk_get_pba_hz() );
80004f8c:	e0 a0 0c 42 	rcall	80006810 <spi_enable>
80004f90:	e0 66 87 00 	mov	r6,34560
80004f94:	ea 16 03 93 	orh	r6,0x393
80004f98:	1a 9b       	mov	r11,sp
80004f9a:	0c 9a       	mov	r10,r6
80004f9c:	fe 7c 24 00 	mov	r12,-56320
  // add ADC chip register
  spiOptions.reg          = ADC_SPI;
  spiOptions.baudrate     = 20000000;
  spiOptions.bits         = 16;
  spiOptions.spi_mode     = 2;
  spiOptions.spck_delay   = 0;
80004fa0:	e0 a0 0b e8 	rcall	80006770 <spi_setupChipReg>
  spiOptions.trans_delay  = 5;
  spiOptions.stay_act     = 0;
  spiOptions.modfdis      = 0;
80004fa4:	30 08       	mov	r8,0
  // add ADC chip register
  spiOptions.reg          = ADC_SPI;
  spiOptions.baudrate     = 20000000;
  spiOptions.bits         = 16;
  spiOptions.spi_mode     = 2;
  spiOptions.spck_delay   = 0;
80004fa6:	fb 68 00 0d 	st.b	sp[13],r8
  spiOptions.trans_delay  = 5;
  spiOptions.stay_act     = 0;
80004faa:	fb 68 00 09 	st.b	sp[9],r8
  // spi_setupChipReg( SPI, &spiOptions, FPBA_HZ );
  spi_setupChipReg(SPI, &spiOptions, sysclk_get_pba_hz() );


  // add ADC chip register
  spiOptions.reg          = ADC_SPI;
80004fae:	fb 68 00 0b 	st.b	sp[11],r8
  spiOptions.baudrate     = 20000000;
80004fb2:	30 18       	mov	r8,1
80004fb4:	ba 88       	st.b	sp[0x0],r8
80004fb6:	e0 68 2d 00 	mov	r8,11520
80004fba:	ea 18 01 31 	orh	r8,0x131
  spiOptions.bits         = 16;
80004fbe:	50 18       	stdsp	sp[0x4],r8
80004fc0:	31 08       	mov	r8,16
  spiOptions.spi_mode     = 2;
80004fc2:	fb 68 00 08 	st.b	sp[8],r8
80004fc6:	30 28       	mov	r8,2
  spiOptions.spck_delay   = 0;
  spiOptions.trans_delay  = 5;
80004fc8:	fb 68 00 0c 	st.b	sp[12],r8
  spiOptions.stay_act     = 0;
  spiOptions.modfdis      = 0;

  spi_setupChipReg( SPI, &spiOptions, FPBA_HZ );
80004fcc:	30 58       	mov	r8,5
  spiOptions.reg          = ADC_SPI;
  spiOptions.baudrate     = 20000000;
  spiOptions.bits         = 16;
  spiOptions.spi_mode     = 2;
  spiOptions.spck_delay   = 0;
  spiOptions.trans_delay  = 5;
80004fce:	0c 9a       	mov	r10,r6
80004fd0:	1a 9b       	mov	r11,sp
  spiOptions.stay_act     = 0;
  spiOptions.modfdis      = 0;

  spi_setupChipReg( SPI, &spiOptions, FPBA_HZ );
80004fd2:	fb 68 00 0a 	st.b	sp[10],r8
80004fd6:	fe 7c 24 00 	mov	r12,-56320

  // spi_enable(SPI);
 }
80004fda:	e0 a0 0b cb 	rcall	80006770 <spi_setupChipReg>
80004fde:	2f cd       	sub	sp,-16
80004fe0:	d8 22       	popm	r4-r7,pc
80004fe2:	d7 03       	nop

80004fe4 <init_tc>:
80004fe4:	d4 01       	pushm	lr
80004fe6:	fe cb b6 3e 	sub	r11,pc,-18882
80004fea:	fe 7c 38 00 	mov	r12,-51200
80004fee:	e0 a0 0c 33 	rcall	80006854 <tc_init_waveform>
80004ff2:	e0 6a 01 d4 	mov	r10,468
80004ff6:	30 0b       	mov	r11,0
80004ff8:	fe 7c 38 00 	mov	r12,-51200
80004ffc:	e0 a0 0c 8e 	rcall	80006918 <tc_write_rc>
  // so RC = fPBA / 128 / 1000
  //  tc_write_rc(tc, APP_TC_CHANNEL, (FPBA_HZ / 128000));
  tc_write_rc(tc, APP_TC_CHANNEL, (FPBA_HZ / 128000));

  // configure the timer interrupt
  tc_configure_interrupts(tc, APP_TC_CHANNEL, &tc_interrupt);
80005000:	30 0b       	mov	r11,0
80005002:	fe ca b6 5e 	sub	r10,pc,-18850
80005006:	fe 7c 38 00 	mov	r12,-51200
  // Start the timer/counter.
  tc_start(tc, APP_TC_CHANNEL);
8000500a:	e0 a0 0c a1 	rcall	8000694c <tc_configure_interrupts>
8000500e:	30 0b       	mov	r11,0
80005010:	fe 7c 38 00 	mov	r12,-51200
}
80005014:	e0 a0 0c 70 	rcall	800068f4 <tc_start>
80005018:	d8 02       	popm	pc
8000501a:	d7 03       	nop

8000501c <init_gpio>:
8000501c:	d4 01       	pushm	lr
8000501e:	32 0c       	mov	r12,32
80005020:	e0 a0 0a 4e 	rcall	800064bc <gpio_enable_gpio_pin>
80005024:	32 1c       	mov	r12,33
80005026:	e0 a0 0a 4b 	rcall	800064bc <gpio_enable_gpio_pin>
8000502a:	32 2c       	mov	r12,34
8000502c:	e0 a0 0a 48 	rcall	800064bc <gpio_enable_gpio_pin>

extern void init_gpio(void) {
    gpio_enable_gpio_pin(B00);
    gpio_enable_gpio_pin(B01);
    gpio_enable_gpio_pin(B02);
    gpio_enable_gpio_pin(B03);
80005030:	32 3c       	mov	r12,35
80005032:	e0 a0 0a 45 	rcall	800064bc <gpio_enable_gpio_pin>
    gpio_enable_gpio_pin(B04);
80005036:	32 4c       	mov	r12,36
80005038:	e0 a0 0a 42 	rcall	800064bc <gpio_enable_gpio_pin>
    gpio_enable_gpio_pin(B05);
8000503c:	32 5c       	mov	r12,37
8000503e:	e0 a0 0a 3f 	rcall	800064bc <gpio_enable_gpio_pin>
    gpio_enable_gpio_pin(B06);
80005042:	32 6c       	mov	r12,38
80005044:	e0 a0 0a 3c 	rcall	800064bc <gpio_enable_gpio_pin>
    gpio_enable_gpio_pin(B07);
80005048:	32 7c       	mov	r12,39
8000504a:	e0 a0 0a 39 	rcall	800064bc <gpio_enable_gpio_pin>
    gpio_enable_gpio_pin(B08);
8000504e:	32 8c       	mov	r12,40
80005050:	e0 a0 0a 36 	rcall	800064bc <gpio_enable_gpio_pin>
    gpio_enable_gpio_pin(B09);
80005054:	32 9c       	mov	r12,41
80005056:	e0 a0 0a 33 	rcall	800064bc <gpio_enable_gpio_pin>
    gpio_enable_gpio_pin(B10);
8000505a:	32 ac       	mov	r12,42
8000505c:	e0 a0 0a 30 	rcall	800064bc <gpio_enable_gpio_pin>
    gpio_enable_gpio_pin(NMI);
80005060:	30 dc       	mov	r12,13
80005062:	e0 a0 0a 2d 	rcall	800064bc <gpio_enable_gpio_pin>
}
80005066:	d8 02       	popm	pc

80005068 <clock_null>:
#include "timers.h"
#include "types.h"

//#define UI_IRQ_PRIORITY AVR32_INTC_INT2

void clock_null(u8 phase) {;;}
80005068:	5e fc       	retal	r12
8000506a:	d7 03       	nop

8000506c <register_interrupts>:

//-----------------------------
//---- external function definitions

// register interrupts
void register_interrupts(void) {
8000506c:	d4 01       	pushm	lr
  // enable interrupts on GPIO inputs
  gpio_enable_pin_interrupt( NMI, GPIO_PIN_CHANGE);
8000506e:	30 0b       	mov	r11,0
80005070:	30 dc       	mov	r12,13
80005072:	e0 a0 0a 55 	rcall	8000651c <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( B08, GPIO_PIN_CHANGE);
80005076:	30 0b       	mov	r11,0
80005078:	32 8c       	mov	r12,40
8000507a:	e0 a0 0a 51 	rcall	8000651c <gpio_enable_pin_interrupt>
  gpio_enable_pin_interrupt( B09,	GPIO_PIN_CHANGE);
8000507e:	30 0b       	mov	r11,0
80005080:	32 9c       	mov	r12,41
80005082:	e0 a0 0a 4d 	rcall	8000651c <gpio_enable_pin_interrupt>


  // PA08 - PA15
  INTC_register_interrupt( &irq_port0_line1, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PA08 / 8), UI_IRQ_PRIORITY);
80005086:	30 2a       	mov	r10,2
80005088:	34 1b       	mov	r11,65
8000508a:	fe cc ff 2a 	sub	r12,pc,-214
8000508e:	e0 a0 0a 7f 	rcall	8000658c <INTC_register_interrupt>

  // PB08 - PB15
  INTC_register_interrupt( &irq_port1_line1, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PB08 / 8), UI_IRQ_PRIORITY);
80005092:	30 2a       	mov	r10,2
80005094:	34 5b       	mov	r11,69
80005096:	fe cc ff 8a 	sub	r12,pc,-118

  // register TC interrupt
  INTC_register_interrupt(&irq_tc, APP_TC_IRQ, UI_IRQ_PRIORITY);
8000509a:	e0 a0 0a 79 	rcall	8000658c <INTC_register_interrupt>
8000509e:	30 2a       	mov	r10,2
800050a0:	e0 6b 01 c0 	mov	r11,448
800050a4:	fe cc ff f4 	sub	r12,pc,-12

  // register uart interrupt
  // INTC_register_interrupt(&irq_usart, AVR32_USART0_IRQ, UI_IRQ_PRIORITY);
}
800050a8:	e0 a0 0a 72 	rcall	8000658c <INTC_register_interrupt>
800050ac:	d8 02       	popm	pc
800050ae:	d7 03       	nop

800050b0 <irq_tc>:
800050b0:	eb cd 40 c0 	pushm	r6-r7,lr
800050b4:	e0 68 07 5c 	mov	r8,1884
800050b8:	30 1a       	mov	r10,1
800050ba:	f0 e6 00 00 	ld.d	r6,r8[0]


// timer irq
__attribute__((__interrupt__))
static void irq_tc(void) {
  tcTicks++;
800050be:	30 0b       	mov	r11,0
800050c0:	ec 0a 00 0a 	add	r10,r6,r10
800050c4:	ee 0b 00 4b 	adc	r11,r7,r11
800050c8:	f0 eb 00 00 	st.d	r8[0],r10
  // overflow control
  if(tcTicks > tcMax) { 
800050cc:	e0 69 07 58 	mov	r9,1880
800050d0:	f0 ea 00 00 	ld.d	r10,r8[0]
800050d4:	e0 66 ff ff 	mov	r6,65535
800050d8:	ea 16 7f ff 	orh	r6,0x7fff
800050dc:	30 07       	mov	r7,0
800050de:	0c 3a       	cp.w	r10,r6
800050e0:	ee 0b 13 00 	cpc	r11,r7
    tcTicks = 0;
800050e4:	e0 88 00 08 	brls	800050f4 <irq_tc+0x44>
800050e8:	30 0a       	mov	r10,0
800050ea:	30 0b       	mov	r11,0
    tcOverflow = 1;
800050ec:	f0 eb 00 00 	st.d	r8[0],r10
  } else {
    tcOverflow = 0;
800050f0:	30 18       	mov	r8,1
800050f2:	c0 28       	rjmp	800050f6 <irq_tc+0x46>
  }
  process_timers();
800050f4:	30 08       	mov	r8,0
800050f6:	b2 88       	st.b	r9[0x0],r8
  // clear interrupt flag by reading timer SR
  tc_read_sr(APP_TC, APP_TC_CHANNEL);
800050f8:	e0 a0 04 fa 	rcall	80005aec <process_timers>
800050fc:	30 0b       	mov	r11,0
800050fe:	fe 7c 38 00 	mov	r12,-51200
}
80005102:	e0 a0 0c 02 	rcall	80006906 <tc_read_sr>
80005106:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
8000510a:	d6 03       	rete

8000510c <irq_port1_line1>:
8000510c:	eb cd 40 80 	pushm	r7,lr
80005110:	32 9c       	mov	r12,41
80005112:	e0 a0 0a 26 	rcall	8000655e <gpio_get_pin_interrupt_flag>
80005116:	c0 c0       	breq	8000512e <irq_port1_line1+0x22>
    // e.data = gpio_get_pin_value(kSwitchPins[swIdx]); 
    // event_post(&e);

    // clock norm
    if(gpio_get_pin_interrupt_flag(B09)) {
      clock_external = !gpio_get_pin_value(B09); 
80005118:	32 9c       	mov	r12,41
8000511a:	e0 a0 09 dc 	rcall	800064d2 <gpio_get_pin_value>
8000511e:	e0 68 1a cc 	mov	r8,6860
80005122:	ec 1c 00 01 	eorl	r12,0x1

      gpio_clear_pin_interrupt_flag(B09);
80005126:	b0 8c       	st.b	r8[0x0],r12
80005128:	32 9c       	mov	r12,41
8000512a:	e0 a0 0a 26 	rcall	80006576 <gpio_clear_pin_interrupt_flag>
    }

    // clock in
    if(gpio_get_pin_interrupt_flag(B08)) {
8000512e:	32 8c       	mov	r12,40
80005130:	e0 a0 0a 17 	rcall	8000655e <gpio_get_pin_interrupt_flag>
      // CLOCK BOUNCY WITHOUT THESE PRINTS
      print_dbg("\rclk: ");
80005134:	c1 30       	breq	8000515a <irq_port1_line1+0x4e>
80005136:	fe cc b7 4e 	sub	r12,pc,-18610
      print_dbg_ulong(gpio_get_pin_value(B08));
8000513a:	e0 a0 16 71 	rcall	80007e1c <print_dbg>
8000513e:	32 8c       	mov	r12,40
80005140:	e0 a0 09 c9 	rcall	800064d2 <gpio_get_pin_value>
      (*clock_pulse)(gpio_get_pin_value(B08));
80005144:	e0 a0 16 66 	rcall	80007e10 <print_dbg_ulong>
80005148:	31 c8       	mov	r8,28
8000514a:	32 8c       	mov	r12,40
8000514c:	70 07       	ld.w	r7,r8[0x0]
8000514e:	e0 a0 09 c2 	rcall	800064d2 <gpio_get_pin_value>
      gpio_clear_pin_interrupt_flag(B08);
80005152:	5d 17       	icall	r7
80005154:	32 8c       	mov	r12,40
    }
}
80005156:	e0 a0 0a 10 	rcall	80006576 <gpio_clear_pin_interrupt_flag>
8000515a:	e3 cd 40 80 	ldm	sp++,r7,lr
8000515e:	d6 03       	rete

80005160 <irq_port0_line1>:
80005160:	eb cd 40 80 	pushm	r7,lr
80005164:	30 dc       	mov	r12,13
80005166:	e0 a0 09 fc 	rcall	8000655e <gpio_get_pin_interrupt_flag>
8000516a:	c0 e0       	breq	80005186 <irq_port0_line1+0x26>
8000516c:	30 dc       	mov	r12,13
8000516e:	e0 a0 0a 04 	rcall	80006576 <gpio_clear_pin_interrupt_flag>
80005172:	30 18       	mov	r8,1
80005174:	e0 67 07 50 	mov	r7,1872
80005178:	30 dc       	mov	r12,13
8000517a:	8f 08       	st.w	r7[0x0],r8
    if(gpio_get_pin_interrupt_flag(NMI)) {
      gpio_clear_pin_interrupt_flag(NMI);
      // print_dbg("\r\n ### NMI ### ");
      static event_t e;
      e.type = kEventFront;
      e.data = gpio_get_pin_value(NMI);
8000517c:	e0 a0 09 ab 	rcall	800064d2 <gpio_get_pin_value>
      event_post(&e);
80005180:	8f 1c       	st.w	r7[0x4],r12
80005182:	0e 9c       	mov	r12,r7
80005184:	c8 ee       	rcall	80004ea0 <event_post>
    }
}
80005186:	e3 cd 40 80 	ldm	sp++,r7,lr
8000518a:	d6 03       	rete

8000518c <read_serial_dummy>:
  u8 vari; // is variable brightness, true/false
} monomeDesc;


//// dummy functions
static void read_serial_dummy(void) { return; }
8000518c:	5e fc       	retal	r12
8000518e:	d7 03       	nop

80005190 <init_monome>:

//================================================
//----- extern function definitions

// init
void init_monome(void) {
80005190:	e0 68 1a dc 	mov	r8,6876
80005194:	30 0a       	mov	r10,0
80005196:	f0 c9 ff 00 	sub	r9,r8,-256
  u32 i;
  for(i=0; i<MONOME_MAX_LED_BYTES; i++) {
8000519a:	10 ca       	st.b	r8++,r10
8000519c:	12 38       	cp.w	r8,r9
    monomeLedBuffer[i] = 0;
  }
  //  print_dbg("\r\n finished monome class init");
}
8000519e:	cf e1       	brne	8000519a <init_monome+0xa>
800051a0:	5e fc       	retal	r12
800051a2:	d7 03       	nop

800051a4 <monome_grid_key_parse_event_data>:

  ev.type = kEventMonomeGridKey;
  event_post(&ev);
}

void monome_grid_key_parse_event_data(u32 data, u8* x, u8* y, u8* val) {
800051a4:	20 1d       	sub	sp,4
  u8* bdata = (u8*)(&data);
  *x = bdata[0];
800051a6:	f8 08 16 18 	lsr	r8,r12,0x18
800051aa:	b6 88       	st.b	r11[0x0],r8
  *y = bdata[1];
800051ac:	f1 dc c2 08 	bfextu	r8,r12,0x10,0x8
800051b0:	b4 88       	st.b	r10[0x0],r8
  *val = bdata[2];
800051b2:	f9 dc c1 08 	bfextu	r12,r12,0x8,0x8
800051b6:	b2 8c       	st.b	r9[0x0],r12
}
800051b8:	2f fd       	sub	sp,-4
800051ba:	5e fc       	retal	r12

800051bc <monome_set_quadrant_flag>:
  /* print_dbg_hex(monomeFrameDirty); */
}

// set given quadrant dirty flag
extern void monome_set_quadrant_flag(u8 q) {
  monomeFrameDirty |= (1 << q);
800051bc:	e0 68 07 69 	mov	r8,1897
800051c0:	30 19       	mov	r9,1
800051c2:	11 8a       	ld.ub	r10,r8[0x0]
800051c4:	f2 0c 09 49 	lsl	r9,r9,r12
800051c8:	14 49       	or	r9,r10
}
800051ca:	b0 89       	st.b	r8[0x0],r9
800051cc:	5e fc       	retal	r12
800051ce:	d7 03       	nop

800051d0 <monome_size_x>:
  monomeLedBuffer[monome_xy_idx(x,y)] ^= 0xff;
  monome_calc_quadrant_flag(x, y);  
}


u8 monome_size_x(void) { return mdesc.cols; }
800051d0:	32 08       	mov	r8,32
800051d2:	f1 3c 00 08 	ld.ub	r12,r8[8]
800051d6:	5e fc       	retal	r12

800051d8 <monome_is_vari>:
800051d8:	32 08       	mov	r8,32
800051da:	f1 3c 00 0c 	ld.ub	r12,r8[12]
u8 monome_size_y(void) {  return mdesc.rows; }
u8 monome_is_vari(void) {  return mdesc.vari; }
800051de:	5e fc       	retal	r12

800051e0 <set_intense_mext>:
800051e0:	5e fc       	retal	r12
800051e2:	d7 03       	nop

800051e4 <monome_grid_refresh>:
  }
  return 0;
}

// check dirty flags and refresh leds
void monome_grid_refresh(void) {
800051e4:	d4 01       	pushm	lr
  // may need to wait after each quad until tx transfer is complete
  u8 busy = ftdi_tx_busy();
800051e6:	e0 a0 05 61 	rcall	80005ca8 <ftdi_tx_busy>

  // check quad 0
  if( monomeFrameDirty & 0b0001 ) {
800051ea:	e0 68 07 69 	mov	r8,1897
800051ee:	11 88       	ld.ub	r8,r8[0x0]
800051f0:	ed b8 00 00 	bld	r8,0x0
800051f4:	c0 40       	breq	800051fc <monome_grid_refresh+0x18>
    while( busy ) { busy = ftdi_tx_busy(); }
800051f6:	c1 38       	rjmp	8000521c <monome_grid_refresh+0x38>
800051f8:	e0 a0 05 58 	rcall	80005ca8 <ftdi_tx_busy>
800051fc:	58 0c       	cp.w	r12,0
    (*monome_grid_map)(0, 0, monomeLedBuffer);
800051fe:	cf d1       	brne	800051f8 <monome_grid_refresh+0x14>
80005200:	18 9b       	mov	r11,r12
80005202:	e0 68 1a d4 	mov	r8,6868
80005206:	e0 6a 1a dc 	mov	r10,6876
    monomeFrameDirty &= 0b1110;
8000520a:	70 08       	ld.w	r8,r8[0x0]
8000520c:	5d 18       	icall	r8
8000520e:	e0 69 07 69 	mov	r9,1897
80005212:	30 1c       	mov	r12,1
    busy = 1;
  }
  // check quad 1
  if( monomeFrameDirty & 0b0010 ) {
80005214:	13 88       	ld.ub	r8,r9[0x0]
80005216:	e2 18 00 0e 	andl	r8,0xe,COH
8000521a:	b2 88       	st.b	r9[0x0],r8
8000521c:	e0 68 07 69 	mov	r8,1897
    if ( mdesc.cols > 7 ) {
80005220:	11 88       	ld.ub	r8,r8[0x0]
80005222:	ed b8 00 01 	bld	r8,0x1
80005226:	c1 e1       	brne	80005262 <monome_grid_refresh+0x7e>
80005228:	32 08       	mov	r8,32
8000522a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000522e:	30 78       	mov	r8,7
      while( busy ) { busy = ftdi_tx_busy(); }
80005230:	f0 09 18 00 	cp.b	r9,r8
80005234:	e0 8b 00 05 	brhi	8000523e <monome_grid_refresh+0x5a>
      (*monome_grid_map)(8, 0, monomeLedBuffer + 8);
80005238:	c1 58       	rjmp	80005262 <monome_grid_refresh+0x7e>
8000523a:	e0 a0 05 37 	rcall	80005ca8 <ftdi_tx_busy>
8000523e:	58 0c       	cp.w	r12,0
80005240:	cf d1       	brne	8000523a <monome_grid_refresh+0x56>
80005242:	18 9b       	mov	r11,r12
80005244:	e0 68 1a d4 	mov	r8,6868
      monomeFrameDirty &= 0b1101;
80005248:	30 8c       	mov	r12,8
8000524a:	70 08       	ld.w	r8,r8[0x0]
8000524c:	e0 6a 1a dc 	mov	r10,6876
80005250:	2f 8a       	sub	r10,-8
      busy = 1;
    }
  }
  // check quad 2
  if( monomeFrameDirty &  0b0100 ) { 
80005252:	5d 18       	icall	r8
80005254:	e0 69 07 69 	mov	r9,1897
80005258:	30 1c       	mov	r12,1
8000525a:	13 88       	ld.ub	r8,r9[0x0]
    if( mdesc.rows > 7 ) {
8000525c:	e2 18 00 0d 	andl	r8,0xd,COH
80005260:	b2 88       	st.b	r9[0x0],r8
80005262:	e0 68 07 69 	mov	r8,1897
80005266:	11 88       	ld.ub	r8,r8[0x0]
80005268:	ed b8 00 02 	bld	r8,0x2
8000526c:	c1 d1       	brne	800052a6 <monome_grid_refresh+0xc2>
      while( busy ) { busy = ftdi_tx_busy(); }
8000526e:	32 08       	mov	r8,32
80005270:	f1 39 00 09 	ld.ub	r9,r8[9]
80005274:	30 78       	mov	r8,7
      (*monome_grid_map)(0, 8, monomeLedBuffer + 128);
80005276:	f0 09 18 00 	cp.b	r9,r8
8000527a:	e0 8b 00 05 	brhi	80005284 <monome_grid_refresh+0xa0>
8000527e:	c1 48       	rjmp	800052a6 <monome_grid_refresh+0xc2>
80005280:	e0 a0 05 14 	rcall	80005ca8 <ftdi_tx_busy>
      monomeFrameDirty &= 0b1011;
80005284:	58 0c       	cp.w	r12,0
80005286:	cf d1       	brne	80005280 <monome_grid_refresh+0x9c>
80005288:	e0 68 1a d4 	mov	r8,6868
8000528c:	e0 6a 1a dc 	mov	r10,6876
      busy = 1;
    }
  }
  // check quad 3
  if( monomeFrameDirty & 0b1000 ) {
80005290:	70 08       	ld.w	r8,r8[0x0]
80005292:	28 0a       	sub	r10,-128
80005294:	30 8b       	mov	r11,8
80005296:	5d 18       	icall	r8
    if( (mdesc.rows > 7) && (mdesc.cols > 7) )  {
80005298:	e0 69 07 69 	mov	r9,1897
8000529c:	30 1c       	mov	r12,1
8000529e:	13 88       	ld.ub	r8,r9[0x0]
800052a0:	e2 18 00 0b 	andl	r8,0xb,COH
800052a4:	b2 88       	st.b	r9[0x0],r8
800052a6:	e0 68 07 69 	mov	r8,1897
800052aa:	11 88       	ld.ub	r8,r8[0x0]
800052ac:	ed b8 00 03 	bld	r8,0x3
800052b0:	c2 81       	brne	80005300 <monome_grid_refresh+0x11c>
800052b2:	32 09       	mov	r9,32
800052b4:	30 78       	mov	r8,7
      while( busy ) { busy = ftdi_tx_busy(); }
800052b6:	f3 3a 00 09 	ld.ub	r10,r9[9]
800052ba:	f0 0a 18 00 	cp.b	r10,r8
      (*monome_grid_map)(8, 8, monomeLedBuffer + 136);
800052be:	e0 88 00 21 	brls	80005300 <monome_grid_refresh+0x11c>
800052c2:	f3 39 00 08 	ld.ub	r9,r9[8]
800052c6:	f0 09 18 00 	cp.b	r9,r8
800052ca:	e0 8b 00 05 	brhi	800052d4 <monome_grid_refresh+0xf0>
      monomeFrameDirty &= 0b0111;
800052ce:	c1 98       	rjmp	80005300 <monome_grid_refresh+0x11c>
800052d0:	e0 a0 04 ec 	rcall	80005ca8 <ftdi_tx_busy>
800052d4:	58 0c       	cp.w	r12,0
800052d6:	cf d1       	brne	800052d0 <monome_grid_refresh+0xec>
800052d8:	30 8b       	mov	r11,8
800052da:	e0 68 1a d4 	mov	r8,6868
      busy = 1;
    }
  }
  while( busy ) { busy = ftdi_tx_busy(); }
800052de:	16 9c       	mov	r12,r11
800052e0:	70 08       	ld.w	r8,r8[0x0]
800052e2:	e0 6a 1a dc 	mov	r10,6876
}
800052e6:	f4 ca ff 78 	sub	r10,r10,-136
800052ea:	5d 18       	icall	r8
800052ec:	e0 68 07 69 	mov	r8,1897
800052f0:	30 1c       	mov	r12,1
800052f2:	11 89       	ld.ub	r9,r8[0x0]
800052f4:	f3 d9 c0 03 	bfextu	r9,r9,0x0,0x3
800052f8:	b0 89       	st.b	r8[0x0],r9
800052fa:	c0 38       	rjmp	80005300 <monome_grid_refresh+0x11c>
800052fc:	e0 a0 04 d6 	rcall	80005ca8 <ftdi_tx_busy>
80005300:	58 0c       	cp.w	r12,0
80005302:	cf d1       	brne	800052fc <monome_grid_refresh+0x118>
80005304:	d8 02       	popm	pc
80005306:	d7 03       	nop

80005308 <monome_arc_refresh>:


// check flags and refresh arc
void monome_arc_refresh(void) {
80005308:	d4 31       	pushm	r0-r7,lr
  // may need to wait after each quad until tx transfer is complete
  u8 busy = ftdi_tx_busy();
8000530a:	30 07       	mov	r7,0
  u8 i;

  for(i=0;i<mdesc.encs;i++) {
8000530c:	32 01       	mov	r1,32


// check flags and refresh arc
void monome_arc_refresh(void) {
  // may need to wait after each quad until tx transfer is complete
  u8 busy = ftdi_tx_busy();
8000530e:	e0 a0 04 cd 	rcall	80005ca8 <ftdi_tx_busy>
  u8 i;

  for(i=0;i<mdesc.encs;i++) {
    if(monomeFrameDirty & (1<<i)) {
80005312:	e0 66 07 69 	mov	r6,1897
      if(i==1) print_dbg("\r\nsecond");
      while(busy) { busy = ftdi_tx_busy(); }
      (*monome_ring_map)(i, monomeLedBuffer + (i<<6));
80005316:	30 12       	mov	r2,1
80005318:	e0 63 1a d8 	mov	r3,6872


// check flags and refresh arc
void monome_arc_refresh(void) {
  // may need to wait after each quad until tx transfer is complete
  u8 busy = ftdi_tx_busy();
8000531c:	e0 64 1a dc 	mov	r4,6876
  u8 i;

  for(i=0;i<mdesc.encs;i++) {
    if(monomeFrameDirty & (1<<i)) {
80005320:	30 15       	mov	r5,1
80005322:	18 90       	mov	r0,r12
80005324:	c2 48       	rjmp	8000536c <monome_arc_refresh+0x64>
80005326:	0d 88       	ld.ub	r8,r6[0x0]
80005328:	f0 07 08 48 	asr	r8,r8,r7
      if(i==1) print_dbg("\r\nsecond");
8000532c:	ed b8 00 00 	bld	r8,0x0
80005330:	c1 c1       	brne	80005368 <monome_arc_refresh+0x60>
80005332:	e4 07 18 00 	cp.b	r7,r2
80005336:	c0 91       	brne	80005348 <monome_arc_refresh+0x40>
80005338:	fe cc b9 24 	sub	r12,pc,-18140
      while(busy) { busy = ftdi_tx_busy(); }
8000533c:	e0 a0 15 70 	rcall	80007e1c <print_dbg>
80005340:	c0 48       	rjmp	80005348 <monome_arc_refresh+0x40>
80005342:	e0 a0 04 b3 	rcall	80005ca8 <ftdi_tx_busy>
      (*monome_ring_map)(i, monomeLedBuffer + (i<<6));
80005346:	18 90       	mov	r0,r12
80005348:	58 00       	cp.w	r0,0
8000534a:	cf c1       	brne	80005342 <monome_arc_refresh+0x3a>
8000534c:	66 08       	ld.w	r8,r3[0x0]
8000534e:	ee 0b 15 06 	lsl	r11,r7,0x6
      monomeFrameDirty &= ~(1<<i);
80005352:	0e 9c       	mov	r12,r7
80005354:	e8 0b 00 0b 	add	r11,r4,r11
80005358:	5d 18       	icall	r8
8000535a:	0d 89       	ld.ub	r9,r6[0x0]
8000535c:	ea 07 09 48 	lsl	r8,r5,r7
void monome_arc_refresh(void) {
  // may need to wait after each quad until tx transfer is complete
  u8 busy = ftdi_tx_busy();
  u8 i;

  for(i=0;i<mdesc.encs;i++) {
80005360:	30 10       	mov	r0,1
80005362:	5c d8       	com	r8
80005364:	12 68       	and	r8,r9
80005366:	ac 88       	st.b	r6[0x0],r8
80005368:	2f f7       	sub	r7,-1
8000536a:	5c 57       	castu.b	r7
8000536c:	e3 38 00 0a 	ld.ub	r8,r1[10]
80005370:	ee 08 18 00 	cp.b	r8,r7
      monomeFrameDirty &= ~(1<<i);
      busy = 1;
    }
  }

  while( busy ) { busy = ftdi_tx_busy(); }
80005374:	fe 9b ff d9 	brhi	80005326 <monome_arc_refresh+0x1e>
80005378:	c0 48       	rjmp	80005380 <monome_arc_refresh+0x78>
8000537a:	e0 a0 04 97 	rcall	80005ca8 <ftdi_tx_busy>
}
8000537e:	18 90       	mov	r0,r12
80005380:	58 00       	cp.w	r0,0
80005382:	cf c1       	brne	8000537a <monome_arc_refresh+0x72>
80005384:	d8 32       	popm	r0-r7,pc
80005386:	d7 03       	nop

80005388 <set_intense_series>:
80005388:	d4 01       	pushm	lr
8000538a:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
8000538e:	ea 18 ff ff 	orh	r8,0xffff
80005392:	e8 18 ff a0 	orl	r8,0xffa0
80005396:	e0 6c 07 7c 	mov	r12,1916
8000539a:	30 1b       	mov	r11,1
			b (brightness) = 0-15 (4 bits)
encode:		byte 0 = ((id) << 4) | b = 160 + b
*/
  txBuf[0] = 0xa0;
  txBuf[0] |= (v & 0x0f);
  ftdi_write(txBuf, 1);
8000539c:	b8 88       	st.b	r12[0x0],r8
8000539e:	e0 a0 04 c1 	rcall	80005d20 <ftdi_write>
}
800053a2:	d8 02       	popm	pc

800053a4 <ring_map_mext>:
800053a4:	d4 01       	pushm	lr
800053a6:	e0 68 07 7c 	mov	r8,1916
800053aa:	39 2a       	mov	r10,-110
  //  static u8 tx[11] = { 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  static u8* ptx;
  static u8 i;

  txBuf[0] = 0x92;
  txBuf[1] = n;
800053ac:	b0 9c       	st.b	r8[0x1],r12
800053ae:	f0 c9 ff fe 	sub	r9,r8,-2
  
  ptx = txBuf + 2;
  
  // smash 64 LEDs together, nibbles
  for(i=0; i<32; i++) {
800053b2:	b0 8a       	st.b	r8[0x0],r10
  //  static u8 tx[11] = { 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  static u8* ptx;
  static u8 i;

  txBuf[0] = 0x92;
  txBuf[1] = n;
800053b4:	31 fc       	mov	r12,31
  
  ptx = txBuf + 2;
  
  // smash 64 LEDs together, nibbles
  for(i=0; i<32; i++) {
800053b6:	30 08       	mov	r8,0
    *ptx = *data << 4;
800053b8:	c0 b8       	rjmp	800053ce <ring_map_mext+0x2a>
800053ba:	17 8a       	ld.ub	r10,r11[0x0]
800053bc:	a5 6a       	lsl	r10,0x4
800053be:	5c 5a       	castu.b	r10

/* static void grid_map_level_mext(u8 x, u8 y, const u8* data) { */
/*   // TODO */
/* } */

static void ring_map_mext(u8 n, u8* data) {
800053c0:	b2 8a       	st.b	r9[0x0],r10
  
  // smash 64 LEDs together, nibbles
  for(i=0; i<32; i++) {
    *ptx = *data << 4;
    data++;
    *ptx |= *data;
800053c2:	2f f8       	sub	r8,-1

/* static void grid_map_level_mext(u8 x, u8 y, const u8* data) { */
/*   // TODO */
/* } */

static void ring_map_mext(u8 n, u8* data) {
800053c4:	17 9e       	ld.ub	lr,r11[0x1]
  
  // smash 64 LEDs together, nibbles
  for(i=0; i<32; i++) {
    *ptx = *data << 4;
    data++;
    *ptx |= *data;
800053c6:	5c 58       	castu.b	r8

/* static void grid_map_level_mext(u8 x, u8 y, const u8* data) { */
/*   // TODO */
/* } */

static void ring_map_mext(u8 n, u8* data) {
800053c8:	1c 4a       	or	r10,lr
  
  // smash 64 LEDs together, nibbles
  for(i=0; i<32; i++) {
    *ptx = *data << 4;
    data++;
    *ptx |= *data;
800053ca:	2f eb       	sub	r11,-2
  txBuf[1] = n;
  
  ptx = txBuf + 2;
  
  // smash 64 LEDs together, nibbles
  for(i=0; i<32; i++) {
800053cc:	12 ca       	st.b	r9++,r10
800053ce:	f8 08 18 00 	cp.b	r8,r12
800053d2:	fe 98 ff f4 	brls	800053ba <ring_map_mext+0x16>
800053d6:	e0 6a 07 74 	mov	r10,1908
    *ptx |= *data;
    data++;
    ptx++;
  }

  ftdi_write(txBuf, 32 + 2);
800053da:	95 09       	st.w	r10[0x0],r9
  txBuf[1] = n;
  
  ptx = txBuf + 2;
  
  // smash 64 LEDs together, nibbles
  for(i=0; i<32; i++) {
800053dc:	e0 69 07 c4 	mov	r9,1988
    *ptx |= *data;
    data++;
    ptx++;
  }

  ftdi_write(txBuf, 32 + 2);
800053e0:	32 2b       	mov	r11,34
800053e2:	b2 88       	st.b	r9[0x0],r8
}
800053e4:	e0 6c 07 7c 	mov	r12,1916
800053e8:	e0 a0 04 9c 	rcall	80005d20 <ftdi_write>
800053ec:	d8 02       	popm	pc
800053ee:	d7 03       	nop

800053f0 <grid_map_mext>:
800053f0:	d4 21       	pushm	r4-r7,lr
800053f2:	e0 68 07 7c 	mov	r8,1916
800053f6:	b0 9c       	st.b	r8[0x1],r12
static void grid_map_mext( u8 x, u8 y, const u8* data ) {
  //  static u8 tx[11] = { 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  static u8* ptx;
  static u8 i, j;

  txBuf[0] = 0x1A;  
800053f8:	b0 ab       	st.b	r8[0x2],r11
  txBuf[1] = x;
  txBuf[2] = y;
  
  ptx = txBuf + 3;
800053fa:	31 ac       	mov	r12,26
800053fc:	f0 cb ff fd 	sub	r11,r8,-3
80005400:	b0 8c       	st.b	r8[0x0],r12
80005402:	e0 68 07 d0 	mov	r8,2000
80005406:	91 0b       	st.w	r8[0x0],r11
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
80005408:	e0 68 07 7a 	mov	r8,1914

  txBuf[0] = 0x1A;  
  txBuf[1] = x;
  txBuf[2] = y;
  
  ptx = txBuf + 3;
8000540c:	16 99       	mov	r9,r11
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
8000540e:	30 76       	mov	r6,7
80005410:	11 8b       	ld.ub	r11,r8[0x0]
80005412:	30 08       	mov	r8,0
80005414:	c1 38       	rjmp	8000543a <grid_map_mext+0x4a>
    // *ptx = 0;
    for(j=0; j<4; j++) {
      // binary value of data byte to bitfield of tx byte
      // *ptx |= ((*data > 0) << j);
      *ptx = (*data) << 4;
80005416:	12 9e       	mov	lr,r9
80005418:	14 9c       	mov	r12,r10
8000541a:	30 0b       	mov	r11,0
8000541c:	19 87       	ld.ub	r7,r12[0x0]
      data++;
      *ptx |= *data;
8000541e:	a5 67       	lsl	r7,0x4
80005420:	5c 57       	castu.b	r7
80005422:	bc 87       	st.b	lr[0x0],r7
// this will hopefully help optimize operator routines,
// which cannot be called less often than refresh/tx, and are therefore prioritized.
////////////////////////////////////////////////
// HACKED to always do var-bright update
////////////////////////////////////////////////
static void grid_map_mext( u8 x, u8 y, const u8* data ) {
80005424:	19 95       	ld.ub	r5,r12[0x1]
80005426:	0a 47       	or	r7,r5
  ptx = txBuf + 3;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    // *ptx = 0;
    for(j=0; j<4; j++) {
80005428:	1c c7       	st.b	lr++,r7
8000542a:	2f ec       	sub	r12,-2
// this will hopefully help optimize operator routines,
// which cannot be called less often than refresh/tx, and are therefore prioritized.
////////////////////////////////////////////////
// HACKED to always do var-bright update
////////////////////////////////////////////////
static void grid_map_mext( u8 x, u8 y, const u8* data ) {
8000542c:	2f fb       	sub	r11,-1
8000542e:	58 4b       	cp.w	r11,4
80005430:	cf 61       	brne	8000541c <grid_map_mext+0x2c>
80005432:	2f f8       	sub	r8,-1
  txBuf[2] = y;
  
  ptx = txBuf + 3;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
80005434:	2f 0a       	sub	r10,-16
80005436:	5c 58       	castu.b	r8
80005438:	2f c9       	sub	r9,-4
8000543a:	ec 08 18 00 	cp.b	r8,r6
8000543e:	fe 98 ff ec 	brls	80005416 <grid_map_mext+0x26>
80005442:	e0 6a 07 7a 	mov	r10,1914
      ptx++;
    }
    data += MONOME_QUAD_LEDS; // skip the rest of the row to get back in target quad
    // ptx++;
  }
  ftdi_write(txBuf, 32 + 3);
80005446:	b4 8b       	st.b	r10[0x0],r11
  txBuf[2] = y;
  
  ptx = txBuf + 3;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
80005448:	e0 6a 07 d0 	mov	r10,2000
      ptx++;
    }
    data += MONOME_QUAD_LEDS; // skip the rest of the row to get back in target quad
    // ptx++;
  }
  ftdi_write(txBuf, 32 + 3);
8000544c:	95 09       	st.w	r10[0x0],r9
8000544e:	e0 69 07 79 	mov	r9,1913
}
80005452:	32 3b       	mov	r11,35
80005454:	b2 88       	st.b	r9[0x0],r8
80005456:	e0 6c 07 7c 	mov	r12,1916
8000545a:	e0 a0 04 63 	rcall	80005d20 <ftdi_write>
8000545e:	d8 22       	popm	r4-r7,pc

80005460 <grid_map_series>:
80005460:	d4 21       	pushm	r4-r7,lr
80005462:	30 78       	mov	r8,7
80005464:	f0 0c 18 00 	cp.b	r12,r8
  static u8 * ptx;
  static u8 i, j;
  // command (upper nibble)
  txBuf[0] = 0x80;
  // quadrant index (lower nibble, 0-3)
  txBuf[0] |= ( (x > 7) | ((y > 7) << 1) );
80005468:	5f b9       	srhi	r9
8000546a:	f6 08 18 00 	cp.b	r8,r11
8000546e:	f9 bb 03 02 	movlo	r11,2
80005472:	f9 bb 02 00 	movhs	r11,0
80005476:	ea 19 ff ff 	orh	r9,0xffff
8000547a:	e8 19 ff 80 	orl	r9,0xff80
8000547e:	16 49       	or	r9,r11
80005480:	e0 6c 07 7c 	mov	r12,1916
80005484:	18 c9       	st.b	r12++,r9
80005486:	e0 69 07 7b 	mov	r9,1915
  // pointer to tx data
  ptx = txBuf + 1;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
8000548a:	13 8b       	ld.ub	r11,r9[0x0]

  // pointer to tx data
  ptx = txBuf + 1;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
8000548c:	30 09       	mov	r9,0
    *ptx = 0;
8000548e:	12 9e       	mov	lr,r9
    // print_dbg_hex(txBuf[(i*2) + 1]);
  }
  ftdi_write(txBuf, 16);
}

static void grid_map_series(u8 x, u8 y, const u8* data) {
80005490:	c1 98       	rjmp	800054c2 <grid_map_series+0x62>
80005492:	b8 8e       	st.b	r12[0x0],lr
80005494:	f4 c7 ff f8 	sub	r7,r10,-8
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
      // binary value of data byte to bitfield of tx byte
      *ptx |= ((*data > VB_CUTOFF) << j);
80005498:	14 9b       	mov	r11,r10
8000549a:	c0 a8       	rjmp	800054ae <grid_map_series+0x4e>
8000549c:	17 35       	ld.ub	r5,r11++
8000549e:	f0 05 18 00 	cp.b	r5,r8
800054a2:	5f b5       	srhi	r5
800054a4:	ea 06 09 46 	lsl	r6,r5,r6
800054a8:	19 85       	ld.ub	r5,r12[0x0]
      ++data;
800054aa:	0a 46       	or	r6,r5
800054ac:	b8 86       	st.b	r12[0x0],r6
800054ae:	f6 0a 01 06 	sub	r6,r11,r10
  ptx = txBuf + 1;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    *ptx = 0;
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
800054b2:	5c 56       	castu.b	r6
800054b4:	0e 3b       	cp.w	r11,r7
800054b6:	cf 31       	brne	8000549c <grid_map_series+0x3c>
800054b8:	2f f9       	sub	r9,-1
800054ba:	2f 0a       	sub	r10,-16
800054bc:	5c 59       	castu.b	r9

  // pointer to tx data
  ptx = txBuf + 1;
  
  // copy and convert
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
800054be:	2f fc       	sub	r12,-1
800054c0:	30 8b       	mov	r11,8
800054c2:	f0 09 18 00 	cp.b	r9,r8
800054c6:	fe 98 ff e6 	brls	80005492 <grid_map_series+0x32>
800054ca:	e0 68 07 64 	mov	r8,1892
800054ce:	91 0c       	st.w	r8[0x0],r12
    // print_dbg_hex(*ptx);

    data += MONOME_QUAD_LEDS; // skip the rest of the row to get back in target quad
    ++ptx;
  }
  ftdi_write(txBuf, MONOME_QUAD_LEDS + 1);  
800054d0:	e0 68 07 7b 	mov	r8,1915
800054d4:	b0 8b       	st.b	r8[0x0],r11
800054d6:	e0 68 07 70 	mov	r8,1904
}
800054da:	30 9b       	mov	r11,9
800054dc:	b0 89       	st.b	r8[0x0],r9
800054de:	e0 6c 07 7c 	mov	r12,1916
800054e2:	e0 a0 04 1f 	rcall	80005d20 <ftdi_write>
800054e6:	d8 22       	popm	r4-r7,pc

800054e8 <grid_map_40h>:
800054e8:	d4 21       	pushm	r4-r7,lr
800054ea:	30 08       	mov	r8,0
800054ec:	18 4b       	or	r11,r12
800054ee:	f0 0b 18 00 	cp.b	r11,r8

static void grid_map_40h(u8 x, u8 y, const u8* data) {
  // print_dbg("\n\r=== grid_map_40h ===");
  static u8 i, j;
  // ignore all but first quadrant -- do any devices larger than 8x8 speak 40h?
  if (x != 0 || y != 0) {
800054f2:	c3 a1       	brne	80005566 <grid_map_40h+0x7e>
800054f4:	e0 68 07 71 	mov	r8,1905
800054f8:	30 77       	mov	r7,7
800054fa:	11 8b       	ld.ub	r11,r8[0x0]
800054fc:	e0 69 07 7c 	mov	r9,1916
    return;
  }
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
80005500:	30 08       	mov	r8,0
    // led row command + row number
    txBuf[(i*2)] = 0x70 + i;
80005502:	10 9e       	mov	lr,r8
80005504:	c2 28       	rjmp	80005548 <grid_map_40h+0x60>
80005506:	f0 0c 15 01 	lsl	r12,r8,0x1
8000550a:	f0 cb ff 90 	sub	r11,r8,-112
  }
  ftdi_write(txBuf, 32 + 3);
}


static void grid_map_40h(u8 x, u8 y, const u8* data) {
8000550e:	f2 0c 0b 0b 	st.b	r9[r12],r11
    return;
  }
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    // led row command + row number
    txBuf[(i*2)] = 0x70 + i;
    txBuf[(i*2)+1] = 0;
80005512:	f4 c6 ff f8 	sub	r6,r10,-8
80005516:	2f fc       	sub	r12,-1
80005518:	14 9b       	mov	r11,r10
    // print_dbg("\r\n * data bytes: ");
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
8000551a:	f2 0c 0b 0e 	st.b	r9[r12],lr
      // set row bit if led should be on
      // print_dbg("0x");
      // print_dbg_hex(*data);
      // print_dbg(" ");
      txBuf[(i*2)+1] |= ((*data > 0) << j);
8000551e:	c0 c8       	rjmp	80005536 <grid_map_40h+0x4e>
80005520:	17 34       	ld.ub	r4,r11++
80005522:	fc 04 18 00 	cp.b	r4,lr
80005526:	5f 14       	srne	r4
80005528:	e8 05 09 45 	lsl	r5,r4,r5
8000552c:	f2 0c 07 04 	ld.ub	r4,r9[r12]
80005530:	08 45       	or	r5,r4
      // advance data to next bit
      ++data;
80005532:	f2 0c 0b 05 	st.b	r9[r12],r5
80005536:	f6 0a 01 05 	sub	r5,r11,r10
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
    // led row command + row number
    txBuf[(i*2)] = 0x70 + i;
    txBuf[(i*2)+1] = 0;
    // print_dbg("\r\n * data bytes: ");
    for(j=0; j<MONOME_QUAD_LEDS; j++) {
8000553a:	5c 55       	castu.b	r5
8000553c:	0c 3b       	cp.w	r11,r6
8000553e:	cf 11       	brne	80005520 <grid_map_40h+0x38>
80005540:	2f f8       	sub	r8,-1
80005542:	2f 0a       	sub	r10,-16
  static u8 i, j;
  // ignore all but first quadrant -- do any devices larger than 8x8 speak 40h?
  if (x != 0 || y != 0) {
    return;
  }
  for(i=0; i<MONOME_QUAD_LEDS; i++) {
80005544:	5c 58       	castu.b	r8
80005546:	30 8b       	mov	r11,8
80005548:	ee 08 18 00 	cp.b	r8,r7
8000554c:	fe 98 ff dd 	brls	80005506 <grid_map_40h+0x1e>
80005550:	e0 69 07 71 	mov	r9,1905
80005554:	b2 8b       	st.b	r9[0x0],r11
    // print_dbg("\n\r 40h: send led_row command: ");
    // print_dbg_hex(txBuf[i*2]);
    // print_dbg(" row data: 0x");
    // print_dbg_hex(txBuf[(i*2) + 1]);
  }
  ftdi_write(txBuf, 16);
80005556:	e0 69 07 6a 	mov	r9,1898
8000555a:	31 0b       	mov	r11,16
8000555c:	b2 88       	st.b	r9[0x0],r8
8000555e:	e0 6c 07 7c 	mov	r12,1916
80005562:	e0 a0 03 df 	rcall	80005d20 <ftdi_write>
80005566:	d8 22       	popm	r4-r7,pc

80005568 <read_serial_series>:
80005568:	d4 31       	pushm	r0-r7,lr
8000556a:	e0 a0 03 93 	rcall	80005c90 <ftdi_rx_buf>
8000556e:	e0 65 07 c8 	mov	r5,1992
}

static void read_serial_series(void) {
  u8* prx = ftdi_rx_buf();
  u8 i;
  rxBytes = ftdi_rx_bytes();
80005572:	18 94       	mov	r4,r12
80005574:	18 97       	mov	r7,r12
80005576:	e0 63 07 d4 	mov	r3,2004
  *h = *pdata;
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
8000557a:	e0 a0 03 8f 	rcall	80005c98 <ftdi_rx_bytes>
  /* print_dbg("; y: 0x"); */
  /* print_dbg_hex(y); */
  /* print_dbg("; z: 0x"); */
  /* print_dbg_hex(val); */

  ev.type = kEventMonomeGridKey;
8000557e:	ea c6 ff fc 	sub	r6,r5,-4
  // print_dbg_hex(prx[0]);
  // print_dbg(" , 0x");
  // print_dbg_hex(prx[1]);
  // print_dbg(" ]");
  i = 0;
  while(i < rxBytes) {
80005582:	30 c2       	mov	r2,12
    /* print_dbg(" ; z : 0x"); */
    /* print_dbg_hex(	 ((prx[0] & 0xf0) == 0) ); */
    
    // process consecutive pairs of bytes
    monome_grid_key_write_event( ((prx[1] & 0xf0) >> 4) ,
				 prx[1] & 0xf,
80005584:	a6 8c       	st.b	r3[0x0],r12
80005586:	c1 28       	rjmp	800055aa <read_serial_series+0x42>

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
  data[1] = y;
80005588:	0f 99       	ld.ub	r9,r7[0x1]
8000558a:	0f 88       	ld.ub	r8,r7[0x0]
    /* print_dbg(" ; z : 0x"); */
    /* print_dbg_hex(	 ((prx[0] & 0xf0) == 0) ); */
    
    // process consecutive pairs of bytes
    monome_grid_key_write_event( ((prx[1] & 0xf0) >> 4) ,
				 prx[1] & 0xf,
8000558c:	f5 d9 c0 04 	bfextu	r10,r9,0x0,0x4

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
  data[1] = y;
80005590:	e2 18 00 f0 	andl	r8,0xf0,COH
  data[2] = val;
80005594:	ac 9a       	st.b	r6[0x1],r10
  /* print_dbg("; y: 0x"); */
  /* print_dbg_hex(y); */
  /* print_dbg("; z: 0x"); */
  /* print_dbg_hex(val); */

  ev.type = kEventMonomeGridKey;
80005596:	5f 08       	sreq	r8
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
80005598:	ac a8       	st.b	r6[0x2],r8
    monome_grid_key_write_event( ((prx[1] & 0xf0) >> 4) ,
				 prx[1] & 0xf,
				 ((prx[0] & 0xf0) == 0)
				 );
    i += 2;
    prx += 2;
8000559a:	8b 02       	st.w	r5[0x0],r2
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
8000559c:	a5 89       	lsr	r9,0x4
  /* print_dbg_hex(y); */
  /* print_dbg("; z: 0x"); */
  /* print_dbg_hex(val); */

  ev.type = kEventMonomeGridKey;
  event_post(&ev);
8000559e:	2f e7       	sub	r7,-2
800055a0:	ac 89       	st.b	r6[0x0],r9
800055a2:	e0 6c 07 c8 	mov	r12,1992
  // print_dbg_hex(prx[0]);
  // print_dbg(" , 0x");
  // print_dbg_hex(prx[1]);
  // print_dbg(" ]");
  i = 0;
  while(i < rxBytes) {
800055a6:	fe b0 fc 7d 	rcall	80004ea0 <event_post>
800055aa:	0e 99       	mov	r9,r7
800055ac:	07 88       	ld.ub	r8,r3[0x0]
800055ae:	08 19       	sub	r9,r4
				 );
    i += 2;
    prx += 2;
  }

}
800055b0:	f0 09 18 00 	cp.b	r9,r8
800055b4:	ce a3       	brcs	80005588 <read_serial_series+0x20>
800055b6:	d8 32       	popm	r0-r7,pc

800055b8 <read_serial_40h>:
800055b8:	d4 31       	pushm	r0-r7,lr
800055ba:	e0 a0 03 6b 	rcall	80005c90 <ftdi_rx_buf>
800055be:	e0 65 07 c8 	mov	r5,1992
800055c2:	18 94       	mov	r4,r12
800055c4:	18 97       	mov	r7,r12
800055c6:	e0 63 07 d4 	mov	r3,2004
  *h = *pdata;
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
800055ca:	e0 a0 03 67 	rcall	80005c98 <ftdi_rx_bytes>
  /* print_dbg("; y: 0x"); */
  /* print_dbg_hex(y); */
  /* print_dbg("; z: 0x"); */
  /* print_dbg_hex(val); */

  ev.type = kEventMonomeGridKey;
800055ce:	ea c6 ff fc 	sub	r6,r5,-4
  // print_dbg_hex(prx[0]);
  // print_dbg(" , 0x");
  // print_dbg_hex(prx[1]);
  // print_dbg(" ]");
  i = 0;
  while(i < rxBytes) {
800055d2:	30 c2       	mov	r2,12
    // print_dbg_hex(prx[1] & 0xf);
    // print_dbg(" ; z : 0x");
    // print_dbg_hex(   ((prx[0] & 0xf) != 0) );

    // press event
    if ((prx[0] & 0xf0) == 0) {
800055d4:	a6 8c       	st.b	r3[0x0],r12
800055d6:	c1 68       	rjmp	80005602 <read_serial_40h+0x4a>
800055d8:	0f 88       	ld.ub	r8,r7[0x0]
800055da:	10 99       	mov	r9,r8
800055dc:	e2 19 00 f0 	andl	r9,0xf0,COH
// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
  data[1] = y;
  data[2] = val;
800055e0:	c1 01       	brne	80005600 <read_serial_40h+0x48>
800055e2:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800055e6:	5f 19       	srne	r9

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
  data[1] = y;
800055e8:	0f 98       	ld.ub	r8,r7[0x1]
800055ea:	ac a9       	st.b	r6[0x2],r9
800055ec:	f3 d8 c0 04 	bfextu	r9,r8,0x0,0x4
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
800055f0:	ac 99       	st.b	r6[0x1],r9
  /* print_dbg_hex(y); */
  /* print_dbg("; z: 0x"); */
  /* print_dbg_hex(val); */

  ev.type = kEventMonomeGridKey;
  event_post(&ev);
800055f2:	8b 02       	st.w	r5[0x0],r2
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
800055f4:	a5 88       	lsr	r8,0x4
  /* print_dbg_hex(y); */
  /* print_dbg("; z: 0x"); */
  /* print_dbg_hex(val); */

  ev.type = kEventMonomeGridKey;
  event_post(&ev);
800055f6:	e0 6c 07 c8 	mov	r12,1992
        ((prx[0] & 0xf) != 0)
      );
    }
    
    i += 2;
    prx += 2;
800055fa:	ac 88       	st.b	r6[0x0],r8
  // print_dbg_hex(prx[0]);
  // print_dbg(" , 0x");
  // print_dbg_hex(prx[1]);
  // print_dbg(" ]");
  i = 0;
  while(i < rxBytes) {
800055fc:	fe b0 fc 52 	rcall	80004ea0 <event_post>
80005600:	2f e7       	sub	r7,-2
80005602:	0e 99       	mov	r9,r7
80005604:	07 88       	ld.ub	r8,r3[0x0]
80005606:	08 19       	sub	r9,r4
    }
    
    i += 2;
    prx += 2;
  }
}
80005608:	f0 09 18 00 	cp.b	r9,r8
8000560c:	ce 63       	brcs	800055d8 <read_serial_40h+0x20>
8000560e:	d8 32       	popm	r0-r7,pc

80005610 <read_serial_mext>:
80005610:	d4 31       	pushm	r0-r7,lr
80005612:	e0 67 07 d4 	mov	r7,2004
80005616:	e0 a0 03 41 	rcall	80005c98 <ftdi_rx_bytes>
8000561a:	ae 8c       	st.b	r7[0x0],r12
8000561c:	c5 e0       	breq	800056d8 <read_serial_mext+0xc8>
8000561e:	e0 68 07 78 	mov	r8,1912
  static u8* prx; // pointer to rx buf
  static u8 com;
  
  rxBytes = ftdi_rx_bytes();
  if( rxBytes ) {
    nbp = 0;
80005622:	30 09       	mov	r9,0
  // TODO
}

// ring encoder
static inline void monome_ring_enc_write_event( u8 n, u8 val) {
  u8* data = (u8*)(&(ev.data));
80005624:	10 96       	mov	r6,r8
  static u8 com;
  
  rxBytes = ftdi_rx_bytes();
  if( rxBytes ) {
    nbp = 0;
    prx = ftdi_rx_buf();
80005626:	b0 89       	st.b	r8[0x0],r9
80005628:	e0 64 07 c8 	mov	r4,1992
8000562c:	e0 a0 03 32 	rcall	80005c90 <ftdi_rx_buf>
  // TODO
}

// ring encoder
static inline void monome_ring_enc_write_event( u8 n, u8 val) {
  u8* data = (u8*)(&(ev.data));
80005630:	e0 60 07 68 	mov	r0,1896
   // print_dbg("\r\n monome.c wrote event; n: 0x"); 
   // print_dbg_hex(n); 
   // print_dbg("; d: 0x"); 
   // print_dbg_hex(val); 

  ev.type = kEventMonomeRingEnc;
80005634:	e0 67 07 6c 	mov	r7,1900
  static u8 com;
  
  rxBytes = ftdi_rx_bytes();
  if( rxBytes ) {
    nbp = 0;
    prx = ftdi_rx_buf();
80005638:	35 03       	mov	r3,80
    while(nbp < rxBytes) {
8000563a:	e8 c5 ff fc 	sub	r5,r4,-4
      com = (u8)(*(prx++));
      nbp++;
8000563e:	30 d1       	mov	r1,13
80005640:	35 12       	mov	r2,81
  rxBytes = ftdi_rx_bytes();
  if( rxBytes ) {
    nbp = 0;
    prx = ftdi_rx_buf();
    while(nbp < rxBytes) {
      com = (u8)(*(prx++));
80005642:	8f 0c       	st.w	r7[0x0],r12
80005644:	c4 28       	rjmp	800056c8 <read_serial_mext+0xb8>
      nbp++;
80005646:	2f f8       	sub	r8,-1
  rxBytes = ftdi_rx_bytes();
  if( rxBytes ) {
    nbp = 0;
    prx = ftdi_rx_buf();
    while(nbp < rxBytes) {
      com = (u8)(*(prx++));
80005648:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
      nbp++;
      switch(com) {
8000564c:	6e 08       	ld.w	r8,r7[0x0]
8000564e:	11 39       	ld.ub	r9,r8++
80005650:	ac 8a       	st.b	r6[0x0],r10
80005652:	a0 89       	st.b	r0[0x0],r9
80005654:	8f 08       	st.w	r7[0x0],r8
80005656:	e6 09 18 00 	cp.b	r9,r3
8000565a:	c2 30       	breq	800056a0 <read_serial_mext+0x90>
8000565c:	e0 8b 00 0b 	brhi	80005672 <read_serial_mext+0x62>
80005660:	32 0a       	mov	r10,32
80005662:	f4 09 18 00 	cp.b	r9,r10
80005666:	c0 e0       	breq	80005682 <read_serial_mext+0x72>
80005668:	32 1a       	mov	r10,33
8000566a:	f4 09 18 00 	cp.b	r9,r10
8000566e:	c3 51       	brne	800056d8 <read_serial_mext+0xc8>
80005670:	c0 f8       	rjmp	8000568e <read_serial_mext+0x7e>
80005672:	e4 09 18 00 	cp.b	r9,r2
80005676:	c2 20       	breq	800056ba <read_serial_mext+0xaa>
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
80005678:	35 2b       	mov	r11,82
    while(nbp < rxBytes) {
      com = (u8)(*(prx++));
      nbp++;
      switch(com) {
      case 0x20: // grid key up
      	monome_grid_key_write_event( *prx, *(prx+1), 0);
8000567a:	f6 09 18 00 	cp.b	r9,r11

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
  data[1] = y;
8000567e:	c2 d1       	brne	800056d8 <read_serial_mext+0xc8>
  data[2] = val;
80005680:	c2 08       	rjmp	800056c0 <read_serial_mext+0xb0>
80005682:	11 89       	ld.ub	r9,r8[0x0]
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
80005684:	11 98       	ld.ub	r8,r8[0x1]
      	monome_grid_key_write_event( *prx, *(prx+1), 0);
      	nbp += 2;
      	prx += 2;
      	break;
      case 0x21: // grid key down
      	monome_grid_key_write_event( *prx, *(prx+1), 1);
80005686:	aa 89       	st.b	r5[0x0],r9
}

// grid key
static inline void monome_grid_key_write_event(u8 x, u8 y, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = x;
80005688:	aa 98       	st.b	r5[0x1],r8
  data[1] = y;
8000568a:	30 08       	mov	r8,0
  data[2] = val;
8000568c:	c0 68       	rjmp	80005698 <read_serial_mext+0x88>
8000568e:	11 89       	ld.ub	r9,r8[0x0]
  /* print_dbg("; y: 0x"); */
  /* print_dbg_hex(y); */
  /* print_dbg("; z: 0x"); */
  /* print_dbg_hex(val); */

  ev.type = kEventMonomeGridKey;
80005690:	11 98       	ld.ub	r8,r8[0x1]
80005692:	aa 89       	st.b	r5[0x0],r9
80005694:	aa 98       	st.b	r5[0x1],r8
}

// ring encoder
static inline void monome_ring_enc_write_event( u8 n, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = n;
80005696:	30 18       	mov	r8,1
      	monome_grid_key_write_event( *prx, *(prx+1), 1);
      	nbp += 2;
      	prx += 2;
      	break;
    	case 0x50: // ring delta
      	monome_ring_enc_write_event( *prx, *(prx+1));
80005698:	aa a8       	st.b	r5[0x2],r8
}

// ring encoder
static inline void monome_ring_enc_write_event( u8 n, u8 val) {
  u8* data = (u8*)(&(ev.data));
  data[0] = n;
8000569a:	30 c8       	mov	r8,12
  data[1] = val;
8000569c:	89 08       	st.w	r4[0x0],r8
   // print_dbg("\r\n monome.c wrote event; n: 0x"); 
   // print_dbg_hex(n); 
   // print_dbg("; d: 0x"); 
   // print_dbg_hex(val); 

  ev.type = kEventMonomeRingEnc;
8000569e:	c0 68       	rjmp	800056aa <read_serial_mext+0x9a>
  event_post(&ev);
800056a0:	11 89       	ld.ub	r9,r8[0x0]
800056a2:	11 98       	ld.ub	r8,r8[0x1]
800056a4:	aa 89       	st.b	r5[0x0],r9
      	nbp += 2;
      	prx += 2;
      	break;
    	case 0x50: // ring delta
      	monome_ring_enc_write_event( *prx, *(prx+1));
      	nbp += 2;
800056a6:	aa 98       	st.b	r5[0x1],r8
800056a8:	89 01       	st.w	r4[0x0],r1
800056aa:	e0 6c 07 c8 	mov	r12,1992
      	prx += 2;
      	break;
      case 0x51 : // ring key up
      	monome_ring_key_write_event( *prx++, 0);
      	prx++;
800056ae:	fe b0 fb f9 	rcall	80004ea0 <event_post>
      	break;
800056b2:	0d 88       	ld.ub	r8,r6[0x0]
      case 0x52 : // ring key down
      	monome_ring_key_write_event( *prx++, 1);
800056b4:	2f e8       	sub	r8,-2
      	nbp++;
800056b6:	ac 88       	st.b	r6[0x0],r8
      case 0x51 : // ring key up
      	monome_ring_key_write_event( *prx++, 0);
      	prx++;
      	break;
      case 0x52 : // ring key down
      	monome_ring_key_write_event( *prx++, 1);
800056b8:	6e 08       	ld.w	r8,r7[0x0]
      	nbp++;
800056ba:	2f e8       	sub	r8,-2
  
  rxBytes = ftdi_rx_bytes();
  if( rxBytes ) {
    nbp = 0;
    prx = ftdi_rx_buf();
    while(nbp < rxBytes) {
800056bc:	8f 08       	st.w	r7[0x0],r8
800056be:	c0 58       	rjmp	800056c8 <read_serial_mext+0xb8>
800056c0:	2f f8       	sub	r8,-1
800056c2:	2f fa       	sub	r10,-1
800056c4:	8f 08       	st.w	r7[0x0],r8
800056c6:	ac 8a       	st.b	r6[0x0],r10
800056c8:	e0 6a 07 d4 	mov	r10,2004
800056cc:	0d 88       	ld.ub	r8,r6[0x0]
800056ce:	15 89       	ld.ub	r9,r10[0x0]
800056d0:	f0 09 18 00 	cp.b	r9,r8
800056d4:	fe 9b ff b9 	brhi	80005646 <read_serial_mext+0x36>
800056d8:	d8 32       	popm	r0-r7,pc
800056da:	d7 03       	nop

800056dc <monome_connect_write_event>:
800056dc:	d4 01       	pushm	lr
800056de:	32 09       	mov	r9,32
800056e0:	f3 3b 00 09 	ld.ub	r11,r9[9]
800056e4:	e0 68 07 c8 	mov	r8,1992
800056e8:	f0 ca ff fb 	sub	r10,r8,-5
  // print_dbg_ulong(mdesc.cols);
  // print_dbg(" rows: ");
  // print_dbg_ulong(mdesc.rows);

  ev.type = kEventMonomeConnect;
  ev.type = kEventMonomeConnect;
800056ec:	b4 9b       	st.b	r10[0x1],r11
  *data++ = (u8)(mdesc.device); 	// device (8bits)
  *data++ = mdesc.cols;		// width / count
  *data++ = mdesc.rows;		// height / resolution
  //  *data = 0; 		// unused
  event_post(&ev);
800056ee:	30 8b       	mov	r11,8
  // print_dbg_ulong(mdesc.cols);
  // print_dbg(" rows: ");
  // print_dbg_ulong(mdesc.rows);

  ev.type = kEventMonomeConnect;
  ev.type = kEventMonomeConnect;
800056f0:	10 9c       	mov	r12,r8
  *data++ = (u8)(mdesc.device); 	// device (8bits)
800056f2:	91 0b       	st.w	r8[0x0],r11
800056f4:	72 1b       	ld.w	r11,r9[0x4]
  *data++ = mdesc.cols;		// width / count
800056f6:	b0 cb       	st.b	r8[0x4],r11
800056f8:	f3 38 00 08 	ld.ub	r8,r9[8]
  *data++ = mdesc.rows;		// height / resolution
  //  *data = 0; 		// unused
  event_post(&ev);
800056fc:	b4 88       	st.b	r10[0x0],r8
800056fe:	fe b0 fb d1 	rcall	80004ea0 <event_post>
}
80005702:	d8 02       	popm	pc

80005704 <setup_series>:
80005704:	d4 01       	pushm	lr
80005706:	30 1a       	mov	r10,1
80005708:	32 08       	mov	r8,32
8000570a:	f1 6a 00 0b 	st.b	r8[11],r10
8000570e:	91 0a       	st.w	r8[0x0],r10
//----  function pointer arrays

// read serial and spawn events
static const read_serial_t readSerialFuncs[eProtocolNumProtocols] = {
  &read_serial_40h,
  &read_serial_series,
80005710:	33 0a       	mov	r10,48

// setup series device
static void setup_series(u8 cols, u8 rows) {
  // print_dbg("\r\n setup series device");
  mdesc.protocol = eProtocolSeries;
  mdesc.device = eDeviceGrid;
80005712:	30 09       	mov	r9,0
  mdesc.cols = cols;
80005714:	f1 6c 00 08 	st.b	r8[8],r12
  mdesc.rows = rows;
80005718:	f1 6b 00 09 	st.b	r8[9],r11

// setup series device
static void setup_series(u8 cols, u8 rows) {
  // print_dbg("\r\n setup series device");
  mdesc.protocol = eProtocolSeries;
  mdesc.device = eDeviceGrid;
8000571c:	91 19       	st.w	r8[0x4],r9
  mdesc.cols = cols;
  mdesc.rows = rows;
  mdesc.vari = 0;
8000571e:	f1 69 00 0c 	st.b	r8[12],r9
//----  function pointer arrays

// read serial and spawn events
static const read_serial_t readSerialFuncs[eProtocolNumProtocols] = {
  &read_serial_40h,
  &read_serial_series,
80005722:	fe cb 01 ba 	sub	r11,pc,442
80005726:	fe c8 02 c6 	sub	r8,pc,710
// set function pointers
static inline void set_funcs(void) {
  // print_dbg("\r\n setting monome functions, protocol idx: ");
  // print_dbg_ulong(mdesc.protocol);
  monome_read_serial = readSerialFuncs[mdesc.protocol];
  monome_grid_map = gridMapFuncs[mdesc.protocol];
8000572a:	95 0b       	st.w	r10[0x0],r11
  monome_grid_level_map = gridMapFuncs[mdesc.protocol];
8000572c:	e0 6a 1a d4 	mov	r10,6868
  monome_ring_map = ringMapFuncs[mdesc.protocol];
80005730:	95 08       	st.w	r10[0x0],r8
80005732:	e0 6a 1b e0 	mov	r10,7136
};

// set intensity
static const set_intense_t intenseFuncs[eProtocolNumProtocols] = {
  NULL, // unsupported
  &set_intense_series,
80005736:	95 08       	st.w	r10[0x0],r8
80005738:	e0 68 1a d8 	mov	r8,6872
  &ring_map_mext,
};

// grid vs arc refresh
static const refresh_t refreshFuncs[eProtocolNumProtocols] = {
  &monome_grid_refresh,
8000573c:	91 09       	st.w	r8[0x0],r9
8000573e:	fe c9 03 b6 	sub	r9,pc,950
  mdesc.cols = cols;
  mdesc.rows = rows;
  mdesc.vari = 0;
  mdesc.tilt = 1;
  set_funcs();
  monome_connect_write_event();
80005742:	e0 68 1b dc 	mov	r8,7132
  //  monomeConnect = 1;
  //  test_draw();
}
80005746:	91 09       	st.w	r8[0x0],r9
80005748:	fe c9 05 64 	sub	r9,pc,1380
8000574c:	e0 68 1a d0 	mov	r8,6864
80005750:	91 09       	st.w	r8[0x0],r9
80005752:	cc 5f       	rcall	800056dc <monome_connect_write_event>
80005754:	d8 02       	popm	pc
80005756:	d7 03       	nop

80005758 <check_monome_device_desc>:
80005758:	d4 31       	pushm	r0-r7,lr
8000575a:	20 5d       	sub	sp,20
8000575c:	14 96       	mov	r6,r10
8000575e:	1a 97       	mov	r7,sp
80005760:	fa c9 ff fa 	sub	r9,sp,-6
80005764:	1a 98       	mov	r8,sp
80005766:	19 8a       	ld.ub	r10,r12[0x0]
80005768:	2f ec       	sub	r12,-2
8000576a:	10 ca       	st.b	r8++,r10
8000576c:	12 38       	cp.w	r8,r9
8000576e:	cf c1       	brne	80005766 <check_monome_device_desc+0xe>
80005770:	30 08       	mov	r8,0
80005772:	30 6a       	mov	r10,6
80005774:	ba e8       	st.b	sp[0x6],r8
80005776:	fe cb bd 56 	sub	r11,pc,-17066
  // manufacturer
  for(i=0; i<MONOME_MANSTR_LEN; i++) {
    buf[i] = mstr[i*2];
  }
  buf[i] = 0;
  matchMan = ( strncmp(buf, "monome", MONOME_MANSTR_LEN) == 0 );
8000577a:	1a 9c       	mov	r12,sp
8000577c:	e0 a0 1b 74 	rcall	80008e64 <strncmp>
  }
  //  print_dbg("\r\n finished monome class init");
}

// determine if FTDI string descriptors match monome device pattern
u8 check_monome_device_desc(char* mstr, char* pstr, char* sstr) { 
80005780:	ee c8 ff f7 	sub	r8,r7,-9
  /* print_dbg("\r\n manstring: "); */
  /* print_dbg(buf); */
 
  // serial number string
  for(i=0; i<MONOME_SERSTR_LEN; i++) {
    buf[i] = sstr[i*2];
80005784:	18 94       	mov	r4,r12
80005786:	0d 89       	ld.ub	r9,r6[0x0]
80005788:	2f e6       	sub	r6,-2
  matchMan = ( strncmp(buf, "monome", MONOME_MANSTR_LEN) == 0 );
  /* print_dbg("\r\n manstring: "); */
  /* print_dbg(buf); */
 
  // serial number string
  for(i=0; i<MONOME_SERSTR_LEN; i++) {
8000578a:	0e c9       	st.b	r7++,r9
8000578c:	10 37       	cp.w	r7,r8
    buf[i] = sstr[i*2];
  }
  buf[i] = 0;
8000578e:	cf c1       	brne	80005786 <check_monome_device_desc+0x2e>
80005790:	30 05       	mov	r5,0
80005792:	fb 65 00 09 	st.b	sp[9],r5
  /* print_dbg("\r\n serial string: "); */
  /* print_dbg(buf); */
  if(matchMan == 0) {
80005796:	58 04       	cp.w	r4,0
    // didn't match the manufacturer string, but check the serial for DIYs
    if( strncmp(buf, "a40h", 4) == 0) {
80005798:	c1 40       	breq	800057c0 <check_monome_device_desc+0x68>
8000579a:	30 4a       	mov	r10,4
8000579c:	fe cb bd 74 	sub	r11,pc,-17036
800057a0:	1a 9c       	mov	r12,sp
800057a2:	e0 a0 1b 61 	rcall	80008e64 <strncmp>
800057a6:	18 99       	mov	r9,r12
      // this is probably an arduinome      
      mdesc.protocol = eProtocol40h;
800057a8:	e0 81 01 81 	brne	80005aaa <check_monome_device_desc+0x352>
      mdesc.device = eDeviceGrid;
800057ac:	32 08       	mov	r8,32
      mdesc.cols = 8;
800057ae:	91 09       	st.w	r8[0x0],r9
      mdesc.rows = 8;
800057b0:	91 19       	st.w	r8[0x4],r9
800057b2:	30 89       	mov	r9,8
    // didn't match the manufacturer string, but check the serial for DIYs
    if( strncmp(buf, "a40h", 4) == 0) {
      // this is probably an arduinome      
      mdesc.protocol = eProtocol40h;
      mdesc.device = eDeviceGrid;
      mdesc.cols = 8;
800057b4:	f1 69 00 09 	st.b	r8[9],r9
    // if we got here, serial number didn't match series or 40h patterns.
    // so this is probably an extended-protocol device.
    // we need to query for device attributes
    return setup_mext();
  }
  return 0;
800057b8:	f1 69 00 08 	st.b	r8[8],r9
    } else {
      // not a monome
      return 0;
    }
  } else { // matched manufctrr string
    if(buf[0] != 'm') {
800057bc:	e0 8f 01 78 	bral	80005aac <check_monome_device_desc+0x354>
800057c0:	36 d8       	mov	r8,109
800057c2:	1b 89       	ld.ub	r9,sp[0x0]
800057c4:	f0 09 18 00 	cp.b	r9,r8
      // not a monome, somehow. shouldn't happen
      return 0;
    }
    if(buf[3] == 'h') {
800057c8:	e0 81 01 71 	brne	80005aaa <check_monome_device_desc+0x352>
800057cc:	36 88       	mov	r8,104
800057ce:	1b b9       	ld.ub	r9,sp[0x3]
800057d0:	f0 09 18 00 	cp.b	r9,r8
// setup

// setup 40h-protocol device
static void setup_40h(u8 cols, u8 rows) {
  // print_dbg("\r\n setup 40h device");
  mdesc.protocol = eProtocol40h;
800057d4:	c2 01       	brne	80005814 <check_monome_device_desc+0xbc>
  mdesc.device = eDeviceGrid;
  mdesc.cols = 8;
  mdesc.rows = 8;
800057d6:	30 89       	mov	r9,8
800057d8:	32 08       	mov	r8,32
// setup 40h-protocol device
static void setup_40h(u8 cols, u8 rows) {
  // print_dbg("\r\n setup 40h device");
  mdesc.protocol = eProtocol40h;
  mdesc.device = eDeviceGrid;
  mdesc.cols = 8;
800057da:	f1 69 00 09 	st.b	r8[9],r9

//----  function pointer arrays

// read serial and spawn events
static const read_serial_t readSerialFuncs[eProtocolNumProtocols] = {
  &read_serial_40h,
800057de:	f1 69 00 08 	st.b	r8[8],r9
  // print_dbg("\r\n setup 40h device");
  mdesc.protocol = eProtocol40h;
  mdesc.device = eDeviceGrid;
  mdesc.cols = 8;
  mdesc.rows = 8;
  mdesc.vari = 0;
800057e2:	33 09       	mov	r9,48
// setup

// setup 40h-protocol device
static void setup_40h(u8 cols, u8 rows) {
  // print_dbg("\r\n setup 40h device");
  mdesc.protocol = eProtocol40h;
800057e4:	f1 64 00 0c 	st.b	r8[12],r4

//----  function pointer arrays

// read serial and spawn events
static const read_serial_t readSerialFuncs[eProtocolNumProtocols] = {
  &read_serial_40h,
800057e8:	91 04       	st.w	r8[0x0],r4
/*   &grid_led_mext, */
/* }; */

// grid/map
static const grid_map_t gridMapFuncs[eProtocolNumProtocols] = {
  &grid_map_40h,
800057ea:	91 14       	st.w	r8[0x4],r4

//----  function pointer arrays

// read serial and spawn events
static const read_serial_t readSerialFuncs[eProtocolNumProtocols] = {
  &read_serial_40h,
800057ec:	fe ca 02 34 	sub	r10,pc,564
// set function pointers
static inline void set_funcs(void) {
  // print_dbg("\r\n setting monome functions, protocol idx: ");
  // print_dbg_ulong(mdesc.protocol);
  monome_read_serial = readSerialFuncs[mdesc.protocol];
  monome_grid_map = gridMapFuncs[mdesc.protocol];
800057f0:	fe c8 03 08 	sub	r8,pc,776
  monome_grid_level_map = gridMapFuncs[mdesc.protocol];
800057f4:	93 0a       	st.w	r9[0x0],r10
  monome_ring_map = ringMapFuncs[mdesc.protocol];
800057f6:	e0 69 1a d4 	mov	r9,6868
800057fa:	93 08       	st.w	r9[0x0],r8
  monome_set_intense = intenseFuncs[mdesc.protocol];
800057fc:	e0 69 1b e0 	mov	r9,7136
80005800:	93 08       	st.w	r9[0x0],r8
    if(buf[3] == 'h') {
      // this is a 40h
      setup_40h(8, 8);
      return 1;
    }
    if( strncmp(buf, "m64-", 4) == 0 ) {
80005802:	e0 68 1a d8 	mov	r8,6872
80005806:	fe c9 06 22 	sub	r9,pc,1570
8000580a:	91 04       	st.w	r8[0x0],r4
8000580c:	e0 68 1b dc 	mov	r8,7132
      // series 64
      setup_series(8, 8);
80005810:	91 04       	st.w	r8[0x0],r4
80005812:	c4 69       	rjmp	80005a9e <check_monome_device_desc+0x346>
      return 1;
    }
    if( strncmp(buf, "m128-", 5) == 0 ) {
80005814:	1a 97       	mov	r7,sp
80005816:	30 4a       	mov	r10,4
80005818:	fe cb bd e8 	sub	r11,pc,-16920
8000581c:	1a 9c       	mov	r12,sp
8000581e:	e0 a0 1b 23 	rcall	80008e64 <strncmp>
      // series 128
      setup_series(16, 8);
80005822:	c0 31       	brne	80005828 <check_monome_device_desc+0xd0>
80005824:	30 8b       	mov	r11,8
      return 1;
    }
    if( strncmp(buf, "m256-", 5) == 0 ) {
80005826:	c1 38       	rjmp	8000584c <check_monome_device_desc+0xf4>
80005828:	30 5a       	mov	r10,5
8000582a:	fe cb bd f2 	sub	r11,pc,-16910
8000582e:	1a 9c       	mov	r12,sp
80005830:	e0 a0 1b 1a 	rcall	80008e64 <strncmp>
      // series 256
      setup_series(16, 16);
80005834:	c0 41       	brne	8000583c <check_monome_device_desc+0xe4>
80005836:	30 8b       	mov	r11,8
80005838:	31 0c       	mov	r12,16
8000583a:	c0 a8       	rjmp	8000584e <check_monome_device_desc+0xf6>
  u8* prx;
  u8 w = 0;
  u8 busy;

  // print_dbg("\r\n setup mext device");
  mdesc.protocol = eProtocolMext;
8000583c:	1a 9c       	mov	r12,sp
8000583e:	30 5a       	mov	r10,5
80005840:	fe cb be 00 	sub	r11,pc,-16896

  mdesc.vari = 1;
80005844:	e0 a0 1b 10 	rcall	80008e64 <strncmp>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80005848:	c0 51       	brne	80005852 <check_monome_device_desc+0xfa>
8000584a:	31 0b       	mov	r11,16
8000584c:	16 9c       	mov	r12,r11
8000584e:	c5 bf       	rcall	80005704 <setup_series>
80005850:	c2 b9       	rjmp	80005aa6 <check_monome_device_desc+0x34e>

  rxBytes = 0;
80005852:	30 29       	mov	r9,2
80005854:	32 08       	mov	r8,32
80005856:	91 09       	st.w	r8[0x0],r9

  if(rxBytes != 6 ){
    print_dbg("\r\n got unexpected byte count in response to mext setup request;\r\n");
    print_dbg_ulong(*prx);
    
    for(;rxBytes != 0; rxBytes--) {
80005858:	30 19       	mov	r9,1
8000585a:	f1 69 00 0c 	st.b	r8[12],r9
}

// setup extended device, return success /failure of query
static u8 setup_mext(void) {
  u8* prx;
  u8 w = 0;
8000585e:	08 99       	mov	r9,r4
80005860:	e0 68 87 00 	mov	r8,34560
80005864:	ea 18 03 93 	orh	r8,0x393
80005868:	e0 67 07 d4 	mov	r7,2004
8000586c:	08 96       	mov	r6,r4

  mdesc.vari = 1;

  rxBytes = 0;

  while(rxBytes != 6) {
8000586e:	ae 85       	st.b	r7[0x0],r5
80005870:	0a 93       	mov	r3,r5
80005872:	e0 6a 03 e7 	mov	r10,999
80005876:	fa c5 ff ec 	sub	r5,sp,-20
8000587a:	30 0b       	mov	r11,0
8000587c:	0a f4       	st.b	--r5,r4
8000587e:	f0 0a 00 0a 	add	r10,r8,r10
80005882:	f2 0b 00 4b 	adc	r11,r9,r11
80005886:	30 64       	mov	r4,6
80005888:	e0 68 03 e8 	mov	r8,1000
8000588c:	30 09       	mov	r9,0
8000588e:	e0 a0 16 75 	rcall	80008578 <__avr32_udiv64>
80005892:	14 92       	mov	r2,r10
80005894:	c4 f8       	rjmp	80005932 <check_monome_device_desc+0x1da>
80005896:	d7 03       	nop
80005898:	e1 b8 00 42 	mfsr	r8,0x108
8000589c:	f0 02 00 0a 	add	r10,r8,r2
800058a0:	e1 b9 00 42 	mfsr	r9,0x108
800058a4:	14 38       	cp.w	r8,r10
800058a6:	e0 88 00 05 	brls	800058b0 <check_monome_device_desc+0x158>
800058aa:	10 39       	cp.w	r9,r8
800058ac:	cf a2       	brcc	800058a0 <check_monome_device_desc+0x148>
800058ae:	c0 48       	rjmp	800058b6 <check_monome_device_desc+0x15e>
800058b0:	10 39       	cp.w	r9,r8
800058b2:	e0 83 00 ff 	brlo	80005ab0 <check_monome_device_desc+0x358>
800058b6:	14 39       	cp.w	r9,r10
800058b8:	e0 8b 00 fc 	brhi	80005ab0 <check_monome_device_desc+0x358>
800058bc:	cf 2b       	rjmp	800058a0 <check_monome_device_desc+0x148>
800058be:	e1 b9 00 42 	mfsr	r9,0x108
800058c2:	14 38       	cp.w	r8,r10
800058c4:	e0 88 00 05 	brls	800058ce <check_monome_device_desc+0x176>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800058c8:	10 39       	cp.w	r9,r8
800058ca:	cf a2       	brcc	800058be <check_monome_device_desc+0x166>
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800058cc:	c0 48       	rjmp	800058d4 <check_monome_device_desc+0x17c>
800058ce:	10 39       	cp.w	r9,r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800058d0:	e0 83 00 f8 	brlo	80005ac0 <check_monome_device_desc+0x368>
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800058d4:	14 39       	cp.w	r9,r10
800058d6:	e0 8b 00 f5 	brhi	80005ac0 <check_monome_device_desc+0x368>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800058da:	cf 2b       	rjmp	800058be <check_monome_device_desc+0x166>
800058dc:	e1 b9 00 42 	mfsr	r9,0x108
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800058e0:	14 38       	cp.w	r8,r10
800058e2:	e0 88 00 05 	brls	800058ec <check_monome_device_desc+0x194>
800058e6:	10 39       	cp.w	r9,r8
800058e8:	cf a2       	brcc	800058dc <check_monome_device_desc+0x184>
800058ea:	c0 38       	rjmp	800058f0 <check_monome_device_desc+0x198>
800058ec:	10 39       	cp.w	r9,r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800058ee:	c0 43       	brcs	800058f6 <check_monome_device_desc+0x19e>
800058f0:	14 39       	cp.w	r9,r10
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800058f2:	fe 98 ff f5 	brls	800058dc <check_monome_device_desc+0x184>
800058f6:	cd 5d       	rcall	80005ca0 <ftdi_rx_busy>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800058f8:	cf f1       	brne	800058f6 <check_monome_device_desc+0x19e>
800058fa:	cc fd       	rcall	80005c98 <ftdi_rx_bytes>
800058fc:	ae 8c       	st.b	r7[0x0],r12
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800058fe:	e8 0c 18 00 	cp.b	r12,r4
80005902:	c1 80       	breq	80005932 <check_monome_device_desc+0x1da>
80005904:	fe cc be bc 	sub	r12,pc,-16708
80005908:	e0 a0 12 8a 	rcall	80007e1c <print_dbg>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000590c:	0d 8c       	ld.ub	r12,r6[0x0]
8000590e:	e0 a0 12 81 	rcall	80007e10 <print_dbg_ulong>
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005912:	c0 c8       	rjmp	8000592a <check_monome_device_desc+0x1d2>
80005914:	2f f6       	sub	r6,-1
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005916:	0d 8c       	ld.ub	r12,r6[0x0]
80005918:	e0 a0 12 7c 	rcall	80007e10 <print_dbg_ulong>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000591c:	fe cc bf a4 	sub	r12,pc,-16476
80005920:	e0 a0 12 7e 	rcall	80007e1c <print_dbg>
80005924:	0f 88       	ld.ub	r8,r7[0x0]

  // print_dbg("\r\n setup request ftdi read; waiting...");

  //  while(ftdi_rx_busy()) {;;}
  while(busy) {
    busy = ftdi_rx_busy();
80005926:	20 18       	sub	r8,1
80005928:	ae 88       	st.b	r7[0x0],r8
  busy = 1;

  // print_dbg("\r\n setup request ftdi read; waiting...");

  //  while(ftdi_rx_busy()) {;;}
  while(busy) {
8000592a:	0f 88       	ld.ub	r8,r7[0x0]
    busy = ftdi_rx_busy();
    // print_dbg("\r\n waiting for transfer complete; busy flag: ");
    // print_dbg_ulong(busy);
    
  }
  rxBytes = ftdi_rx_bytes();
8000592c:	e6 08 18 00 	cp.b	r8,r3
80005930:	cf 21       	brne	80005914 <check_monome_device_desc+0x1bc>

  // print_dbg(" done waiting. bytes read: ");
  // print_dbg_ulong(rxBytes);

  if(rxBytes != 6 ){
80005932:	0f 88       	ld.ub	r8,r7[0x0]
80005934:	e8 08 18 00 	cp.b	r8,r4
    print_dbg("\r\n got unexpected byte count in response to mext setup request;\r\n");
80005938:	cb 01       	brne	80005898 <check_monome_device_desc+0x140>
8000593a:	ca bd       	rcall	80005c90 <ftdi_rx_buf>
8000593c:	30 1a       	mov	r10,1
    print_dbg_ulong(*prx);
8000593e:	f8 c7 ff ff 	sub	r7,r12,-1
80005942:	0f 8c       	ld.ub	r12,r7[0x0]
80005944:	f4 0c 18 00 	cp.b	r12,r10
    
    for(;rxBytes != 0; rxBytes--) {
      print_dbg_ulong(*(++prx));
80005948:	c2 41       	brne	80005990 <check_monome_device_desc+0x238>
8000594a:	32 08       	mov	r8,32
8000594c:	30 0c       	mov	r12,0
      print_dbg(" ");
8000594e:	91 1c       	st.w	r8[0x4],r12
80005950:	0f 99       	ld.ub	r9,r7[0x1]
80005952:	f4 09 18 00 	cp.b	r9,r10

  if(rxBytes != 6 ){
    print_dbg("\r\n got unexpected byte count in response to mext setup request;\r\n");
    print_dbg_ulong(*prx);
    
    for(;rxBytes != 0; rxBytes--) {
80005956:	c0 31       	brne	8000595c <check_monome_device_desc+0x204>
80005958:	30 89       	mov	r9,8
8000595a:	c1 28       	rjmp	8000597e <check_monome_device_desc+0x226>
8000595c:	30 2a       	mov	r10,2
8000595e:	f4 09 18 00 	cp.b	r9,r10

  mdesc.vari = 1;

  rxBytes = 0;

  while(rxBytes != 6) {
80005962:	c0 81       	brne	80005972 <check_monome_device_desc+0x21a>
80005964:	30 89       	mov	r9,8
80005966:	f1 69 00 09 	st.b	r8[9],r9

    // return 0;
    }
  }
  
  prx = ftdi_rx_buf();
8000596a:	31 09       	mov	r9,16
8000596c:	f1 69 00 08 	st.b	r8[8],r9
  prx++; // 1st returned byte is 0
80005970:	c0 b8       	rjmp	80005986 <check_monome_device_desc+0x22e>
80005972:	30 4a       	mov	r10,4
  if(*prx == 1) {
80005974:	f4 09 18 00 	cp.b	r9,r10
80005978:	e0 81 00 9a 	brne	80005aac <check_monome_device_desc+0x354>
    mdesc.device = eDeviceGrid;
8000597c:	31 09       	mov	r9,16
8000597e:	f1 69 00 08 	st.b	r8[8],r9
    prx++;
    if(*prx == 1) {
80005982:	f1 69 00 09 	st.b	r8[9],r9
80005986:	30 19       	mov	r9,1
80005988:	32 08       	mov	r8,32
      // print_dbg("\r\n monome 64");
      mdesc.rows = 8;
8000598a:	f1 69 00 0b 	st.b	r8[11],r9
      mdesc.cols = 8;
    }
    else if(*prx == 2) {
8000598e:	c1 d8       	rjmp	800059c8 <check_monome_device_desc+0x270>
80005990:	2f f7       	sub	r7,-1
80005992:	30 58       	mov	r8,5
80005994:	f0 0c 18 00 	cp.b	r12,r8
      // print_dbg("\r\n monome 128");
      mdesc.rows = 8;
80005998:	c0 f1       	brne	800059b6 <check_monome_device_desc+0x25e>
8000599a:	30 19       	mov	r9,1
      mdesc.cols = 16;
8000599c:	32 08       	mov	r8,32
8000599e:	91 19       	st.w	r8[0x4],r9
800059a0:	0f 89       	ld.ub	r9,r7[0x0]
800059a2:	fe cc bf 16 	sub	r12,pc,-16618
    }
    else if(*prx == 4) {
800059a6:	f1 69 00 0a 	st.b	r8[10],r9
800059aa:	e0 a0 12 39 	rcall	80007e1c <print_dbg>
      // print_dbg("\r\n monome 256");
      mdesc.rows = 16; 
800059ae:	0f 8c       	ld.ub	r12,r7[0x0]
      mdesc.cols = 16;
800059b0:	e0 a0 12 30 	rcall	80007e10 <print_dbg_ulong>
      mdesc.rows = 8;
      mdesc.cols = 16;
    }
    else if(*prx == 4) {
      // print_dbg("\r\n monome 256");
      mdesc.rows = 16; 
800059b4:	c0 a8       	rjmp	800059c8 <check_monome_device_desc+0x270>
800059b6:	e0 a0 12 0f 	rcall	80007dd4 <print_dbg_hex>
      mdesc.cols = 16;
    }
    else {
      return 0; // bail
    }		
    mdesc.tilt = 1;
800059ba:	0f 8c       	ld.ub	r12,r7[0x0]
800059bc:	e0 a0 12 0c 	rcall	80007dd4 <print_dbg_hex>
800059c0:	0f 9c       	ld.ub	r12,r7[0x1]
800059c2:	e0 a0 12 09 	rcall	80007dd4 <print_dbg_hex>
  }
  else if(*prx == 5) {
800059c6:	c7 28       	rjmp	80005aaa <check_monome_device_desc+0x352>
800059c8:	30 18       	mov	r8,1
800059ca:	fb 68 00 13 	st.b	sp[19],r8
    mdesc.device = eDeviceArc;
800059ce:	e1 b8 00 42 	mfsr	r8,0x108
    mdesc.encs = *(++prx);
800059d2:	f0 02 00 0a 	add	r10,r8,r2
800059d6:	e1 b9 00 42 	mfsr	r9,0x108
    print_dbg("\r\n monome arc ");
800059da:	14 38       	cp.w	r8,r10
800059dc:	e0 88 00 05 	brls	800059e6 <check_monome_device_desc+0x28e>
    print_dbg_ulong(*prx);
800059e0:	10 39       	cp.w	r9,r8
800059e2:	cf a2       	brcc	800059d6 <check_monome_device_desc+0x27e>
800059e4:	c0 38       	rjmp	800059ea <check_monome_device_desc+0x292>
  } else {
    print_dbg_hex(*prx);
800059e6:	10 39       	cp.w	r9,r8
800059e8:	c7 23       	brcs	80005acc <check_monome_device_desc+0x374>
    print_dbg_hex(*(++prx));
800059ea:	14 39       	cp.w	r9,r10
800059ec:	e0 8b 00 70 	brhi	80005acc <check_monome_device_desc+0x374>
    print_dbg_hex(*(++prx));
800059f0:	cf 3b       	rjmp	800059d6 <check_monome_device_desc+0x27e>
800059f2:	e1 b9 00 42 	mfsr	r9,0x108
800059f6:	14 38       	cp.w	r8,r10
    return 0; // bail
  }

  // get id
  w = 1;
800059f8:	e0 88 00 05 	brls	80005a02 <check_monome_device_desc+0x2aa>
800059fc:	10 39       	cp.w	r9,r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800059fe:	cf a2       	brcc	800059f2 <check_monome_device_desc+0x29a>
80005a00:	c0 38       	rjmp	80005a06 <check_monome_device_desc+0x2ae>
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005a02:	10 39       	cp.w	r9,r8
80005a04:	c6 d3       	brcs	80005ade <check_monome_device_desc+0x386>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005a06:	14 39       	cp.w	r9,r10
80005a08:	e0 8b 00 6b 	brhi	80005ade <check_monome_device_desc+0x386>
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005a0c:	cf 3b       	rjmp	800059f2 <check_monome_device_desc+0x29a>
80005a0e:	e1 b9 00 42 	mfsr	r9,0x108
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005a12:	04 38       	cp.w	r8,r2
80005a14:	e0 88 00 06 	brls	80005a20 <check_monome_device_desc+0x2c8>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005a18:	10 39       	cp.w	r9,r8
80005a1a:	cf a2       	brcc	80005a0e <check_monome_device_desc+0x2b6>
80005a1c:	c0 48       	rjmp	80005a24 <check_monome_device_desc+0x2cc>
80005a1e:	d7 03       	nop
80005a20:	10 39       	cp.w	r9,r8
80005a22:	c0 43       	brcs	80005a2a <check_monome_device_desc+0x2d2>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005a24:	04 39       	cp.w	r9,r2
80005a26:	fe 98 ff f4 	brls	80005a0e <check_monome_device_desc+0x2b6>
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005a2a:	c3 bd       	rcall	80005ca0 <ftdi_rx_busy>
80005a2c:	18 97       	mov	r7,r12
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005a2e:	cf e1       	brne	80005a2a <check_monome_device_desc+0x2d2>
80005a30:	c3 4d       	rcall	80005c98 <ftdi_rx_bytes>
80005a32:	e0 68 07 d4 	mov	r8,2004
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005a36:	b0 8c       	st.b	r8[0x0],r12
80005a38:	c2 cd       	rcall	80005c90 <ftdi_rx_buf>
80005a3a:	36 b8       	mov	r8,107
80005a3c:	19 a9       	ld.ub	r9,r12[0x2]
80005a3e:	f0 09 18 00 	cp.b	r9,r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005a42:	c0 41       	brne	80005a4a <check_monome_device_desc+0x2f2>
80005a44:	32 08       	mov	r8,32
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005a46:	f1 67 00 0c 	st.b	r8[12],r7
80005a4a:	fe c9 c0 5a 	sub	r9,pc,-16294
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005a4e:	32 08       	mov	r8,32
80005a50:	70 1a       	ld.w	r10,r8[0x4]
80005a52:	70 08       	ld.w	r8,r8[0x0]
80005a54:	f2 08 03 2b 	ld.w	r11,r9[r8<<0x2]
80005a58:	33 09       	mov	r9,48
80005a5a:	93 0b       	st.w	r9[0x0],r11
80005a5c:	e0 6b 1a d4 	mov	r11,6868
80005a60:	fe c9 bf b8 	sub	r9,pc,-16456
80005a64:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
80005a68:	97 09       	st.w	r11[0x0],r9
80005a6a:	e0 6b 1b e0 	mov	r11,7136
80005a6e:	97 09       	st.w	r11[0x0],r9
80005a70:	fe c9 c0 68 	sub	r9,pc,-16280
80005a74:	f2 08 03 2b 	ld.w	r11,r9[r8<<0x2]
80005a78:	e0 69 1a d8 	mov	r9,6872
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005a7c:	93 0b       	st.w	r9[0x0],r11
80005a7e:	fe c9 bf e2 	sub	r9,pc,-16414
80005a82:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
  delay_ms(1);
  ftdi_read();
  delay_ms(1);
  busy = 1;
  while(busy) {
    busy = ftdi_rx_busy();
80005a86:	e0 68 1b dc 	mov	r8,7132
80005a8a:	58 1a       	cp.w	r10,1
  ftdi_write(&w, 1);
  delay_ms(1);
  ftdi_read();
  delay_ms(1);
  busy = 1;
  while(busy) {
80005a8c:	f9 ba 01 00 	movne	r10,0
    busy = ftdi_rx_busy();
  }
  rxBytes = ftdi_rx_bytes();
80005a90:	f9 ba 00 04 	moveq	r10,4
80005a94:	91 09       	st.w	r8[0x0],r9
  prx = ftdi_rx_buf();
80005a96:	fe c8 c0 9a 	sub	r8,pc,-16230
  if(*(prx+2) == 'k')
80005a9a:	f0 0a 03 09 	ld.w	r9,r8[r10]
80005a9e:	e0 68 1a d0 	mov	r8,6864
80005aa2:	91 09       	st.w	r8[0x0],r9
      mdesc.vari = 0;
80005aa4:	c1 ce       	rcall	800056dc <monome_connect_write_event>
80005aa6:	30 1c       	mov	r12,1
80005aa8:	c0 28       	rjmp	80005aac <check_monome_device_desc+0x354>

// set function pointers
static inline void set_funcs(void) {
  // print_dbg("\r\n setting monome functions, protocol idx: ");
  // print_dbg_ulong(mdesc.protocol);
  monome_read_serial = readSerialFuncs[mdesc.protocol];
80005aaa:	30 0c       	mov	r12,0
80005aac:	2f bd       	sub	sp,-20
  monome_grid_map = gridMapFuncs[mdesc.protocol];
  monome_grid_level_map = gridMapFuncs[mdesc.protocol];
  monome_ring_map = ringMapFuncs[mdesc.protocol];
  monome_set_intense = intenseFuncs[mdesc.protocol];
  monome_refresh = refreshFuncs[mdesc.device == eDeviceArc];   // toggle on grid vs arc
80005aae:	d8 32       	popm	r0-r7,pc

// set function pointers
static inline void set_funcs(void) {
  // print_dbg("\r\n setting monome functions, protocol idx: ");
  // print_dbg_ulong(mdesc.protocol);
  monome_read_serial = readSerialFuncs[mdesc.protocol];
80005ab0:	30 1b       	mov	r11,1
80005ab2:	0a 9c       	mov	r12,r5
80005ab4:	c3 6d       	rcall	80005d20 <ftdi_write>
80005ab6:	e1 b8 00 42 	mfsr	r8,0x108
  monome_grid_map = gridMapFuncs[mdesc.protocol];
80005aba:	f0 02 00 0a 	add	r10,r8,r2
80005abe:	c0 0b       	rjmp	800058be <check_monome_device_desc+0x166>
80005ac0:	c1 ad       	rcall	80005cf4 <ftdi_read>
80005ac2:	e1 b8 00 42 	mfsr	r8,0x108
  monome_grid_level_map = gridMapFuncs[mdesc.protocol];
80005ac6:	f0 02 00 0a 	add	r10,r8,r2
  monome_ring_map = ringMapFuncs[mdesc.protocol];
80005aca:	c0 9b       	rjmp	800058dc <check_monome_device_desc+0x184>
80005acc:	30 1b       	mov	r11,1
80005ace:	fa cc ff ed 	sub	r12,sp,-19
  monome_set_intense = intenseFuncs[mdesc.protocol];
80005ad2:	c2 7d       	rcall	80005d20 <ftdi_write>
80005ad4:	e1 b8 00 42 	mfsr	r8,0x108
80005ad8:	f0 02 00 0a 	add	r10,r8,r2
  monome_refresh = refreshFuncs[mdesc.device == eDeviceArc];   // toggle on grid vs arc
80005adc:	c8 bb       	rjmp	800059f2 <check_monome_device_desc+0x29a>
80005ade:	c0 bd       	rcall	80005cf4 <ftdi_read>
80005ae0:	e1 b8 00 42 	mfsr	r8,0x108
  // print_dbg_ulong(mdesc.protocol);
  monome_read_serial = readSerialFuncs[mdesc.protocol];
  monome_grid_map = gridMapFuncs[mdesc.protocol];
  monome_grid_level_map = gridMapFuncs[mdesc.protocol];
  monome_ring_map = ringMapFuncs[mdesc.protocol];
  monome_set_intense = intenseFuncs[mdesc.protocol];
80005ae4:	f0 02 00 02 	add	r2,r8,r2
  monome_refresh = refreshFuncs[mdesc.device == eDeviceArc];   // toggle on grid vs arc
80005ae8:	c9 3b       	rjmp	80005a0e <check_monome_device_desc+0x2b6>
80005aea:	d7 03       	nop

80005aec <process_timers>:
   tail = NULL;
   num = 0;
}

// process the timer list, presumably from TC interrupt
void process_timers( void ) {
80005aec:	d4 21       	pushm	r4-r7,lr
  u32 i;
  volatile softTimer_t* t = head;
80005aee:	e0 68 07 d8 	mov	r8,2008

  //  print_dbg("\r\n processing timers. head: 0x");
  //  print_dbg_hex((u32)head);

  // ... important...  
  if ( (head == NULL) || (tail == NULL) || (num == 0) ) { 
80005af2:	70 07       	ld.w	r7,r8[0x0]
80005af4:	58 07       	cp.w	r7,0
80005af6:	c1 d0       	breq	80005b30 <process_timers+0x44>
80005af8:	e0 68 07 e0 	mov	r8,2016
80005afc:	70 08       	ld.w	r8,r8[0x0]
80005afe:	58 08       	cp.w	r8,0
80005b00:	c1 80       	breq	80005b30 <process_timers+0x44>
80005b02:	e0 65 07 dc 	mov	r5,2012
80005b06:	6a 08       	ld.w	r8,r5[0x0]
80005b08:	58 08       	cp.w	r8,0
    //    print_dbg("\r\n processing empty timer list");
    return; 
  }

  for(i = 0; i<num; ++i) {
    --(t->ticksRemain);
80005b0a:	c1 30       	breq	80005b30 <process_timers+0x44>
80005b0c:	30 06       	mov	r6,0
80005b0e:	c0 e8       	rjmp	80005b2a <process_timers+0x3e>
  if ( (head == NULL) || (tail == NULL) || (num == 0) ) { 
    //    print_dbg("\r\n processing empty timer list");
    return; 
  }

  for(i = 0; i<num; ++i) {
80005b10:	6e 08       	ld.w	r8,r7[0x0]
    --(t->ticksRemain);
    if(t->ticksRemain == 0) {
80005b12:	20 18       	sub	r8,1
80005b14:	8f 08       	st.w	r7[0x0],r8
80005b16:	2f f6       	sub	r6,-1
      (*(t->callback))(t->caller);   
80005b18:	6e 08       	ld.w	r8,r7[0x0]
80005b1a:	58 08       	cp.w	r8,0
80005b1c:	c0 61       	brne	80005b28 <process_timers+0x3c>
      t->ticksRemain = t->ticks;
80005b1e:	6e 28       	ld.w	r8,r7[0x8]
80005b20:	6e 5c       	ld.w	r12,r7[0x14]
      //      print_dbg("\r\n triggered timer callback @ 0x");
      //      print_dbg_hex((u32)t);
    }
    t = t->next;
80005b22:	5d 18       	icall	r8
  if ( (head == NULL) || (tail == NULL) || (num == 0) ) { 
    //    print_dbg("\r\n processing empty timer list");
    return; 
  }

  for(i = 0; i<num; ++i) {
80005b24:	6e 18       	ld.w	r8,r7[0x4]
80005b26:	8f 08       	st.w	r7[0x0],r8
80005b28:	6e 37       	ld.w	r7,r7[0xc]
80005b2a:	6a 08       	ld.w	r8,r5[0x0]
80005b2c:	10 36       	cp.w	r6,r8
80005b2e:	cf 13       	brcs	80005b10 <process_timers+0x24>
80005b30:	d8 22       	popm	r4-r7,pc
80005b32:	d7 03       	nop

80005b34 <timer_set>:
80005b34:	99 1b       	st.w	r12[0x4],r11
80005b36:	78 08       	ld.w	r8,r12[0x0]
}


void timer_set(softTimer_t* timer, u32 ticks) {
  timer->ticks = ticks;
  if(timer->ticksRemain > ticks) timer->ticksRemain = ticks;
80005b38:	16 38       	cp.w	r8,r11
80005b3a:	5e 8c       	retls	r12
80005b3c:	99 0b       	st.w	r12[0x0],r11
80005b3e:	5e fc       	retal	r12

80005b40 <timer_remove>:
  int i;
  volatile softTimer_t* pt = NULL;
  u8 found = 0;

  // disable timer interrupts
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);
80005b40:	d3 43       	ssrf	0x14


  // not linked
  if( (t->next == NULL) || (t->prev == NULL)) { return 0; }
80005b42:	78 38       	ld.w	r8,r12[0xc]
80005b44:	58 08       	cp.w	r8,0
80005b46:	c3 20       	breq	80005baa <timer_remove+0x6a>
80005b48:	78 48       	ld.w	r8,r12[0x10]
80005b4a:	58 08       	cp.w	r8,0
80005b4c:	c2 f0       	breq	80005baa <timer_remove+0x6a>

  // check head
  if(t == head) { 
80005b4e:	e0 69 07 d8 	mov	r9,2008
80005b52:	72 08       	ld.w	r8,r9[0x0]
80005b54:	10 3c       	cp.w	r12,r8
    found = 1;
    head = t->next;
80005b56:	c0 31       	brne	80005b5c <timer_remove+0x1c>
80005b58:	78 38       	ld.w	r8,r12[0xc]
  }
  // check tail
  else if(t == tail) { 
80005b5a:	c0 b8       	rjmp	80005b70 <timer_remove+0x30>
80005b5c:	e0 69 07 e0 	mov	r9,2016
80005b60:	72 0a       	ld.w	r10,r9[0x0]
80005b62:	14 3c       	cp.w	r12,r10
    found = 1;
    tail = t->prev; 
  } else {
    // search 
    pt = head;
    for(i=0; i<num; ++i) {
80005b64:	c0 50       	breq	80005b6e <timer_remove+0x2e>
80005b66:	30 09       	mov	r9,0
    head = t->next;
  }
  // check tail
  else if(t == tail) { 
    found = 1;
    tail = t->prev; 
80005b68:	e0 6a 07 dc 	mov	r10,2012
80005b6c:	c0 88       	rjmp	80005b7c <timer_remove+0x3c>
  } else {
    // search 
    pt = head;
    for(i=0; i<num; ++i) {
      if(pt == t) {
80005b6e:	78 48       	ld.w	r8,r12[0x10]
80005b70:	93 08       	st.w	r9[0x0],r8
	// found it
	found = 1;
	break;
      }
      pt = pt->next;
80005b72:	c0 a8       	rjmp	80005b86 <timer_remove+0x46>
    found = 1;
    tail = t->prev; 
  } else {
    // search 
    pt = head;
    for(i=0; i<num; ++i) {
80005b74:	18 38       	cp.w	r8,r12
80005b76:	c0 80       	breq	80005b86 <timer_remove+0x46>
80005b78:	70 38       	ld.w	r8,r8[0xc]
80005b7a:	2f f9       	sub	r9,-1
80005b7c:	74 0b       	ld.w	r11,r10[0x0]
80005b7e:	16 39       	cp.w	r9,r11
      pt = pt->next;
    }
  }
  if(found) {
    // unlink and decrement
    (t->next)->prev = t->prev;
80005b80:	cf a3       	brcs	80005b74 <timer_remove+0x34>
80005b82:	30 0c       	mov	r12,0
80005b84:	c1 18       	rjmp	80005ba6 <timer_remove+0x66>
    (t->prev)->next = t->next;
80005b86:	78 38       	ld.w	r8,r12[0xc]
80005b88:	78 49       	ld.w	r9,r12[0x10]
80005b8a:	91 49       	st.w	r8[0x10],r9
    t->next = t->prev = 0;
80005b8c:	78 48       	ld.w	r8,r12[0x10]
80005b8e:	78 39       	ld.w	r9,r12[0xc]
80005b90:	91 39       	st.w	r8[0xc],r9
80005b92:	30 08       	mov	r8,0
    --num;
80005b94:	99 48       	st.w	r12[0x10],r8
80005b96:	78 48       	ld.w	r8,r12[0x10]
80005b98:	99 38       	st.w	r12[0xc],r8
80005b9a:	e0 68 07 dc 	mov	r8,2012
  }

  // enable timer interrupts
  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
80005b9e:	30 1c       	mov	r12,1
  return found;
80005ba0:	70 09       	ld.w	r9,r8[0x0]
80005ba2:	20 19       	sub	r9,1
80005ba4:	91 09       	st.w	r8[0x0],r9
80005ba6:	d5 43       	csrf	0x14
80005ba8:	5e fc       	retal	r12
80005baa:	5e fd       	retal	0

80005bac <timer_add>:
80005bac:	d4 21       	pushm	r4-r7,lr
80005bae:	d3 43       	ssrf	0x14
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);

  // print_dbg("\r\n timer_add, @ 0x");
  // print_dbg_hex((u32)t);

  if(t->prev == NULL || t->next == NULL) {
80005bb0:	78 48       	ld.w	r8,r12[0x10]
80005bb2:	58 08       	cp.w	r8,0
80005bb4:	c0 60       	breq	80005bc0 <timer_add+0x14>
80005bb6:	78 38       	ld.w	r8,r12[0xc]
80005bb8:	58 08       	cp.w	r8,0
80005bba:	c0 30       	breq	80005bc0 <timer_add+0x14>
80005bbc:	30 0c       	mov	r12,0
80005bbe:	c2 a8       	rjmp	80005c12 <timer_add+0x66>
    // print_dbg(" ; timer is unlinked ");
    // is list empty?
    if( (head == NULL) || (tail == NULL)) {
80005bc0:	e0 68 07 d8 	mov	r8,2008
80005bc4:	70 08       	ld.w	r8,r8[0x0]
80005bc6:	58 08       	cp.w	r8,0
80005bc8:	c0 60       	breq	80005bd4 <timer_add+0x28>
80005bca:	e0 67 07 e0 	mov	r7,2016
80005bce:	6e 0e       	ld.w	lr,r7[0x0]
      // print_dbg(" ; list was empty ");
      head = tail = t;
80005bd0:	58 0e       	cp.w	lr,0
80005bd2:	c0 e1       	brne	80005bee <timer_add+0x42>
80005bd4:	e0 68 07 e0 	mov	r8,2016
      t->next = t->prev = t;
80005bd8:	91 0c       	st.w	r8[0x0],r12
80005bda:	e0 68 07 d8 	mov	r8,2008
80005bde:	91 0c       	st.w	r8[0x0],r12
      num = 1;
80005be0:	99 4c       	st.w	r12[0x10],r12
80005be2:	78 48       	ld.w	r8,r12[0x10]
      // print_dbg(" ; added timer as sole element ");

    } else {
      // list not empty, add to tail
      tail->next = t;
80005be4:	30 1e       	mov	lr,1
      head->prev = t;
80005be6:	99 38       	st.w	r12[0xc],r8
      t->prev = tail;
80005be8:	e0 68 07 dc 	mov	r8,2012
      t->next = head;
      tail = t;
80005bec:	c0 a8       	rjmp	80005c00 <timer_add+0x54>
      ++num; 
80005bee:	9d 3c       	st.w	lr[0xc],r12
80005bf0:	91 4c       	st.w	r8[0x10],r12
80005bf2:	99 4e       	st.w	r12[0x10],lr
80005bf4:	99 38       	st.w	r12[0xc],r8

    } 
    t->callback = callback; 
80005bf6:	8f 0c       	st.w	r7[0x0],r12
    t->caller = obj;
80005bf8:	e0 68 07 dc 	mov	r8,2012
    if(ticks < 1) { ticks = 1; }
80005bfc:	70 0e       	ld.w	lr,r8[0x0]
80005bfe:	2f fe       	sub	lr,-1
    t->ticksRemain = ticks;
80005c00:	91 0e       	st.w	r8[0x0],lr
    t->ticks = ticks;
80005c02:	99 2a       	st.w	r12[0x8],r10
80005c04:	99 59       	st.w	r12[0x14],r9
    // print_dbg(" ; timer was already linked, aborting ");
    ret = 0;
  }

  // enable timer interrupts
  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
80005c06:	58 0b       	cp.w	r11,0
  return ret;
}
80005c08:	f9 bb 00 01 	moveq	r11,1
80005c0c:	99 0b       	st.w	r12[0x0],r11
80005c0e:	99 1b       	st.w	r12[0x4],r11
80005c10:	30 1c       	mov	r12,1
80005c12:	d5 43       	csrf	0x14
80005c14:	d8 22       	popm	r4-r7,pc
80005c16:	d7 03       	nop

80005c18 <usb_mode_change>:
   */

// usb mode change callback
void usb_mode_change(bool b_host_mode) {
  // print_dbg("\r\n mode change (ignore) ");
}
80005c18:	5e fc       	retal	r12

80005c1a <usb_vbus_change>:
 
// usb Vbus change callback
void usb_vbus_change(bool b_vbus_present) {
  // print_dbg("\r\n usb vbus change, new status: ");
  // print_dbg_ulong(b_vbus_present);
}
80005c1a:	5e fc       	retal	r12

80005c1c <usb_vbus_error>:

// usb vbus error callback
void usb_vbus_error(void) {
  // print_dbg("\r\n ******************* usb vbus error");

}
80005c1c:	5e fc       	retal	r12

80005c1e <usb_connection>:
void usb_connection(uhc_device_t *dev, bool b_present) {
    // print_dbg("\r\n usb device connection: ");
    // print_dbg_hex(dev);
    // print_dbg(" , ");
    // print_dbg_ulong(b_present);
}
80005c1e:	5e fc       	retal	r12

80005c20 <usb_wakeup>:

// usb wakeup callback
void usb_wakeup(void) {
    // print_dbg("\r\n usb wakeup");
}
80005c20:	5e fc       	retal	r12

80005c22 <usb_sof>:

// usb start-of-frame callback
void usb_sof(void) {
     // print_dbg("\r\n usb sof");
}
80005c22:	5e fc       	retal	r12

80005c24 <usb_enum>:
  // print_dbg("\r\n usb enumerated: ");
  // print_dbg_hex(dev);
  // print_dbg(" , ");
  // print_dbg_hex(status);

}
80005c24:	5e fc       	retal	r12
80005c26:	d7 03       	nop

80005c28 <rnd>:
#include "types.h"
#include "util.h"

u32 rnd(void) {
  x1 = x1 * c1 + a1;
80005c28:	33 49       	mov	r9,52
80005c2a:	e0 6b f3 5f 	mov	r11,62303
80005c2e:	ea 1b 3c 6e 	orh	r11,0x3c6e
80005c32:	72 08       	ld.w	r8,r9[0x0]
80005c34:	e0 6a 66 0d 	mov	r10,26125
80005c38:	ea 1a 00 19 	orh	r10,0x19
80005c3c:	b7 38       	mul	r8,r11
80005c3e:	14 08       	add	r8,r10
80005c40:	93 08       	st.w	r9[0x0],r8
  x2 = x2 * c2 + a2;
80005c42:	33 88       	mov	r8,56
80005c44:	70 0c       	ld.w	r12,r8[0x0]
80005c46:	f8 0b 03 4a 	mac	r10,r12,r11
80005c4a:	91 0a       	st.w	r8[0x0],r10
  return (x1>>16) | (x2>>16);
80005c4c:	72 09       	ld.w	r9,r9[0x0]
80005c4e:	70 0c       	ld.w	r12,r8[0x0]
80005c50:	f2 08 16 10 	lsr	r8,r9,0x10
}
80005c54:	f1 ec 13 0c 	or	r12,r8,r12>>0x10
80005c58:	5e fc       	retal	r12
80005c5a:	d7 03       	nop

80005c5c <ftdi_rx_done>:
//------- static functions

static void ftdi_rx_done(  usb_add_t add,
			   usb_ep_t ep,
			   uhd_trans_status_t stat,
			   iram_size_t nb) {
80005c5c:	d4 01       	pushm	lr
  status = stat;
80005c5e:	e0 68 08 38 	mov	r8,2104
  rxBusy = 0;
80005c62:	91 0a       	st.w	r8[0x0],r10
  rxBytes = nb - FTDI_STATUS_BYTES;
80005c64:	e0 68 08 28 	mov	r8,2088
static void ftdi_rx_done(  usb_add_t add,
			   usb_ep_t ep,
			   uhd_trans_status_t stat,
			   iram_size_t nb) {
  status = stat;
  rxBusy = 0;
80005c68:	20 29       	sub	r9,2
  rxBytes = nb - FTDI_STATUS_BYTES;
80005c6a:	30 0a       	mov	r10,0
80005c6c:	b0 8a       	st.b	r8[0x0],r10
  /* print_dbg_ulong(nb); */
  /* print_dbg(" ; status bytes: 0x"); */
  /* print_dbg_hex(rxBuf[0]); */
  /* print_dbg(" 0x"); */
  /* print_dbg_hex(rxBuf[1]); */			    
  if(rxBytes) {
80005c6e:	e0 68 08 2c 	mov	r8,2092
    // check for monome events
    //    if(monome_read_serial != NULL) { 
      (*monome_read_serial)(); 
80005c72:	91 09       	st.w	r8[0x0],r9
80005c74:	58 09       	cp.w	r9,0
80005c76:	c0 40       	breq	80005c7e <ftdi_rx_done+0x22>
80005c78:	33 08       	mov	r8,48
80005c7a:	70 08       	ld.w	r8,r8[0x0]
80005c7c:	5d 18       	icall	r8
80005c7e:	d8 02       	popm	pc

80005c80 <ftdi_tx_done>:
80005c80:	e0 68 08 38 	mov	r8,2104
80005c84:	30 09       	mov	r9,0
80005c86:	91 0a       	st.w	r8[0x0],r10
80005c88:	e0 68 07 e4 	mov	r8,2020
  if (status != UHD_TRANS_NOERROR) {
    // print_dbg("\r\n ftdi tx error");
    return;
  }
  
}
80005c8c:	b0 89       	st.b	r8[0x0],r9
80005c8e:	5e fc       	retal	r12

80005c90 <ftdi_rx_buf>:
80005c90:	e0 6c 07 e8 	mov	r12,2024


// rx buffer (no status bytes)
extern u8* ftdi_rx_buf() {
  return rxBuf + 2;
}
80005c94:	2f ec       	sub	r12,-2
80005c96:	5e fc       	retal	r12

80005c98 <ftdi_rx_bytes>:
80005c98:	e0 68 08 2c 	mov	r8,2092

// number of bytes from last rx trasnfer
extern volatile u8 ftdi_rx_bytes() {
  return rxBytes;
}
80005c9c:	11 bc       	ld.ub	r12,r8[0x3]
80005c9e:	5e fc       	retal	r12

80005ca0 <ftdi_rx_busy>:
80005ca0:	e0 68 08 28 	mov	r8,2088

// busy flags
extern volatile u8 ftdi_rx_busy() {
  return rxBusy;
}
80005ca4:	11 8c       	ld.ub	r12,r8[0x0]
80005ca6:	5e fc       	retal	r12

80005ca8 <ftdi_tx_busy>:
80005ca8:	e0 68 07 e4 	mov	r8,2020

extern volatile u8 ftdi_tx_busy() {
  return txBusy;
}
80005cac:	11 8c       	ld.ub	r12,r8[0x0]
80005cae:	5e fc       	retal	r12

80005cb0 <ftdi_setup>:
80005cb0:	d4 01       	pushm	lr
80005cb2:	20 3d       	sub	sp,12
  char * serstr;
  //  u8 matchMonome;
  // print_dbg("\r\n FTDI setup routine");

  // get string data...
  ftdi_get_strings(&manstr, &prodstr, &serstr);  
80005cb4:	1a 9a       	mov	r10,sp
80005cb6:	fa cb ff fc 	sub	r11,sp,-4
80005cba:	fa cc ff f8 	sub	r12,sp,-8
80005cbe:	c5 bc       	rcall	80005d74 <ftdi_get_strings>
80005cc0:	40 0a       	lddsp	r10,sp[0x0]
  // print the strings
  // print_unicode_string(manstr, FTDI_STRING_MAX_LEN);
  //  print_unicode_string(prodstr, FTDI_STRING_MAX_LEN);
  //  print_unicode_string(serstr, FTDI_STRING_MAX_LEN);
  //// query if this is a monome device
  check_monome_device_desc(manstr, prodstr, serstr);
80005cc2:	40 1b       	lddsp	r11,sp[0x4]
80005cc4:	40 2c       	lddsp	r12,sp[0x8]
80005cc6:	fe b0 fd 49 	rcall	80005758 <check_monome_device_desc>
80005cca:	30 19       	mov	r9,1
  //// TODO: other protocols??

  // set connection flag
  ftdiConnect = 1;
80005ccc:	e0 68 07 e5 	mov	r8,2021
80005cd0:	b0 89       	st.b	r8[0x0],r9
}
80005cd2:	2f dd       	sub	sp,-12
80005cd4:	d8 02       	popm	pc
80005cd6:	d7 03       	nop

80005cd8 <ftdi_change>:
80005cd8:	d4 01       	pushm	lr
80005cda:	e0 68 08 30 	mov	r8,2096
80005cde:	58 0b       	cp.w	r11,0
80005ce0:	c0 30       	breq	80005ce6 <ftdi_change+0xe>
80005ce2:	30 69       	mov	r9,6
void ftdi_change(uhc_device_t* dev, u8 plug) {
  // print_dbg("\r\n changed FTDI connection status");
  if(plug) { 
    e.type = kEventFtdiConnect; 
  } else {
    e.type = kEventFtdiDisconnect;
80005ce4:	c0 28       	rjmp	80005ce8 <ftdi_change+0x10>
80005ce6:	30 79       	mov	r9,7
  }
  // posting an event so the main loop can respond
  event_post(&e); 
80005ce8:	91 09       	st.w	r8[0x0],r9
80005cea:	e0 6c 08 30 	mov	r12,2096
}
80005cee:	fe b0 f8 d9 	rcall	80004ea0 <event_post>
80005cf2:	d8 02       	popm	pc

80005cf4 <ftdi_read>:
80005cf4:	d4 01       	pushm	lr
80005cf6:	30 09       	mov	r9,0
    // print_dbg("\r\n error requesting ftdi output pipe");
  }
}
    
void ftdi_read(void) {
  rxBytes = 0;
80005cf8:	e0 68 08 2c 	mov	r8,2092
  rxBusy = true;
80005cfc:	91 09       	st.w	r8[0x0],r9
80005cfe:	30 19       	mov	r9,1
  if (!uhi_ftdi_in_run((u8*)rxBuf,
80005d00:	e0 68 08 28 	mov	r8,2088
80005d04:	fe ca 00 a8 	sub	r10,pc,168
80005d08:	b0 89       	st.b	r8[0x0],r9
80005d0a:	34 0b       	mov	r11,64
80005d0c:	e0 6c 07 e8 	mov	r12,2024
		       FTDI_RX_BUF_SIZE, &ftdi_rx_done)) {
    print_dbg("\r\n ftdi rx transfer error");
80005d10:	cb 2c       	rcall	80005e74 <uhi_ftdi_in_run>
80005d12:	c0 51       	brne	80005d1c <ftdi_read+0x28>
80005d14:	fe cc c2 60 	sub	r12,pc,-15776
80005d18:	e0 a0 10 82 	rcall	80007e1c <print_dbg>
80005d1c:	d8 02       	popm	pc
80005d1e:	d7 03       	nop

80005d20 <ftdi_write>:
80005d20:	d4 01       	pushm	lr
80005d22:	30 19       	mov	r9,1
80005d24:	e0 68 07 e4 	mov	r8,2020
80005d28:	fe ca 00 a8 	sub	r10,pc,168
80005d2c:	b0 89       	st.b	r8[0x0],r9
80005d2e:	c9 1c       	rcall	80005e50 <uhi_ftdi_out_run>
80005d30:	d8 02       	popm	pc
80005d32:	d7 03       	nop

80005d34 <ctl_req_end>:
		uhd_trans_status_t status,
		uint16_t payload_trans) {
  // last transfer ok?
  //  print_dbg("\r\n ctl request end, status: ");
  //  print_dbg_hex((u32)status);
  ctlReadBusy = 0;
80005d34:	30 09       	mov	r9,0
80005d36:	e0 68 08 44 	mov	r8,2116
}
80005d3a:	b0 89       	st.b	r8[0x0],r9
80005d3c:	5e fc       	retal	r12
80005d3e:	d7 03       	nop

80005d40 <send_ctl_request>:

// send control request
static u8 send_ctl_request(u8 reqtype, u8 reqnum, 
			   u8* data, u16 size,
			     u16 index, u16 val, 
			     uhd_callback_setup_end_t callbackEnd) {
80005d40:	d4 21       	pushm	r4-r7,lr
80005d42:	20 2d       	sub	sp,8
  /* } */

  req.bmRequestType = reqtype;
  req.bRequest = reqnum;
  req.wValue = (val);
  req.wIndex = (index);
80005d44:	ba 28       	st.h	sp[0x4],r8

// send control request
static u8 send_ctl_request(u8 reqtype, u8 reqnum, 
			   u8* data, u16 size,
			     u16 index, u16 val, 
			     uhd_callback_setup_end_t callbackEnd) {
80005d46:	fa c4 ff e4 	sub	r4,sp,-28
80005d4a:	68 18       	ld.w	r8,r4[0x4]
  /* if (uhi_ftdi_dev.dev != dev) { */
  /*   return;  // No interface to enable */
  /* } */

  req.bmRequestType = reqtype;
  req.bRequest = reqnum;
80005d4c:	ba 9b       	st.b	sp[0x1],r11
 
  /* if (uhi_ftdi_dev.dev != dev) { */
  /*   return;  // No interface to enable */
  /* } */

  req.bmRequestType = reqtype;
80005d4e:	ba 8c       	st.b	sp[0x0],r12
  req.bRequest = reqnum;
  req.wValue = (val);
  req.wIndex = (index);
  req.wLength = (size);
  return uhd_setup_request(
80005d50:	1a d8       	st.w	--sp,r8

// send control request
static u8 send_ctl_request(u8 reqtype, u8 reqnum, 
			   u8* data, u16 size,
			     u16 index, u16 val, 
			     uhd_callback_setup_end_t callbackEnd) {
80005d52:	68 08       	ld.w	r8,r4[0x0]
  /*   return;  // No interface to enable */
  /* } */

  req.bmRequestType = reqtype;
  req.bRequest = reqnum;
  req.wValue = (val);
80005d54:	ba 38       	st.h	sp[0x6],r8
  req.wIndex = (index);
  req.wLength = (size);
  return uhd_setup_request(
80005d56:	e0 68 08 3c 	mov	r8,2108

  req.bmRequestType = reqtype;
  req.bRequest = reqnum;
  req.wValue = (val);
  req.wIndex = (index);
  req.wLength = (size);
80005d5a:	70 08       	ld.w	r8,r8[0x0]
  return uhd_setup_request(
80005d5c:	ba 59       	st.h	sp[0xa],r9
80005d5e:	fa cb ff fc 	sub	r11,sp,-4
80005d62:	5c 79       	castu.h	r9
80005d64:	f1 3c 00 12 	ld.ub	r12,r8[18]
80005d68:	30 08       	mov	r8,0
80005d6a:	e0 a0 0a 41 	rcall	800071ec <uhd_setup_request>
			   data,
			   size,
			   NULL,
			   callbackEnd
			   );
}
80005d6e:	2f fd       	sub	sp,-4
80005d70:	2f ed       	sub	sp,-8
80005d72:	d8 22       	popm	r4-r7,pc

80005d74 <ftdi_get_strings>:
80005d74:	d4 21       	pushm	r4-r7,lr
80005d76:	30 18       	mov	r8,1
80005d78:	e0 67 08 44 	mov	r7,2116

  // get manufacturer string
  ctlReadBusy = 1;
  //  print_dbg("\r\n sending ctl request for manufacturer string, index : ");
  //  print_dbg_hex(uhi_ftdi_dev.dev->dev_desc.iManufacturer);
  if(!(send_ctl_request(
80005d7c:	ae 88       	st.b	r7[0x0],r8
80005d7e:	fe c8 00 4a 	sub	r8,pc,74
80005d82:	1a d8       	st.w	--sp,r8
80005d84:	e0 68 08 3c 	mov	r8,2108
80005d88:	70 08       	ld.w	r8,r8[0x0]
80005d8a:	f1 38 00 0e 	ld.ub	r8,r8[14]
80005d8e:	e8 18 03 00 	orl	r8,0x300
  //  print_dbg_hex((u32)status);
  ctlReadBusy = 0;
}

// read eeprom
void ftdi_get_strings(char** pManufacturer, char** pProduct, char** pSerial) {
80005d92:	18 96       	mov	r6,r12

  // get manufacturer string
  ctlReadBusy = 1;
  //  print_dbg("\r\n sending ctl request for manufacturer string, index : ");
  //  print_dbg_hex(uhi_ftdi_dev.dev->dev_desc.iManufacturer);
  if(!(send_ctl_request(
80005d94:	1a d8       	st.w	--sp,r8
80005d96:	16 95       	mov	r5,r11
80005d98:	14 94       	mov	r4,r10
80005d9a:	e0 68 04 09 	mov	r8,1033
80005d9e:	34 09       	mov	r9,64
80005da0:	e0 6a 1b e4 	mov	r10,7140
80005da4:	30 6b       	mov	r11,6
80005da6:	e0 6c 00 80 	mov	r12,128
80005daa:	cc bf       	rcall	80005d40 <send_ctl_request>
       )) {
    // print_dbg("\r\n control request for string descriptor failed");
    return;
  }
  // wait for transfer end
  while(ctlReadBusy) { ;; } 
80005dac:	2f ed       	sub	sp,-8
80005dae:	58 0c       	cp.w	r12,0
80005db0:	c4 e0       	breq	80005e4c <ftdi_get_strings+0xd8>
80005db2:	0e 98       	mov	r8,r7
80005db4:	e0 67 08 44 	mov	r7,2116

  // get product string
  ctlReadBusy = 1;
80005db8:	11 89       	ld.ub	r9,r8[0x0]
  //  print_dbg("\r\n sending ctl request for product string, index : ");
  //  print_dbg_ulong( uhi_ftdi_dev.dev->dev_desc.iProduct);
  if(!(send_ctl_request(
80005dba:	58 09       	cp.w	r9,0
80005dbc:	cf c1       	brne	80005db4 <ftdi_get_strings+0x40>
80005dbe:	30 18       	mov	r8,1
80005dc0:	ae 88       	st.b	r7[0x0],r8
80005dc2:	fe c8 00 8e 	sub	r8,pc,142
80005dc6:	1a d8       	st.w	--sp,r8
80005dc8:	e0 68 08 3c 	mov	r8,2108
80005dcc:	70 08       	ld.w	r8,r8[0x0]
80005dce:	f1 38 00 0f 	ld.ub	r8,r8[15]
80005dd2:	e8 18 03 00 	orl	r8,0x300
80005dd6:	34 09       	mov	r9,64
80005dd8:	1a d8       	st.w	--sp,r8
80005dda:	e0 6a 1c 64 	mov	r10,7268
80005dde:	e0 68 04 09 	mov	r8,1033
80005de2:	30 6b       	mov	r11,6
       )) {
    // print_dbg("\r\n control request for string descriptor failed");
    return;
  }
  // wait for transfer end
  while(ctlReadBusy) { ;; } 
80005de4:	e0 6c 00 80 	mov	r12,128
80005de8:	ca cf       	rcall	80005d40 <send_ctl_request>
80005dea:	2f ed       	sub	sp,-8
80005dec:	58 0c       	cp.w	r12,0

  // get serial string
  ctlReadBusy = 1;
80005dee:	c2 f0       	breq	80005e4c <ftdi_get_strings+0xd8>
80005df0:	0e 98       	mov	r8,r7
  // print_dbg("\r\n sending ctl request for serial string : ");
  if(!(send_ctl_request(
80005df2:	e0 67 08 44 	mov	r7,2116
80005df6:	11 89       	ld.ub	r9,r8[0x0]
80005df8:	58 09       	cp.w	r9,0
80005dfa:	cf c1       	brne	80005df2 <ftdi_get_strings+0x7e>
80005dfc:	30 18       	mov	r8,1
80005dfe:	ae 88       	st.b	r7[0x0],r8
80005e00:	fe c8 00 cc 	sub	r8,pc,204
80005e04:	1a d8       	st.w	--sp,r8
80005e06:	e0 68 08 3c 	mov	r8,2108
80005e0a:	70 08       	ld.w	r8,r8[0x0]
80005e0c:	f1 38 00 10 	ld.ub	r8,r8[16]
80005e10:	e8 18 03 00 	orl	r8,0x300
80005e14:	34 09       	mov	r9,64
80005e16:	1a d8       	st.w	--sp,r8
80005e18:	e0 6a 1c 24 	mov	r10,7204
       )) {
    // print_dbg("\r\n control request for string descriptor failed");
    return;
  }
  // wait for transfer end
  while(ctlReadBusy) { ;; }
80005e1c:	e0 68 04 09 	mov	r8,1033
80005e20:	30 6b       	mov	r11,6

  //  print_dbg("\r\n requested all string descriptors.");
  *pManufacturer = manufacturer_string + FTDI_STRING_DESC_OFFSET;
80005e22:	e0 6c 00 80 	mov	r12,128
80005e26:	c8 df       	rcall	80005d40 <send_ctl_request>
  *pProduct = product_string + FTDI_STRING_DESC_OFFSET;
80005e28:	2f ed       	sub	sp,-8
80005e2a:	58 0c       	cp.w	r12,0
80005e2c:	c1 00       	breq	80005e4c <ftdi_get_strings+0xd8>
  *pSerial = serial_string + FTDI_STRING_DESC_OFFSET;
80005e2e:	0f 88       	ld.ub	r8,r7[0x0]
80005e30:	58 08       	cp.w	r8,0
80005e32:	cf e1       	brne	80005e2e <ftdi_get_strings+0xba>
80005e34:	e0 68 1b e4 	mov	r8,7140
80005e38:	2f e8       	sub	r8,-2
80005e3a:	8d 08       	st.w	r6[0x0],r8
80005e3c:	e0 68 1c 64 	mov	r8,7268
80005e40:	2f e8       	sub	r8,-2
80005e42:	8b 08       	st.w	r5[0x0],r8
80005e44:	e0 68 1c 24 	mov	r8,7204
80005e48:	2f e8       	sub	r8,-2
80005e4a:	89 08       	st.w	r4[0x0],r8
80005e4c:	d8 22       	popm	r4-r7,pc
80005e4e:	d7 03       	nop

80005e50 <uhi_ftdi_out_run>:
80005e50:	d4 01       	pushm	lr
80005e52:	1a da       	st.w	--sp,r10
}

// run the output endpoint (bulk)
bool uhi_ftdi_out_run(uint8_t * buf, iram_size_t buf_size,
		      uhd_callback_trans_t callback) {
  return uhd_ep_run(uhi_ftdi_dev.dev->address,
80005e54:	16 98       	mov	r8,r11
80005e56:	18 99       	mov	r9,r12
80005e58:	e0 6a 08 3c 	mov	r10,2108
80005e5c:	e0 6c 4e 20 	mov	r12,20000
80005e60:	15 db       	ld.ub	r11,r10[0x5]
80005e62:	74 0a       	ld.w	r10,r10[0x0]
80005e64:	1a dc       	st.w	--sp,r12
80005e66:	f5 3c 00 12 	ld.ub	r12,r10[18]
80005e6a:	30 1a       	mov	r10,1
80005e6c:	e0 a0 08 f6 	rcall	80007058 <uhd_ep_run>
		    uhi_ftdi_dev.ep_out, true, buf, buf_size,
		    UHI_FTDI_TIMEOUT, callback);
}
80005e70:	2f ed       	sub	sp,-8
80005e72:	d8 02       	popm	pc

80005e74 <uhi_ftdi_in_run>:
80005e74:	d4 01       	pushm	lr
80005e76:	1a da       	st.w	--sp,r10
80005e78:	16 98       	mov	r8,r11
80005e7a:	18 99       	mov	r9,r12
}

// run the input endpoint (bulk)
bool uhi_ftdi_in_run(uint8_t * buf, iram_size_t buf_size,
		     uhd_callback_trans_t callback) {
  return uhd_ep_run(uhi_ftdi_dev.dev->address,
80005e7c:	e0 6a 08 3c 	mov	r10,2108
80005e80:	e0 6c 4e 20 	mov	r12,20000
80005e84:	15 cb       	ld.ub	r11,r10[0x4]
80005e86:	74 0a       	ld.w	r10,r10[0x0]
80005e88:	1a dc       	st.w	--sp,r12
80005e8a:	f5 3c 00 12 	ld.ub	r12,r10[18]
80005e8e:	30 0a       	mov	r10,0
80005e90:	e0 a0 08 e4 	rcall	80007058 <uhd_ep_run>
		    uhi_ftdi_dev.ep_in, false, buf, buf_size,
		    UHI_FTDI_TIMEOUT, callback);
}
80005e94:	2f ed       	sub	sp,-8
80005e96:	d8 02       	popm	pc

80005e98 <uhi_ftdi_uninstall>:
80005e98:	d4 01       	pushm	lr
80005e9a:	e0 68 08 3c 	mov	r8,2108
80005e9e:	70 0a       	ld.w	r10,r8[0x0]

  ftdi_change(dev, true);  
}

void uhi_ftdi_uninstall(uhc_device_t* dev) {
  if (uhi_ftdi_dev.dev != dev) {
80005ea0:	18 3a       	cp.w	r10,r12
    return; // Device not enabled in this interface
  }
  uhi_ftdi_dev.dev = NULL;
80005ea2:	c0 41       	brne	80005eaa <uhi_ftdi_uninstall+0x12>
80005ea4:	30 0b       	mov	r11,0
  Assert(uhi_ftdi_dev.report!=NULL);
  ftdi_change(dev, false);  
80005ea6:	91 0b       	st.w	r8[0x0],r11
80005ea8:	c1 8f       	rcall	80005cd8 <ftdi_change>
80005eaa:	d8 02       	popm	pc

80005eac <uhi_ftdi_enable>:
80005eac:	d4 21       	pushm	r4-r7,lr
80005eae:	e0 68 08 3c 	mov	r8,2108
80005eb2:	70 06       	ld.w	r6,r8[0x0]
  return UHC_ENUM_UNSUPPORTED; // No interface supported
}

void uhi_ftdi_enable(uhc_device_t* dev) {

  if (uhi_ftdi_dev.dev != dev) {
80005eb4:	18 36       	cp.w	r6,r12
  }
  /// bit mode (not bitbang? )
  /// todo: what do these mean???
  // val : ff
  // indx : 1
  send_ctl_request(FTDI_DEVICE_OUT_REQTYPE, 
80005eb6:	c3 e1       	brne	80005f32 <uhi_ftdi_enable+0x86>
80005eb8:	e0 68 00 ff 	mov	r8,255
80005ebc:	30 07       	mov	r7,0
80005ebe:	30 bb       	mov	r11,11
80005ec0:	1a d7       	st.w	--sp,r7
80005ec2:	0e 99       	mov	r9,r7
80005ec4:	1a d8       	st.w	--sp,r8
80005ec6:	0e 9a       	mov	r10,r7
80005ec8:	30 18       	mov	r8,1
80005eca:	34 0c       	mov	r12,64
80005ecc:	c3 af       	rcall	80005d40 <send_ctl_request>
		   NULL);
  /// line property
  /// todo: what do these mean???
  // index 1
  // val : 8
  send_ctl_request(FTDI_DEVICE_OUT_REQTYPE, 
80005ece:	30 88       	mov	r8,8
80005ed0:	1a d7       	st.w	--sp,r7
80005ed2:	0e 99       	mov	r9,r7
80005ed4:	1a d8       	st.w	--sp,r8
80005ed6:	0e 9a       	mov	r10,r7
80005ed8:	30 18       	mov	r8,1
80005eda:	30 4b       	mov	r11,4
80005edc:	34 0c       	mov	r12,64
80005ede:	c3 1f       	rcall	80005d40 <send_ctl_request>
80005ee0:	e0 69 c0 36 	mov	r9,49206
  /// baud rate
  // rq : 3
  // value: 26 (baudrate: 115200)
  // value: 49206 (baudrate : 57600)
  // index: 0
  send_ctl_request(FTDI_DEVICE_OUT_REQTYPE, 
80005ee4:	1a d7       	st.w	--sp,r7
80005ee6:	0e 98       	mov	r8,r7
80005ee8:	1a d9       	st.w	--sp,r9
80005eea:	0e 9a       	mov	r10,r7
80005eec:	0e 99       	mov	r9,r7
80005eee:	30 3b       	mov	r11,3
80005ef0:	34 0c       	mov	r12,64
80005ef2:	c2 7f       	rcall	80005d40 <send_ctl_request>
80005ef4:	e0 68 03 e8 	mov	r8,1000
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80005ef8:	30 09       	mov	r9,0
80005efa:	e0 6a 7b e7 	mov	r10,31719
80005efe:	ea 1a cb 41 	orh	r10,0xcb41
80005f02:	30 2b       	mov	r11,2
80005f04:	e0 a0 13 3a 	rcall	80008578 <__avr32_udiv64>
80005f08:	e1 b8 00 42 	mfsr	r8,0x108
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005f0c:	f0 0a 00 0a 	add	r10,r8,r10
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005f10:	2f ad       	sub	sp,-24
80005f12:	e1 b9 00 42 	mfsr	r9,0x108
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005f16:	14 38       	cp.w	r8,r10
80005f18:	e0 88 00 05 	brls	80005f22 <uhi_ftdi_enable+0x76>
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005f1c:	10 39       	cp.w	r9,r8
80005f1e:	cf a2       	brcc	80005f12 <uhi_ftdi_enable+0x66>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005f20:	c0 38       	rjmp	80005f26 <uhi_ftdi_enable+0x7a>
80005f22:	10 39       	cp.w	r9,r8
80005f24:	c0 43       	brcs	80005f2c <uhi_ftdi_enable+0x80>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005f26:	14 39       	cp.w	r9,r10
80005f28:	fe 98 ff f5 	brls	80005f12 <uhi_ftdi_enable+0x66>
80005f2c:	0c 9c       	mov	r12,r6
80005f2e:	30 1b       	mov	r11,1
		   0, 49206,
		   NULL);

  delay_ms(200);

  ftdi_change(dev, true);  
80005f30:	cd 4e       	rcall	80005cd8 <ftdi_change>
80005f32:	d8 22       	popm	r4-r7,pc

80005f34 <uhi_ftdi_install>:
80005f34:	d4 31       	pushm	r0-r7,lr
80005f36:	20 1d       	sub	sp,4
80005f38:	e0 63 08 3c 	mov	r3,2108
80005f3c:	18 96       	mov	r6,r12
80005f3e:	66 05       	ld.w	r5,r3[0x0]
80005f40:	58 05       	cp.w	r5,0
80005f42:	c0 30       	breq	80005f48 <uhi_ftdi_install+0x14>
80005f44:	30 5c       	mov	r12,5
80005f46:	c6 58       	rjmp	80006010 <uhi_ftdi_install+0xdc>
80005f48:	98 d9       	ld.uh	r9,r12[0xa]
80005f4a:	f2 0a 16 08 	lsr	r10,r9,0x8

  // check vid/pid
  vid = le16_to_cpu(dev->dev_desc.idVendor);
  pid = le16_to_cpu(dev->dev_desc.idProduct);

  if( (vid == FTDI_VID) && (pid == FTDI_PID) ) {
80005f4e:	f5 e9 10 89 	or	r9,r10,r9<<0x8
80005f52:	e0 6a 60 01 	mov	r10,24577
80005f56:	98 c8       	ld.uh	r8,r12[0x8]
80005f58:	f4 09 19 00 	cp.h	r9,r10
80005f5c:	5f 09       	sreq	r9
80005f5e:	f0 0a 16 08 	lsr	r10,r8,0x8
80005f62:	f5 e8 10 88 	or	r8,r10,r8<<0x8
80005f66:	e0 6a 04 03 	mov	r10,1027
80005f6a:	f4 08 19 00 	cp.h	r8,r10
80005f6e:	5f 08       	sreq	r8
80005f70:	10 69       	and	r9,r8
80005f72:	ea 09 18 00 	cp.b	r9,r5
    ;; // this is an FTDI device, so continue
  } else {
    return UHC_ENUM_UNSUPPORTED;
  }

  conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
80005f76:	c4 c0       	breq	8000600e <uhi_ftdi_install+0xda>
80005f78:	78 68       	ld.w	r8,r12[0x18]
  ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
80005f7a:	11 a4       	ld.ub	r4,r8[0x2]
    ;; // this is an FTDI device, so continue
  } else {
    return UHC_ENUM_UNSUPPORTED;
  }

  conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
80005f7c:	10 97       	mov	r7,r8
80005f7e:	11 b8       	ld.ub	r8,r8[0x3]
80005f80:	f1 e4 10 84 	or	r4,r8,r4<<0x8
80005f84:	e8 08 16 08 	lsr	r8,r4,0x8
80005f88:	30 40       	mov	r0,4
80005f8a:	f1 e4 10 84 	or	r4,r8,r4<<0x8
80005f8e:	3f f1       	mov	r1,-1
    case USB_DT_INTERFACE:
      if ((ptr_iface->bInterfaceClass == FTDI_CLASS)
	  && (ptr_iface->bInterfaceProtocol == FTDI_PROTOCOL) ) {
	// print_dbg("\r\n class/protocol matches FTDI. ");
	b_iface_supported = true;
	uhi_ftdi_dev.ep_in = 0;
80005f90:	5c 84       	casts.h	r4
  conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
  ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
  b_iface_supported = false;

  while(conf_desc_lgt) {
    switch (ptr_iface->bDescriptorType) {
80005f92:	0a 92       	mov	r2,r5

  conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
  ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
  b_iface_supported = false;

  while(conf_desc_lgt) {
80005f94:	30 58       	mov	r8,5
    switch (ptr_iface->bDescriptorType) {
80005f96:	c3 38       	rjmp	80005ffc <uhi_ftdi_install+0xc8>
80005f98:	0f 99       	ld.ub	r9,r7[0x1]
80005f9a:	e0 09 18 00 	cp.b	r9,r0
80005f9e:	c0 50       	breq	80005fa8 <uhi_ftdi_install+0x74>
80005fa0:	f0 09 18 00 	cp.b	r9,r8
80005fa4:	c2 81       	brne	80005ff4 <uhi_ftdi_install+0xc0>

    case USB_DT_INTERFACE:
      if ((ptr_iface->bInterfaceClass == FTDI_CLASS)
80005fa6:	c0 d8       	rjmp	80005fc0 <uhi_ftdi_install+0x8c>
80005fa8:	0f d9       	ld.ub	r9,r7[0x5]
80005faa:	e2 09 18 00 	cp.b	r9,r1
	  && (ptr_iface->bInterfaceProtocol == FTDI_PROTOCOL) ) {
80005fae:	c2 21       	brne	80005ff2 <uhi_ftdi_install+0xbe>
80005fb0:	0f f9       	ld.ub	r9,r7[0x7]
80005fb2:	e2 09 18 00 	cp.b	r9,r1
	// print_dbg("\r\n class/protocol matches FTDI. ");
	b_iface_supported = true;
	uhi_ftdi_dev.ep_in = 0;
80005fb6:	c1 e1       	brne	80005ff2 <uhi_ftdi_install+0xbe>
	uhi_ftdi_dev.ep_out = 0;
80005fb8:	a6 c2       	st.b	r3[0x4],r2
80005fba:	a6 d2       	st.b	r3[0x5],r2

  while(conf_desc_lgt) {
    switch (ptr_iface->bDescriptorType) {

    case USB_DT_INTERFACE:
      if ((ptr_iface->bInterfaceClass == FTDI_CLASS)
80005fbc:	30 15       	mov	r5,1
	b_iface_supported = false;
      }
      break;

    case USB_DT_ENDPOINT:
      if (!b_iface_supported) {
80005fbe:	c1 b8       	rjmp	80005ff4 <uhi_ftdi_install+0xc0>
80005fc0:	58 05       	cp.w	r5,0
	break;
      }
      if (!uhd_ep_alloc(dev->address, (usb_ep_desc_t*)ptr_iface)) {
80005fc2:	c1 90       	breq	80005ff4 <uhi_ftdi_install+0xc0>
80005fc4:	ed 3c 00 12 	ld.ub	r12,r6[18]
80005fc8:	0e 9b       	mov	r11,r7
80005fca:	50 08       	stdsp	sp[0x0],r8
80005fcc:	e0 a0 09 9e 	rcall	80007308 <uhd_ep_alloc>
80005fd0:	40 08       	lddsp	r8,sp[0x0]
80005fd2:	c0 31       	brne	80005fd8 <uhi_ftdi_install+0xa4>
80005fd4:	30 4c       	mov	r12,4
	// print_dbg("\r\n endpoint allocation failed");
	return UHC_ENUM_HARDWARE_LIMIT;
      }

      switch(((usb_ep_desc_t*)ptr_iface)->bmAttributes & USB_EP_TYPE_MASK) {
80005fd6:	c1 d8       	rjmp	80006010 <uhi_ftdi_install+0xdc>
80005fd8:	0f b9       	ld.ub	r9,r7[0x3]
80005fda:	f3 d9 c0 02 	bfextu	r9,r9,0x0,0x2
80005fde:	58 29       	cp.w	r9,2
      case USB_EP_TYPE_BULK:
	//	print_dbg("\r\n allocating bulk endpoint: ");
	if (((usb_ep_desc_t*)ptr_iface)->bEndpointAddress & USB_EP_DIR_IN) {
80005fe0:	c0 a1       	brne	80005ff4 <uhi_ftdi_install+0xc0>
80005fe2:	0f a9       	ld.ub	r9,r7[0x2]
80005fe4:	e4 09 18 00 	cp.b	r9,r2
	  uhi_ftdi_dev.ep_in = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
80005fe8:	c0 34       	brge	80005fee <uhi_ftdi_install+0xba>
80005fea:	a6 c9       	st.b	r3[0x4],r9
	} else {
	  uhi_ftdi_dev.ep_out = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
80005fec:	c0 48       	rjmp	80005ff4 <uhi_ftdi_install+0xc0>
80005fee:	a6 d9       	st.b	r3[0x5],r9
80005ff0:	c0 28       	rjmp	80005ff4 <uhi_ftdi_install+0xc0>
    default:
      // print_dbg("\r\n ignoring descriptor in ftdi device enumeration");
      break;
    }
    Assert(conf_desc_lgt>=ptr_iface->bLength);
    conf_desc_lgt -= ptr_iface->bLength;
80005ff2:	30 05       	mov	r5,0
80005ff4:	0f 89       	ld.ub	r9,r7[0x0]
    ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
80005ff6:	12 14       	sub	r4,r9
    default:
      // print_dbg("\r\n ignoring descriptor in ftdi device enumeration");
      break;
    }
    Assert(conf_desc_lgt>=ptr_iface->bLength);
    conf_desc_lgt -= ptr_iface->bLength;
80005ff8:	12 07       	add	r7,r9

  conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
  ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
  b_iface_supported = false;

  while(conf_desc_lgt) {
80005ffa:	5c 84       	casts.h	r4
80005ffc:	58 04       	cp.w	r4,0
    Assert(conf_desc_lgt>=ptr_iface->bLength);
    conf_desc_lgt -= ptr_iface->bLength;
    ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
  }

  if (b_iface_supported) {
80005ffe:	cc d1       	brne	80005f98 <uhi_ftdi_install+0x64>
80006000:	58 05       	cp.w	r5,0
    uhi_ftdi_dev.dev = dev;
80006002:	c0 60       	breq	8000600e <uhi_ftdi_install+0xda>
80006004:	e0 68 08 3c 	mov	r8,2108
    // print_dbg("\r\n completed FTDI device install");
    return UHC_ENUM_SUCCESS;
80006008:	08 9c       	mov	r12,r4
8000600a:	91 06       	st.w	r8[0x0],r6
  }
  return UHC_ENUM_UNSUPPORTED; // No interface supported
}
8000600c:	c0 28       	rjmp	80006010 <uhi_ftdi_install+0xdc>
8000600e:	30 1c       	mov	r12,1
80006010:	2f fd       	sub	sp,-4
80006012:	d8 32       	popm	r0-r7,pc

80006014 <flashc_set_bus_freq>:
}


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
80006014:	e0 68 8a 3f 	mov	r8,35391
80006018:	ea 18 01 f7 	orh	r8,0x1f7
8000601c:	10 3c       	cp.w	r12,r8
8000601e:	e0 88 00 07 	brls	8000602c <flashc_set_bus_freq+0x18>
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80006022:	fe 68 14 00 	mov	r8,-125952
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80006026:	30 1a       	mov	r10,1
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80006028:	70 09       	ld.w	r9,r8[0x0]
8000602a:	c0 58       	rjmp	80006034 <flashc_set_bus_freq+0x20>
8000602c:	fe 68 14 00 	mov	r8,-125952
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80006030:	30 0a       	mov	r10,0
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80006032:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80006034:	f3 da d0 c1 	bfins	r9,r10,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80006038:	91 09       	st.w	r8[0x0],r9
8000603a:	5e fc       	retal	r12

8000603c <flashc_default_wait_until_ready>:
//! @{


bool flashc_is_ready(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
8000603c:	fe 69 14 00 	mov	r9,-125952
}


void flashc_default_wait_until_ready(void)
{
	while (!flashc_is_ready());
80006040:	30 08       	mov	r8,0
//! @{


bool flashc_is_ready(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
80006042:	72 2a       	ld.w	r10,r9[0x8]
}


void flashc_default_wait_until_ready(void)
{
	while (!flashc_is_ready());
80006044:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80006048:	f0 0a 18 00 	cp.b	r10,r8
8000604c:	cf b0       	breq	80006042 <flashc_default_wait_until_ready+0x6>
}
8000604e:	5e fc       	retal	r12

80006050 <flashc_issue_command>:
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
80006050:	d4 21       	pushm	r4-r7,lr
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80006052:	33 c8       	mov	r8,60
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
80006054:	18 97       	mov	r7,r12
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80006056:	70 08       	ld.w	r8,r8[0x0]
	return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
}


void flashc_issue_command(unsigned int command, int page_number)
{
80006058:	16 96       	mov	r6,r11
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
8000605a:	5d 18       	icall	r8
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
8000605c:	fe 68 14 00 	mov	r8,-125952
80006060:	70 18       	ld.w	r8,r8[0x4]
	u_avr32_flashc_fcmd.FCMD.cmd = command;
80006062:	f1 d7 d0 06 	bfins	r8,r7,0x0,0x6
	if (page_number >= 0) {
80006066:	58 06       	cp.w	r6,0
80006068:	c0 35       	brlt	8000606e <flashc_issue_command+0x1e>
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
8000606a:	f1 d6 d1 10 	bfins	r8,r6,0x8,0x10
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
8000606e:	fe 69 14 00 	mov	r9,-125952
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
	u_avr32_flashc_fcmd.FCMD.cmd = command;
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
80006072:	3a 5a       	mov	r10,-91
80006074:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
80006078:	93 18       	st.w	r9[0x4],r8
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
8000607a:	72 28       	ld.w	r8,r9[0x8]
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
8000607c:	e0 69 08 48 	mov	r9,2120
80006080:	e2 18 00 0c 	andl	r8,0xc,COH
	flashc_wait_until_ready();
80006084:	93 08       	st.w	r9[0x0],r8
80006086:	33 c8       	mov	r8,60
80006088:	70 08       	ld.w	r8,r8[0x0]
}
8000608a:	5d 18       	icall	r8
8000608c:	d8 22       	popm	r4-r7,pc
8000608e:	d7 03       	nop

80006090 <flashc_clear_page_buffer>:
80006090:	d4 01       	pushm	lr
80006092:	3f fb       	mov	r11,-1
//! @{


void flashc_clear_page_buffer(void)
{
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_CPB, -1);
80006094:	30 3c       	mov	r12,3
80006096:	cd df       	rcall	80006050 <flashc_issue_command>
80006098:	d8 02       	popm	pc
}
8000609a:	d7 03       	nop

8000609c <flashc_quick_page_read>:
8000609c:	d4 01       	pushm	lr
8000609e:	18 9b       	mov	r11,r12
}


bool flashc_quick_page_read(int page_number)
{
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPR, page_number);
800060a0:	30 cc       	mov	r12,12
800060a2:	cd 7f       	rcall	80006050 <flashc_issue_command>
800060a4:	fe 68 14 00 	mov	r8,-125952
}


bool flashc_is_page_erased(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_QPRR_MASK) != 0);
800060a8:	70 2c       	ld.w	r12,r8[0x8]
800060aa:	f9 dc c0 a1 	bfextu	r12,r12,0x5,0x1

bool flashc_quick_page_read(int page_number)
{
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPR, page_number);
	return flashc_is_page_erased();
}
800060ae:	d8 02       	popm	pc

800060b0 <flashc_erase_page>:
800060b0:	d4 21       	pushm	r4-r7,lr
800060b2:	16 97       	mov	r7,r11
800060b4:	18 9b       	mov	r11,r12
800060b6:	30 2c       	mov	r12,2

bool flashc_erase_page(int page_number, bool check)
{
	bool page_erased = true;

	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EP, page_number);
800060b8:	cc cf       	rcall	80006050 <flashc_issue_command>
800060ba:	58 07       	cp.w	r7,0
	if (check) {
800060bc:	c0 21       	brne	800060c0 <flashc_erase_page+0x10>
800060be:	da 2a       	popm	r4-r7,pc,r12=1
800060c0:	e0 67 08 48 	mov	r7,2120
		unsigned int error_status = flashc_error_status;
		page_erased = flashc_quick_page_read(-1);
800060c4:	3f fc       	mov	r12,-1
{
	bool page_erased = true;

	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EP, page_number);
	if (check) {
		unsigned int error_status = flashc_error_status;
800060c6:	6e 06       	ld.w	r6,r7[0x0]
		page_erased = flashc_quick_page_read(-1);
800060c8:	ce af       	rcall	8000609c <flashc_quick_page_read>
800060ca:	6e 08       	ld.w	r8,r7[0x0]
		flashc_error_status |= error_status;
800060cc:	f1 e6 10 06 	or	r6,r8,r6
800060d0:	8f 06       	st.w	r7[0x0],r6
800060d2:	d8 22       	popm	r4-r7,pc

800060d4 <flashc_write_page>:
	}
	return page_erased;
}
800060d4:	d4 01       	pushm	lr
800060d6:	18 9b       	mov	r11,r12
800060d8:	30 1c       	mov	r12,1
800060da:	cb bf       	rcall	80006050 <flashc_issue_command>
800060dc:	d8 02       	popm	pc
800060de:	d7 03       	nop

800060e0 <flashc_quick_user_page_read>:
800060e0:	d4 01       	pushm	lr
800060e2:	30 fc       	mov	r12,15
}


bool flashc_quick_user_page_read(void)
{
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPRUP, -1);
800060e4:	3f fb       	mov	r11,-1
800060e6:	cb 5f       	rcall	80006050 <flashc_issue_command>
800060e8:	fe 68 14 00 	mov	r8,-125952
}


bool flashc_is_page_erased(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_QPRR_MASK) != 0);
800060ec:	70 2c       	ld.w	r12,r8[0x8]
800060ee:	f9 dc c0 a1 	bfextu	r12,r12,0x5,0x1

bool flashc_quick_user_page_read(void)
{
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPRUP, -1);
	return flashc_is_page_erased();
}
800060f2:	d8 02       	popm	pc

800060f4 <flashc_erase_user_page>:
800060f4:	d4 21       	pushm	r4-r7,lr
800060f6:	3f fb       	mov	r11,-1
800060f8:	18 97       	mov	r7,r12
800060fa:	30 ec       	mov	r12,14


bool flashc_erase_user_page(bool check)
{
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EUP, -1);
800060fc:	ca af       	rcall	80006050 <flashc_issue_command>
800060fe:	58 07       	cp.w	r7,0
	return (check) ? flashc_quick_user_page_read() : true;
80006100:	c0 21       	brne	80006104 <flashc_erase_user_page+0x10>
80006102:	da 2a       	popm	r4-r7,pc,r12=1
80006104:	ce ef       	rcall	800060e0 <flashc_quick_user_page_read>
80006106:	d8 22       	popm	r4-r7,pc

80006108 <flashc_write_user_page>:
80006108:	d4 01       	pushm	lr
}
8000610a:	3f fb       	mov	r11,-1
8000610c:	30 dc       	mov	r12,13
8000610e:	ca 1f       	rcall	80006050 <flashc_issue_command>
80006110:	d8 02       	popm	pc
80006112:	d7 03       	nop

80006114 <flashc_memset64>:


void flashc_write_user_page(void)
{
	flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WUP, -1);
}
80006114:	d4 31       	pushm	r0-r7,lr
80006116:	21 2d       	sub	sp,72
	return flashc_memset64(dst, src | (uint64_t)src << 32, nbytes, erase);
}


volatile void *flashc_memset64(volatile void *dst, uint64_t src, size_t nbytes, bool erase)
{
80006118:	50 58       	stdsp	sp[0x14],r8
8000611a:	12 96       	mov	r6,r9
	// Use aggregated pointers to have several alignments available for a same address.
	UnionCVPtr flash_array_end;
	UnionVPtr dest;
	Union64 source = {0};
8000611c:	30 08       	mov	r8,0
8000611e:	30 09       	mov	r9,0
	return flashc_memset64(dst, src | (uint64_t)src << 32, nbytes, erase);
}


volatile void *flashc_memset64(volatile void *dst, uint64_t src, size_t nbytes, bool erase)
{
80006120:	18 97       	mov	r7,r12
	// Use aggregated pointers to have several alignments available for a same address.
	UnionCVPtr flash_array_end;
	UnionVPtr dest;
	Union64 source = {0};
80006122:	fa e9 00 38 	st.d	sp[56],r8
	return flashc_memset64(dst, src | (uint64_t)src << 32, nbytes, erase);
}


volatile void *flashc_memset64(volatile void *dst, uint64_t src, size_t nbytes, bool erase)
{
80006126:	14 94       	mov	r4,r10
80006128:	16 95       	mov	r5,r11
		256,
		384,
		512,
		768,
		1024,
	};
8000612a:	31 0a       	mov	r10,16
8000612c:	fe cb c6 5e 	sub	r11,pc,-14754
80006130:	fa cc ff e0 	sub	r12,sp,-32
80006134:	e0 a0 15 a2 	rcall	80008c78 <memcpy>
	return ((unsigned int)FLASH_SIZE[(AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FSZ_MASK)
80006138:	fe 68 14 00 	mov	r8,-125952
	UnionVPtr tmp;
	unsigned int error_status = 0;
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
8000613c:	fa cb ff b8 	sub	r11,sp,-72
80006140:	70 28       	ld.w	r8,r8[0x8]
80006142:	f1 d8 c1 a3 	bfextu	r8,r8,0xd,0x3
80006146:	f6 08 00 18 	add	r8,r11,r8<<0x1
8000614a:	f1 13 ff d8 	ld.uh	r3,r8[-40]
8000614e:	30 08       	mov	r8,0
80006150:	ea 18 80 00 	orh	r8,0x8000
	dest.u8ptr = dst;
80006154:	ab 63       	lsl	r3,0xa
	UnionVPtr tmp;
	unsigned int error_status = 0;
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
80006156:	51 17       	stdsp	sp[0x44],r7
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
80006158:	10 03       	add	r3,r8
8000615a:	ee c8 ff f9 	sub	r8,r7,-7
8000615e:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
80006162:	c1 38       	rjmp	80006188 <flashc_memset64+0x74>
80006164:	f0 c9 00 01 	sub	r9,r8,1
		source.u8[i] = src;
80006168:	fa ca ff b8 	sub	r10,sp,-72
8000616c:	f4 08 00 08 	add	r8,r10,r8
		src >>= 8;
80006170:	ea 0a 16 08 	lsr	r10,r5,0x8
	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
		source.u8[i] = src;
80006174:	f1 64 ff f0 	st.b	r8[-16],r4

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
80006178:	f1 d9 c0 03 	bfextu	r8,r9,0x0,0x3
		source.u8[i] = src;
		src >>= 8;
8000617c:	e8 09 16 08 	lsr	r9,r4,0x8
80006180:	f3 e5 11 89 	or	r9,r9,r5<<0x18
80006184:	14 95       	mov	r5,r10
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
80006186:	12 94       	mov	r4,r9
80006188:	58 04       	cp.w	r4,0
8000618a:	5c 25       	cpc	r5
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
		source.u8[i] = src;
		src >>= 8;
	}
	dest_end.u8ptr = dest.u8ptr + nbytes;
8000618c:	ce c1       	brne	80006164 <flashc_memset64+0x50>
8000618e:	ee 06 00 06 	add	r6,r7,r6

	// If destination is outside flash, go to next flash page if any.
	if (dest.u8ptr < AVR32_FLASH) {
80006192:	e0 69 ff ff 	mov	r9,65535
80006196:	ea 19 7f ff 	orh	r9,0x7fff
8000619a:	12 37       	cp.w	r7,r9
8000619c:	e0 8b 00 06 	brhi	800061a8 <flashc_memset64+0x94>
		dest.u8ptr = AVR32_FLASH;
800061a0:	30 08       	mov	r8,0
800061a2:	ea 18 80 00 	orh	r8,0x8000
	} else if (flash_array_end.u8ptr <= dest.u8ptr && dest.u8ptr < AVR32_FLASHC_USER_PAGE) {
800061a6:	c0 e8       	rjmp	800061c2 <flashc_memset64+0xae>
800061a8:	0e 33       	cp.w	r3,r7
800061aa:	e0 8b 00 0d 	brhi	800061c4 <flashc_memset64+0xb0>
800061ae:	e0 68 ff ff 	mov	r8,65535
800061b2:	ea 18 80 7f 	orh	r8,0x807f
800061b6:	10 37       	cp.w	r7,r8
800061b8:	e0 8b 00 06 	brhi	800061c4 <flashc_memset64+0xb0>
		dest.u8ptr = AVR32_FLASHC_USER_PAGE;
800061bc:	30 08       	mov	r8,0
800061be:	ea 18 80 80 	orh	r8,0x8080
	}

	// If end of destination is outside flash, move it to the end of the previous flash page if any.
	if (dest_end.u8ptr > AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE) {
800061c2:	51 18       	stdsp	sp[0x44],r8
800061c4:	e0 61 02 00 	mov	r1,512
800061c8:	ea 11 80 80 	orh	r1,0x8080
800061cc:	02 36       	cp.w	r6,r1
800061ce:	e0 88 00 04 	brls	800061d6 <flashc_memset64+0xc2>
800061d2:	02 96       	mov	r6,r1
		dest_end.u8ptr = AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE;
	} else if (AVR32_FLASHC_USER_PAGE >= dest_end.u8ptr && dest_end.u8ptr > flash_array_end.u8ptr) {
800061d4:	c0 a8       	rjmp	800061e8 <flashc_memset64+0xd4>
800061d6:	30 00       	mov	r0,0
800061d8:	ea 10 80 80 	orh	r0,0x8080
800061dc:	00 36       	cp.w	r6,r0
800061de:	e0 8b 00 05 	brhi	800061e8 <flashc_memset64+0xd4>
800061e2:	06 36       	cp.w	r6,r3
800061e4:	e6 06 17 b0 	movhi	r6,r3
		// Determine if the current destination page has an incomplete end.
		incomplete_flash_page_end = (Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
				Align_down((uint32_t)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;
800061e8:	fa ea 00 38 	ld.d	r10,sp[56]
			// pages that have already been written to.
			{
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
800061ec:	e5 d6 c0 03 	bfextu	r2,r6,0x0,0x3
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
800061f0:	0c 91       	mov	r1,r6
800061f2:	ec 02 01 08 	sub	r8,r6,r2
		// Determine if the current destination page has an incomplete end.
		incomplete_flash_page_end = (Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
				Align_down((uint32_t)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;
800061f6:	fa eb 00 04 	st.d	sp[4],r10
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
			*dest.u64ptr++ = source.u64;
		}

		// If the current destination page has an incomplete end...
		if (incomplete_flash_page_end) {
800061fa:	2f 88       	sub	r8,-8
	}

	// Align each end of destination pointer with its natural boundary.
	dest_end.u16ptr = (uint16_t *)Align_down((uint32_t)dest_end.u8ptr, sizeof(uint16_t));
	dest_end.u32ptr = (uint32_t *)Align_down((uint32_t)dest_end.u16ptr, sizeof(uint32_t));
	dest_end.u64ptr = (uint64_t *)Align_down((uint32_t)dest_end.u32ptr, sizeof(uint64_t));
800061fc:	0c 9a       	mov	r10,r6
800061fe:	e0 11 ff f8 	andl	r1,0xfff8
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
			*dest.u64ptr++ = source.u64;
		}

		// If the current destination page has an incomplete end...
		if (incomplete_flash_page_end) {
80006202:	e0 1a fe 00 	andl	r10,0xfe00
		// Determine if the current destination page has an incomplete end.
		incomplete_flash_page_end = (Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
				Align_down((uint32_t)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;
80006206:	50 78       	stdsp	sp[0x1c],r8
80006208:	30 05       	mov	r5,0
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
			*dest.u64ptr++ = source.u64;
		}

		// If the current destination page has an incomplete end...
		if (incomplete_flash_page_end) {
8000620a:	e0 64 08 48 	mov	r4,2120
	dest_end.u64ptr = (uint64_t *)Align_down((uint32_t)dest_end.u32ptr, sizeof(uint64_t));

	// While end of destination is not reached...
	while (dest.u8ptr < dest_end.u8ptr) {
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
8000620e:	50 6a       	stdsp	sp[0x18],r10
80006210:	c9 d8       	rjmp	8000634a <flashc_memset64+0x236>
		// Determine if the current destination page has an incomplete end.
		incomplete_flash_page_end = (Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
				Align_down((uint32_t)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;
80006212:	c3 ff       	rcall	80006090 <flashc_clear_page_buffer>
80006214:	fa e8 00 04 	ld.d	r8,sp[4]
80006218:	fa e9 00 30 	st.d	sp[48],r8
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Determine where the source data will end in the current flash page.
		flash_page_source_end.u64ptr =
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
8000621c:	68 08       	ld.w	r8,r4[0x0]

	// While end of destination is not reached...
	while (dest.u8ptr < dest_end.u8ptr) {
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;
8000621e:	00 99       	mov	r9,r0

		// Determine where the source data will end in the current flash page.
		flash_page_source_end.u64ptr =
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
80006220:	10 45       	or	r5,r8
80006222:	e0 19 fe 00 	andl	r9,0xfe00

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;

		// If destination does not point to the beginning of the current flash page...
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
80006226:	f1 d0 c0 09 	bfextu	r8,r0,0x0,0x9
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Determine where the source data will end in the current flash page.
		flash_page_source_end.u64ptr =
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
8000622a:	f2 cc fe 00 	sub	r12,r9,-512
8000622e:	e2 0c 0d 4c 	min	r12,r1,r12

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;

		// If destination does not point to the beginning of the current flash page...
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
80006232:	58 08       	cp.w	r8,0
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
80006234:	c3 20       	breq	80006298 <flashc_memset64+0x184>
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
80006236:	00 9a       	mov	r10,r0
80006238:	51 09       	stdsp	sp[0x40],r9
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
8000623a:	12 9b       	mov	r11,r9
8000623c:	e0 1a ff f8 	andl	r10,0xfff8
80006240:	0c 9e       	mov	lr,r6
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
80006242:	50 07       	stdsp	sp[0x0],r7
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
					tmp.u64ptr++) {
				*tmp.u64ptr = *tmp.u64ptr;
80006244:	c0 58       	rjmp	8000624e <flashc_memset64+0x13a>
80006246:	f0 e6 00 00 	ld.d	r6,r8[0]
8000624a:	f0 e7 00 00 	st.d	r8[0],r6
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
8000624e:	16 98       	mov	r8,r11
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
80006250:	2f 8b       	sub	r11,-8
80006252:	14 38       	cp.w	r8,r10
80006254:	cf 93       	brcs	80006246 <flashc_memset64+0x132>
80006256:	51 08       	stdsp	sp[0x40],r8
80006258:	1c 96       	mov	r6,lr
					tmp.u64ptr++) {
				*tmp.u64ptr = *tmp.u64ptr;
			}

			// If destination is not 64-bit aligned...
			if (!Test_align((uint32_t)dest.u8ptr, sizeof(uint64_t))) {
8000625a:	40 07       	lddsp	r7,sp[0x0]
8000625c:	e1 d0 c0 03 	bfextu	r0,r0,0x0,0x3
80006260:	c1 c0       	breq	80006298 <flashc_memset64+0x184>
80006262:	30 0b       	mov	r11,0
80006264:	50 39       	stdsp	sp[0xc],r9
80006266:	f0 0b 00 0e 	add	lr,r8,r11
				// flash page data.
				// This is required by the hardware, even if page erase is not
				// requested, in order to be able to write successfully to erased parts
				// of flash pages that have already been written to.
				for (i = 0; i < Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)); i++) {
					flash_dword.u8[i] = *tmp.u8ptr++;
8000626a:	fa c9 ff d0 	sub	r9,sp,-48
8000626e:	1d 8e       	ld.ub	lr,lr[0x0]
80006270:	f2 0b 0b 0e 	st.b	r9[r11],lr
				// Fill the beginning of the flash double-word buffer with the current
				// flash page data.
				// This is required by the hardware, even if page erase is not
				// requested, in order to be able to write successfully to erased parts
				// of flash pages that have already been written to.
				for (i = 0; i < Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)); i++) {
80006274:	2f fb       	sub	r11,-1
80006276:	00 3b       	cp.w	r11,r0
80006278:	cf 71       	brne	80006266 <flashc_memset64+0x152>
					flash_dword.u8[i] = *tmp.u8ptr++;
				}

				// Align the destination pointer with its 64-bit boundary.
				dest.u64ptr = (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
8000627a:	16 08       	add	r8,r11
				// Fill the beginning of the flash double-word buffer with the current
				// flash page data.
				// This is required by the hardware, even if page erase is not
				// requested, in order to be able to write successfully to erased parts
				// of flash pages that have already been written to.
				for (i = 0; i < Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)); i++) {
8000627c:	51 1a       	stdsp	sp[0x44],r10
8000627e:	51 08       	stdsp	sp[0x40],r8

				// Align the destination pointer with its 64-bit boundary.
				dest.u64ptr = (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));

				// If the current destination double-word is not the last one...
				if (dest.u64ptr < dest_end.u64ptr) {
80006280:	40 39       	lddsp	r9,sp[0xc]
80006282:	02 3a       	cp.w	r10,r1
					// Write the flash double-word buffer to the page buffer and reinitialize it.
					*dest.u64ptr++ = flash_dword.u64;
80006284:	c0 a2       	brcc	80006298 <flashc_memset64+0x184>
80006286:	14 98       	mov	r8,r10
80006288:	fa ea 00 30 	ld.d	r10,sp[48]
					flash_dword.u64 = source.u64;
8000628c:	b1 2a       	st.d	r8++,r10
8000628e:	fa ea 00 04 	ld.d	r10,sp[4]
80006292:	51 18       	stdsp	sp[0x44],r8
80006294:	fa eb 00 30 	st.d	sp[48],r10
				}
			}
		}

		// Write the source data to the page buffer with 64-bit alignment.
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
80006298:	41 18       	lddsp	r8,sp[0x44]
8000629a:	02 9e       	mov	lr,r1
8000629c:	10 1c       	sub	r12,r8
8000629e:	10 9b       	mov	r11,r8
800062a0:	a3 5c       	asr	r12,0x3
800062a2:	18 9a       	mov	r10,r12
800062a4:	c0 68       	rjmp	800062b0 <flashc_memset64+0x19c>
800062a6:	d7 03       	nop
800062a8:	fa e0 00 04 	ld.d	r0,sp[4]
800062ac:	20 1a       	sub	r10,1
800062ae:	b7 20       	st.d	r11++,r0
800062b0:	58 0a       	cp.w	r10,0
800062b2:	cf b1       	brne	800062a8 <flashc_memset64+0x194>
			*dest.u64ptr++ = source.u64;
800062b4:	f0 0c 00 3c 	add	r12,r8,r12<<0x3
				}
			}
		}

		// Write the source data to the page buffer with 64-bit alignment.
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
800062b8:	51 1c       	stdsp	sp[0x44],r12
			*dest.u64ptr++ = source.u64;
800062ba:	1c 91       	mov	r1,lr
				}
			}
		}

		// Write the source data to the page buffer with 64-bit alignment.
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
800062bc:	40 60       	lddsp	r0,sp[0x18]
800062be:	00 39       	cp.w	r9,r0
800062c0:	c2 13       	brcs	80006302 <flashc_memset64+0x1ee>
800062c2:	51 06       	stdsp	sp[0x40],r6
800062c4:	58 02       	cp.w	r2,0
800062c6:	c1 10       	breq	800062e8 <flashc_memset64+0x1d4>
			*dest.u64ptr++ = source.u64;
		}

		// If the current destination page has an incomplete end...
		if (incomplete_flash_page_end) {
800062c8:	fa c8 ff d0 	sub	r8,sp,-48
800062cc:	0c 99       	mov	r9,r6
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			{
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;
800062ce:	04 08       	add	r8,r2

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
800062d0:	fa ca ff c8 	sub	r10,sp,-56
800062d4:	13 3b       	ld.ub	r11,r9++
800062d6:	10 cb       	st.b	r8++,r11
800062d8:	14 38       	cp.w	r8,r10
800062da:	cf d1       	brne	800062d4 <flashc_memset64+0x1c0>
{
	return flashc_memset64(dst, src | (uint64_t)src << 32, nbytes, erase);
}


volatile void *flashc_memset64(volatile void *dst, uint64_t src, size_t nbytes, bool erase)
800062dc:	40 7b       	lddsp	r11,sp[0x1c]
800062de:	51 0b       	stdsp	sp[0x40],r11

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
						flash_dword.u8[i] = *tmp.u8ptr++;
800062e0:	fa e8 00 30 	ld.d	r8,sp[48]
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
800062e4:	b9 28       	st.d	r12++,r8
800062e6:	51 1c       	stdsp	sp[0x44],r12
800062e8:	41 08       	lddsp	r8,sp[0x40]
800062ea:	c0 58       	rjmp	800062f4 <flashc_memset64+0x1e0>
						flash_dword.u8[i] = *tmp.u8ptr++;

					// Write the flash double-word buffer to the page buffer.
					*dest.u64ptr++ = flash_dword.u64;
800062ec:	f2 ea 00 00 	ld.d	r10,r9[0]
800062f0:	f2 eb 00 00 	st.d	r9[0],r10
800062f4:	10 99       	mov	r9,r8
800062f6:	f5 d8 c0 09 	bfextu	r10,r8,0x0,0x9
				}

				// Fill the end of the page buffer with the current flash page data.
				for (; !Test_align((uint32_t)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++) {
					*tmp.u64ptr = *tmp.u64ptr;
800062fa:	2f 88       	sub	r8,-8
800062fc:	58 0a       	cp.w	r10,0
800062fe:	cf 71       	brne	800062ec <flashc_memset64+0x1d8>
80006300:	51 09       	stdsp	sp[0x40],r9
					// Write the flash double-word buffer to the page buffer.
					*dest.u64ptr++ = flash_dword.u64;
				}

				// Fill the end of the page buffer with the current flash page data.
				for (; !Test_align((uint32_t)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++) {
80006302:	41 10       	lddsp	r0,sp[0x44]
80006304:	30 0a       	mov	r10,0
80006306:	ea 1a 80 80 	orh	r10,0x8080
8000630a:	14 30       	cp.w	r0,r10
8000630c:	e0 8b 00 15 	brhi	80006336 <flashc_memset64+0x222>
				}
			}
		}

		// If the current flash page is in the flash array...
		if (dest.u8ptr <= AVR32_FLASHC_USER_PAGE) {
80006310:	40 59       	lddsp	r9,sp[0x14]
80006312:	58 09       	cp.w	r9,0
80006314:	c0 60       	breq	80006320 <flashc_memset64+0x20c>
80006316:	30 0b       	mov	r11,0
80006318:	3f fc       	mov	r12,-1
8000631a:	cc be       	rcall	800060b0 <flashc_erase_page>
			// Erase the current page if requested and write it from the page buffer.
			if (erase) {
8000631c:	68 08       	ld.w	r8,r4[0x0]
8000631e:	10 45       	or	r5,r8
80006320:	3f fc       	mov	r12,-1
				flashc_erase_page(-1, false);
80006322:	cd 9e       	rcall	800060d4 <flashc_write_page>
80006324:	68 08       	ld.w	r8,r4[0x0]
80006326:	10 45       	or	r5,r8
80006328:	06 30       	cp.w	r0,r3
				error_status |= flashc_error_status;
8000632a:	c1 03       	brcs	8000634a <flashc_memset64+0x236>
8000632c:	30 08       	mov	r8,0
			}
			flashc_write_page(-1);
8000632e:	ea 18 80 80 	orh	r8,0x8080
80006332:	51 18       	stdsp	sp[0x44],r8
			error_status |= flashc_error_status;
80006334:	c0 b8       	rjmp	8000634a <flashc_memset64+0x236>
80006336:	40 58       	lddsp	r8,sp[0x14]

			// If the end of the flash array is reached, go to the User page.
			if (dest.u8ptr >= flash_array_end.u8ptr) {
80006338:	58 08       	cp.w	r8,0
8000633a:	c0 50       	breq	80006344 <flashc_memset64+0x230>
				dest.u8ptr = AVR32_FLASHC_USER_PAGE;
8000633c:	30 0c       	mov	r12,0
8000633e:	cd be       	rcall	800060f4 <flashc_erase_user_page>
80006340:	68 08       	ld.w	r8,r4[0x0]
80006342:	10 45       	or	r5,r8
80006344:	ce 2e       	rcall	80006108 <flashc_write_user_page>
			}
		} else {
			// Erase the User page if requested and write it from the page buffer.
			if (erase) {
80006346:	68 08       	ld.w	r8,r4[0x0]
80006348:	10 45       	or	r5,r8
8000634a:	41 10       	lddsp	r0,sp[0x44]
				flashc_erase_user_page(false);
8000634c:	0c 30       	cp.w	r0,r6
8000634e:	fe 93 ff 62 	brlo	80006212 <flashc_memset64+0xfe>
				error_status |= flashc_error_status;
80006352:	e0 68 08 48 	mov	r8,2120
			}
			flashc_write_user_page();
80006356:	0e 9c       	mov	r12,r7
80006358:	91 05       	st.w	r8[0x0],r5
			error_status |= flashc_error_status;
8000635a:	2e ed       	sub	sp,-72
8000635c:	d8 32       	popm	r0-r7,pc
	dest_end.u16ptr = (uint16_t *)Align_down((uint32_t)dest_end.u8ptr, sizeof(uint16_t));
	dest_end.u32ptr = (uint32_t *)Align_down((uint32_t)dest_end.u16ptr, sizeof(uint32_t));
	dest_end.u64ptr = (uint64_t *)Align_down((uint32_t)dest_end.u32ptr, sizeof(uint64_t));

	// While end of destination is not reached...
	while (dest.u8ptr < dest_end.u8ptr) {
8000635e:	d7 03       	nop

80006360 <flashc_memset32>:
80006360:	d4 21       	pushm	r4-r7,lr
80006362:	30 0e       	mov	lr,0
80006364:	16 96       	mov	r6,r11
			error_status |= flashc_error_status;
		}
	}

	// Update the FLASHC error status.
	flashc_error_status = error_status;
80006366:	1c 97       	mov	r7,lr

	// Return the initial destination pointer as the standard memset function does.
	return dst;
}
80006368:	12 98       	mov	r8,r9
			error_status |= flashc_error_status;
		}
	}

	// Update the FLASHC error status.
	flashc_error_status = error_status;
8000636a:	0c 9b       	mov	r11,r6

	// Return the initial destination pointer as the standard memset function does.
	return dst;
}
8000636c:	14 99       	mov	r9,r10
8000636e:	0e 4b       	or	r11,r7
80006370:	0e 9a       	mov	r10,r7
80006372:	0c 4a       	or	r10,r6
80006374:	cd 0e       	rcall	80006114 <flashc_memset64>
80006376:	d8 22       	popm	r4-r7,pc

80006378 <flashc_memset16>:
80006378:	d4 01       	pushm	lr
8000637a:	f7 db d2 10 	bfins	r11,r11,0x10,0x10
8000637e:	cf 1f       	rcall	80006360 <flashc_memset32>
80006380:	d8 02       	popm	pc
80006382:	d7 03       	nop

80006384 <flashc_memset8>:


volatile void *flashc_memset16(volatile void *dst, uint16_t src, size_t nbytes, bool erase)
{
	return flashc_memset32(dst, src | (uint32_t)src << 16, nbytes, erase);
}
80006384:	d4 01       	pushm	lr
80006386:	f7 eb 10 8b 	or	r11,r11,r11<<0x8
}


volatile void *flashc_memset8(volatile void *dst, uint8_t src, size_t nbytes, bool erase)
{
	return flashc_memset16(dst, src | (uint16_t)src << 8, nbytes, erase);
8000638a:	5c 7b       	castu.h	r11
8000638c:	cf 6f       	rcall	80006378 <flashc_memset16>
8000638e:	d8 02       	popm	pc

80006390 <flashc_memcpy>:
}
80006390:	d4 31       	pushm	r0-r7,lr
80006392:	20 4d       	sub	sp,16
80006394:	e0 6e ff ff 	mov	lr,65535
	Assert( (((uint8_t *)dst >= AVR32_FLASH)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASH + flashc_get_flash_size())))
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;
80006398:	ea 1e 80 7f 	orh	lr,0x807f

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));
8000639c:	18 94       	mov	r4,r12
	Assert( (((uint8_t *)dst >= AVR32_FLASH)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASH + flashc_get_flash_size())))
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;
8000639e:	1c 3c       	cp.w	r12,lr
800063a0:	5f b5       	srhi	r5
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
800063a2:	18 97       	mov	r7,r12
	Union64 flash_dword;
	uint8_t i;
	bool b_user_page;
	unsigned int error_status = 0;
	uint8_t* flash_add;
	uint8_t* dest_add=(uint8_t*)dst;
800063a4:	18 92       	mov	r2,r12
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
800063a6:	14 96       	mov	r6,r10
	// Return the initial destination pointer as the standard memset function does.
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
800063a8:	fa cc ff f0 	sub	r12,sp,-16
{
800063ac:	50 19       	stdsp	sp[0x4],r9
	uint8_t i;
	bool b_user_page;
	unsigned int error_status = 0;
	uint8_t* flash_add;
	uint8_t* dest_add=(uint8_t*)dst;
	const uint8_t* src_buf=(const uint8_t*)src;
800063ae:	16 90       	mov	r0,r11
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));
800063b0:	30 01       	mov	r1,0
800063b2:	e0 14 fe 00 	andl	r4,0xfe00
800063b6:	e0 63 08 48 	mov	r3,2120

	while (nbytes) {
800063ba:	50 0c       	stdsp	sp[0x0],r12
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
800063bc:	c4 08       	rjmp	8000643c <flashc_memcpy+0xac>
800063be:	c6 9e       	rcall	80006090 <flashc_clear_page_buffer>
		error_status |= flashc_error_status;
800063c0:	66 08       	ld.w	r8,r3[0x0]
800063c2:	e8 cb fe 00 	sub	r11,r4,-512
800063c6:	10 41       	or	r1,r8
800063c8:	16 9c       	mov	r12,r11
800063ca:	08 98       	mov	r8,r4

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;
800063cc:	f0 ea 00 00 	ld.d	r10,r8[0]
800063d0:	fa c9 ff f8 	sub	r9,sp,-8
800063d4:	fa eb 00 08 	st.d	sp[8],r10
	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));

	while (nbytes) {
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;
800063d8:	10 9a       	mov	r10,r8

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;
800063da:	18 9b       	mov	r11,r12

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
800063dc:	04 3a       	cp.w	r10,r2
800063de:	5f 0e       	sreq	lr
800063e0:	58 06       	cp.w	r6,0
800063e2:	5f 1c       	srne	r12
800063e4:	fd ec 00 0c 	and	r12,lr,r12
800063e8:	30 0e       	mov	lr,0
800063ea:	fc 0c 18 00 	cp.b	r12,lr
800063ee:	c0 50       	breq	800063f8 <flashc_memcpy+0x68>
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
800063f0:	01 3c       	ld.ub	r12,r0++
	// Return the initial destination pointer as the standard memset function does.
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
800063f2:	2f f2       	sub	r2,-1
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
					dest_add++;
					nbytes--;
800063f4:	20 16       	sub	r6,1

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
800063f6:	b2 8c       	st.b	r9[0x0],r12
					dest_add++;
					nbytes--;
				}
				flash_add++;
800063f8:	2f fa       	sub	r10,-1
800063fa:	2f f9       	sub	r9,-1
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
800063fc:	40 0c       	lddsp	r12,sp[0x0]
800063fe:	18 39       	cp.w	r9,r12
80006400:	ce e1       	brne	800063dc <flashc_memcpy+0x4c>
80006402:	16 9c       	mov	r12,r11
				}
				flash_add++;
			}

			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
80006404:	fa ea 00 08 	ld.d	r10,sp[8]
80006408:	b1 2a       	st.d	r8++,r10
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
8000640a:	18 38       	cp.w	r8,r12
8000640c:	ce 01       	brne	800063cc <flashc_memcpy+0x3c>
8000640e:	e8 c4 fe 00 	sub	r4,r4,-512
			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
		}

		// Erase the current page if requested and write it from the page buffer.
		if (erase) {
80006412:	40 1a       	lddsp	r10,sp[0x4]
80006414:	58 0a       	cp.w	r10,0
80006416:	c0 b0       	breq	8000642c <flashc_memcpy+0x9c>
			(b_user_page)? flashc_erase_user_page(false) : flashc_erase_page(-1, false);
80006418:	58 05       	cp.w	r5,0
8000641a:	c0 40       	breq	80006422 <flashc_memcpy+0x92>
8000641c:	30 0c       	mov	r12,0
8000641e:	c6 be       	rcall	800060f4 <flashc_erase_user_page>
80006420:	c0 48       	rjmp	80006428 <flashc_memcpy+0x98>
80006422:	0a 9b       	mov	r11,r5
80006424:	3f fc       	mov	r12,-1
80006426:	c4 5e       	rcall	800060b0 <flashc_erase_page>
80006428:	66 08       	ld.w	r8,r3[0x0]
8000642a:	10 41       	or	r1,r8
			error_status |= flashc_error_status;
8000642c:	58 05       	cp.w	r5,0
8000642e:	c0 30       	breq	80006434 <flashc_memcpy+0xa4>
		}

		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
80006430:	c6 ce       	rcall	80006108 <flashc_write_user_page>
80006432:	c0 38       	rjmp	80006438 <flashc_memcpy+0xa8>
80006434:	3f fc       	mov	r12,-1
80006436:	c4 fe       	rcall	800060d4 <flashc_write_page>
80006438:	66 08       	ld.w	r8,r3[0x0]
8000643a:	10 41       	or	r1,r8
8000643c:	58 06       	cp.w	r6,0
8000643e:	cc 01       	brne	800063be <flashc_memcpy+0x2e>
		error_status |= flashc_error_status;
80006440:	e0 68 08 48 	mov	r8,2120

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));

	while (nbytes) {
80006444:	0e 9c       	mov	r12,r7
80006446:	91 01       	st.w	r8[0x0],r1
		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
		error_status |= flashc_error_status;
	}
	// Update the FLASHC error status.
	flashc_error_status = error_status;
80006448:	2f cd       	sub	sp,-16

	// Return the initial destination pointer as the standard memcpy function does.
	return dst;
}
8000644a:	d8 32       	popm	r0-r7,pc

8000644c <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000644c:	f8 08 16 05 	lsr	r8,r12,0x5
80006450:	a9 68       	lsl	r8,0x8
80006452:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
80006456:	58 1b       	cp.w	r11,1
80006458:	c0 d0       	breq	80006472 <gpio_enable_module_pin+0x26>
8000645a:	c0 63       	brcs	80006466 <gpio_enable_module_pin+0x1a>
8000645c:	58 2b       	cp.w	r11,2
8000645e:	c0 f0       	breq	8000647c <gpio_enable_module_pin+0x30>
80006460:	58 3b       	cp.w	r11,3
80006462:	c1 20       	breq	80006486 <gpio_enable_module_pin+0x3a>
80006464:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80006466:	30 19       	mov	r9,1
80006468:	f2 0c 09 49 	lsl	r9,r9,r12
8000646c:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000646e:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80006470:	c1 08       	rjmp	80006490 <gpio_enable_module_pin+0x44>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80006472:	f6 0c 09 4b 	lsl	r11,r11,r12
80006476:	91 5b       	st.w	r8[0x14],r11
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80006478:	91 ab       	st.w	r8[0x28],r11
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
8000647a:	c0 b8       	rjmp	80006490 <gpio_enable_module_pin+0x44>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000647c:	30 19       	mov	r9,1
8000647e:	f2 0c 09 49 	lsl	r9,r9,r12
80006482:	91 69       	st.w	r8[0x18],r9
80006484:	c0 58       	rjmp	8000648e <gpio_enable_module_pin+0x42>
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80006486:	30 19       	mov	r9,1
80006488:	f2 0c 09 49 	lsl	r9,r9,r12
8000648c:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000648e:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80006490:	30 19       	mov	r9,1
80006492:	f2 0c 09 4c 	lsl	r12,r9,r12
80006496:	91 2c       	st.w	r8[0x8],r12
80006498:	5e fd       	retal	0
8000649a:	d7 03       	nop

8000649c <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
8000649c:	d4 21       	pushm	r4-r7,lr
8000649e:	30 07       	mov	r7,0
800064a0:	18 96       	mov	r6,r12
800064a2:	16 94       	mov	r4,r11
800064a4:	0e 95       	mov	r5,r7
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800064a6:	c0 78       	rjmp	800064b4 <gpio_enable_module+0x18>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800064a8:	6c 1b       	ld.w	r11,r6[0x4]
800064aa:	6c 0c       	ld.w	r12,r6[0x0]
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800064ac:	2f f7       	sub	r7,-1
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
800064ae:	2f 86       	sub	r6,-8
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800064b0:	cc ef       	rcall	8000644c <gpio_enable_module_pin>
800064b2:	18 45       	or	r5,r12
800064b4:	08 37       	cp.w	r7,r4
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800064b6:	cf 93       	brcs	800064a8 <gpio_enable_module+0xc>
800064b8:	0a 9c       	mov	r12,r5
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
800064ba:	d8 22       	popm	r4-r7,pc

800064bc <gpio_enable_gpio_pin>:
800064bc:	30 18       	mov	r8,1
800064be:	f0 0c 09 48 	lsl	r8,r8,r12
800064c2:	a5 9c       	lsr	r12,0x5
 *            AVR32_PWM_3_PIN for PWM channel 3 can also be used to release
 *            module pins for GPIO.
 */
void gpio_enable_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800064c4:	a9 6c       	lsl	r12,0x8
800064c6:	e0 2c f0 00 	sub	r12,61440
	
	gpio_port->oderc = 1 << (pin & 0x1F);
800064ca:	f9 48 00 48 	st.w	r12[72],r8
	gpio_port->gpers = 1 << (pin & 0x1F);
800064ce:	99 18       	st.w	r12[0x4],r8
}
800064d0:	5e fc       	retal	r12

800064d2 <gpio_get_pin_value>:
 *
 * \return The pin value.
 */
bool gpio_get_pin_value(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800064d2:	f8 08 16 05 	lsr	r8,r12,0x5
800064d6:	a9 68       	lsl	r8,0x8
800064d8:	e0 28 f0 00 	sub	r8,61440
	
	return (gpio_port->pvr >> (pin & 0x1F)) & 1;
800064dc:	71 88       	ld.w	r8,r8[0x60]
800064de:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
800064e2:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800064e6:	5e fc       	retal	r12

800064e8 <gpio_set_gpio_pin>:
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
800064e8:	30 18       	mov	r8,1
800064ea:	f0 0c 09 48 	lsl	r8,r8,r12
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800064ee:	a5 9c       	lsr	r12,0x5
800064f0:	a9 6c       	lsl	r12,0x8
800064f2:	e0 2c f0 00 	sub	r12,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
800064f6:	f9 48 00 54 	st.w	r12[84],r8
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
800064fa:	f9 48 00 44 	st.w	r12[68],r8
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
800064fe:	99 18       	st.w	r12[0x4],r8
}
80006500:	5e fc       	retal	r12

80006502 <gpio_clr_gpio_pin>:
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80006502:	30 18       	mov	r8,1
80006504:	f0 0c 09 48 	lsl	r8,r8,r12
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80006508:	a5 9c       	lsr	r12,0x5
8000650a:	a9 6c       	lsl	r12,0x8
8000650c:	e0 2c f0 00 	sub	r12,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80006510:	f9 48 00 58 	st.w	r12[88],r8
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
80006514:	f9 48 00 44 	st.w	r12[68],r8
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80006518:	99 18       	st.w	r12[0x4],r8
}
8000651a:	5e fc       	retal	r12

8000651c <gpio_enable_pin_interrupt>:
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
8000651c:	30 1a       	mov	r10,1
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000651e:	f8 08 16 05 	lsr	r8,r12,0x5

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
80006522:	f4 0c 09 49 	lsl	r9,r10,r12
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80006526:	a9 68       	lsl	r8,0x8
80006528:	e0 28 f0 00 	sub	r8,61440

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
8000652c:	f1 49 00 c4 	st.w	r8[196],r9
static uint32_t gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Configure the edge detector. */
	switch (mode) {
80006530:	14 3b       	cp.w	r11,r10
80006532:	c0 80       	breq	80006542 <gpio_enable_pin_interrupt+0x26>
80006534:	c0 43       	brcs	8000653c <gpio_enable_pin_interrupt+0x20>
80006536:	58 2b       	cp.w	r11,2
80006538:	c0 f1       	brne	80006556 <gpio_enable_pin_interrupt+0x3a>
8000653a:	c0 98       	rjmp	8000654c <gpio_enable_pin_interrupt+0x30>
	case GPIO_PIN_CHANGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
8000653c:	f1 49 00 a8 	st.w	r8[168],r9
80006540:	c0 38       	rjmp	80006546 <gpio_enable_pin_interrupt+0x2a>
		gpio_port->imr1c = 1 << (pin & 0x1F);
		break;

	case GPIO_RISING_EDGE:
		gpio_port->imr0s = 1 << (pin & 0x1F);
80006542:	f1 49 00 a4 	st.w	r8[164],r9
		gpio_port->imr1c = 1 << (pin & 0x1F);
80006546:	f1 49 00 b8 	st.w	r8[184],r9
8000654a:	c0 78       	rjmp	80006558 <gpio_enable_pin_interrupt+0x3c>
		break;

	case GPIO_FALLING_EDGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
8000654c:	f1 49 00 a8 	st.w	r8[168],r9
		gpio_port->imr1s = 1 << (pin & 0x1F);
80006550:	f1 49 00 b4 	st.w	r8[180],r9
80006554:	c0 28       	rjmp	80006558 <gpio_enable_pin_interrupt+0x3c>
80006556:	5e fa       	retal	r10
	if (GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode)) {
		return(GPIO_INVALID_ARGUMENT);
	}

	/* Enable interrupt. */
	gpio_port->iers = 1 << (pin & 0x1F);
80006558:	f1 49 00 94 	st.w	r8[148],r9
8000655c:	5e fd       	retal	0

8000655e <gpio_get_pin_interrupt_flag>:
 *
 * \return The pin interrupt flag.
 */
bool gpio_get_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000655e:	f8 08 16 05 	lsr	r8,r12,0x5
80006562:	a9 68       	lsl	r8,0x8
80006564:	e0 28 f0 00 	sub	r8,61440
	
	return (gpio_port->ifr >> (pin & 0x1F)) & 1;
80006568:	f0 f8 00 d0 	ld.w	r8,r8[208]
8000656c:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
80006570:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80006574:	5e fc       	retal	r12

80006576 <gpio_clear_pin_interrupt_flag>:
	gpio_port->ifrc = 1 << (pin & 0x1F);

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
80006576:	30 18       	mov	r8,1
80006578:	f0 0c 09 48 	lsl	r8,r8,r12
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000657c:	a5 9c       	lsr	r12,0x5
8000657e:	a9 6c       	lsl	r12,0x8
80006580:	e0 2c f0 00 	sub	r12,61440
	gpio_port->ifrc = 1 << (pin & 0x1F);

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
80006584:	f9 48 00 d8 	st.w	r12[216],r8
#endif
}
80006588:	5e fc       	retal	r12

8000658a <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
8000658a:	c0 08       	rjmp	8000658a <_unhandled_interrupt>

8000658c <INTC_register_interrupt>:

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
8000658c:	f3 db c0 05 	bfextu	r9,r11,0x0,0x5
80006590:	fe c8 ca b0 	sub	r8,pc,-13648
80006594:	a5 9b       	lsr	r11,0x5
80006596:	f0 0b 00 38 	add	r8,r8,r11<<0x3
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
8000659a:	70 18       	ld.w	r8,r8[0x4]
8000659c:	f0 09 09 2c 	st.w	r8[r9<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
800065a0:	58 0a       	cp.w	r10,0
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800065a2:	c0 c1       	brne	800065ba <INTC_register_interrupt+0x2e>
800065a4:	fe 78 08 00 	mov	r8,-63488
800065a8:	fe c9 d1 a8 	sub	r9,pc,-11864
800065ac:	fe ca d0 a8 	sub	r10,pc,-12120
800065b0:	f4 09 01 09 	sub	r9,r10,r9
	} else if (int_level == AVR32_INTC_INT1) {
800065b4:	f0 0b 09 29 	st.w	r8[r11<<0x2],r9
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
800065b8:	5e fc       	retal	r12
800065ba:	58 1a       	cp.w	r10,1
800065bc:	c0 91       	brne	800065ce <INTC_register_interrupt+0x42>
800065be:	fe c8 d1 be 	sub	r8,pc,-11842
800065c2:	fe c9 d0 b0 	sub	r9,pc,-12112
	} else if (int_level == AVR32_INTC_INT2) {
800065c6:	f2 08 01 08 	sub	r8,r9,r8
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
800065ca:	bf a8       	sbr	r8,0x1e
800065cc:	c1 18       	rjmp	800065ee <INTC_register_interrupt+0x62>
800065ce:	fe c8 d1 ce 	sub	r8,pc,-11826
800065d2:	58 2a       	cp.w	r10,2
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
800065d4:	c0 71       	brne	800065e2 <INTC_register_interrupt+0x56>
800065d6:	fe c9 d0 b6 	sub	r9,pc,-12106
800065da:	f2 08 01 08 	sub	r8,r9,r8
800065de:	bf b8       	sbr	r8,0x1f
800065e0:	c0 78       	rjmp	800065ee <INTC_register_interrupt+0x62>
800065e2:	fe c9 d0 b4 	sub	r9,pc,-12108
800065e6:	f2 08 01 08 	sub	r8,r9,r8
800065ea:	ea 18 c0 00 	orh	r8,0xc000
800065ee:	fe 79 08 00 	mov	r9,-63488
800065f2:	f2 0b 09 28 	st.w	r9[r11<<0x2],r8
800065f6:	5e fc       	retal	r12

800065f8 <INTC_init_interrupts>:
800065f8:	d4 21       	pushm	r4-r7,lr
800065fa:	fe c8 d1 fa 	sub	r8,pc,-11782
800065fe:	e3 b8 00 01 	mtsr	0x4,r8
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80006602:	fe ce d0 fe 	sub	lr,pc,-12034
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80006606:	fe c9 cb 26 	sub	r9,pc,-13530

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000660a:	10 1e       	sub	lr,r8
8000660c:	fe cc 00 82 	sub	r12,pc,130
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80006610:	30 08       	mov	r8,0
80006612:	fe 7b 08 00 	mov	r11,-63488
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80006616:	c0 e8       	rjmp	80006632 <INTC_init_interrupts+0x3a>
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80006618:	72 16       	ld.w	r6,r9[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000661a:	ec 0a 00 26 	add	r6,r6,r10<<0x2

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000661e:	2f fa       	sub	r10,-1
80006620:	8d 0c       	st.w	r6[0x0],r12
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80006622:	0e 3a       	cp.w	r10,r7
80006624:	cf a3       	brcs	80006618 <INTC_init_interrupts+0x20>
80006626:	f6 08 09 2e 	st.w	r11[r8<<0x2],lr
8000662a:	2f 89       	sub	r9,-8
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000662c:	2f f8       	sub	r8,-1
8000662e:	59 28       	cp.w	r8,18
80006630:	c0 40       	breq	80006638 <INTC_init_interrupts+0x40>
80006632:	30 0a       	mov	r10,0
80006634:	72 07       	ld.w	r7,r9[0x0]
80006636:	cf 6b       	rjmp	80006622 <INTC_init_interrupts+0x2a>
80006638:	d8 22       	popm	r4-r7,pc
8000663a:	d7 03       	nop

8000663c <_get_interrupt_handler>:
8000663c:	e0 68 00 83 	mov	r8,131
80006640:	fe 79 08 00 	mov	r9,-63488
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80006644:	f0 0c 01 0c 	sub	r12,r8,r12
80006648:	f2 0c 03 28 	ld.w	r8,r9[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
8000664c:	f0 ca ff c0 	sub	r10,r8,-64
80006650:	f2 0a 03 2c 	ld.w	r12,r9[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80006654:	58 0c       	cp.w	r12,0
80006656:	5e 0c       	reteq	r12
		? _int_handler_table[int_grp]._int_line_handler_table[32
80006658:	fe c9 cb 78 	sub	r9,pc,-13448
8000665c:	f8 0c 12 00 	clz	r12,r12
80006660:	f2 08 00 38 	add	r8,r9,r8<<0x3
80006664:	f8 0c 11 1f 	rsub	r12,r12,31
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80006668:	70 18       	ld.w	r8,r8[0x4]
8000666a:	f0 0c 03 2c 	ld.w	r12,r8[r12<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000666e:	5e fc       	retal	r12

80006670 <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
80006670:	f8 c8 00 01 	sub	r8,r12,1
80006674:	f0 0b 00 0b 	add	r11,r8,r11
80006678:	f6 0c 0d 0a 	divu	r10,r11,r12
8000667c:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
8000667e:	f4 c8 00 01 	sub	r8,r10,1
80006682:	e0 48 00 fe 	cp.w	r8,254
80006686:	e0 88 00 03 	brls	8000668c <getBaudDiv+0x1c>
8000668a:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
8000668c:	5c 8c       	casts.h	r12
}
8000668e:	5e fc       	retal	r12

80006690 <spi_initMaster>:
	return SPI_OK;
}

spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
80006690:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
80006692:	30 18       	mov	r8,1
	return SPI_OK;
}

spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
80006694:	18 99       	mov	r9,r12
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
80006696:	f7 3a 00 0d 	ld.ub	r10,r11[13]
8000669a:	f0 0a 18 00 	cp.b	r10,r8
8000669e:	e0 88 00 04 	brls	800066a6 <spi_initMaster+0x16>
800066a2:	30 2c       	mov	r12,2
800066a4:	d8 02       	popm	pc

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
	u_avr32_spi_mr.MR.mstr = 1;
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
	u_avr32_spi_mr.MR.llb = 0;
800066a6:	30 0a       	mov	r10,0
	if (options->modfdis > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
800066a8:	e0 68 00 80 	mov	r8,128
800066ac:	99 08       	st.w	r12[0x0],r8

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
	u_avr32_spi_mr.MR.mstr = 1;
800066ae:	30 1e       	mov	lr,1

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
800066b0:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.mstr = 1;
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
800066b2:	f7 3b 00 0d 	ld.ub	r11,r11[13]
	u_avr32_spi_mr.MR.llb = 0;
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
	spi->mr = u_avr32_spi_mr.mr;
800066b6:	14 9c       	mov	r12,r10
	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
	u_avr32_spi_mr.MR.mstr = 1;
800066b8:	f1 de d0 01 	bfins	r8,lr,0x0,0x1
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
800066bc:	f1 db d0 81 	bfins	r8,r11,0x4,0x1
	u_avr32_spi_mr.MR.llb = 0;
800066c0:	f1 da d0 e1 	bfins	r8,r10,0x7,0x1
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
800066c4:	30 fa       	mov	r10,15
800066c6:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
	spi->mr = u_avr32_spi_mr.mr;
800066ca:	93 18       	st.w	r9[0x4],r8

	return SPI_OK;
}
800066cc:	d8 02       	popm	pc

800066ce <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
800066ce:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
800066d0:	30 18       	mov	r8,1
800066d2:	f0 0b 18 00 	cp.b	r11,r8
800066d6:	5f be       	srhi	lr
800066d8:	f0 0a 18 00 	cp.b	r10,r8
800066dc:	5f b8       	srhi	r8
800066de:	1c 48       	or	r8,lr
800066e0:	c0 30       	breq	800066e6 <spi_selectionMode+0x18>
800066e2:	30 2c       	mov	r12,2
800066e4:	d8 02       	popm	pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
800066e6:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
800066e8:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
800066ec:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
800066f0:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
800066f4:	99 18       	st.w	r12[0x4],r8
800066f6:	d8 0a       	popm	pc,r12=0

800066f8 <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
800066f8:	78 19       	ld.w	r9,r12[0x4]

	return SPI_OK;
}

spi_status_t spi_selectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
800066fa:	18 98       	mov	r8,r12
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
800066fc:	ea 19 00 0f 	orh	r9,0xf
80006700:	99 19       	st.w	r12[0x4],r9

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
80006702:	78 1c       	ld.w	r12,r12[0x4]
80006704:	e2 1c 00 04 	andl	r12,0x4,COH
80006708:	c1 00       	breq	80006728 <spi_selectChip+0x30>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
8000670a:	30 e9       	mov	r9,14
8000670c:	f2 0b 18 00 	cp.b	r11,r9
80006710:	e0 8b 00 1a 	brhi	80006744 <spi_selectChip+0x4c>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
80006714:	70 19       	ld.w	r9,r8[0x4]
80006716:	b1 6b       	lsl	r11,0x10
80006718:	30 0c       	mov	r12,0
8000671a:	ea 1b ff f0 	orh	r11,0xfff0
8000671e:	e8 1b ff ff 	orl	r11,0xffff
80006722:	12 6b       	and	r11,r9
80006724:	91 1b       	st.w	r8[0x4],r11
80006726:	5e fc       	retal	r12
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
80006728:	30 39       	mov	r9,3
8000672a:	f2 0b 18 00 	cp.b	r11,r9
8000672e:	e0 8b 00 0b 	brhi	80006744 <spi_selectChip+0x4c>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80006732:	70 19       	ld.w	r9,r8[0x4]
80006734:	2f 0b       	sub	r11,-16
80006736:	30 1a       	mov	r10,1
80006738:	f4 0b 09 4b 	lsl	r11,r10,r11
8000673c:	5c db       	com	r11
8000673e:	12 6b       	and	r11,r9
80006740:	91 1b       	st.w	r8[0x4],r11
80006742:	5e fc       	retal	r12
80006744:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
80006746:	5e fc       	retal	r12

80006748 <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80006748:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8000674c:	c0 58       	rjmp	80006756 <spi_unselectChip+0xe>
		if (!timeout--) {
8000674e:	58 08       	cp.w	r8,0
80006750:	c0 21       	brne	80006754 <spi_unselectChip+0xc>
80006752:	5e ff       	retal	1
80006754:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80006756:	78 49       	ld.w	r9,r12[0x10]
80006758:	ed b9 00 09 	bld	r9,0x9
8000675c:	cf 91       	brne	8000674e <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
8000675e:	78 18       	ld.w	r8,r12[0x4]
80006760:	ea 18 00 0f 	orh	r8,0xf
80006764:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80006766:	30 08       	mov	r8,0
80006768:	ea 18 01 00 	orh	r8,0x100
8000676c:	99 08       	st.w	r12[0x0],r8
8000676e:	5e fd       	retal	0

80006770 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
80006770:	d4 31       	pushm	r0-r7,lr
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80006772:	30 32       	mov	r2,3
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
80006774:	16 97       	mov	r7,r11
80006776:	18 96       	mov	r6,r12
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80006778:	f7 34 00 0c 	ld.ub	r4,r11[12]
8000677c:	e4 04 18 00 	cp.b	r4,r2
80006780:	e0 8b 00 46 	brhi	8000680c <spi_setupChipReg+0x9c>
			options->stay_act > 1 ||
80006784:	f7 31 00 0b 	ld.ub	r1,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80006788:	30 15       	mov	r5,1
8000678a:	ea 01 18 00 	cp.b	r1,r5
8000678e:	e0 8b 00 3f 	brhi	8000680c <spi_setupChipReg+0x9c>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
80006792:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80006796:	30 78       	mov	r8,7
80006798:	f0 03 18 00 	cp.b	r3,r8
8000679c:	e0 88 00 38 	brls	8000680c <spi_setupChipReg+0x9c>
800067a0:	31 08       	mov	r8,16
800067a2:	f0 03 18 00 	cp.b	r3,r8
800067a6:	e0 8b 00 33 	brhi	8000680c <spi_setupChipReg+0x9c>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
800067aa:	14 9b       	mov	r11,r10
800067ac:	6e 1c       	ld.w	r12,r7[0x4]
800067ae:	c6 1f       	rcall	80006670 <getBaudDiv>
800067b0:	c2 e5       	brlt	8000680c <spi_setupChipReg+0x9c>

	if (baudDiv < 0) {
800067b2:	08 9a       	mov	r10,r4
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800067b4:	ec 1a 00 01 	eorl	r10,0x1
800067b8:	30 08       	mov	r8,0
	if (baudDiv < 0) {
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
800067ba:	a1 94       	lsr	r4,0x1
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
800067bc:	f1 d4 d0 01 	bfins	r8,r4,0x0,0x1
800067c0:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800067c4:	ef 3a 00 09 	ld.ub	r10,r7[9]
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
800067c8:	20 83       	sub	r3,8
	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
800067ca:	f1 d1 d0 61 	bfins	r8,r1,0x3,0x1

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
800067ce:	0f 89       	ld.ub	r9,r7[0x0]
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;

	switch (options->reg) {
800067d0:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
800067d4:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
800067d8:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
800067dc:	ef 3a 00 0a 	ld.ub	r10,r7[10]
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
800067e0:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
800067e4:	ea 09 18 00 	cp.b	r9,r5

	switch (options->reg) {
800067e8:	c0 c0       	breq	80006800 <spi_setupChipReg+0x90>
800067ea:	c0 93       	brcs	800067fc <spi_setupChipReg+0x8c>
800067ec:	30 2a       	mov	r10,2
800067ee:	f4 09 18 00 	cp.b	r9,r10
800067f2:	c0 90       	breq	80006804 <spi_setupChipReg+0x94>
800067f4:	e4 09 18 00 	cp.b	r9,r2
800067f8:	c0 a1       	brne	8000680c <spi_setupChipReg+0x9c>
800067fa:	c0 78       	rjmp	80006808 <spi_setupChipReg+0x98>
800067fc:	8d c8       	st.w	r6[0x30],r8
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
800067fe:	c0 68       	rjmp	8000680a <spi_setupChipReg+0x9a>
80006800:	8d d8       	st.w	r6[0x34],r8
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
80006802:	c0 48       	rjmp	8000680a <spi_setupChipReg+0x9a>
80006804:	8d e8       	st.w	r6[0x38],r8
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80006806:	c0 28       	rjmp	8000680a <spi_setupChipReg+0x9a>
80006808:	8d f8       	st.w	r6[0x3c],r8
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
8000680a:	d8 3a       	popm	r0-r7,pc,r12=0
8000680c:	30 2c       	mov	r12,2
		break;
8000680e:	d8 32       	popm	r0-r7,pc

80006810 <spi_enable>:
		}
	}
#endif

	return SPI_OK;
}
80006810:	30 18       	mov	r8,1
80006812:	99 08       	st.w	r12[0x0],r8
80006814:	5e fc       	retal	r12

80006816 <spi_write>:
80006816:	e0 68 3a 98 	mov	r8,15000

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
8000681a:	c0 58       	rjmp	80006824 <spi_write+0xe>
		if (!timeout--) {
8000681c:	58 08       	cp.w	r8,0
8000681e:	c0 21       	brne	80006822 <spi_write+0xc>
80006820:	5e ff       	retal	1
80006822:	20 18       	sub	r8,1

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80006824:	78 49       	ld.w	r9,r12[0x10]
80006826:	ed b9 00 01 	bld	r9,0x1
8000682a:	cf 91       	brne	8000681c <spi_write+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
8000682c:	5c 7b       	castu.h	r11
8000682e:	99 3b       	st.w	r12[0xc],r11
80006830:	5e fd       	retal	0

80006832 <spi_read>:
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
80006832:	e0 68 3a 98 	mov	r8,15000
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80006836:	c0 58       	rjmp	80006840 <spi_read+0xe>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
80006838:	58 08       	cp.w	r8,0
8000683a:	c0 21       	brne	8000683e <spi_read+0xc>
8000683c:	5e ff       	retal	1
8000683e:	20 18       	sub	r8,1

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80006840:	78 49       	ld.w	r9,r12[0x10]
80006842:	e2 19 02 01 	andl	r9,0x201,COH
80006846:	e0 49 02 01 	cp.w	r9,513
8000684a:	cf 71       	brne	80006838 <spi_read+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
8000684c:	78 28       	ld.w	r8,r12[0x8]
8000684e:	30 0c       	mov	r12,0
80006850:	b6 08       	st.h	r11[0x0],r8

	return SPI_OK;
}
80006852:	5e fc       	retal	r12

80006854 <tc_init_waveform>:
  return 0;
}


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
80006854:	d4 01       	pushm	lr
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
80006856:	76 09       	ld.w	r9,r11[0x0]
80006858:	58 29       	cp.w	r9,2
8000685a:	e0 88 00 03 	brls	80006860 <tc_init_waveform+0xc>
8000685e:	dc 0a       	popm	pc,r12=-1
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80006860:	76 18       	ld.w	r8,r11[0x4]
80006862:	a5 69       	lsl	r9,0x4
80006864:	10 9e       	mov	lr,r8
80006866:	e6 1e c0 00 	andh	lr,0xc000,COH
8000686a:	f2 ca ff ff 	sub	r10,r9,-1
8000686e:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
80006872:	af b9       	sbr	r9,0xf
80006874:	1c 49       	or	r9,lr
80006876:	10 9e       	mov	lr,r8
80006878:	e6 1e 30 00 	andh	lr,0x3000,COH
8000687c:	1c 49       	or	r9,lr
8000687e:	10 9e       	mov	lr,r8
80006880:	e6 1e 0c 00 	andh	lr,0xc00,COH
80006884:	1c 49       	or	r9,lr
80006886:	10 9e       	mov	lr,r8
80006888:	e6 1e 03 00 	andh	lr,0x300,COH
8000688c:	1c 49       	or	r9,lr
8000688e:	10 9e       	mov	lr,r8
80006890:	e6 1e 00 c0 	andh	lr,0xc0,COH
80006894:	1c 49       	or	r9,lr
80006896:	10 9e       	mov	lr,r8
80006898:	e6 1e 00 30 	andh	lr,0x30,COH
8000689c:	1c 49       	or	r9,lr
8000689e:	10 9e       	mov	lr,r8
800068a0:	e6 1e 00 0c 	andh	lr,0xc,COH
800068a4:	1c 49       	or	r9,lr
800068a6:	10 9e       	mov	lr,r8
800068a8:	e6 1e 00 03 	andh	lr,0x3,COH
800068ac:	1c 49       	or	r9,lr
800068ae:	10 9e       	mov	lr,r8
800068b0:	e2 1e 60 00 	andl	lr,0x6000,COH
800068b4:	1c 49       	or	r9,lr
800068b6:	10 9e       	mov	lr,r8
800068b8:	e2 1e 10 00 	andl	lr,0x1000,COH
800068bc:	1c 49       	or	r9,lr
800068be:	10 9e       	mov	lr,r8
800068c0:	e2 1e 0c 00 	andl	lr,0xc00,COH
800068c4:	1c 49       	or	r9,lr
800068c6:	10 9e       	mov	lr,r8
800068c8:	e2 1e 03 00 	andl	lr,0x300,COH
800068cc:	1c 49       	or	r9,lr
800068ce:	10 9e       	mov	lr,r8
800068d0:	e2 1e 00 80 	andl	lr,0x80,COH
800068d4:	10 9b       	mov	r11,r8
800068d6:	1c 49       	or	r9,lr
800068d8:	e2 1b 00 08 	andl	r11,0x8,COH
800068dc:	10 9e       	mov	lr,r8
800068de:	e2 18 00 30 	andl	r8,0x30,COH
800068e2:	e2 1e 00 40 	andl	lr,0x40,COH
800068e6:	1c 49       	or	r9,lr
800068e8:	f3 e8 10 08 	or	r8,r9,r8
800068ec:	16 48       	or	r8,r11
800068ee:	f8 0a 09 28 	st.w	r12[r10<<0x2],r8
800068f2:	d8 0a       	popm	pc,r12=0

800068f4 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800068f4:	58 2b       	cp.w	r11,2
800068f6:	e0 88 00 03 	brls	800068fc <tc_start+0x8>
800068fa:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
800068fc:	a7 6b       	lsl	r11,0x6
800068fe:	16 0c       	add	r12,r11
80006900:	30 58       	mov	r8,5
80006902:	99 08       	st.w	r12[0x0],r8
80006904:	5e fd       	retal	0

80006906 <tc_read_sr>:


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80006906:	58 2b       	cp.w	r11,2
80006908:	e0 88 00 03 	brls	8000690e <tc_read_sr+0x8>
8000690c:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  return tc->channel[channel].sr;
8000690e:	a7 6b       	lsl	r11,0x6
80006910:	2e 0b       	sub	r11,-32
80006912:	16 0c       	add	r12,r11
80006914:	78 0c       	ld.w	r12,r12[0x0]
}
80006916:	5e fc       	retal	r12

80006918 <tc_write_rc>:


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80006918:	58 2b       	cp.w	r11,2
8000691a:	e0 88 00 03 	brls	80006920 <tc_write_rc+0x8>
8000691e:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
80006920:	f6 08 15 04 	lsl	r8,r11,0x4
80006924:	2f f8       	sub	r8,-1
80006926:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
8000692a:	ed b8 00 0f 	bld	r8,0xf
8000692e:	c0 c1       	brne	80006946 <tc_write_rc+0x2e>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
80006930:	a7 6b       	lsl	r11,0x6
80006932:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
80006936:	16 0c       	add	r12,r11
80006938:	2e 4c       	sub	r12,-28
8000693a:	78 08       	ld.w	r8,r12[0x0]
8000693c:	e0 18 00 00 	andl	r8,0x0
80006940:	f3 e8 10 08 	or	r8,r9,r8
80006944:	99 08       	st.w	r12[0x0],r8

  return value;
80006946:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
}
8000694a:	5e fc       	retal	r12

8000694c <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
8000694c:	d4 21       	pushm	r4-r7,lr
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
8000694e:	e1 b9 00 00 	mfsr	r9,0x0

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80006952:	58 2b       	cp.w	r11,2
80006954:	e0 88 00 03 	brls	8000695a <tc_configure_interrupts+0xe>
80006958:	dc 2a       	popm	r4-r7,pc,r12=-1
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
8000695a:	74 08       	ld.w	r8,r10[0x0]
8000695c:	10 9e       	mov	lr,r8
8000695e:	e2 1e 00 02 	andl	lr,0x2,COH
80006962:	e2 18 00 fd 	andl	r8,0xfd,COH
80006966:	1c 48       	or	r8,lr
80006968:	f6 0e 15 06 	lsl	lr,r11,0x6
8000696c:	f8 0e 00 0e 	add	lr,r12,lr
80006970:	2d ce       	sub	lr,-36
80006972:	9d 08       	st.w	lr[0x0],r8
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
80006974:	ee 19 00 01 	eorh	r9,0x1
80006978:	f3 d9 c2 01 	bfextu	r9,r9,0x10,0x1
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
8000697c:	c0 20       	breq	80006980 <tc_configure_interrupts+0x34>
8000697e:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80006980:	74 08       	ld.w	r8,r10[0x0]
80006982:	e0 67 00 80 	mov	r7,128
80006986:	ed d8 c0 e1 	bfextu	r6,r8,0x7,0x1
8000698a:	f9 b7 01 00 	movne	r7,0
8000698e:	f5 d8 c0 01 	bfextu	r10,r8,0x0,0x1
80006992:	ec 1a 00 01 	eorl	r10,0x1
80006996:	ef ea 10 0a 	or	r10,r7,r10
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
8000699a:	ef d8 c0 c1 	bfextu	r7,r8,0x6,0x1
8000699e:	f9 b7 00 40 	moveq	r7,64
800069a2:	f9 b7 01 00 	movne	r7,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800069a6:	0e 4a       	or	r10,r7
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
800069a8:	ef d8 c0 a1 	bfextu	r7,r8,0x5,0x1
800069ac:	f9 b7 00 20 	moveq	r7,32
800069b0:	f9 b7 01 00 	movne	r7,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800069b4:	0e 4a       	or	r10,r7
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
800069b6:	ef d8 c0 81 	bfextu	r7,r8,0x4,0x1
800069ba:	f9 b7 00 10 	moveq	r7,16
800069be:	f9 b7 01 00 	movne	r7,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800069c2:	0e 4a       	or	r10,r7
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
800069c4:	ef d8 c0 61 	bfextu	r7,r8,0x3,0x1
800069c8:	f9 b7 00 08 	moveq	r7,8
800069cc:	f9 b7 01 00 	movne	r7,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800069d0:	0e 4a       	or	r10,r7
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
800069d2:	ef d8 c0 41 	bfextu	r7,r8,0x2,0x1
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
800069d6:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
800069da:	58 07       	cp.w	r7,0
800069dc:	f9 b7 00 04 	moveq	r7,4
800069e0:	f9 b7 01 00 	movne	r7,0
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
800069e4:	58 08       	cp.w	r8,0
800069e6:	f9 b8 00 02 	moveq	r8,2
800069ea:	f9 b8 01 00 	movne	r8,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800069ee:	0e 4a       	or	r10,r7
800069f0:	f5 e8 10 08 	or	r8,r10,r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
800069f4:	f6 0e 15 06 	lsl	lr,r11,0x6
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800069f8:	a7 6b       	lsl	r11,0x6
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
800069fa:	2e 0e       	sub	lr,-32
800069fc:	f8 0e 00 0e 	add	lr,r12,lr
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80006a00:	16 0c       	add	r12,r11
80006a02:	2d 8c       	sub	r12,-40
80006a04:	99 08       	st.w	r12[0x0],r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80006a06:	7c 08       	ld.w	r8,lr[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
80006a08:	58 09       	cp.w	r9,0
80006a0a:	c0 31       	brne	80006a10 <tc_configure_interrupts+0xc4>
80006a0c:	12 9c       	mov	r12,r9
80006a0e:	d8 22       	popm	r4-r7,pc
80006a10:	d5 03       	csrf	0x10
80006a12:	d8 2a       	popm	r4-r7,pc,r12=0

80006a14 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80006a14:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80006a16:	f6 0e 15 04 	lsl	lr,r11,0x4
80006a1a:	1c 3a       	cp.w	r10,lr
80006a1c:	f9 be 02 10 	movhs	lr,16
80006a20:	f9 be 03 08 	movlo	lr,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80006a24:	fc 0b 02 4b 	mul	r11,lr,r11
80006a28:	f6 08 16 01 	lsr	r8,r11,0x1
80006a2c:	f0 0a 00 3a 	add	r10,r8,r10<<0x3
80006a30:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80006a34:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80006a38:	f2 c8 00 01 	sub	r8,r9,1
80006a3c:	e0 48 ff fe 	cp.w	r8,65534
80006a40:	e0 88 00 03 	brls	80006a46 <usart_set_async_baudrate+0x32>
80006a44:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80006a46:	78 18       	ld.w	r8,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80006a48:	e8 6b 00 00 	mov	r11,524288
80006a4c:	e4 18 ff f7 	andh	r8,0xfff7
80006a50:	e0 18 fe cf 	andl	r8,0xfecf
80006a54:	59 0e       	cp.w	lr,16
80006a56:	f6 0e 17 10 	movne	lr,r11
80006a5a:	f9 be 00 00 	moveq	lr,0
80006a5e:	fd e8 10 08 	or	r8,lr,r8
80006a62:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80006a64:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80006a68:	f3 ea 11 09 	or	r9,r9,r10<<0x10
80006a6c:	99 89       	st.w	r12[0x20],r9
80006a6e:	d8 0a       	popm	pc,r12=0

80006a70 <usart_write_line>:
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80006a70:	c0 e8       	rjmp	80006a8c <usart_write_line+0x1c>
80006a72:	e0 68 27 10 	mov	r8,10000
{
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80006a76:	20 18       	sub	r8,1
80006a78:	5b f8       	cp.w	r8,-1
80006a7a:	c0 80       	breq	80006a8a <usart_write_line+0x1a>
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80006a7c:	78 59       	ld.w	r9,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80006a7e:	ed b9 00 01 	bld	r9,0x1
80006a82:	cf a1       	brne	80006a76 <usart_write_line+0x6>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80006a84:	f5 da c0 09 	bfextu	r10,r10,0x0,0x9
80006a88:	99 7a       	st.w	r12[0x1c],r10


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
    usart_putchar(usart, *string++);
80006a8a:	2f fb       	sub	r11,-1
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80006a8c:	17 8a       	ld.ub	r10,r11[0x0]
80006a8e:	58 0a       	cp.w	r10,0
80006a90:	cf 11       	brne	80006a72 <usart_write_line+0x2>
    usart_putchar(usart, *string++);
}
80006a92:	5e fc       	retal	r12

80006a94 <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80006a94:	e1 b8 00 00 	mfsr	r8,0x0
80006a98:	ee 18 00 01 	eorh	r8,0x1
80006a9c:	f1 d8 c2 01 	bfextu	r8,r8,0x10,0x1

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80006aa0:	c0 20       	breq	80006aa4 <usart_reset+0x10>
80006aa2:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80006aa4:	3f f9       	mov	r9,-1
80006aa6:	99 39       	st.w	r12[0xc],r9
  usart->csr;
80006aa8:	78 59       	ld.w	r9,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80006aaa:	58 08       	cp.w	r8,0
80006aac:	c0 20       	breq	80006ab0 <usart_reset+0x1c>
80006aae:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80006ab0:	30 08       	mov	r8,0
80006ab2:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80006ab4:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
80006ab6:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80006ab8:	ea 68 61 0c 	mov	r8,680204
80006abc:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80006abe:	5e fc       	retal	r12

80006ac0 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80006ac0:	d4 21       	pushm	r4-r7,lr
80006ac2:	20 1d       	sub	sp,4
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80006ac4:	50 0a       	stdsp	sp[0x0],r10
              AVR32_USART_CR_RTSDIS_MASK;
}


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80006ac6:	16 96       	mov	r6,r11
80006ac8:	18 97       	mov	r7,r12
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80006aca:	ce 5f       	rcall	80006a94 <usart_reset>
80006acc:	40 0a       	lddsp	r10,sp[0x0]

  // Check input values.
  if (!opt || // Null pointer.
80006ace:	58 06       	cp.w	r6,0
80006ad0:	c5 40       	breq	80006b78 <usart_init_rs232+0xb8>
80006ad2:	0d c8       	ld.ub	r8,r6[0x4]
      opt->charlength < 5 || opt->charlength > 9 ||
80006ad4:	30 49       	mov	r9,4
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80006ad6:	f2 08 18 00 	cp.b	r8,r9
80006ada:	e0 88 00 4f 	brls	80006b78 <usart_init_rs232+0xb8>
80006ade:	30 95       	mov	r5,9
80006ae0:	ea 08 18 00 	cp.b	r8,r5
80006ae4:	e0 8b 00 4a 	brhi	80006b78 <usart_init_rs232+0xb8>
80006ae8:	0d d9       	ld.ub	r9,r6[0x5]
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80006aea:	30 78       	mov	r8,7
80006aec:	f0 09 18 00 	cp.b	r9,r8
80006af0:	e0 8b 00 44 	brhi	80006b78 <usart_init_rs232+0xb8>
80006af4:	8c 39       	ld.sh	r9,r6[0x6]
      opt->stopbits > 2 + 255 ||
80006af6:	e0 68 01 01 	mov	r8,257
80006afa:	f0 09 19 00 	cp.h	r9,r8
80006afe:	e0 8b 00 3d 	brhi	80006b78 <usart_init_rs232+0xb8>
80006b02:	ed 39 00 08 	ld.ub	r9,r6[8]
      opt->channelmode > 3 ||
80006b06:	30 38       	mov	r8,3
80006b08:	f0 09 18 00 	cp.b	r9,r8
80006b0c:	e0 8b 00 36 	brhi	80006b78 <usart_init_rs232+0xb8>
80006b10:	6c 0b       	ld.w	r11,r6[0x0]
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80006b12:	0e 9c       	mov	r12,r7
80006b14:	c8 0f       	rcall	80006a14 <usart_set_async_baudrate>
80006b16:	58 1c       	cp.w	r12,1
80006b18:	c3 00       	breq	80006b78 <usart_init_rs232+0xb8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80006b1a:	0d c8       	ld.ub	r8,r6[0x4]
80006b1c:	ea 08 18 00 	cp.b	r8,r5
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80006b20:	c0 41       	brne	80006b28 <usart_init_rs232+0x68>
80006b22:	6e 18       	ld.w	r8,r7[0x4]
80006b24:	b1 b8       	sbr	r8,0x11
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80006b26:	c0 58       	rjmp	80006b30 <usart_init_rs232+0x70>
80006b28:	20 58       	sub	r8,5
80006b2a:	6e 19       	ld.w	r9,r7[0x4]
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80006b2c:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80006b30:	8f 18       	st.w	r7[0x4],r8
80006b32:	6e 19       	ld.w	r9,r7[0x4]
80006b34:	ed 3a 00 08 	ld.ub	r10,r6[8]
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80006b38:	0d d8       	ld.ub	r8,r6[0x5]
80006b3a:	a9 78       	lsl	r8,0x9
80006b3c:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80006b40:	12 48       	or	r8,r9
80006b42:	8f 18       	st.w	r7[0x4],r8
80006b44:	30 29       	mov	r9,2
80006b46:	8c 38       	ld.sh	r8,r6[0x6]
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80006b48:	f2 08 19 00 	cp.h	r8,r9
80006b4c:	e0 88 00 09 	brls	80006b5e <usart_init_rs232+0x9e>
80006b50:	6e 18       	ld.w	r8,r7[0x4]
80006b52:	ad b8       	sbr	r8,0xd
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80006b54:	8f 18       	st.w	r7[0x4],r8
80006b56:	8c b8       	ld.uh	r8,r6[0x6]
80006b58:	20 28       	sub	r8,2
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80006b5a:	8f a8       	st.w	r7[0x28],r8
80006b5c:	c0 68       	rjmp	80006b68 <usart_init_rs232+0xa8>
80006b5e:	6e 19       	ld.w	r9,r7[0x4]
80006b60:	5c 78       	castu.h	r8
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80006b62:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
80006b66:	8f 18       	st.w	r7[0x4],r8
80006b68:	6e 18       	ld.w	r8,r7[0x4]
80006b6a:	e0 18 ff f0 	andl	r8,0xfff0

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80006b6e:	8f 18       	st.w	r7[0x4],r8
80006b70:	30 0c       	mov	r12,0
80006b72:	35 08       	mov	r8,80
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80006b74:	8f 08       	st.w	r7[0x0],r8
80006b76:	c0 28       	rjmp	80006b7a <usart_init_rs232+0xba>
80006b78:	30 1c       	mov	r12,1
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80006b7a:	2f fd       	sub	sp,-4
80006b7c:	d8 22       	popm	r4-r7,pc
}
80006b7e:	d7 03       	nop

80006b80 <uhd_get_speed>:
	cpu_irq_restore(flags);
}

uhd_speed_t uhd_get_speed(void)
{
	switch (uhd_get_speed_mode()) {
80006b80:	fe 68 08 04 	mov	r8,-129020
80006b84:	70 08       	ld.w	r8,r8[0x0]
80006b86:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
80006b8a:	58 38       	cp.w	r8,3
80006b8c:	c0 21       	brne	80006b90 <uhd_get_speed+0x10>
80006b8e:	5e fd       	retal	0
80006b90:	fe c9 d0 20 	sub	r9,pc,-12256
80006b94:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]

	default:
		Assert(false);
		return UHD_SPEED_LOW;
	}
}
80006b98:	5e fc       	retal	r12
80006b9a:	d7 03       	nop

80006b9c <uhd_send_reset>:
	return uhd_get_microsof_number();
}

void uhd_send_reset(uhd_callback_reset_t callback)
{
	uhd_reset_callback = callback;
80006b9c:	e0 69 08 f4 	mov	r9,2292
	uhd_start_reset();
80006ba0:	93 0c       	st.w	r9[0x0],r12
80006ba2:	fe 68 04 00 	mov	r8,-130048
80006ba6:	70 09       	ld.w	r9,r8[0x0]
80006ba8:	a9 b9       	sbr	r9,0x9
}
80006baa:	91 09       	st.w	r8[0x0],r9
80006bac:	5e fc       	retal	r12
80006bae:	d7 03       	nop

80006bb0 <uhd_suspend>:

void uhd_suspend(void)
{
80006bb0:	d4 01       	pushm	lr
	if (uhd_ctrl_request_timeout) {
80006bb2:	e0 68 1c b4 	mov	r8,7348
80006bb6:	90 08       	ld.sh	r8,r8[0x0]
80006bb8:	58 08       	cp.w	r8,0
		// Delay suspend after setup requests
		uhd_b_suspend_requested = true;
80006bba:	c0 50       	breq	80006bc4 <uhd_suspend+0x14>
80006bbc:	30 19       	mov	r9,1
80006bbe:	e0 68 09 73 	mov	r8,2419
		return;
80006bc2:	c1 d8       	rjmp	80006bfc <uhd_suspend+0x4c>
80006bc4:	fe 69 05 c4 	mov	r9,-129596
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
		uhd_freeze_pipe(pipe);
80006bc8:	10 9a       	mov	r10,r8
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80006bca:	e2 6c 00 00 	mov	r12,131072
		uhd_freeze_pipe(pipe);
80006bce:	72 0b       	ld.w	r11,r9[0x0]
80006bd0:	93 cc       	st.w	r9[0x30],r12
{
	uhd_reset_callback = callback;
	uhd_start_reset();
}

void uhd_suspend(void)
80006bd2:	f2 ce ff d0 	sub	lr,r9,-48
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80006bd6:	2f f8       	sub	r8,-1
		uhd_freeze_pipe(pipe);
80006bd8:	ee 1b 00 02 	eorh	r11,0x2
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80006bdc:	2f c9       	sub	r9,-4
80006bde:	f7 db c2 21 	bfextu	r11,r11,0x11,0x1
80006be2:	f6 08 09 4b 	lsl	r11,r11,r8
80006be6:	f7 ea 10 0a 	or	r10,r11,r10
		uhd_b_suspend_requested = true;
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
80006bea:	5c 5a       	castu.b	r10
80006bec:	58 68       	cp.w	r8,6
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
		uhd_freeze_pipe(pipe);
	}
	// Wait three SOFs before entering in suspend state
	uhd_suspend_start = 3;
80006bee:	cf 01       	brne	80006bce <uhd_suspend+0x1e>
		uhd_b_suspend_requested = true;
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
80006bf0:	e0 68 09 71 	mov	r8,2417
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
		uhd_freeze_pipe(pipe);
	}
	// Wait three SOFs before entering in suspend state
	uhd_suspend_start = 3;
80006bf4:	30 39       	mov	r9,3
80006bf6:	b0 8a       	st.b	r8[0x0],r10
80006bf8:	e0 68 09 70 	mov	r8,2416
80006bfc:	b0 89       	st.b	r8[0x0],r9
80006bfe:	d8 02       	popm	pc

80006c00 <uhd_ctrl_phase_data_out>:
80006c00:	d4 21       	pushm	r4-r7,lr
80006c02:	e0 68 1c a8 	mov	r8,7336
80006c06:	e0 6b 1c a4 	mov	r11,7332
	uint8_t *ptr_ep_data;
	uint8_t ep_ctrl_size;

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_OUT;

	if (uhd_ctrl_nb_trans == uhd_ctrl_request_first->req.wLength) {
80006c0a:	70 0a       	ld.w	r10,r8[0x0]
static void uhd_ctrl_phase_data_out(void)
{
	uint8_t *ptr_ep_data;
	uint8_t ep_ctrl_size;

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_OUT;
80006c0c:	30 19       	mov	r9,1

	if (uhd_ctrl_nb_trans == uhd_ctrl_request_first->req.wLength) {
80006c0e:	e0 68 1c ac 	mov	r8,7340
80006c12:	97 09       	st.w	r11[0x0],r9
80006c14:	90 0c       	ld.sh	r12,r8[0x0]
80006c16:	15 fe       	ld.ub	lr,r10[0x7]
80006c18:	f5 38 00 08 	ld.ub	r8,r10[8]
80006c1c:	f1 ee 10 88 	or	r8,r8,lr<<0x8
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_IN);
80006c20:	f0 0c 19 00 	cp.h	r12,r8
80006c24:	c1 91       	brne	80006c56 <uhd_ctrl_phase_data_out+0x56>
80006c26:	fe 6a 05 00 	mov	r10,-129792
80006c2a:	74 08       	ld.w	r8,r10[0x0]
80006c2c:	e0 18 fc ff 	andl	r8,0xfcff
	uhd_ack_in_received(0);
80006c30:	a9 a8       	sbr	r8,0x8
80006c32:	95 08       	st.w	r10[0x0],r8
	uhd_ack_short_packet(0);
80006c34:	fe 68 05 60 	mov	r8,-129696
80006c38:	91 09       	st.w	r8[0x0],r9
	uhd_enable_in_received_interrupt(0);
80006c3a:	e0 6a 00 80 	mov	r10,128
80006c3e:	91 0a       	st.w	r8[0x0],r10
	uhd_ack_fifocon(0);
80006c40:	fe 68 05 f0 	mov	r8,-129552
80006c44:	91 09       	st.w	r8[0x0],r9
80006c46:	e0 69 40 00 	mov	r9,16384
 * \internal
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
80006c4a:	fe 68 06 20 	mov	r8,-129504
80006c4e:	91 09       	st.w	r8[0x0],r9
		// End of DATA phase
		uhd_ctrl_phase_zlp_in();
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
80006c50:	30 39       	mov	r9,3
80006c52:	97 09       	st.w	r11[0x0],r9
80006c54:	c7 a8       	rjmp	80006d48 <uhd_ctrl_phase_data_out+0x148>
80006c56:	f5 09 00 10 	ld.sh	r9,r10[16]
80006c5a:	30 08       	mov	r8,0
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
				|| !uhd_ctrl_request_first->callback_run(
80006c5c:	f0 09 19 00 	cp.h	r9,r8
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
80006c60:	c2 91       	brne	80006cb2 <uhd_ctrl_phase_data_out+0xb2>
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
80006c62:	74 58       	ld.w	r8,r10[0x14]
80006c64:	58 08       	cp.w	r8,0
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
80006c66:	c0 b0       	breq	80006c7c <uhd_ctrl_phase_data_out+0x7c>
80006c68:	fe 69 04 24 	mov	r9,-130012
80006c6c:	f4 cb ff f4 	sub	r11,r10,-12
80006c70:	72 0c       	ld.w	r12,r9[0x0]
80006c72:	2f 0a       	sub	r10,-16
80006c74:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_IN);
80006c78:	5d 18       	icall	r8
80006c7a:	c1 c1       	brne	80006cb2 <uhd_ctrl_phase_data_out+0xb2>
80006c7c:	fe 69 05 00 	mov	r9,-129792
80006c80:	72 08       	ld.w	r8,r9[0x0]
80006c82:	e0 18 fc ff 	andl	r8,0xfcff
	uhd_ack_in_received(0);
80006c86:	a9 a8       	sbr	r8,0x8
80006c88:	93 08       	st.w	r9[0x0],r8
80006c8a:	fe 69 05 60 	mov	r9,-129696
	uhd_ack_short_packet(0);
80006c8e:	30 18       	mov	r8,1
80006c90:	93 08       	st.w	r9[0x0],r8
	uhd_enable_in_received_interrupt(0);
80006c92:	e0 6a 00 80 	mov	r10,128
80006c96:	93 0a       	st.w	r9[0x0],r10
	uhd_ack_fifocon(0);
80006c98:	fe 69 05 f0 	mov	r9,-129552
80006c9c:	93 08       	st.w	r9[0x0],r8
80006c9e:	e0 69 40 00 	mov	r9,16384
 * \internal
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
80006ca2:	fe 68 06 20 	mov	r8,-129504
80006ca6:	91 09       	st.w	r8[0x0],r9
80006ca8:	30 3a       	mov	r10,3
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
80006caa:	e0 69 1c a4 	mov	r9,7332
80006cae:	93 0a       	st.w	r9[0x0],r10
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
80006cb0:	c4 c8       	rjmp	80006d48 <uhd_ctrl_phase_data_out+0x148>
80006cb2:	fe 69 05 00 	mov	r9,-129792
80006cb6:	72 06       	ld.w	r6,r9[0x0]
80006cb8:	72 08       	ld.w	r8,r9[0x0]
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
80006cba:	e0 18 fc ff 	andl	r8,0xfcff
80006cbe:	a9 b8       	sbr	r8,0x9
80006cc0:	93 08       	st.w	r9[0x0],r8
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
80006cc2:	30 88       	mov	r8,8
80006cc4:	30 29       	mov	r9,2
80006cc6:	ed d6 c0 83 	bfextu	r6,r6,0x4,0x3
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
80006cca:	30 0a       	mov	r10,0

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
80006ccc:	ea 1a d0 00 	orh	r10,0xd000
	ep_ctrl_size = uhd_get_pipe_size(0);
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
80006cd0:	f0 06 09 46 	lsl	r6,r8,r6
80006cd4:	e0 6e 1c a8 	mov	lr,7336
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
80006cd8:	fe 68 05 60 	mov	r8,-129696
80006cdc:	5c 56       	castu.b	r6
			&& ep_ctrl_size && uhd_ctrl_request_first->payload_size) {
		*ptr_ep_data++ = *uhd_ctrl_request_first->payload++;
80006cde:	91 09       	st.w	r8[0x0],r9
80006ce0:	30 0c       	mov	r12,0
80006ce2:	e0 69 1c ac 	mov	r9,7340
		uhd_ctrl_nb_trans++;
80006ce6:	30 07       	mov	r7,0
80006ce8:	c0 e8       	rjmp	80006d04 <uhd_ctrl_phase_data_out+0x104>
80006cea:	70 3b       	ld.w	r11,r8[0xc]
		ep_ctrl_size--;
		uhd_ctrl_request_first->payload_size--;
80006cec:	17 35       	ld.ub	r5,r11++
80006cee:	14 c5       	st.b	r10++,r5
80006cf0:	91 3b       	st.w	r8[0xc],r11
80006cf2:	92 08       	ld.sh	r8,r9[0x0]
80006cf4:	2f f8       	sub	r8,-1
80006cf6:	b2 08       	st.h	r9[0x0],r8

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
80006cf8:	7c 08       	ld.w	r8,lr[0x0]
80006cfa:	f1 0b 00 10 	ld.sh	r11,r8[16]
80006cfe:	20 1b       	sub	r11,1
80006d00:	f1 5b 00 10 	st.h	r8[16],r11
80006d04:	92 05       	ld.sh	r5,r9[0x0]
80006d06:	7c 08       	ld.w	r8,lr[0x0]
80006d08:	11 f4       	ld.ub	r4,r8[0x7]
80006d0a:	f1 3b 00 08 	ld.ub	r11,r8[8]
80006d0e:	f7 e4 10 8b 	or	r11,r11,r4<<0x8
80006d12:	f6 05 19 00 	cp.h	r5,r11
80006d16:	5f 3b       	srlo	r11
80006d18:	ec 0a 01 05 	sub	r5,r6,r10
80006d1c:	f8 05 18 00 	cp.b	r5,r12
			&& ep_ctrl_size && uhd_ctrl_request_first->payload_size) {
80006d20:	5f 15       	srne	r5
80006d22:	eb eb 00 0b 	and	r11,r5,r11
80006d26:	f8 0b 18 00 	cp.b	r11,r12
		*ptr_ep_data++ = *uhd_ctrl_request_first->payload++;
		uhd_ctrl_nb_trans++;
		ep_ctrl_size--;
		uhd_ctrl_request_first->payload_size--;
	}
	uhd_enable_out_ready_interrupt(0);
80006d2a:	c0 60       	breq	80006d36 <uhd_ctrl_phase_data_out+0x136>
80006d2c:	f1 0b 00 10 	ld.sh	r11,r8[16]
80006d30:	ee 0b 19 00 	cp.h	r11,r7
	uhd_ack_fifocon(0);
80006d34:	cd b1       	brne	80006cea <uhd_ctrl_phase_data_out+0xea>
80006d36:	30 29       	mov	r9,2
80006d38:	fe 68 05 f0 	mov	r8,-129552
	uhd_unfreeze_pipe(0);
80006d3c:	91 09       	st.w	r8[0x0],r9
80006d3e:	fe 68 06 20 	mov	r8,-129504
80006d42:	e0 69 40 00 	mov	r9,16384
80006d46:	91 09       	st.w	r8[0x0],r9
80006d48:	e2 69 00 00 	mov	r9,131072
80006d4c:	91 09       	st.w	r8[0x0],r9
80006d4e:	d8 22       	popm	r4-r7,pc

80006d50 <uhd_get_pipe>:
 * \param endp  Endpoint number
 *
 * \return Pipe number
 */
static uint8_t uhd_get_pipe(usb_add_t add, usb_ep_t endp)
{
80006d50:	d4 31       	pushm	r0-r7,lr
80006d52:	fe 6a 05 00 	mov	r10,-129792
80006d56:	18 98       	mov	r8,r12
80006d58:	30 09       	mov	r9,0
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80006d5a:	fe 64 00 00 	mov	r4,-131072
80006d5e:	30 15       	mov	r5,1
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80006d60:	37 f6       	mov	r6,127
			continue;
		}
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
80006d62:	e0 67 00 80 	mov	r7,128
{
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80006d66:	e8 f2 04 1c 	ld.w	r2,r4[1052]
 * \param endp  Endpoint number
 *
 * \return Pipe number
 */
static uint8_t uhd_get_pipe(usb_add_t add, usb_ep_t endp)
{
80006d6a:	f9 d9 c0 08 	bfextu	r12,r9,0x0,0x8
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80006d6e:	ea 09 09 41 	lsl	r1,r5,r9
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80006d72:	18 9e       	mov	lr,r12
			continue;
		}
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
80006d74:	f8 c3 ff ff 	sub	r3,r12,-1
	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80006d78:	e2 1e 00 fc 	andl	lr,0xfc,COH
{
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80006d7c:	e3 e2 00 02 	and	r2,r1,r2
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80006d80:	e0 3e fb dc 	sub	lr,130012
{
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80006d84:	58 02       	cp.w	r2,0
80006d86:	c1 d0       	breq	80006dc0 <uhd_get_pipe+0x70>
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80006d88:	7c 02       	ld.w	r2,lr[0x0]
80006d8a:	fd d9 c0 02 	bfextu	lr,r9,0x0,0x2
80006d8e:	a3 7e       	lsl	lr,0x3
80006d90:	ec 0e 09 4e 	lsl	lr,r6,lr
80006d94:	1c 62       	and	r2,lr
80006d96:	5c 9e       	brev	lr
80006d98:	fc 0e 12 00 	clz	lr,lr
80006d9c:	e4 0e 0a 4e 	lsr	lr,r2,lr
80006da0:	1c 38       	cp.w	r8,lr
80006da2:	c0 f1       	brne	80006dc0 <uhd_get_pipe+0x70>
			continue;
		}
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
80006da4:	74 02       	ld.w	r2,r10[0x0]
80006da6:	74 0e       	ld.w	lr,r10[0x0]
80006da8:	e5 d2 c2 04 	bfextu	r2,r2,0x10,0x4
80006dac:	fd de c1 02 	bfextu	lr,lr,0x8,0x2
80006db0:	58 1e       	cp.w	lr,1
80006db2:	ee 0e 17 00 	moveq	lr,r7
80006db6:	f9 be 01 00 	movne	lr,0
80006dba:	04 4e       	or	lr,r2
80006dbc:	1c 3b       	cp.w	r11,lr
80006dbe:	c0 70       	breq	80006dcc <uhd_get_pipe+0x7c>
80006dc0:	f9 d3 c0 08 	bfextu	r12,r3,0x0,0x8
80006dc4:	2f f9       	sub	r9,-1
80006dc6:	2f ca       	sub	r10,-4
static uint8_t uhd_get_pipe(usb_add_t add, usb_ep_t endp)
{
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
80006dc8:	58 79       	cp.w	r9,7
80006dca:	cc e1       	brne	80006d66 <uhd_get_pipe+0x16>
			continue;
		}
		break;
	}
	return pipe;
}
80006dcc:	d8 32       	popm	r0-r7,pc
80006dce:	d7 03       	nop

80006dd0 <uhd_pipe_finish_job>:
 *
 * \param pipe   Pipe number
 * \param status Status of the transfer
 */
static void uhd_pipe_finish_job(uint8_t pipe, uhd_trans_status_t status)
{
80006dd0:	d4 21       	pushm	r4-r7,lr
	uhd_pipe_job_t *ptr_job;

	// Get job corresponding at endpoint
	ptr_job = &uhd_pipe_job[pipe - 1];
80006dd2:	e0 68 08 f8 	mov	r8,2296
80006dd6:	f8 c9 00 01 	sub	r9,r12,1
80006dda:	16 9a       	mov	r10,r11
80006ddc:	f2 09 00 29 	add	r9,r9,r9<<0x2
80006de0:	f0 09 00 29 	add	r9,r8,r9<<0x2
	if (ptr_job->busy == false) {
80006de4:	72 08       	ld.w	r8,r9[0x0]
80006de6:	58 08       	cp.w	r8,0
		return; // No job running
	}
	ptr_job->busy = false;
80006de8:	c2 f4       	brge	80006e46 <uhd_pipe_finish_job+0x76>
80006dea:	30 0b       	mov	r11,0
80006dec:	f1 db d3 e1 	bfins	r8,r11,0x1f,0x1
	if (NULL == ptr_job->call_end) {
80006df0:	93 08       	st.w	r9[0x0],r8
80006df2:	72 48       	ld.w	r8,r9[0x10]
80006df4:	58 08       	cp.w	r8,0
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
			uhd_get_pipe_endpoint_address(pipe),
80006df6:	c2 80       	breq	80006e46 <uhd_pipe_finish_job+0x76>
80006df8:	f8 0e 15 02 	lsl	lr,r12,0x2
80006dfc:	e0 3e fb 00 	sub	lr,129792
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_end) {
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
80006e00:	ef dc c0 02 	bfextu	r7,r12,0x0,0x2
80006e04:	7c 06       	ld.w	r6,lr[0x0]
80006e06:	e2 1c 03 fc 	andl	r12,0x3fc,COH
80006e0a:	7c 0b       	ld.w	r11,lr[0x0]
80006e0c:	e0 3c fb dc 	sub	r12,130012
80006e10:	fd d6 c2 04 	bfextu	lr,r6,0x10,0x4
80006e14:	a3 77       	lsl	r7,0x3
80006e16:	f7 db c1 02 	bfextu	r11,r11,0x8,0x2
80006e1a:	e0 66 00 80 	mov	r6,128
80006e1e:	58 1b       	cp.w	r11,1
80006e20:	ec 0b 17 00 	moveq	r11,r6
80006e24:	f9 bb 01 00 	movne	r11,0
80006e28:	1c 4b       	or	r11,lr
80006e2a:	78 0e       	ld.w	lr,r12[0x0]
80006e2c:	37 fc       	mov	r12,127
80006e2e:	f8 07 09 4c 	lsl	r12,r12,r7
80006e32:	f9 ee 00 0e 	and	lr,r12,lr
80006e36:	72 39       	ld.w	r9,r9[0xc]
80006e38:	5c 9c       	brev	r12
80006e3a:	f8 0c 12 00 	clz	r12,r12
80006e3e:	fc 0c 0a 4c 	lsr	r12,lr,r12
80006e42:	5c 5c       	castu.b	r12
80006e44:	5d 18       	icall	r8
80006e46:	d8 22       	popm	r4-r7,pc

80006e48 <uhd_ep_abort_pipe>:
80006e48:	d4 01       	pushm	lr
80006e4a:	fe 68 00 00 	mov	r8,-131072
 * \param status Reason of abort
 */
static void uhd_ep_abort_pipe(uint8_t pipe, uhd_trans_status_t status)
{
	// Stop transfer
	uhd_reset_pipe(pipe);
80006e4e:	e0 7a 00 00 	mov	r10,65536
80006e52:	f0 fe 04 1c 	ld.w	lr,r8[1052]
80006e56:	f4 0c 09 4a 	lsl	r10,r10,r12
80006e5a:	f5 ee 10 0e 	or	lr,r10,lr
80006e5e:	5c da       	com	r10
80006e60:	f1 4e 04 1c 	st.w	r8[1052],lr
80006e64:	f0 fe 04 1c 	ld.w	lr,r8[1052]
80006e68:	1c 6a       	and	r10,lr
80006e6a:	f1 4a 04 1c 	st.w	r8[1052],r10

	// Autoswitch bank and interrupts has been reseted, then re-enable it
	uhd_enable_pipe_bank_autoswitch(pipe);
80006e6e:	f8 08 15 02 	lsl	r8,r12,0x2
80006e72:	fe 6a 05 00 	mov	r10,-129792
80006e76:	f0 0a 00 0e 	add	lr,r8,r10
80006e7a:	7c 0a       	ld.w	r10,lr[0x0]
80006e7c:	ab aa       	sbr	r10,0xa
80006e7e:	9d 0a       	st.w	lr[0x0],r10
	uhd_enable_stall_interrupt(pipe);
80006e80:	fe 6e 05 f0 	mov	lr,-129552
80006e84:	f0 0e 00 0a 	add	r10,r8,lr
80006e88:	34 0e       	mov	lr,64
80006e8a:	95 0e       	st.w	r10[0x0],lr
	uhd_enable_pipe_error_interrupt(pipe);

	uhd_disable_out_ready_interrupt(pipe);
80006e8c:	e0 38 f9 e0 	sub	r8,129504
	uhd_reset_pipe(pipe);

	// Autoswitch bank and interrupts has been reseted, then re-enable it
	uhd_enable_pipe_bank_autoswitch(pipe);
	uhd_enable_stall_interrupt(pipe);
	uhd_enable_pipe_error_interrupt(pipe);
80006e90:	30 8e       	mov	lr,8
80006e92:	95 0e       	st.w	r10[0x0],lr

	uhd_disable_out_ready_interrupt(pipe);
	uhd_pipe_dma_set_control(pipe, 0);
80006e94:	30 09       	mov	r9,0
	// Autoswitch bank and interrupts has been reseted, then re-enable it
	uhd_enable_pipe_bank_autoswitch(pipe);
	uhd_enable_stall_interrupt(pipe);
	uhd_enable_pipe_error_interrupt(pipe);

	uhd_disable_out_ready_interrupt(pipe);
80006e96:	30 2a       	mov	r10,2
80006e98:	91 0a       	st.w	r8[0x0],r10
	uhd_pipe_dma_set_control(pipe, 0);
80006e9a:	f8 08 15 04 	lsl	r8,r12,0x4
80006e9e:	e0 38 f9 00 	sub	r8,129280
80006ea2:	91 29       	st.w	r8[0x8],r9
	uhd_pipe_finish_job(pipe, status);
80006ea4:	c9 6f       	rcall	80006dd0 <uhd_pipe_finish_job>
80006ea6:	d8 02       	popm	pc

80006ea8 <uhd_pipe_trans_complet>:
}
80006ea8:	d4 31       	pushm	r0-r7,lr
80006eaa:	e0 69 08 f8 	mov	r9,2296
80006eae:	f8 c8 00 01 	sub	r8,r12,1
	iram_size_t max_trans;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &uhd_pipe_job[pipe - 1];
80006eb2:	f0 08 00 28 	add	r8,r8,r8<<0x2
80006eb6:	f2 08 00 28 	add	r8,r9,r8<<0x2

	if (!ptr_job->busy) {
80006eba:	70 09       	ld.w	r9,r8[0x0]
80006ebc:	58 09       	cp.w	r9,0
80006ebe:	e0 84 00 cb 	brge	80007054 <uhd_pipe_trans_complet+0x1ac>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
80006ec2:	70 3e       	ld.w	lr,r8[0xc]
80006ec4:	70 2a       	ld.w	r10,r8[0x8]
80006ec6:	14 3e       	cp.w	lr,r10
80006ec8:	e0 80 00 9e 	breq	80007004 <uhd_pipe_trans_complet+0x15c>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
		max_trans = UHD_PIPE_MAX_TRANS;
		if (uhd_is_pipe_in(pipe)) {
80006ecc:	fe 6b 05 00 	mov	r11,-129792
80006ed0:	f8 07 15 02 	lsl	r7,r12,0x2
80006ed4:	ee 0b 00 09 	add	r9,r7,r11
80006ed8:	72 0b       	ld.w	r11,r9[0x0]
80006eda:	f7 db c1 02 	bfextu	r11,r11,0x8,0x2
80006ede:	58 1b       	cp.w	r11,1
			// 256 is the maximum of IN requests via UPINRQ
			if ((256L*uhd_get_pipe_size(pipe))<UHD_PIPE_MAX_TRANS) {
80006ee0:	c1 51       	brne	80006f0a <uhd_pipe_trans_complet+0x62>
80006ee2:	72 0b       	ld.w	r11,r9[0x0]
80006ee4:	30 86       	mov	r6,8
80006ee6:	f7 db c0 83 	bfextu	r11,r11,0x4,0x3
80006eea:	ec 0b 09 4b 	lsl	r11,r6,r11
80006eee:	f6 06 09 4b 	lsl	r11,r11,r6
80006ef2:	e0 4b ff ff 	cp.w	r11,65535
80006ef6:	e0 89 00 0a 	brgt	80006f0a <uhd_pipe_trans_complet+0x62>
				 max_trans = 256L * uhd_get_pipe_size(pipe);
80006efa:	72 0b       	ld.w	r11,r9[0x0]
80006efc:	f7 db c0 83 	bfextu	r11,r11,0x4,0x3
80006f00:	ec 0b 09 4b 	lsl	r11,r6,r11
80006f04:	f6 06 09 4b 	lsl	r11,r11,r6
80006f08:	c0 38       	rjmp	80006f0e <uhd_pipe_trans_complet+0x66>
80006f0a:	e0 7b 00 00 	mov	r11,65536
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
80006f0e:	1c 1a       	sub	r10,lr
80006f10:	14 3b       	cp.w	r11,r10
80006f12:	f6 0a 17 80 	movls	r10,r11
			// The USB hardware supports a maximum
			// transfer size of UHD_PIPE_MAX_TRANS Bytes
			next_trans = max_trans;
		}

		if (next_trans == UHD_PIPE_MAX_TRANS) {
80006f16:	e0 5a 00 00 	cp.w	r10,65536
80006f1a:	c0 31       	brne	80006f20 <uhd_pipe_trans_complet+0x78>
80006f1c:	30 0b       	mov	r11,0
			// Set 0 to transfer the maximum
			uhd_dma_ctrl = (0 <<
					AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		} else {
			uhd_dma_ctrl = (next_trans <<
80006f1e:	c0 38       	rjmp	80006f24 <uhd_pipe_trans_complet+0x7c>
80006f20:	f4 0b 15 10 	lsl	r11,r10,0x10
					AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		}

		if (uhd_is_pipe_out(pipe)) {
80006f24:	72 0e       	ld.w	lr,r9[0x0]
80006f26:	fd de c1 02 	bfextu	lr,lr,0x8,0x2
80006f2a:	58 2e       	cp.w	lr,2
			if (0 != next_trans % uhd_get_pipe_size(pipe)) {
80006f2c:	c1 21       	brne	80006f50 <uhd_pipe_trans_complet+0xa8>
80006f2e:	72 0e       	ld.w	lr,r9[0x0]
80006f30:	30 86       	mov	r6,8
80006f32:	fd de c0 83 	bfextu	lr,lr,0x4,0x3
80006f36:	ec 0e 09 4e 	lsl	lr,r6,lr
80006f3a:	20 1e       	sub	lr,1
80006f3c:	f5 ee 00 0e 	and	lr,r10,lr
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
80006f40:	c1 80       	breq	80006f70 <uhd_pipe_trans_complet+0xc8>
		if (uhd_is_pipe_out(pipe)) {
			if (0 != next_trans % uhd_get_pipe_size(pipe)) {
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_DMAEND_EN_MASK;
80006f42:	70 0e       	ld.w	lr,r8[0x0]
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
80006f44:	0c 4b       	or	r11,r6
80006f46:	30 06       	mov	r6,0
80006f48:	fd d6 d3 c1 	bfins	lr,r6,0x1e,0x1
80006f4c:	91 0e       	st.w	r8[0x0],lr
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != uhd_get_pipe_type(pipe))
80006f4e:	c1 18       	rjmp	80006f70 <uhd_pipe_trans_complet+0xc8>
80006f50:	72 0e       	ld.w	lr,r9[0x0]
80006f52:	fd de c1 82 	bfextu	lr,lr,0xc,0x2
80006f56:	58 1e       	cp.w	lr,1
					|| (next_trans <= uhd_get_pipe_size(pipe))) {
80006f58:	c0 a1       	brne	80006f6c <uhd_pipe_trans_complet+0xc4>
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != uhd_get_pipe_type(pipe))
80006f5a:	72 0e       	ld.w	lr,r9[0x0]
80006f5c:	30 86       	mov	r6,8
80006f5e:	fd de c0 83 	bfextu	lr,lr,0x4,0x3
80006f62:	ec 0e 09 4e 	lsl	lr,r6,lr
80006f66:	1c 3a       	cp.w	r10,lr
80006f68:	e0 8b 00 04 	brhi	80006f70 <uhd_pipe_trans_complet+0xc8>
					|| (next_trans <= uhd_get_pipe_size(pipe))) {
				// Enable short packet reception
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_EOT_IRQ_EN_MASK
80006f6c:	e8 1b 00 14 	orl	r11,0x14
						| AVR32_USBB_UHDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		uhd_pipe_dma_set_addr(pipe, (U32) &ptr_job->buf[ptr_job->nb_trans]);
80006f70:	70 3e       	ld.w	lr,r8[0xc]
80006f72:	70 16       	ld.w	r6,r8[0x4]
80006f74:	1c 06       	add	r6,lr
80006f76:	f8 0e 15 04 	lsl	lr,r12,0x4
80006f7a:	e0 3e f9 00 	sub	lr,129280

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80006f7e:	9d 16       	st.w	lr[0x4],r6
80006f80:	e1 b5 00 00 	mfsr	r5,0x0
				AVR32_USBB_UHDMA1_CONTROL_CH_EN_MASK;

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if( !(uhd_pipe_dma_get_status(pipe)
80006f84:	d3 03       	ssrf	0x10
80006f86:	7c 36       	ld.w	r6,lr[0xc]
80006f88:	e2 16 00 10 	andl	r6,0x10,COH
				& AVR32_USBB_UHDMA1_STATUS_EOT_STA_MASK)) {
			if (uhd_is_pipe_in(pipe)) {
80006f8c:	c3 61       	brne	80006ff8 <uhd_pipe_trans_complet+0x150>
80006f8e:	72 0c       	ld.w	r12,r9[0x0]
80006f90:	f9 dc c1 02 	bfextu	r12,r12,0x8,0x2
80006f94:	58 1c       	cp.w	r12,1
				uhd_in_request_number(pipe,
80006f96:	c1 c1       	brne	80006fce <uhd_pipe_trans_complet+0x126>
80006f98:	fe 6c 06 50 	mov	r12,-129456
80006f9c:	ee 0c 00 06 	add	r6,r7,r12
80006fa0:	6c 0c       	ld.w	r12,r6[0x0]
80006fa2:	72 03       	ld.w	r3,r9[0x0]
80006fa4:	e0 1c ff 00 	andl	r12,0xff00
80006fa8:	72 04       	ld.w	r4,r9[0x0]
80006faa:	f3 d3 c0 83 	bfextu	r9,r3,0x4,0x3
80006fae:	e9 d4 c0 83 	bfextu	r4,r4,0x4,0x3
80006fb2:	30 83       	mov	r3,8
80006fb4:	2f d4       	sub	r4,-3
80006fb6:	e6 09 09 49 	lsl	r9,r3,r9
80006fba:	20 19       	sub	r9,1
80006fbc:	14 09       	add	r9,r10
80006fbe:	f2 04 0a 49 	lsr	r9,r9,r4
80006fc2:	20 19       	sub	r9,1
80006fc4:	f3 d9 c0 08 	bfextu	r9,r9,0x0,0x8
80006fc8:	f3 ec 10 0c 	or	r12,r9,r12
						(next_trans+uhd_get_pipe_size(pipe)-1)/uhd_get_pipe_size(pipe));
			}
			uhd_disable_bank_interrupt(pipe);
80006fcc:	8d 0c       	st.w	r6[0x0],r12
80006fce:	e0 37 f9 e0 	sub	r7,129504
80006fd2:	e0 69 10 00 	mov	r9,4096
			uhd_unfreeze_pipe(pipe);
80006fd6:	8f 09       	st.w	r7[0x0],r9
80006fd8:	e2 69 00 00 	mov	r9,131072
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		uhd_pipe_dma_set_addr(pipe, (U32) &ptr_job->buf[ptr_job->nb_trans]);
		uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
80006fdc:	8f 09       	st.w	r7[0x0],r9
80006fde:	e8 1b 00 21 	orl	r11,0x21
						(next_trans+uhd_get_pipe_size(pipe)-1)/uhd_get_pipe_size(pipe));
			}
			uhd_disable_bank_interrupt(pipe);
			uhd_unfreeze_pipe(pipe);
			uhd_pipe_dma_set_control(pipe, uhd_dma_ctrl);
			ptr_job->nb_trans += next_trans;
80006fe2:	9d 2b       	st.w	lr[0x8],r11
80006fe4:	70 39       	ld.w	r9,r8[0xc]
80006fe6:	f2 0a 00 0a 	add	r10,r9,r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80006fea:	91 3a       	st.w	r8[0xc],r10
80006fec:	e6 15 00 01 	andh	r5,0x1,COH
      cpu_irq_enable();
80006ff0:	c0 21       	brne	80006ff4 <uhd_pipe_trans_complet+0x14c>
			cpu_irq_restore(flags);
			return;
80006ff2:	d5 03       	csrf	0x10
80006ff4:	d8 32       	popm	r0-r7,pc
80006ff6:	d7 03       	nop
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80006ff8:	e6 15 00 01 	andh	r5,0x1,COH
80006ffc:	c0 21       	brne	80007000 <uhd_pipe_trans_complet+0x158>
      cpu_irq_enable();
80006ffe:	d5 03       	csrf	0x10
		}
		cpu_irq_restore(flags);
		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->nb_trans;
80007000:	70 39       	ld.w	r9,r8[0xc]
80007002:	91 29       	st.w	r8[0x8],r9
	}
	if (uhd_is_pipe_out(pipe)) {
80007004:	f8 09 15 02 	lsl	r9,r12,0x2
80007008:	fe 6b 05 00 	mov	r11,-129792
8000700c:	f2 0b 00 0a 	add	r10,r9,r11
80007010:	74 0a       	ld.w	r10,r10[0x0]
80007012:	f5 da c1 02 	bfextu	r10,r10,0x8,0x2
80007016:	58 2a       	cp.w	r10,2
80007018:	c1 c1       	brne	80007050 <uhd_pipe_trans_complet+0x1a8>
		if (ptr_job->b_shortpacket) {
8000701a:	70 08       	ld.w	r8,r8[0x0]
8000701c:	ed b8 00 1e 	bld	r8,0x1e
80007020:	c1 81       	brne	80007050 <uhd_pipe_trans_complet+0x1a8>
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			uhd_ack_out_ready(pipe);
80007022:	fe 6c 05 60 	mov	r12,-129696
80007026:	f2 0c 00 08 	add	r8,r9,r12
8000702a:	91 0a       	st.w	r8[0x0],r10
			if (Is_uhd_write_enabled(pipe)) {
8000702c:	fe 6b 05 30 	mov	r11,-129744
80007030:	f2 0b 00 08 	add	r8,r9,r11
80007034:	70 08       	ld.w	r8,r8[0x0]
80007036:	ed b8 00 10 	bld	r8,0x10
8000703a:	c0 61       	brne	80007046 <uhd_pipe_trans_complet+0x19e>
				// Force interrupt in case of pipe already free
				uhd_raise_out_ready(pipe);
8000703c:	fe 6c 05 90 	mov	r12,-129648
80007040:	f2 0c 00 08 	add	r8,r9,r12
80007044:	91 0a       	st.w	r8[0x0],r10
			}
			uhd_enable_out_ready_interrupt(pipe);
80007046:	e0 39 fa 10 	sub	r9,129552
8000704a:	30 28       	mov	r8,2
8000704c:	93 08       	st.w	r9[0x0],r8
			return;
8000704e:	d8 32       	popm	r0-r7,pc
		}
	}
	// Call callback to signal end of transfer
	uhd_pipe_finish_job(pipe, UHD_TRANS_NOERROR);
80007050:	30 0b       	mov	r11,0
80007052:	cb fe       	rcall	80006dd0 <uhd_pipe_finish_job>
80007054:	d8 32       	popm	r0-r7,pc
80007056:	d7 03       	nop

80007058 <uhd_ep_run>:
80007058:	d4 31       	pushm	r0-r7,lr
8000705a:	fa c4 ff dc 	sub	r4,sp,-36
		bool b_shortpacket,
		uint8_t *buf,
		iram_size_t buf_size,
		uint16_t timeout,
		uhd_callback_trans_t callback)
{
8000705e:	10 95       	mov	r5,r8
80007060:	68 13       	ld.w	r3,r4[0x4]
80007062:	14 97       	mov	r7,r10
80007064:	12 96       	mov	r6,r9
80007066:	68 04       	ld.w	r4,r4[0x0]
	irqflags_t flags;
	uint8_t pipe;
	uhd_pipe_job_t *ptr_job;

	pipe = uhd_get_pipe(add,endp);
80007068:	c7 4e       	rcall	80006d50 <uhd_get_pipe>
8000706a:	30 78       	mov	r8,7
	if (pipe == AVR32_USBB_EPT_NUM) {
8000706c:	f0 0c 18 00 	cp.b	r12,r8
80007070:	c1 60       	breq	8000709c <uhd_ep_run+0x44>
80007072:	e0 69 08 f8 	mov	r9,2296
		return false; // pipe not found
	}

	// Get job about pipe
	ptr_job = &uhd_pipe_job[pipe-1];
80007076:	f8 c8 00 01 	sub	r8,r12,1
8000707a:	f0 08 00 28 	add	r8,r8,r8<<0x2
8000707e:	f2 08 00 28 	add	r8,r9,r8<<0x2

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80007082:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80007086:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
80007088:	70 0b       	ld.w	r11,r8[0x0]
8000708a:	e6 19 00 01 	andh	r9,0x1,COH
8000708e:	16 9a       	mov	r10,r11
80007090:	e6 1a 80 00 	andh	r10,0x8000,COH
80007094:	c0 50       	breq	8000709e <uhd_ep_run+0x46>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80007096:	58 09       	cp.w	r9,0
80007098:	c0 21       	brne	8000709c <uhd_ep_run+0x44>
      cpu_irq_enable();
8000709a:	d5 03       	csrf	0x10
   }

	barrier();
8000709c:	d8 3a       	popm	r0-r7,pc,r12=0
		cpu_irq_restore(flags);
		return false; // Job already on going
	}
	ptr_job->busy = true;
8000709e:	30 1e       	mov	lr,1
800070a0:	f7 de d3 e1 	bfins	r11,lr,0x1f,0x1
800070a4:	91 0b       	st.w	r8[0x0],r11

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
	ptr_job->buf_size = buf_size;
	ptr_job->nb_trans = 0;
	ptr_job->timeout = timeout;
800070a6:	b0 14       	st.h	r8[0x2],r4
	ptr_job->busy = true;

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
	ptr_job->buf_size = buf_size;
	ptr_job->nb_trans = 0;
800070a8:	91 3a       	st.w	r8[0xc],r10
	ptr_job->timeout = timeout;
	ptr_job->b_shortpacket = b_shortpacket;
	ptr_job->call_end = callback;
800070aa:	91 43       	st.w	r8[0x10],r3
	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
	ptr_job->buf_size = buf_size;
	ptr_job->nb_trans = 0;
	ptr_job->timeout = timeout;
	ptr_job->b_shortpacket = b_shortpacket;
800070ac:	70 0a       	ld.w	r10,r8[0x0]
		return false; // Job already on going
	}
	ptr_job->busy = true;

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
800070ae:	91 16       	st.w	r8[0x4],r6
	ptr_job->buf_size = buf_size;
	ptr_job->nb_trans = 0;
	ptr_job->timeout = timeout;
	ptr_job->b_shortpacket = b_shortpacket;
800070b0:	f5 d7 d3 c1 	bfins	r10,r7,0x1e,0x1
	}
	ptr_job->busy = true;

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
	ptr_job->buf_size = buf_size;
800070b4:	91 25       	st.w	r8[0x8],r5
	ptr_job->nb_trans = 0;
	ptr_job->timeout = timeout;
	ptr_job->b_shortpacket = b_shortpacket;
800070b6:	91 0a       	st.w	r8[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800070b8:	58 09       	cp.w	r9,0
800070ba:	c0 21       	brne	800070be <uhd_ep_run+0x66>
      cpu_irq_enable();
800070bc:	d5 03       	csrf	0x10
	ptr_job->call_end = callback;
	cpu_irq_restore(flags);

	// Request first transfer
	uhd_pipe_trans_complet(pipe);
800070be:	cf 5e       	rcall	80006ea8 <uhd_pipe_trans_complet>
800070c0:	da 3a       	popm	r0-r7,pc,r12=1
800070c2:	d7 03       	nop

800070c4 <uhd_ctrl_request_end>:
800070c4:	d4 21       	pushm	r4-r7,lr
800070c6:	30 09       	mov	r9,0
800070c8:	e0 68 1c b4 	mov	r8,7348
800070cc:	18 95       	mov	r5,r12
800070ce:	b0 09       	st.h	r8[0x0],r9
	bool b_new_request;

	uhd_ctrl_request_timeout = 0;

	// Remove request from the control request list
	callback_end = uhd_ctrl_request_first->callback_end;
800070d0:	e0 69 1c a8 	mov	r9,7336

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800070d4:	72 0c       	ld.w	r12,r9[0x0]
800070d6:	78 66       	ld.w	r6,r12[0x18]
	cpu_irq_disable();
800070d8:	e1 b8 00 00 	mfsr	r8,0x0
	request_to_free = uhd_ctrl_request_first;
	flags = cpu_irq_save();
	uhd_ctrl_request_first = uhd_ctrl_request_first->next_request;
800070dc:	d3 03       	ssrf	0x10
800070de:	72 0a       	ld.w	r10,r9[0x0]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800070e0:	74 77       	ld.w	r7,r10[0x1c]
800070e2:	93 07       	st.w	r9[0x0],r7
800070e4:	ed b8 00 10 	bld	r8,0x10
	b_new_request = (uhd_ctrl_request_first != NULL);
	cpu_irq_restore(flags);
	free(request_to_free);
800070e8:	c0 20       	breq	800070ec <uhd_ctrl_request_end+0x28>
800070ea:	d5 03       	csrf	0x10

	// Call callback
	if (callback_end != NULL) {
800070ec:	e0 a0 0b a2 	rcall	80008830 <free>
		callback_end(uhd_get_configured_address(0), status, uhd_ctrl_nb_trans);
800070f0:	58 06       	cp.w	r6,0
800070f2:	c0 b0       	breq	80007108 <uhd_ctrl_request_end+0x44>
800070f4:	fe 68 04 24 	mov	r8,-130012
800070f8:	70 0c       	ld.w	r12,r8[0x0]
800070fa:	e0 68 1c ac 	mov	r8,7340
800070fe:	0a 9b       	mov	r11,r5
80007100:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
	}

	// If a setup request is pending and no started by previous callback
	if (b_new_request) {
80007104:	90 8a       	ld.uh	r10,r8[0x0]
		uhd_ctrl_phase_setup();
80007106:	5d 16       	icall	r6
80007108:	58 07       	cp.w	r7,0
	}
	if (uhd_b_suspend_requested) {
8000710a:	c0 20       	breq	8000710e <uhd_ctrl_request_end+0x4a>
8000710c:	c0 cc       	rcall	80007124 <uhd_ctrl_phase_setup>
8000710e:	e0 68 09 73 	mov	r8,2419
80007112:	30 09       	mov	r9,0
80007114:	11 8a       	ld.ub	r10,r8[0x0]
		// A suspend request has been delay after all setup request
		uhd_b_suspend_requested = false;
80007116:	f2 0a 18 00 	cp.b	r10,r9
		uhd_suspend();
8000711a:	c0 40       	breq	80007122 <uhd_ctrl_request_end+0x5e>
8000711c:	b0 89       	st.b	r8[0x0],r9
8000711e:	fe b0 fd 49 	rcall	80006bb0 <uhd_suspend>
80007122:	d8 22       	popm	r4-r7,pc

80007124 <uhd_ctrl_phase_setup>:
80007124:	d4 21       	pushm	r4-r7,lr
80007126:	20 2d       	sub	sp,8
80007128:	e0 68 1c a4 	mov	r8,7332
8000712c:	30 06       	mov	r6,0
8000712e:	91 06       	st.w	r8[0x0],r6
80007130:	e0 68 1c a8 	mov	r8,7336
80007134:	30 8a       	mov	r10,8
80007136:	70 07       	ld.w	r7,r8[0x0]
80007138:	1a 9c       	mov	r12,sp
8000713a:	ee cb ff ff 	sub	r11,r7,-1

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
	uhd_ctrl_nb_trans = 0;
8000713e:	e0 a0 0d 9d 	rcall	80008c78 <memcpy>
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
80007142:	e0 68 1c ac 	mov	r8,7340
		uint64_t value64;
	} setup;
	volatile uint64_t *ptr_ep_data;

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));
80007146:	b0 06       	st.h	r8[0x0],r6
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
80007148:	fe 68 00 00 	mov	r8,-131072

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
8000714c:	40 09       	lddsp	r9,sp[0x0]
8000714e:	f0 fc 04 1c 	ld.w	r12,r8[1052]
80007152:	f7 d9 c0 10 	bfextu	r11,r9,0x0,0x10
80007156:	f6 06 16 08 	lsr	r6,r11,0x8
8000715a:	ed eb 10 8b 	or	r11,r6,r11<<0x8
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
8000715e:	40 18       	lddsp	r8,sp[0x4]
80007160:	f3 db d0 10 	bfins	r9,r11,0x0,0x10
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
80007164:	f0 0a 16 10 	lsr	r10,r8,0x10
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
80007168:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
8000716c:	f4 0b 16 08 	lsr	r11,r10,0x8
80007170:	f7 ea 10 8a 	or	r10,r11,r10<<0x8
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
80007174:	f1 da d2 10 	bfins	r8,r10,0x10,0x10
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
80007178:	ed d8 b0 10 	bfexts	r6,r8,0x0,0x10
			(uhd_ctrl_request_first->add != uhd_get_configured_address(0))) {
8000717c:	58 0c       	cp.w	r12,0
8000717e:	c0 90       	breq	80007190 <uhd_ctrl_phase_setup+0x6c>
80007180:	fe 6a 04 24 	mov	r10,-130012
80007184:	74 0a       	ld.w	r10,r10[0x0]
80007186:	0f 8b       	ld.ub	r11,r7[0x0]
80007188:	f5 da c0 07 	bfextu	r10,r10,0x0,0x7
		uhd_ctrl_request_end(UHD_TRANS_DISCONNECT);
8000718c:	14 3b       	cp.w	r11,r10
8000718e:	c0 40       	breq	80007196 <uhd_ctrl_phase_setup+0x72>
		return; // Endpoint not valid
80007190:	30 1c       	mov	r12,1
	}
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_SETUP);
80007192:	c9 9f       	rcall	800070c4 <uhd_ctrl_request_end>
80007194:	c2 a8       	rjmp	800071e8 <uhd_ctrl_phase_setup+0xc4>
80007196:	fe 6b 05 00 	mov	r11,-129792
8000719a:	76 0a       	ld.w	r10,r11[0x0]
8000719c:	e0 1a fc ff 	andl	r10,0xfcff
	uhd_ack_setup_ready(0);
800071a0:	97 0a       	st.w	r11[0x0],r10
800071a2:	30 4c       	mov	r12,4
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
800071a4:	fe 6a 05 60 	mov	r10,-129696
	}
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_SETUP);
	uhd_ack_setup_ready(0);
800071a8:	ef d6 c0 10 	bfextu	r7,r6,0x0,0x10
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
800071ac:	95 0c       	st.w	r10[0x0],r12
800071ae:	12 9b       	mov	r11,r9
800071b0:	ee 09 16 08 	lsr	r9,r7,0x8
800071b4:	f3 e7 10 87 	or	r7,r9,r7<<0x8
	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_SETUP);
	uhd_ack_setup_ready(0);
	Assert(sizeof(setup) == sizeof(uint64_t));
	ptr_ep_data = (volatile uint64_t *)&uhd_get_pipe_fifo_access(0, 64);
	*ptr_ep_data = setup.value64;
800071b8:	f1 d7 d0 10 	bfins	r8,r7,0x0,0x10
800071bc:	10 9a       	mov	r10,r8
800071be:	30 08       	mov	r8,0
800071c0:	ea 18 d0 00 	orh	r8,0xd000

	uhd_ctrl_request_timeout = 5000;
800071c4:	f0 eb 00 00 	st.d	r8[0],r10
800071c8:	e0 69 13 88 	mov	r9,5000
	uhd_enable_setup_ready_interrupt(0);
800071cc:	e0 68 1c b4 	mov	r8,7348
800071d0:	b0 09       	st.h	r8[0x0],r9
	uhd_ack_fifocon(0);
800071d2:	fe 68 05 f0 	mov	r8,-129552
800071d6:	91 0c       	st.w	r8[0x0],r12
800071d8:	e0 69 40 00 	mov	r9,16384
	uhd_unfreeze_pipe(0);
800071dc:	fe 68 06 20 	mov	r8,-129504
800071e0:	91 09       	st.w	r8[0x0],r9
}
800071e2:	e2 69 00 00 	mov	r9,131072
800071e6:	91 09       	st.w	r8[0x0],r9
800071e8:	2f ed       	sub	sp,-8
800071ea:	d8 22       	popm	r4-r7,pc

800071ec <uhd_setup_request>:
800071ec:	d4 31       	pushm	r0-r7,lr
800071ee:	20 1d       	sub	sp,4
800071f0:	18 97       	mov	r7,r12
800071f2:	50 0b       	stdsp	sp[0x0],r11
800071f4:	14 92       	mov	r2,r10
800071f6:	12 96       	mov	r6,r9
800071f8:	10 93       	mov	r3,r8
800071fa:	40 a4       	lddsp	r4,sp[0x28]
800071fc:	32 0c       	mov	r12,32
800071fe:	e0 a0 0b 21 	rcall	80008840 <malloc>
	irqflags_t flags;
	struct uhd_ctrl_request_t *request;
	bool b_start_request = false;

	request = malloc( sizeof(struct uhd_ctrl_request_t) );
	if (request == NULL) {
80007202:	40 0b       	lddsp	r11,sp[0x0]
{
	irqflags_t flags;
	struct uhd_ctrl_request_t *request;
	bool b_start_request = false;

	request = malloc( sizeof(struct uhd_ctrl_request_t) );
80007204:	18 95       	mov	r5,r12
	if (request == NULL) {
80007206:	c2 60       	breq	80007252 <uhd_setup_request+0x66>
		Assert(false);
		return false;
	}

	// Fill structure
	request->add = (uint8_t) add;
80007208:	18 c7       	st.b	r12++,r7
	memcpy(&request->req, req, sizeof(usb_setup_req_t));
8000720a:	30 8a       	mov	r10,8
8000720c:	e0 a0 0d 36 	rcall	80008c78 <memcpy>
	request->payload = payload;
	request->payload_size = payload_size;
	request->callback_run = callback_run;
	request->callback_end = callback_end;
	request->next_request = NULL;
80007210:	30 08       	mov	r8,0
	}

	// Fill structure
	request->add = (uint8_t) add;
	memcpy(&request->req, req, sizeof(usb_setup_req_t));
	request->payload = payload;
80007212:	8b 32       	st.w	r5[0xc],r2
	request->payload_size = payload_size;
80007214:	eb 56 00 10 	st.h	r5[16],r6
	request->callback_run = callback_run;
80007218:	8b 53       	st.w	r5[0x14],r3
	request->callback_end = callback_end;
8000721a:	8b 64       	st.w	r5[0x18],r4
	request->next_request = NULL;
8000721c:	8b 78       	st.w	r5[0x1c],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000721e:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80007222:	d3 03       	ssrf	0x10

	// Add this request in the queue
	flags = cpu_irq_save();
	if (uhd_ctrl_request_first == NULL) {
80007224:	e0 69 1c a8 	mov	r9,7336
80007228:	72 0b       	ld.w	r11,r9[0x0]
8000722a:	58 0b       	cp.w	r11,0
		uhd_ctrl_request_first = request;
8000722c:	c0 41       	brne	80007234 <uhd_setup_request+0x48>
8000722e:	93 05       	st.w	r9[0x0],r5
80007230:	30 18       	mov	r8,1
		b_start_request = true;
	} else {
		uhd_ctrl_request_last->next_request = request;
80007232:	c0 58       	rjmp	8000723c <uhd_setup_request+0x50>
80007234:	e0 69 1c b0 	mov	r9,7344
	}
	uhd_ctrl_request_last = request;
80007238:	72 09       	ld.w	r9,r9[0x0]
8000723a:	93 75       	st.w	r9[0x1c],r5
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000723c:	e0 69 1c b0 	mov	r9,7344
80007240:	93 05       	st.w	r9[0x0],r5
      cpu_irq_enable();
80007242:	ed ba 00 10 	bld	r10,0x10
	cpu_irq_restore(flags);

	if (b_start_request) {
80007246:	c0 20       	breq	8000724a <uhd_setup_request+0x5e>
		// Start immediately request
		uhd_ctrl_phase_setup();
80007248:	d5 03       	csrf	0x10
8000724a:	58 08       	cp.w	r8,0
8000724c:	c0 20       	breq	80007250 <uhd_setup_request+0x64>
	}
	return true;
}
8000724e:	c6 bf       	rcall	80007124 <uhd_ctrl_phase_setup>
80007250:	30 1c       	mov	r12,1
80007252:	2f fd       	sub	sp,-4
80007254:	d8 32       	popm	r0-r7,pc
80007256:	d7 03       	nop

80007258 <uhd_ep_free>:
80007258:	d4 31       	pushm	r0-r7,lr
8000725a:	fe 66 05 00 	mov	r6,-129792
8000725e:	18 90       	mov	r0,r12
80007260:	16 94       	mov	r4,r11
80007262:	30 07       	mov	r7,0
80007264:	fe 65 00 00 	mov	r5,-131072
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80007268:	30 11       	mov	r1,1
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
8000726a:	37 f2       	mov	r2,127
			continue;
		}
		if (endp != 0xFF) {
8000726c:	3f f3       	mov	r3,-1
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
8000726e:	ea fb 04 1c 	ld.w	r11,r5[1052]
	return false;
}


void uhd_ep_free(usb_add_t add, usb_ep_t endp)
{
80007272:	0e 99       	mov	r9,r7
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80007274:	e2 07 09 4a 	lsl	r10,r1,r7
	return false;
}


void uhd_ep_free(usb_add_t add, usb_ep_t endp)
{
80007278:	5c 59       	castu.b	r9
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
8000727a:	f5 eb 00 0b 	and	r11,r10,r11
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
8000727e:	12 98       	mov	r8,r9
80007280:	e2 18 00 fc 	andl	r8,0xfc,COH
80007284:	e0 38 fb dc 	sub	r8,130012
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80007288:	58 0b       	cp.w	r11,0
8000728a:	c3 90       	breq	800072fc <uhd_ep_free+0xa4>
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
8000728c:	70 0b       	ld.w	r11,r8[0x0]
8000728e:	f1 d7 c0 02 	bfextu	r8,r7,0x0,0x2
80007292:	a3 78       	lsl	r8,0x3
80007294:	e4 08 09 48 	lsl	r8,r2,r8
80007298:	10 6b       	and	r11,r8
8000729a:	5c 98       	brev	r8
8000729c:	f0 08 12 00 	clz	r8,r8
800072a0:	f6 08 0a 48 	lsr	r8,r11,r8
800072a4:	10 30       	cp.w	r0,r8
800072a6:	c2 b1       	brne	800072fc <uhd_ep_free+0xa4>
			if (endp != uhd_get_pipe_endpoint_address(pipe)) {
				continue; // Mismatch
			}
		}
		// Unalloc pipe
		uhd_disable_pipe(pipe);
800072a8:	5c da       	com	r10
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
			continue;
		}
		if (endp != 0xFF) {
800072aa:	e6 04 18 00 	cp.b	r4,r3
800072ae:	c1 10       	breq	800072d0 <uhd_ep_free+0x78>
			// Disable specific endpoint number
			if (endp != uhd_get_pipe_endpoint_address(pipe)) {
800072b0:	6c 0b       	ld.w	r11,r6[0x0]
800072b2:	6c 08       	ld.w	r8,r6[0x0]
800072b4:	f7 db c2 04 	bfextu	r11,r11,0x10,0x4
800072b8:	f1 d8 c1 02 	bfextu	r8,r8,0x8,0x2
800072bc:	e0 6c 00 80 	mov	r12,128
800072c0:	58 18       	cp.w	r8,1
800072c2:	f8 08 17 00 	moveq	r8,r12
800072c6:	f9 b8 01 00 	movne	r8,0
800072ca:	16 48       	or	r8,r11
800072cc:	10 34       	cp.w	r4,r8
800072ce:	c1 71       	brne	800072fc <uhd_ep_free+0xa4>
				continue; // Mismatch
			}
		}
		// Unalloc pipe
		uhd_disable_pipe(pipe);
800072d0:	ea f8 04 1c 	ld.w	r8,r5[1052]
800072d4:	10 6a       	and	r10,r8
800072d6:	eb 4a 04 1c 	st.w	r5[1052],r10
		uhd_unallocate_memory(pipe);
800072da:	6c 08       	ld.w	r8,r6[0x0]
800072dc:	a1 d8       	cbr	r8,0x1
800072de:	8d 08       	st.w	r6[0x0],r8

		// Stop transfer on this pipe
#ifndef USB_HOST_HUB_SUPPORT
		if (pipe == 0) {
800072e0:	58 09       	cp.w	r9,0
800072e2:	c0 91       	brne	800072f4 <uhd_ep_free+0x9c>
			// Endpoint control
			if (uhd_ctrl_request_timeout) {
800072e4:	e0 69 1c b4 	mov	r9,7348
800072e8:	92 08       	ld.sh	r8,r9[0x0]
800072ea:	58 08       	cp.w	r8,0
				uhd_ctrl_request_end(UHD_TRANS_DISCONNECT);
800072ec:	c0 80       	breq	800072fc <uhd_ep_free+0xa4>
800072ee:	30 1c       	mov	r12,1
800072f0:	ce ae       	rcall	800070c4 <uhd_ctrl_request_end>
800072f2:	c0 58       	rjmp	800072fc <uhd_ep_free+0xa4>
			}
			continue;
		}
#endif
		// Endpoint interrupt, bulk or isochronous
		uhd_ep_abort_pipe(pipe, UHD_TRANS_DISCONNECT);
800072f4:	0e 9c       	mov	r12,r7
800072f6:	30 1b       	mov	r11,1
800072f8:	fe b0 fd a8 	rcall	80006e48 <uhd_ep_abort_pipe>
800072fc:	2f f7       	sub	r7,-1
800072fe:	2f c6       	sub	r6,-4
		}
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
80007300:	58 77       	cp.w	r7,7
80007302:	cb 61       	brne	8000726e <uhd_ep_free+0x16>
		}
#endif
		// Endpoint interrupt, bulk or isochronous
		uhd_ep_abort_pipe(pipe, UHD_TRANS_DISCONNECT);
	}
}
80007304:	d8 32       	popm	r0-r7,pc
80007306:	d7 03       	nop

80007308 <uhd_ep_alloc>:
80007308:	d4 31       	pushm	r0-r7,lr
8000730a:	30 08       	mov	r8,0
8000730c:	fe 65 00 00 	mov	r5,-131072
80007310:	30 16       	mov	r6,1
80007312:	ea f7 04 1c 	ld.w	r7,r5[1052]
	uhd_enable_pipe_interrupt(0);
	return true;
}

bool uhd_ep_alloc(usb_add_t add, usb_ep_desc_t * ep_desc)
{
80007316:	f0 c9 ff ff 	sub	r9,r8,-1
	uint8_t ep_dir;
	uint8_t ep_interval;
	uint8_t bank;

	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (Is_uhd_pipe_enabled(pipe)) {
8000731a:	fe 6e 00 00 	mov	lr,-131072
	uhd_enable_pipe_error_interrupt(0);
	uhd_enable_pipe_interrupt(0);
	return true;
}

bool uhd_ep_alloc(usb_add_t add, usb_ep_desc_t * ep_desc)
8000731e:	2f f8       	sub	r8,-1
{
80007320:	5c 59       	castu.b	r9
	uint8_t ep_dir;
	uint8_t ep_interval;
	uint8_t bank;

	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (Is_uhd_pipe_enabled(pipe)) {
80007322:	ec 08 09 4a 	lsl	r10,r6,r8
80007326:	f5 e7 00 07 	and	r7,r10,r7
8000732a:	c0 40       	breq	80007332 <uhd_ep_alloc+0x2a>
	uint8_t ep_type;
	uint8_t ep_dir;
	uint8_t ep_interval;
	uint8_t bank;

	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
8000732c:	58 68       	cp.w	r8,6
8000732e:	cf 21       	brne	80007312 <uhd_ep_alloc+0xa>
80007330:	c9 a8       	rjmp	80007464 <uhd_ep_alloc+0x15c>
		if (Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		uhd_enable_pipe(pipe);
80007332:	fc f6 04 1c 	ld.w	r6,lr[1052]
80007336:	f5 e6 10 06 	or	r6,r10,r6
8000733a:	fd 46 04 1c 	st.w	lr[1052],r6
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
				AVR32_USBB_UPCFG0_PTOKEN_IN:
				AVR32_USBB_UPCFG0_PTOKEN_OUT,
		ep_type = ep_desc->bmAttributes&USB_EP_TYPE_MASK;
		// Bank choice
		switch(ep_type) {
8000733e:	30 25       	mov	r5,2
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		uhd_enable_pipe(pipe);
		ep_addr = ep_desc->bEndpointAddress & USB_EP_ADDR_MASK;
80007340:	17 a6       	ld.ub	r6,r11[0x2]
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
				AVR32_USBB_UPCFG0_PTOKEN_IN:
				AVR32_USBB_UPCFG0_PTOKEN_OUT,
		ep_type = ep_desc->bmAttributes&USB_EP_TYPE_MASK;
80007342:	17 be       	ld.ub	lr,r11[0x3]
		if (Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		uhd_enable_pipe(pipe);
		ep_addr = ep_desc->bEndpointAddress & USB_EP_ADDR_MASK;
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
80007344:	ec 07 18 00 	cp.b	r7,r6
80007348:	f9 b3 09 01 	movgt	r3,1
8000734c:	f9 b3 0a 02 	movle	r3,2
				AVR32_USBB_UPCFG0_PTOKEN_IN:
				AVR32_USBB_UPCFG0_PTOKEN_OUT,
		ep_type = ep_desc->bmAttributes&USB_EP_TYPE_MASK;
80007350:	fd de c0 02 	bfextu	lr,lr,0x0,0x2
		// Bank choice
		switch(ep_type) {
80007354:	ea 0e 18 00 	cp.b	lr,r5
80007358:	c0 d0       	breq	80007372 <uhd_ep_alloc+0x6a>
8000735a:	30 35       	mov	r5,3
8000735c:	ea 0e 18 00 	cp.b	lr,r5
80007360:	c0 70       	breq	8000736e <uhd_ep_alloc+0x66>
80007362:	30 17       	mov	r7,1
80007364:	ee 0e 18 00 	cp.b	lr,r7
80007368:	c7 e1       	brne	80007464 <uhd_ep_alloc+0x15c>
		case USB_EP_TYPE_ISOCHRONOUS:
			bank = UHD_ISOCHRONOUS_NB_BANK;
			ep_interval = ep_desc->bInterval;
8000736a:	17 e5       	ld.ub	r5,r11[0x6]
8000736c:	c0 48       	rjmp	80007374 <uhd_ep_alloc+0x6c>
			break;
		case USB_EP_TYPE_INTERRUPT:
			bank = UHD_INTERRUPT_NB_BANK;
			ep_interval = ep_desc->bInterval;
8000736e:	17 e5       	ld.ub	r5,r11[0x6]
80007370:	c0 38       	rjmp	80007376 <uhd_ep_alloc+0x6e>
80007372:	0e 95       	mov	r5,r7
80007374:	30 17       	mov	r7,1
		default:
			Assert(false);
			return false;
		}

		uhd_configure_pipe(pipe, ep_interval, ep_addr, ep_type, ep_dir,
80007376:	17 d4       	ld.ub	r4,r11[0x5]
80007378:	ed d6 c0 04 	bfextu	r6,r6,0x0,0x4
8000737c:	ad 6e       	lsl	lr,0xc
8000737e:	17 cb       	ld.ub	r11,r11[0x4]
80007380:	fd e6 11 0e 	or	lr,lr,r6<<0x10
80007384:	e9 eb 10 8b 	or	r11,r4,r11<<0x8
80007388:	ab ae       	sbr	lr,0xa
8000738a:	fe 64 05 00 	mov	r4,-129792
8000738e:	fd e3 10 8e 	or	lr,lr,r3<<0x8
80007392:	ee 06 15 02 	lsl	r6,r7,0x2
80007396:	fd e5 11 85 	or	r5,lr,r5<<0x18
8000739a:	f6 07 16 08 	lsr	r7,r11,0x8
8000739e:	f2 0e 15 02 	lsl	lr,r9,0x2
800073a2:	ef eb 10 87 	or	r7,r7,r11<<0x8
800073a6:	e0 63 04 00 	mov	r3,1024
800073aa:	fc 04 00 0b 	add	r11,lr,r4
800073ae:	5c 77       	castu.h	r7
800073b0:	30 84       	mov	r4,8
800073b2:	ee 04 0c 47 	max	r7,r7,r4
800073b6:	ee 03 0d 47 	min	r7,r7,r3
800073ba:	a1 77       	lsl	r7,0x1
800073bc:	20 17       	sub	r7,1
800073be:	ee 07 12 00 	clz	r7,r7
800073c2:	ee 07 11 1c 	rsub	r7,r7,28
800073c6:	e2 16 00 0c 	andl	r6,0xc,COH
800073ca:	eb e7 10 45 	or	r5,r5,r7<<0x4
				le16_to_cpu(ep_desc->wMaxPacketSize),
				bank, AVR32_USBB_UPCFG0_AUTOSW_MASK);
		uhd_allocate_memory(pipe);
		if (!Is_uhd_pipe_configured(pipe)) {
800073ce:	fe 67 05 30 	mov	r7,-129744
		default:
			Assert(false);
			return false;
		}

		uhd_configure_pipe(pipe, ep_interval, ep_addr, ep_type, ep_dir,
800073d2:	eb e6 10 06 	or	r6,r5,r6
800073d6:	97 06       	st.w	r11[0x0],r6
				le16_to_cpu(ep_desc->wMaxPacketSize),
				bank, AVR32_USBB_UPCFG0_AUTOSW_MASK);
		uhd_allocate_memory(pipe);
		if (!Is_uhd_pipe_configured(pipe)) {
800073d8:	fc 07 00 06 	add	r6,lr,r7
		}

		uhd_configure_pipe(pipe, ep_interval, ep_addr, ep_type, ep_dir,
				le16_to_cpu(ep_desc->wMaxPacketSize),
				bank, AVR32_USBB_UPCFG0_AUTOSW_MASK);
		uhd_allocate_memory(pipe);
800073dc:	76 07       	ld.w	r7,r11[0x0]
800073de:	a1 b7       	sbr	r7,0x1
800073e0:	97 07       	st.w	r11[0x0],r7
		if (!Is_uhd_pipe_configured(pipe)) {
800073e2:	6c 0b       	ld.w	r11,r6[0x0]
800073e4:	e6 1b 00 04 	andh	r11,0x4,COH
800073e8:	c0 b1       	brne	800073fe <uhd_ep_alloc+0xf6>
			uhd_disable_pipe(pipe);
800073ea:	fe 68 00 00 	mov	r8,-131072
800073ee:	5c da       	com	r10
800073f0:	f0 f9 04 1c 	ld.w	r9,r8[1052]
800073f4:	16 9c       	mov	r12,r11
800073f6:	12 6a       	and	r10,r9
800073f8:	f1 4a 04 1c 	st.w	r8[1052],r10
			return false;
800073fc:	d8 32       	popm	r0-r7,pc
		}
		uhd_configure_address(pipe, add);
800073fe:	37 f6       	mov	r6,127
80007400:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
80007404:	e2 19 00 fc 	andl	r9,0xfc,COH
80007408:	a3 7b       	lsl	r11,0x3
8000740a:	e0 39 fb dc 	sub	r9,130012
8000740e:	ec 0b 09 4b 	lsl	r11,r6,r11
80007412:	72 07       	ld.w	r7,r9[0x0]
80007414:	16 96       	mov	r6,r11
80007416:	5c 96       	brev	r6
80007418:	ec 06 12 00 	clz	r6,r6
8000741c:	16 87       	andn	r7,r11
8000741e:	f8 06 09 4c 	lsl	r12,r12,r6
80007422:	f9 eb 00 0b 	and	r11,r12,r11
80007426:	0e 4b       	or	r11,r7
80007428:	93 0b       	st.w	r9[0x0],r11
		uhd_enable_pipe(pipe);
8000742a:	fe 69 00 00 	mov	r9,-131072
8000742e:	f2 fb 04 1c 	ld.w	r11,r9[1052]
80007432:	16 4a       	or	r10,r11
80007434:	f3 4a 04 1c 	st.w	r9[1052],r10

		// Enable endpoint interrupts
		uhd_enable_pipe_dma_interrupt(pipe);
80007438:	30 0b       	mov	r11,0
8000743a:	ea 1b 02 00 	orh	r11,0x200
8000743e:	f0 ca 00 01 	sub	r10,r8,1
80007442:	f6 0a 09 4a 	lsl	r10,r11,r10
80007446:	f3 4a 04 18 	st.w	r9[1048],r10
		uhd_enable_stall_interrupt(pipe);
8000744a:	e0 3e fa 10 	sub	lr,129552
8000744e:	34 0a       	mov	r10,64
80007450:	9d 0a       	st.w	lr[0x0],r10
		uhd_enable_pipe_error_interrupt(pipe);
80007452:	9d 04       	st.w	lr[0x0],r4
		uhd_enable_pipe_interrupt(pipe);
80007454:	e0 6a 01 00 	mov	r10,256
80007458:	30 1c       	mov	r12,1
8000745a:	f4 08 09 48 	lsl	r8,r10,r8
8000745e:	f3 48 04 18 	st.w	r9[1048],r8
		return true;
80007462:	d8 32       	popm	r0-r7,pc
80007464:	d8 3a       	popm	r0-r7,pc,r12=0

80007466 <uhd_ep0_alloc>:
	uhd_send_resume();
	uhd_sleep_mode(UHD_STATE_IDLE);
}

bool uhd_ep0_alloc(usb_add_t add, uint8_t ep_size)
{
80007466:	d4 01       	pushm	lr
	if (ep_size < 8) {
80007468:	30 78       	mov	r8,7
8000746a:	f0 0b 18 00 	cp.b	r11,r8
8000746e:	e0 8b 00 03 	brhi	80007474 <uhd_ep0_alloc+0xe>
80007472:	d8 0a       	popm	pc,r12=0
#error TODO Add USB address in a list
		return true;
	}
#endif

	uhd_enable_pipe(0);
80007474:	fe 68 00 00 	mov	r8,-131072
80007478:	f0 f9 04 1c 	ld.w	r9,r8[1052]
8000747c:	a1 a9       	sbr	r9,0x0
8000747e:	f1 49 04 1c 	st.w	r8[1052],r9
	uhd_configure_pipe(0, // Pipe 0
80007482:	30 8e       	mov	lr,8
80007484:	fe 69 05 00 	mov	r9,-129792
80007488:	f6 0e 0c 4b 	max	r11,r11,lr
8000748c:	e0 6a 04 00 	mov	r10,1024
80007490:	f6 0a 0d 4a 	min	r10,r11,r10
80007494:	a1 7a       	lsl	r10,0x1
80007496:	20 1a       	sub	r10,1
80007498:	f4 0a 12 00 	clz	r10,r10
8000749c:	f4 0a 11 1c 	rsub	r10,r10,28
800074a0:	a5 6a       	lsl	r10,0x4
800074a2:	93 0a       	st.w	r9[0x0],r10
#else
			ep_size,
#endif
			AVR32_USBB_UECFG0_EPBK_SINGLE, 0);

	uhd_allocate_memory(0);
800074a4:	72 0a       	ld.w	r10,r9[0x0]
800074a6:	a1 ba       	sbr	r10,0x1
800074a8:	93 0a       	st.w	r9[0x0],r10
	if (!Is_uhd_pipe_configured(0)) {
800074aa:	fe 69 05 30 	mov	r9,-129744
800074ae:	72 09       	ld.w	r9,r9[0x0]
800074b0:	e6 19 00 04 	andh	r9,0x4,COH
800074b4:	c0 81       	brne	800074c4 <uhd_ep0_alloc+0x5e>
		uhd_disable_pipe(0);
800074b6:	12 9c       	mov	r12,r9
800074b8:	f0 f9 04 1c 	ld.w	r9,r8[1052]
800074bc:	a1 c9       	cbr	r9,0x0
800074be:	f1 49 04 1c 	st.w	r8[1052],r9
		return false;
800074c2:	d8 02       	popm	pc
	}
	uhd_configure_address(0, add);
800074c4:	fe 6a 04 24 	mov	r10,-130012
800074c8:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800074cc:	74 09       	ld.w	r9,r10[0x0]
800074ce:	e0 19 ff 80 	andl	r9,0xff80
800074d2:	f9 e9 10 09 	or	r9,r12,r9
800074d6:	95 09       	st.w	r10[0x0],r9

	// Always enable stall and error interrupts of control endpoint
	uhd_enable_stall_interrupt(0);
800074d8:	fe 69 05 f0 	mov	r9,-129552
800074dc:	34 0a       	mov	r10,64
800074de:	93 0a       	st.w	r9[0x0],r10
	uhd_enable_pipe_error_interrupt(0);
800074e0:	93 0e       	st.w	r9[0x0],lr
	uhd_enable_pipe_interrupt(0);
800074e2:	30 1c       	mov	r12,1
800074e4:	e0 69 01 00 	mov	r9,256
800074e8:	f1 49 04 18 	st.w	r8[1048],r9
	return true;
}
800074ec:	d8 02       	popm	pc
800074ee:	d7 03       	nop

800074f0 <otg_dual_disable>:
# endif
}


void otg_dual_disable(void)
{
800074f0:	d4 01       	pushm	lr
	if (!otg_initialized) {
800074f2:	e0 6a 08 f0 	mov	r10,2288
800074f6:	30 0b       	mov	r11,0
800074f8:	15 88       	ld.ub	r8,r10[0x0]
800074fa:	f6 08 18 00 	cp.b	r8,r11
		return; // Dual role not initialized
	}
	otg_initialized = false;

	// Do not authorize asynchronous USB interrupts
	AVR32_PM.AWEN.usb_waken = 0;
800074fe:	c1 b0       	breq	80007534 <otg_dual_disable+0x44>
80007500:	fe 78 0c 00 	mov	r8,-62464
80007504:	30 0c       	mov	r12,0
80007506:	f0 f9 01 44 	ld.w	r9,r8[324]
8000750a:	f3 dc d0 01 	bfins	r9,r12,0x0,0x1
8000750e:	f1 49 01 44 	st.w	r8[324],r9
	otg_unfreeze_clock();
80007512:	fe 68 08 00 	mov	r8,-129024
80007516:	70 09       	ld.w	r9,r8[0x0]
80007518:	af c9       	cbr	r9,0xe
# ifdef USB_ID
	otg_disable_id_interrupt();
8000751a:	91 09       	st.w	r8[0x0],r9
8000751c:	70 09       	ld.w	r9,r8[0x0]
8000751e:	a1 c9       	cbr	r9,0x0
# endif
	otg_disable();
80007520:	91 09       	st.w	r8[0x0],r9
80007522:	70 09       	ld.w	r9,r8[0x0]
80007524:	af d9       	cbr	r9,0xf
void otg_dual_disable(void)
{
	if (!otg_initialized) {
		return; // Dual role not initialized
	}
	otg_initialized = false;
80007526:	91 09       	st.w	r8[0x0],r9
	otg_unfreeze_clock();
# ifdef USB_ID
	otg_disable_id_interrupt();
# endif
	otg_disable();
	otg_disable_pad();
80007528:	b4 8b       	st.b	r10[0x0],r11
8000752a:	70 09       	ld.w	r9,r8[0x0]
8000752c:	ad c9       	cbr	r9,0xc
	sysclk_disable_usb();
8000752e:	91 09       	st.w	r8[0x0],r9
80007530:	e0 a0 07 7e 	rcall	8000842c <sysclk_disable_usb>
80007534:	d8 02       	popm	pc
80007536:	d7 03       	nop

80007538 <uhd_disable>:
80007538:	d4 21       	pushm	r4-r7,lr
8000753a:	fe 69 08 04 	mov	r9,-129020
	cpu_irq_restore(flags);
}


void uhd_disable(bool b_id_stop)
{
8000753e:	18 96       	mov	r6,r12
	irqflags_t flags;

	// Check USB clock ready after a potential sleep mode < IDLE
	while (!Is_otg_clock_usable());
80007540:	72 08       	ld.w	r8,r9[0x0]
80007542:	ed b8 00 0e 	bld	r8,0xe
80007546:	cf d1       	brne	80007540 <uhd_disable+0x8>
	otg_unfreeze_clock();
80007548:	fe 67 08 00 	mov	r7,-129024
8000754c:	6e 08       	ld.w	r8,r7[0x0]
8000754e:	af c8       	cbr	r8,0xe
80007550:	8f 08       	st.w	r7[0x0],r8

	// Disable Vbus change and error interrupts
	Clr_bits(AVR32_USBB.usbcon, AVR32_USBB_USBCON_VBUSTE_MASK
80007552:	fe 68 00 00 	mov	r8,-131072
80007556:	f0 f9 08 00 	ld.w	r9,r8[2048]
8000755a:	e0 19 ff f5 	andl	r9,0xfff5
8000755e:	f1 49 08 00 	st.w	r8[2048],r9
			| AVR32_USBB_USBCON_VBERRE_MASK);

	// Disable main control interrupt
	// (Connection, disconnection, SOF and reset)
	AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_DCONNIEC_MASK
80007562:	37 f9       	mov	r9,127
80007564:	f1 49 04 14 	st.w	r8[1044],r9
			| AVR32_USBB_UHINTECLR_HSOFIEC_MASK
			| AVR32_USBB_UHINTECLR_RSTIEC_MASK
			| AVR32_USBB_UHINTECLR_HWUPIEC_MASK
			| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
			| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
	uhd_disable_sof();
80007568:	fe 69 04 00 	mov	r9,-130048
8000756c:	72 08       	ld.w	r8,r9[0x0]
8000756e:	a9 c8       	cbr	r8,0x8
80007570:	93 08       	st.w	r9[0x0],r8
	uhd_disable_vbus();
80007572:	fe 68 08 08 	mov	r8,-129016
80007576:	e0 69 02 00 	mov	r9,512
	uhc_notify_connection(false);
8000757a:	30 0c       	mov	r12,0
			| AVR32_USBB_UHINTECLR_RSTIEC_MASK
			| AVR32_USBB_UHINTECLR_HWUPIEC_MASK
			| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
			| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
	uhd_disable_sof();
	uhd_disable_vbus();
8000757c:	91 09       	st.w	r8[0x0],r9
	uhc_notify_connection(false);
8000757e:	e0 a0 06 f3 	rcall	80008364 <uhc_notify_connection>
	otg_freeze_clock();
80007582:	6e 08       	ld.w	r8,r7[0x0]
80007584:	af a8       	sbr	r8,0xe
80007586:	8f 08       	st.w	r7[0x0],r8

#ifdef USB_ID
	uhd_sleep_mode(UHD_STATE_WAIT_ID_HOST);
	if (!b_id_stop) {
80007588:	58 06       	cp.w	r6,0
8000758a:	c0 90       	breq	8000759c <uhd_disable+0x64>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000758c:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
80007590:	d3 03       	ssrf	0x10
		return; // No need to disable host, it is done automatically by hardware
	}
#endif

	flags = cpu_irq_save();
	otg_dual_disable();
80007592:	ca ff       	rcall	800074f0 <otg_dual_disable>
80007594:	e6 17 00 01 	andh	r7,0x1,COH
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80007598:	c0 21       	brne	8000759c <uhd_disable+0x64>
8000759a:	d5 03       	csrf	0x10
      cpu_irq_enable();
8000759c:	d8 22       	popm	r4-r7,pc
   }

	barrier();
8000759e:	d7 03       	nop

800075a0 <otg_dual_enable>:
800075a0:	d4 21       	pushm	r4-r7,lr
800075a2:	e0 68 08 f0 	mov	r8,2288
800075a6:	30 09       	mov	r9,0
	otg_data_memory_barrier();
}

bool otg_dual_enable(void)
{
	if (otg_initialized) {
800075a8:	11 8a       	ld.ub	r10,r8[0x0]
800075aa:	f2 0a 18 00 	cp.b	r10,r9
800075ae:	c0 20       	breq	800075b2 <otg_dual_enable+0x12>
		return false; // Dual role already initialized
	}
	otg_initialized = true;
800075b0:	d8 2a       	popm	r4-r7,pc,r12=0
800075b2:	30 19       	mov	r9,1

	//* Enable USB hardware clock
	sysclk_enable_usb();
800075b4:	b0 89       	st.b	r8[0x0],r9
800075b6:	e0 a0 07 d3 	rcall	8000855c <sysclk_enable_usb>

	//* Link USB interrupt on OTG interrupt in dual role
	irq_register_handler(otg_interrupt, AVR32_USBB_IRQ, UHD_USB_INT_LEVEL);
800075ba:	30 0a       	mov	r10,0
800075bc:	e0 6b 02 20 	mov	r11,544
800075c0:	fe cc fe c8 	sub	r12,pc,-312
 *  AVR32_PM_AWEN_xxxxWEN_MASK in the part-specific header file under
 *  "toolchain folder"/avr32/inc(lude)/avr32/)
 */
__always_inline static void pm_asyn_wake_up_enable(unsigned long awen_mask)
{
  AVR32_PM.awen |= awen_mask;
800075c4:	fe b0 f7 e4 	rcall	8000658c <INTC_register_interrupt>
800075c8:	fe 79 0c 00 	mov	r9,-62464
800075cc:	f2 f8 01 44 	ld.w	r8,r9[324]
800075d0:	a1 a8       	sbr	r8,0x0
	pm_asyn_wake_up_enable(AVR32_PM_AWEN_USB_WAKEN_MASK);

# ifdef USB_ID
	// By default USBB is already configured with ID pin enable
	// The USBB must be enabled to provide interrupt
	otg_input_id_pin();
800075d2:	f3 48 01 44 	st.w	r9[324],r8
800075d6:	fe 78 10 00 	mov	r8,-61440
800075da:	30 09       	mov	r9,0
800075dc:	ea 19 04 00 	orh	r9,0x400
800075e0:	91 69       	st.w	r8[0x18],r9
800075e2:	91 a9       	st.w	r8[0x28],r9
800075e4:	91 29       	st.w	r8[0x8],r9
	otg_unfreeze_clock();
800075e6:	f1 49 00 74 	st.w	r8[116],r9
800075ea:	fe 68 08 00 	mov	r8,-129024
800075ee:	70 09       	ld.w	r9,r8[0x0]
	otg_enable();
800075f0:	af c9       	cbr	r9,0xe
800075f2:	91 09       	st.w	r8[0x0],r9
800075f4:	70 09       	ld.w	r9,r8[0x0]
	otg_enable_id_interrupt();
800075f6:	af b9       	sbr	r9,0xf
800075f8:	91 09       	st.w	r8[0x0],r9
800075fa:	70 09       	ld.w	r9,r8[0x0]
	otg_ack_id_transition();
800075fc:	a1 a9       	sbr	r9,0x0
800075fe:	91 09       	st.w	r8[0x0],r9
80007600:	30 17       	mov	r7,1
80007602:	fe 69 08 08 	mov	r9,-129016
	otg_freeze_clock();
80007606:	93 07       	st.w	r9[0x0],r7
80007608:	70 09       	ld.w	r9,r8[0x0]
	if (Is_otg_id_device()) {
8000760a:	af a9       	sbr	r9,0xe
8000760c:	91 09       	st.w	r8[0x0],r9
8000760e:	fe 68 08 04 	mov	r8,-129020
80007612:	70 08       	ld.w	r8,r8[0x0]
80007614:	ed b8 00 0a 	bld	r8,0xa
		uhd_sleep_mode(UHD_STATE_WAIT_ID_HOST);
		UHC_MODE_CHANGE(false);
80007618:	c0 61       	brne	80007624 <otg_dual_enable+0x84>
8000761a:	30 0c       	mov	r12,0
8000761c:	fe b0 f2 fe 	rcall	80005c18 <usb_mode_change>
		udc_start();
	} else {
		UHC_MODE_CHANGE(true);
80007620:	0e 9c       	mov	r12,r7
80007622:	d8 22       	popm	r4-r7,pc
80007624:	0e 9c       	mov	r12,r7
		uhc_start();
80007626:	fe b0 f2 f9 	rcall	80005c18 <usb_mode_change>
8000762a:	e0 a0 04 77 	rcall	80007f18 <uhc_start>
	return true;  // ID pin management has been enabled
# else
	uhd_sleep_mode(UHD_STATE_OFF);
	return false; // ID pin management has not been enabled
# endif
}
8000762e:	0e 9c       	mov	r12,r7
80007630:	d8 22       	popm	r4-r7,pc
80007632:	d7 03       	nop

80007634 <uhd_enable>:
80007634:	d4 21       	pushm	r4-r7,lr
80007636:	e1 b7 00 00 	mfsr	r7,0x0
8000763a:	d3 03       	ssrf	0x10
8000763c:	cb 2f       	rcall	800075a0 <otg_dual_enable>
8000763e:	c5 71       	brne	800076ec <uhd_enable+0xb8>
80007640:	fe 6b 08 04 	mov	r11,-129020
80007644:	76 09       	ld.w	r9,r11[0x0]
80007646:	e2 19 04 00 	andl	r9,0x400,COH
		return;
	}

#ifdef USB_ID
	// Check that the host mode is selected by ID pin
	if (!Is_otg_id_host()) {
8000764a:	c5 11       	brne	800076ec <uhd_enable+0xb8>
8000764c:	fe 78 10 00 	mov	r8,-61440
	otg_force_host_mode();
#endif

	// Enable USB hardware
#ifdef USB_VBOF
	uhd_output_vbof_pin();
80007650:	30 0a       	mov	r10,0
80007652:	ea 1a 08 00 	orh	r10,0x800
80007656:	91 6a       	st.w	r8[0x18],r10
80007658:	91 aa       	st.w	r8[0x28],r10
8000765a:	91 2a       	st.w	r8[0x8],r10
8000765c:	f1 4a 00 88 	st.w	r8[136],r10
80007660:	f1 4a 00 78 	st.w	r8[120],r10
80007664:	fe 68 08 00 	mov	r8,-129024
# if USB_VBOF_ACTIVE_LEVEL == HIGH
	uhd_set_vbof_active_high();
# else // USB_VBOF_ACTIVE_LEVEL == LOW
	uhd_set_vbof_active_low();
80007668:	70 0a       	ld.w	r10,r8[0x0]
8000766a:	ad ba       	sbr	r10,0xd
8000766c:	91 0a       	st.w	r8[0x0],r10
8000766e:	70 0a       	ld.w	r10,r8[0x0]
# endif
#endif
	otg_enable_pad();
80007670:	ad aa       	sbr	r10,0xc
80007672:	91 0a       	st.w	r8[0x0],r10
80007674:	70 0a       	ld.w	r10,r8[0x0]
	otg_enable();
80007676:	af ba       	sbr	r10,0xf
80007678:	91 0a       	st.w	r8[0x0],r10
8000767a:	e0 6a 1c b4 	mov	r10,7348

	uhd_ctrl_request_first = NULL;
	uhd_ctrl_request_last = NULL;
	uhd_ctrl_request_timeout = 0;
8000767e:	b4 09       	st.h	r10[0x0],r9
	uhd_suspend_start = 0;
	uhd_resume_start = 0;
	uhd_b_suspend_requested = false;

	otg_unfreeze_clock();
80007680:	70 0a       	ld.w	r10,r8[0x0]
80007682:	af ca       	cbr	r10,0xe
80007684:	91 0a       	st.w	r8[0x0],r10
	uhd_disable_high_speed_mode();
#  endif
#endif

	// Clear all interrupts that may have been set by a previous host mode
	AVR32_USBB.uhintclr = AVR32_USBB_UHINTCLR_DCONNIC_MASK
80007686:	37 fa       	mov	r10,127
80007688:	fe 68 00 00 	mov	r8,-131072
8000768c:	f1 4a 04 08 	st.w	r8[1032],r10
			| AVR32_USBB_UHINTCLR_DDISCIC_MASK | AVR32_USBB_UHINTCLR_HSOFIC_MASK
			| AVR32_USBB_UHINTCLR_HWUPIC_MASK | AVR32_USBB_UHINTCLR_RSMEDIC_MASK
			| AVR32_USBB_UHINTCLR_RSTIC_MASK | AVR32_USBB_UHINTCLR_RXRSMIC_MASK;
	otg_ack_vbus_transition();
80007690:	fe 6a 08 08 	mov	r10,-129016
80007694:	30 2c       	mov	r12,2
80007696:	95 0c       	st.w	r10[0x0],r12

	// Enable Vbus change and error interrupts
	// Disable automatic Vbus control after Vbus error
	Set_bits(AVR32_USBB.usbcon, AVR32_USBB_USBCON_VBUSHWC_MASK
80007698:	f0 fa 08 00 	ld.w	r10,r8[2048]
8000769c:	e8 1a 01 0a 	orl	r10,0x10a
800076a0:	f1 4a 08 00 	st.w	r8[2048],r10
# endif
#endif
	otg_enable_pad();
	otg_enable();

	uhd_ctrl_request_first = NULL;
800076a4:	e0 6a 1c a8 	mov	r10,7336
800076a8:	12 98       	mov	r8,r9
	uhd_ctrl_request_last = NULL;
800076aa:	95 09       	st.w	r10[0x0],r9
800076ac:	e0 6a 1c b0 	mov	r10,7344
	uhd_ctrl_request_timeout = 0;
	uhd_suspend_start = 0;
800076b0:	95 09       	st.w	r10[0x0],r9
	uhd_resume_start = 0;
800076b2:	e0 69 09 70 	mov	r9,2416
	uhd_b_suspend_requested = false;
800076b6:	b2 88       	st.b	r9[0x0],r8
800076b8:	e0 69 09 72 	mov	r9,2418
	// Enable Vbus change and error interrupts
	// Disable automatic Vbus control after Vbus error
	Set_bits(AVR32_USBB.usbcon, AVR32_USBB_USBCON_VBUSHWC_MASK
			|AVR32_USBB_USBCON_VBUSTE_MASK
			|AVR32_USBB_USBCON_VBERRE_MASK);
	uhd_enable_vbus();
800076bc:	b2 88       	st.b	r9[0x0],r8
800076be:	e0 69 09 73 	mov	r9,2419
800076c2:	b2 88       	st.b	r9[0x0],r8

	// Force Vbus interrupt when Vbus is always high
	// This is possible due to a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
800076c4:	e0 68 02 00 	mov	r8,512
800076c8:	fe 69 08 0c 	mov	r9,-129012
		otg_raise_vbus_transition();
800076cc:	93 08       	st.w	r9[0x0],r8
	}

	// Enable main control interrupt
	// Connection, SOF and reset
	AVR32_USBB.uhinteset = AVR32_USBB_UHINTESET_DCONNIES_MASK
800076ce:	76 08       	ld.w	r8,r11[0x0]
800076d0:	ed b8 00 0b 	bld	r8,0xb
800076d4:	c0 21       	brne	800076d8 <uhd_enable+0xa4>
800076d6:	93 0c       	st.w	r9[0x0],r12
			| AVR32_USBB_UHINTESET_HSOFIES_MASK
			| AVR32_USBB_UHINTESET_RSTIES_MASK;

	otg_freeze_clock();
800076d8:	32 59       	mov	r9,37
800076da:	fe 68 00 00 	mov	r8,-131072
800076de:	f1 49 04 18 	st.w	r8[1048],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800076e2:	fe 69 08 00 	mov	r9,-129024
800076e6:	72 08       	ld.w	r8,r9[0x0]
      cpu_irq_enable();
800076e8:	af a8       	sbr	r8,0xe
   }

	barrier();
800076ea:	93 08       	st.w	r9[0x0],r8
800076ec:	e6 17 00 01 	andh	r7,0x1,COH
800076f0:	c0 21       	brne	800076f4 <uhd_enable+0xc0>
800076f2:	d5 03       	csrf	0x10
800076f4:	d8 22       	popm	r4-r7,pc
800076f6:	d7 03       	nop

800076f8 <otg_interrupt>:
800076f8:	d4 31       	pushm	r0-r7,lr
800076fa:	fe 68 08 04 	mov	r8,-129020
800076fe:	70 09       	ld.w	r9,r8[0x0]
80007700:	ed b9 00 00 	bld	r9,0x0
80007704:	c2 51       	brne	8000774e <otg_interrupt+0x56>
80007706:	70 09       	ld.w	r9,r8[0x0]
{
	bool b_mode_device;

#ifdef USB_ID
	if (Is_otg_id_transition()) {
		while (!Is_otg_clock_usable());
80007708:	ed b9 00 0e 	bld	r9,0xe
8000770c:	cf d1       	brne	80007706 <otg_interrupt+0xe>
		otg_unfreeze_clock();
8000770e:	fe 68 08 00 	mov	r8,-129024
80007712:	70 09       	ld.w	r9,r8[0x0]
80007714:	af c9       	cbr	r9,0xe
80007716:	91 09       	st.w	r8[0x0],r9
		otg_ack_id_transition();
80007718:	30 1c       	mov	r12,1
8000771a:	fe 69 08 08 	mov	r9,-129016
8000771e:	93 0c       	st.w	r9[0x0],r12
		otg_freeze_clock();
80007720:	70 09       	ld.w	r9,r8[0x0]
80007722:	af a9       	sbr	r9,0xe
80007724:	91 09       	st.w	r8[0x0],r9
		if (Is_otg_id_device()) {
80007726:	fe 68 08 04 	mov	r8,-129020
8000772a:	70 08       	ld.w	r8,r8[0x0]
8000772c:	ed b8 00 0a 	bld	r8,0xa
80007730:	c0 91       	brne	80007742 <otg_interrupt+0x4a>
			uhc_stop(false);
80007732:	30 0c       	mov	r12,0
80007734:	e0 a0 03 ee 	rcall	80007f10 <uhc_stop>
			UHC_MODE_CHANGE(false);
80007738:	30 0c       	mov	r12,0
8000773a:	fe b0 f2 6f 	rcall	80005c18 <usb_mode_change>
8000773e:	e0 8f 03 2e 	bral	80007d9a <otg_interrupt+0x6a2>
			udc_start();
		} else {
			udc_stop();
			UHC_MODE_CHANGE(true);
80007742:	fe b0 f2 6b 	rcall	80005c18 <usb_mode_change>
			uhc_start();
80007746:	e0 a0 03 e9 	rcall	80007f18 <uhc_start>
8000774a:	e0 8f 03 28 	bral	80007d9a <otg_interrupt+0x6a2>
		}
		return;
	}
	b_mode_device = Is_otg_id_device();
8000774e:	70 08       	ld.w	r8,r8[0x0]
#else
	b_mode_device = Is_otg_device_mode_forced();
#endif

	// Redirection to host or device interrupt
	if (b_mode_device) {
80007750:	ed b8 00 0a 	bld	r8,0xa
80007754:	e0 80 03 1f 	breq	80007d92 <otg_interrupt+0x69a>
static void uhd_interrupt(void)
{
	uint8_t pipe_int;

	// Manage SOF interrupt
	if (Is_uhd_sof()) {
80007758:	fe 6a 04 04 	mov	r10,-130044
8000775c:	74 08       	ld.w	r8,r10[0x0]
8000775e:	ed b8 00 05 	bld	r8,0x5
80007762:	e0 81 00 83 	brne	80007868 <otg_interrupt+0x170>
		uhd_ack_sof();
80007766:	32 09       	mov	r9,32
80007768:	fe 68 04 08 	mov	r8,-130040
8000776c:	91 09       	st.w	r8[0x0],r9
			return;
		}
	}

	// Manage a delay to enter in suspend
	if (uhd_suspend_start) {
8000776e:	e0 69 09 70 	mov	r9,2416
80007772:	13 88       	ld.ub	r8,r9[0x0]
80007774:	58 08       	cp.w	r8,0
		if (--uhd_suspend_start == 0) {
80007776:	c2 80       	breq	800077c6 <otg_interrupt+0xce>
80007778:	20 18       	sub	r8,1
8000777a:	5c 58       	castu.b	r8
8000777c:	b2 88       	st.b	r9[0x0],r8
8000777e:	c0 80       	breq	8000778e <otg_interrupt+0x96>
80007780:	e0 8f 03 09 	bral	80007d92 <otg_interrupt+0x69a>
#ifdef AVR32_USBB_USBSTA_SPEED_HIGH // If UTMI
			while (115<uhd_get_frame_position()) {
#else
			while (185<uhd_get_frame_position()) {
#endif
				if (Is_uhd_disconnection()) {
80007784:	74 08       	ld.w	r8,r10[0x0]
80007786:	ed b8 00 01 	bld	r8,0x1
8000778a:	c0 41       	brne	80007792 <otg_interrupt+0x9a>
			// then wait end of SOF generation
			// to be sure that disable SOF has been accepted
#ifdef AVR32_USBB_USBSTA_SPEED_HIGH // If UTMI
			while (115<uhd_get_frame_position()) {
#else
			while (185<uhd_get_frame_position()) {
8000778c:	c0 a8       	rjmp	800077a0 <otg_interrupt+0xa8>
8000778e:	fe 69 04 20 	mov	r9,-130016
80007792:	72 08       	ld.w	r8,r9[0x0]
80007794:	f1 d8 c2 08 	bfextu	r8,r8,0x10,0x8
80007798:	e0 48 00 b9 	cp.w	r8,185
8000779c:	fe 9b ff f4 	brhi	80007784 <otg_interrupt+0x8c>
#endif
				if (Is_uhd_disconnection()) {
					break;
				}
			}
			uhd_disable_sof();
800077a0:	fe 69 04 00 	mov	r9,-130048
800077a4:	72 08       	ld.w	r8,r9[0x0]
800077a6:	a9 c8       	cbr	r8,0x8

			// Ack previous wakeup and resumes interrupts
			AVR32_USBB.uhintclr = AVR32_USBB_UHINTCLR_HWUPIC_MASK
800077a8:	93 08       	st.w	r9[0x0],r8
800077aa:	fe 68 00 00 	mov	r8,-131072
800077ae:	35 89       	mov	r9,88
800077b0:	f1 49 04 08 	st.w	r8[1032],r9
					|AVR32_USBB_UHINTCLR_RSMEDIC_MASK
					|AVR32_USBB_UHINTCLR_RXRSMIC_MASK;

			// Enable wakeup/resumes interrupts
			AVR32_USBB.uhinteset = AVR32_USBB_UHINTESET_HWUPIES_MASK
800077b4:	f1 49 04 18 	st.w	r8[1048],r9
					|AVR32_USBB_UHINTESET_RSMEDIES_MASK
					|AVR32_USBB_UHINTESET_RXRSMIES_MASK;

			otg_freeze_clock();
800077b8:	fe 69 08 00 	mov	r9,-129024
800077bc:	72 08       	ld.w	r8,r9[0x0]
800077be:	af a8       	sbr	r8,0xe
800077c0:	93 08       	st.w	r9[0x0],r8
800077c2:	e0 8f 02 e8 	bral	80007d92 <otg_interrupt+0x69a>
			uhd_sleep_mode(UHD_STATE_SUSPEND);
		}
		return; // Abort SOF events
	}
	// Manage a delay to exit of suspend
	if (uhd_resume_start) {
800077c6:	e0 69 09 72 	mov	r9,2418
800077ca:	13 88       	ld.ub	r8,r9[0x0]
		if (--uhd_resume_start == 0) {
800077cc:	58 08       	cp.w	r8,0
800077ce:	c1 b0       	breq	80007804 <otg_interrupt+0x10c>
800077d0:	20 18       	sub	r8,1
800077d2:	5c 58       	castu.b	r8
800077d4:	b2 88       	st.b	r9[0x0],r8
800077d6:	e0 81 02 de 	brne	80007d92 <otg_interrupt+0x69a>
			// Restore pipes unfreezed
			for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
800077da:	fe 69 06 24 	mov	r9,-129500
					uhd_unfreeze_pipe(pipe);
800077de:	e0 6b 09 71 	mov	r11,2417
	// Manage a delay to exit of suspend
	if (uhd_resume_start) {
		if (--uhd_resume_start == 0) {
			// Restore pipes unfreezed
			for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
800077e2:	e2 6a 00 00 	mov	r10,131072
800077e6:	2f f8       	sub	r8,-1
800077e8:	17 8c       	ld.ub	r12,r11[0x0]
800077ea:	f8 08 08 4c 	asr	r12,r12,r8
					uhd_unfreeze_pipe(pipe);
800077ee:	ed bc 00 00 	bld	r12,0x0
	}
	// Manage a delay to exit of suspend
	if (uhd_resume_start) {
		if (--uhd_resume_start == 0) {
			// Restore pipes unfreezed
			for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
800077f2:	c0 21       	brne	800077f6 <otg_interrupt+0xfe>
800077f4:	93 0a       	st.w	r9[0x0],r10
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
					uhd_unfreeze_pipe(pipe);
				}
			}
			uhc_notify_resume();
800077f6:	2f c9       	sub	r9,-4
800077f8:	58 68       	cp.w	r8,6
800077fa:	cf 61       	brne	800077e6 <otg_interrupt+0xee>
800077fc:	e0 a0 03 9c 	rcall	80007f34 <uhc_notify_resume>
		}
		return; // Abort SOF events
	}
	// Manage the timeout on endpoint control transfer
	if (uhd_ctrl_request_timeout) {
80007800:	e0 8f 02 c9 	bral	80007d92 <otg_interrupt+0x69a>
80007804:	e0 68 1c b4 	mov	r8,7348
		// Setup request on-going
		if (--uhd_ctrl_request_timeout == 0) {
80007808:	90 09       	ld.sh	r9,r8[0x0]
8000780a:	58 09       	cp.w	r9,0
8000780c:	c0 f0       	breq	8000782a <otg_interrupt+0x132>
8000780e:	90 09       	ld.sh	r9,r8[0x0]
80007810:	20 19       	sub	r9,1
			// Stop request
			uhd_freeze_pipe(0);
80007812:	b0 09       	st.h	r8[0x0],r9
80007814:	90 08       	ld.sh	r8,r8[0x0]
80007816:	58 08       	cp.w	r8,0
80007818:	c0 91       	brne	8000782a <otg_interrupt+0x132>
			uhd_ctrl_request_end(UHD_TRANS_TIMEOUT);
8000781a:	e2 69 00 00 	mov	r9,131072
8000781e:	fe 68 05 f0 	mov	r8,-129552
80007822:	30 7c       	mov	r12,7
80007824:	91 09       	st.w	r8[0x0],r9
	}
	// Manage the timeouts on endpoint transfer
	uhd_pipe_job_t *ptr_job;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		ptr_job = &uhd_pipe_job[pipe-1];
		if (ptr_job->busy == true) {
80007826:	fe b0 fc 4f 	rcall	800070c4 <uhd_ctrl_request_end>
8000782a:	e0 67 08 f8 	mov	r7,2296
			if (ptr_job->timeout) {
				// Timeout enabled on this job
				if (--ptr_job->timeout == 0) {
8000782e:	30 06       	mov	r6,0
80007830:	6e 08       	ld.w	r8,r7[0x0]
80007832:	58 08       	cp.w	r8,0
	// Manage the timeouts on endpoint transfer
	uhd_pipe_job_t *ptr_job;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		ptr_job = &uhd_pipe_job[pipe-1];
		if (ptr_job->busy == true) {
			if (ptr_job->timeout) {
80007834:	c0 f4       	brge	80007852 <otg_interrupt+0x15a>
80007836:	8e 19       	ld.sh	r9,r7[0x2]
				// Timeout enabled on this job
				if (--ptr_job->timeout == 0) {
80007838:	f2 c8 00 01 	sub	r8,r9,1
8000783c:	5c 88       	casts.h	r8
					// Abort job
					uhd_ep_abort_pipe(pipe,UHD_TRANS_TIMEOUT);
8000783e:	58 09       	cp.w	r9,0
80007840:	c0 90       	breq	80007852 <otg_interrupt+0x15a>
80007842:	ae 18       	st.h	r7[0x2],r8
80007844:	58 08       	cp.w	r8,0
80007846:	c0 61       	brne	80007852 <otg_interrupt+0x15a>
80007848:	ec cc ff ff 	sub	r12,r6,-1
			uhd_ctrl_request_end(UHD_TRANS_TIMEOUT);
		}
	}
	// Manage the timeouts on endpoint transfer
	uhd_pipe_job_t *ptr_job;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
8000784c:	30 7b       	mov	r11,7
8000784e:	fe b0 fa fd 	rcall	80006e48 <uhd_ep_abort_pipe>
				}
			}
		}
	}
	// Notify the UHC
	uhc_notify_sof(false);
80007852:	2f f6       	sub	r6,-1
80007854:	2e c7       	sub	r7,-20

	// Notify the user application
	UHC_SOF_EVENT();
80007856:	58 66       	cp.w	r6,6
80007858:	ce c1       	brne	80007830 <otg_interrupt+0x138>
8000785a:	30 0c       	mov	r12,0
8000785c:	e0 a0 03 1c 	rcall	80007e94 <uhc_notify_sof>
80007860:	fe b0 f1 e1 	rcall	80005c22 <usb_sof>
80007864:	e0 8f 02 97 	bral	80007d92 <otg_interrupt+0x69a>
80007868:	fe 69 00 00 	mov	r9,-131072
8000786c:	f2 fc 04 04 	ld.w	r12,r9[1028]
80007870:	f2 f8 04 10 	ld.w	r8,r9[1040]
80007874:	a9 8c       	lsr	r12,0x8
80007876:	f9 e8 02 8c 	and	r12,r12,r8>>0x8
8000787a:	a7 bc       	sbr	r12,0x7
8000787c:	5c 9c       	brev	r12
8000787e:	f8 0c 12 00 	clz	r12,r12
80007882:	e0 81 01 1d 	brne	80007abc <otg_interrupt+0x3c4>
80007886:	30 78       	mov	r8,7
80007888:	f3 48 06 20 	st.w	r9[1568],r8
8000788c:	fe 68 05 30 	mov	r8,-129744
80007890:	70 09       	ld.w	r9,r8[0x0]
80007892:	ed b9 00 02 	bld	r9,0x2
		uhd_sof_interrupt();
		return;
	}

	// Manage pipe interrupts
	pipe_int = uhd_get_interrupt_pipe_number();
80007896:	c4 71       	brne	80007924 <otg_interrupt+0x22c>
80007898:	fe 6b 05 f0 	mov	r11,-129552
8000789c:	e2 6a 00 00 	mov	r10,131072
800078a0:	97 0a       	st.w	r11[0x0],r10
800078a2:	30 49       	mov	r9,4
800078a4:	fe 68 05 60 	mov	r8,-129696
800078a8:	91 09       	st.w	r8[0x0],r9
800078aa:	18 9e       	mov	lr,r12
800078ac:	e0 69 1c a8 	mov	r9,7336
	if (pipe_int == 0) {
800078b0:	72 09       	ld.w	r9,r9[0x0]
{
	// A setup request is on-going
	Assert(uhd_ctrl_request_timeout!=0);

	// Disable setup, IN and OUT interrupts of control endpoint
	AVR32_USBB.upcon0clr = AVR32_USBB_UPCON0CLR_TXSTPEC_MASK
800078b2:	13 97       	ld.ub	r7,r9[0x1]
800078b4:	f8 07 18 00 	cp.b	r7,r12
			| AVR32_USBB_UPCON0CLR_RXINEC_MASK
			| AVR32_USBB_UPCON0CLR_TXOUTEC_MASK;

	// Search event on control endpoint
	if (Is_uhd_setup_ready(0)) {
800078b8:	c1 64       	brge	800078e4 <otg_interrupt+0x1ec>
800078ba:	fe 6c 05 00 	mov	r12,-129792
800078be:	78 09       	ld.w	r9,r12[0x0]
800078c0:	e0 19 fc ff 	andl	r9,0xfcff
		// SETUP packet sent
		uhd_freeze_pipe(0);
800078c4:	a9 a9       	sbr	r9,0x8
800078c6:	99 09       	st.w	r12[0x0],r9
800078c8:	30 19       	mov	r9,1
800078ca:	91 09       	st.w	r8[0x0],r9
800078cc:	e0 6c 00 80 	mov	r12,128
		uhd_ack_setup_ready(0);
800078d0:	91 0c       	st.w	r8[0x0],r12
800078d2:	97 09       	st.w	r11[0x0],r9
800078d4:	fe 68 06 20 	mov	r8,-129504
		Assert(uhd_ctrl_request_phase == UHD_CTRL_REQ_PHASE_SETUP);

		// Start DATA phase
		if ((uhd_ctrl_request_first->req.bmRequestType & USB_REQ_DIR_MASK)
800078d8:	e0 69 40 00 	mov	r9,16384
800078dc:	91 09       	st.w	r8[0x0],r9
800078de:	91 0a       	st.w	r8[0x0],r10
800078e0:	30 29       	mov	r9,2
800078e2:	c1 e8       	rjmp	8000791e <otg_interrupt+0x226>
 * \brief Starts the DATA IN phase on control endpoint
 */
static void uhd_ctrl_phase_data_in_start(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_IN;
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_IN);
800078e4:	f3 3e 00 08 	ld.ub	lr,r9[8]
800078e8:	13 f9       	ld.ub	r9,r9[0x7]
800078ea:	fd e9 10 89 	or	r9,lr,r9<<0x8
800078ee:	f8 09 19 00 	cp.h	r9,r12
	uhd_ack_in_received(0);
800078f2:	e0 81 00 bf 	brne	80007a70 <otg_interrupt+0x378>
	uhd_ack_short_packet(0);
800078f6:	fe 6c 05 00 	mov	r12,-129792
800078fa:	78 09       	ld.w	r9,r12[0x0]
	uhd_enable_in_received_interrupt(0);
800078fc:	e0 19 fc ff 	andl	r9,0xfcff
	uhd_ack_fifocon(0);
80007900:	a9 a9       	sbr	r9,0x8
80007902:	99 09       	st.w	r12[0x0],r9
80007904:	30 19       	mov	r9,1
80007906:	91 09       	st.w	r8[0x0],r9
	uhd_unfreeze_pipe(0);
80007908:	e0 6c 00 80 	mov	r12,128
 * \internal
 * \brief Starts the DATA IN phase on control endpoint
 */
static void uhd_ctrl_phase_data_in_start(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_IN;
8000790c:	91 0c       	st.w	r8[0x0],r12
		// Start DATA phase
		if ((uhd_ctrl_request_first->req.bmRequestType & USB_REQ_DIR_MASK)
				== USB_REQ_DIR_IN ) {
			uhd_ctrl_phase_data_in_start();
		} else {
			if (uhd_ctrl_request_first->req.wLength) {
8000790e:	97 09       	st.w	r11[0x0],r9
80007910:	fe 68 06 20 	mov	r8,-129504
80007914:	e0 69 40 00 	mov	r9,16384
80007918:	91 09       	st.w	r8[0x0],r9
8000791a:	91 0a       	st.w	r8[0x0],r10
8000791c:	30 39       	mov	r9,3
8000791e:	e0 68 1c a4 	mov	r8,7332
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_IN);
80007922:	c6 c9       	rjmp	80007bfa <otg_interrupt+0x502>
80007924:	70 0c       	ld.w	r12,r8[0x0]
80007926:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
8000792a:	e0 80 00 8d 	breq	80007a44 <otg_interrupt+0x34c>
	uhd_ack_in_received(0);
8000792e:	fe 69 05 c0 	mov	r9,-129600
	uhd_ack_short_packet(0);
80007932:	72 08       	ld.w	r8,r9[0x0]
80007934:	ed b8 00 11 	bld	r8,0x11
	uhd_enable_in_received_interrupt(0);
80007938:	cf d1       	brne	80007932 <otg_interrupt+0x23a>
	uhd_ack_fifocon(0);
8000793a:	fe 68 05 60 	mov	r8,-129696
8000793e:	30 19       	mov	r9,1
80007940:	91 09       	st.w	r8[0x0],r9
80007942:	e0 68 1c a4 	mov	r8,7332
 * \internal
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
80007946:	70 08       	ld.w	r8,r8[0x0]
80007948:	58 28       	cp.w	r8,2
8000794a:	c0 50       	breq	80007954 <otg_interrupt+0x25c>
				uhd_ctrl_phase_zlp_in();
			}
		}
		return;
	}
	if (Is_uhd_in_received(0)) {
8000794c:	58 38       	cp.w	r8,3
8000794e:	e0 81 02 22 	brne	80007d92 <otg_interrupt+0x69a>
80007952:	c7 78       	rjmp	80007a40 <otg_interrupt+0x348>
80007954:	fe 68 05 30 	mov	r8,-129744
		// In case of low USB speed and with a high CPU frequency,
		// a ACK from host can be always running on USB line
		// then wait end of ACK on IN pipe.
		while(!Is_uhd_pipe_frozen(0));
80007958:	30 02       	mov	r2,0
8000795a:	ea 12 d0 00 	orh	r2,0xd000
8000795e:	70 06       	ld.w	r6,r8[0x0]
80007960:	e0 63 1c a8 	mov	r3,7336

		// IN packet received
		uhd_ack_in_received(0);
80007964:	70 00       	ld.w	r0,r8[0x0]
80007966:	ed d6 c2 88 	bfextu	r6,r6,0x14,0x8
		switch(uhd_ctrl_request_phase) {
8000796a:	30 07       	mov	r7,0
8000796c:	30 04       	mov	r4,0
8000796e:	e0 65 1c ac 	mov	r5,7340
80007972:	fe 61 04 24 	mov	r1,-130012
80007976:	c1 08       	rjmp	80007996 <otg_interrupt+0x29e>
80007978:	05 39       	ld.ub	r9,r2++
	bool b_short_packet;
	uint8_t *ptr_ep_data;
	uint8_t nb_byte_received;

	// Get information to read data
	nb_byte_received = uhd_byte_count(0);
8000797a:	74 38       	ld.w	r8,r10[0xc]
8000797c:	10 c9       	st.b	r8++,r9
	//! In HUB mode, the control pipe is always configured to 64B
	//! thus the short packet flag must be computed
	b_short_packet = (nb_byte_received != uhd_get_pipe_size(0));
	uhd_ack_short_packet(0);
#else
	b_short_packet = Is_uhd_short_packet(0);
8000797e:	95 38       	st.w	r10[0xc],r8
80007980:	8a 08       	ld.sh	r8,r5[0x0]
80007982:	2f f8       	sub	r8,-1
	bool b_short_packet;
	uint8_t *ptr_ep_data;
	uint8_t nb_byte_received;

	// Get information to read data
	nb_byte_received = uhd_byte_count(0);
80007984:	aa 08       	st.h	r5[0x0],r8
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
80007986:	ed de c0 08 	bfextu	r6,lr,0x0,0x8
	bool b_short_packet;
	uint8_t *ptr_ep_data;
	uint8_t nb_byte_received;

	// Get information to read data
	nb_byte_received = uhd_byte_count(0);
8000798a:	66 08       	ld.w	r8,r3[0x0]
8000798c:	f1 09 00 10 	ld.sh	r9,r8[16]
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
80007990:	20 19       	sub	r9,1
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
		uhd_ctrl_nb_trans++;
80007992:	f1 59 00 10 	st.h	r8[16],r9

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
80007996:	66 0a       	ld.w	r10,r3[0x0]
80007998:	ee 06 18 00 	cp.b	r6,r7

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
8000799c:	5f 18       	srne	r8
8000799e:	f5 09 00 10 	ld.sh	r9,r10[16]
		uhd_ctrl_nb_trans++;
800079a2:	ec ce 00 01 	sub	lr,r6,1
800079a6:	e8 09 19 00 	cp.h	r9,r4
		uhd_ctrl_request_first->payload_size--;
		nb_byte_received--;
800079aa:	5f 1c       	srne	r12
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
		uhd_ctrl_nb_trans++;
		uhd_ctrl_request_first->payload_size--;
800079ac:	f4 cb ff f4 	sub	r11,r10,-12
800079b0:	f1 ec 00 0c 	and	r12,r8,r12
800079b4:	ee 0c 18 00 	cp.b	r12,r7
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
800079b8:	ce 01       	brne	80007978 <otg_interrupt+0x280>
800079ba:	e8 09 19 00 	cp.h	r9,r4
800079be:	5f 09       	sreq	r9
800079c0:	12 68       	and	r8,r9
800079c2:	ee 08 18 00 	cp.b	r8,r7
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
		uhd_ctrl_nb_trans++;
		uhd_ctrl_request_first->payload_size--;
		nb_byte_received--;
800079c6:	c0 b0       	breq	800079dc <otg_interrupt+0x2e4>
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
800079c8:	74 58       	ld.w	r8,r10[0x14]
800079ca:	58 08       	cp.w	r8,0
800079cc:	c1 60       	breq	800079f8 <otg_interrupt+0x300>
		nb_byte_received--;
	}

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
800079ce:	62 0c       	ld.w	r12,r1[0x0]
800079d0:	2f 0a       	sub	r10,-16
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
800079d2:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800079d6:	5d 18       	icall	r8
800079d8:	cd f1       	brne	80007996 <otg_interrupt+0x29e>
800079da:	c0 f8       	rjmp	800079f8 <otg_interrupt+0x300>
		uhd_ctrl_nb_trans++;
		uhd_ctrl_request_first->payload_size--;
		nb_byte_received--;
	}

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
800079dc:	f5 38 00 08 	ld.ub	r8,r10[8]
800079e0:	e0 69 1c ac 	mov	r9,7340
800079e4:	15 fa       	ld.ub	r10,r10[0x7]
800079e6:	92 09       	ld.sh	r9,r9[0x0]
800079e8:	f1 ea 10 88 	or	r8,r8,r10<<0x8
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
800079ec:	f0 09 19 00 	cp.h	r9,r8
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
800079f0:	c0 40       	breq	800079f8 <otg_interrupt+0x300>
		nb_byte_received--;
	}

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
800079f2:	e2 10 00 80 	andl	r0,0x80,COH
800079f6:	c1 90       	breq	80007a28 <otg_interrupt+0x330>
800079f8:	fe 69 05 00 	mov	r9,-129792
800079fc:	72 08       	ld.w	r8,r9[0x0]
800079fe:	e0 18 fc ff 	andl	r8,0xfcff
80007a02:	a9 b8       	sbr	r8,0x9
80007a04:	93 08       	st.w	r9[0x0],r8
80007a06:	30 28       	mov	r8,2
80007a08:	fe 69 05 60 	mov	r9,-129696
		// thus the data load can restart.
		goto uhd_ctrl_receiv_in_read_data;
	}

	// Test short packet
	if ((uhd_ctrl_nb_trans == uhd_ctrl_request_first->req.wLength)
80007a0c:	93 08       	st.w	r9[0x0],r8
80007a0e:	fe 69 05 f0 	mov	r9,-129552
80007a12:	93 08       	st.w	r9[0x0],r8
80007a14:	e0 69 40 00 	mov	r9,16384
80007a18:	fe 68 06 20 	mov	r8,-129504
80007a1c:	91 09       	st.w	r8[0x0],r9
80007a1e:	30 4a       	mov	r10,4
80007a20:	e0 69 1c a4 	mov	r9,7332
80007a24:	93 0a       	st.w	r9[0x0],r10
 * \brief Starts the ZLP OUT phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_out(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_OUT;
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
80007a26:	c0 a8       	rjmp	80007a3a <otg_interrupt+0x342>
80007a28:	30 19       	mov	r9,1
80007a2a:	fe 68 05 f0 	mov	r8,-129552
80007a2e:	91 09       	st.w	r8[0x0],r9
80007a30:	fe 68 06 20 	mov	r8,-129504
	uhd_ack_out_ready(0);
80007a34:	e0 69 40 00 	mov	r9,16384
80007a38:	91 09       	st.w	r8[0x0],r9
80007a3a:	e2 69 00 00 	mov	r9,131072
	uhd_enable_out_ready_interrupt(0);
80007a3e:	cd e8       	rjmp	80007bfa <otg_interrupt+0x502>
80007a40:	30 0c       	mov	r12,0
	uhd_ack_fifocon(0);
80007a42:	c3 a8       	rjmp	80007ab6 <otg_interrupt+0x3be>
80007a44:	70 09       	ld.w	r9,r8[0x0]
80007a46:	ed b9 00 01 	bld	r9,0x1
80007a4a:	c1 71       	brne	80007a78 <otg_interrupt+0x380>
 * \internal
 * \brief Starts the ZLP OUT phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_out(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_OUT;
80007a4c:	e2 69 00 00 	mov	r9,131072
80007a50:	fe 68 05 f0 	mov	r8,-129552
		uhd_ctrl_phase_zlp_out();
		return;
	}

	// Send a new IN packet request
	uhd_enable_in_received_interrupt(0);
80007a54:	91 09       	st.w	r8[0x0],r9
80007a56:	fe 68 05 60 	mov	r8,-129696
80007a5a:	30 29       	mov	r9,2
	uhd_ack_fifocon(0);
80007a5c:	91 09       	st.w	r8[0x0],r9
80007a5e:	e0 68 1c a4 	mov	r8,7332
80007a62:	70 08       	ld.w	r8,r8[0x0]
80007a64:	58 18       	cp.w	r8,1
	uhd_unfreeze_pipe(0);
80007a66:	c0 50       	breq	80007a70 <otg_interrupt+0x378>
80007a68:	58 48       	cp.w	r8,4
80007a6a:	e0 81 01 94 	brne	80007d92 <otg_interrupt+0x69a>
		switch(uhd_ctrl_request_phase) {
		case UHD_CTRL_REQ_PHASE_DATA_IN:
			uhd_ctrl_phase_data_in();
			break;
		case UHD_CTRL_REQ_PHASE_ZLP_IN:
			uhd_ctrl_request_end(UHD_TRANS_NOERROR);
80007a6e:	c2 48       	rjmp	80007ab6 <otg_interrupt+0x3be>
			Assert(false);
			break;
		}
		return;
	}
	if (Is_uhd_out_ready(0)) {
80007a70:	fe b0 f8 c8 	rcall	80006c00 <uhd_ctrl_phase_data_out>
80007a74:	e0 8f 01 8f 	bral	80007d92 <otg_interrupt+0x69a>
		// OUT packet sent
		uhd_freeze_pipe(0);
80007a78:	70 09       	ld.w	r9,r8[0x0]
80007a7a:	e2 19 00 40 	andl	r9,0x40,COH
80007a7e:	c0 70       	breq	80007a8c <otg_interrupt+0x394>
80007a80:	34 09       	mov	r9,64
		uhd_ack_out_ready(0);
80007a82:	fe 68 05 60 	mov	r8,-129696
80007a86:	30 4c       	mov	r12,4
80007a88:	91 09       	st.w	r8[0x0],r9
		switch(uhd_ctrl_request_phase) {
80007a8a:	c1 68       	rjmp	80007ab6 <otg_interrupt+0x3be>
80007a8c:	70 08       	ld.w	r8,r8[0x0]
80007a8e:	ed b8 00 03 	bld	r8,0x3
80007a92:	e0 81 01 80 	brne	80007d92 <otg_interrupt+0x69a>
80007a96:	fe 6a 06 80 	mov	r10,-129408
		case UHD_CTRL_REQ_PHASE_DATA_OUT:
			uhd_ctrl_phase_data_out();
80007a9a:	74 08       	ld.w	r8,r10[0x0]
80007a9c:	95 09       	st.w	r10[0x0],r9
80007a9e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
			Assert(false);
			break;
		}
		return;
	}
	if (Is_uhd_stall(0)) {
80007aa2:	20 18       	sub	r8,1
80007aa4:	58 28       	cp.w	r8,2
80007aa6:	e0 88 00 04 	brls	80007aae <otg_interrupt+0x3b6>
		// Stall Handshake received
		uhd_ack_stall(0);
80007aaa:	30 6c       	mov	r12,6
80007aac:	c0 58       	rjmp	80007ab6 <otg_interrupt+0x3be>
80007aae:	fe c9 df 32 	sub	r9,pc,-8398
80007ab2:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		uhd_ctrl_request_end(UHD_TRANS_STALL);
		return;
	}
	if (Is_uhd_pipe_error(0)) {
80007ab6:	fe b0 fb 07 	rcall	800070c4 <uhd_ctrl_request_end>
80007aba:	c6 c9       	rjmp	80007d92 <otg_interrupt+0x69a>
80007abc:	30 78       	mov	r8,7
80007abe:	f0 0c 18 00 	cp.b	r12,r8
 *
 * \return UHD transfer error
 */
static uhd_trans_status_t uhd_pipe_get_error(uint8_t pipe)
{
	uint32_t error = uhd_error_status(pipe) &
80007ac2:	c6 60       	breq	80007b8e <otg_interrupt+0x496>
80007ac4:	f8 08 15 02 	lsl	r8,r12,0x2
			(AVR32_USBB_UPERR0_DATATGL_MASK |
			AVR32_USBB_UPERR0_TIMEOUT_MASK |
			AVR32_USBB_UPERR0_PID_MASK |
			AVR32_USBB_UPERR0_DATAPID_MASK);
	uhd_ack_all_errors(pipe);
80007ac8:	fe 6b 05 c0 	mov	r11,-129600
80007acc:	f0 0b 00 0a 	add	r10,r8,r11
80007ad0:	74 09       	ld.w	r9,r10[0x0]
80007ad2:	ed b9 00 0c 	bld	r9,0xc
80007ad6:	c1 11       	brne	80007af8 <otg_interrupt+0x400>
80007ad8:	fe 6b 05 30 	mov	r11,-129744
80007adc:	f0 0b 00 09 	add	r9,r8,r11
		uhd_ctrl_request_end(UHD_TRANS_STALL);
		return;
	}
	if (Is_uhd_pipe_error(0)) {
		// Get and ack error
		uhd_ctrl_request_end(uhd_pipe_get_error(0));
80007ae0:	72 0b       	ld.w	r11,r9[0x0]
80007ae2:	f7 db c1 82 	bfextu	r11,r11,0xc,0x2
	if (pipe_int == 0) {
		// Interrupt acked by control endpoint managed
		uhd_ctrl_interrupt();
		return;
	}
	if (pipe_int != AVR32_USBB_EPT_NUM) {
80007ae6:	c0 91       	brne	80007af8 <otg_interrupt+0x400>
80007ae8:	e0 38 f9 e0 	sub	r8,129504
 *
 * \param pipe  Pipe number
 */
static void uhd_pipe_interrupt(uint8_t pipe)
{
	if (Is_uhd_bank_interrupt_enabled(pipe) && (0==uhd_nb_busy_bank(pipe))) {
80007aec:	e0 69 10 00 	mov	r9,4096
80007af0:	91 09       	st.w	r8[0x0],r9
80007af2:	fe b0 f9 6f 	rcall	80006dd0 <uhd_pipe_finish_job>
80007af6:	c4 e9       	rjmp	80007d92 <otg_interrupt+0x69a>
80007af8:	74 09       	ld.w	r9,r10[0x0]
80007afa:	ed b9 00 01 	bld	r9,0x1
80007afe:	c1 b1       	brne	80007b34 <otg_interrupt+0x43c>
80007b00:	fe 6a 05 30 	mov	r10,-129744
80007b04:	f0 0a 00 09 	add	r9,r8,r10
80007b08:	72 09       	ld.w	r9,r9[0x0]
80007b0a:	ed b9 00 01 	bld	r9,0x1
80007b0e:	c1 31       	brne	80007b34 <otg_interrupt+0x43c>
		uhd_disable_bank_interrupt(pipe);
80007b10:	30 2a       	mov	r10,2
80007b12:	fe 6c 06 20 	mov	r12,-129504
80007b16:	f0 0c 00 09 	add	r9,r8,r12
		uhd_pipe_finish_job(pipe, UHD_TRANS_NOERROR);
80007b1a:	93 0a       	st.w	r9[0x0],r10
80007b1c:	fe 6c 05 60 	mov	r12,-129696
80007b20:	f0 0c 00 0b 	add	r11,r8,r12
80007b24:	97 0a       	st.w	r11[0x0],r10
80007b26:	e0 6a 40 00 	mov	r10,16384
80007b2a:	93 0a       	st.w	r9[0x0],r10
80007b2c:	e2 6a 00 00 	mov	r10,131072
80007b30:	93 0a       	st.w	r9[0x0],r10
80007b32:	c6 08       	rjmp	80007bf2 <otg_interrupt+0x4fa>
80007b34:	fe 6b 05 30 	mov	r11,-129744
		return;
	}
	if (Is_uhd_out_ready_interrupt_enabled(pipe) && Is_uhd_out_ready(pipe)) {
80007b38:	f0 0b 00 0a 	add	r10,r8,r11
80007b3c:	74 09       	ld.w	r9,r10[0x0]
80007b3e:	e2 19 00 40 	andl	r9,0x40,COH
80007b42:	c0 e0       	breq	80007b5e <otg_interrupt+0x466>
80007b44:	fe 6a 05 60 	mov	r10,-129696
80007b48:	f0 0a 00 09 	add	r9,r8,r10
80007b4c:	34 0a       	mov	r10,64
80007b4e:	93 0a       	st.w	r9[0x0],r10
		uhd_disable_out_ready_interrupt(pipe);
80007b50:	e0 38 fa 10 	sub	r8,129552
80007b54:	e4 69 00 00 	mov	r9,262144
80007b58:	30 4b       	mov	r11,4
80007b5a:	91 09       	st.w	r8[0x0],r9
		// One bank is free then send a ZLP
		uhd_ack_out_ready(pipe);
80007b5c:	c1 68       	rjmp	80007b88 <otg_interrupt+0x490>
80007b5e:	74 0a       	ld.w	r10,r10[0x0]
80007b60:	ed ba 00 03 	bld	r10,0x3
80007b64:	e0 81 01 17 	brne	80007d92 <otg_interrupt+0x69a>
		uhd_ack_fifocon(pipe);
80007b68:	e0 38 f9 80 	sub	r8,129408
		uhd_unfreeze_pipe(pipe);
80007b6c:	70 0a       	ld.w	r10,r8[0x0]
80007b6e:	91 09       	st.w	r8[0x0],r9
80007b70:	f1 da c0 04 	bfextu	r8,r10,0x0,0x4
		uhd_enable_bank_interrupt(pipe);
		return;
	}
	if (Is_uhd_stall(pipe)) {
80007b74:	20 18       	sub	r8,1
80007b76:	58 28       	cp.w	r8,2
80007b78:	e0 88 00 04 	brls	80007b80 <otg_interrupt+0x488>
80007b7c:	30 6b       	mov	r11,6
80007b7e:	c0 58       	rjmp	80007b88 <otg_interrupt+0x490>
80007b80:	fe c9 e0 04 	sub	r9,pc,-8188
		uhd_ack_stall(pipe);
80007b84:	f2 08 03 2b 	ld.w	r11,r9[r8<<0x2]
80007b88:	fe b0 f9 60 	rcall	80006e48 <uhd_ep_abort_pipe>
80007b8c:	c0 39       	rjmp	80007d92 <otg_interrupt+0x69a>
80007b8e:	f2 fc 04 04 	ld.w	r12,r9[1028]
		uhd_reset_data_toggle(pipe);
80007b92:	f2 fb 04 10 	ld.w	r11,r9[1040]
80007b96:	b9 9c       	lsr	r12,0x19
		uhd_ep_abort_pipe(pipe, UHD_TRANS_STALL);
80007b98:	f9 eb 03 9c 	and	r12,r12,r11>>0x19
		uhd_enable_bank_interrupt(pipe);
		return;
	}
	if (Is_uhd_stall(pipe)) {
		uhd_ack_stall(pipe);
		uhd_reset_data_toggle(pipe);
80007b9c:	a7 ac       	sbr	r12,0x6
		uhd_ep_abort_pipe(pipe, UHD_TRANS_STALL);
		return;
	}
	if (Is_uhd_pipe_error(pipe)) {
80007b9e:	5c 9c       	brev	r12
80007ba0:	f8 0c 12 00 	clz	r12,r12
80007ba4:	2f fc       	sub	r12,-1
80007ba6:	f0 0c 18 00 	cp.b	r12,r8
 *
 * \return UHD transfer error
 */
static uhd_trans_status_t uhd_pipe_get_error(uint8_t pipe)
{
	uint32_t error = uhd_error_status(pipe) &
80007baa:	c4 10       	breq	80007c2c <otg_interrupt+0x534>
80007bac:	f8 08 15 04 	lsl	r8,r12,0x4
			(AVR32_USBB_UPERR0_DATATGL_MASK |
			AVR32_USBB_UPERR0_TIMEOUT_MASK |
			AVR32_USBB_UPERR0_PID_MASK |
			AVR32_USBB_UPERR0_DATAPID_MASK);
	uhd_ack_all_errors(pipe);
80007bb0:	e0 38 f9 00 	sub	r8,129280
80007bb4:	70 39       	ld.w	r9,r8[0xc]
80007bb6:	ed b9 00 00 	bld	r9,0x0
80007bba:	e0 80 00 ec 	breq	80007d92 <otg_interrupt+0x69a>
80007bbe:	70 39       	ld.w	r9,r8[0xc]
80007bc0:	b1 89       	lsr	r9,0x10
80007bc2:	c0 d0       	breq	80007bdc <otg_interrupt+0x4e4>
80007bc4:	e0 6a 08 f8 	mov	r10,2296
		uhd_ep_abort_pipe(pipe, UHD_TRANS_STALL);
		return;
	}
	if (Is_uhd_pipe_error(pipe)) {
		// Get and ack error
		uhd_ep_abort_pipe(pipe, uhd_pipe_get_error(pipe));
80007bc8:	f8 c8 00 01 	sub	r8,r12,1
	if (pipe_int != AVR32_USBB_EPT_NUM) {
		// Interrupt acked by bulk/interrupt/isochronous endpoint
		uhd_pipe_interrupt(pipe_int);
		return;
	}
	pipe_int = uhd_get_pipe_dma_interrupt_number();
80007bcc:	f0 08 00 28 	add	r8,r8,r8<<0x2
80007bd0:	f4 08 00 28 	add	r8,r10,r8<<0x2
80007bd4:	70 3a       	ld.w	r10,r8[0xc]
80007bd6:	12 1a       	sub	r10,r9
80007bd8:	91 2a       	st.w	r8[0x8],r10
80007bda:	91 3a       	st.w	r8[0xc],r10
80007bdc:	f8 08 15 02 	lsl	r8,r12,0x2
80007be0:	fe 6b 05 00 	mov	r11,-129792
	if (pipe_int != AVR32_USBB_EPT_NUM) {
80007be4:	f0 0b 00 0a 	add	r10,r8,r11
80007be8:	74 0a       	ld.w	r10,r10[0x0]
static void uhd_pipe_interrupt_dma(uint8_t pipe)
{
	uhd_pipe_job_t *ptr_job;
	uint32_t nb_remaining;

	if (uhd_pipe_dma_get_status(pipe)
80007bea:	f5 da c1 02 	bfextu	r10,r10,0x8,0x2
80007bee:	58 2a       	cp.w	r10,2
80007bf0:	c0 71       	brne	80007bfe <otg_interrupt+0x506>
80007bf2:	e0 38 fa 10 	sub	r8,129552
80007bf6:	e0 69 10 00 	mov	r9,4096
80007bfa:	91 09       	st.w	r8[0x0],r9
			& AVR32_USBB_UHDMA1_STATUS_CH_EN_MASK) {
		return; // Ignore EOT_STA interrupt
	}
	// Save number of data no transfered
	nb_remaining = (uhd_pipe_dma_get_status(pipe) &
80007bfc:	cc b8       	rjmp	80007d92 <otg_interrupt+0x69a>
80007bfe:	fe 6a 05 c0 	mov	r10,-129600
			AVR32_USBB_UHDMA1_STATUS_CH_BYTE_CNT_MASK)
			>> AVR32_USBB_UHDMA1_STATUS_CH_BYTE_CNT_OFFSET;
	if (nb_remaining) {
		// Get job corresponding at endpoint
		ptr_job = &uhd_pipe_job[pipe - 1];
80007c02:	f0 0a 00 0b 	add	r11,r8,r10
80007c06:	76 0a       	ld.w	r10,r11[0x0]
80007c08:	ed ba 00 11 	bld	r10,0x11
80007c0c:	c0 d0       	breq	80007c26 <otg_interrupt+0x52e>
80007c0e:	58 09       	cp.w	r9,0

		// Transfer no complete (short packet or ZLP) then:
		// Update number of transfered data
		ptr_job->nb_trans -= nb_remaining;
80007c10:	c0 70       	breq	80007c1e <otg_interrupt+0x526>
80007c12:	e0 38 fa 10 	sub	r8,129552
80007c16:	e2 69 00 00 	mov	r9,131072

		// Set transfer complete to stop the transfer
		ptr_job->buf_size = ptr_job->nb_trans;
	}

	if (uhd_is_pipe_out(pipe)) {
80007c1a:	91 09       	st.w	r8[0x0],r9
80007c1c:	c0 58       	rjmp	80007c26 <otg_interrupt+0x52e>
80007c1e:	76 08       	ld.w	r8,r11[0x0]
80007c20:	ed b8 00 11 	bld	r8,0x11
80007c24:	cf d1       	brne	80007c1e <otg_interrupt+0x526>
80007c26:	fe b0 f9 41 	rcall	80006ea8 <uhd_pipe_trans_complet>
80007c2a:	cb 48       	rjmp	80007d92 <otg_interrupt+0x69a>
80007c2c:	74 08       	ld.w	r8,r10[0x0]
		// Wait that all banks are free to freeze clock of OUT endpoint
		// and call callback
		uhd_enable_bank_interrupt(pipe);
80007c2e:	e2 18 00 04 	andl	r8,0x4,COH
80007c32:	c0 d0       	breq	80007c4c <otg_interrupt+0x554>
80007c34:	fe 68 04 08 	mov	r8,-130040
80007c38:	30 49       	mov	r9,4
	} else {
		if (!Is_uhd_pipe_frozen(pipe)) {
80007c3a:	91 09       	st.w	r8[0x0],r9
80007c3c:	e0 68 08 f4 	mov	r8,2292
80007c40:	70 08       	ld.w	r8,r8[0x0]
80007c42:	58 08       	cp.w	r8,0
80007c44:	e0 80 00 a7 	breq	80007d92 <otg_interrupt+0x69a>
80007c48:	5d 18       	icall	r8
			// Pipe is not freeze in case of :
			// - incomplete transfer when the request number INRQ is not complete.
			// - low USB speed and with a high CPU frequency,
			// a ACK from host can be always running on USB line.

			if (nb_remaining) {
80007c4a:	ca 48       	rjmp	80007d92 <otg_interrupt+0x69a>
80007c4c:	74 0a       	ld.w	r10,r10[0x0]
				// Freeze pipe in case of incomplete transfer
				uhd_freeze_pipe(pipe);
80007c4e:	ed ba 00 01 	bld	r10,0x1
80007c52:	c2 31       	brne	80007c98 <otg_interrupt+0x5a0>
80007c54:	fe 6a 04 10 	mov	r10,-130032
80007c58:	74 0a       	ld.w	r10,r10[0x0]
			} else {
				// Wait freeze in case of ASK on going
				while (!Is_uhd_pipe_frozen(pipe)) {
80007c5a:	ed ba 00 01 	bld	r10,0x1
80007c5e:	c1 d1       	brne	80007c98 <otg_interrupt+0x5a0>
80007c60:	30 2a       	mov	r10,2
				}
			}
		}
		uhd_pipe_trans_complet(pipe);
80007c62:	fe 6b 04 08 	mov	r11,-130040
80007c66:	97 0a       	st.w	r11[0x0],r10
		// Interrupt DMA acked by bulk/interrupt/isochronous endpoint
		uhd_pipe_interrupt_dma(pipe_int);
		return;
	}
	// USB bus reset detection
	if (Is_uhd_reset_sent()) {
80007c68:	fe 6b 04 14 	mov	r11,-130028
80007c6c:	97 0a       	st.w	r11[0x0],r10
80007c6e:	fe 6b 04 00 	mov	r11,-130048
		uhd_ack_reset_sent();
80007c72:	76 0a       	ld.w	r10,r11[0x0]
80007c74:	a9 da       	cbr	r10,0x9
80007c76:	97 0a       	st.w	r11[0x0],r10
		if (uhd_reset_callback != NULL) {
80007c78:	35 8a       	mov	r10,88
80007c7a:	f3 4a 04 14 	st.w	r9[1044],r10
80007c7e:	fe 69 04 18 	mov	r9,-130024
			uhd_reset_callback();
80007c82:	30 1a       	mov	r10,1
80007c84:	93 0a       	st.w	r9[0x0],r10
		}
		return;
	}

	// Manage dis/connection event
	if (Is_uhd_disconnection() && Is_uhd_disconnection_int_enabled()) {
80007c86:	e0 69 09 70 	mov	r9,2416
80007c8a:	10 9c       	mov	r12,r8
80007c8c:	b2 88       	st.b	r9[0x0],r8
80007c8e:	e0 69 09 72 	mov	r9,2418
80007c92:	b2 88       	st.b	r9[0x0],r8
80007c94:	c2 58       	rjmp	80007cde <otg_interrupt+0x5e6>
80007c96:	d7 03       	nop
80007c98:	fe 68 04 04 	mov	r8,-130044
		uhd_ack_disconnection();
80007c9c:	70 08       	ld.w	r8,r8[0x0]
80007c9e:	ed b8 00 00 	bld	r8,0x0
		uhd_disable_disconnection_int();
80007ca2:	c2 11       	brne	80007ce4 <otg_interrupt+0x5ec>
80007ca4:	fe 68 04 10 	mov	r8,-130032
		// Stop reset signal, in case of disconnection during reset
		uhd_stop_reset();
80007ca8:	70 08       	ld.w	r8,r8[0x0]
80007caa:	ed b8 00 00 	bld	r8,0x0
80007cae:	c1 b1       	brne	80007ce4 <otg_interrupt+0x5ec>
80007cb0:	fe 68 04 08 	mov	r8,-130040
		// Disable wakeup/resumes interrupts,
		// in case of disconnection during suspend mode
		AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_HWUPIEC_MASK
80007cb4:	30 1c       	mov	r12,1
80007cb6:	91 0c       	st.w	r8[0x0],r12
				| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
				| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
		uhd_sleep_mode(UHD_STATE_DISCONNECT);
		uhd_enable_connection_int();
80007cb8:	fe 68 04 14 	mov	r8,-130028
80007cbc:	91 0c       	st.w	r8[0x0],r12
80007cbe:	fe 68 04 18 	mov	r8,-130024
		uhd_suspend_start = 0;
		uhd_resume_start = 0;
		uhc_notify_connection(false);
80007cc2:	30 29       	mov	r9,2
		AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_HWUPIEC_MASK
				| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
				| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
		uhd_sleep_mode(UHD_STATE_DISCONNECT);
		uhd_enable_connection_int();
		uhd_suspend_start = 0;
80007cc4:	fe 6a 04 00 	mov	r10,-130048
		uhd_resume_start = 0;
80007cc8:	91 09       	st.w	r8[0x0],r9
80007cca:	74 08       	ld.w	r8,r10[0x0]
80007ccc:	a9 a8       	sbr	r8,0x8
80007cce:	95 08       	st.w	r10[0x0],r8
80007cd0:	e0 68 09 70 	mov	r8,2416
80007cd4:	30 09       	mov	r9,0
80007cd6:	b0 89       	st.b	r8[0x0],r9
80007cd8:	e0 68 09 72 	mov	r8,2418
80007cdc:	b0 89       	st.b	r8[0x0],r9
80007cde:	e0 a0 03 43 	rcall	80008364 <uhc_notify_connection>
80007ce2:	c5 88       	rjmp	80007d92 <otg_interrupt+0x69a>
80007ce4:	fe 69 08 04 	mov	r9,-129020
		uhc_notify_connection(false);
		return;
	}
	if (Is_uhd_connection() && Is_uhd_connection_int_enabled()) {
80007ce8:	72 08       	ld.w	r8,r9[0x0]
80007cea:	ed b8 00 03 	bld	r8,0x3
80007cee:	c0 81       	brne	80007cfe <otg_interrupt+0x606>
80007cf0:	30 89       	mov	r9,8
80007cf2:	fe 68 08 08 	mov	r8,-129016
80007cf6:	91 09       	st.w	r8[0x0],r9
80007cf8:	fe b0 ef 92 	rcall	80005c1c <usb_vbus_error>
80007cfc:	c4 b8       	rjmp	80007d92 <otg_interrupt+0x69a>
80007cfe:	72 08       	ld.w	r8,r9[0x0]
		uhd_ack_connection();
80007d00:	ed b8 00 0e 	bld	r8,0xe
80007d04:	cf d1       	brne	80007cfe <otg_interrupt+0x606>
80007d06:	fe 69 08 00 	mov	r9,-129024
		uhd_disable_connection_int();
80007d0a:	72 08       	ld.w	r8,r9[0x0]
80007d0c:	af c8       	cbr	r8,0xe
		uhd_enable_disconnection_int();
80007d0e:	93 08       	st.w	r9[0x0],r8
80007d10:	fe 68 04 10 	mov	r8,-130032
		uhd_enable_sof();
80007d14:	70 08       	ld.w	r8,r8[0x0]
80007d16:	ed b8 00 06 	bld	r8,0x6
80007d1a:	c2 51       	brne	80007d64 <otg_interrupt+0x66c>
80007d1c:	fe 68 04 04 	mov	r8,-130044
		uhd_sleep_mode(UHD_STATE_IDLE);
		uhd_suspend_start = 0;
80007d20:	70 09       	ld.w	r9,r8[0x0]
80007d22:	ed b9 00 06 	bld	r9,0x6
		uhd_resume_start = 0;
80007d26:	c0 90       	breq	80007d38 <otg_interrupt+0x640>
80007d28:	70 09       	ld.w	r9,r8[0x0]
		uhc_notify_connection(true);
80007d2a:	ed b9 00 03 	bld	r9,0x3
80007d2e:	c0 50       	breq	80007d38 <otg_interrupt+0x640>
		return;
	}

	// Manage Vbus error
	if (Is_uhd_vbus_error_interrupt()) {
80007d30:	70 08       	ld.w	r8,r8[0x0]
80007d32:	ed b8 00 04 	bld	r8,0x4
80007d36:	c1 71       	brne	80007d64 <otg_interrupt+0x66c>
80007d38:	35 89       	mov	r9,88
80007d3a:	fe 68 00 00 	mov	r8,-131072
		uhd_ack_vbus_error_interrupt();
80007d3e:	f1 49 04 14 	st.w	r8[1044],r9
80007d42:	fe 6a 04 00 	mov	r10,-130048
		UHC_VBUS_ERROR();
80007d46:	74 08       	ld.w	r8,r10[0x0]
80007d48:	a9 a8       	sbr	r8,0x8
		return;
	}

	// Check USB clock ready after asynchronous interrupt
	while (!Is_otg_clock_usable());
80007d4a:	95 08       	st.w	r10[0x0],r8
80007d4c:	fe 69 04 04 	mov	r9,-130044
80007d50:	72 08       	ld.w	r8,r9[0x0]
	otg_unfreeze_clock();
80007d52:	ed b8 00 03 	bld	r8,0x3
80007d56:	c0 20       	breq	80007d5a <otg_interrupt+0x662>
80007d58:	72 08       	ld.w	r8,r9[0x0]
80007d5a:	33 29       	mov	r9,50

	if (Is_uhd_wakeup_interrupt_enabled() && (Is_uhd_wakeup() ||
80007d5c:	e0 68 09 72 	mov	r8,2418
80007d60:	b0 89       	st.b	r8[0x0],r9
80007d62:	c1 88       	rjmp	80007d92 <otg_interrupt+0x69a>
80007d64:	fe 69 08 04 	mov	r9,-129020
80007d68:	72 08       	ld.w	r8,r9[0x0]
80007d6a:	ed b8 00 01 	bld	r8,0x1
80007d6e:	c1 21       	brne	80007d92 <otg_interrupt+0x69a>
80007d70:	30 2a       	mov	r10,2
80007d72:	fe 68 08 08 	mov	r8,-129016
80007d76:	91 0a       	st.w	r8[0x0],r10
80007d78:	72 0c       	ld.w	r12,r9[0x0]
80007d7a:	e2 1c 08 00 	andl	r12,0x800,COH
80007d7e:	c0 30       	breq	80007d84 <otg_interrupt+0x68c>
80007d80:	30 1c       	mov	r12,1
80007d82:	c0 68       	rjmp	80007d8e <otg_interrupt+0x696>
			Is_uhd_downstream_resume() || Is_uhd_upstream_resume())) {
		// Disable wakeup/resumes interrupts
		AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_HWUPIEC_MASK
80007d84:	fe 69 08 00 	mov	r9,-129024
80007d88:	72 08       	ld.w	r8,r9[0x0]
80007d8a:	af a8       	sbr	r8,0xe
80007d8c:	93 08       	st.w	r9[0x0],r8
				| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
				| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
		uhd_enable_sof();
80007d8e:	fe b0 ef 46 	rcall	80005c1a <usb_vbus_change>
80007d92:	fe 68 00 00 	mov	r8,-131072
80007d96:	f0 f8 08 18 	ld.w	r8,r8[2072]
		if ((!Is_uhd_downstream_resume())
80007d9a:	d4 32       	popm	r0-r7,lr
80007d9c:	d6 03       	rete
80007d9e:	d7 03       	nop

80007da0 <print_hex>:
  print(usart, tmp);
}


void print_hex(volatile avr32_usart_t *usart, unsigned long n)
{
80007da0:	d4 01       	pushm	lr
80007da2:	20 3d       	sub	sp,12
  char tmp[9];
  int i;

  // Convert the given number to an ASCII hexadecimal representation.
  tmp[8] = '\0';
80007da4:	30 08       	mov	r8,0
  // Transmit the resulting string with the given USART.
  print(usart, tmp);
}


void print_hex(volatile avr32_usart_t *usart, unsigned long n)
80007da6:	fa ca 00 01 	sub	r10,sp,1
{
  char tmp[9];
  int i;

  // Convert the given number to an ASCII hexadecimal representation.
  tmp[8] = '\0';
80007daa:	fb 68 00 08 	st.b	sp[8],r8
  for (i = 7; i >= 0; i--)
  {
    tmp[i] = HEX_DIGITS[n & 0xF];
80007dae:	fe c9 e2 16 	sub	r9,pc,-7658
{
  char tmp[9];
  int i;

  // Convert the given number to an ASCII hexadecimal representation.
  tmp[8] = '\0';
80007db2:	fa c8 ff f9 	sub	r8,sp,-7
  for (i = 7; i >= 0; i--)
  {
    tmp[i] = HEX_DIGITS[n & 0xF];
80007db6:	fd db c0 04 	bfextu	lr,r11,0x0,0x4
80007dba:	f2 0e 07 0e 	ld.ub	lr,r9[lr]
    n >>= 4;
80007dbe:	b0 8e       	st.b	r8[0x0],lr
80007dc0:	a5 8b       	lsr	r11,0x4
  char tmp[9];
  int i;

  // Convert the given number to an ASCII hexadecimal representation.
  tmp[8] = '\0';
  for (i = 7; i >= 0; i--)
80007dc2:	20 18       	sub	r8,1
80007dc4:	14 38       	cp.w	r8,r10


void print(volatile avr32_usart_t *usart, const char *str)
{
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
80007dc6:	cf 81       	brne	80007db6 <print_hex+0x16>
80007dc8:	1a 9b       	mov	r11,sp
80007dca:	fe b0 f6 53 	rcall	80006a70 <usart_write_line>
    n >>= 4;
  }

  // Transmit the resulting string with the given USART.
  print(usart, tmp);
}
80007dce:	2f dd       	sub	sp,-12
80007dd0:	d8 02       	popm	pc
80007dd2:	d7 03       	nop

80007dd4 <print_dbg_hex>:
80007dd4:	d4 01       	pushm	lr
80007dd6:	18 9b       	mov	r11,r12


void print_dbg_hex(unsigned long n)
{
  // Redirection to the debug USART.
  print_hex(DBG_USART, n);
80007dd8:	fe 7c 18 00 	mov	r12,-59392
80007ddc:	ce 2f       	rcall	80007da0 <print_hex>
80007dde:	d8 02       	popm	pc

80007de0 <print_ulong>:
}
80007de0:	d4 21       	pushm	r4-r7,lr
80007de2:	20 3d       	sub	sp,12
80007de4:	30 08       	mov	r8,0
80007de6:	1a 99       	mov	r9,sp
{
  char tmp[11];
  int i = sizeof(tmp) - 1;

  // Convert the given number to an ASCII decimal representation.
  tmp[i] = '\0';
80007de8:	fb 68 00 0a 	st.b	sp[10],r8
80007dec:	30 a8       	mov	r8,10
  do
  {
    tmp[--i] = '0' + n % 10;
80007dee:	10 9a       	mov	r10,r8
80007df0:	f6 0a 0d 06 	divu	r6,r11,r10
80007df4:	20 18       	sub	r8,1
80007df6:	0e 9b       	mov	r11,r7
80007df8:	2d 0b       	sub	r11,-48
80007dfa:	f2 08 0b 0b 	st.b	r9[r8],r11
    n /= 10;
80007dfe:	0c 9b       	mov	r11,r6
  } while (n);
80007e00:	58 06       	cp.w	r6,0
80007e02:	cf 71       	brne	80007df0 <print_ulong+0x10>


void print(volatile avr32_usart_t *usart, const char *str)
{
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
80007e04:	f2 08 00 0b 	add	r11,r9,r8
80007e08:	fe b0 f6 34 	rcall	80006a70 <usart_write_line>
    n /= 10;
  } while (n);

  // Transmit the resulting string with the given USART.
  print(usart, tmp + i);
}
80007e0c:	2f dd       	sub	sp,-12
80007e0e:	d8 22       	popm	r4-r7,pc

80007e10 <print_dbg_ulong>:
80007e10:	d4 01       	pushm	lr
80007e12:	18 9b       	mov	r11,r12


void print_dbg_ulong(unsigned long n)
{
  // Redirection to the debug USART.
  print_ulong(DBG_USART, n);
80007e14:	fe 7c 18 00 	mov	r12,-59392
80007e18:	ce 4f       	rcall	80007de0 <print_ulong>
80007e1a:	d8 02       	popm	pc

80007e1c <print_dbg>:
}
80007e1c:	d4 01       	pushm	lr
80007e1e:	18 9b       	mov	r11,r12
80007e20:	fe 7c 18 00 	mov	r12,-59392


void print(volatile avr32_usart_t *usart, const char *str)
{
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
80007e24:	fe b0 f6 26 	rcall	80006a70 <usart_write_line>

void print_dbg(const char *str)
{
  // Redirection to the debug USART.
  print(DBG_USART, str);
}
80007e28:	d8 02       	popm	pc
80007e2a:	d7 03       	nop

80007e2c <init_dbg_rs232_ex>:
80007e2c:	d4 21       	pushm	r4-r7,lr
80007e2e:	20 3d       	sub	sp,12
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
80007e30:	30 08       	mov	r8,0
80007e32:	fb 68 00 08 	st.b	sp[8],r8
80007e36:	ba 38       	st.h	sp[0x6],r8
80007e38:	30 88       	mov	r8,8
80007e3a:	ba c8       	st.b	sp[0x4],r8
80007e3c:	30 48       	mov	r8,4
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
}


void init_dbg_rs232_ex(unsigned long baudrate, long pba_hz)
{
80007e3e:	16 97       	mov	r7,r11
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
80007e40:	50 0c       	stdsp	sp[0x0],r12

  // Setup GPIO for debug USART.
  gpio_enable_module(DBG_USART_GPIO_MAP,
80007e42:	30 2b       	mov	r11,2
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
80007e44:	ba d8       	st.b	sp[0x5],r8

  // Setup GPIO for debug USART.
  gpio_enable_module(DBG_USART_GPIO_MAP,
80007e46:	fe cc e2 be 	sub	r12,pc,-7490
80007e4a:	fe b0 f3 29 	rcall	8000649c <gpio_enable_module>
                     sizeof(DBG_USART_GPIO_MAP) / sizeof(DBG_USART_GPIO_MAP[0]));

  // Initialize it in RS232 mode.
  usart_init_rs232(DBG_USART, &dbg_usart_options, pba_hz);
80007e4e:	0e 9a       	mov	r10,r7
80007e50:	1a 9b       	mov	r11,sp
80007e52:	fe 7c 18 00 	mov	r12,-59392
80007e56:	fe b0 f6 35 	rcall	80006ac0 <usart_init_rs232>
}
80007e5a:	2f dd       	sub	sp,-12
80007e5c:	d8 22       	popm	r4-r7,pc
80007e5e:	d7 03       	nop

80007e60 <init_dbg_rs232>:
80007e60:	d4 01       	pushm	lr
80007e62:	18 9b       	mov	r11,r12
80007e64:	e0 6c e1 00 	mov	r12,57600
static const char HEX_DIGITS[16] = "0123456789ABCDEF";


void init_dbg_rs232(long pba_hz)
{
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
80007e68:	ce 2f       	rcall	80007e2c <init_dbg_rs232_ex>
80007e6a:	d8 02       	popm	pc

80007e6c <uhc_enumeration_step2>:
 * \param callback Callback to call at the end of timeout
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
		uhc_sof_timeout_callback_t callback)
{
	uhc_sof_timeout_callback = callback;
80007e6c:	fe c9 ff 2c 	sub	r9,pc,-212
80007e70:	e0 68 09 94 	mov	r8,2452
	uhc_sof_timeout = timeout;
80007e74:	91 09       	st.w	r8[0x0],r9
80007e76:	31 49       	mov	r9,20
 * Lets USB line in IDLE state during 20ms.
 */
static void uhc_enumeration_step2(void)
{
	uhc_enable_timeout_callback(20, uhc_enumeration_step3);
}
80007e78:	e0 68 1c b6 	mov	r8,7350
80007e7c:	b0 89       	st.b	r8[0x0],r9
80007e7e:	5e fc       	retal	r12

80007e80 <uhc_enumeration_step8>:
80007e80:	fe c9 fd fc 	sub	r9,pc,-516
80007e84:	e0 68 09 94 	mov	r8,2452
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
		uhc_sof_timeout_callback_t callback)
{
	uhc_sof_timeout_callback = callback;
	uhc_sof_timeout = timeout;
80007e88:	91 09       	st.w	r8[0x0],r9
80007e8a:	36 49       	mov	r9,100
 */
static void uhc_enumeration_step8(void)
{
	// Wait 100ms
	uhc_enable_timeout_callback(100, uhc_enumeration_step9);
}
80007e8c:	e0 68 1c b6 	mov	r8,7350
80007e90:	b0 89       	st.b	r8[0x0],r9
80007e92:	5e fc       	retal	r12

80007e94 <uhc_notify_sof>:
80007e94:	d4 21       	pushm	r4-r7,lr
80007e96:	fe c8 e2 ee 	sub	r8,pc,-7442
80007e9a:	18 97       	mov	r7,r12

void uhc_notify_sof(bool b_micro)
{
	// Call all UHIs
	for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
		if (uhc_uhis[i].sof_notify != NULL) {
80007e9c:	70 38       	ld.w	r8,r8[0xc]
80007e9e:	58 08       	cp.w	r8,0
			uhc_uhis[i].sof_notify(b_micro);
80007ea0:	c0 20       	breq	80007ea4 <uhc_notify_sof+0x10>
		}
	}

	if (!b_micro) {
80007ea2:	5d 18       	icall	r8
80007ea4:	58 07       	cp.w	r7,0
		// Manage SOF timeout
		if (uhc_sof_timeout) {
80007ea6:	c0 e1       	brne	80007ec2 <uhc_notify_sof+0x2e>
80007ea8:	e0 69 1c b6 	mov	r9,7350
80007eac:	13 88       	ld.ub	r8,r9[0x0]
			if (--uhc_sof_timeout == 0) {
80007eae:	58 08       	cp.w	r8,0
80007eb0:	c0 90       	breq	80007ec2 <uhc_notify_sof+0x2e>
80007eb2:	20 18       	sub	r8,1
80007eb4:	5c 58       	castu.b	r8
				uhc_sof_timeout_callback();
80007eb6:	b2 88       	st.b	r9[0x0],r8
80007eb8:	c0 51       	brne	80007ec2 <uhc_notify_sof+0x2e>
80007eba:	e0 68 09 94 	mov	r8,2452
80007ebe:	70 08       	ld.w	r8,r8[0x0]
80007ec0:	5d 18       	icall	r8
80007ec2:	d8 22       	popm	r4-r7,pc

80007ec4 <uhc_remotewakeup>:
80007ec4:	d4 01       	pushm	lr
80007ec6:	20 2d       	sub	sp,8
80007ec8:	e0 68 09 74 	mov	r8,2420
	usb_setup_req_t req;
	uhc_device_t *dev;

	dev = &g_uhc_device_root;
	while(1) {
		if (dev->conf_desc->bmAttributes & USB_CONFIG_ATTR_REMOTE_WAKEUP) {
80007ecc:	70 68       	ld.w	r8,r8[0x18]
80007ece:	11 f8       	ld.ub	r8,r8[0x7]
80007ed0:	ed b8 00 05 	bld	r8,0x5
			if (b_enable) {
80007ed4:	c1 b1       	brne	80007f0a <uhc_remotewakeup+0x46>
80007ed6:	58 0c       	cp.w	r12,0
				req.bRequest = USB_REQ_SET_FEATURE;
80007ed8:	c0 30       	breq	80007ede <uhc_remotewakeup+0x1a>
80007eda:	30 38       	mov	r8,3
			} else {
				req.bRequest = USB_REQ_CLEAR_FEATURE;
80007edc:	c0 28       	rjmp	80007ee0 <uhc_remotewakeup+0x1c>
80007ede:	30 18       	mov	r8,1
			req.bmRequestType = USB_REQ_RECIP_DEVICE
					|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_OUT;
			req.wValue = USB_DEV_FEATURE_REMOTE_WAKEUP;
			req.wIndex = 0;
			req.wLength = 0;
			uhd_setup_request(dev->address,&req,NULL,0,NULL,NULL);
80007ee0:	ba 98       	st.b	sp[0x1],r8
				req.bRequest = USB_REQ_CLEAR_FEATURE;
			}
			req.bmRequestType = USB_REQ_RECIP_DEVICE
					|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_OUT;
			req.wValue = USB_DEV_FEATURE_REMOTE_WAKEUP;
			req.wIndex = 0;
80007ee2:	30 09       	mov	r9,0
			req.wLength = 0;
80007ee4:	30 08       	mov	r8,0
				req.bRequest = USB_REQ_CLEAR_FEATURE;
			}
			req.bmRequestType = USB_REQ_RECIP_DEVICE
					|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_OUT;
			req.wValue = USB_DEV_FEATURE_REMOTE_WAKEUP;
			req.wIndex = 0;
80007ee6:	ba 38       	st.h	sp[0x6],r8
			req.wLength = 0;
			uhd_setup_request(dev->address,&req,NULL,0,NULL,NULL);
80007ee8:	ba 28       	st.h	sp[0x4],r8
80007eea:	1a d9       	st.w	--sp,r9
			if (b_enable) {
				req.bRequest = USB_REQ_SET_FEATURE;
			} else {
				req.bRequest = USB_REQ_CLEAR_FEATURE;
			}
			req.bmRequestType = USB_REQ_RECIP_DEVICE
80007eec:	12 98       	mov	r8,r9
					|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_OUT;
			req.wValue = USB_DEV_FEATURE_REMOTE_WAKEUP;
80007eee:	ba c9       	st.b	sp[0x4],r9
80007ef0:	30 19       	mov	r9,1
			req.wIndex = 0;
			req.wLength = 0;
			uhd_setup_request(dev->address,&req,NULL,0,NULL,NULL);
80007ef2:	ba 39       	st.h	sp[0x6],r9
80007ef4:	e0 69 09 74 	mov	r9,2420
80007ef8:	fa cb ff fc 	sub	r11,sp,-4
80007efc:	f3 3c 00 12 	ld.ub	r12,r9[18]
80007f00:	10 9a       	mov	r10,r8
80007f02:	10 99       	mov	r9,r8
80007f04:	fe b0 f9 74 	rcall	800071ec <uhd_setup_request>
		dev = dev->next;
#else
		break;
#endif
	}
}
80007f08:	2f fd       	sub	sp,-4
80007f0a:	2f ed       	sub	sp,-8
80007f0c:	d8 02       	popm	pc
80007f0e:	d7 03       	nop

80007f10 <uhc_stop>:
80007f10:	d4 01       	pushm	lr
80007f12:	fe b0 fb 13 	rcall	80007538 <uhd_disable>

void uhc_stop(bool b_id_stop)
{
	// Stop UHD
	uhd_disable(b_id_stop);
}
80007f16:	d8 02       	popm	pc

80007f18 <uhc_start>:
80007f18:	d4 01       	pushm	lr
80007f1a:	3f f9       	mov	r9,-1
 *
 * @{
 */
void uhc_start(void)
{
	g_uhc_device_root.address = UHC_USB_ADD_NOT_VALID;
80007f1c:	e0 68 09 74 	mov	r8,2420
80007f20:	f1 69 00 12 	st.b	r8[18],r9
	uhc_sof_timeout = 0; // No callback registered on a SOF timeout
80007f24:	30 09       	mov	r9,0
80007f26:	e0 68 1c b6 	mov	r8,7350
	uhd_enable();
80007f2a:	b0 89       	st.b	r8[0x0],r9
}
80007f2c:	fe b0 fb 84 	rcall	80007634 <uhd_enable>
80007f30:	d8 02       	popm	pc
80007f32:	d7 03       	nop

80007f34 <uhc_notify_resume>:
80007f34:	d4 01       	pushm	lr
80007f36:	30 0c       	mov	r12,0
80007f38:	cc 6f       	rcall	80007ec4 <uhc_remotewakeup>
80007f3a:	fe b0 ee 73 	rcall	80005c20 <usb_wakeup>
}

void uhc_notify_resume(void)
{
	uhc_remotewakeup(false);
	UHC_WAKEUP_EVENT();
80007f3e:	d8 02       	popm	pc

80007f40 <uhc_enumeration_step3>:
}
80007f40:	d4 01       	pushm	lr
80007f42:	fe cc ff ea 	sub	r12,pc,-22
80007f46:	fe b0 f6 2b 	rcall	80006b9c <uhd_send_reset>
80007f4a:	d8 02       	popm	pc

80007f4c <uhc_enumeration_step7>:
 * Reset USB line.
 */
static void uhc_enumeration_step3(void)
{
	uhc_enumeration_reset(uhc_enumeration_step4);
}
80007f4c:	d4 01       	pushm	lr
80007f4e:	fe cc 00 ce 	sub	r12,pc,206
80007f52:	fe b0 f6 25 	rcall	80006b9c <uhd_send_reset>
 * Reset USB line.
 */
static void uhc_enumeration_step7(void)
{
	uhc_enumeration_reset(uhc_enumeration_step8);
}
80007f56:	d8 02       	popm	pc

80007f58 <uhc_enumeration_step4>:
80007f58:	d4 01       	pushm	lr
80007f5a:	fe b0 f6 13 	rcall	80006b80 <uhd_get_speed>
80007f5e:	e0 68 09 74 	mov	r8,2420
 * \brief Device enumeration step 4
 * Lets USB line in IDLE state during 100ms.
 */
static void uhc_enumeration_step4(void)
{
	uhc_dev_enum->speed = uhd_get_speed();
80007f62:	fe c9 ff 7e 	sub	r9,pc,-130
 * \param callback Callback to call at the end of timeout
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
		uhc_sof_timeout_callback_t callback)
{
	uhc_sof_timeout_callback = callback;
80007f66:	91 5c       	st.w	r8[0x14],r12
	uhc_sof_timeout = timeout;
80007f68:	e0 68 09 94 	mov	r8,2452
80007f6c:	91 09       	st.w	r8[0x0],r9
 */
static void uhc_enumeration_step4(void)
{
	uhc_dev_enum->speed = uhd_get_speed();
	uhc_enable_timeout_callback(100, uhc_enumeration_step5);
}
80007f6e:	36 49       	mov	r9,100
80007f70:	e0 68 1c b6 	mov	r8,7350
80007f74:	b0 89       	st.b	r8[0x0],r9
80007f76:	d8 02       	popm	pc

80007f78 <uhc_enumeration_error>:
80007f78:	d4 21       	pushm	r4-r7,lr
80007f7a:	18 95       	mov	r5,r12
80007f7c:	58 7c       	cp.w	r12,7
80007f7e:	c0 61       	brne	80007f8a <uhc_enumeration_error+0x12>
80007f80:	30 09       	mov	r9,0
80007f82:	e0 68 09 90 	mov	r8,2448
 */
static void uhc_enumeration_error(uhc_enum_status_t status)
{
	if (status == UHC_ENUM_DISCONNECT) {
		uhc_enum_try = 0;
		return; // Abort enumeration process
80007f86:	b0 89       	st.b	r8[0x0],r9
	}
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
80007f88:	d8 22       	popm	r4-r7,pc
80007f8a:	e0 67 09 74 	mov	r7,2420
80007f8e:	e0 6b 00 ff 	mov	r11,255
80007f92:	ef 3c 00 12 	ld.ub	r12,r7[18]

	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
80007f96:	fe b0 f9 61 	rcall	80007258 <uhd_ep_free>
80007f9a:	6e 6c       	ld.w	r12,r7[0x18]
		free(uhc_dev_enum->conf_desc);
80007f9c:	58 0c       	cp.w	r12,0
80007f9e:	c0 50       	breq	80007fa8 <uhc_enumeration_error+0x30>
		uhc_dev_enum->conf_desc = NULL;
80007fa0:	e0 a0 04 48 	rcall	80008830 <free>
	}
	uhc_dev_enum->address = 0;
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80007fa4:	30 08       	mov	r8,0
	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
		free(uhc_dev_enum->conf_desc);
		uhc_dev_enum->conf_desc = NULL;
	}
	uhc_dev_enum->address = 0;
80007fa6:	8f 68       	st.w	r7[0x18],r8
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80007fa8:	e0 67 09 90 	mov	r7,2448
80007fac:	e0 64 09 74 	mov	r4,2420
	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
		free(uhc_dev_enum->conf_desc);
		uhc_dev_enum->conf_desc = NULL;
	}
	uhc_dev_enum->address = 0;
80007fb0:	0f 88       	ld.ub	r8,r7[0x0]
80007fb2:	30 06       	mov	r6,0
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80007fb4:	f0 c9 ff ff 	sub	r9,r8,-1
80007fb8:	e9 66 00 12 	st.b	r4[18],r6
80007fbc:	ae 89       	st.b	r7[0x0],r9
80007fbe:	30 39       	mov	r9,3
		// Device connected on USB hub
		uhi_hub_send_reset(uhc_dev_enum, callback);
	} else
#endif
	{
		uhd_send_reset(callback);
80007fc0:	f2 08 18 00 	cp.b	r8,r9
80007fc4:	e0 8b 00 07 	brhi	80007fd2 <uhc_enumeration_error+0x5a>
		uhi_hub_suspend(uhc_dev_enum);
	} else
#endif
	{
		// Suspend USB line
		uhd_suspend();
80007fc8:	fe cc 01 5c 	sub	r12,pc,348
		uhc_enumeration_step1();
		return;
	}
	// Abort enumeration, set line in suspend mode
	uhc_enumeration_suspend();
	UHC_ENUM_EVENT(uhc_dev_enum, status);
80007fcc:	fe b0 f5 e8 	rcall	80006b9c <uhd_send_reset>
80007fd0:	d8 22       	popm	r4-r7,pc
80007fd2:	fe b0 f5 ef 	rcall	80006bb0 <uhd_suspend>
	uhc_enum_try = 0;
80007fd6:	0a 9b       	mov	r11,r5
80007fd8:	08 9c       	mov	r12,r4
80007fda:	fe b0 ee 25 	rcall	80005c24 <usb_enum>
80007fde:	ae 86       	st.b	r7[0x0],r6
80007fe0:	d8 22       	popm	r4-r7,pc
80007fe2:	d7 03       	nop

80007fe4 <uhc_enumeration_step5>:
80007fe4:	d4 01       	pushm	lr
80007fe6:	20 2d       	sub	sp,8
80007fe8:	38 08       	mov	r8,-128
80007fea:	ba 88       	st.b	sp[0x0],r8
80007fec:	30 68       	mov	r8,6
80007fee:	ba 98       	st.b	sp[0x1],r8
80007ff0:	e0 68 01 00 	mov	r8,256
80007ff4:	ba 18       	st.h	sp[0x2],r8
80007ff6:	30 08       	mov	r8,0
	usb_setup_req_t req;

	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
	req.wValue = (USB_DT_DEVICE << 8);
	req.wIndex = 0;
80007ff8:	ba 28       	st.h	sp[0x4],r8
	req.wLength = offsetof(uhc_device_t, dev_desc.bMaxPacketSize0)
80007ffa:	30 88       	mov	r8,8
			+ sizeof(uhc_dev_enum->dev_desc.bMaxPacketSize0);

	// After a USB reset, the reallocation is required
	uhd_ep_free(0, 0);
80007ffc:	30 0b       	mov	r11,0

	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
	req.wValue = (USB_DT_DEVICE << 8);
	req.wIndex = 0;
	req.wLength = offsetof(uhc_device_t, dev_desc.bMaxPacketSize0)
80007ffe:	ba 38       	st.h	sp[0x6],r8
			+ sizeof(uhc_dev_enum->dev_desc.bMaxPacketSize0);

	// After a USB reset, the reallocation is required
	uhd_ep_free(0, 0);
80008000:	16 9c       	mov	r12,r11
80008002:	fe b0 f9 2b 	rcall	80007258 <uhd_ep_free>
	if (!uhd_ep0_alloc(0, 64)) {
80008006:	34 0b       	mov	r11,64
80008008:	30 0c       	mov	r12,0
8000800a:	fe b0 fa 2e 	rcall	80007466 <uhd_ep0_alloc>
8000800e:	c0 31       	brne	80008014 <uhc_enumeration_step5+0x30>
		uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
80008010:	30 4c       	mov	r12,4
80008012:	c1 18       	rjmp	80008034 <uhc_enumeration_step5+0x50>
		return;
	}
	if (!uhd_setup_request(0,
80008014:	fe c9 ff d8 	sub	r9,pc,-40
80008018:	30 08       	mov	r8,0
8000801a:	1a d9       	st.w	--sp,r9
8000801c:	e0 6a 09 74 	mov	r10,2420
80008020:	fa cb ff fc 	sub	r11,sp,-4
80008024:	31 29       	mov	r9,18
80008026:	10 9c       	mov	r12,r8
80008028:	fe b0 f8 e2 	rcall	800071ec <uhd_setup_request>
8000802c:	2f fd       	sub	sp,-4
			&req,
			(uint8_t*)&uhc_dev_enum->dev_desc,
			sizeof(usb_dev_desc_t),
			NULL,
			uhc_enumeration_step6)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
8000802e:	58 0c       	cp.w	r12,0
80008030:	c0 31       	brne	80008036 <uhc_enumeration_step5+0x52>
80008032:	30 6c       	mov	r12,6
		return;
	}
}
80008034:	ca 2f       	rcall	80007f78 <uhc_enumeration_error>
80008036:	2f ed       	sub	sp,-8
80008038:	d8 02       	popm	pc
8000803a:	d7 03       	nop

8000803c <uhc_enumeration_step6>:
8000803c:	d4 01       	pushm	lr
8000803e:	30 79       	mov	r9,7
80008040:	58 0b       	cp.w	r11,0
80008042:	5f 18       	srne	r8
80008044:	f2 0a 19 00 	cp.h	r10,r9
80008048:	5f 89       	srls	r9
8000804a:	f3 e8 10 08 	or	r8,r9,r8
8000804e:	c0 91       	brne	80008060 <uhc_enumeration_step6+0x24>
		usb_add_t add,
		uhd_trans_status_t status,
		uint16_t payload_trans)
{
	UNUSED(add);
	if ((status != UHD_TRANS_NOERROR) || (payload_trans < 8)
80008050:	e0 68 09 74 	mov	r8,2420
80008054:	11 99       	ld.ub	r9,r8[0x1]
80008056:	30 18       	mov	r8,1
80008058:	f0 09 18 00 	cp.b	r9,r8
8000805c:	c0 61       	brne	80008068 <uhc_enumeration_step6+0x2c>
			|| (uhc_dev_enum->dev_desc.bDescriptorType != USB_DT_DEVICE)) {
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
8000805e:	c0 88       	rjmp	8000806e <uhc_enumeration_step6+0x32>
80008060:	58 1b       	cp.w	r11,1
80008062:	c0 31       	brne	80008068 <uhc_enumeration_step6+0x2c>
80008064:	30 7c       	mov	r12,7
80008066:	c0 28       	rjmp	8000806a <uhc_enumeration_step6+0x2e>
80008068:	30 3c       	mov	r12,3
8000806a:	c8 7f       	rcall	80007f78 <uhc_enumeration_error>
				UHC_ENUM_DISCONNECT:UHC_ENUM_FAIL);
		return;
8000806c:	d8 02       	popm	pc
 * \param callback Callback to call at the end of timeout
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
		uhc_sof_timeout_callback_t callback)
{
	uhc_sof_timeout_callback = callback;
8000806e:	fe c9 01 22 	sub	r9,pc,290
80008072:	e0 68 09 94 	mov	r8,2452
	uhc_sof_timeout = timeout;
80008076:	91 09       	st.w	r8[0x0],r9
80008078:	31 49       	mov	r9,20
8000807a:	e0 68 1c b6 	mov	r8,7350
8000807e:	b0 89       	st.b	r8[0x0],r9
80008080:	d8 02       	popm	pc
80008082:	d7 03       	nop

80008084 <uhc_enumeration_step9>:
80008084:	d4 21       	pushm	r4-r7,lr
80008086:	20 2d       	sub	sp,8
80008088:	30 18       	mov	r8,1
8000808a:	e0 67 09 74 	mov	r7,2420
8000808e:	ba 18       	st.h	sp[0x2],r8
	}
	req.wValue = usb_addr_free;
	uhc_dev_enum->address = usb_addr_free;
#else
	req.wValue = UHC_DEVICE_ENUM_ADD;
	uhc_dev_enum->address = UHC_DEVICE_ENUM_ADD;
80008090:	ef 68 00 12 	st.b	r7[18],r8
#endif
	req.wIndex = 0;
	req.wLength = 0;
80008094:	30 08       	mov	r8,0
	uhc_dev_enum->address = usb_addr_free;
#else
	req.wValue = UHC_DEVICE_ENUM_ADD;
	uhc_dev_enum->address = UHC_DEVICE_ENUM_ADD;
#endif
	req.wIndex = 0;
80008096:	ba 38       	st.h	sp[0x6],r8
 */
static void uhc_enumeration_step9(void)
{
	usb_setup_req_t req;

	req.bmRequestType = USB_REQ_RECIP_DEVICE
80008098:	ba 28       	st.h	sp[0x4],r8
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_ADDRESS;
8000809a:	ba 88       	st.b	sp[0x0],r8
#endif
	req.wIndex = 0;
	req.wLength = 0;

	// After a USB reset, the reallocation is required
	uhd_ep_free(0, 0);
8000809c:	30 58       	mov	r8,5
{
	usb_setup_req_t req;

	req.bmRequestType = USB_REQ_RECIP_DEVICE
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_ADDRESS;
8000809e:	30 0b       	mov	r11,0
#endif
	req.wIndex = 0;
	req.wLength = 0;

	// After a USB reset, the reallocation is required
	uhd_ep_free(0, 0);
800080a0:	ba 98       	st.b	sp[0x1],r8
800080a2:	16 9c       	mov	r12,r11
800080a4:	fe b0 f8 da 	rcall	80007258 <uhd_ep_free>
	if (!uhd_ep0_alloc(0, uhc_dev_enum->dev_desc.bMaxPacketSize0)) {
800080a8:	0f fb       	ld.ub	r11,r7[0x7]
800080aa:	30 0c       	mov	r12,0
800080ac:	fe b0 f9 dd 	rcall	80007466 <uhd_ep0_alloc>
		uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
800080b0:	c0 31       	brne	800080b6 <uhc_enumeration_step9+0x32>
800080b2:	30 4c       	mov	r12,4
		return;
	}

	if (!uhd_setup_request(0,
800080b4:	c1 08       	rjmp	800080d4 <uhc_enumeration_step9+0x50>
800080b6:	fe c9 ff da 	sub	r9,pc,-38
800080ba:	30 08       	mov	r8,0
800080bc:	1a d9       	st.w	--sp,r9
800080be:	0e 9a       	mov	r10,r7
800080c0:	fa cb ff fc 	sub	r11,sp,-4
800080c4:	31 29       	mov	r9,18
800080c6:	10 9c       	mov	r12,r8
800080c8:	fe b0 f8 92 	rcall	800071ec <uhd_setup_request>
800080cc:	2f fd       	sub	sp,-4
			&req,
			(uint8_t*)&uhc_dev_enum->dev_desc,
			sizeof(usb_dev_desc_t),
			NULL,
			uhc_enumeration_step10)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
800080ce:	58 0c       	cp.w	r12,0
800080d0:	c0 31       	brne	800080d6 <uhc_enumeration_step9+0x52>
800080d2:	30 6c       	mov	r12,6
		return;
	}
}
800080d4:	c5 2f       	rcall	80007f78 <uhc_enumeration_error>
800080d6:	2f ed       	sub	sp,-8
800080d8:	d8 22       	popm	r4-r7,pc
800080da:	d7 03       	nop

800080dc <uhc_enumeration_step10>:
800080dc:	d4 01       	pushm	lr
800080de:	58 0b       	cp.w	r11,0
800080e0:	c0 80       	breq	800080f0 <uhc_enumeration_step10+0x14>
800080e2:	58 1b       	cp.w	r11,1
800080e4:	f9 bc 00 07 	moveq	r12,7
800080e8:	f9 bc 01 03 	movne	r12,3
800080ec:	c4 6f       	rcall	80007f78 <uhc_enumeration_error>
800080ee:	d8 02       	popm	pc
	UNUSED(add);
	UNUSED(payload_trans);
	if (status != UHD_TRANS_NOERROR) {
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT) ?
				UHC_ENUM_DISCONNECT : UHC_ENUM_FAIL);
		return;
800080f0:	fe c9 ff ec 	sub	r9,pc,-20
 * \param callback Callback to call at the end of timeout
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
		uhc_sof_timeout_callback_t callback)
{
	uhc_sof_timeout_callback = callback;
800080f4:	e0 68 09 94 	mov	r8,2452
	uhc_sof_timeout = timeout;
800080f8:	91 09       	st.w	r8[0x0],r9
800080fa:	31 49       	mov	r9,20
800080fc:	e0 68 1c b6 	mov	r8,7350
80008100:	b0 89       	st.b	r8[0x0],r9
80008102:	d8 02       	popm	pc

80008104 <uhc_enumeration_step11>:
80008104:	d4 21       	pushm	r4-r7,lr
80008106:	20 2d       	sub	sp,8
80008108:	30 0b       	mov	r11,0
8000810a:	16 9c       	mov	r12,r11
8000810c:	fe b0 f8 a6 	rcall	80007258 <uhd_ep_free>

	// Free address 0 used to start enumeration
	uhd_ep_free(0, 0);

	// Alloc control endpoint with the new USB address
	if (!uhd_ep0_alloc(UHC_DEVICE_ENUM_ADD,
80008110:	30 1c       	mov	r12,1
80008112:	e0 67 09 74 	mov	r7,2420
80008116:	0f fb       	ld.ub	r11,r7[0x7]
80008118:	fe b0 f9 a7 	rcall	80007466 <uhd_ep0_alloc>
			uhc_dev_enum->dev_desc.bMaxPacketSize0)) {
		uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
8000811c:	c0 31       	brne	80008122 <uhc_enumeration_step11+0x1e>
8000811e:	30 4c       	mov	r12,4
		return;
	}
	// Send USB device descriptor request
	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
80008120:	c1 b8       	rjmp	80008156 <uhc_enumeration_step11+0x52>
80008122:	38 08       	mov	r8,-128
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
80008124:	ba 88       	st.b	sp[0x0],r8
80008126:	30 68       	mov	r8,6
	req.wValue = (USB_DT_DEVICE << 8);
80008128:	ba 98       	st.b	sp[0x1],r8
8000812a:	e0 68 01 00 	mov	r8,256
	req.wIndex = 0;
8000812e:	ba 18       	st.h	sp[0x2],r8
80008130:	30 08       	mov	r8,0
	req.wLength = sizeof(usb_dev_desc_t);
80008132:	ba 28       	st.h	sp[0x4],r8
80008134:	31 28       	mov	r8,18
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
80008136:	ba 38       	st.h	sp[0x6],r8
80008138:	fe c8 ff dc 	sub	r8,pc,-36
8000813c:	0e 9a       	mov	r10,r7
8000813e:	1a d8       	st.w	--sp,r8
80008140:	31 29       	mov	r9,18
80008142:	fa cb ff fc 	sub	r11,sp,-4
80008146:	30 08       	mov	r8,0
80008148:	30 1c       	mov	r12,1
8000814a:	fe b0 f8 51 	rcall	800071ec <uhd_setup_request>
8000814e:	2f fd       	sub	sp,-4
			&req,
			(uint8_t *) & uhc_dev_enum->dev_desc,
			sizeof(usb_dev_desc_t),
			NULL, uhc_enumeration_step12)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
80008150:	58 0c       	cp.w	r12,0
80008152:	c0 31       	brne	80008158 <uhc_enumeration_step11+0x54>
80008154:	30 6c       	mov	r12,6
		return;
	}
}
80008156:	c1 1f       	rcall	80007f78 <uhc_enumeration_error>
80008158:	2f ed       	sub	sp,-8
8000815a:	d8 22       	popm	r4-r7,pc

8000815c <uhc_enumeration_step12>:
8000815c:	d4 21       	pushm	r4-r7,lr
8000815e:	20 2d       	sub	sp,8
80008160:	31 29       	mov	r9,18
80008162:	58 0b       	cp.w	r11,0
80008164:	5f 18       	srne	r8
80008166:	f2 0a 19 00 	cp.h	r10,r9
8000816a:	5f 19       	srne	r9
8000816c:	f3 e8 10 08 	or	r8,r9,r8
80008170:	c0 91       	brne	80008182 <uhc_enumeration_step12+0x26>
80008172:	e0 67 09 74 	mov	r7,2420
{
	usb_setup_req_t req;
	uint8_t conf_num;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_dev_desc_t))
80008176:	30 18       	mov	r8,1
80008178:	0f 99       	ld.ub	r9,r7[0x1]
8000817a:	f0 09 18 00 	cp.b	r9,r8
8000817e:	c0 61       	brne	8000818a <uhc_enumeration_step12+0x2e>
			|| (uhc_dev_enum->dev_desc.bDescriptorType != USB_DT_DEVICE)) {
		uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
80008180:	c0 78       	rjmp	8000818e <uhc_enumeration_step12+0x32>
80008182:	58 1b       	cp.w	r11,1
80008184:	c0 31       	brne	8000818a <uhc_enumeration_step12+0x2e>
80008186:	30 7c       	mov	r12,7
80008188:	c2 28       	rjmp	800081cc <uhc_enumeration_step12+0x70>
8000818a:	30 3c       	mov	r12,3
		conf_num = UHC_DEVICE_CONF(uhc_dev_enum);
	} else {
		conf_num = 1;
	}

	uhc_dev_enum->conf_desc = malloc(sizeof(usb_conf_desc_t));
8000818c:	c2 08       	rjmp	800081cc <uhc_enumeration_step12+0x70>
8000818e:	30 9c       	mov	r12,9
80008190:	e0 a0 03 58 	rcall	80008840 <malloc>
80008194:	8f 6c       	st.w	r7[0x18],r12
	if (uhc_dev_enum->conf_desc == NULL) {
80008196:	18 9a       	mov	r10,r12
		Assert(false);
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
	// Send USB device descriptor request
	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
80008198:	c1 90       	breq	800081ca <uhc_enumeration_step12+0x6e>
8000819a:	38 08       	mov	r8,-128
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
8000819c:	ba 88       	st.b	sp[0x0],r8
8000819e:	30 68       	mov	r8,6
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
800081a0:	ba 98       	st.b	sp[0x1],r8
800081a2:	e0 68 02 00 	mov	r8,512
	req.wIndex = 0;
800081a6:	ba 18       	st.h	sp[0x2],r8
800081a8:	30 08       	mov	r8,0
	req.wLength = sizeof(usb_conf_desc_t);
800081aa:	ba 28       	st.h	sp[0x4],r8
800081ac:	30 98       	mov	r8,9
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
800081ae:	ba 38       	st.h	sp[0x6],r8
800081b0:	fe c8 ff dc 	sub	r8,pc,-36
800081b4:	30 99       	mov	r9,9
800081b6:	1a d8       	st.w	--sp,r8
800081b8:	30 1c       	mov	r12,1
800081ba:	fa cb ff fc 	sub	r11,sp,-4
800081be:	30 08       	mov	r8,0
800081c0:	fe b0 f8 16 	rcall	800071ec <uhd_setup_request>
800081c4:	2f fd       	sub	sp,-4
			&req,
			(uint8_t *) uhc_dev_enum->conf_desc,
			sizeof(usb_conf_desc_t),
			NULL, uhc_enumeration_step13)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
800081c6:	58 0c       	cp.w	r12,0
800081c8:	c0 31       	brne	800081ce <uhc_enumeration_step12+0x72>
800081ca:	30 6c       	mov	r12,6
		return;
	}
}
800081cc:	cd 6e       	rcall	80007f78 <uhc_enumeration_error>
800081ce:	2f ed       	sub	sp,-8
800081d0:	d8 22       	popm	r4-r7,pc
800081d2:	d7 03       	nop

800081d4 <uhc_enumeration_step13>:
800081d4:	d4 21       	pushm	r4-r7,lr
800081d6:	20 2d       	sub	sp,8
800081d8:	30 99       	mov	r9,9
800081da:	58 0b       	cp.w	r11,0
800081dc:	5f 18       	srne	r8
800081de:	f2 0a 19 00 	cp.h	r10,r9
800081e2:	5f 19       	srne	r9
	uint16_t conf_size;
	uint16_t bus_power = 0;
	usb_setup_req_t req;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_conf_desc_t))
800081e4:	f3 e8 10 08 	or	r8,r9,r8
800081e8:	c0 a1       	brne	800081fc <uhc_enumeration_step13+0x28>
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)) {
800081ea:	e0 65 09 74 	mov	r5,2420
800081ee:	30 29       	mov	r9,2
	uint16_t conf_size;
	uint16_t bus_power = 0;
	usb_setup_req_t req;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_conf_desc_t))
800081f0:	6a 68       	ld.w	r8,r5[0x18]
800081f2:	11 9a       	ld.ub	r10,r8[0x1]
800081f4:	f2 0a 18 00 	cp.b	r10,r9
800081f8:	c0 61       	brne	80008204 <uhc_enumeration_step13+0x30>
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)) {
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
800081fa:	c0 78       	rjmp	80008208 <uhc_enumeration_step13+0x34>
800081fc:	58 1b       	cp.w	r11,1
800081fe:	c0 31       	brne	80008204 <uhc_enumeration_step13+0x30>
80008200:	30 7c       	mov	r12,7
80008202:	c3 08       	rjmp	80008262 <uhc_enumeration_step13+0x8e>
80008204:	30 3c       	mov	r12,3
	uhc_dev_enum->power = bus_power;
	uhc_power_running += bus_power;
#endif

	// Save information about USB configuration descriptor size
	conf_size = le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength);
80008206:	c2 e8       	rjmp	80008262 <uhc_enumeration_step13+0x8e>
	conf_num = uhc_dev_enum->conf_desc->bConfigurationValue;
	Assert(conf_num);
	// Re alloc USB configuration descriptor
	free(uhc_dev_enum->conf_desc);
80008208:	11 b9       	ld.ub	r9,r8[0x3]
	uhc_dev_enum->power = bus_power;
	uhc_power_running += bus_power;
#endif

	// Save information about USB configuration descriptor size
	conf_size = le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength);
8000820a:	10 9c       	mov	r12,r8
	conf_num = uhc_dev_enum->conf_desc->bConfigurationValue;
8000820c:	11 a6       	ld.ub	r6,r8[0x2]
	uhc_dev_enum->power = bus_power;
	uhc_power_running += bus_power;
#endif

	// Save information about USB configuration descriptor size
	conf_size = le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength);
8000820e:	11 d4       	ld.ub	r4,r8[0x5]
80008210:	f3 e6 10 86 	or	r6,r9,r6<<0x8
80008214:	ec 08 16 08 	lsr	r8,r6,0x8
80008218:	f1 e6 10 86 	or	r6,r8,r6<<0x8
	conf_num = uhc_dev_enum->conf_desc->bConfigurationValue;
	Assert(conf_num);
	// Re alloc USB configuration descriptor
	free(uhc_dev_enum->conf_desc);
8000821c:	e0 a0 03 0a 	rcall	80008830 <free>
	uhc_dev_enum->conf_desc = malloc(conf_size);
80008220:	5c 86       	casts.h	r6
80008222:	ef d6 c0 10 	bfextu	r7,r6,0x0,0x10
80008226:	0e 9c       	mov	r12,r7
80008228:	e0 a0 03 0c 	rcall	80008840 <malloc>
8000822c:	8b 6c       	st.w	r5[0x18],r12
	if (uhc_dev_enum->conf_desc == NULL) {
8000822e:	18 9a       	mov	r10,r12
		Assert(false);
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
	// Send USB device descriptor request
	req.bmRequestType =
80008230:	c1 80       	breq	80008260 <uhc_enumeration_step13+0x8c>
80008232:	38 08       	mov	r8,-128
			USB_REQ_RECIP_DEVICE | USB_REQ_TYPE_STANDARD |
			USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
80008234:	ba 88       	st.b	sp[0x0],r8
80008236:	30 68       	mov	r8,6
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
	req.wIndex = 0;
80008238:	ba 98       	st.b	sp[0x1],r8
8000823a:	30 08       	mov	r8,0
	req.wLength = conf_size;
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
8000823c:	ba 28       	st.h	sp[0x4],r8
			USB_REQ_RECIP_DEVICE | USB_REQ_TYPE_STANDARD |
			USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
	req.wIndex = 0;
	req.wLength = conf_size;
8000823e:	fe c8 ff d6 	sub	r8,pc,-42
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
80008242:	ba 36       	st.h	sp[0x6],r6
	// Send USB device descriptor request
	req.bmRequestType =
			USB_REQ_RECIP_DEVICE | USB_REQ_TYPE_STANDARD |
			USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
80008244:	20 14       	sub	r4,1
	req.wIndex = 0;
	req.wLength = conf_size;
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
80008246:	0e 99       	mov	r9,r7
	// Send USB device descriptor request
	req.bmRequestType =
			USB_REQ_RECIP_DEVICE | USB_REQ_TYPE_STANDARD |
			USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
80008248:	a9 b4       	sbr	r4,0x9
	req.wIndex = 0;
	req.wLength = conf_size;
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
8000824a:	30 1c       	mov	r12,1
8000824c:	ba 14       	st.h	sp[0x2],r4
8000824e:	1a d8       	st.w	--sp,r8
80008250:	30 08       	mov	r8,0
80008252:	fa cb ff fc 	sub	r11,sp,-4
80008256:	fe b0 f7 cb 	rcall	800071ec <uhd_setup_request>
8000825a:	2f fd       	sub	sp,-4
			&req,
			(uint8_t *) uhc_dev_enum->conf_desc,
			conf_size,
			NULL, uhc_enumeration_step14)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
8000825c:	58 0c       	cp.w	r12,0
8000825e:	c0 31       	brne	80008264 <uhc_enumeration_step13+0x90>
80008260:	30 6c       	mov	r12,6
		return;
	}
}
80008262:	c8 be       	rcall	80007f78 <uhc_enumeration_error>
80008264:	2f ed       	sub	sp,-8
80008266:	d8 22       	popm	r4-r7,pc

80008268 <uhc_enumeration_step14>:
80008268:	d4 21       	pushm	r4-r7,lr
8000826a:	20 2d       	sub	sp,8
8000826c:	30 89       	mov	r9,8
8000826e:	58 0b       	cp.w	r11,0
80008270:	5f 18       	srne	r8
80008272:	f2 0a 19 00 	cp.h	r10,r9
80008276:	5f 89       	srls	r9
80008278:	f3 e8 10 08 	or	r8,r9,r8
8000827c:	c1 e1       	brne	800082b8 <uhc_enumeration_step14+0x50>
8000827e:	e0 67 09 74 	mov	r7,2420
	bool b_conf_supported = false;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR)
			|| (payload_trans < sizeof(usb_conf_desc_t))
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)
80008282:	30 29       	mov	r9,2
{
	usb_setup_req_t req;
	bool b_conf_supported = false;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR)
80008284:	6e 68       	ld.w	r8,r7[0x18]
80008286:	11 9b       	ld.ub	r11,r8[0x1]
80008288:	f2 0b 18 00 	cp.b	r11,r9
			|| (payload_trans < sizeof(usb_conf_desc_t))
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)
			|| (payload_trans != le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength))) {
8000828c:	c1 a1       	brne	800082c0 <uhc_enumeration_step14+0x58>
8000828e:	11 b9       	ld.ub	r9,r8[0x3]
{
	usb_setup_req_t req;
	bool b_conf_supported = false;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR)
80008290:	11 a8       	ld.ub	r8,r8[0x2]
80008292:	f3 e8 10 88 	or	r8,r9,r8<<0x8
80008296:	f0 09 16 08 	lsr	r9,r8,0x8
8000829a:	f3 e8 10 88 	or	r8,r9,r8<<0x8
8000829e:	f0 0a 19 00 	cp.h	r10,r8
				UHC_ENUM_DISCONNECT:UHC_ENUM_FAIL);
		return;
	}
	// Check if unless one USB interface is supported by UHIs
	for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
		switch (uhc_uhis[i].install(uhc_dev_enum)) {
800082a2:	c0 f1       	brne	800082c0 <uhc_enumeration_step14+0x58>
800082a4:	0e 9c       	mov	r12,r7
800082a6:	fe c8 e6 fe 	sub	r8,pc,-6402
800082aa:	70 08       	ld.w	r8,r8[0x0]
800082ac:	5d 18       	icall	r8
800082ae:	18 9b       	mov	r11,r12
800082b0:	c1 80       	breq	800082e0 <uhc_enumeration_step14+0x78>
800082b2:	58 1c       	cp.w	r12,1

	if ((status != UHD_TRANS_NOERROR)
			|| (payload_trans < sizeof(usb_conf_desc_t))
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)
			|| (payload_trans != le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength))) {
		uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
800082b4:	c0 81       	brne	800082c4 <uhc_enumeration_step14+0x5c>
800082b6:	c0 f8       	rjmp	800082d4 <uhc_enumeration_step14+0x6c>
800082b8:	58 1b       	cp.w	r11,1
800082ba:	c0 31       	brne	800082c0 <uhc_enumeration_step14+0x58>
800082bc:	30 7c       	mov	r12,7
800082be:	c2 88       	rjmp	8000830e <uhc_enumeration_step14+0xa6>
			break;

		default:
			// USB host hardware limitation
			// Free all endpoints
			uhd_ep_free(UHC_DEVICE_ENUM_ADD,0xFF);
800082c0:	30 3c       	mov	r12,3
800082c2:	c2 68       	rjmp	8000830e <uhc_enumeration_step14+0xa6>
800082c4:	e0 6b 00 ff 	mov	r11,255
800082c8:	30 1c       	mov	r12,1
			UHC_ENUM_EVENT(uhc_dev_enum,UHC_ENUM_HARDWARE_LIMIT);
800082ca:	fe b0 f7 c7 	rcall	80007258 <uhd_ep_free>
800082ce:	0e 9c       	mov	r12,r7
			return;
		}
	}
	if (!b_conf_supported) {
		// No USB interface supported
		UHC_ENUM_EVENT(uhc_dev_enum, UHC_ENUM_UNSUPPORTED);
800082d0:	30 4b       	mov	r11,4
800082d2:	c0 28       	rjmp	800082d6 <uhc_enumeration_step14+0x6e>
800082d4:	0e 9c       	mov	r12,r7
		uhi_hub_suspend(uhc_dev_enum);
	} else
#endif
	{
		// Suspend USB line
		uhd_suspend();
800082d6:	fe b0 ec a7 	rcall	80005c24 <usb_enum>
800082da:	fe b0 f4 6b 	rcall	80006bb0 <uhd_suspend>
	}
	// Enable device configuration
	req.bmRequestType = USB_REQ_RECIP_DEVICE
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_CONFIGURATION;
	req.wValue = uhc_dev_enum->conf_desc->bConfigurationValue;
800082de:	c1 98       	rjmp	80008310 <uhc_enumeration_step14+0xa8>
		return;
	}
	// Enable device configuration
	req.bmRequestType = USB_REQ_RECIP_DEVICE
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_CONFIGURATION;
800082e0:	ba 8c       	st.b	sp[0x0],r12
800082e2:	6e 69       	ld.w	r9,r7[0x18]
	req.wValue = uhc_dev_enum->conf_desc->bConfigurationValue;
800082e4:	30 9a       	mov	r10,9
800082e6:	ba 9a       	st.b	sp[0x1],r10
	req.wIndex = 0;
	req.wLength = 0;
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
800082e8:	13 d9       	ld.ub	r9,r9[0x5]
	// Enable device configuration
	req.bmRequestType = USB_REQ_RECIP_DEVICE
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_CONFIGURATION;
	req.wValue = uhc_dev_enum->conf_desc->bConfigurationValue;
	req.wIndex = 0;
800082ea:	ba 19       	st.h	sp[0x2],r9
	req.wLength = 0;
800082ec:	fe c9 ff d8 	sub	r9,pc,-40
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
800082f0:	ba 2c       	st.h	sp[0x4],r12
800082f2:	ba 3c       	st.h	sp[0x6],r12
800082f4:	18 98       	mov	r8,r12
800082f6:	1a d9       	st.w	--sp,r9
800082f8:	18 9a       	mov	r10,r12
800082fa:	18 99       	mov	r9,r12
800082fc:	fa cb ff fc 	sub	r11,sp,-4
80008300:	30 1c       	mov	r12,1
80008302:	fe b0 f7 75 	rcall	800071ec <uhd_setup_request>
			&req,
			NULL,
			0,
			NULL, uhc_enumeration_step15)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
80008306:	2f fd       	sub	sp,-4
80008308:	58 0c       	cp.w	r12,0
8000830a:	c0 31       	brne	80008310 <uhc_enumeration_step14+0xa8>
		return;
	}
}
8000830c:	30 6c       	mov	r12,6
8000830e:	c3 5e       	rcall	80007f78 <uhc_enumeration_error>
80008310:	2f ed       	sub	sp,-8
80008312:	d8 22       	popm	r4-r7,pc

80008314 <uhc_enumeration_step15>:
80008314:	d4 21       	pushm	r4-r7,lr
80008316:	30 08       	mov	r8,0
80008318:	58 0b       	cp.w	r11,0
8000831a:	5f 19       	srne	r9
8000831c:	f0 0a 19 00 	cp.h	r10,r8
80008320:	5f 16       	srne	r6
80008322:	16 97       	mov	r7,r11
80008324:	12 46       	or	r6,r9
80008326:	10 99       	mov	r9,r8
80008328:	fe c8 e7 80 	sub	r8,pc,-6272
8000832c:	f2 06 18 00 	cp.b	r6,r9
		return;
	}

	// Enable all UHIs supported
	for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
		uhc_uhis[i].enable(uhc_dev_enum);
80008330:	c0 e1       	brne	8000834c <uhc_enumeration_step15+0x38>
80008332:	70 18       	ld.w	r8,r8[0x4]
80008334:	e0 6c 09 74 	mov	r12,2420
	uhc_dev_enum->lpm_desc = NULL;
#endif

	uhc_enum_try = 0;

	UHC_ENUM_EVENT(uhc_dev_enum, UHC_ENUM_SUCCESS);
80008338:	5d 18       	icall	r8
		return;
	}
	uhc_dev_enum->lpm_desc = NULL;
#endif

	uhc_enum_try = 0;
8000833a:	e0 68 09 90 	mov	r8,2448

	UHC_ENUM_EVENT(uhc_dev_enum, UHC_ENUM_SUCCESS);
8000833e:	30 0b       	mov	r11,0
80008340:	b0 86       	st.b	r8[0x0],r6
80008342:	e0 6c 09 74 	mov	r12,2420
		uint16_t payload_trans)
{
	UNUSED(add);
	if ((status!=UHD_TRANS_NOERROR) || (payload_trans!=0)) {
		for(uint8_t i = 0; i < UHC_NB_UHI; i++) {
			uhc_uhis[i].uninstall(uhc_dev_enum);
80008346:	fe b0 ec 6f 	rcall	80005c24 <usb_enum>
		}
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
8000834a:	d8 22       	popm	r4-r7,pc
8000834c:	70 28       	ld.w	r8,r8[0x8]
8000834e:	e0 6c 09 74 	mov	r12,2420
80008352:	5d 18       	icall	r8
80008354:	58 17       	cp.w	r7,1
80008356:	f9 bc 00 07 	moveq	r12,7
8000835a:	f9 bc 01 03 	movne	r12,3
8000835e:	c0 de       	rcall	80007f78 <uhc_enumeration_error>
80008360:	d8 22       	popm	r4-r7,pc
80008362:	d7 03       	nop

80008364 <uhc_notify_connection>:
80008364:	d4 21       	pushm	r4-r7,lr
80008366:	e0 67 09 74 	mov	r7,2420
8000836a:	18 96       	mov	r6,r12
8000836c:	58 0c       	cp.w	r12,0
8000836e:	c0 81       	brne	8000837e <uhc_notify_connection+0x1a>

#ifdef USB_HOST_HUB_SUPPORT
		uhc_power_running = 0;
#endif
	} else {
		if (g_uhc_device_root.address == UHC_USB_ADD_NOT_VALID) {
80008370:	ef 3c 00 12 	ld.ub	r12,r7[18]
80008374:	3f f5       	mov	r5,-1
80008376:	ea 0c 18 00 	cp.b	r12,r5
8000837a:	c1 31       	brne	800083a0 <uhc_notify_connection+0x3c>
	if (b_plug) {
		uhc_enum_try = 1;
#ifdef USB_HOST_HUB_SUPPORT
		uhc_dev_enum = dev;
#endif
		uhc_dev_enum->conf_desc = NULL;
8000837c:	d8 22       	popm	r4-r7,pc
 * \param dev      Information about device connected or disconnected
 */
static void uhc_connection_tree(bool b_plug, uhc_device_t* dev)
{
	if (b_plug) {
		uhc_enum_try = 1;
8000837e:	30 08       	mov	r8,0
#ifdef USB_HOST_HUB_SUPPORT
		uhc_dev_enum = dev;
#endif
		uhc_dev_enum->conf_desc = NULL;
		uhc_dev_enum->address = 0;
80008380:	30 19       	mov	r9,1
80008382:	ef 68 00 12 	st.b	r7[18],r8
 * \param dev      Information about device connected or disconnected
 */
static void uhc_connection_tree(bool b_plug, uhc_device_t* dev)
{
	if (b_plug) {
		uhc_enum_try = 1;
80008386:	8f 68       	st.w	r7[0x18],r8
#ifdef USB_HOST_HUB_SUPPORT
		uhc_dev_enum = dev;
#endif
		uhc_dev_enum->conf_desc = NULL;
		uhc_dev_enum->address = 0;
		UHC_CONNECTION_EVENT(uhc_dev_enum, true);
80008388:	e0 68 09 90 	mov	r8,2448
8000838c:	0e 9c       	mov	r12,r7
8000838e:	b0 89       	st.b	r8[0x0],r9
80008390:	30 1b       	mov	r11,1
		// Device connected on USB hub
		uhi_hub_send_reset(uhc_dev_enum, callback);
	} else
#endif
	{
		uhd_send_reset(callback);
80008392:	fe b0 ec 46 	rcall	80005c1e <usb_connection>
80008396:	fe cc 05 2a 	sub	r12,pc,1322
		UHC_CONNECTION_EVENT(uhc_dev_enum, true);
		uhc_enumeration_step1();
	} else {
		if (uhc_dev_enum == dev) {
			// Eventually stop enumeration timeout on-going on this device
			uhc_sof_timeout = 0;
8000839a:	fe b0 f4 01 	rcall	80006b9c <uhd_send_reset>
		}
		// Abort all transfers (endpoint control and other) and free pipe(s)
		uhd_ep_free(dev->address, 0xFF);
8000839e:	d8 22       	popm	r4-r7,pc
		UHC_CONNECTION_EVENT(uhc_dev_enum, true);
		uhc_enumeration_step1();
	} else {
		if (uhc_dev_enum == dev) {
			// Eventually stop enumeration timeout on-going on this device
			uhc_sof_timeout = 0;
800083a0:	e0 68 1c b6 	mov	r8,7350
		}
		// Abort all transfers (endpoint control and other) and free pipe(s)
		uhd_ep_free(dev->address, 0xFF);
800083a4:	e0 6b 00 ff 	mov	r11,255

		// Disable all USB interfaces (this includes HUB interface)
		for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
			uhc_uhis[i].uninstall(dev);
800083a8:	b0 86       	st.b	r8[0x0],r6
800083aa:	fe b0 f7 57 	rcall	80007258 <uhd_ep_free>
		}

		UHC_CONNECTION_EVENT(dev, false);
800083ae:	0e 9c       	mov	r12,r7
800083b0:	fe c8 e8 08 	sub	r8,pc,-6136
800083b4:	70 28       	ld.w	r8,r8[0x8]
		dev->address = UHC_USB_ADD_NOT_VALID;
800083b6:	5d 18       	icall	r8
800083b8:	0e 9c       	mov	r12,r7
		// Free USB configuration descriptor buffer
		if (dev->conf_desc != NULL) {
800083ba:	0c 9b       	mov	r11,r6
800083bc:	fe b0 ec 31 	rcall	80005c1e <usb_connection>
			free(dev->conf_desc);
800083c0:	ef 65 00 12 	st.b	r7[18],r5
800083c4:	6e 6c       	ld.w	r12,r7[0x18]
800083c6:	58 0c       	cp.w	r12,0
800083c8:	c0 30       	breq	800083ce <uhc_notify_connection+0x6a>
800083ca:	e0 a0 02 33 	rcall	80008830 <free>
800083ce:	d8 22       	popm	r4-r7,pc

800083d0 <sysclk_priv_disable_module>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800083d0:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800083d4:	d3 03       	ssrf	0x10

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
800083d6:	fe 7a 0c 00 	mov	r10,-62464
800083da:	75 58       	ld.w	r8,r10[0x54]
800083dc:	ed b8 00 06 	bld	r8,0x6
800083e0:	cf d1       	brne	800083da <sysclk_priv_disable_module+0xa>
		/* Do nothing */
	}

	/* Disable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
	mask &= ~(1U << module_index);
800083e2:	30 18       	mov	r8,1
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Disable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
800083e4:	a3 6c       	lsl	r12,0x2
	mask &= ~(1U << module_index);
800083e6:	f0 0b 09 4b 	lsl	r11,r8,r11
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Disable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
800083ea:	e0 2c f3 f8 	sub	r12,62456
	mask &= ~(1U << module_index);
800083ee:	5c db       	com	r11
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Disable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
800083f0:	78 08       	ld.w	r8,r12[0x0]
	mask &= ~(1U << module_index);
800083f2:	10 6b       	and	r11,r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
800083f4:	99 0b       	st.w	r12[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800083f6:	ed b9 00 10 	bld	r9,0x10
800083fa:	c0 20       	breq	800083fe <sysclk_priv_disable_module+0x2e>
      cpu_irq_enable();
800083fc:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
800083fe:	5e fc       	retal	r12

80008400 <sysclk_disable_pbb_module>:
/**
 * \brief Disable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_disable_pbb_module(unsigned int index)
{
80008400:	d4 21       	pushm	r4-r7,lr
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(AVR32_PM_CLK_GRP_PBB, index);
80008402:	18 9b       	mov	r11,r12
80008404:	30 3c       	mov	r12,3
80008406:	ce 5f       	rcall	800083d0 <sysclk_priv_disable_module>
80008408:	e1 b7 00 00 	mfsr	r7,0x0

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000840c:	d3 03       	ssrf	0x10
	cpu_irq_disable();
8000840e:	e0 69 09 98 	mov	r9,2456

	/* Disable the bridge if possible */
	flags = cpu_irq_save();

	sysclk_pbb_refcount--;
80008412:	13 88       	ld.ub	r8,r9[0x0]
80008414:	20 18       	sub	r8,1
80008416:	5c 58       	castu.b	r8
80008418:	b2 88       	st.b	r9[0x0],r8
	if (!sysclk_pbb_refcount)
8000841a:	c0 41       	brne	80008422 <sysclk_disable_pbb_module+0x22>
 * \brief Disable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(unsigned int index)
{
	sysclk_priv_disable_module(AVR32_PM_CLK_GRP_HSB, index);
8000841c:	30 2b       	mov	r11,2
8000841e:	30 1c       	mov	r12,1
80008420:	cd 8f       	rcall	800083d0 <sysclk_priv_disable_module>
80008422:	e6 17 00 01 	andh	r7,0x1,COH
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80008426:	c0 21       	brne	8000842a <sysclk_disable_pbb_module+0x2a>
80008428:	d5 03       	csrf	0x10
      cpu_irq_enable();
8000842a:	d8 22       	popm	r4-r7,pc

8000842c <sysclk_disable_usb>:
		sysclk_disable_hsb_module(SYSCLK_PBB_BRIDGE);

	cpu_irq_restore(flags);
}
8000842c:	d4 01       	pushm	lr
8000842e:	30 09       	mov	r9,0
80008430:	fe 78 0c 00 	mov	r8,-62464
80008434:	30 1c       	mov	r12,1
80008436:	f1 49 00 6c 	st.w	r8[108],r9
8000843a:	30 3b       	mov	r11,3
8000843c:	cc af       	rcall	800083d0 <sysclk_priv_disable_module>
8000843e:	30 1c       	mov	r12,1
 */
void sysclk_disable_usb(void)
{
	genclk_disable(AVR32_PM_GCLK_USBB);
	sysclk_disable_hsb_module(SYSCLK_USBB_DATA);
	sysclk_disable_pbb_module(SYSCLK_USBB_REGS);
80008440:	ce 0f       	rcall	80008400 <sysclk_disable_pbb_module>
80008442:	d8 02       	popm	pc

80008444 <sysclk_priv_enable_module>:
80008444:	e1 b9 00 00 	mfsr	r9,0x0
}
80008448:	d3 03       	ssrf	0x10
8000844a:	fe 7a 0c 00 	mov	r10,-62464
8000844e:	75 58       	ld.w	r8,r10[0x54]

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80008450:	ed b8 00 06 	bld	r8,0x6
80008454:	cf d1       	brne	8000844e <sysclk_priv_enable_module+0xa>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
	mask |= 1U << module_index;
80008456:	30 18       	mov	r8,1
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80008458:	a3 6c       	lsl	r12,0x2
	mask |= 1U << module_index;
8000845a:	f0 0b 09 4b 	lsl	r11,r8,r11
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
8000845e:	e0 2c f3 f8 	sub	r12,62456
80008462:	78 08       	ld.w	r8,r12[0x0]
	mask |= 1U << module_index;
80008464:	10 4b       	or	r11,r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
80008466:	99 0b       	st.w	r12[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80008468:	ed b9 00 10 	bld	r9,0x10
8000846c:	c0 20       	breq	80008470 <sysclk_priv_enable_module+0x2c>
      cpu_irq_enable();
8000846e:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
80008470:	5e fc       	retal	r12
80008472:	d7 03       	nop

80008474 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
80008474:	d4 21       	pushm	r4-r7,lr
80008476:	18 97       	mov	r7,r12

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80008478:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
8000847c:	d3 03       	ssrf	0x10
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (!sysclk_pbb_refcount)
8000847e:	e0 68 09 98 	mov	r8,2456
80008482:	11 89       	ld.ub	r9,r8[0x0]
80008484:	30 08       	mov	r8,0
80008486:	f0 09 18 00 	cp.b	r9,r8
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
8000848a:	c0 41       	brne	80008492 <sysclk_enable_pbb_module+0x1e>
8000848c:	30 2b       	mov	r11,2
8000848e:	30 1c       	mov	r12,1
80008490:	cd af       	rcall	80008444 <sysclk_priv_enable_module>
		sysclk_enable_hsb_module(SYSCLK_PBB_BRIDGE);
	sysclk_pbb_refcount++;
80008492:	e0 68 09 98 	mov	r8,2456
80008496:	11 89       	ld.ub	r9,r8[0x0]
80008498:	2f f9       	sub	r9,-1
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000849a:	b0 89       	st.b	r8[0x0],r9
8000849c:	e6 16 00 01 	andh	r6,0x1,COH
      cpu_irq_enable();
800084a0:	c0 21       	brne	800084a4 <sysclk_enable_pbb_module+0x30>

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
800084a2:	d5 03       	csrf	0x10
800084a4:	30 3c       	mov	r12,3
800084a6:	0e 9b       	mov	r11,r7
800084a8:	cc ef       	rcall	80008444 <sysclk_priv_enable_module>
}
800084aa:	d8 22       	popm	r4-r7,pc

800084ac <T.62>:
800084ac:	fe 78 0c 00 	mov	r8,-62464
800084b0:	71 59       	ld.w	r9,r8[0x54]
800084b2:	ed b9 00 07 	bld	r9,0x7

static inline void pll_enable_source(enum pll_source src)
{
	switch (src) {
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
800084b6:	5e 0c       	reteq	r12

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800084b8:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800084bc:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
800084be:	e0 6a 03 07 	mov	r10,775
800084c2:	91 aa       	st.w	r8[0x28],r10
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
800084c4:	70 0a       	ld.w	r10,r8[0x0]
800084c6:	a3 aa       	sbr	r10,0x2
800084c8:	91 0a       	st.w	r8[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800084ca:	ed b9 00 10 	bld	r9,0x10
800084ce:	c0 20       	breq	800084d2 <T.62+0x26>
      cpu_irq_enable();
800084d0:	d5 03       	csrf	0x10
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
800084d2:	fe 79 0c 00 	mov	r9,-62464
800084d6:	73 58       	ld.w	r8,r9[0x54]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
800084d8:	ed b8 00 07 	bld	r8,0x7
800084dc:	cf d1       	brne	800084d6 <T.62+0x2a>
800084de:	5e fc       	retal	r12

800084e0 <pll_enable_config_defaults>:
		break;
	}
}

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
800084e0:	d4 21       	pushm	r4-r7,lr

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
800084e2:	fe 78 0c 00 	mov	r8,-62464
800084e6:	71 58       	ld.w	r8,r8[0x54]
800084e8:	30 16       	mov	r6,1
		break;
	}
}

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
800084ea:	18 97       	mov	r7,r12

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
800084ec:	ec 0c 09 46 	lsl	r6,r6,r12
{
	struct pll_config pllcfg;

	pllcfg.ctrl = 0;	// HACK 8/4/14 (bc) to remove warning

	if (pll_is_locked(pll_id)) {
800084f0:	ed e8 00 08 	and	r8,r6,r8
800084f4:	c1 b1       	brne	8000852a <pll_enable_config_defaults+0x4a>
		return; // Pll already running
	}
	switch (pll_id) {
800084f6:	58 0c       	cp.w	r12,0
800084f8:	c0 40       	breq	80008500 <pll_enable_config_defaults+0x20>
800084fa:	58 1c       	cp.w	r12,1
800084fc:	c0 d1       	brne	80008516 <pll_enable_config_defaults+0x36>
800084fe:	c0 78       	rjmp	8000850c <pll_enable_config_defaults+0x2c>
#ifdef CONFIG_PLL0_SOURCE
	case 0:
		pll_enable_source(CONFIG_PLL0_SOURCE);
80008500:	cd 6f       	rcall	800084ac <T.62>
80008502:	e0 68 01 0c 	mov	r8,268
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert((mul > 2) && (mul <= 16));
	Assert((div > 0) && (div <= 15));

	cfg->ctrl |= ((mul - 1) << AVR32_PM_PLL0_PLLMUL)
80008506:	ea 18 3f 09 	orh	r8,0x3f09
8000850a:	c0 68       	rjmp	80008516 <pll_enable_config_defaults+0x36>
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_init(&pllcfg,
				CONFIG_PLL0_SOURCE,
				CONFIG_PLL0_DIV,
				CONFIG_PLL0_MUL);
		break;
8000850c:	cd 0f       	rcall	800084ac <T.62>
#endif
#ifdef CONFIG_PLL1_SOURCE
	case 1:
		pll_enable_source(CONFIG_PLL1_SOURCE);
8000850e:	e0 68 01 0c 	mov	r8,268
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert((mul > 2) && (mul <= 16));
	Assert((div > 0) && (div <= 15));

	cfg->ctrl |= ((mul - 1) << AVR32_PM_PLL0_PLLMUL)
80008512:	ea 18 3f 07 	orh	r8,0x3f07
80008516:	a1 a8       	sbr	r8,0x0
80008518:	2f 87       	sub	r7,-8
static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
8000851a:	fe 79 0c 00 	mov	r9,-62464
8000851e:	f2 07 09 28 	st.w	r9[r7<<0x2],r8
80008522:	73 58       	ld.w	r8,r9[0x54]
80008524:	ed e8 00 08 	and	r8,r6,r8
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
80008528:	cf d0       	breq	80008522 <pll_enable_config_defaults+0x42>
8000852a:	d8 22       	popm	r4-r7,pc

8000852c <sysclk_init>:
8000852c:	d4 01       	pushm	lr
8000852e:	30 0c       	mov	r12,0
80008530:	cd 8f       	rcall	800084e0 <pll_enable_config_defaults>
80008532:	e0 6c 87 00 	mov	r12,34560

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
80008536:	ea 1c 03 93 	orh	r12,0x393
8000853a:	fe b0 ed 6d 	rcall	80006014 <flashc_set_bus_freq>
8000853e:	e1 b9 00 00 	mfsr	r9,0x0

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80008542:	d3 03       	ssrf	0x10
	cpu_irq_disable();
80008544:	fe 7a 0c 00 	mov	r10,-62464
	irqflags_t flags;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
80008548:	74 08       	ld.w	r8,r10[0x0]
8000854a:	e0 18 ff fc 	andl	r8,0xfffc
8000854e:	a1 b8       	sbr	r8,0x1
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
80008550:	95 08       	st.w	r10[0x0],r8
	AVR32_PM.mcctrl = mcctrl;
80008552:	ed b9 00 10 	bld	r9,0x10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80008556:	c0 20       	breq	8000855a <sysclk_init+0x2e>
80008558:	d5 03       	csrf	0x10
      cpu_irq_enable();
8000855a:	d8 02       	popm	pc

8000855c <sysclk_enable_usb>:

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
8000855c:	d4 01       	pushm	lr
8000855e:	30 1c       	mov	r12,1
80008560:	c8 af       	rcall	80008474 <sysclk_enable_pbb_module>
80008562:	30 3b       	mov	r11,3
80008564:	30 1c       	mov	r12,1
80008566:	c6 ff       	rcall	80008444 <sysclk_priv_enable_module>
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80008568:	30 1c       	mov	r12,1
8000856a:	cb bf       	rcall	800084e0 <pll_enable_config_defaults>
	}
#endif

#ifdef CONFIG_PLL1_SOURCE
	case GENCLK_SRC_PLL1: {
		pll_enable_config_defaults(1);
8000856c:	30 79       	mov	r9,7
8000856e:	fe 78 0c 00 	mov	r8,-62464
}

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
80008572:	f1 49 00 6c 	st.w	r8[108],r9
80008576:	d8 02       	popm	pc

80008578 <__avr32_udiv64>:
#endif

#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
80008578:	d4 31       	pushm	r0-r7,lr
8000857a:	1a 97       	mov	r7,sp
8000857c:	20 2d       	sub	sp,8
  DWunion rr;
  UWtype d0, d1, n0, n1, n2;
  UWtype q0, q1;
  UWtype b, bm;

  d0 = dd.s.low;
8000857e:	10 9c       	mov	r12,r8
  d1 = dd.s.high;
80008580:	12 9e       	mov	lr,r9
  n0 = nn.s.low;
80008582:	14 93       	mov	r3,r10
	}
    }

#else /* UDIV_NEEDS_NORMALIZATION */

  if (d1 == 0)
80008584:	58 09       	cp.w	r9,0
80008586:	e0 81 00 cd 	brne	80008720 <__avr32_udiv64+0x1a8>
    {
      if (d0 > n1)
8000858a:	16 38       	cp.w	r8,r11
8000858c:	e0 88 00 45 	brls	80008616 <__avr32_udiv64+0x9e>
	{
	  /* 0q = nn / 0D */

	  count_leading_zeros (bm, d0);
80008590:	f0 08 12 00 	clz	r8,r8

	  if (bm != 0)
80008594:	c0 d0       	breq	800085ae <__avr32_udiv64+0x36>
	    {
	      /* Normalize, i.e. make the most significant bit of the
		 denominator set.  */

	      d0 = d0 << bm;
	      n1 = (n1 << bm) | (n0 >> (W_TYPE_SIZE - bm));
80008596:	f6 08 09 4b 	lsl	r11,r11,r8
8000859a:	f0 09 11 20 	rsub	r9,r8,32
	  if (bm != 0)
	    {
	      /* Normalize, i.e. make the most significant bit of the
		 denominator set.  */

	      d0 = d0 << bm;
8000859e:	f8 08 09 4c 	lsl	r12,r12,r8
	      n1 = (n1 << bm) | (n0 >> (W_TYPE_SIZE - bm));
800085a2:	f4 09 0a 49 	lsr	r9,r10,r9
	      n0 = n0 << bm;
800085a6:	f4 08 09 43 	lsl	r3,r10,r8
	    {
	      /* Normalize, i.e. make the most significant bit of the
		 denominator set.  */

	      d0 = d0 << bm;
	      n1 = (n1 << bm) | (n0 >> (W_TYPE_SIZE - bm));
800085aa:	f3 eb 10 0b 	or	r11,r9,r11
	      n0 = n0 << bm;
	    }

	  udiv_qrnnd (q0, n0, n1, n0, d0);
800085ae:	f8 0e 16 10 	lsr	lr,r12,0x10
800085b2:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
800085b6:	f6 0e 0d 00 	divu	r0,r11,lr
800085ba:	e6 0b 16 10 	lsr	r11,r3,0x10
800085be:	00 99       	mov	r9,r0
800085c0:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800085c4:	e0 0a 02 48 	mul	r8,r0,r10
800085c8:	10 3b       	cp.w	r11,r8
800085ca:	c0 d2       	brcc	800085e4 <__avr32_udiv64+0x6c>
800085cc:	20 19       	sub	r9,1
800085ce:	18 0b       	add	r11,r12
800085d0:	18 3b       	cp.w	r11,r12
800085d2:	c0 93       	brcs	800085e4 <__avr32_udiv64+0x6c>
800085d4:	f2 c5 00 01 	sub	r5,r9,1
800085d8:	f6 0c 00 06 	add	r6,r11,r12
800085dc:	10 3b       	cp.w	r11,r8
800085de:	c0 32       	brcc	800085e4 <__avr32_udiv64+0x6c>
800085e0:	0a 99       	mov	r9,r5
800085e2:	0c 9b       	mov	r11,r6
800085e4:	f6 08 01 01 	sub	r1,r11,r8
800085e8:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
800085ec:	e2 0e 0d 00 	divu	r0,r1,lr
800085f0:	e7 e1 11 03 	or	r3,r3,r1<<0x10
800085f4:	00 98       	mov	r8,r0
800085f6:	e0 0a 02 4a 	mul	r10,r0,r10
800085fa:	14 33       	cp.w	r3,r10
800085fc:	c0 a2       	brcc	80008610 <__avr32_udiv64+0x98>
800085fe:	20 18       	sub	r8,1
80008600:	18 03       	add	r3,r12
80008602:	18 33       	cp.w	r3,r12
80008604:	c0 63       	brcs	80008610 <__avr32_udiv64+0x98>
80008606:	f0 cb 00 01 	sub	r11,r8,1
8000860a:	14 33       	cp.w	r3,r10
8000860c:	f6 08 17 30 	movlo	r8,r11
80008610:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80008614:	ce c8       	rjmp	800087ec <__avr32_udiv64+0x274>
	}
      else
	{
	  /* qq = NN / 0d */

	  if (d0 == 0)
80008616:	58 08       	cp.w	r8,0
80008618:	c0 51       	brne	80008622 <__avr32_udiv64+0xaa>
	    d0 = 1 / d0;	/* Divide intentionally by zero.  */
8000861a:	30 19       	mov	r9,1
8000861c:	f2 08 0d 08 	divu	r8,r9,r8
80008620:	10 9c       	mov	r12,r8

	  count_leading_zeros (bm, d0);
80008622:	f8 06 12 00 	clz	r6,r12

	  if (bm == 0)
80008626:	c0 41       	brne	8000862e <__avr32_udiv64+0xb6>
		 leading quotient digit q1 = 1).

		 This special case is necessary, not an optimization.
		 (Shifts counts of W_TYPE_SIZE are undefined.)  */

	      n1 -= d0;
80008628:	18 1b       	sub	r11,r12
8000862a:	30 19       	mov	r9,1
8000862c:	c4 68       	rjmp	800086b8 <__avr32_udiv64+0x140>
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d0 = d0 << bm;
	      n2 = n1 >> b;
8000862e:	ec 01 11 20 	rsub	r1,r6,32
	      n1 = (n1 << bm) | (n0 >> b);
80008632:	f4 01 0a 49 	lsr	r9,r10,r1
	    {
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d0 = d0 << bm;
80008636:	f8 06 09 4c 	lsl	r12,r12,r6
	      n2 = n1 >> b;
	      n1 = (n1 << bm) | (n0 >> b);
8000863a:	f6 06 09 48 	lsl	r8,r11,r6
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d0 = d0 << bm;
	      n2 = n1 >> b;
8000863e:	f6 01 0a 41 	lsr	r1,r11,r1
	      n1 = (n1 << bm) | (n0 >> b);
80008642:	f3 e8 10 08 	or	r8,r9,r8
	      n0 = n0 << bm;

	      udiv_qrnnd (q1, n1, n2, n1, d0);
80008646:	f8 03 16 10 	lsr	r3,r12,0x10
8000864a:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000864e:	e2 03 0d 00 	divu	r0,r1,r3
80008652:	f0 0b 16 10 	lsr	r11,r8,0x10
80008656:	00 9e       	mov	lr,r0
80008658:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000865c:	e0 05 02 49 	mul	r9,r0,r5
80008660:	12 3b       	cp.w	r11,r9
80008662:	c0 d2       	brcc	8000867c <__avr32_udiv64+0x104>
80008664:	20 1e       	sub	lr,1
80008666:	18 0b       	add	r11,r12
80008668:	18 3b       	cp.w	r11,r12
8000866a:	c0 93       	brcs	8000867c <__avr32_udiv64+0x104>
8000866c:	fc c1 00 01 	sub	r1,lr,1
80008670:	f6 0c 00 02 	add	r2,r11,r12
80008674:	12 3b       	cp.w	r11,r9
80008676:	c0 32       	brcc	8000867c <__avr32_udiv64+0x104>
80008678:	02 9e       	mov	lr,r1
8000867a:	04 9b       	mov	r11,r2
8000867c:	12 1b       	sub	r11,r9
8000867e:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80008682:	f6 03 0d 02 	divu	r2,r11,r3
80008686:	f1 e3 11 08 	or	r8,r8,r3<<0x10
8000868a:	04 99       	mov	r9,r2
8000868c:	e4 05 02 4b 	mul	r11,r2,r5
80008690:	16 38       	cp.w	r8,r11
80008692:	c0 d2       	brcc	800086ac <__avr32_udiv64+0x134>
80008694:	20 19       	sub	r9,1
80008696:	18 08       	add	r8,r12
80008698:	18 38       	cp.w	r8,r12
8000869a:	c0 93       	brcs	800086ac <__avr32_udiv64+0x134>
8000869c:	f2 c3 00 01 	sub	r3,r9,1
800086a0:	f0 0c 00 05 	add	r5,r8,r12
800086a4:	16 38       	cp.w	r8,r11
800086a6:	c0 32       	brcc	800086ac <__avr32_udiv64+0x134>
800086a8:	06 99       	mov	r9,r3
800086aa:	0a 98       	mov	r8,r5
	      b = W_TYPE_SIZE - bm;

	      d0 = d0 << bm;
	      n2 = n1 >> b;
	      n1 = (n1 << bm) | (n0 >> b);
	      n0 = n0 << bm;
800086ac:	f4 06 09 43 	lsl	r3,r10,r6

	      udiv_qrnnd (q1, n1, n2, n1, d0);
800086b0:	f0 0b 01 0b 	sub	r11,r8,r11
800086b4:	f3 ee 11 09 	or	r9,r9,lr<<0x10
	    }

	  /* n1 != d0...  */

	  udiv_qrnnd (q0, n0, n1, n0, d0);
800086b8:	f8 06 16 10 	lsr	r6,r12,0x10
800086bc:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
800086c0:	f6 06 0d 00 	divu	r0,r11,r6
800086c4:	e6 0b 16 10 	lsr	r11,r3,0x10
800086c8:	00 9a       	mov	r10,r0
800086ca:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800086ce:	e0 0e 02 48 	mul	r8,r0,lr
800086d2:	10 3b       	cp.w	r11,r8
800086d4:	c0 d2       	brcc	800086ee <__avr32_udiv64+0x176>
800086d6:	20 1a       	sub	r10,1
800086d8:	18 0b       	add	r11,r12
800086da:	18 3b       	cp.w	r11,r12
800086dc:	c0 93       	brcs	800086ee <__avr32_udiv64+0x176>
800086de:	f4 c2 00 01 	sub	r2,r10,1
800086e2:	f6 0c 00 05 	add	r5,r11,r12
800086e6:	10 3b       	cp.w	r11,r8
800086e8:	c0 32       	brcc	800086ee <__avr32_udiv64+0x176>
800086ea:	04 9a       	mov	r10,r2
800086ec:	0a 9b       	mov	r11,r5
800086ee:	f6 08 01 01 	sub	r1,r11,r8
800086f2:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
800086f6:	e2 06 0d 00 	divu	r0,r1,r6
800086fa:	e7 e1 11 03 	or	r3,r3,r1<<0x10
800086fe:	00 98       	mov	r8,r0
80008700:	e0 0e 02 4b 	mul	r11,r0,lr
80008704:	16 33       	cp.w	r3,r11
80008706:	c0 a2       	brcc	8000871a <__avr32_udiv64+0x1a2>
80008708:	20 18       	sub	r8,1
8000870a:	18 03       	add	r3,r12
8000870c:	18 33       	cp.w	r3,r12
8000870e:	c0 63       	brcs	8000871a <__avr32_udiv64+0x1a2>
80008710:	f0 cc 00 01 	sub	r12,r8,1
80008714:	16 33       	cp.w	r3,r11
80008716:	f8 08 17 30 	movlo	r8,r12
8000871a:	f1 ea 11 08 	or	r8,r8,r10<<0x10
8000871e:	c6 b8       	rjmp	800087f4 <__avr32_udiv64+0x27c>
    }
#endif /* UDIV_NEEDS_NORMALIZATION */

  else
    {
      if (d1 > n1)
80008720:	16 39       	cp.w	r9,r11
80008722:	e0 8b 00 67 	brhi	800087f0 <__avr32_udiv64+0x278>
	}
      else
	{
	  /* 0q = NN / dd */

	  count_leading_zeros (bm, d1);
80008726:	f2 09 12 00 	clz	r9,r9
	  if (bm == 0)
8000872a:	c0 b1       	brne	80008740 <__avr32_udiv64+0x1c8>

		 This special case is necessary, not an optimization.  */

	      /* The condition on the next line takes advantage of that
		 n1 >= d1 (true due to program flow).  */
	      if (n1 > d1 || n0 >= d0)
8000872c:	10 3a       	cp.w	r10,r8
8000872e:	5f 2a       	srhs	r10
80008730:	1c 3b       	cp.w	r11,lr
80008732:	5f b8       	srhi	r8
80008734:	10 4a       	or	r10,r8
80008736:	f2 0a 18 00 	cp.b	r10,r9
8000873a:	c5 b0       	breq	800087f0 <__avr32_udiv64+0x278>
		{
		  q0 = 1;
		  sub_ddmmss (n1, n0, n1, n0, d1, d0);
8000873c:	30 18       	mov	r8,1
8000873e:	c5 b8       	rjmp	800087f4 <__avr32_udiv64+0x27c>
	      UWtype m1, m0;
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
80008740:	f2 03 11 20 	rsub	r3,r9,32
80008744:	fc 09 09 4e 	lsl	lr,lr,r9
	      d0 = d0 << bm;
	      n2 = n1 >> b;
	      n1 = (n1 << bm) | (n0 >> b);
80008748:	f6 09 09 4c 	lsl	r12,r11,r9
8000874c:	f4 03 0a 42 	lsr	r2,r10,r3
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
	      d0 = d0 << bm;
80008750:	f0 09 09 46 	lsl	r6,r8,r9
	      UWtype m1, m0;
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
80008754:	f0 03 0a 48 	lsr	r8,r8,r3
	      d0 = d0 << bm;
	      n2 = n1 >> b;
80008758:	f6 03 0a 43 	lsr	r3,r11,r3
	      n1 = (n1 << bm) | (n0 >> b);
8000875c:	18 42       	or	r2,r12
	      UWtype m1, m0;
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
8000875e:	f1 ee 10 0c 	or	r12,r8,lr
	      d0 = d0 << bm;
	      n2 = n1 >> b;
	      n1 = (n1 << bm) | (n0 >> b);
	      n0 = n0 << bm;

	      udiv_qrnnd (q0, n1, n2, n1, d1);
80008762:	f8 01 16 10 	lsr	r1,r12,0x10
80008766:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
8000876a:	e6 01 0d 04 	divu	r4,r3,r1
8000876e:	e4 03 16 10 	lsr	r3,r2,0x10
80008772:	08 98       	mov	r8,r4
80008774:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80008778:	e8 0e 02 45 	mul	r5,r4,lr
8000877c:	0a 33       	cp.w	r3,r5
8000877e:	c0 d2       	brcc	80008798 <__avr32_udiv64+0x220>
80008780:	20 18       	sub	r8,1
80008782:	18 03       	add	r3,r12
80008784:	18 33       	cp.w	r3,r12
80008786:	c0 93       	brcs	80008798 <__avr32_udiv64+0x220>
80008788:	f0 c0 00 01 	sub	r0,r8,1
8000878c:	e6 0c 00 0b 	add	r11,r3,r12
80008790:	0a 33       	cp.w	r3,r5
80008792:	c0 32       	brcc	80008798 <__avr32_udiv64+0x220>
80008794:	00 98       	mov	r8,r0
80008796:	16 93       	mov	r3,r11
80008798:	0a 13       	sub	r3,r5
8000879a:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000879e:	e6 01 0d 00 	divu	r0,r3,r1
800087a2:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800087a6:	00 93       	mov	r3,r0
800087a8:	e0 0e 02 4e 	mul	lr,r0,lr
800087ac:	1c 3b       	cp.w	r11,lr
800087ae:	c0 d2       	brcc	800087c8 <__avr32_udiv64+0x250>
800087b0:	20 13       	sub	r3,1
800087b2:	18 0b       	add	r11,r12
800087b4:	18 3b       	cp.w	r11,r12
800087b6:	c0 93       	brcs	800087c8 <__avr32_udiv64+0x250>
800087b8:	f6 0c 00 0c 	add	r12,r11,r12
800087bc:	e6 c5 00 01 	sub	r5,r3,1
800087c0:	1c 3b       	cp.w	r11,lr
800087c2:	c0 32       	brcc	800087c8 <__avr32_udiv64+0x250>
800087c4:	0a 93       	mov	r3,r5
800087c6:	18 9b       	mov	r11,r12
800087c8:	e7 e8 11 08 	or	r8,r3,r8<<0x10
800087cc:	1c 1b       	sub	r11,lr
	      umul_ppmm (m1, m0, q0, d0);
800087ce:	f0 06 06 42 	mulu.d	r2,r8,r6
800087d2:	06 96       	mov	r6,r3

	      if (m1 > n1 || (m1 == n1 && m0 > n0))
800087d4:	16 36       	cp.w	r6,r11
800087d6:	e0 8b 00 0a 	brhi	800087ea <__avr32_udiv64+0x272>
800087da:	5f 0b       	sreq	r11
800087dc:	f4 09 09 49 	lsl	r9,r10,r9
800087e0:	12 32       	cp.w	r2,r9
800087e2:	5f b9       	srhi	r9
800087e4:	f7 e9 00 09 	and	r9,r11,r9
800087e8:	c0 60       	breq	800087f4 <__avr32_udiv64+0x27c>
		{
		  q0--;
800087ea:	20 18       	sub	r8,1
		  sub_ddmmss (m1, m0, m1, m0, d1, d0);
800087ec:	30 09       	mov	r9,0
800087ee:	c0 38       	rjmp	800087f4 <__avr32_udiv64+0x27c>
800087f0:	30 09       	mov	r9,0
800087f2:	12 98       	mov	r8,r9
#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
  return __udivmoddi4 (n, d, (UDWtype *) 0);
}
800087f4:	10 9a       	mov	r10,r8
		}
	    }
	}
    }

  const DWunion ww = {{.low = q0, .high = q1}};
800087f6:	12 93       	mov	r3,r9
800087f8:	10 92       	mov	r2,r8
#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
  return __udivmoddi4 (n, d, (UDWtype *) 0);
}
800087fa:	12 9b       	mov	r11,r9
800087fc:	2f ed       	sub	sp,-8
800087fe:	d8 32       	popm	r0-r7,pc

80008800 <atexit>:

int
_DEFUN (atexit,
	(fn),
	_VOID _EXFUN ((*fn), (_VOID)))
{
80008800:	d4 01       	pushm	lr
  return __register_exitproc (__et_atexit, fn, NULL, NULL);
80008802:	30 09       	mov	r9,0
80008804:	18 9b       	mov	r11,r12
80008806:	12 9a       	mov	r10,r9
80008808:	12 9c       	mov	r12,r9
8000880a:	e0 a0 03 67 	rcall	80008ed8 <__register_exitproc>
}
8000880e:	d8 02       	popm	pc

80008810 <exit>:
 */

void 
_DEFUN (exit, (code),
	int code)
{
80008810:	d4 21       	pushm	r4-r7,lr
  __call_exitprocs (code, NULL);
80008812:	30 0b       	mov	r11,0
 */

void 
_DEFUN (exit, (code),
	int code)
{
80008814:	18 97       	mov	r7,r12
  __call_exitprocs (code, NULL);
80008816:	e0 a0 03 b3 	rcall	80008f7c <__call_exitprocs>

  if (_GLOBAL_REENT->__cleanup)
8000881a:	fe c8 ec 5e 	sub	r8,pc,-5026
8000881e:	70 0c       	ld.w	r12,r8[0x0]
80008820:	78 a8       	ld.w	r8,r12[0x28]
80008822:	58 08       	cp.w	r8,0
    (*_GLOBAL_REENT->__cleanup) (_GLOBAL_REENT);
80008824:	c0 20       	breq	80008828 <exit+0x18>
  _exit (code);
80008826:	5d 18       	icall	r8
80008828:	0e 9c       	mov	r12,r7
8000882a:	e0 a0 03 36 	rcall	80008e96 <_exit>
8000882e:	d7 03       	nop

80008830 <free>:
}

void
_DEFUN (free, (aptr),
	_PTR aptr)
{
80008830:	d4 01       	pushm	lr
  _free_r (_REENT, aptr);
80008832:	e0 68 01 30 	mov	r8,304
80008836:	18 9b       	mov	r11,r12
80008838:	70 0c       	ld.w	r12,r8[0x0]
8000883a:	e0 a0 04 53 	rcall	800090e0 <_free_r>
}
8000883e:	d8 02       	popm	pc

80008840 <malloc>:
80008840:	d4 01       	pushm	lr
80008842:	e0 68 01 30 	mov	r8,304
80008846:	18 9b       	mov	r11,r12

_PTR
_DEFUN (malloc, (nbytes),
	size_t nbytes)		/* get a block */
{
  return _malloc_r (_REENT, nbytes);
80008848:	70 0c       	ld.w	r12,r8[0x0]
8000884a:	c0 3c       	rcall	80008850 <_malloc_r>
}
8000884c:	d8 02       	popm	pc
8000884e:	d7 03       	nop

80008850 <_malloc_r>:
#if __STD_C
Void_t* mALLOc(RARG size_t bytes)
#else
Void_t* mALLOc(RARG bytes) RDECL size_t bytes;
#endif
{
80008850:	d4 31       	pushm	r0-r7,lr
  int       startidx;                /* first bin of a traversed block */
  mchunkptr fwd;                     /* misc temp for linking */
  mchunkptr bck;                     /* misc temp for linking */
  mbinptr q;                         /* misc temp */

  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
80008852:	f6 c8 ff f5 	sub	r8,r11,-11
#if __STD_C
Void_t* mALLOc(RARG size_t bytes)
#else
Void_t* mALLOc(RARG bytes) RDECL size_t bytes;
#endif
{
80008856:	18 95       	mov	r5,r12
  int       startidx;                /* first bin of a traversed block */
  mchunkptr fwd;                     /* misc temp for linking */
  mchunkptr bck;                     /* misc temp for linking */
  mbinptr q;                         /* misc temp */

  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
80008858:	10 97       	mov	r7,r8
8000885a:	e0 17 ff f8 	andl	r7,0xfff8
8000885e:	59 68       	cp.w	r8,22
80008860:	f9 b7 08 10 	movls	r7,16

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
80008864:	16 37       	cp.w	r7,r11
80008866:	5f 38       	srlo	r8
80008868:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
8000886c:	c0 50       	breq	80008876 <_malloc_r+0x26>
  {
    RERRNO = ENOMEM;
8000886e:	30 c8       	mov	r8,12
80008870:	99 38       	st.w	r12[0xc],r8
80008872:	e0 8f 01 f4 	bral	80008c5a <_malloc_r+0x40a>
    return 0;
  }

  MALLOC_LOCK;
80008876:	e0 a0 02 a5 	rcall	80008dc0 <__malloc_lock>

  /* Check for exact match in a bin */

  if (is_small_request(nb))  /* Faster version for small requests */
8000887a:	e0 47 01 f7 	cp.w	r7,503
8000887e:	e0 8b 00 1d 	brhi	800088b8 <_malloc_r+0x68>
  {
    idx = smallbin_index(nb); 
80008882:	ee 03 16 03 	lsr	r3,r7,0x3

    /* No traversal or size check necessary for small bins.  */

    q = bin_at(idx);
80008886:	e0 68 01 34 	mov	r8,308
8000888a:	f0 03 00 38 	add	r8,r8,r3<<0x3
    victim = last(q);

#if MALLOC_ALIGN != 16
    /* Also scan the next one, since it would have a remainder < MINSIZE */
    if (victim == q)
8000888e:	70 36       	ld.w	r6,r8[0xc]
80008890:	10 36       	cp.w	r6,r8
    {
      q = next_bin(q);
80008892:	c0 61       	brne	8000889e <_malloc_r+0x4e>
80008894:	ec c8 ff f8 	sub	r8,r6,-8
      victim = last(q);
    }
#endif
    if (victim != q)
80008898:	70 36       	ld.w	r6,r8[0xc]
8000889a:	10 36       	cp.w	r6,r8
    {
      victim_size = chunksize(victim);
8000889c:	c0 c0       	breq	800088b4 <_malloc_r+0x64>
8000889e:	6c 18       	ld.w	r8,r6[0x4]
800088a0:	e0 18 ff fc 	andl	r8,0xfffc
      unlink(victim, bck, fwd);
      set_inuse_bit_at_offset(victim, victim_size);
800088a4:	6c 3a       	ld.w	r10,r6[0xc]
800088a6:	ec 08 00 09 	add	r9,r6,r8
    }
#endif
    if (victim != q)
    {
      victim_size = chunksize(victim);
      unlink(victim, bck, fwd);
800088aa:	0a 9c       	mov	r12,r5
800088ac:	6c 28       	ld.w	r8,r6[0x8]
800088ae:	95 28       	st.w	r10[0x8],r8
800088b0:	91 3a       	st.w	r8[0xc],r10
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
      return chunk2mem(victim);
    }

    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */
800088b2:	c4 78       	rjmp	80008940 <_malloc_r+0xf0>
800088b4:	2f e3       	sub	r3,-2

  }
  else
  {
    idx = bin_index(nb);
800088b6:	c4 d8       	rjmp	80008950 <_malloc_r+0x100>
800088b8:	ee 03 16 09 	lsr	r3,r7,0x9
800088bc:	c0 41       	brne	800088c4 <_malloc_r+0x74>
800088be:	ee 03 16 03 	lsr	r3,r7,0x3
800088c2:	c2 68       	rjmp	8000890e <_malloc_r+0xbe>
800088c4:	58 43       	cp.w	r3,4
800088c6:	e0 8b 00 06 	brhi	800088d2 <_malloc_r+0x82>
800088ca:	ee 03 16 06 	lsr	r3,r7,0x6
800088ce:	2c 83       	sub	r3,-56
800088d0:	c1 f8       	rjmp	8000890e <_malloc_r+0xbe>
800088d2:	59 43       	cp.w	r3,20
800088d4:	e0 8b 00 04 	brhi	800088dc <_malloc_r+0x8c>
800088d8:	2a 53       	sub	r3,-91
800088da:	c1 a8       	rjmp	8000890e <_malloc_r+0xbe>
800088dc:	e0 43 00 54 	cp.w	r3,84
800088e0:	e0 8b 00 06 	brhi	800088ec <_malloc_r+0x9c>
800088e4:	ee 03 16 0c 	lsr	r3,r7,0xc
800088e8:	29 23       	sub	r3,-110
800088ea:	c1 28       	rjmp	8000890e <_malloc_r+0xbe>
800088ec:	e0 43 01 54 	cp.w	r3,340
800088f0:	e0 8b 00 06 	brhi	800088fc <_malloc_r+0xac>
800088f4:	ee 03 16 0f 	lsr	r3,r7,0xf
800088f8:	28 93       	sub	r3,-119
800088fa:	c0 a8       	rjmp	8000890e <_malloc_r+0xbe>
800088fc:	e0 43 05 54 	cp.w	r3,1364
80008900:	e0 88 00 04 	brls	80008908 <_malloc_r+0xb8>
80008904:	37 e3       	mov	r3,126
80008906:	c0 48       	rjmp	8000890e <_malloc_r+0xbe>
80008908:	ee 03 16 12 	lsr	r3,r7,0x12
    bin = bin_at(idx);
8000890c:	28 43       	sub	r3,-124
8000890e:	e0 6a 01 34 	mov	r10,308

    for (victim = last(bin); victim != bin; victim = victim->bk)
80008912:	f4 03 00 3a 	add	r10,r10,r3<<0x3
    {
      victim_size = chunksize(victim);
80008916:	74 36       	ld.w	r6,r10[0xc]
80008918:	c1 98       	rjmp	8000894a <_malloc_r+0xfa>
8000891a:	6c 19       	ld.w	r9,r6[0x4]
      remainder_size = long_sub_size_t(victim_size, nb);
8000891c:	e0 19 ff fc 	andl	r9,0xfffc
      
      if (remainder_size >= (long)MINSIZE) /* too big */
80008920:	f2 07 01 0b 	sub	r11,r9,r7
80008924:	58 fb       	cp.w	r11,15
      {
        --idx; /* adjust to rescan below after checking last remainder */
80008926:	e0 8a 00 04 	brle	8000892e <_malloc_r+0xde>
        break;   
8000892a:	20 13       	sub	r3,1
      }

      else if (remainder_size >= 0) /* exact fit */
8000892c:	c1 18       	rjmp	8000894e <_malloc_r+0xfe>
8000892e:	6c 38       	ld.w	r8,r6[0xc]
      {
        unlink(victim, bck, fwd);
80008930:	58 0b       	cp.w	r11,0
        set_inuse_bit_at_offset(victim, victim_size);
80008932:	c0 b5       	brlt	80008948 <_malloc_r+0xf8>
80008934:	6c 2a       	ld.w	r10,r6[0x8]
        check_malloced_chunk(victim, nb);
	MALLOC_UNLOCK;
80008936:	ec 09 00 09 	add	r9,r6,r9
        break;   
      }

      else if (remainder_size >= 0) /* exact fit */
      {
        unlink(victim, bck, fwd);
8000893a:	0a 9c       	mov	r12,r5
        set_inuse_bit_at_offset(victim, victim_size);
8000893c:	91 2a       	st.w	r8[0x8],r10
8000893e:	95 38       	st.w	r10[0xc],r8
80008940:	72 18       	ld.w	r8,r9[0x4]
80008942:	a1 a8       	sbr	r8,0x0
  else
  {
    idx = bin_index(nb);
    bin = bin_at(idx);

    for (victim = last(bin); victim != bin; victim = victim->bk)
80008944:	93 18       	st.w	r9[0x4],r8
80008946:	cb c8       	rjmp	80008abe <_malloc_r+0x26e>
80008948:	10 96       	mov	r6,r8
	MALLOC_UNLOCK;
        return chunk2mem(victim);
      }
    }

    ++idx; 
8000894a:	14 36       	cp.w	r6,r10

  }

  /* Try to use the last split-off remainder */

  if ( (victim = last_remainder->fd) != last_remainder)
8000894c:	ce 71       	brne	8000891a <_malloc_r+0xca>
8000894e:	2f f3       	sub	r3,-1
80008950:	e0 6a 01 34 	mov	r10,308
80008954:	f4 cc ff f8 	sub	r12,r10,-8
  {
    victim_size = chunksize(victim);
80008958:	78 26       	ld.w	r6,r12[0x8]
8000895a:	18 36       	cp.w	r6,r12
8000895c:	c6 c0       	breq	80008a34 <_malloc_r+0x1e4>
    remainder_size = long_sub_size_t(victim_size, nb);
8000895e:	6c 19       	ld.w	r9,r6[0x4]
80008960:	e0 19 ff fc 	andl	r9,0xfffc

    if (remainder_size >= (long)MINSIZE) /* re-split */
80008964:	f2 07 01 08 	sub	r8,r9,r7
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
      return chunk2mem(victim);
    }

    clear_last_remainder;
80008968:	58 f8       	cp.w	r8,15
8000896a:	e0 89 00 8f 	brgt	80008a88 <_malloc_r+0x238>

    if (remainder_size >= 0)  /* exhaust */
8000896e:	99 3c       	st.w	r12[0xc],r12
    {
      set_inuse_bit_at_offset(victim, victim_size);
80008970:	99 2c       	st.w	r12[0x8],r12
80008972:	58 08       	cp.w	r8,0
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
80008974:	c0 55       	brlt	8000897e <_malloc_r+0x12e>
80008976:	ec 09 00 09 	add	r9,r6,r9
      return chunk2mem(victim);
    }

    /* Else place in bin */

    frontlink(victim, victim_size, remainder_index, bck, fwd);
8000897a:	0a 9c       	mov	r12,r5
8000897c:	ce 2b       	rjmp	80008940 <_malloc_r+0xf0>
8000897e:	e0 49 01 ff 	cp.w	r9,511
80008982:	e0 8b 00 13 	brhi	800089a8 <_malloc_r+0x158>
80008986:	a3 99       	lsr	r9,0x3
80008988:	f4 09 00 38 	add	r8,r10,r9<<0x3
8000898c:	70 2b       	ld.w	r11,r8[0x8]
8000898e:	8d 38       	st.w	r6[0xc],r8
80008990:	8d 2b       	st.w	r6[0x8],r11
80008992:	97 36       	st.w	r11[0xc],r6
80008994:	91 26       	st.w	r8[0x8],r6
80008996:	a3 49       	asr	r9,0x2
80008998:	74 18       	ld.w	r8,r10[0x4]
8000899a:	30 1b       	mov	r11,1
8000899c:	f6 09 09 49 	lsl	r9,r11,r9
800089a0:	f1 e9 10 09 	or	r9,r8,r9
800089a4:	95 19       	st.w	r10[0x4],r9
800089a6:	c4 78       	rjmp	80008a34 <_malloc_r+0x1e4>
800089a8:	f2 0a 16 09 	lsr	r10,r9,0x9
800089ac:	58 4a       	cp.w	r10,4
800089ae:	e0 8b 00 07 	brhi	800089bc <_malloc_r+0x16c>
800089b2:	f2 0a 16 06 	lsr	r10,r9,0x6
800089b6:	2c 8a       	sub	r10,-56
800089b8:	c2 08       	rjmp	800089f8 <_malloc_r+0x1a8>
800089ba:	d7 03       	nop
800089bc:	59 4a       	cp.w	r10,20
800089be:	e0 8b 00 04 	brhi	800089c6 <_malloc_r+0x176>
800089c2:	2a 5a       	sub	r10,-91
800089c4:	c1 a8       	rjmp	800089f8 <_malloc_r+0x1a8>
800089c6:	e0 4a 00 54 	cp.w	r10,84
800089ca:	e0 8b 00 06 	brhi	800089d6 <_malloc_r+0x186>
800089ce:	f2 0a 16 0c 	lsr	r10,r9,0xc
800089d2:	29 2a       	sub	r10,-110
800089d4:	c1 28       	rjmp	800089f8 <_malloc_r+0x1a8>
800089d6:	e0 4a 01 54 	cp.w	r10,340
800089da:	e0 8b 00 06 	brhi	800089e6 <_malloc_r+0x196>
800089de:	f2 0a 16 0f 	lsr	r10,r9,0xf
800089e2:	28 9a       	sub	r10,-119
800089e4:	c0 a8       	rjmp	800089f8 <_malloc_r+0x1a8>
800089e6:	e0 4a 05 54 	cp.w	r10,1364
800089ea:	e0 88 00 04 	brls	800089f2 <_malloc_r+0x1a2>
800089ee:	37 ea       	mov	r10,126
800089f0:	c0 48       	rjmp	800089f8 <_malloc_r+0x1a8>
800089f2:	f2 0a 16 12 	lsr	r10,r9,0x12
800089f6:	28 4a       	sub	r10,-124
800089f8:	e0 6b 01 34 	mov	r11,308
800089fc:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80008a00:	68 28       	ld.w	r8,r4[0x8]
80008a02:	08 38       	cp.w	r8,r4
80008a04:	c0 e1       	brne	80008a20 <_malloc_r+0x1d0>
80008a06:	76 19       	ld.w	r9,r11[0x4]
80008a08:	a3 4a       	asr	r10,0x2
80008a0a:	30 1e       	mov	lr,1
80008a0c:	fc 0a 09 4a 	lsl	r10,lr,r10
80008a10:	f3 ea 10 0a 	or	r10,r9,r10
80008a14:	10 99       	mov	r9,r8
80008a16:	97 1a       	st.w	r11[0x4],r10
80008a18:	c0 a8       	rjmp	80008a2c <_malloc_r+0x1dc>
80008a1a:	70 28       	ld.w	r8,r8[0x8]
80008a1c:	08 38       	cp.w	r8,r4
80008a1e:	c0 60       	breq	80008a2a <_malloc_r+0x1da>
80008a20:	70 1a       	ld.w	r10,r8[0x4]
80008a22:	e0 1a ff fc 	andl	r10,0xfffc
80008a26:	14 39       	cp.w	r9,r10
80008a28:	cf 93       	brcs	80008a1a <_malloc_r+0x1ca>
80008a2a:	70 39       	ld.w	r9,r8[0xc]
80008a2c:	8d 39       	st.w	r6[0xc],r9
80008a2e:	8d 28       	st.w	r6[0x8],r8
80008a30:	91 36       	st.w	r8[0xc],r6
  /* 
     If there are any possibly nonempty big-enough blocks, 
     search for best fitting chunk by scanning bins in blockwidth units.
  */

  if ( (block = idx2binblock(idx)) <= binblocks)  
80008a32:	93 26       	st.w	r9[0x8],r6
80008a34:	e6 08 14 02 	asr	r8,r3,0x2
80008a38:	30 1b       	mov	r11,1
80008a3a:	e0 64 01 34 	mov	r4,308
80008a3e:	f6 08 09 4b 	lsl	r11,r11,r8
80008a42:	68 18       	ld.w	r8,r4[0x4]
80008a44:	10 3b       	cp.w	r11,r8
  {

    /* Get to the first marked block */

    if ( (block & binblocks) == 0) 
80008a46:	e0 8b 00 69 	brhi	80008b18 <_malloc_r+0x2c8>
80008a4a:	f7 e8 00 09 	and	r9,r11,r8
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
80008a4e:	c0 b1       	brne	80008a64 <_malloc_r+0x214>
      block <<= 1;
80008a50:	e0 13 ff fc 	andl	r3,0xfffc
      while ((block & binblocks) == 0)
80008a54:	a1 7b       	lsl	r11,0x1
      {
        idx += BINBLOCKWIDTH;
80008a56:	2f c3       	sub	r3,-4
        block <<= 1;
80008a58:	c0 38       	rjmp	80008a5e <_malloc_r+0x20e>
    if ( (block & binblocks) == 0) 
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
      block <<= 1;
      while ((block & binblocks) == 0)
80008a5a:	2f c3       	sub	r3,-4
80008a5c:	a1 7b       	lsl	r11,0x1
80008a5e:	f7 e8 00 09 	and	r9,r11,r8
      
    /* For each possibly nonempty block ... */
    for (;;)  
    {
      startidx = idx;          /* (track incomplete blocks) */
      q = bin = bin_at(idx);
80008a62:	cf c0       	breq	80008a5a <_malloc_r+0x20a>
80008a64:	e8 03 00 3e 	add	lr,r4,r3<<0x3
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
80008a68:	06 92       	mov	r2,r3
80008a6a:	1c 91       	mov	r1,lr
        {
          victim_size = chunksize(victim);
80008a6c:	62 36       	ld.w	r6,r1[0xc]
80008a6e:	c2 d8       	rjmp	80008ac8 <_malloc_r+0x278>
80008a70:	6c 1a       	ld.w	r10,r6[0x4]
          remainder_size = long_sub_size_t(victim_size, nb);
80008a72:	e0 1a ff fc 	andl	r10,0xfffc

          if (remainder_size >= (long)MINSIZE) /* split */
80008a76:	f4 07 01 08 	sub	r8,r10,r7
80008a7a:	58 f8       	cp.w	r8,15
          {
            remainder = chunk_at_offset(victim, nb);
            set_head(victim, nb | PREV_INUSE);
            unlink(victim, bck, fwd);
80008a7c:	e0 8a 00 15 	brle	80008aa6 <_malloc_r+0x256>
80008a80:	6c 3a       	ld.w	r10,r6[0xc]
80008a82:	6c 29       	ld.w	r9,r6[0x8]
          remainder_size = long_sub_size_t(victim_size, nb);

          if (remainder_size >= (long)MINSIZE) /* split */
          {
            remainder = chunk_at_offset(victim, nb);
            set_head(victim, nb | PREV_INUSE);
80008a84:	95 29       	st.w	r10[0x8],r9
          victim_size = chunksize(victim);
          remainder_size = long_sub_size_t(victim_size, nb);

          if (remainder_size >= (long)MINSIZE) /* split */
          {
            remainder = chunk_at_offset(victim, nb);
80008a86:	93 3a       	st.w	r9[0xc],r10
80008a88:	0e 99       	mov	r9,r7
            set_head(victim, nb | PREV_INUSE);
80008a8a:	ec 07 00 07 	add	r7,r6,r7
            unlink(victim, bck, fwd);
            link_last_remainder(remainder);
80008a8e:	a1 a9       	sbr	r9,0x0
          remainder_size = long_sub_size_t(victim_size, nb);

          if (remainder_size >= (long)MINSIZE) /* split */
          {
            remainder = chunk_at_offset(victim, nb);
            set_head(victim, nb | PREV_INUSE);
80008a90:	99 37       	st.w	r12[0xc],r7
            unlink(victim, bck, fwd);
            link_last_remainder(remainder);
            set_head(remainder, remainder_size | PREV_INUSE);
            set_foot(remainder, remainder_size);
80008a92:	99 27       	st.w	r12[0x8],r7
80008a94:	8d 19       	st.w	r6[0x4],r9
          if (remainder_size >= (long)MINSIZE) /* split */
          {
            remainder = chunk_at_offset(victim, nb);
            set_head(victim, nb | PREV_INUSE);
            unlink(victim, bck, fwd);
            link_last_remainder(remainder);
80008a96:	ee 08 09 08 	st.w	r7[r8],r8
            set_head(remainder, remainder_size | PREV_INUSE);
80008a9a:	8f 2c       	st.w	r7[0x8],r12
            set_foot(remainder, remainder_size);
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
80008a9c:	8f 3c       	st.w	r7[0xc],r12
          {
            remainder = chunk_at_offset(victim, nb);
            set_head(victim, nb | PREV_INUSE);
            unlink(victim, bck, fwd);
            link_last_remainder(remainder);
            set_head(remainder, remainder_size | PREV_INUSE);
80008a9e:	a1 a8       	sbr	r8,0x0
80008aa0:	0a 9c       	mov	r12,r5
80008aa2:	8f 18       	st.w	r7[0x4],r8
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
            return chunk2mem(victim);
          }

          else if (remainder_size >= 0)  /* take */
80008aa4:	c0 d8       	rjmp	80008abe <_malloc_r+0x26e>
80008aa6:	6c 39       	ld.w	r9,r6[0xc]
          {
            set_inuse_bit_at_offset(victim, victim_size);
80008aa8:	58 08       	cp.w	r8,0
80008aaa:	c0 e5       	brlt	80008ac6 <_malloc_r+0x276>
80008aac:	ec 0a 00 0a 	add	r10,r6,r10
            unlink(victim, bck, fwd);
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
80008ab0:	74 18       	ld.w	r8,r10[0x4]
            return chunk2mem(victim);
          }

          else if (remainder_size >= 0)  /* take */
          {
            set_inuse_bit_at_offset(victim, victim_size);
80008ab2:	a1 a8       	sbr	r8,0x0
            unlink(victim, bck, fwd);
80008ab4:	0a 9c       	mov	r12,r5
80008ab6:	95 18       	st.w	r10[0x4],r8
80008ab8:	6c 28       	ld.w	r8,r6[0x8]
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
80008aba:	93 28       	st.w	r9[0x8],r8
80008abc:	91 39       	st.w	r8[0xc],r9
            return chunk2mem(victim);
80008abe:	c8 2d       	rcall	80008dc2 <__malloc_unlock>
80008ac0:	ec cc ff f8 	sub	r12,r6,-8
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
80008ac4:	d8 32       	popm	r0-r7,pc
80008ac6:	12 96       	mov	r6,r9
80008ac8:	02 36       	cp.w	r6,r1
         {
           bin = next_bin(bin);
           ++idx;
         }
#endif
      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
80008aca:	cd 31       	brne	80008a70 <_malloc_r+0x220>
80008acc:	2f f2       	sub	r2,-1
80008ace:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
            return chunk2mem(victim);
          }

        }

       bin = next_bin(bin);
80008ad2:	c0 30       	breq	80008ad8 <_malloc_r+0x288>
80008ad4:	2f 81       	sub	r1,-8
80008ad6:	cc bb       	rjmp	80008a6c <_malloc_r+0x21c>

      /* Clear out the block bit. */

      do   /* Possibly backtrack to try to clear a partial block */
      {
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
80008ad8:	1c 98       	mov	r8,lr
80008ada:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
        {
          binblocks &= ~block;
80008ade:	c0 81       	brne	80008aee <_malloc_r+0x29e>
80008ae0:	68 19       	ld.w	r9,r4[0x4]
80008ae2:	f6 08 11 ff 	rsub	r8,r11,-1
80008ae6:	f3 e8 00 08 	and	r8,r9,r8
          break;
80008aea:	89 18       	st.w	r4[0x4],r8
        }
        --startidx;
       q = prev_bin(q);
80008aec:	c0 78       	rjmp	80008afa <_malloc_r+0x2aa>
80008aee:	f0 c9 00 08 	sub	r9,r8,8
      } while (first(q) == q);
80008af2:	20 13       	sub	r3,1
80008af4:	70 08       	ld.w	r8,r8[0x0]
80008af6:	12 38       	cp.w	r8,r9

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
80008af8:	cf 10       	breq	80008ada <_malloc_r+0x28a>
80008afa:	a1 7b       	lsl	r11,0x1
80008afc:	68 18       	ld.w	r8,r4[0x4]
80008afe:	10 3b       	cp.w	r11,r8
80008b00:	e0 8b 00 0c 	brhi	80008b18 <_malloc_r+0x2c8>
80008b04:	58 0b       	cp.w	r11,0
80008b06:	c0 90       	breq	80008b18 <_malloc_r+0x2c8>
80008b08:	04 93       	mov	r3,r2
      {
        while ((block & binblocks) == 0)
        {
          idx += BINBLOCKWIDTH;
80008b0a:	c0 38       	rjmp	80008b10 <_malloc_r+0x2c0>
          block <<= 1;
80008b0c:	2f c3       	sub	r3,-4

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
      {
        while ((block & binblocks) == 0)
80008b0e:	a1 7b       	lsl	r11,0x1
80008b10:	f7 e8 00 09 	and	r9,r11,r8
80008b14:	ca 81       	brne	80008a64 <_malloc_r+0x214>
80008b16:	cf bb       	rjmp	80008b0c <_malloc_r+0x2bc>
80008b18:	68 23       	ld.w	r3,r4[0x8]
80008b1a:	66 12       	ld.w	r2,r3[0x4]
80008b1c:	e0 12 ff fc 	andl	r2,0xfffc


  /* Try to use top chunk */

  /* Require that there be a remainder, ensuring top always exists  */
  remainder_size = long_sub_size_t(chunksize(top), nb);
80008b20:	0e 32       	cp.w	r2,r7
80008b22:	5f 39       	srlo	r9
80008b24:	e4 07 01 08 	sub	r8,r2,r7
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
80008b28:	58 f8       	cp.w	r8,15
80008b2a:	5f aa       	srle	r10


  /* Try to use top chunk */

  /* Require that there be a remainder, ensuring top always exists  */
  remainder_size = long_sub_size_t(chunksize(top), nb);
80008b2c:	f5 e9 10 09 	or	r9,r10,r9
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
80008b30:	e0 80 00 96 	breq	80008c5c <_malloc_r+0x40c>
80008b34:	e0 68 09 a4 	mov	r8,2468
80008b38:	70 01       	ld.w	r1,r8[0x0]
80008b3a:	e0 68 05 40 	mov	r8,1344
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));

  /* Pad request with top_pad plus minimal overhead */
  
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
80008b3e:	2f 01       	sub	r1,-16

  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
80008b40:	70 08       	ld.w	r8,r8[0x0]
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));

  /* Pad request with top_pad plus minimal overhead */
  
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
80008b42:	0e 01       	add	r1,r7

  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
80008b44:	5b f8       	cp.w	r8,-1
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));

  /* Pad request with top_pad plus minimal overhead */
  
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
80008b46:	c0 40       	breq	80008b4e <_malloc_r+0x2fe>

  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
80008b48:	28 11       	sub	r1,-127
80008b4a:	e0 11 ff 80 	andl	r1,0xff80
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);
80008b4e:	02 9b       	mov	r11,r1
80008b50:	0a 9c       	mov	r12,r5

  brk = (char*)(MORECORE (sbrk_size));
80008b52:	c7 9d       	rcall	80008e44 <_sbrk_r>
80008b54:	18 96       	mov	r6,r12
80008b56:	5b fc       	cp.w	r12,-1
80008b58:	c7 30       	breq	80008c3e <_malloc_r+0x3ee>
80008b5a:	e6 02 00 08 	add	r8,r3,r2

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
80008b5e:	10 3c       	cp.w	r12,r8
  char*     new_brk;              /* return of 2nd sbrk call */
  INTERNAL_SIZE_T top_size;       /* new size of top chunk */

  mchunkptr old_top     = top;  /* Record state of old top */
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));
80008b60:	c0 32       	brcc	80008b66 <_malloc_r+0x316>
80008b62:	08 33       	cp.w	r3,r4
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);

  brk = (char*)(MORECORE (sbrk_size));

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
80008b64:	c6 d1       	brne	80008c3e <_malloc_r+0x3ee>
80008b66:	e0 6a 09 a8 	mov	r10,2472
80008b6a:	74 09       	ld.w	r9,r10[0x0]
      (brk < old_end && old_top != initial_top))
    return;

  sbrked_mem += sbrk_size;
80008b6c:	e2 09 00 09 	add	r9,r1,r9
80008b70:	95 09       	st.w	r10[0x0],r9
80008b72:	10 36       	cp.w	r6,r8
80008b74:	c0 a1       	brne	80008b88 <_malloc_r+0x338>

  if (brk == old_end /* can just add bytes to current top, unless
80008b76:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80008b7a:	c0 71       	brne	80008b88 <_malloc_r+0x338>
80008b7c:	e2 02 00 02 	add	r2,r1,r2
			previous correction failed */
      && ((POINTER_UINT)old_end & (pagesz - 1)) == 0)
  {
    top_size = sbrk_size + old_top_size;
    set_head(top, top_size | PREV_INUSE);
80008b80:	68 28       	ld.w	r8,r4[0x8]
80008b82:	a1 a2       	sbr	r2,0x0
80008b84:	91 12       	st.w	r8[0x4],r2
80008b86:	c4 b8       	rjmp	80008c1c <_malloc_r+0x3cc>
80008b88:	e0 6a 05 40 	mov	r10,1344
  }
  else
  {
    if (sbrk_base == (char*)(-1))  /* First time through. Record base */
80008b8c:	74 0b       	ld.w	r11,r10[0x0]
80008b8e:	5b fb       	cp.w	r11,-1
80008b90:	c0 31       	brne	80008b96 <_malloc_r+0x346>
80008b92:	95 06       	st.w	r10[0x0],r6
      sbrk_base = brk;
80008b94:	c0 78       	rjmp	80008ba2 <_malloc_r+0x352>
80008b96:	ec 09 00 09 	add	r9,r6,r9
    else  /* Someone else called sbrk().  Count those bytes as sbrked_mem. */
      sbrked_mem += brk - (char*)old_end;
80008b9a:	e0 6a 09 a8 	mov	r10,2472
80008b9e:	10 19       	sub	r9,r8
80008ba0:	95 09       	st.w	r10[0x0],r9

    /* Guarantee alignment of first new chunk made from this space */
    front_misalign = (POINTER_UINT)chunk2mem(brk) & MALLOC_ALIGN_MASK;
80008ba2:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
    if (front_misalign > 0) 
80008ba6:	c0 40       	breq	80008bae <_malloc_r+0x35e>
    {
      correction = (MALLOC_ALIGNMENT) - front_misalign;
80008ba8:	f0 08 11 08 	rsub	r8,r8,8
      brk += correction;
80008bac:	10 06       	add	r6,r8
    }
    else
      correction = 0;

    /* Guarantee the next brk will be at a page boundary */
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
80008bae:	28 08       	sub	r8,-128
80008bb0:	ec 01 00 01 	add	r1,r6,r1

    /* Allocate correction */
    new_brk = (char*)(MORECORE (correction));
80008bb4:	0a 9c       	mov	r12,r5
    }
    else
      correction = 0;

    /* Guarantee the next brk will be at a page boundary */
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
80008bb6:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80008bba:	f0 01 01 01 	sub	r1,r8,r1

    /* Allocate correction */
    new_brk = (char*)(MORECORE (correction));
80008bbe:	02 9b       	mov	r11,r1
80008bc0:	c4 2d       	rcall	80008e44 <_sbrk_r>
80008bc2:	30 08       	mov	r8,0
    if (new_brk == (char*)(MORECORE_FAILURE))
80008bc4:	5b fc       	cp.w	r12,-1
80008bc6:	c0 31       	brne	80008bcc <_malloc_r+0x37c>
80008bc8:	0c 9c       	mov	r12,r6
80008bca:	10 91       	mov	r1,r8
80008bcc:	e0 68 09 a8 	mov	r8,2472

    sbrked_mem += correction;

    top = (mchunkptr)brk;
    top_size = new_brk - brk + correction;
    set_head(top, top_size | PREV_INUSE);
80008bd0:	0c 1c       	sub	r12,r6
	correction = 0;
	correction_failed = 1;
	new_brk = brk;
      }

    sbrked_mem += correction;
80008bd2:	70 09       	ld.w	r9,r8[0x0]

    top = (mchunkptr)brk;
    top_size = new_brk - brk + correction;
    set_head(top, top_size | PREV_INUSE);
80008bd4:	02 0c       	add	r12,r1
	new_brk = brk;
      }

    sbrked_mem += correction;

    top = (mchunkptr)brk;
80008bd6:	89 26       	st.w	r4[0x8],r6
    top_size = new_brk - brk + correction;
    set_head(top, top_size | PREV_INUSE);
80008bd8:	a1 ac       	sbr	r12,0x0
	correction = 0;
	correction_failed = 1;
	new_brk = brk;
      }

    sbrked_mem += correction;
80008bda:	12 01       	add	r1,r9

    top = (mchunkptr)brk;
    top_size = new_brk - brk + correction;
    set_head(top, top_size | PREV_INUSE);
80008bdc:	8d 1c       	st.w	r6[0x4],r12
	correction = 0;
	correction_failed = 1;
	new_brk = brk;
      }

    sbrked_mem += correction;
80008bde:	91 01       	st.w	r8[0x0],r1

    top = (mchunkptr)brk;
    top_size = new_brk - brk + correction;
    set_head(top, top_size | PREV_INUSE);

    if (old_top != initial_top)
80008be0:	08 33       	cp.w	r3,r4
80008be2:	c1 d0       	breq	80008c1c <_malloc_r+0x3cc>

      /* There must have been an intervening foreign sbrk call. */
      /* A double fencepost is necessary to prevent consolidation */

      /* If not enough space to do this, then user did something very wrong */
      if (old_top_size < MINSIZE) 
80008be4:	58 f2       	cp.w	r2,15
80008be6:	e0 8b 00 05 	brhi	80008bf0 <_malloc_r+0x3a0>
      {
        set_head(top, PREV_INUSE); /* will force null return from malloc */
80008bea:	30 18       	mov	r8,1
80008bec:	8d 18       	st.w	r6[0x4],r8
80008bee:	c2 88       	rjmp	80008c3e <_malloc_r+0x3ee>
        return;
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
      chunk_at_offset(old_top, old_top_size          )->size =
80008bf0:	30 59       	mov	r9,5
        set_head(top, PREV_INUSE); /* will force null return from malloc */
        return;
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
80008bf2:	20 c2       	sub	r2,12
80008bf4:	e0 12 ff f8 	andl	r2,0xfff8
      chunk_at_offset(old_top, old_top_size          )->size =
80008bf8:	e6 02 00 08 	add	r8,r3,r2
        SIZE_SZ|PREV_INUSE;
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
80008bfc:	91 29       	st.w	r8[0x8],r9
        return;
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
      chunk_at_offset(old_top, old_top_size          )->size =
80008bfe:	91 19       	st.w	r8[0x4],r9
        SIZE_SZ|PREV_INUSE;
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
        SIZE_SZ|PREV_INUSE;
      set_head_size(old_top, old_top_size);
80008c00:	66 18       	ld.w	r8,r3[0x4]
80008c02:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008c06:	e5 e8 10 08 	or	r8,r2,r8
80008c0a:	87 18       	st.w	r3[0x4],r8
      /* If possible, release the rest. */
      if (old_top_size >= MINSIZE) 
80008c0c:	58 f2       	cp.w	r2,15
80008c0e:	e0 88 00 07 	brls	80008c1c <_malloc_r+0x3cc>
        fREe(RCALL chunk2mem(old_top));
80008c12:	e6 cb ff f8 	sub	r11,r3,-8
80008c16:	0a 9c       	mov	r12,r5
80008c18:	e0 a0 02 64 	rcall	800090e0 <_free_r>
    }
  }

  if ((unsigned long)sbrked_mem > (unsigned long)max_sbrked_mem) 
80008c1c:	e0 68 09 a8 	mov	r8,2472
80008c20:	e0 69 09 a0 	mov	r9,2464
80008c24:	70 08       	ld.w	r8,r8[0x0]
80008c26:	72 0a       	ld.w	r10,r9[0x0]
80008c28:	14 38       	cp.w	r8,r10
    max_sbrked_mem = sbrked_mem;
80008c2a:	e0 88 00 03 	brls	80008c30 <_malloc_r+0x3e0>
#if HAVE_MMAP
  if ((unsigned long)(mmapped_mem + sbrked_mem) > (unsigned long)max_total_mem) 
    max_total_mem = mmapped_mem + sbrked_mem;
#else
  if ((unsigned long)(sbrked_mem) > (unsigned long)max_total_mem) 
80008c2e:	93 08       	st.w	r9[0x0],r8
80008c30:	e0 69 09 9c 	mov	r9,2460
80008c34:	72 0a       	ld.w	r10,r9[0x0]
    max_total_mem = sbrked_mem;
80008c36:	14 38       	cp.w	r8,r10
    }
#endif

    /* Try to extend */
    malloc_extend_top(RCALL nb);
    remainder_size = long_sub_size_t(chunksize(top), nb);
80008c38:	e0 88 00 03 	brls	80008c3e <_malloc_r+0x3ee>
80008c3c:	93 08       	st.w	r9[0x0],r8
80008c3e:	68 28       	ld.w	r8,r4[0x8]
    if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
80008c40:	70 18       	ld.w	r8,r8[0x4]
80008c42:	e0 18 ff fc 	andl	r8,0xfffc
80008c46:	0e 38       	cp.w	r8,r7
80008c48:	5f 39       	srlo	r9
80008c4a:	0e 18       	sub	r8,r7
80008c4c:	58 f8       	cp.w	r8,15
80008c4e:	5f aa       	srle	r10
    {
      MALLOC_UNLOCK;
80008c50:	f5 e9 10 09 	or	r9,r10,r9
80008c54:	c0 40       	breq	80008c5c <_malloc_r+0x40c>
80008c56:	0a 9c       	mov	r12,r5
80008c58:	cb 5c       	rcall	80008dc2 <__malloc_unlock>
80008c5a:	d8 3a       	popm	r0-r7,pc,r12=0
80008c5c:	68 26       	ld.w	r6,r4[0x8]
80008c5e:	a1 a8       	sbr	r8,0x0
80008c60:	0e 99       	mov	r9,r7
80008c62:	a1 a9       	sbr	r9,0x0
80008c64:	8d 19       	st.w	r6[0x4],r9
80008c66:	ec 07 00 07 	add	r7,r6,r7
80008c6a:	0a 9c       	mov	r12,r5
80008c6c:	89 27       	st.w	r4[0x8],r7
80008c6e:	8f 18       	st.w	r7[0x4],r8
80008c70:	ca 9c       	rcall	80008dc2 <__malloc_unlock>
80008c72:	ec cc ff f8 	sub	r12,r6,-8
80008c76:	d8 32       	popm	r0-r7,pc

80008c78 <memcpy>:
      return 0; /* propagate failure */
    }
  }

  victim = top;
80008c78:	58 8a       	cp.w	r10,8
  set_head(victim, nb | PREV_INUSE);
  top = chunk_at_offset(victim, nb);
  set_head(top, remainder_size | PREV_INUSE);
80008c7a:	c2 f5       	brlt	80008cd8 <memcpy+0x60>
      return 0; /* propagate failure */
    }
  }

  victim = top;
  set_head(victim, nb | PREV_INUSE);
80008c7c:	f9 eb 10 09 	or	r9,r12,r11
80008c80:	e2 19 00 03 	andl	r9,0x3,COH
  top = chunk_at_offset(victim, nb);
80008c84:	e0 81 00 97 	brne	80008db2 <memcpy+0x13a>
80008c88:	e0 4a 00 20 	cp.w	r10,32
  set_head(top, remainder_size | PREV_INUSE);
  check_malloced_chunk(victim, nb);
  MALLOC_UNLOCK;
80008c8c:	c3 b4       	brge	80008d02 <memcpy+0x8a>
80008c8e:	f4 08 14 02 	asr	r8,r10,0x2
  return chunk2mem(victim);
80008c92:	f0 09 11 08 	rsub	r9,r8,8

#endif /* MALLOC_PROVIDED */
}
80008c96:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80008c9a:	76 69       	ld.w	r9,r11[0x18]
80008c9c:	99 69       	st.w	r12[0x18],r9
80008c9e:	76 59       	ld.w	r9,r11[0x14]
80008ca0:	99 59       	st.w	r12[0x14],r9
80008ca2:	76 49       	ld.w	r9,r11[0x10]
80008ca4:	99 49       	st.w	r12[0x10],r9
80008ca6:	76 39       	ld.w	r9,r11[0xc]
80008ca8:	99 39       	st.w	r12[0xc],r9
80008caa:	76 29       	ld.w	r9,r11[0x8]
80008cac:	99 29       	st.w	r12[0x8],r9
80008cae:	76 19       	ld.w	r9,r11[0x4]
80008cb0:	99 19       	st.w	r12[0x4],r9
80008cb2:	76 09       	ld.w	r9,r11[0x0]
80008cb4:	99 09       	st.w	r12[0x0],r9
80008cb6:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80008cba:	f8 08 00 28 	add	r8,r12,r8<<0x2
80008cbe:	e0 1a 00 03 	andl	r10,0x3
80008cc2:	f4 0a 11 04 	rsub	r10,r10,4
80008cc6:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80008cca:	17 a9       	ld.ub	r9,r11[0x2]
80008ccc:	b0 a9       	st.b	r8[0x2],r9
80008cce:	17 99       	ld.ub	r9,r11[0x1]
80008cd0:	b0 99       	st.b	r8[0x1],r9
80008cd2:	17 89       	ld.ub	r9,r11[0x0]
80008cd4:	b0 89       	st.b	r8[0x0],r9
80008cd6:	5e fc       	retal	r12
80008cd8:	f4 0a 11 09 	rsub	r10,r10,9
80008cdc:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80008ce0:	17 f9       	ld.ub	r9,r11[0x7]
80008ce2:	b8 f9       	st.b	r12[0x7],r9
80008ce4:	17 e9       	ld.ub	r9,r11[0x6]
80008ce6:	b8 e9       	st.b	r12[0x6],r9
80008ce8:	17 d9       	ld.ub	r9,r11[0x5]
80008cea:	b8 d9       	st.b	r12[0x5],r9
80008cec:	17 c9       	ld.ub	r9,r11[0x4]
80008cee:	b8 c9       	st.b	r12[0x4],r9
80008cf0:	17 b9       	ld.ub	r9,r11[0x3]
80008cf2:	b8 b9       	st.b	r12[0x3],r9
80008cf4:	17 a9       	ld.ub	r9,r11[0x2]
80008cf6:	b8 a9       	st.b	r12[0x2],r9
80008cf8:	17 99       	ld.ub	r9,r11[0x1]
80008cfa:	b8 99       	st.b	r12[0x1],r9
80008cfc:	17 89       	ld.ub	r9,r11[0x0]
80008cfe:	b8 89       	st.b	r12[0x0],r9
80008d00:	5e fc       	retal	r12
80008d02:	eb cd 40 c0 	pushm	r6-r7,lr
80008d06:	18 99       	mov	r9,r12
80008d08:	22 0a       	sub	r10,32
80008d0a:	b7 07       	ld.d	r6,r11++
80008d0c:	b3 26       	st.d	r9++,r6
80008d0e:	b7 07       	ld.d	r6,r11++
80008d10:	b3 26       	st.d	r9++,r6
80008d12:	b7 07       	ld.d	r6,r11++
80008d14:	b3 26       	st.d	r9++,r6
80008d16:	b7 07       	ld.d	r6,r11++
80008d18:	b3 26       	st.d	r9++,r6
80008d1a:	22 0a       	sub	r10,32
80008d1c:	cf 74       	brge	80008d0a <memcpy+0x92>
80008d1e:	2f 0a       	sub	r10,-16
80008d20:	c0 65       	brlt	80008d2c <memcpy+0xb4>
80008d22:	b7 07       	ld.d	r6,r11++
80008d24:	b3 26       	st.d	r9++,r6
80008d26:	b7 07       	ld.d	r6,r11++
80008d28:	b3 26       	st.d	r9++,r6
80008d2a:	21 0a       	sub	r10,16
80008d2c:	5c 3a       	neg	r10
80008d2e:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80008d32:	d7 03       	nop
80008d34:	d7 03       	nop
80008d36:	f7 36 00 0e 	ld.ub	r6,r11[14]
80008d3a:	f3 66 00 0e 	st.b	r9[14],r6
80008d3e:	f7 36 00 0d 	ld.ub	r6,r11[13]
80008d42:	f3 66 00 0d 	st.b	r9[13],r6
80008d46:	f7 36 00 0c 	ld.ub	r6,r11[12]
80008d4a:	f3 66 00 0c 	st.b	r9[12],r6
80008d4e:	f7 36 00 0b 	ld.ub	r6,r11[11]
80008d52:	f3 66 00 0b 	st.b	r9[11],r6
80008d56:	f7 36 00 0a 	ld.ub	r6,r11[10]
80008d5a:	f3 66 00 0a 	st.b	r9[10],r6
80008d5e:	f7 36 00 09 	ld.ub	r6,r11[9]
80008d62:	f3 66 00 09 	st.b	r9[9],r6
80008d66:	f7 36 00 08 	ld.ub	r6,r11[8]
80008d6a:	f3 66 00 08 	st.b	r9[8],r6
80008d6e:	f7 36 00 07 	ld.ub	r6,r11[7]
80008d72:	f3 66 00 07 	st.b	r9[7],r6
80008d76:	f7 36 00 06 	ld.ub	r6,r11[6]
80008d7a:	f3 66 00 06 	st.b	r9[6],r6
80008d7e:	f7 36 00 05 	ld.ub	r6,r11[5]
80008d82:	f3 66 00 05 	st.b	r9[5],r6
80008d86:	f7 36 00 04 	ld.ub	r6,r11[4]
80008d8a:	f3 66 00 04 	st.b	r9[4],r6
80008d8e:	f7 36 00 03 	ld.ub	r6,r11[3]
80008d92:	f3 66 00 03 	st.b	r9[3],r6
80008d96:	f7 36 00 02 	ld.ub	r6,r11[2]
80008d9a:	f3 66 00 02 	st.b	r9[2],r6
80008d9e:	f7 36 00 01 	ld.ub	r6,r11[1]
80008da2:	f3 66 00 01 	st.b	r9[1],r6
80008da6:	f7 36 00 00 	ld.ub	r6,r11[0]
80008daa:	f3 66 00 00 	st.b	r9[0],r6
80008dae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80008db2:	20 1a       	sub	r10,1
80008db4:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80008db8:	f8 0a 0b 09 	st.b	r12[r10],r9
80008dbc:	cf b1       	brne	80008db2 <memcpy+0x13a>
80008dbe:	5e fc       	retal	r12

80008dc0 <__malloc_lock>:
     struct _reent *ptr;
{
#ifndef __SINGLE_THREAD__
  __lock_acquire_recursive (__malloc_lock_object);
#endif
}
80008dc0:	5e fc       	retal	r12

80008dc2 <__malloc_unlock>:
     struct _reent *ptr;
{
#ifndef __SINGLE_THREAD__
  __lock_release_recursive (__malloc_lock_object);
#endif
}
80008dc2:	5e fc       	retal	r12

80008dc4 <rand>:
  _REENT_RAND_NEXT(_REENT) = seed;
}

int
_DEFUN_VOID (rand)
{
80008dc4:	d4 21       	pushm	r4-r7,lr
  /* This multiplier was obtained from Knuth, D.E., "The Art of
     Computer Programming," Vol 2, Seminumerical Algorithms, Third
     Edition, Addison-Wesley, 1998, p. 106 (line 26) & p. 108 */
  _REENT_CHECK_RAND48(_REENT);
80008dc6:	e0 67 01 30 	mov	r7,304
80008dca:	6e 06       	ld.w	r6,r7[0x0]
80008dcc:	6c e8       	ld.w	r8,r6[0x38]
80008dce:	58 08       	cp.w	r8,0
80008dd0:	c1 a1       	brne	80008e04 <rand+0x40>
80008dd2:	31 8c       	mov	r12,24
80008dd4:	fe b0 fd 36 	rcall	80008840 <malloc>
80008dd8:	e0 69 33 0e 	mov	r9,13070
80008ddc:	8d ec       	st.w	r6[0x38],r12
80008dde:	6e 08       	ld.w	r8,r7[0x0]
80008de0:	70 e8       	ld.w	r8,r8[0x38]
80008de2:	b0 09       	st.h	r8[0x0],r9
80008de4:	fe 79 ab cd 	mov	r9,-21555
80008de8:	b0 19       	st.h	r8[0x2],r9
80008dea:	e0 69 12 34 	mov	r9,4660
80008dee:	b0 29       	st.h	r8[0x4],r9
80008df0:	fe 79 e6 6d 	mov	r9,-6547
80008df4:	b0 39       	st.h	r8[0x6],r9
80008df6:	fe 79 de ec 	mov	r9,-8468
80008dfa:	b0 49       	st.h	r8[0x8],r9
80008dfc:	30 59       	mov	r9,5
80008dfe:	b0 59       	st.h	r8[0xa],r9
80008e00:	30 b9       	mov	r9,11
  _REENT_RAND_NEXT(_REENT) = 
     _REENT_RAND_NEXT(_REENT) * __extension__ 6364136223846793005LL + 1;
80008e02:	b0 69       	st.h	r8[0xc],r9
80008e04:	e0 68 01 30 	mov	r8,304
80008e08:	70 08       	ld.w	r8,r8[0x0]
80008e0a:	70 e8       	ld.w	r8,r8[0x38]
80008e0c:	70 47       	ld.w	r7,r8[0x10]
80008e0e:	70 5c       	ld.w	r12,r8[0x14]
80008e10:	e0 69 7f 2d 	mov	r9,32557
80008e14:	ea 19 4c 95 	orh	r9,0x4c95
80008e18:	f8 09 06 4a 	mulu.d	r10,r12,r9
80008e1c:	ee 09 02 49 	mul	r9,r7,r9
80008e20:	e0 67 f4 2d 	mov	r7,62509
80008e24:	ea 17 58 51 	orh	r7,0x5851
80008e28:	30 16       	mov	r6,1
80008e2a:	f8 07 03 49 	mac	r9,r12,r7
80008e2e:	30 07       	mov	r7,0
80008e30:	f2 0b 00 0b 	add	r11,r9,r11
80008e34:	0c 0a       	add	r10,r6
{
  /* This multiplier was obtained from Knuth, D.E., "The Art of
     Computer Programming," Vol 2, Seminumerical Algorithms, Third
     Edition, Addison-Wesley, 1998, p. 106 (line 26) & p. 108 */
  _REENT_CHECK_RAND48(_REENT);
  _REENT_RAND_NEXT(_REENT) = 
80008e36:	f6 07 00 4b 	adc	r11,r11,r7
     _REENT_RAND_NEXT(_REENT) * __extension__ 6364136223846793005LL + 1;
  return (int)((_REENT_RAND_NEXT(_REENT) >> 32) & RAND_MAX);
}
80008e3a:	f0 eb 00 10 	st.d	r8[16],r10
80008e3e:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
80008e42:	d8 22       	popm	r4-r7,pc

80008e44 <_sbrk_r>:

void *
_DEFUN (_sbrk_r, (ptr, incr),
     struct _reent *ptr _AND
     ptrdiff_t incr)
{
80008e44:	d4 21       	pushm	r4-r7,lr
  char *ret;
  void *_sbrk(ptrdiff_t);

  errno = 0;
80008e46:	30 08       	mov	r8,0

void *
_DEFUN (_sbrk_r, (ptr, incr),
     struct _reent *ptr _AND
     ptrdiff_t incr)
{
80008e48:	18 97       	mov	r7,r12
  char *ret;
  void *_sbrk(ptrdiff_t);

  errno = 0;
80008e4a:	e0 66 1c b8 	mov	r6,7352
80008e4e:	16 9c       	mov	r12,r11
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
80008e50:	8d 08       	st.w	r6[0x0],r8
80008e52:	c2 7c       	rcall	80008ea0 <_sbrk>
80008e54:	5b fc       	cp.w	r12,-1
80008e56:	c0 51       	brne	80008e60 <_sbrk_r+0x1c>
80008e58:	6c 08       	ld.w	r8,r6[0x0]
80008e5a:	58 08       	cp.w	r8,0
80008e5c:	c0 20       	breq	80008e60 <_sbrk_r+0x1c>
    ptr->_errno = errno;
80008e5e:	8f 38       	st.w	r7[0xc],r8
  return ret;
}
80008e60:	d8 22       	popm	r4-r7,pc
80008e62:	d7 03       	nop

80008e64 <strncmp>:
	_CONST char *s1 _AND
	_CONST char *s2 _AND
	size_t n)
{
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  if (n == 0)
80008e64:	58 0a       	cp.w	r10,0
80008e66:	c0 81       	brne	80008e76 <strncmp+0x12>
80008e68:	5e fa       	retal	r10
    return 0;

  while (n-- != 0 && *s1 == *s2)
    {
      if (n == 0 || *s1 == '\0')
80008e6a:	58 0a       	cp.w	r10,0
80008e6c:	c0 b0       	breq	80008e82 <strncmp+0x1e>
80008e6e:	58 08       	cp.w	r8,0
80008e70:	c0 90       	breq	80008e82 <strncmp+0x1e>
	break;
      s1++;
80008e72:	2f fc       	sub	r12,-1
      s2++;
80008e74:	2f fb       	sub	r11,-1
{
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  if (n == 0)
    return 0;

  while (n-- != 0 && *s1 == *s2)
80008e76:	20 1a       	sub	r10,1
80008e78:	19 88       	ld.ub	r8,r12[0x0]
80008e7a:	17 89       	ld.ub	r9,r11[0x0]
80008e7c:	f0 09 18 00 	cp.b	r9,r8
80008e80:	cf 50       	breq	80008e6a <strncmp+0x6>
	break;
      s1++;
      s2++;
    }

  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
80008e82:	19 8c       	ld.ub	r12,r12[0x0]
80008e84:	17 88       	ld.ub	r8,r11[0x0]
80008e86:	10 1c       	sub	r12,r8
      s1++;
      s2++;
    }
  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
#endif /* not PREFER_SIZE_OVER_SPEED */
}
80008e88:	5e fc       	retal	r12

80008e8a <_init_startup>:

int  __attribute__((weak))
     _init_startup ()
{
  return 0;
}
80008e8a:	5e fd       	retal	0

80008e8c <_init_argv>:
}
  
void __attribute__((weak,naked))
     _init_argv (void *arg_mem_top)
{
  T2H_SYSCALL(T2H_SYSCALL_INIT_ARGV);
80008e8c:	30 e8       	mov	r8,14
80008e8e:	d6 73       	breakpoint
80008e90:	3f fc       	mov	r12,-1
80008e92:	35 8b       	mov	r11,88
  T2H_SYSCALL_RETURN();
80008e94:	5e fc       	retal	r12

80008e96 <_exit>:
}

void __attribute__((weak,naked))
     _exit( int code )
{
  T2H_SYSCALL(T2H_SYSCALL_EXIT);
80008e96:	30 d8       	mov	r8,13
80008e98:	d6 73       	breakpoint
80008e9a:	3f fc       	mov	r12,-1
80008e9c:	35 8b       	mov	r11,88
80008e9e:	c0 08       	rjmp	80008e9e <_exit+0x8>

80008ea0 <_sbrk>:
 
extern void __heap_start__, __heap_end__;

void * __attribute__((weak))
     _sbrk(int increment)
{
80008ea0:	d4 01       	pushm	lr
  static void *cur_heap_pos = 0;

  //Initialize cur_heap_pos
  if ( cur_heap_pos == 0 )
80008ea2:	e0 68 09 d0 	mov	r8,2512
80008ea6:	70 09       	ld.w	r9,r8[0x0]
80008ea8:	58 09       	cp.w	r9,0
    cur_heap_pos = &__heap_start__;
80008eaa:	c0 41       	brne	80008eb2 <_sbrk+0x12>
80008eac:	e0 69 1c c0 	mov	r9,7360
  
  if ( (cur_heap_pos + increment) <= &__heap_end__ ){
80008eb0:	91 09       	st.w	r8[0x0],r9
80008eb2:	e0 69 09 d0 	mov	r9,2512
80008eb6:	e0 6a 70 00 	mov	r10,28672
80008eba:	72 08       	ld.w	r8,r9[0x0]
80008ebc:	f0 0c 00 0c 	add	r12,r8,r12
    void *heap_pos = cur_heap_pos;
    cur_heap_pos += increment;
    return heap_pos;
80008ec0:	14 3c       	cp.w	r12,r10
    fprintf(stderr, "\tHeap start address\t= 0x%x\n", &__heap_start__);
    fprintf(stderr, "\tHeap end address\t= 0x%x\n", &__heap_end__);
    fprintf(stderr, "\tCurrent heap address\t= 0x%x\n", cur_heap_pos);
    fflush(stderr);
#endif
    errno = ENOMEM;
80008ec2:	e0 8b 00 04 	brhi	80008eca <_sbrk+0x2a>
80008ec6:	93 0c       	st.w	r9[0x0],r12
80008ec8:	c0 58       	rjmp	80008ed2 <_sbrk+0x32>
80008eca:	cb fc       	rcall	80009048 <__errno>
    return (void *)-1;
  }  
  return (void *)-1;
}
80008ecc:	30 c8       	mov	r8,12
80008ece:	99 08       	st.w	r12[0x0],r8
80008ed0:	3f f8       	mov	r8,-1
80008ed2:	10 9c       	mov	r12,r8
80008ed4:	d8 02       	popm	pc
80008ed6:	d7 03       	nop

80008ed8 <__register_exitproc>:
	(type, fn, arg, d),
	int type _AND
	void (*fn) (void) _AND
	void *arg _AND
	void *d)
{
80008ed8:	d4 31       	pushm	r0-r7,lr
  __LOCK_INIT(static, lock);

  __lock_acquire(lock);
#endif

  p = _GLOBAL_REENT->_atexit;
80008eda:	fe c8 f3 1e 	sub	r8,pc,-3298
80008ede:	18 97       	mov	r7,r12
	(type, fn, arg, d),
	int type _AND
	void (*fn) (void) _AND
	void *arg _AND
	void *d)
{
80008ee0:	70 03       	ld.w	r3,r8[0x0]
80008ee2:	16 96       	mov	r6,r11
80008ee4:	14 95       	mov	r5,r10
  __LOCK_INIT(static, lock);

  __lock_acquire(lock);
#endif

  p = _GLOBAL_REENT->_atexit;
80008ee6:	12 92       	mov	r2,r9
  if (p == NULL)
80008ee8:	67 24       	ld.w	r4,r3[0x48]
80008eea:	58 04       	cp.w	r4,0
    _GLOBAL_REENT->_atexit = p = &_GLOBAL_REENT->_atexit0;
80008eec:	c0 51       	brne	80008ef6 <__register_exitproc+0x1e>
80008eee:	e6 c4 ff b4 	sub	r4,r3,-76
80008ef2:	e7 44 00 48 	st.w	r3[72],r4
  if (p->_ind >= _ATEXIT_SIZE)
80008ef6:	68 18       	ld.w	r8,r4[0x4]
80008ef8:	59 f8       	cp.w	r8,31
80008efa:	e0 8a 00 0e 	brle	80008f16 <__register_exitproc+0x3e>
    {
#ifndef _ATEXIT_DYNAMIC_ALLOC
      return -1;
#else
      p = (struct _atexit *) malloc (sizeof *p);
80008efe:	e0 6c 00 8c 	mov	r12,140
80008f02:	fe b0 fc 9f 	rcall	80008840 <malloc>
      if (p == NULL)
80008f06:	18 94       	mov	r4,r12
	  __lock_release(lock);
#endif
	  return -1;
	}
      p->_ind = 0;
      p->_next = _GLOBAL_REENT->_atexit;
80008f08:	c3 90       	breq	80008f7a <__register_exitproc+0xa2>
80008f0a:	67 28       	ld.w	r8,r3[0x48]
      _GLOBAL_REENT->_atexit = p;
80008f0c:	99 08       	st.w	r12[0x0],r8
80008f0e:	e7 4c 00 48 	st.w	r3[72],r12
#ifndef __SINGLE_THREAD__
	  __lock_release(lock);
#endif
	  return -1;
	}
      p->_ind = 0;
80008f12:	30 08       	mov	r8,0
      p->_on_exit_args._is_cxa = 0;
#endif
#endif
    }

  if (type != __et_atexit)
80008f14:	99 18       	st.w	r12[0x4],r8
80008f16:	58 07       	cp.w	r7,0
    {
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
80008f18:	c2 80       	breq	80008f68 <__register_exitproc+0x90>
80008f1a:	e8 fc 00 88 	ld.w	r12,r4[136]
      if (args == NULL)
80008f1e:	58 0c       	cp.w	r12,0
	{
	  args = malloc (sizeof * p->_on_exit_args_ptr);
80008f20:	c0 d1       	brne	80008f3a <__register_exitproc+0x62>
80008f22:	e0 6c 01 08 	mov	r12,264
80008f26:	fe b0 fc 8d 	rcall	80008840 <malloc>
#ifndef __SINGLE_THREAD__
	      __lock_release(lock);
#endif
	      return -1;
	    }
	  args->_fntypes = 0;
80008f2a:	c2 80       	breq	80008f7a <__register_exitproc+0xa2>
	  args->_is_cxa = 0;
	  p->_on_exit_args_ptr = args;
80008f2c:	30 08       	mov	r8,0
80008f2e:	e9 4c 00 88 	st.w	r4[136],r12
	      __lock_release(lock);
#endif
	      return -1;
	    }
	  args->_fntypes = 0;
	  args->_is_cxa = 0;
80008f32:	f9 48 01 04 	st.w	r12[260],r8
#ifndef __SINGLE_THREAD__
	      __lock_release(lock);
#endif
	      return -1;
	    }
	  args->_fntypes = 0;
80008f36:	f9 48 01 00 	st.w	r12[256],r8
#else
      args = &p->_on_exit_args;
#endif
      args->_fnargs[p->_ind] = arg;
      args->_fntypes |= (1 << p->_ind);
      args->_dso_handle[p->_ind] = d;
80008f3a:	68 18       	ld.w	r8,r4[0x4]
80008f3c:	f0 c9 ff e0 	sub	r9,r8,-32
	  p->_on_exit_args_ptr = args;
	}
#else
      args = &p->_on_exit_args;
#endif
      args->_fnargs[p->_ind] = arg;
80008f40:	f8 08 09 25 	st.w	r12[r8<<0x2],r5
      args->_fntypes |= (1 << p->_ind);
      args->_dso_handle[p->_ind] = d;
80008f44:	f8 09 09 22 	st.w	r12[r9<<0x2],r2
	}
#else
      args = &p->_on_exit_args;
#endif
      args->_fnargs[p->_ind] = arg;
      args->_fntypes |= (1 << p->_ind);
80008f48:	30 1a       	mov	r10,1
80008f4a:	f8 f9 01 00 	ld.w	r9,r12[256]
80008f4e:	f4 08 09 48 	lsl	r8,r10,r8
80008f52:	10 49       	or	r9,r8
80008f54:	f9 49 01 00 	st.w	r12[256],r9
      args->_dso_handle[p->_ind] = d;
      if (type == __et_cxa)
80008f58:	58 27       	cp.w	r7,2
	args->_is_cxa |= (1 << p->_ind);
80008f5a:	c0 71       	brne	80008f68 <__register_exitproc+0x90>
80008f5c:	f8 f9 01 04 	ld.w	r9,r12[260]
80008f60:	f3 e8 10 08 	or	r8,r9,r8
80008f64:	f9 48 01 04 	st.w	r12[260],r8
    }
  p->_fns[p->_ind++] = fn;
80008f68:	68 18       	ld.w	r8,r4[0x4]
80008f6a:	30 0c       	mov	r12,0
80008f6c:	f0 c9 ff ff 	sub	r9,r8,-1
80008f70:	2f e8       	sub	r8,-2
80008f72:	89 19       	st.w	r4[0x4],r9
80008f74:	e8 08 09 26 	st.w	r4[r8<<0x2],r6
#ifndef __SINGLE_THREAD__
  __lock_release(lock);
#endif
  return 0;
80008f78:	d8 32       	popm	r0-r7,pc
80008f7a:	dc 3a       	popm	r0-r7,pc,r12=-1

80008f7c <__call_exitprocs>:
 */

void 
_DEFUN (__call_exitprocs, (code, d),
	int code _AND _PTR d)
{
80008f7c:	d4 31       	pushm	r0-r7,lr
80008f7e:	20 3d       	sub	sp,12
  int i;
  void (*fn) (void);

 restart:

  p = _GLOBAL_REENT->_atexit;
80008f80:	fe c8 f3 c4 	sub	r8,pc,-3132
80008f84:	50 2c       	stdsp	sp[0x8],r12
 */

void 
_DEFUN (__call_exitprocs, (code, d),
	int code _AND _PTR d)
{
80008f86:	70 08       	ld.w	r8,r8[0x0]
  int i;
  void (*fn) (void);

 restart:

  p = _GLOBAL_REENT->_atexit;
80008f88:	16 91       	mov	r1,r11
  lastp = &_GLOBAL_REENT->_atexit;
80008f8a:	50 08       	stdsp	sp[0x0],r8
80008f8c:	2b 88       	sub	r8,-72
  int i;
  void (*fn) (void);

 restart:

  p = _GLOBAL_REENT->_atexit;
80008f8e:	50 18       	stdsp	sp[0x4],r8
80008f90:	40 0a       	lddsp	r10,sp[0x0]
80008f92:	40 14       	lddsp	r4,sp[0x4]
  lastp = &_GLOBAL_REENT->_atexit;
  while (p)
80008f94:	75 27       	ld.w	r7,r10[0x48]
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
#endif
      for (n = p->_ind - 1; n >= 0; n--)
80008f96:	c5 48       	rjmp	8000903e <__call_exitprocs+0xc2>
  p = _GLOBAL_REENT->_atexit;
  lastp = &_GLOBAL_REENT->_atexit;
  while (p)
    {
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
80008f98:	6e 15       	ld.w	r5,r7[0x4]
80008f9a:	ee f6 00 88 	ld.w	r6,r7[136]
#else
      args = &p->_on_exit_args;
#endif
      for (n = p->_ind - 1; n >= 0; n--)
80008f9e:	ea c2 ff ff 	sub	r2,r5,-1
80008fa2:	20 15       	sub	r5,1
80008fa4:	ee 02 00 22 	add	r2,r7,r2<<0x2
80008fa8:	ec 05 00 23 	add	r3,r6,r5<<0x2
	  int ind;

	  i = 1 << n;

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
80008fac:	c3 48       	rjmp	80009014 <__call_exitprocs+0x98>
80008fae:	58 01       	cp.w	r1,0
80008fb0:	c0 70       	breq	80008fbe <__call_exitprocs+0x42>
80008fb2:	58 06       	cp.w	r6,0
80008fb4:	c2 d0       	breq	8000900e <__call_exitprocs+0x92>
80008fb6:	e6 f8 00 80 	ld.w	r8,r3[128]
80008fba:	02 38       	cp.w	r8,r1
	    continue;

	  /* Remove the function now to protect against the
	     function calling exit recursively.  */
	  fn = p->_fns[n];
	  if (n == p->_ind - 1)
80008fbc:	c2 91       	brne	8000900e <__call_exitprocs+0x92>
	  if (d && (!args || args->_dso_handle[n] != d))
	    continue;

	  /* Remove the function now to protect against the
	     function calling exit recursively.  */
	  fn = p->_fns[n];
80008fbe:	6e 19       	ld.w	r9,r7[0x4]
	  if (n == p->_ind - 1)
80008fc0:	64 08       	ld.w	r8,r2[0x0]
80008fc2:	20 19       	sub	r9,1
80008fc4:	12 35       	cp.w	r5,r9
	    p->_ind--;
80008fc6:	c0 31       	brne	80008fcc <__call_exitprocs+0x50>
80008fc8:	8f 15       	st.w	r7[0x4],r5
	  else
	    p->_fns[n] = NULL;
80008fca:	c0 38       	rjmp	80008fd0 <__call_exitprocs+0x54>
80008fcc:	30 09       	mov	r9,0

	  /* Skip functions that have already been called.  */
	  if (!fn)
80008fce:	85 09       	st.w	r2[0x0],r9
80008fd0:	58 08       	cp.w	r8,0
	    continue;

	  ind = p->_ind;
80008fd2:	c1 e0       	breq	8000900e <__call_exitprocs+0x92>

	  /* Call the function.  */
	  if (!args || (args->_fntypes & i) == 0)
80008fd4:	6e 10       	ld.w	r0,r7[0x4]
80008fd6:	58 06       	cp.w	r6,0
80008fd8:	c0 90       	breq	80008fea <__call_exitprocs+0x6e>
80008fda:	30 1a       	mov	r10,1
80008fdc:	f4 05 09 49 	lsl	r9,r10,r5
80008fe0:	ec fa 01 00 	ld.w	r10,r6[256]
80008fe4:	f3 ea 00 0a 	and	r10,r9,r10
	    fn ();
80008fe8:	c0 31       	brne	80008fee <__call_exitprocs+0x72>
	    continue;

	  ind = p->_ind;

	  /* Call the function.  */
	  if (!args || (args->_fntypes & i) == 0)
80008fea:	5d 18       	icall	r8
	    fn ();
	  else if ((args->_is_cxa & i) == 0)
80008fec:	c0 b8       	rjmp	80009002 <__call_exitprocs+0x86>
80008fee:	ec fa 01 04 	ld.w	r10,r6[260]
80008ff2:	66 0b       	ld.w	r11,r3[0x0]
80008ff4:	14 69       	and	r9,r10
	    (*((void (*)(int, _PTR)) fn))(code, args->_fnargs[n]);
80008ff6:	c0 41       	brne	80008ffe <__call_exitprocs+0x82>
80008ff8:	40 2c       	lddsp	r12,sp[0x8]
80008ffa:	5d 18       	icall	r8
	  else
	    (*((void (*)(_PTR)) fn))(args->_fnargs[n]);
80008ffc:	c0 38       	rjmp	80009002 <__call_exitprocs+0x86>
80008ffe:	16 9c       	mov	r12,r11

	  /* The function we called call atexit and registered another
	     function (or functions).  Call these new functions before
	     continuing with the already registered functions.  */
	  if (ind != p->_ind || *lastp != p)
80009000:	5d 18       	icall	r8
80009002:	6e 18       	ld.w	r8,r7[0x4]
80009004:	10 30       	cp.w	r0,r8
80009006:	cc 51       	brne	80008f90 <__call_exitprocs+0x14>
80009008:	68 08       	ld.w	r8,r4[0x0]
8000900a:	0e 38       	cp.w	r8,r7
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
#endif
      for (n = p->_ind - 1; n >= 0; n--)
8000900c:	cc 21       	brne	80008f90 <__call_exitprocs+0x14>
8000900e:	20 15       	sub	r5,1
80009010:	20 43       	sub	r3,4
80009012:	20 42       	sub	r2,4
80009014:	58 05       	cp.w	r5,0
#ifndef _ATEXIT_DYNAMIC_ALLOC
      break;
#else
      /* Move to the next block.  Free empty blocks except the last one,
	 which is part of _GLOBAL_REENT.  */
      if (p->_ind == 0 && p->_next)
80009016:	cc c4       	brge	80008fae <__call_exitprocs+0x32>
80009018:	6e 18       	ld.w	r8,r7[0x4]
8000901a:	58 08       	cp.w	r8,0
8000901c:	c0 f1       	brne	8000903a <__call_exitprocs+0xbe>
8000901e:	6e 08       	ld.w	r8,r7[0x0]
80009020:	58 08       	cp.w	r8,0
	{
	  /* Remove empty block from the list.  */
	  *lastp = p->_next;
80009022:	c0 c0       	breq	8000903a <__call_exitprocs+0xbe>
#ifdef _REENT_SMALL
	  if (args)
80009024:	89 08       	st.w	r4[0x0],r8
80009026:	58 06       	cp.w	r6,0
	    free (args);
80009028:	c0 40       	breq	80009030 <__call_exitprocs+0xb4>
8000902a:	0c 9c       	mov	r12,r6
8000902c:	fe b0 fc 02 	rcall	80008830 <free>
#endif
	  free (p);
80009030:	0e 9c       	mov	r12,r7
80009032:	fe b0 fb ff 	rcall	80008830 <free>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      break;
#else
      /* Move to the next block.  Free empty blocks except the last one,
	 which is part of _GLOBAL_REENT.  */
      if (p->_ind == 0 && p->_next)
80009036:	68 07       	ld.w	r7,r4[0x0]
	  free (p);
	  p = *lastp;
	}
      else
	{
	  lastp = &p->_next;
80009038:	c0 38       	rjmp	8000903e <__call_exitprocs+0xc2>
	  p = p->_next;
8000903a:	0e 94       	mov	r4,r7

 restart:

  p = _GLOBAL_REENT->_atexit;
  lastp = &_GLOBAL_REENT->_atexit;
  while (p)
8000903c:	6e 07       	ld.w	r7,r7[0x0]
8000903e:	58 07       	cp.w	r7,0
	  lastp = &p->_next;
	  p = p->_next;
	}
#endif
    }
}
80009040:	ca c1       	brne	80008f98 <__call_exitprocs+0x1c>
80009042:	2f dd       	sub	sp,-12
80009044:	d8 32       	popm	r0-r7,pc
80009046:	d7 03       	nop

80009048 <__errno>:

#ifndef _REENT_ONLY

int *
__errno ()
{
80009048:	e0 68 01 30 	mov	r8,304
  return &_REENT->_errno;
}
8000904c:	70 0c       	ld.w	r12,r8[0x0]
8000904e:	2f 4c       	sub	r12,-12
80009050:	5e fc       	retal	r12
80009052:	d7 03       	nop

80009054 <_malloc_trim_r>:
#if __STD_C
int malloc_trim(RARG size_t pad)
#else
int malloc_trim(RARG pad) RDECL size_t pad;
#endif
{
80009054:	d4 21       	pushm	r4-r7,lr
80009056:	16 95       	mov	r5,r11
80009058:	18 97       	mov	r7,r12
  char* current_brk;     /* address returned by pre-check sbrk call */
  char* new_brk;         /* address returned by negative sbrk call */

  unsigned long pagesz = malloc_getpagesize;

  MALLOC_LOCK;
8000905a:	cb 3e       	rcall	80008dc0 <__malloc_lock>
8000905c:	e0 64 01 34 	mov	r4,308

  top_size = chunksize(top);
80009060:	68 28       	ld.w	r8,r4[0x8]
80009062:	70 16       	ld.w	r6,r8[0x4]
80009064:	e0 16 ff fc 	andl	r6,0xfffc
  extra = ((top_size - pad - MINSIZE + (pagesz-1)) / pagesz - 1) * pagesz;
80009068:	ec c8 ff 91 	sub	r8,r6,-111
8000906c:	f0 05 01 05 	sub	r5,r8,r5
80009070:	e0 15 ff 80 	andl	r5,0xff80
80009074:	ea c5 00 80 	sub	r5,r5,128

  if (extra < (long)pagesz)  /* Not enough memory to release */
80009078:	e0 45 00 7f 	cp.w	r5,127
8000907c:	e0 8a 00 22 	brle	800090c0 <_malloc_trim_r+0x6c>
  }

  else
  {
    /* Test to make sure no one else called sbrk */
    current_brk = (char*)(MORECORE (0));
80009080:	30 0b       	mov	r11,0
80009082:	0e 9c       	mov	r12,r7
80009084:	ce 0e       	rcall	80008e44 <_sbrk_r>
80009086:	68 28       	ld.w	r8,r4[0x8]
    if (current_brk != (char*)(top) + top_size)
80009088:	0c 08       	add	r8,r6
8000908a:	10 3c       	cp.w	r12,r8
8000908c:	c1 a1       	brne	800090c0 <_malloc_trim_r+0x6c>
8000908e:	ea 0b 11 00 	rsub	r11,r5,0
      return 0;     /* Apparently we don't own memory; must fail */
    }

    else
    {
      new_brk = (char*)(MORECORE (-extra));
80009092:	0e 9c       	mov	r12,r7
80009094:	cd 8e       	rcall	80008e44 <_sbrk_r>
80009096:	5b fc       	cp.w	r12,-1
80009098:	c1 71       	brne	800090c6 <_malloc_trim_r+0x72>
      
      if (new_brk == (char*)(MORECORE_FAILURE)) /* sbrk failed? */
8000909a:	30 0b       	mov	r11,0
8000909c:	0e 9c       	mov	r12,r7
      {
        /* Try to figure out what we have */
        current_brk = (char*)(MORECORE (0));
8000909e:	cd 3e       	rcall	80008e44 <_sbrk_r>
800090a0:	68 28       	ld.w	r8,r4[0x8]
800090a2:	f8 08 01 09 	sub	r9,r12,r8
        top_size = current_brk - (char*)top;
800090a6:	58 f9       	cp.w	r9,15
800090a8:	e0 8a 00 0c 	brle	800090c0 <_malloc_trim_r+0x6c>
        if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
800090ac:	a1 a9       	sbr	r9,0x0
800090ae:	91 19       	st.w	r8[0x4],r9
800090b0:	e0 68 05 40 	mov	r8,1344
        {
          sbrked_mem = current_brk - sbrk_base;
          set_head(top, top_size | PREV_INUSE);
800090b4:	70 09       	ld.w	r9,r8[0x0]
        /* Try to figure out what we have */
        current_brk = (char*)(MORECORE (0));
        top_size = current_brk - (char*)top;
        if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
        {
          sbrked_mem = current_brk - sbrk_base;
800090b6:	e0 68 09 a8 	mov	r8,2472
800090ba:	f8 09 01 09 	sub	r9,r12,r9
800090be:	91 09       	st.w	r8[0x0],r9
800090c0:	0e 9c       	mov	r12,r7
          set_head(top, top_size | PREV_INUSE);
        }
        check_chunk(top);
	MALLOC_UNLOCK;
800090c2:	c8 0e       	rcall	80008dc2 <__malloc_unlock>
800090c4:	d8 2a       	popm	r4-r7,pc,r12=0
800090c6:	68 28       	ld.w	r8,r4[0x8]
800090c8:	0a 16       	sub	r6,r5
      }

      else
      {
        /* Success. Adjust top accordingly. */
        set_head(top, (top_size - extra) | PREV_INUSE);
800090ca:	a1 a6       	sbr	r6,0x0
800090cc:	91 16       	st.w	r8[0x4],r6
800090ce:	e0 68 09 a8 	mov	r8,2472
        sbrked_mem -= extra;
800090d2:	70 09       	ld.w	r9,r8[0x0]
800090d4:	0a 19       	sub	r9,r5
800090d6:	0e 9c       	mov	r12,r7
        check_chunk(top);
	MALLOC_UNLOCK;
800090d8:	91 09       	st.w	r8[0x0],r9

      else
      {
        /* Success. Adjust top accordingly. */
        set_head(top, (top_size - extra) | PREV_INUSE);
        sbrked_mem -= extra;
800090da:	c7 4e       	rcall	80008dc2 <__malloc_unlock>
        check_chunk(top);
	MALLOC_UNLOCK;
800090dc:	da 2a       	popm	r4-r7,pc,r12=1
800090de:	d7 03       	nop

800090e0 <_free_r>:
800090e0:	d4 21       	pushm	r4-r7,lr
800090e2:	16 96       	mov	r6,r11
800090e4:	18 97       	mov	r7,r12
800090e6:	58 0b       	cp.w	r11,0
800090e8:	e0 80 00 bc 	breq	80009260 <_free_r+0x180>
800090ec:	c6 ae       	rcall	80008dc0 <__malloc_lock>
800090ee:	20 86       	sub	r6,8
800090f0:	e0 6a 01 34 	mov	r10,308
800090f4:	6c 18       	ld.w	r8,r6[0x4]
800090f6:	74 2e       	ld.w	lr,r10[0x8]
800090f8:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
  }
#endif
  
  check_inuse_chunk(p);
  
  sz = hd & ~PREV_INUSE;
800090fc:	a1 c8       	cbr	r8,0x0
  next = chunk_at_offset(p, sz);
800090fe:	ec 08 00 09 	add	r9,r6,r8
  nextsz = chunksize(next);
80009102:	72 1b       	ld.w	r11,r9[0x4]
80009104:	e0 1b ff fc 	andl	r11,0xfffc
  
  if (next == top)                            /* merge with top */
80009108:	1c 39       	cp.w	r9,lr
8000910a:	c1 d1       	brne	80009144 <_free_r+0x64>
  {
    sz += nextsz;
8000910c:	f6 08 00 08 	add	r8,r11,r8

    if (!(hd & PREV_INUSE))                    /* consolidate backward */
80009110:	58 0c       	cp.w	r12,0
80009112:	c0 81       	brne	80009122 <_free_r+0x42>
    {
      prevsz = p->prev_size;
80009114:	6c 09       	ld.w	r9,r6[0x0]
      p = chunk_at_offset(p, -prevsz);
80009116:	12 16       	sub	r6,r9
      sz += prevsz;
80009118:	12 08       	add	r8,r9
      unlink(p, bck, fwd);
8000911a:	6c 3b       	ld.w	r11,r6[0xc]
8000911c:	6c 29       	ld.w	r9,r6[0x8]
8000911e:	97 29       	st.w	r11[0x8],r9
80009120:	93 3b       	st.w	r9[0xc],r11
    }

    set_head(p, sz | PREV_INUSE);
80009122:	10 99       	mov	r9,r8
    top = p;
80009124:	95 26       	st.w	r10[0x8],r6
      p = chunk_at_offset(p, -prevsz);
      sz += prevsz;
      unlink(p, bck, fwd);
    }

    set_head(p, sz | PREV_INUSE);
80009126:	a1 a9       	sbr	r9,0x0
80009128:	8d 19       	st.w	r6[0x4],r9
    top = p;
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
8000912a:	e0 69 05 3c 	mov	r9,1340
8000912e:	72 09       	ld.w	r9,r9[0x0]
80009130:	12 38       	cp.w	r8,r9
      malloc_trim(RCALL top_pad); 
80009132:	c0 63       	brcs	8000913e <_free_r+0x5e>
80009134:	e0 68 09 a4 	mov	r8,2468
80009138:	0e 9c       	mov	r12,r7
8000913a:	70 0b       	ld.w	r11,r8[0x0]
    MALLOC_UNLOCK;
8000913c:	c8 cf       	rcall	80009054 <_malloc_trim_r>
8000913e:	0e 9c       	mov	r12,r7
80009140:	c4 1e       	rcall	80008dc2 <__malloc_unlock>
    return;
80009142:	d8 22       	popm	r4-r7,pc
  }

  set_head(next, nextsz);                    /* clear inuse bit */
80009144:	93 1b       	st.w	r9[0x4],r11

  islr = 0;

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
80009146:	58 0c       	cp.w	r12,0
80009148:	c0 30       	breq	8000914e <_free_r+0x6e>
8000914a:	30 0c       	mov	r12,0
8000914c:	c0 e8       	rjmp	80009168 <_free_r+0x88>
  {
    prevsz = p->prev_size;
8000914e:	6c 0e       	ld.w	lr,r6[0x0]
    p = chunk_at_offset(p, -prevsz);
    sz += prevsz;
    
    if (p->fd == last_remainder)             /* keep as last_remainder */
80009150:	f4 c5 ff f8 	sub	r5,r10,-8

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
  {
    prevsz = p->prev_size;
    p = chunk_at_offset(p, -prevsz);
    sz += prevsz;
80009154:	1c 08       	add	r8,lr
  islr = 0;

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
  {
    prevsz = p->prev_size;
    p = chunk_at_offset(p, -prevsz);
80009156:	1c 16       	sub	r6,lr
    sz += prevsz;
    
    if (p->fd == last_remainder)             /* keep as last_remainder */
80009158:	6c 2e       	ld.w	lr,r6[0x8]
8000915a:	0a 3e       	cp.w	lr,r5
8000915c:	c0 31       	brne	80009162 <_free_r+0x82>
8000915e:	30 1c       	mov	r12,1
80009160:	c0 48       	rjmp	80009168 <_free_r+0x88>
      islr = 1;
    else
      unlink(p, bck, fwd);
80009162:	6c 35       	ld.w	r5,r6[0xc]
80009164:	8b 2e       	st.w	r5[0x8],lr
80009166:	9d 35       	st.w	lr[0xc],r5
  }
  
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
80009168:	f2 0b 00 0e 	add	lr,r9,r11
8000916c:	7c 1e       	ld.w	lr,lr[0x4]
8000916e:	ed be 00 00 	bld	lr,0x0
80009172:	c1 40       	breq	8000919a <_free_r+0xba>
  {
    sz += nextsz;
80009174:	16 08       	add	r8,r11
    
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
80009176:	58 0c       	cp.w	r12,0
80009178:	c0 d1       	brne	80009192 <_free_r+0xb2>
8000917a:	e0 6e 01 34 	mov	lr,308
8000917e:	72 2b       	ld.w	r11,r9[0x8]
80009180:	2f 8e       	sub	lr,-8
80009182:	1c 3b       	cp.w	r11,lr
    {
      islr = 1;
      link_last_remainder(p);   
80009184:	c0 71       	brne	80009192 <_free_r+0xb2>
80009186:	97 36       	st.w	r11[0xc],r6
80009188:	97 26       	st.w	r11[0x8],r6
8000918a:	8d 2b       	st.w	r6[0x8],r11
8000918c:	8d 3b       	st.w	r6[0xc],r11
  
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
  {
    sz += nextsz;
    
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
8000918e:	30 1c       	mov	r12,1
    {
      islr = 1;
      link_last_remainder(p);   
    }
    else
      unlink(next, bck, fwd);
80009190:	c0 58       	rjmp	8000919a <_free_r+0xba>
80009192:	72 2b       	ld.w	r11,r9[0x8]
80009194:	72 39       	ld.w	r9,r9[0xc]
80009196:	93 2b       	st.w	r9[0x8],r11
  }


  set_head(p, sz | PREV_INUSE);
80009198:	97 39       	st.w	r11[0xc],r9
  set_foot(p, sz);
8000919a:	10 99       	mov	r9,r8
8000919c:	ec 08 09 08 	st.w	r6[r8],r8
    else
      unlink(next, bck, fwd);
  }


  set_head(p, sz | PREV_INUSE);
800091a0:	a1 a9       	sbr	r9,0x0
  set_foot(p, sz);
  if (!islr)
800091a2:	8d 19       	st.w	r6[0x4],r9
800091a4:	58 0c       	cp.w	r12,0
    frontlink(p, sz, idx, bck, fwd);  
800091a6:	c5 a1       	brne	8000925a <_free_r+0x17a>
800091a8:	e0 48 01 ff 	cp.w	r8,511
800091ac:	e0 8b 00 13 	brhi	800091d2 <_free_r+0xf2>
800091b0:	a3 98       	lsr	r8,0x3
800091b2:	f4 08 00 39 	add	r9,r10,r8<<0x3
800091b6:	72 2b       	ld.w	r11,r9[0x8]
800091b8:	8d 39       	st.w	r6[0xc],r9
800091ba:	8d 2b       	st.w	r6[0x8],r11
800091bc:	97 36       	st.w	r11[0xc],r6
800091be:	93 26       	st.w	r9[0x8],r6
800091c0:	a3 48       	asr	r8,0x2
800091c2:	74 19       	ld.w	r9,r10[0x4]
800091c4:	30 1b       	mov	r11,1
800091c6:	f6 08 09 48 	lsl	r8,r11,r8
800091ca:	f3 e8 10 08 	or	r8,r9,r8
800091ce:	95 18       	st.w	r10[0x4],r8
800091d0:	c4 58       	rjmp	8000925a <_free_r+0x17a>
800091d2:	f0 0b 16 09 	lsr	r11,r8,0x9
800091d6:	58 4b       	cp.w	r11,4
800091d8:	e0 8b 00 06 	brhi	800091e4 <_free_r+0x104>
800091dc:	f0 0b 16 06 	lsr	r11,r8,0x6
800091e0:	2c 8b       	sub	r11,-56
800091e2:	c2 08       	rjmp	80009222 <_free_r+0x142>
800091e4:	59 4b       	cp.w	r11,20
800091e6:	e0 8b 00 04 	brhi	800091ee <_free_r+0x10e>
800091ea:	2a 5b       	sub	r11,-91
800091ec:	c1 b8       	rjmp	80009222 <_free_r+0x142>
800091ee:	e0 4b 00 54 	cp.w	r11,84
800091f2:	e0 8b 00 06 	brhi	800091fe <_free_r+0x11e>
800091f6:	f0 0b 16 0c 	lsr	r11,r8,0xc
800091fa:	29 2b       	sub	r11,-110
800091fc:	c1 38       	rjmp	80009222 <_free_r+0x142>
800091fe:	e0 4b 01 54 	cp.w	r11,340
80009202:	e0 8b 00 06 	brhi	8000920e <_free_r+0x12e>
80009206:	f0 0b 16 0f 	lsr	r11,r8,0xf
8000920a:	28 9b       	sub	r11,-119
8000920c:	c0 b8       	rjmp	80009222 <_free_r+0x142>
8000920e:	e0 4b 05 54 	cp.w	r11,1364
80009212:	e0 88 00 05 	brls	8000921c <_free_r+0x13c>
80009216:	37 eb       	mov	r11,126
80009218:	c0 58       	rjmp	80009222 <_free_r+0x142>
8000921a:	d7 03       	nop
8000921c:	f0 0b 16 12 	lsr	r11,r8,0x12
80009220:	28 4b       	sub	r11,-124
80009222:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80009226:	78 29       	ld.w	r9,r12[0x8]
80009228:	18 39       	cp.w	r9,r12
8000922a:	c0 e1       	brne	80009246 <_free_r+0x166>
8000922c:	74 18       	ld.w	r8,r10[0x4]
8000922e:	a3 4b       	asr	r11,0x2
80009230:	30 1c       	mov	r12,1
80009232:	f8 0b 09 4b 	lsl	r11,r12,r11
80009236:	f1 eb 10 0b 	or	r11,r8,r11
8000923a:	12 98       	mov	r8,r9
8000923c:	95 1b       	st.w	r10[0x4],r11
8000923e:	c0 a8       	rjmp	80009252 <_free_r+0x172>
80009240:	72 29       	ld.w	r9,r9[0x8]
80009242:	18 39       	cp.w	r9,r12
80009244:	c0 60       	breq	80009250 <_free_r+0x170>
80009246:	72 1a       	ld.w	r10,r9[0x4]
80009248:	e0 1a ff fc 	andl	r10,0xfffc
8000924c:	14 38       	cp.w	r8,r10
8000924e:	cf 93       	brcs	80009240 <_free_r+0x160>
80009250:	72 38       	ld.w	r8,r9[0xc]
80009252:	8d 38       	st.w	r6[0xc],r8
80009254:	8d 29       	st.w	r6[0x8],r9
80009256:	93 36       	st.w	r9[0xc],r6
80009258:	91 26       	st.w	r8[0x8],r6
8000925a:	0e 9c       	mov	r12,r7
8000925c:	fe b0 fd b3 	rcall	80008dc2 <__malloc_unlock>
80009260:	d8 22       	popm	r4-r7,pc
80009262:	d7 03       	nop

80009264 <__do_global_ctors_aux>:
80009264:	d4 21       	pushm	r4-r7,lr
80009266:	30 c7       	mov	r7,12
80009268:	c0 28       	rjmp	8000926c <__do_global_ctors_aux+0x8>
8000926a:	5d 18       	icall	r8
8000926c:	20 47       	sub	r7,4

  MALLOC_UNLOCK;
8000926e:	6e 08       	ld.w	r8,r7[0x0]
80009270:	5b f8       	cp.w	r8,-1
80009272:	cf c1       	brne	8000926a <__do_global_ctors_aux+0x6>
80009274:	d8 22       	popm	r4-r7,pc
80009276:	d7 03       	nop

Disassembly of section .exception:

80009400 <_evba>:
80009400:	c0 08       	rjmp	80009400 <_evba>
	...

80009404 <_handle_TLB_Multiple_Hit>:
80009404:	c0 08       	rjmp	80009404 <_handle_TLB_Multiple_Hit>
	...

80009408 <_handle_Bus_Error_Data_Fetch>:
80009408:	c0 08       	rjmp	80009408 <_handle_Bus_Error_Data_Fetch>
	...

8000940c <_handle_Bus_Error_Instruction_Fetch>:
8000940c:	c0 08       	rjmp	8000940c <_handle_Bus_Error_Instruction_Fetch>
	...

80009410 <_handle_NMI>:
80009410:	c0 08       	rjmp	80009410 <_handle_NMI>
	...

80009414 <_handle_Instruction_Address>:
80009414:	c0 08       	rjmp	80009414 <_handle_Instruction_Address>
	...

80009418 <_handle_ITLB_Protection>:
80009418:	c0 08       	rjmp	80009418 <_handle_ITLB_Protection>
	...

8000941c <_handle_Breakpoint>:
8000941c:	c0 08       	rjmp	8000941c <_handle_Breakpoint>
	...

80009420 <_handle_Illegal_Opcode>:
80009420:	c0 08       	rjmp	80009420 <_handle_Illegal_Opcode>
	...

80009424 <_handle_Unimplemented_Instruction>:
80009424:	c0 08       	rjmp	80009424 <_handle_Unimplemented_Instruction>
	...

80009428 <_handle_Privilege_Violation>:
80009428:	c0 08       	rjmp	80009428 <_handle_Privilege_Violation>
	...

8000942c <_handle_Floating_Point>:
8000942c:	c0 08       	rjmp	8000942c <_handle_Floating_Point>
	...

80009430 <_handle_Coprocessor_Absent>:
80009430:	c0 08       	rjmp	80009430 <_handle_Coprocessor_Absent>
	...

80009434 <_handle_Data_Address_Read>:
80009434:	c0 08       	rjmp	80009434 <_handle_Data_Address_Read>
	...

80009438 <_handle_Data_Address_Write>:
80009438:	c0 08       	rjmp	80009438 <_handle_Data_Address_Write>
	...

8000943c <_handle_DTLB_Protection_Read>:
8000943c:	c0 08       	rjmp	8000943c <_handle_DTLB_Protection_Read>
	...

80009440 <_handle_DTLB_Protection_Write>:
80009440:	c0 08       	rjmp	80009440 <_handle_DTLB_Protection_Write>
	...

80009444 <_handle_DTLB_Modified>:
80009444:	c0 08       	rjmp	80009444 <_handle_DTLB_Modified>
	...

80009450 <_handle_ITLB_Miss>:
80009450:	c0 08       	rjmp	80009450 <_handle_ITLB_Miss>
	...

80009460 <_handle_DTLB_Miss_Read>:
80009460:	c0 08       	rjmp	80009460 <_handle_DTLB_Miss_Read>
	...

80009470 <_handle_DTLB_Miss_Write>:
80009470:	c0 08       	rjmp	80009470 <_handle_DTLB_Miss_Write>
	...

80009500 <_handle_Supervisor_Call>:
80009500:	c0 08       	rjmp	80009500 <_handle_Supervisor_Call>
80009502:	d7 03       	nop

80009504 <_int0>:
80009504:	30 0c       	mov	r12,0
80009506:	fe b0 e8 9b 	rcall	8000663c <_get_interrupt_handler>
8000950a:	58 0c       	cp.w	r12,0
8000950c:	f8 0f 17 10 	movne	pc,r12
80009510:	d6 03       	rete

80009512 <_int1>:
80009512:	30 1c       	mov	r12,1
80009514:	fe b0 e8 94 	rcall	8000663c <_get_interrupt_handler>
80009518:	58 0c       	cp.w	r12,0
8000951a:	f8 0f 17 10 	movne	pc,r12
8000951e:	d6 03       	rete

80009520 <_int2>:
80009520:	30 2c       	mov	r12,2
80009522:	fe b0 e8 8d 	rcall	8000663c <_get_interrupt_handler>
80009526:	58 0c       	cp.w	r12,0
80009528:	f8 0f 17 10 	movne	pc,r12
8000952c:	d6 03       	rete

8000952e <_int3>:
8000952e:	30 3c       	mov	r12,3
80009530:	fe b0 e8 86 	rcall	8000663c <_get_interrupt_handler>
80009534:	58 0c       	cp.w	r12,0
80009536:	f8 0f 17 10 	movne	pc,r12
8000953a:	d6 03       	rete
8000953c:	d7 03       	nop
8000953e:	d7 03       	nop
80009540:	d7 03       	nop
80009542:	d7 03       	nop
80009544:	d7 03       	nop
80009546:	d7 03       	nop
80009548:	d7 03       	nop
8000954a:	d7 03       	nop
8000954c:	d7 03       	nop
8000954e:	d7 03       	nop
80009550:	d7 03       	nop
80009552:	d7 03       	nop
80009554:	d7 03       	nop
80009556:	d7 03       	nop
80009558:	d7 03       	nop
8000955a:	d7 03       	nop
8000955c:	d7 03       	nop
8000955e:	d7 03       	nop
80009560:	d7 03       	nop
80009562:	d7 03       	nop
80009564:	d7 03       	nop
80009566:	d7 03       	nop
80009568:	d7 03       	nop
8000956a:	d7 03       	nop
8000956c:	d7 03       	nop
8000956e:	d7 03       	nop
80009570:	d7 03       	nop
80009572:	d7 03       	nop
80009574:	d7 03       	nop
80009576:	d7 03       	nop
80009578:	d7 03       	nop
8000957a:	d7 03       	nop
8000957c:	d7 03       	nop
8000957e:	d7 03       	nop
80009580:	d7 03       	nop
80009582:	d7 03       	nop
80009584:	d7 03       	nop
80009586:	d7 03       	nop
80009588:	d7 03       	nop
8000958a:	d7 03       	nop
8000958c:	d7 03       	nop
8000958e:	d7 03       	nop
80009590:	d7 03       	nop
80009592:	d7 03       	nop
80009594:	d7 03       	nop
80009596:	d7 03       	nop
80009598:	d7 03       	nop
8000959a:	d7 03       	nop
8000959c:	d7 03       	nop
8000959e:	d7 03       	nop
800095a0:	d7 03       	nop
800095a2:	d7 03       	nop
800095a4:	d7 03       	nop
800095a6:	d7 03       	nop
800095a8:	d7 03       	nop
800095aa:	d7 03       	nop
800095ac:	d7 03       	nop
800095ae:	d7 03       	nop
800095b0:	d7 03       	nop
800095b2:	d7 03       	nop
800095b4:	d7 03       	nop
800095b6:	d7 03       	nop
800095b8:	d7 03       	nop
800095ba:	d7 03       	nop
800095bc:	d7 03       	nop
800095be:	d7 03       	nop
800095c0:	d7 03       	nop
800095c2:	d7 03       	nop
800095c4:	d7 03       	nop
800095c6:	d7 03       	nop
800095c8:	d7 03       	nop
800095ca:	d7 03       	nop
800095cc:	d7 03       	nop
800095ce:	d7 03       	nop
800095d0:	d7 03       	nop
800095d2:	d7 03       	nop
800095d4:	d7 03       	nop
800095d6:	d7 03       	nop
800095d8:	d7 03       	nop
800095da:	d7 03       	nop
800095dc:	d7 03       	nop
800095de:	d7 03       	nop
800095e0:	d7 03       	nop
800095e2:	d7 03       	nop
800095e4:	d7 03       	nop
800095e6:	d7 03       	nop
800095e8:	d7 03       	nop
800095ea:	d7 03       	nop
800095ec:	d7 03       	nop
800095ee:	d7 03       	nop
800095f0:	d7 03       	nop
800095f2:	d7 03       	nop
800095f4:	d7 03       	nop
800095f6:	d7 03       	nop
800095f8:	d7 03       	nop
800095fa:	d7 03       	nop
800095fc:	d7 03       	nop
800095fe:	d7 03       	nop

Disassembly of section .fini:

80009600 <_fini>:
80009600:	eb cd 40 40 	pushm	r6,lr
80009604:	48 26       	lddpc	r6,8000960c <_fini+0xc>
80009606:	1e 26       	rsub	r6,pc
80009608:	c0 48       	rjmp	80009610 <_fini+0x10>
8000960a:	d7 03       	nop
8000960c:	80 00       	ld.sh	r0,r0[0x0]
8000960e:	95 ea       	st.w	r10[0x38],r10
80009610:	fe b0 c5 38 	rcall	80002080 <__do_global_dtors_aux>
80009614:	e3 cd 80 40 	ldm	sp++,r6,pc
